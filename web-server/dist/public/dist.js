/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(83);


/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */,
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _vue = __webpack_require__(84);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _vueResource = __webpack_require__(87);
	
	var _vueResource2 = _interopRequireDefault(_vueResource);
	
	__webpack_require__(111);
	
	__webpack_require__(134);
	
	var _App = __webpack_require__(145);
	
	var _App2 = _interopRequireDefault(_App);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_vue2.default.use(_vueResource2.default);
	
	//components here
	
	//CSS
	
	
	new _vue2.default({
	    el: 'body',
	    components: {
	        App: _App2.default
	    }
	});

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, jQuery) {/*!
	 * Vue.js v1.0.28
	 * (c) 2016 Evan You
	 * Released under the MIT License.
	 */
	'use strict';
	
	function set(obj, key, val) {
	  if (hasOwn(obj, key)) {
	    obj[key] = val;
	    return;
	  }
	  if (obj._isVue) {
	    set(obj._data, key, val);
	    return;
	  }
	  var ob = obj.__ob__;
	  if (!ob) {
	    obj[key] = val;
	    return;
	  }
	  ob.convert(key, val);
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._proxy(key);
	      vm._digest();
	    }
	  }
	  return val;
	}
	
	/**
	 * Delete a property and trigger change if necessary.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 */
	
	function del(obj, key) {
	  if (!hasOwn(obj, key)) {
	    return;
	  }
	  delete obj[key];
	  var ob = obj.__ob__;
	  if (!ob) {
	    if (obj._isVue) {
	      delete obj._data[key];
	      obj._digest();
	    }
	    return;
	  }
	  ob.dep.notify();
	  if (ob.vms) {
	    var i = ob.vms.length;
	    while (i--) {
	      var vm = ob.vms[i];
	      vm._unproxy(key);
	      vm._digest();
	    }
	  }
	}
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	/**
	 * Check whether the object has the property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @return {Boolean}
	 */
	
	function hasOwn(obj, key) {
	  return hasOwnProperty.call(obj, key);
	}
	
	/**
	 * Check if an expression is a literal value.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	var literalValueRE = /^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/;
	
	function isLiteral(exp) {
	  return literalValueRE.test(exp);
	}
	
	/**
	 * Check if a string starts with $ or _
	 *
	 * @param {String} str
	 * @return {Boolean}
	 */
	
	function isReserved(str) {
	  var c = (str + '').charCodeAt(0);
	  return c === 0x24 || c === 0x5F;
	}
	
	/**
	 * Guard text output, make sure undefined outputs
	 * empty string
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function _toString(value) {
	  return value == null ? '' : value.toString();
	}
	
	/**
	 * Check and convert possible numeric strings to numbers
	 * before setting back to data
	 *
	 * @param {*} value
	 * @return {*|Number}
	 */
	
	function toNumber(value) {
	  if (typeof value !== 'string') {
	    return value;
	  } else {
	    var parsed = Number(value);
	    return isNaN(parsed) ? value : parsed;
	  }
	}
	
	/**
	 * Convert string boolean literals into real booleans.
	 *
	 * @param {*} value
	 * @return {*|Boolean}
	 */
	
	function toBoolean(value) {
	  return value === 'true' ? true : value === 'false' ? false : value;
	}
	
	/**
	 * Strip quotes from a string
	 *
	 * @param {String} str
	 * @return {String | false}
	 */
	
	function stripQuotes(str) {
	  var a = str.charCodeAt(0);
	  var b = str.charCodeAt(str.length - 1);
	  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;
	}
	
	/**
	 * Camelize a hyphen-delimited string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var camelizeRE = /-(\w)/g;
	
	function camelize(str) {
	  return str.replace(camelizeRE, toUpper);
	}
	
	function toUpper(_, c) {
	  return c ? c.toUpperCase() : '';
	}
	
	/**
	 * Hyphenate a camelCase string.
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var hyphenateRE = /([^-])([A-Z])/g;
	
	function hyphenate(str) {
	  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();
	}
	
	/**
	 * Converts hyphen/underscore/slash delimitered names into
	 * camelized classNames.
	 *
	 * e.g. my-component => MyComponent
	 *      some_else    => SomeElse
	 *      some/comp    => SomeComp
	 *
	 * @param {String} str
	 * @return {String}
	 */
	
	var classifyRE = /(?:^|[-_\/])(\w)/g;
	
	function classify(str) {
	  return str.replace(classifyRE, toUpper);
	}
	
	/**
	 * Simple bind, faster than native
	 *
	 * @param {Function} fn
	 * @param {Object} ctx
	 * @return {Function}
	 */
	
	function bind(fn, ctx) {
	  return function (a) {
	    var l = arguments.length;
	    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
	  };
	}
	
	/**
	 * Convert an Array-like object to a real Array.
	 *
	 * @param {Array-like} list
	 * @param {Number} [start] - start index
	 * @return {Array}
	 */
	
	function toArray(list, start) {
	  start = start || 0;
	  var i = list.length - start;
	  var ret = new Array(i);
	  while (i--) {
	    ret[i] = list[i + start];
	  }
	  return ret;
	}
	
	/**
	 * Mix properties into target object.
	 *
	 * @param {Object} to
	 * @param {Object} from
	 */
	
	function extend(to, from) {
	  var keys = Object.keys(from);
	  var i = keys.length;
	  while (i--) {
	    to[keys[i]] = from[keys[i]];
	  }
	  return to;
	}
	
	/**
	 * Quick object check - this is primarily used to tell
	 * Objects from primitive values when we know the value
	 * is a JSON-compliant type.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	function isObject(obj) {
	  return obj !== null && typeof obj === 'object';
	}
	
	/**
	 * Strict object type check. Only returns true
	 * for plain JavaScript objects.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var toString = Object.prototype.toString;
	var OBJECT_STRING = '[object Object]';
	
	function isPlainObject(obj) {
	  return toString.call(obj) === OBJECT_STRING;
	}
	
	/**
	 * Array type check.
	 *
	 * @param {*} obj
	 * @return {Boolean}
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * Define a property.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 * @param {Boolean} [enumerable]
	 */
	
	function def(obj, key, val, enumerable) {
	  Object.defineProperty(obj, key, {
	    value: val,
	    enumerable: !!enumerable,
	    writable: true,
	    configurable: true
	  });
	}
	
	/**
	 * Debounce a function so it only gets called after the
	 * input stops arriving after the given wait period.
	 *
	 * @param {Function} func
	 * @param {Number} wait
	 * @return {Function} - the debounced function
	 */
	
	function _debounce(func, wait) {
	  var timeout, args, context, timestamp, result;
	  var later = function later() {
	    var last = Date.now() - timestamp;
	    if (last < wait && last >= 0) {
	      timeout = setTimeout(later, wait - last);
	    } else {
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    }
	  };
	  return function () {
	    context = this;
	    args = arguments;
	    timestamp = Date.now();
	    if (!timeout) {
	      timeout = setTimeout(later, wait);
	    }
	    return result;
	  };
	}
	
	/**
	 * Manual indexOf because it's slightly faster than
	 * native.
	 *
	 * @param {Array} arr
	 * @param {*} obj
	 */
	
	function indexOf(arr, obj) {
	  var i = arr.length;
	  while (i--) {
	    if (arr[i] === obj) return i;
	  }
	  return -1;
	}
	
	/**
	 * Make a cancellable version of an async callback.
	 *
	 * @param {Function} fn
	 * @return {Function}
	 */
	
	function cancellable(fn) {
	  var cb = function cb() {
	    if (!cb.cancelled) {
	      return fn.apply(this, arguments);
	    }
	  };
	  cb.cancel = function () {
	    cb.cancelled = true;
	  };
	  return cb;
	}
	
	/**
	 * Check if two values are loosely equal - that is,
	 * if they are plain objects, do they have the same shape?
	 *
	 * @param {*} a
	 * @param {*} b
	 * @return {Boolean}
	 */
	
	function looseEqual(a, b) {
	  /* eslint-disable eqeqeq */
	  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);
	  /* eslint-enable eqeqeq */
	}
	
	var hasProto = ('__proto__' in {});
	
	// Browser environment sniffing
	var inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';
	
	// detect devtools
	var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
	
	// UA sniffing for working around browser-specific quirks
	var UA = inBrowser && window.navigator.userAgent.toLowerCase();
	var isIE = UA && UA.indexOf('trident') > 0;
	var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
	var isAndroid = UA && UA.indexOf('android') > 0;
	var isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);
	
	var transitionProp = undefined;
	var transitionEndEvent = undefined;
	var animationProp = undefined;
	var animationEndEvent = undefined;
	
	// Transition property/event sniffing
	if (inBrowser && !isIE9) {
	  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;
	  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;
	  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';
	  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';
	  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';
	  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';
	}
	
	/* istanbul ignore next */
	function isNative(Ctor) {
	  return (/native code/.test(Ctor.toString())
	  );
	}
	
	/**
	 * Defer a task to execute it asynchronously. Ideally this
	 * should be executed as a microtask, so we leverage
	 * MutationObserver if it's available, and fallback to
	 * setTimeout(0).
	 *
	 * @param {Function} cb
	 * @param {Object} ctx
	 */
	
	var nextTick = (function () {
	  var callbacks = [];
	  var pending = false;
	  var timerFunc = undefined;
	
	  function nextTickHandler() {
	    pending = false;
	    var copies = callbacks.slice(0);
	    callbacks.length = 0;
	    for (var i = 0; i < copies.length; i++) {
	      copies[i]();
	    }
	  }
	
	  // the nextTick behavior leverages the microtask queue, which can be accessed
	  // via either native Promise.then or MutationObserver.
	  // MutationObserver has wider support, however it is seriously bugged in
	  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
	  // completely stops working after triggering a few times... so, if native
	  // Promise is available, we will use it:
	  /* istanbul ignore if */
	  if (typeof Promise !== 'undefined' && isNative(Promise)) {
	    var p = Promise.resolve();
	    var noop = function noop() {};
	    timerFunc = function () {
	      p.then(nextTickHandler);
	      // in problematic UIWebViews, Promise.then doesn't completely break, but
	      // it can get stuck in a weird state where callbacks are pushed into the
	      // microtask queue but the queue isn't being flushed, until the browser
	      // needs to do some other work, e.g. handle a timer. Therefore we can
	      // "force" the microtask queue to be flushed by adding an empty timer.
	      if (isIOS) setTimeout(noop);
	    };
	  } else if (typeof MutationObserver !== 'undefined') {
	    // use MutationObserver where native Promise is not available,
	    // e.g. IE11, iOS7, Android 4.4
	    var counter = 1;
	    var observer = new MutationObserver(nextTickHandler);
	    var textNode = document.createTextNode(String(counter));
	    observer.observe(textNode, {
	      characterData: true
	    });
	    timerFunc = function () {
	      counter = (counter + 1) % 2;
	      textNode.data = String(counter);
	    };
	  } else {
	    // fallback to setTimeout
	    /* istanbul ignore next */
	    timerFunc = setTimeout;
	  }
	
	  return function (cb, ctx) {
	    var func = ctx ? function () {
	      cb.call(ctx);
	    } : cb;
	    callbacks.push(func);
	    if (pending) return;
	    pending = true;
	    timerFunc(nextTickHandler, 0);
	  };
	})();
	
	var _Set = undefined;
	/* istanbul ignore if */
	if (typeof Set !== 'undefined' && isNative(Set)) {
	  // use native Set when available.
	  _Set = Set;
	} else {
	  // a non-standard Set polyfill that only works with primitive keys.
	  _Set = function () {
	    this.set = Object.create(null);
	  };
	  _Set.prototype.has = function (key) {
	    return this.set[key] !== undefined;
	  };
	  _Set.prototype.add = function (key) {
	    this.set[key] = 1;
	  };
	  _Set.prototype.clear = function () {
	    this.set = Object.create(null);
	  };
	}
	
	function Cache(limit) {
	  this.size = 0;
	  this.limit = limit;
	  this.head = this.tail = undefined;
	  this._keymap = Object.create(null);
	}
	
	var p = Cache.prototype;
	
	/**
	 * Put <value> into the cache associated with <key>.
	 * Returns the entry which was removed to make room for
	 * the new entry. Otherwise undefined is returned.
	 * (i.e. if there was enough room already).
	 *
	 * @param {String} key
	 * @param {*} value
	 * @return {Entry|undefined}
	 */
	
	p.put = function (key, value) {
	  var removed;
	
	  var entry = this.get(key, true);
	  if (!entry) {
	    if (this.size === this.limit) {
	      removed = this.shift();
	    }
	    entry = {
	      key: key
	    };
	    this._keymap[key] = entry;
	    if (this.tail) {
	      this.tail.newer = entry;
	      entry.older = this.tail;
	    } else {
	      this.head = entry;
	    }
	    this.tail = entry;
	    this.size++;
	  }
	  entry.value = value;
	
	  return removed;
	};
	
	/**
	 * Purge the least recently used (oldest) entry from the
	 * cache. Returns the removed entry or undefined if the
	 * cache was empty.
	 */
	
	p.shift = function () {
	  var entry = this.head;
	  if (entry) {
	    this.head = this.head.newer;
	    this.head.older = undefined;
	    entry.newer = entry.older = undefined;
	    this._keymap[entry.key] = undefined;
	    this.size--;
	  }
	  return entry;
	};
	
	/**
	 * Get and register recent use of <key>. Returns the value
	 * associated with <key> or undefined if not in cache.
	 *
	 * @param {String} key
	 * @param {Boolean} returnEntry
	 * @return {Entry|*}
	 */
	
	p.get = function (key, returnEntry) {
	  var entry = this._keymap[key];
	  if (entry === undefined) return;
	  if (entry === this.tail) {
	    return returnEntry ? entry : entry.value;
	  }
	  // HEAD--------------TAIL
	  //   <.older   .newer>
	  //  <--- add direction --
	  //   A  B  C  <D>  E
	  if (entry.newer) {
	    if (entry === this.head) {
	      this.head = entry.newer;
	    }
	    entry.newer.older = entry.older; // C <-- E.
	  }
	  if (entry.older) {
	    entry.older.newer = entry.newer; // C. --> E
	  }
	  entry.newer = undefined; // D --x
	  entry.older = this.tail; // D. --> E
	  if (this.tail) {
	    this.tail.newer = entry; // E. <-- D
	  }
	  this.tail = entry;
	  return returnEntry ? entry : entry.value;
	};
	
	var cache$1 = new Cache(1000);
	var reservedArgRE = /^in$|^-?\d+/;
	
	/**
	 * Parser state
	 */
	
	var str;
	var dir;
	var len;
	var index;
	var chr;
	var state;
	var startState = 0;
	var filterState = 1;
	var filterNameState = 2;
	var filterArgState = 3;
	
	var doubleChr = 0x22;
	var singleChr = 0x27;
	var pipeChr = 0x7C;
	var escapeChr = 0x5C;
	var spaceChr = 0x20;
	
	var expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };
	var expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };
	
	function peek() {
	  return str.charCodeAt(index + 1);
	}
	
	function next() {
	  return str.charCodeAt(++index);
	}
	
	function eof() {
	  return index >= len;
	}
	
	function eatSpace() {
	  while (peek() === spaceChr) {
	    next();
	  }
	}
	
	function isStringStart(chr) {
	  return chr === doubleChr || chr === singleChr;
	}
	
	function isExpStart(chr) {
	  return expStartChr[chr];
	}
	
	function isExpEnd(start, chr) {
	  return expChrPair[start] === chr;
	}
	
	function parseString() {
	  var stringQuote = next();
	  var chr;
	  while (!eof()) {
	    chr = next();
	    // escape char
	    if (chr === escapeChr) {
	      next();
	    } else if (chr === stringQuote) {
	      break;
	    }
	  }
	}
	
	function parseSpecialExp(chr) {
	  var inExp = 0;
	  var startChr = chr;
	
	  while (!eof()) {
	    chr = peek();
	    if (isStringStart(chr)) {
	      parseString();
	      continue;
	    }
	
	    if (startChr === chr) {
	      inExp++;
	    }
	    if (isExpEnd(startChr, chr)) {
	      inExp--;
	    }
	
	    next();
	
	    if (inExp === 0) {
	      break;
	    }
	  }
	}
	
	/**
	 * syntax:
	 * expression | filterName  [arg  arg [| filterName arg arg]]
	 */
	
	function parseExpression() {
	  var start = index;
	  while (!eof()) {
	    chr = peek();
	    if (isStringStart(chr)) {
	      parseString();
	    } else if (isExpStart(chr)) {
	      parseSpecialExp(chr);
	    } else if (chr === pipeChr) {
	      next();
	      chr = peek();
	      if (chr === pipeChr) {
	        next();
	      } else {
	        if (state === startState || state === filterArgState) {
	          state = filterState;
	        }
	        break;
	      }
	    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {
	      eatSpace();
	      break;
	    } else {
	      if (state === filterState) {
	        state = filterNameState;
	      }
	      next();
	    }
	  }
	
	  return str.slice(start + 1, index) || null;
	}
	
	function parseFilterList() {
	  var filters = [];
	  while (!eof()) {
	    filters.push(parseFilter());
	  }
	  return filters;
	}
	
	function parseFilter() {
	  var filter = {};
	  var args;
	
	  state = filterState;
	  filter.name = parseExpression().trim();
	
	  state = filterArgState;
	  args = parseFilterArguments();
	
	  if (args.length) {
	    filter.args = args;
	  }
	  return filter;
	}
	
	function parseFilterArguments() {
	  var args = [];
	  while (!eof() && state !== filterState) {
	    var arg = parseExpression();
	    if (!arg) {
	      break;
	    }
	    args.push(processFilterArg(arg));
	  }
	
	  return args;
	}
	
	/**
	 * Check if an argument is dynamic and strip quotes.
	 *
	 * @param {String} arg
	 * @return {Object}
	 */
	
	function processFilterArg(arg) {
	  if (reservedArgRE.test(arg)) {
	    return {
	      value: toNumber(arg),
	      dynamic: false
	    };
	  } else {
	    var stripped = stripQuotes(arg);
	    var dynamic = stripped === arg;
	    return {
	      value: dynamic ? arg : stripped,
	      dynamic: dynamic
	    };
	  }
	}
	
	/**
	 * Parse a directive value and extract the expression
	 * and its filters into a descriptor.
	 *
	 * Example:
	 *
	 * "a + 1 | uppercase" will yield:
	 * {
	 *   expression: 'a + 1',
	 *   filters: [
	 *     { name: 'uppercase', args: null }
	 *   ]
	 * }
	 *
	 * @param {String} s
	 * @return {Object}
	 */
	
	function parseDirective(s) {
	  var hit = cache$1.get(s);
	  if (hit) {
	    return hit;
	  }
	
	  // reset parser state
	  str = s;
	  dir = {};
	  len = str.length;
	  index = -1;
	  chr = '';
	  state = startState;
	
	  var filters;
	
	  if (str.indexOf('|') < 0) {
	    dir.expression = str.trim();
	  } else {
	    dir.expression = parseExpression().trim();
	    filters = parseFilterList();
	    if (filters.length) {
	      dir.filters = filters;
	    }
	  }
	
	  cache$1.put(s, dir);
	  return dir;
	}
	
	var directive = Object.freeze({
	  parseDirective: parseDirective
	});
	
	var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;
	var cache = undefined;
	var tagRE = undefined;
	var htmlRE = undefined;
	/**
	 * Escape a string so it can be used in a RegExp
	 * constructor.
	 *
	 * @param {String} str
	 */
	
	function escapeRegex(str) {
	  return str.replace(regexEscapeRE, '\\$&');
	}
	
	function compileRegex() {
	  var open = escapeRegex(config.delimiters[0]);
	  var close = escapeRegex(config.delimiters[1]);
	  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);
	  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);
	  tagRE = new RegExp(unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\n)+?)' + close, 'g');
	  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\n)+?)' + unsafeClose + '$');
	  // reset cache
	  cache = new Cache(1000);
	}
	
	/**
	 * Parse a template text string into an array of tokens.
	 *
	 * @param {String} text
	 * @return {Array<Object> | null}
	 *               - {String} type
	 *               - {String} value
	 *               - {Boolean} [html]
	 *               - {Boolean} [oneTime]
	 */
	
	function parseText(text) {
	  if (!cache) {
	    compileRegex();
	  }
	  var hit = cache.get(text);
	  if (hit) {
	    return hit;
	  }
	  if (!tagRE.test(text)) {
	    return null;
	  }
	  var tokens = [];
	  var lastIndex = tagRE.lastIndex = 0;
	  var match, index, html, value, first, oneTime;
	  /* eslint-disable no-cond-assign */
	  while (match = tagRE.exec(text)) {
	    /* eslint-enable no-cond-assign */
	    index = match.index;
	    // push text token
	    if (index > lastIndex) {
	      tokens.push({
	        value: text.slice(lastIndex, index)
	      });
	    }
	    // tag token
	    html = htmlRE.test(match[0]);
	    value = html ? match[1] : match[2];
	    first = value.charCodeAt(0);
	    oneTime = first === 42; // *
	    value = oneTime ? value.slice(1) : value;
	    tokens.push({
	      tag: true,
	      value: value.trim(),
	      html: html,
	      oneTime: oneTime
	    });
	    lastIndex = index + match[0].length;
	  }
	  if (lastIndex < text.length) {
	    tokens.push({
	      value: text.slice(lastIndex)
	    });
	  }
	  cache.put(text, tokens);
	  return tokens;
	}
	
	/**
	 * Format a list of tokens into an expression.
	 * e.g. tokens parsed from 'a {{b}} c' can be serialized
	 * into one single expression as '"a " + b + " c"'.
	 *
	 * @param {Array} tokens
	 * @param {Vue} [vm]
	 * @return {String}
	 */
	
	function tokensToExp(tokens, vm) {
	  if (tokens.length > 1) {
	    return tokens.map(function (token) {
	      return formatToken(token, vm);
	    }).join('+');
	  } else {
	    return formatToken(tokens[0], vm, true);
	  }
	}
	
	/**
	 * Format a single token.
	 *
	 * @param {Object} token
	 * @param {Vue} [vm]
	 * @param {Boolean} [single]
	 * @return {String}
	 */
	
	function formatToken(token, vm, single) {
	  return token.tag ? token.oneTime && vm ? '"' + vm.$eval(token.value) + '"' : inlineFilters(token.value, single) : '"' + token.value + '"';
	}
	
	/**
	 * For an attribute with multiple interpolation tags,
	 * e.g. attr="some-{{thing | filter}}", in order to combine
	 * the whole thing into a single watchable expression, we
	 * have to inline those filters. This function does exactly
	 * that. This is a bit hacky but it avoids heavy changes
	 * to directive parser and watcher mechanism.
	 *
	 * @param {String} exp
	 * @param {Boolean} single
	 * @return {String}
	 */
	
	var filterRE = /[^|]\|[^|]/;
	function inlineFilters(exp, single) {
	  if (!filterRE.test(exp)) {
	    return single ? exp : '(' + exp + ')';
	  } else {
	    var dir = parseDirective(exp);
	    if (!dir.filters) {
	      return '(' + exp + ')';
	    } else {
	      return 'this._applyFilters(' + dir.expression + // value
	      ',null,' + // oldValue (null for read)
	      JSON.stringify(dir.filters) + // filter descriptors
	      ',false)'; // write?
	    }
	  }
	}
	
	var text = Object.freeze({
	  compileRegex: compileRegex,
	  parseText: parseText,
	  tokensToExp: tokensToExp
	});
	
	var delimiters = ['{{', '}}'];
	var unsafeDelimiters = ['{{{', '}}}'];
	
	var config = Object.defineProperties({
	
	  /**
	   * Whether to print debug messages.
	   * Also enables stack trace for warnings.
	   *
	   * @type {Boolean}
	   */
	
	  debug: false,
	
	  /**
	   * Whether to suppress warnings.
	   *
	   * @type {Boolean}
	   */
	
	  silent: false,
	
	  /**
	   * Whether to use async rendering.
	   */
	
	  async: true,
	
	  /**
	   * Whether to warn against errors caught when evaluating
	   * expressions.
	   */
	
	  warnExpressionErrors: true,
	
	  /**
	   * Whether to allow devtools inspection.
	   * Disabled by default in production builds.
	   */
	
	  devtools: process.env.NODE_ENV !== 'production',
	
	  /**
	   * Internal flag to indicate the delimiters have been
	   * changed.
	   *
	   * @type {Boolean}
	   */
	
	  _delimitersChanged: true,
	
	  /**
	   * List of asset types that a component can own.
	   *
	   * @type {Array}
	   */
	
	  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],
	
	  /**
	   * prop binding modes
	   */
	
	  _propBindingModes: {
	    ONE_WAY: 0,
	    TWO_WAY: 1,
	    ONE_TIME: 2
	  },
	
	  /**
	   * Max circular updates allowed in a batcher flush cycle.
	   */
	
	  _maxUpdateCount: 100
	
	}, {
	  delimiters: { /**
	                 * Interpolation delimiters. Changing these would trigger
	                 * the text parser to re-compile the regular expressions.
	                 *
	                 * @type {Array<String>}
	                 */
	
	    get: function get() {
	      return delimiters;
	    },
	    set: function set(val) {
	      delimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  },
	  unsafeDelimiters: {
	    get: function get() {
	      return unsafeDelimiters;
	    },
	    set: function set(val) {
	      unsafeDelimiters = val;
	      compileRegex();
	    },
	    configurable: true,
	    enumerable: true
	  }
	});
	
	var warn = undefined;
	var formatComponentName = undefined;
	
	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var hasConsole = typeof console !== 'undefined';
	
	    warn = function (msg, vm) {
	      if (hasConsole && !config.silent) {
	        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));
	      }
	    };
	
	    formatComponentName = function (vm) {
	      var name = vm._isVue ? vm.$options.name : vm.name;
	      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';
	    };
	  })();
	}
	
	/**
	 * Append with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function appendWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    target.appendChild(el);
	  }, vm, cb);
	}
	
	/**
	 * InsertBefore with transition.
	 *
	 * @param {Element} el
	 * @param {Element} target
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function beforeWithTransition(el, target, vm, cb) {
	  applyTransition(el, 1, function () {
	    before(el, target);
	  }, vm, cb);
	}
	
	/**
	 * Remove with transition.
	 *
	 * @param {Element} el
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function removeWithTransition(el, vm, cb) {
	  applyTransition(el, -1, function () {
	    remove(el);
	  }, vm, cb);
	}
	
	/**
	 * Apply transitions with an operation callback.
	 *
	 * @param {Element} el
	 * @param {Number} direction
	 *                  1: enter
	 *                 -1: leave
	 * @param {Function} op - the actual DOM operation
	 * @param {Vue} vm
	 * @param {Function} [cb]
	 */
	
	function applyTransition(el, direction, op, vm, cb) {
	  var transition = el.__v_trans;
	  if (!transition ||
	  // skip if there are no js hooks and CSS transition is
	  // not supported
	  !transition.hooks && !transitionEndEvent ||
	  // skip transitions for initial compile
	  !vm._isCompiled ||
	  // if the vm is being manipulated by a parent directive
	  // during the parent's compilation phase, skip the
	  // animation.
	  vm.$parent && !vm.$parent._isCompiled) {
	    op();
	    if (cb) cb();
	    return;
	  }
	  var action = direction > 0 ? 'enter' : 'leave';
	  transition[action](op, cb);
	}
	
	var transition = Object.freeze({
	  appendWithTransition: appendWithTransition,
	  beforeWithTransition: beforeWithTransition,
	  removeWithTransition: removeWithTransition,
	  applyTransition: applyTransition
	});
	
	/**
	 * Query an element selector if it's not an element already.
	 *
	 * @param {String|Element} el
	 * @return {Element}
	 */
	
	function query(el) {
	  if (typeof el === 'string') {
	    var selector = el;
	    el = document.querySelector(el);
	    if (!el) {
	      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);
	    }
	  }
	  return el;
	}
	
	/**
	 * Check if a node is in the document.
	 * Note: document.documentElement.contains should work here
	 * but always returns false for comment nodes in phantomjs,
	 * making unit tests difficult. This is fixed by doing the
	 * contains() check on the node's parentNode instead of
	 * the node itself.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function inDoc(node) {
	  if (!node) return false;
	  var doc = node.ownerDocument.documentElement;
	  var parent = node.parentNode;
	  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));
	}
	
	/**
	 * Get and remove an attribute from a node.
	 *
	 * @param {Node} node
	 * @param {String} _attr
	 */
	
	function getAttr(node, _attr) {
	  var val = node.getAttribute(_attr);
	  if (val !== null) {
	    node.removeAttribute(_attr);
	  }
	  return val;
	}
	
	/**
	 * Get an attribute with colon or v-bind: prefix.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {String|null}
	 */
	
	function getBindAttr(node, name) {
	  var val = getAttr(node, ':' + name);
	  if (val === null) {
	    val = getAttr(node, 'v-bind:' + name);
	  }
	  return val;
	}
	
	/**
	 * Check the presence of a bind attribute.
	 *
	 * @param {Node} node
	 * @param {String} name
	 * @return {Boolean}
	 */
	
	function hasBindAttr(node, name) {
	  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);
	}
	
	/**
	 * Insert el before target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function before(el, target) {
	  target.parentNode.insertBefore(el, target);
	}
	
	/**
	 * Insert el after target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function after(el, target) {
	  if (target.nextSibling) {
	    before(el, target.nextSibling);
	  } else {
	    target.parentNode.appendChild(el);
	  }
	}
	
	/**
	 * Remove el from DOM
	 *
	 * @param {Element} el
	 */
	
	function remove(el) {
	  el.parentNode.removeChild(el);
	}
	
	/**
	 * Prepend el to target
	 *
	 * @param {Element} el
	 * @param {Element} target
	 */
	
	function prepend(el, target) {
	  if (target.firstChild) {
	    before(el, target.firstChild);
	  } else {
	    target.appendChild(el);
	  }
	}
	
	/**
	 * Replace target with el
	 *
	 * @param {Element} target
	 * @param {Element} el
	 */
	
	function replace(target, el) {
	  var parent = target.parentNode;
	  if (parent) {
	    parent.replaceChild(el, target);
	  }
	}
	
	/**
	 * Add event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 * @param {Boolean} [useCapture]
	 */
	
	function on(el, event, cb, useCapture) {
	  el.addEventListener(event, cb, useCapture);
	}
	
	/**
	 * Remove event listener shorthand.
	 *
	 * @param {Element} el
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	function off(el, event, cb) {
	  el.removeEventListener(event, cb);
	}
	
	/**
	 * For IE9 compat: when both class and :class are present
	 * getAttribute('class') returns wrong value...
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getClass(el) {
	  var classname = el.className;
	  if (typeof classname === 'object') {
	    classname = classname.baseVal || '';
	  }
	  return classname;
	}
	
	/**
	 * In IE9, setAttribute('class') will result in empty class
	 * if the element also has the :class attribute; However in
	 * PhantomJS, setting `className` does not work on SVG elements...
	 * So we have to do a conditional check here.
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function setClass(el, cls) {
	  /* istanbul ignore if */
	  if (isIE9 && !/svg$/.test(el.namespaceURI)) {
	    el.className = cls;
	  } else {
	    el.setAttribute('class', cls);
	  }
	}
	
	/**
	 * Add class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function addClass(el, cls) {
	  if (el.classList) {
	    el.classList.add(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    if (cur.indexOf(' ' + cls + ' ') < 0) {
	      setClass(el, (cur + cls).trim());
	    }
	  }
	}
	
	/**
	 * Remove class with compatibility for IE & SVG
	 *
	 * @param {Element} el
	 * @param {String} cls
	 */
	
	function removeClass(el, cls) {
	  if (el.classList) {
	    el.classList.remove(cls);
	  } else {
	    var cur = ' ' + getClass(el) + ' ';
	    var tar = ' ' + cls + ' ';
	    while (cur.indexOf(tar) >= 0) {
	      cur = cur.replace(tar, ' ');
	    }
	    setClass(el, cur.trim());
	  }
	  if (!el.className) {
	    el.removeAttribute('class');
	  }
	}
	
	/**
	 * Extract raw content inside an element into a temporary
	 * container div
	 *
	 * @param {Element} el
	 * @param {Boolean} asFragment
	 * @return {Element|DocumentFragment}
	 */
	
	function extractContent(el, asFragment) {
	  var child;
	  var rawContent;
	  /* istanbul ignore if */
	  if (isTemplate(el) && isFragment(el.content)) {
	    el = el.content;
	  }
	  if (el.hasChildNodes()) {
	    trimNode(el);
	    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');
	    /* eslint-disable no-cond-assign */
	    while (child = el.firstChild) {
	      /* eslint-enable no-cond-assign */
	      rawContent.appendChild(child);
	    }
	  }
	  return rawContent;
	}
	
	/**
	 * Trim possible empty head/tail text and comment
	 * nodes inside a parent.
	 *
	 * @param {Node} node
	 */
	
	function trimNode(node) {
	  var child;
	  /* eslint-disable no-sequences */
	  while ((child = node.firstChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  while ((child = node.lastChild, isTrimmable(child))) {
	    node.removeChild(child);
	  }
	  /* eslint-enable no-sequences */
	}
	
	function isTrimmable(node) {
	  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);
	}
	
	/**
	 * Check if an element is a template tag.
	 * Note if the template appears inside an SVG its tagName
	 * will be in lowercase.
	 *
	 * @param {Element} el
	 */
	
	function isTemplate(el) {
	  return el.tagName && el.tagName.toLowerCase() === 'template';
	}
	
	/**
	 * Create an "anchor" for performing dom insertion/removals.
	 * This is used in a number of scenarios:
	 * - fragment instance
	 * - v-html
	 * - v-if
	 * - v-for
	 * - component
	 *
	 * @param {String} content
	 * @param {Boolean} persist - IE trashes empty textNodes on
	 *                            cloneNode(true), so in certain
	 *                            cases the anchor needs to be
	 *                            non-empty to be persisted in
	 *                            templates.
	 * @return {Comment|Text}
	 */
	
	function createAnchor(content, persist) {
	  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');
	  anchor.__v_anchor = true;
	  return anchor;
	}
	
	/**
	 * Find a component ref attribute that starts with $.
	 *
	 * @param {Element} node
	 * @return {String|undefined}
	 */
	
	var refRE = /^v-ref:/;
	
	function findRef(node) {
	  if (node.hasAttributes()) {
	    var attrs = node.attributes;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      var name = attrs[i].name;
	      if (refRE.test(name)) {
	        return camelize(name.replace(refRE, ''));
	      }
	    }
	  }
	}
	
	/**
	 * Map a function to a range of nodes .
	 *
	 * @param {Node} node
	 * @param {Node} end
	 * @param {Function} op
	 */
	
	function mapNodeRange(node, end, op) {
	  var next;
	  while (node !== end) {
	    next = node.nextSibling;
	    op(node);
	    node = next;
	  }
	  op(end);
	}
	
	/**
	 * Remove a range of nodes with transition, store
	 * the nodes in a fragment with correct ordering,
	 * and call callback when done.
	 *
	 * @param {Node} start
	 * @param {Node} end
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Function} cb
	 */
	
	function removeNodeRange(start, end, vm, frag, cb) {
	  var done = false;
	  var removed = 0;
	  var nodes = [];
	  mapNodeRange(start, end, function (node) {
	    if (node === end) done = true;
	    nodes.push(node);
	    removeWithTransition(node, vm, onRemoved);
	  });
	  function onRemoved() {
	    removed++;
	    if (done && removed >= nodes.length) {
	      for (var i = 0; i < nodes.length; i++) {
	        frag.appendChild(nodes[i]);
	      }
	      cb && cb();
	    }
	  }
	}
	
	/**
	 * Check if a node is a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isFragment(node) {
	  return node && node.nodeType === 11;
	}
	
	/**
	 * Get outerHTML of elements, taking care
	 * of SVG elements in IE as well.
	 *
	 * @param {Element} el
	 * @return {String}
	 */
	
	function getOuterHTML(el) {
	  if (el.outerHTML) {
	    return el.outerHTML;
	  } else {
	    var container = document.createElement('div');
	    container.appendChild(el.cloneNode(true));
	    return container.innerHTML;
	  }
	}
	
	var commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;
	var reservedTagRE = /^(slot|partial|component)$/i;
	
	var isUnknownElement = undefined;
	if (process.env.NODE_ENV !== 'production') {
	  isUnknownElement = function (el, tag) {
	    if (tag.indexOf('-') > -1) {
	      // http://stackoverflow.com/a/28210364/1070244
	      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
	    } else {
	      return (/HTMLUnknownElement/.test(el.toString()) &&
	        // Chrome returns unknown for several HTML5 elements.
	        // https://code.google.com/p/chromium/issues/detail?id=540526
	        // Firefox returns unknown for some "Interactive elements."
	        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)
	      );
	    }
	  };
	}
	
	/**
	 * Check if an element is a component, if yes return its
	 * component id.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function checkComponentAttr(el, options) {
	  var tag = el.tagName.toLowerCase();
	  var hasAttrs = el.hasAttributes();
	  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {
	    if (resolveAsset(options, 'components', tag)) {
	      return { id: tag };
	    } else {
	      var is = hasAttrs && getIsBinding(el, options);
	      if (is) {
	        return is;
	      } else if (process.env.NODE_ENV !== 'production') {
	        var expectedTag = options._componentNameMap && options._componentNameMap[tag];
	        if (expectedTag) {
	          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');
	        } else if (isUnknownElement(el, tag)) {
	          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the "name" option.');
	        }
	      }
	    }
	  } else if (hasAttrs) {
	    return getIsBinding(el, options);
	  }
	}
	
	/**
	 * Get "is" binding from an element.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Object|undefined}
	 */
	
	function getIsBinding(el, options) {
	  // dynamic syntax
	  var exp = el.getAttribute('is');
	  if (exp != null) {
	    if (resolveAsset(options, 'components', exp)) {
	      el.removeAttribute('is');
	      return { id: exp };
	    }
	  } else {
	    exp = getBindAttr(el, 'is');
	    if (exp != null) {
	      return { id: exp, dynamic: true };
	    }
	  }
	}
	
	/**
	 * Option overwriting strategies are functions that handle
	 * how to merge a parent option value and a child option
	 * value into the final value.
	 *
	 * All strategy functions follow the same signature:
	 *
	 * @param {*} parentVal
	 * @param {*} childVal
	 * @param {Vue} [vm]
	 */
	
	var strats = config.optionMergeStrategies = Object.create(null);
	
	/**
	 * Helper that recursively merges two data objects together.
	 */
	
	function mergeData(to, from) {
	  var key, toVal, fromVal;
	  for (key in from) {
	    toVal = to[key];
	    fromVal = from[key];
	    if (!hasOwn(to, key)) {
	      set(to, key, fromVal);
	    } else if (isObject(toVal) && isObject(fromVal)) {
	      mergeData(toVal, fromVal);
	    }
	  }
	  return to;
	}
	
	/**
	 * Data
	 */
	
	strats.data = function (parentVal, childVal, vm) {
	  if (!vm) {
	    // in a Vue.extend merge, both should be functions
	    if (!childVal) {
	      return parentVal;
	    }
	    if (typeof childVal !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('The "data" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	      return parentVal;
	    }
	    if (!parentVal) {
	      return childVal;
	    }
	    // when parentVal & childVal are both present,
	    // we need to return a function that returns the
	    // merged result of both functions... no need to
	    // check if parentVal is a function here because
	    // it has to be a function to pass previous merges.
	    return function mergedDataFn() {
	      return mergeData(childVal.call(this), parentVal.call(this));
	    };
	  } else if (parentVal || childVal) {
	    return function mergedInstanceDataFn() {
	      // instance merge
	      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;
	      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;
	      if (instanceData) {
	        return mergeData(instanceData, defaultData);
	      } else {
	        return defaultData;
	      }
	    };
	  }
	};
	
	/**
	 * El
	 */
	
	strats.el = function (parentVal, childVal, vm) {
	  if (!vm && childVal && typeof childVal !== 'function') {
	    process.env.NODE_ENV !== 'production' && warn('The "el" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);
	    return;
	  }
	  var ret = childVal || parentVal;
	  // invoke the element factory if this is instance merge
	  return vm && typeof ret === 'function' ? ret.call(vm) : ret;
	};
	
	/**
	 * Hooks and param attributes are merged as arrays.
	 */
	
	strats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {
	  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;
	};
	
	/**
	 * Assets
	 *
	 * When a vm is present (instance creation), we need to do
	 * a three-way merge between constructor options, instance
	 * options and parent options.
	 */
	
	function mergeAssets(parentVal, childVal) {
	  var res = Object.create(parentVal || null);
	  return childVal ? extend(res, guardArrayAssets(childVal)) : res;
	}
	
	config._assetTypes.forEach(function (type) {
	  strats[type + 's'] = mergeAssets;
	});
	
	/**
	 * Events & Watchers.
	 *
	 * Events & watchers hashes should not overwrite one
	 * another, so we merge them as arrays.
	 */
	
	strats.watch = strats.events = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = {};
	  extend(ret, parentVal);
	  for (var key in childVal) {
	    var parent = ret[key];
	    var child = childVal[key];
	    if (parent && !isArray(parent)) {
	      parent = [parent];
	    }
	    ret[key] = parent ? parent.concat(child) : [child];
	  }
	  return ret;
	};
	
	/**
	 * Other object hashes.
	 */
	
	strats.props = strats.methods = strats.computed = function (parentVal, childVal) {
	  if (!childVal) return parentVal;
	  if (!parentVal) return childVal;
	  var ret = Object.create(null);
	  extend(ret, parentVal);
	  extend(ret, childVal);
	  return ret;
	};
	
	/**
	 * Default strategy.
	 */
	
	var defaultStrat = function defaultStrat(parentVal, childVal) {
	  return childVal === undefined ? parentVal : childVal;
	};
	
	/**
	 * Make sure component options get converted to actual
	 * constructors.
	 *
	 * @param {Object} options
	 */
	
	function guardComponents(options) {
	  if (options.components) {
	    var components = options.components = guardArrayAssets(options.components);
	    var ids = Object.keys(components);
	    var def;
	    if (process.env.NODE_ENV !== 'production') {
	      var map = options._componentNameMap = {};
	    }
	    for (var i = 0, l = ids.length; i < l; i++) {
	      var key = ids[i];
	      if (commonTagRE.test(key) || reservedTagRE.test(key)) {
	        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);
	        continue;
	      }
	      // record a all lowercase <-> kebab-case mapping for
	      // possible custom element case error warning
	      if (process.env.NODE_ENV !== 'production') {
	        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);
	      }
	      def = components[key];
	      if (isPlainObject(def)) {
	        components[key] = Vue.extend(def);
	      }
	    }
	  }
	}
	
	/**
	 * Ensure all props option syntax are normalized into the
	 * Object-based format.
	 *
	 * @param {Object} options
	 */
	
	function guardProps(options) {
	  var props = options.props;
	  var i, val;
	  if (isArray(props)) {
	    options.props = {};
	    i = props.length;
	    while (i--) {
	      val = props[i];
	      if (typeof val === 'string') {
	        options.props[val] = null;
	      } else if (val.name) {
	        options.props[val.name] = val;
	      }
	    }
	  } else if (isPlainObject(props)) {
	    var keys = Object.keys(props);
	    i = keys.length;
	    while (i--) {
	      val = props[keys[i]];
	      if (typeof val === 'function') {
	        props[keys[i]] = { type: val };
	      }
	    }
	  }
	}
	
	/**
	 * Guard an Array-format assets option and converted it
	 * into the key-value Object format.
	 *
	 * @param {Object|Array} assets
	 * @return {Object}
	 */
	
	function guardArrayAssets(assets) {
	  if (isArray(assets)) {
	    var res = {};
	    var i = assets.length;
	    var asset;
	    while (i--) {
	      asset = assets[i];
	      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;
	      if (!id) {
	        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a "name" or "id" field.');
	      } else {
	        res[id] = asset;
	      }
	    }
	    return res;
	  }
	  return assets;
	}
	
	/**
	 * Merge two option objects into a new one.
	 * Core utility used in both instantiation and inheritance.
	 *
	 * @param {Object} parent
	 * @param {Object} child
	 * @param {Vue} [vm] - if vm is present, indicates this is
	 *                     an instantiation merge.
	 */
	
	function mergeOptions(parent, child, vm) {
	  guardComponents(child);
	  guardProps(child);
	  if (process.env.NODE_ENV !== 'production') {
	    if (child.propsData && !vm) {
	      warn('propsData can only be used as an instantiation option.');
	    }
	  }
	  var options = {};
	  var key;
	  if (child['extends']) {
	    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);
	  }
	  if (child.mixins) {
	    for (var i = 0, l = child.mixins.length; i < l; i++) {
	      var mixin = child.mixins[i];
	      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;
	      parent = mergeOptions(parent, mixinOptions, vm);
	    }
	  }
	  for (key in parent) {
	    mergeField(key);
	  }
	  for (key in child) {
	    if (!hasOwn(parent, key)) {
	      mergeField(key);
	    }
	  }
	  function mergeField(key) {
	    var strat = strats[key] || defaultStrat;
	    options[key] = strat(parent[key], child[key], vm, key);
	  }
	  return options;
	}
	
	/**
	 * Resolve an asset.
	 * This function is used because child instances need access
	 * to assets defined in its ancestor chain.
	 *
	 * @param {Object} options
	 * @param {String} type
	 * @param {String} id
	 * @param {Boolean} warnMissing
	 * @return {Object|Function}
	 */
	
	function resolveAsset(options, type, id, warnMissing) {
	  /* istanbul ignore if */
	  if (typeof id !== 'string') {
	    return;
	  }
	  var assets = options[type];
	  var camelizedId;
	  var res = assets[id] ||
	  // camelCase ID
	  assets[camelizedId = camelize(id)] ||
	  // Pascal Case ID
	  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];
	  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {
	    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);
	  }
	  return res;
	}
	
	var uid$1 = 0;
	
	/**
	 * A dep is an observable that can have multiple
	 * directives subscribing to it.
	 *
	 * @constructor
	 */
	function Dep() {
	  this.id = uid$1++;
	  this.subs = [];
	}
	
	// the current target watcher being evaluated.
	// this is globally unique because there could be only one
	// watcher being evaluated at any time.
	Dep.target = null;
	
	/**
	 * Add a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.addSub = function (sub) {
	  this.subs.push(sub);
	};
	
	/**
	 * Remove a directive subscriber.
	 *
	 * @param {Directive} sub
	 */
	
	Dep.prototype.removeSub = function (sub) {
	  this.subs.$remove(sub);
	};
	
	/**
	 * Add self as a dependency to the target watcher.
	 */
	
	Dep.prototype.depend = function () {
	  Dep.target.addDep(this);
	};
	
	/**
	 * Notify all subscribers of a new value.
	 */
	
	Dep.prototype.notify = function () {
	  // stablize the subscriber list first
	  var subs = toArray(this.subs);
	  for (var i = 0, l = subs.length; i < l; i++) {
	    subs[i].update();
	  }
	};
	
	var arrayProto = Array.prototype;
	var arrayMethods = Object.create(arrayProto)
	
	/**
	 * Intercept mutating methods and emit events
	 */
	
	;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {
	  // cache original method
	  var original = arrayProto[method];
	  def(arrayMethods, method, function mutator() {
	    // avoid leaking arguments:
	    // http://jsperf.com/closure-with-arguments
	    var i = arguments.length;
	    var args = new Array(i);
	    while (i--) {
	      args[i] = arguments[i];
	    }
	    var result = original.apply(this, args);
	    var ob = this.__ob__;
	    var inserted;
	    switch (method) {
	      case 'push':
	        inserted = args;
	        break;
	      case 'unshift':
	        inserted = args;
	        break;
	      case 'splice':
	        inserted = args.slice(2);
	        break;
	    }
	    if (inserted) ob.observeArray(inserted);
	    // notify change
	    ob.dep.notify();
	    return result;
	  });
	});
	
	/**
	 * Swap the element at the given index with a new value
	 * and emits corresponding event.
	 *
	 * @param {Number} index
	 * @param {*} val
	 * @return {*} - replaced element
	 */
	
	def(arrayProto, '$set', function $set(index, val) {
	  if (index >= this.length) {
	    this.length = Number(index) + 1;
	  }
	  return this.splice(index, 1, val)[0];
	});
	
	/**
	 * Convenience method to remove the element at given index or target element reference.
	 *
	 * @param {*} item
	 */
	
	def(arrayProto, '$remove', function $remove(item) {
	  /* istanbul ignore if */
	  if (!this.length) return;
	  var index = indexOf(this, item);
	  if (index > -1) {
	    return this.splice(index, 1);
	  }
	});
	
	var arrayKeys = Object.getOwnPropertyNames(arrayMethods);
	
	/**
	 * By default, when a reactive property is set, the new value is
	 * also converted to become reactive. However in certain cases, e.g.
	 * v-for scope alias and props, we don't want to force conversion
	 * because the value may be a nested value under a frozen data structure.
	 *
	 * So whenever we want to set a reactive property without forcing
	 * conversion on the new value, we wrap that call inside this function.
	 */
	
	var shouldConvert = true;
	
	function withoutConversion(fn) {
	  shouldConvert = false;
	  fn();
	  shouldConvert = true;
	}
	
	/**
	 * Observer class that are attached to each observed
	 * object. Once attached, the observer converts target
	 * object's property keys into getter/setters that
	 * collect dependencies and dispatches updates.
	 *
	 * @param {Array|Object} value
	 * @constructor
	 */
	
	function Observer(value) {
	  this.value = value;
	  this.dep = new Dep();
	  def(value, '__ob__', this);
	  if (isArray(value)) {
	    var augment = hasProto ? protoAugment : copyAugment;
	    augment(value, arrayMethods, arrayKeys);
	    this.observeArray(value);
	  } else {
	    this.walk(value);
	  }
	}
	
	// Instance methods
	
	/**
	 * Walk through each property and convert them into
	 * getter/setters. This method should only be called when
	 * value type is Object.
	 *
	 * @param {Object} obj
	 */
	
	Observer.prototype.walk = function (obj) {
	  var keys = Object.keys(obj);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    this.convert(keys[i], obj[keys[i]]);
	  }
	};
	
	/**
	 * Observe a list of Array items.
	 *
	 * @param {Array} items
	 */
	
	Observer.prototype.observeArray = function (items) {
	  for (var i = 0, l = items.length; i < l; i++) {
	    observe(items[i]);
	  }
	};
	
	/**
	 * Convert a property into getter/setter so we can emit
	 * the events when the property is accessed/changed.
	 *
	 * @param {String} key
	 * @param {*} val
	 */
	
	Observer.prototype.convert = function (key, val) {
	  defineReactive(this.value, key, val);
	};
	
	/**
	 * Add an owner vm, so that when $set/$delete mutations
	 * happen we can notify owner vms to proxy the keys and
	 * digest the watchers. This is only called when the object
	 * is observed as an instance's root $data.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.addVm = function (vm) {
	  (this.vms || (this.vms = [])).push(vm);
	};
	
	/**
	 * Remove an owner vm. This is called when the object is
	 * swapped out as an instance's $data object.
	 *
	 * @param {Vue} vm
	 */
	
	Observer.prototype.removeVm = function (vm) {
	  this.vms.$remove(vm);
	};
	
	// helpers
	
	/**
	 * Augment an target Object or Array by intercepting
	 * the prototype chain using __proto__
	 *
	 * @param {Object|Array} target
	 * @param {Object} src
	 */
	
	function protoAugment(target, src) {
	  /* eslint-disable no-proto */
	  target.__proto__ = src;
	  /* eslint-enable no-proto */
	}
	
	/**
	 * Augment an target Object or Array by defining
	 * hidden properties.
	 *
	 * @param {Object|Array} target
	 * @param {Object} proto
	 */
	
	function copyAugment(target, src, keys) {
	  for (var i = 0, l = keys.length; i < l; i++) {
	    var key = keys[i];
	    def(target, key, src[key]);
	  }
	}
	
	/**
	 * Attempt to create an observer instance for a value,
	 * returns the new observer if successfully observed,
	 * or the existing observer if the value already has one.
	 *
	 * @param {*} value
	 * @param {Vue} [vm]
	 * @return {Observer|undefined}
	 * @static
	 */
	
	function observe(value, vm) {
	  if (!value || typeof value !== 'object') {
	    return;
	  }
	  var ob;
	  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
	    ob = value.__ob__;
	  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
	    ob = new Observer(value);
	  }
	  if (ob && vm) {
	    ob.addVm(vm);
	  }
	  return ob;
	}
	
	/**
	 * Define a reactive property on an Object.
	 *
	 * @param {Object} obj
	 * @param {String} key
	 * @param {*} val
	 */
	
	function defineReactive(obj, key, val) {
	  var dep = new Dep();
	
	  var property = Object.getOwnPropertyDescriptor(obj, key);
	  if (property && property.configurable === false) {
	    return;
	  }
	
	  // cater for pre-defined getter/setters
	  var getter = property && property.get;
	  var setter = property && property.set;
	
	  var childOb = observe(val);
	  Object.defineProperty(obj, key, {
	    enumerable: true,
	    configurable: true,
	    get: function reactiveGetter() {
	      var value = getter ? getter.call(obj) : val;
	      if (Dep.target) {
	        dep.depend();
	        if (childOb) {
	          childOb.dep.depend();
	        }
	        if (isArray(value)) {
	          for (var e, i = 0, l = value.length; i < l; i++) {
	            e = value[i];
	            e && e.__ob__ && e.__ob__.dep.depend();
	          }
	        }
	      }
	      return value;
	    },
	    set: function reactiveSetter(newVal) {
	      var value = getter ? getter.call(obj) : val;
	      if (newVal === value) {
	        return;
	      }
	      if (setter) {
	        setter.call(obj, newVal);
	      } else {
	        val = newVal;
	      }
	      childOb = observe(newVal);
	      dep.notify();
	    }
	  });
	}
	
	
	
	var util = Object.freeze({
		defineReactive: defineReactive,
		set: set,
		del: del,
		hasOwn: hasOwn,
		isLiteral: isLiteral,
		isReserved: isReserved,
		_toString: _toString,
		toNumber: toNumber,
		toBoolean: toBoolean,
		stripQuotes: stripQuotes,
		camelize: camelize,
		hyphenate: hyphenate,
		classify: classify,
		bind: bind,
		toArray: toArray,
		extend: extend,
		isObject: isObject,
		isPlainObject: isPlainObject,
		def: def,
		debounce: _debounce,
		indexOf: indexOf,
		cancellable: cancellable,
		looseEqual: looseEqual,
		isArray: isArray,
		hasProto: hasProto,
		inBrowser: inBrowser,
		devtools: devtools,
		isIE: isIE,
		isIE9: isIE9,
		isAndroid: isAndroid,
		isIOS: isIOS,
		get transitionProp () { return transitionProp; },
		get transitionEndEvent () { return transitionEndEvent; },
		get animationProp () { return animationProp; },
		get animationEndEvent () { return animationEndEvent; },
		nextTick: nextTick,
		get _Set () { return _Set; },
		query: query,
		inDoc: inDoc,
		getAttr: getAttr,
		getBindAttr: getBindAttr,
		hasBindAttr: hasBindAttr,
		before: before,
		after: after,
		remove: remove,
		prepend: prepend,
		replace: replace,
		on: on,
		off: off,
		setClass: setClass,
		addClass: addClass,
		removeClass: removeClass,
		extractContent: extractContent,
		trimNode: trimNode,
		isTemplate: isTemplate,
		createAnchor: createAnchor,
		findRef: findRef,
		mapNodeRange: mapNodeRange,
		removeNodeRange: removeNodeRange,
		isFragment: isFragment,
		getOuterHTML: getOuterHTML,
		mergeOptions: mergeOptions,
		resolveAsset: resolveAsset,
		checkComponentAttr: checkComponentAttr,
		commonTagRE: commonTagRE,
		reservedTagRE: reservedTagRE,
		get warn () { return warn; }
	});
	
	var uid = 0;
	
	function initMixin (Vue) {
	  /**
	   * The main init sequence. This is called for every
	   * instance, including ones that are created from extended
	   * constructors.
	   *
	   * @param {Object} options - this options object should be
	   *                           the result of merging class
	   *                           options and the options passed
	   *                           in to the constructor.
	   */
	
	  Vue.prototype._init = function (options) {
	    options = options || {};
	
	    this.$el = null;
	    this.$parent = options.parent;
	    this.$root = this.$parent ? this.$parent.$root : this;
	    this.$children = [];
	    this.$refs = {}; // child vm references
	    this.$els = {}; // element references
	    this._watchers = []; // all watchers as an array
	    this._directives = []; // all directives
	
	    // a uid
	    this._uid = uid++;
	
	    // a flag to avoid this being observed
	    this._isVue = true;
	
	    // events bookkeeping
	    this._events = {}; // registered callbacks
	    this._eventsCount = {}; // for $broadcast optimization
	
	    // fragment instance properties
	    this._isFragment = false;
	    this._fragment = // @type {DocumentFragment}
	    this._fragmentStart = // @type {Text|Comment}
	    this._fragmentEnd = null; // @type {Text|Comment}
	
	    // lifecycle state
	    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;
	    this._unlinkFn = null;
	
	    // context:
	    // if this is a transcluded component, context
	    // will be the common parent vm of this instance
	    // and its host.
	    this._context = options._context || this.$parent;
	
	    // scope:
	    // if this is inside an inline v-for, the scope
	    // will be the intermediate scope created for this
	    // repeat fragment. this is used for linking props
	    // and container directives.
	    this._scope = options._scope;
	
	    // fragment:
	    // if this instance is compiled inside a Fragment, it
	    // needs to register itself as a child of that fragment
	    // for attach/detach to work properly.
	    this._frag = options._frag;
	    if (this._frag) {
	      this._frag.children.push(this);
	    }
	
	    // push self into parent / transclusion host
	    if (this.$parent) {
	      this.$parent.$children.push(this);
	    }
	
	    // merge options.
	    options = this.$options = mergeOptions(this.constructor.options, options, this);
	
	    // set ref
	    this._updateRef();
	
	    // initialize data as empty object.
	    // it will be filled up in _initData().
	    this._data = {};
	
	    // call init hook
	    this._callHook('init');
	
	    // initialize data observation and scope inheritance.
	    this._initState();
	
	    // setup event system and option events.
	    this._initEvents();
	
	    // call created hook
	    this._callHook('created');
	
	    // if `el` option is passed, start compilation.
	    if (options.el) {
	      this.$mount(options.el);
	    }
	  };
	}
	
	var pathCache = new Cache(1000);
	
	// actions
	var APPEND = 0;
	var PUSH = 1;
	var INC_SUB_PATH_DEPTH = 2;
	var PUSH_SUB_PATH = 3;
	
	// states
	var BEFORE_PATH = 0;
	var IN_PATH = 1;
	var BEFORE_IDENT = 2;
	var IN_IDENT = 3;
	var IN_SUB_PATH = 4;
	var IN_SINGLE_QUOTE = 5;
	var IN_DOUBLE_QUOTE = 6;
	var AFTER_PATH = 7;
	var ERROR = 8;
	
	var pathStateMachine = [];
	
	pathStateMachine[BEFORE_PATH] = {
	  'ws': [BEFORE_PATH],
	  'ident': [IN_IDENT, APPEND],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[IN_PATH] = {
	  'ws': [IN_PATH],
	  '.': [BEFORE_IDENT],
	  '[': [IN_SUB_PATH],
	  'eof': [AFTER_PATH]
	};
	
	pathStateMachine[BEFORE_IDENT] = {
	  'ws': [BEFORE_IDENT],
	  'ident': [IN_IDENT, APPEND]
	};
	
	pathStateMachine[IN_IDENT] = {
	  'ident': [IN_IDENT, APPEND],
	  '0': [IN_IDENT, APPEND],
	  'number': [IN_IDENT, APPEND],
	  'ws': [IN_PATH, PUSH],
	  '.': [BEFORE_IDENT, PUSH],
	  '[': [IN_SUB_PATH, PUSH],
	  'eof': [AFTER_PATH, PUSH]
	};
	
	pathStateMachine[IN_SUB_PATH] = {
	  "'": [IN_SINGLE_QUOTE, APPEND],
	  '"': [IN_DOUBLE_QUOTE, APPEND],
	  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],
	  ']': [IN_PATH, PUSH_SUB_PATH],
	  'eof': ERROR,
	  'else': [IN_SUB_PATH, APPEND]
	};
	
	pathStateMachine[IN_SINGLE_QUOTE] = {
	  "'": [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_SINGLE_QUOTE, APPEND]
	};
	
	pathStateMachine[IN_DOUBLE_QUOTE] = {
	  '"': [IN_SUB_PATH, APPEND],
	  'eof': ERROR,
	  'else': [IN_DOUBLE_QUOTE, APPEND]
	};
	
	/**
	 * Determine the type of a character in a keypath.
	 *
	 * @param {Char} ch
	 * @return {String} type
	 */
	
	function getPathCharType(ch) {
	  if (ch === undefined) {
	    return 'eof';
	  }
	
	  var code = ch.charCodeAt(0);
	
	  switch (code) {
	    case 0x5B: // [
	    case 0x5D: // ]
	    case 0x2E: // .
	    case 0x22: // "
	    case 0x27: // '
	    case 0x30:
	      // 0
	      return ch;
	
	    case 0x5F: // _
	    case 0x24:
	      // $
	      return 'ident';
	
	    case 0x20: // Space
	    case 0x09: // Tab
	    case 0x0A: // Newline
	    case 0x0D: // Return
	    case 0xA0: // No-break space
	    case 0xFEFF: // Byte Order Mark
	    case 0x2028: // Line Separator
	    case 0x2029:
	      // Paragraph Separator
	      return 'ws';
	  }
	
	  // a-z, A-Z
	  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {
	    return 'ident';
	  }
	
	  // 1-9
	  if (code >= 0x31 && code <= 0x39) {
	    return 'number';
	  }
	
	  return 'else';
	}
	
	/**
	 * Format a subPath, return its plain form if it is
	 * a literal string or number. Otherwise prepend the
	 * dynamic indicator (*).
	 *
	 * @param {String} path
	 * @return {String}
	 */
	
	function formatSubPath(path) {
	  var trimmed = path.trim();
	  // invalid leading 0
	  if (path.charAt(0) === '0' && isNaN(path)) {
	    return false;
	  }
	  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;
	}
	
	/**
	 * Parse a string path into an array of segments
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parse(path) {
	  var keys = [];
	  var index = -1;
	  var mode = BEFORE_PATH;
	  var subPathDepth = 0;
	  var c, newChar, key, type, transition, action, typeMap;
	
	  var actions = [];
	
	  actions[PUSH] = function () {
	    if (key !== undefined) {
	      keys.push(key);
	      key = undefined;
	    }
	  };
	
	  actions[APPEND] = function () {
	    if (key === undefined) {
	      key = newChar;
	    } else {
	      key += newChar;
	    }
	  };
	
	  actions[INC_SUB_PATH_DEPTH] = function () {
	    actions[APPEND]();
	    subPathDepth++;
	  };
	
	  actions[PUSH_SUB_PATH] = function () {
	    if (subPathDepth > 0) {
	      subPathDepth--;
	      mode = IN_SUB_PATH;
	      actions[APPEND]();
	    } else {
	      subPathDepth = 0;
	      key = formatSubPath(key);
	      if (key === false) {
	        return false;
	      } else {
	        actions[PUSH]();
	      }
	    }
	  };
	
	  function maybeUnescapeQuote() {
	    var nextChar = path[index + 1];
	    if (mode === IN_SINGLE_QUOTE && nextChar === "'" || mode === IN_DOUBLE_QUOTE && nextChar === '"') {
	      index++;
	      newChar = '\\' + nextChar;
	      actions[APPEND]();
	      return true;
	    }
	  }
	
	  while (mode != null) {
	    index++;
	    c = path[index];
	
	    if (c === '\\' && maybeUnescapeQuote()) {
	      continue;
	    }
	
	    type = getPathCharType(c);
	    typeMap = pathStateMachine[mode];
	    transition = typeMap[type] || typeMap['else'] || ERROR;
	
	    if (transition === ERROR) {
	      return; // parse error
	    }
	
	    mode = transition[0];
	    action = actions[transition[1]];
	    if (action) {
	      newChar = transition[2];
	      newChar = newChar === undefined ? c : newChar;
	      if (action() === false) {
	        return;
	      }
	    }
	
	    if (mode === AFTER_PATH) {
	      keys.raw = path;
	      return keys;
	    }
	  }
	}
	
	/**
	 * External parse that check for a cache hit first
	 *
	 * @param {String} path
	 * @return {Array|undefined}
	 */
	
	function parsePath(path) {
	  var hit = pathCache.get(path);
	  if (!hit) {
	    hit = parse(path);
	    if (hit) {
	      pathCache.put(path, hit);
	    }
	  }
	  return hit;
	}
	
	/**
	 * Get from an object from a path string
	 *
	 * @param {Object} obj
	 * @param {String} path
	 */
	
	function getPath(obj, path) {
	  return parseExpression$1(path).get(obj);
	}
	
	/**
	 * Warn against setting non-existent root path on a vm.
	 */
	
	var warnNonExistent;
	if (process.env.NODE_ENV !== 'production') {
	  warnNonExistent = function (path, vm) {
	    warn('You are setting a non-existent path "' + path.raw + '" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the "data" option for more reliable reactivity ' + 'and better performance.', vm);
	  };
	}
	
	/**
	 * Set on an object from a path
	 *
	 * @param {Object} obj
	 * @param {String | Array} path
	 * @param {*} val
	 */
	
	function setPath(obj, path, val) {
	  var original = obj;
	  if (typeof path === 'string') {
	    path = parse(path);
	  }
	  if (!path || !isObject(obj)) {
	    return false;
	  }
	  var last, key;
	  for (var i = 0, l = path.length; i < l; i++) {
	    last = obj;
	    key = path[i];
	    if (key.charAt(0) === '*') {
	      key = parseExpression$1(key.slice(1)).get.call(original, original);
	    }
	    if (i < l - 1) {
	      obj = obj[key];
	      if (!isObject(obj)) {
	        obj = {};
	        if (process.env.NODE_ENV !== 'production' && last._isVue) {
	          warnNonExistent(path, last);
	        }
	        set(last, key, obj);
	      }
	    } else {
	      if (isArray(obj)) {
	        obj.$set(key, val);
	      } else if (key in obj) {
	        obj[key] = val;
	      } else {
	        if (process.env.NODE_ENV !== 'production' && obj._isVue) {
	          warnNonExistent(path, obj);
	        }
	        set(obj, key, val);
	      }
	    }
	  }
	  return true;
	}
	
	var path = Object.freeze({
	  parsePath: parsePath,
	  getPath: getPath,
	  setPath: setPath
	});
	
	var expressionCache = new Cache(1000);
	
	var allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';
	var allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	// keywords that don't make sense inside expressions
	var improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';
	var improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\b|') + '\\b)');
	
	var wsRE = /\s/g;
	var newlineRE = /\n/g;
	var saveRE = /[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\"']|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g;
	var restoreRE = /"(\d+)"/g;
	var pathTestRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/;
	var identRE = /[^\w$\.](?:[A-Za-z_$][\w$]*)/g;
	var literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;
	
	function noop() {}
	
	/**
	 * Save / Rewrite / Restore
	 *
	 * When rewriting paths found in an expression, it is
	 * possible for the same letter sequences to be found in
	 * strings and Object literal property keys. Therefore we
	 * remove and store these parts in a temporary array, and
	 * restore them after the path rewrite.
	 */
	
	var saved = [];
	
	/**
	 * Save replacer
	 *
	 * The save regex can match two possible cases:
	 * 1. An opening object literal
	 * 2. A string
	 * If matched as a plain string, we need to escape its
	 * newlines, since the string needs to be preserved when
	 * generating the function body.
	 *
	 * @param {String} str
	 * @param {String} isString - str if matched as a string
	 * @return {String} - placeholder with index
	 */
	
	function save(str, isString) {
	  var i = saved.length;
	  saved[i] = isString ? str.replace(newlineRE, '\\n') : str;
	  return '"' + i + '"';
	}
	
	/**
	 * Path rewrite replacer
	 *
	 * @param {String} raw
	 * @return {String}
	 */
	
	function rewrite(raw) {
	  var c = raw.charAt(0);
	  var path = raw.slice(1);
	  if (allowedKeywordsRE.test(path)) {
	    return raw;
	  } else {
	    path = path.indexOf('"') > -1 ? path.replace(restoreRE, restore) : path;
	    return c + 'scope.' + path;
	  }
	}
	
	/**
	 * Restore replacer
	 *
	 * @param {String} str
	 * @param {String} i - matched save index
	 * @return {String}
	 */
	
	function restore(str, i) {
	  return saved[i];
	}
	
	/**
	 * Rewrite an expression, prefixing all path accessors with
	 * `scope.` and generate getter/setter functions.
	 *
	 * @param {String} exp
	 * @return {Function}
	 */
	
	function compileGetter(exp) {
	  if (improperKeywordsRE.test(exp)) {
	    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);
	  }
	  // reset state
	  saved.length = 0;
	  // save strings and object literal keys
	  var body = exp.replace(saveRE, save).replace(wsRE, '');
	  // rewrite all paths
	  // pad 1 space here because the regex matches 1 extra char
	  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);
	  return makeGetterFn(body);
	}
	
	/**
	 * Build a getter function. Requires eval.
	 *
	 * We isolate the try/catch so it doesn't affect the
	 * optimization of the parse function when it is not called.
	 *
	 * @param {String} body
	 * @return {Function|undefined}
	 */
	
	function makeGetterFn(body) {
	  try {
	    /* eslint-disable no-new-func */
	    return new Function('scope', 'return ' + body + ';');
	    /* eslint-enable no-new-func */
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production') {
	      /* istanbul ignore if */
	      if (e.toString().match(/unsafe-eval|CSP/)) {
	        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');
	      } else {
	        warn('Invalid expression. ' + 'Generated function body: ' + body);
	      }
	    }
	    return noop;
	  }
	}
	
	/**
	 * Compile a setter function for the expression.
	 *
	 * @param {String} exp
	 * @return {Function|undefined}
	 */
	
	function compileSetter(exp) {
	  var path = parsePath(exp);
	  if (path) {
	    return function (scope, val) {
	      setPath(scope, path, val);
	    };
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);
	  }
	}
	
	/**
	 * Parse an expression into re-written getter/setters.
	 *
	 * @param {String} exp
	 * @param {Boolean} needSet
	 * @return {Function}
	 */
	
	function parseExpression$1(exp, needSet) {
	  exp = exp.trim();
	  // try cache
	  var hit = expressionCache.get(exp);
	  if (hit) {
	    if (needSet && !hit.set) {
	      hit.set = compileSetter(hit.exp);
	    }
	    return hit;
	  }
	  var res = { exp: exp };
	  res.get = isSimplePath(exp) && exp.indexOf('[') < 0
	  // optimized super simple getter
	  ? makeGetterFn('scope.' + exp)
	  // dynamic getter
	  : compileGetter(exp);
	  if (needSet) {
	    res.set = compileSetter(exp);
	  }
	  expressionCache.put(exp, res);
	  return res;
	}
	
	/**
	 * Check if an expression is a simple path.
	 *
	 * @param {String} exp
	 * @return {Boolean}
	 */
	
	function isSimplePath(exp) {
	  return pathTestRE.test(exp) &&
	  // don't treat literal values as paths
	  !literalValueRE$1.test(exp) &&
	  // Math constants e.g. Math.PI, Math.E etc.
	  exp.slice(0, 5) !== 'Math.';
	}
	
	var expression = Object.freeze({
	  parseExpression: parseExpression$1,
	  isSimplePath: isSimplePath
	});
	
	// we have two separate queues: one for directive updates
	// and one for user watcher registered via $watch().
	// we want to guarantee directive updates to be called
	// before user watchers so that when user watchers are
	// triggered, the DOM would have already been in updated
	// state.
	
	var queue = [];
	var userQueue = [];
	var has = {};
	var circular = {};
	var waiting = false;
	
	/**
	 * Reset the batcher's state.
	 */
	
	function resetBatcherState() {
	  queue.length = 0;
	  userQueue.length = 0;
	  has = {};
	  circular = {};
	  waiting = false;
	}
	
	/**
	 * Flush both queues and run the watchers.
	 */
	
	function flushBatcherQueue() {
	  var _again = true;
	
	  _function: while (_again) {
	    _again = false;
	
	    runBatcherQueue(queue);
	    runBatcherQueue(userQueue);
	    // user watchers triggered more watchers,
	    // keep flushing until it depletes
	    if (queue.length) {
	      _again = true;
	      continue _function;
	    }
	    // dev tool hook
	    /* istanbul ignore if */
	    if (devtools && config.devtools) {
	      devtools.emit('flush');
	    }
	    resetBatcherState();
	  }
	}
	
	/**
	 * Run the watchers in a single queue.
	 *
	 * @param {Array} queue
	 */
	
	function runBatcherQueue(queue) {
	  // do not cache length because more watchers might be pushed
	  // as we run existing watchers
	  for (var i = 0; i < queue.length; i++) {
	    var watcher = queue[i];
	    var id = watcher.id;
	    has[id] = null;
	    watcher.run();
	    // in dev build, check and stop circular updates.
	    if (process.env.NODE_ENV !== 'production' && has[id] != null) {
	      circular[id] = (circular[id] || 0) + 1;
	      if (circular[id] > config._maxUpdateCount) {
	        warn('You may have an infinite update loop for watcher ' + 'with expression "' + watcher.expression + '"', watcher.vm);
	        break;
	      }
	    }
	  }
	  queue.length = 0;
	}
	
	/**
	 * Push a watcher into the watcher queue.
	 * Jobs with duplicate IDs will be skipped unless it's
	 * pushed when the queue is being flushed.
	 *
	 * @param {Watcher} watcher
	 *   properties:
	 *   - {Number} id
	 *   - {Function} run
	 */
	
	function pushWatcher(watcher) {
	  var id = watcher.id;
	  if (has[id] == null) {
	    // push watcher into appropriate queue
	    var q = watcher.user ? userQueue : queue;
	    has[id] = q.length;
	    q.push(watcher);
	    // queue the flush
	    if (!waiting) {
	      waiting = true;
	      nextTick(flushBatcherQueue);
	    }
	  }
	}
	
	var uid$2 = 0;
	
	/**
	 * A watcher parses an expression, collects dependencies,
	 * and fires callback when the expression value changes.
	 * This is used for both the $watch() api and directives.
	 *
	 * @param {Vue} vm
	 * @param {String|Function} expOrFn
	 * @param {Function} cb
	 * @param {Object} options
	 *                 - {Array} filters
	 *                 - {Boolean} twoWay
	 *                 - {Boolean} deep
	 *                 - {Boolean} user
	 *                 - {Boolean} sync
	 *                 - {Boolean} lazy
	 *                 - {Function} [preProcess]
	 *                 - {Function} [postProcess]
	 * @constructor
	 */
	function Watcher(vm, expOrFn, cb, options) {
	  // mix in options
	  if (options) {
	    extend(this, options);
	  }
	  var isFn = typeof expOrFn === 'function';
	  this.vm = vm;
	  vm._watchers.push(this);
	  this.expression = expOrFn;
	  this.cb = cb;
	  this.id = ++uid$2; // uid for batching
	  this.active = true;
	  this.dirty = this.lazy; // for lazy watchers
	  this.deps = [];
	  this.newDeps = [];
	  this.depIds = new _Set();
	  this.newDepIds = new _Set();
	  this.prevError = null; // for async error stacks
	  // parse expression for getter/setter
	  if (isFn) {
	    this.getter = expOrFn;
	    this.setter = undefined;
	  } else {
	    var res = parseExpression$1(expOrFn, this.twoWay);
	    this.getter = res.get;
	    this.setter = res.set;
	  }
	  this.value = this.lazy ? undefined : this.get();
	  // state for avoiding false triggers for deep and Array
	  // watchers during vm._digest()
	  this.queued = this.shallow = false;
	}
	
	/**
	 * Evaluate the getter, and re-collect dependencies.
	 */
	
	Watcher.prototype.get = function () {
	  this.beforeGet();
	  var scope = this.scope || this.vm;
	  var value;
	  try {
	    value = this.getter.call(scope, scope);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating expression ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // "touch" every property so they are all tracked as
	  // dependencies for deep watching
	  if (this.deep) {
	    traverse(value);
	  }
	  if (this.preProcess) {
	    value = this.preProcess(value);
	  }
	  if (this.filters) {
	    value = scope._applyFilters(value, null, this.filters, false);
	  }
	  if (this.postProcess) {
	    value = this.postProcess(value);
	  }
	  this.afterGet();
	  return value;
	};
	
	/**
	 * Set the corresponding value with the setter.
	 *
	 * @param {*} value
	 */
	
	Watcher.prototype.set = function (value) {
	  var scope = this.scope || this.vm;
	  if (this.filters) {
	    value = scope._applyFilters(value, this.value, this.filters, true);
	  }
	  try {
	    this.setter.call(scope, scope, value);
	  } catch (e) {
	    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {
	      warn('Error when evaluating setter ' + '"' + this.expression + '": ' + e.toString(), this.vm);
	    }
	  }
	  // two-way sync for v-for alias
	  var forContext = scope.$forContext;
	  if (forContext && forContext.alias === this.expression) {
	    if (forContext.filters) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);
	      return;
	    }
	    forContext._withLock(function () {
	      if (scope.$key) {
	        // original is an object
	        forContext.rawValue[scope.$key] = value;
	      } else {
	        forContext.rawValue.$set(scope.$index, value);
	      }
	    });
	  }
	};
	
	/**
	 * Prepare for dependency collection.
	 */
	
	Watcher.prototype.beforeGet = function () {
	  Dep.target = this;
	};
	
	/**
	 * Add a dependency to this directive.
	 *
	 * @param {Dep} dep
	 */
	
	Watcher.prototype.addDep = function (dep) {
	  var id = dep.id;
	  if (!this.newDepIds.has(id)) {
	    this.newDepIds.add(id);
	    this.newDeps.push(dep);
	    if (!this.depIds.has(id)) {
	      dep.addSub(this);
	    }
	  }
	};
	
	/**
	 * Clean up for dependency collection.
	 */
	
	Watcher.prototype.afterGet = function () {
	  Dep.target = null;
	  var i = this.deps.length;
	  while (i--) {
	    var dep = this.deps[i];
	    if (!this.newDepIds.has(dep.id)) {
	      dep.removeSub(this);
	    }
	  }
	  var tmp = this.depIds;
	  this.depIds = this.newDepIds;
	  this.newDepIds = tmp;
	  this.newDepIds.clear();
	  tmp = this.deps;
	  this.deps = this.newDeps;
	  this.newDeps = tmp;
	  this.newDeps.length = 0;
	};
	
	/**
	 * Subscriber interface.
	 * Will be called when a dependency changes.
	 *
	 * @param {Boolean} shallow
	 */
	
	Watcher.prototype.update = function (shallow) {
	  if (this.lazy) {
	    this.dirty = true;
	  } else if (this.sync || !config.async) {
	    this.run();
	  } else {
	    // if queued, only overwrite shallow with non-shallow,
	    // but not the other way around.
	    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;
	    this.queued = true;
	    // record before-push error stack in debug mode
	    /* istanbul ignore if */
	    if (process.env.NODE_ENV !== 'production' && config.debug) {
	      this.prevError = new Error('[vue] async stack trace');
	    }
	    pushWatcher(this);
	  }
	};
	
	/**
	 * Batcher job interface.
	 * Will be called by the batcher.
	 */
	
	Watcher.prototype.run = function () {
	  if (this.active) {
	    var value = this.get();
	    if (value !== this.value ||
	    // Deep watchers and watchers on Object/Arrays should fire even
	    // when the value is the same, because the value may
	    // have mutated; but only do so if this is a
	    // non-shallow update (caused by a vm digest).
	    (isObject(value) || this.deep) && !this.shallow) {
	      // set new value
	      var oldValue = this.value;
	      this.value = value;
	      // in debug + async mode, when a watcher callbacks
	      // throws, we also throw the saved before-push error
	      // so the full cross-tick stack trace is available.
	      var prevError = this.prevError;
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {
	        this.prevError = null;
	        try {
	          this.cb.call(this.vm, value, oldValue);
	        } catch (e) {
	          nextTick(function () {
	            throw prevError;
	          }, 0);
	          throw e;
	        }
	      } else {
	        this.cb.call(this.vm, value, oldValue);
	      }
	    }
	    this.queued = this.shallow = false;
	  }
	};
	
	/**
	 * Evaluate the value of the watcher.
	 * This only gets called for lazy watchers.
	 */
	
	Watcher.prototype.evaluate = function () {
	  // avoid overwriting another watcher that is being
	  // collected.
	  var current = Dep.target;
	  this.value = this.get();
	  this.dirty = false;
	  Dep.target = current;
	};
	
	/**
	 * Depend on all deps collected by this watcher.
	 */
	
	Watcher.prototype.depend = function () {
	  var i = this.deps.length;
	  while (i--) {
	    this.deps[i].depend();
	  }
	};
	
	/**
	 * Remove self from all dependencies' subcriber list.
	 */
	
	Watcher.prototype.teardown = function () {
	  if (this.active) {
	    // remove self from vm's watcher list
	    // this is a somewhat expensive operation so we skip it
	    // if the vm is being destroyed or is performing a v-for
	    // re-render (the watcher list is then filtered by v-for).
	    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {
	      this.vm._watchers.$remove(this);
	    }
	    var i = this.deps.length;
	    while (i--) {
	      this.deps[i].removeSub(this);
	    }
	    this.active = false;
	    this.vm = this.cb = this.value = null;
	  }
	};
	
	/**
	 * Recrusively traverse an object to evoke all converted
	 * getters, so that every nested property inside the object
	 * is collected as a "deep" dependency.
	 *
	 * @param {*} val
	 */
	
	var seenObjects = new _Set();
	function traverse(val, seen) {
	  var i = undefined,
	      keys = undefined;
	  if (!seen) {
	    seen = seenObjects;
	    seen.clear();
	  }
	  var isA = isArray(val);
	  var isO = isObject(val);
	  if ((isA || isO) && Object.isExtensible(val)) {
	    if (val.__ob__) {
	      var depId = val.__ob__.dep.id;
	      if (seen.has(depId)) {
	        return;
	      } else {
	        seen.add(depId);
	      }
	    }
	    if (isA) {
	      i = val.length;
	      while (i--) traverse(val[i], seen);
	    } else if (isO) {
	      keys = Object.keys(val);
	      i = keys.length;
	      while (i--) traverse(val[keys[i]], seen);
	    }
	  }
	}
	
	var text$1 = {
	
	  bind: function bind() {
	    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';
	  },
	
	  update: function update(value) {
	    this.el[this.attr] = _toString(value);
	  }
	};
	
	var templateCache = new Cache(1000);
	var idSelectorCache = new Cache(1000);
	
	var map = {
	  efault: [0, '', ''],
	  legend: [1, '<fieldset>', '</fieldset>'],
	  tr: [2, '<table><tbody>', '</tbody></table>'],
	  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']
	};
	
	map.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];
	
	map.option = map.optgroup = [1, '<select multiple="multiple">', '</select>'];
	
	map.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];
	
	map.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns="http://www.w3.org/2000/svg" ' + 'xmlns:xlink="http://www.w3.org/1999/xlink" ' + 'xmlns:ev="http://www.w3.org/2001/xml-events"' + 'version="1.1">', '</svg>'];
	
	/**
	 * Check if a node is a supported template node with a
	 * DocumentFragment content.
	 *
	 * @param {Node} node
	 * @return {Boolean}
	 */
	
	function isRealTemplate(node) {
	  return isTemplate(node) && isFragment(node.content);
	}
	
	var tagRE$1 = /<([\w:-]+)/;
	var entityRE = /&#?\w+?;/;
	var commentRE = /<!--/;
	
	/**
	 * Convert a string template to a DocumentFragment.
	 * Determines correct wrapping by tag types. Wrapping
	 * strategy found in jQuery & component/domify.
	 *
	 * @param {String} templateString
	 * @param {Boolean} raw
	 * @return {DocumentFragment}
	 */
	
	function stringToFragment(templateString, raw) {
	  // try a cache hit first
	  var cacheKey = raw ? templateString : templateString.trim();
	  var hit = templateCache.get(cacheKey);
	  if (hit) {
	    return hit;
	  }
	
	  var frag = document.createDocumentFragment();
	  var tagMatch = templateString.match(tagRE$1);
	  var entityMatch = entityRE.test(templateString);
	  var commentMatch = commentRE.test(templateString);
	
	  if (!tagMatch && !entityMatch && !commentMatch) {
	    // text only, return a single text node.
	    frag.appendChild(document.createTextNode(templateString));
	  } else {
	    var tag = tagMatch && tagMatch[1];
	    var wrap = map[tag] || map.efault;
	    var depth = wrap[0];
	    var prefix = wrap[1];
	    var suffix = wrap[2];
	    var node = document.createElement('div');
	
	    node.innerHTML = prefix + templateString + suffix;
	    while (depth--) {
	      node = node.lastChild;
	    }
	
	    var child;
	    /* eslint-disable no-cond-assign */
	    while (child = node.firstChild) {
	      /* eslint-enable no-cond-assign */
	      frag.appendChild(child);
	    }
	  }
	  if (!raw) {
	    trimNode(frag);
	  }
	  templateCache.put(cacheKey, frag);
	  return frag;
	}
	
	/**
	 * Convert a template node to a DocumentFragment.
	 *
	 * @param {Node} node
	 * @return {DocumentFragment}
	 */
	
	function nodeToFragment(node) {
	  // if its a template tag and the browser supports it,
	  // its content is already a document fragment. However, iOS Safari has
	  // bug when using directly cloned template content with touch
	  // events and can cause crashes when the nodes are removed from DOM, so we
	  // have to treat template elements as string templates. (#2805)
	  /* istanbul ignore if */
	  if (isRealTemplate(node)) {
	    return stringToFragment(node.innerHTML);
	  }
	  // script template
	  if (node.tagName === 'SCRIPT') {
	    return stringToFragment(node.textContent);
	  }
	  // normal node, clone it to avoid mutating the original
	  var clonedNode = cloneNode(node);
	  var frag = document.createDocumentFragment();
	  var child;
	  /* eslint-disable no-cond-assign */
	  while (child = clonedNode.firstChild) {
	    /* eslint-enable no-cond-assign */
	    frag.appendChild(child);
	  }
	  trimNode(frag);
	  return frag;
	}
	
	// Test for the presence of the Safari template cloning bug
	// https://bugs.webkit.org/showug.cgi?id=137755
	var hasBrokenTemplate = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var a = document.createElement('div');
	    a.innerHTML = '<template>1</template>';
	    return !a.cloneNode(true).firstChild.innerHTML;
	  } else {
	    return false;
	  }
	})();
	
	// Test for IE10/11 textarea placeholder clone bug
	var hasTextareaCloneBug = (function () {
	  /* istanbul ignore else */
	  if (inBrowser) {
	    var t = document.createElement('textarea');
	    t.placeholder = 't';
	    return t.cloneNode(true).value === 't';
	  } else {
	    return false;
	  }
	})();
	
	/**
	 * 1. Deal with Safari cloning nested <template> bug by
	 *    manually cloning all template instances.
	 * 2. Deal with IE10/11 textarea placeholder bug by setting
	 *    the correct value after cloning.
	 *
	 * @param {Element|DocumentFragment} node
	 * @return {Element|DocumentFragment}
	 */
	
	function cloneNode(node) {
	  /* istanbul ignore if */
	  if (!node.querySelectorAll) {
	    return node.cloneNode();
	  }
	  var res = node.cloneNode(true);
	  var i, original, cloned;
	  /* istanbul ignore if */
	  if (hasBrokenTemplate) {
	    var tempClone = res;
	    if (isRealTemplate(node)) {
	      node = node.content;
	      tempClone = res.content;
	    }
	    original = node.querySelectorAll('template');
	    if (original.length) {
	      cloned = tempClone.querySelectorAll('template');
	      i = cloned.length;
	      while (i--) {
	        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);
	      }
	    }
	  }
	  /* istanbul ignore if */
	  if (hasTextareaCloneBug) {
	    if (node.tagName === 'TEXTAREA') {
	      res.value = node.value;
	    } else {
	      original = node.querySelectorAll('textarea');
	      if (original.length) {
	        cloned = res.querySelectorAll('textarea');
	        i = cloned.length;
	        while (i--) {
	          cloned[i].value = original[i].value;
	        }
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Process the template option and normalizes it into a
	 * a DocumentFragment that can be used as a partial or a
	 * instance template.
	 *
	 * @param {*} template
	 *        Possible values include:
	 *        - DocumentFragment object
	 *        - Node object of type Template
	 *        - id selector: '#some-template-id'
	 *        - template string: '<div><span>{{msg}}</span></div>'
	 * @param {Boolean} shouldClone
	 * @param {Boolean} raw
	 *        inline HTML interpolation. Do not check for id
	 *        selector and keep whitespace in the string.
	 * @return {DocumentFragment|undefined}
	 */
	
	function parseTemplate(template, shouldClone, raw) {
	  var node, frag;
	
	  // if the template is already a document fragment,
	  // do nothing
	  if (isFragment(template)) {
	    trimNode(template);
	    return shouldClone ? cloneNode(template) : template;
	  }
	
	  if (typeof template === 'string') {
	    // id selector
	    if (!raw && template.charAt(0) === '#') {
	      // id selector can be cached too
	      frag = idSelectorCache.get(template);
	      if (!frag) {
	        node = document.getElementById(template.slice(1));
	        if (node) {
	          frag = nodeToFragment(node);
	          // save selector to cache
	          idSelectorCache.put(template, frag);
	        }
	      }
	    } else {
	      // normal string template
	      frag = stringToFragment(template, raw);
	    }
	  } else if (template.nodeType) {
	    // a direct node
	    frag = nodeToFragment(template);
	  }
	
	  return frag && shouldClone ? cloneNode(frag) : frag;
	}
	
	var template = Object.freeze({
	  cloneNode: cloneNode,
	  parseTemplate: parseTemplate
	});
	
	var html = {
	
	  bind: function bind() {
	    // a comment node means this is a binding for
	    // {{{ inline unescaped html }}}
	    if (this.el.nodeType === 8) {
	      // hold nodes
	      this.nodes = [];
	      // replace the placeholder with proper anchor
	      this.anchor = createAnchor('v-html');
	      replace(this.el, this.anchor);
	    }
	  },
	
	  update: function update(value) {
	    value = _toString(value);
	    if (this.nodes) {
	      this.swap(value);
	    } else {
	      this.el.innerHTML = value;
	    }
	  },
	
	  swap: function swap(value) {
	    // remove old nodes
	    var i = this.nodes.length;
	    while (i--) {
	      remove(this.nodes[i]);
	    }
	    // convert new value to a fragment
	    // do not attempt to retrieve from id selector
	    var frag = parseTemplate(value, true, true);
	    // save a reference to these nodes so we can remove later
	    this.nodes = toArray(frag.childNodes);
	    before(frag, this.anchor);
	  }
	};
	
	/**
	 * Abstraction for a partially-compiled fragment.
	 * Can optionally compile content with a child scope.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 * @param {DocumentFragment} frag
	 * @param {Vue} [host]
	 * @param {Object} [scope]
	 * @param {Fragment} [parentFrag]
	 */
	function Fragment(linker, vm, frag, host, scope, parentFrag) {
	  this.children = [];
	  this.childFrags = [];
	  this.vm = vm;
	  this.scope = scope;
	  this.inserted = false;
	  this.parentFrag = parentFrag;
	  if (parentFrag) {
	    parentFrag.childFrags.push(this);
	  }
	  this.unlink = linker(vm, frag, host, scope, this);
	  var single = this.single = frag.childNodes.length === 1 &&
	  // do not go single mode if the only node is an anchor
	  !frag.childNodes[0].__v_anchor;
	  if (single) {
	    this.node = frag.childNodes[0];
	    this.before = singleBefore;
	    this.remove = singleRemove;
	  } else {
	    this.node = createAnchor('fragment-start');
	    this.end = createAnchor('fragment-end');
	    this.frag = frag;
	    prepend(this.node, frag);
	    frag.appendChild(this.end);
	    this.before = multiBefore;
	    this.remove = multiRemove;
	  }
	  this.node.__v_frag = this;
	}
	
	/**
	 * Call attach/detach for all components contained within
	 * this fragment. Also do so recursively for all child
	 * fragments.
	 *
	 * @param {Function} hook
	 */
	
	Fragment.prototype.callHook = function (hook) {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    this.childFrags[i].callHook(hook);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    hook(this.children[i]);
	  }
	};
	
	/**
	 * Insert fragment before target, single node version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function singleBefore(target, withTransition) {
	  this.inserted = true;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  method(this.node, target, this.vm);
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, single node version
	 */
	
	function singleRemove() {
	  this.inserted = false;
	  var shouldCallRemove = inDoc(this.node);
	  var self = this;
	  this.beforeRemove();
	  removeWithTransition(this.node, this.vm, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Insert fragment before target, multi-nodes version
	 *
	 * @param {Node} target
	 * @param {Boolean} withTransition
	 */
	
	function multiBefore(target, withTransition) {
	  this.inserted = true;
	  var vm = this.vm;
	  var method = withTransition !== false ? beforeWithTransition : before;
	  mapNodeRange(this.node, this.end, function (node) {
	    method(node, target, vm);
	  });
	  if (inDoc(this.node)) {
	    this.callHook(attach);
	  }
	}
	
	/**
	 * Remove fragment, multi-nodes version
	 */
	
	function multiRemove() {
	  this.inserted = false;
	  var self = this;
	  var shouldCallRemove = inDoc(this.node);
	  this.beforeRemove();
	  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {
	    if (shouldCallRemove) {
	      self.callHook(detach);
	    }
	    self.destroy();
	  });
	}
	
	/**
	 * Prepare the fragment for removal.
	 */
	
	Fragment.prototype.beforeRemove = function () {
	  var i, l;
	  for (i = 0, l = this.childFrags.length; i < l; i++) {
	    // call the same method recursively on child
	    // fragments, depth-first
	    this.childFrags[i].beforeRemove(false);
	  }
	  for (i = 0, l = this.children.length; i < l; i++) {
	    // Call destroy for all contained instances,
	    // with remove:false and defer:true.
	    // Defer is necessary because we need to
	    // keep the children to call detach hooks
	    // on them.
	    this.children[i].$destroy(false, true);
	  }
	  var dirs = this.unlink.dirs;
	  for (i = 0, l = dirs.length; i < l; i++) {
	    // disable the watchers on all the directives
	    // so that the rendered content stays the same
	    // during removal.
	    dirs[i]._watcher && dirs[i]._watcher.teardown();
	  }
	};
	
	/**
	 * Destroy the fragment.
	 */
	
	Fragment.prototype.destroy = function () {
	  if (this.parentFrag) {
	    this.parentFrag.childFrags.$remove(this);
	  }
	  this.node.__v_frag = null;
	  this.unlink();
	};
	
	/**
	 * Call attach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function attach(child) {
	  if (!child._isAttached && inDoc(child.$el)) {
	    child._callHook('attached');
	  }
	}
	
	/**
	 * Call detach hook for a Vue instance.
	 *
	 * @param {Vue} child
	 */
	
	function detach(child) {
	  if (child._isAttached && !inDoc(child.$el)) {
	    child._callHook('detached');
	  }
	}
	
	var linkerCache = new Cache(5000);
	
	/**
	 * A factory that can be used to create instances of a
	 * fragment. Caches the compiled linker if possible.
	 *
	 * @param {Vue} vm
	 * @param {Element|String} el
	 */
	function FragmentFactory(vm, el) {
	  this.vm = vm;
	  var template;
	  var isString = typeof el === 'string';
	  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {
	    template = parseTemplate(el, true);
	  } else {
	    template = document.createDocumentFragment();
	    template.appendChild(el);
	  }
	  this.template = template;
	  // linker can be cached, but only for components
	  var linker;
	  var cid = vm.constructor.cid;
	  if (cid > 0) {
	    var cacheId = cid + (isString ? el : getOuterHTML(el));
	    linker = linkerCache.get(cacheId);
	    if (!linker) {
	      linker = compile(template, vm.$options, true);
	      linkerCache.put(cacheId, linker);
	    }
	  } else {
	    linker = compile(template, vm.$options, true);
	  }
	  this.linker = linker;
	}
	
	/**
	 * Create a fragment instance with given host and scope.
	 *
	 * @param {Vue} host
	 * @param {Object} scope
	 * @param {Fragment} parentFrag
	 */
	
	FragmentFactory.prototype.create = function (host, scope, parentFrag) {
	  var frag = cloneNode(this.template);
	  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);
	};
	
	var ON = 700;
	var MODEL = 800;
	var BIND = 850;
	var TRANSITION = 1100;
	var EL = 1500;
	var COMPONENT = 1500;
	var PARTIAL = 1750;
	var IF = 2100;
	var FOR = 2200;
	var SLOT = 2300;
	
	var uid$3 = 0;
	
	var vFor = {
	
	  priority: FOR,
	  terminal: true,
	
	  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],
	
	  bind: function bind() {
	    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {
	      warn('<' + this.el.tagName.toLowerCase() + ' v-for="' + this.expression + '" v-if="' + this.el.getAttribute('v-if') + '">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);
	    }
	
	    // support "item in/of items" syntax
	    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);
	    if (inMatch) {
	      var itMatch = inMatch[1].match(/\((.*),(.*)\)/);
	      if (itMatch) {
	        this.iterator = itMatch[1].trim();
	        this.alias = itMatch[2].trim();
	      } else {
	        this.alias = inMatch[1].trim();
	      }
	      this.expression = inMatch[2];
	    }
	
	    if (!this.alias) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression "' + this.descriptor.raw + '": ' + 'alias is required.', this.vm);
	      return;
	    }
	
	    // uid as a cache identifier
	    this.id = '__v-for__' + ++uid$3;
	
	    // check if this is an option list,
	    // so that we know if we need to update the <select>'s
	    // v-model when the option list has changed.
	    // because v-model has a lower priority than v-for,
	    // the v-model is not bound here yet, so we have to
	    // retrive it in the actual updateModel() function.
	    var tag = this.el.tagName;
	    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';
	
	    // setup anchor nodes
	    this.start = createAnchor('v-for-start');
	    this.end = createAnchor('v-for-end');
	    replace(this.el, this.end);
	    before(this.start, this.end);
	
	    // cache
	    this.cache = Object.create(null);
	
	    // fragment factory
	    this.factory = new FragmentFactory(this.vm, this.el);
	  },
	
	  update: function update(data) {
	    this.diff(data);
	    this.updateRef();
	    this.updateModel();
	  },
	
	  /**
	   * Diff, based on new data and old data, determine the
	   * minimum amount of DOM manipulations needed to make the
	   * DOM reflect the new data Array.
	   *
	   * The algorithm diffs the new data Array by storing a
	   * hidden reference to an owner vm instance on previously
	   * seen data. This allows us to achieve O(n) which is
	   * better than a levenshtein distance based algorithm,
	   * which is O(m * n).
	   *
	   * @param {Array} data
	   */
	
	  diff: function diff(data) {
	    // check if the Array was converted from an Object
	    var item = data[0];
	    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');
	
	    var trackByKey = this.params.trackBy;
	    var oldFrags = this.frags;
	    var frags = this.frags = new Array(data.length);
	    var alias = this.alias;
	    var iterator = this.iterator;
	    var start = this.start;
	    var end = this.end;
	    var inDocument = inDoc(start);
	    var init = !oldFrags;
	    var i, l, frag, key, value, primitive;
	
	    // First pass, go through the new Array and fill up
	    // the new frags array. If a piece of data has a cached
	    // instance for it, we reuse it. Otherwise build a new
	    // instance.
	    for (i = 0, l = data.length; i < l; i++) {
	      item = data[i];
	      key = convertedFromObject ? item.$key : null;
	      value = convertedFromObject ? item.$value : item;
	      primitive = !isObject(value);
	      frag = !init && this.getCachedFrag(value, i, key);
	      if (frag) {
	        // reusable fragment
	        frag.reused = true;
	        // update $index
	        frag.scope.$index = i;
	        // update $key
	        if (key) {
	          frag.scope.$key = key;
	        }
	        // update iterator
	        if (iterator) {
	          frag.scope[iterator] = key !== null ? key : i;
	        }
	        // update data for track-by, object repeat &
	        // primitive values.
	        if (trackByKey || convertedFromObject || primitive) {
	          withoutConversion(function () {
	            frag.scope[alias] = value;
	          });
	        }
	      } else {
	        // new instance
	        frag = this.create(value, alias, i, key);
	        frag.fresh = !init;
	      }
	      frags[i] = frag;
	      if (init) {
	        frag.before(end);
	      }
	    }
	
	    // we're done for the initial render.
	    if (init) {
	      return;
	    }
	
	    // Second pass, go through the old fragments and
	    // destroy those who are not reused (and remove them
	    // from cache)
	    var removalIndex = 0;
	    var totalRemoved = oldFrags.length - frags.length;
	    // when removing a large number of fragments, watcher removal
	    // turns out to be a perf bottleneck, so we batch the watcher
	    // removals into a single filter call!
	    this.vm._vForRemoving = true;
	    for (i = 0, l = oldFrags.length; i < l; i++) {
	      frag = oldFrags[i];
	      if (!frag.reused) {
	        this.deleteCachedFrag(frag);
	        this.remove(frag, removalIndex++, totalRemoved, inDocument);
	      }
	    }
	    this.vm._vForRemoving = false;
	    if (removalIndex) {
	      this.vm._watchers = this.vm._watchers.filter(function (w) {
	        return w.active;
	      });
	    }
	
	    // Final pass, move/insert new fragments into the
	    // right place.
	    var targetPrev, prevEl, currentPrev;
	    var insertionIndex = 0;
	    for (i = 0, l = frags.length; i < l; i++) {
	      frag = frags[i];
	      // this is the frag that we should be after
	      targetPrev = frags[i - 1];
	      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;
	      if (frag.reused && !frag.staggerCb) {
	        currentPrev = findPrevFrag(frag, start, this.id);
	        if (currentPrev !== targetPrev && (!currentPrev ||
	        // optimization for moving a single item.
	        // thanks to suggestions by @livoras in #1807
	        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {
	          this.move(frag, prevEl);
	        }
	      } else {
	        // new instance, or still in stagger.
	        // insert with updated stagger index.
	        this.insert(frag, insertionIndex++, prevEl, inDocument);
	      }
	      frag.reused = frag.fresh = false;
	    }
	  },
	
	  /**
	   * Create a new fragment instance.
	   *
	   * @param {*} value
	   * @param {String} alias
	   * @param {Number} index
	   * @param {String} [key]
	   * @return {Fragment}
	   */
	
	  create: function create(value, alias, index, key) {
	    var host = this._host;
	    // create iteration scope
	    var parentScope = this._scope || this.vm;
	    var scope = Object.create(parentScope);
	    // ref holder for the scope
	    scope.$refs = Object.create(parentScope.$refs);
	    scope.$els = Object.create(parentScope.$els);
	    // make sure point $parent to parent scope
	    scope.$parent = parentScope;
	    // for two-way binding on alias
	    scope.$forContext = this;
	    // define scope properties
	    // important: define the scope alias without forced conversion
	    // so that frozen data structures remain non-reactive.
	    withoutConversion(function () {
	      defineReactive(scope, alias, value);
	    });
	    defineReactive(scope, '$index', index);
	    if (key) {
	      defineReactive(scope, '$key', key);
	    } else if (scope.$key) {
	      // avoid accidental fallback
	      def(scope, '$key', null);
	    }
	    if (this.iterator) {
	      defineReactive(scope, this.iterator, key !== null ? key : index);
	    }
	    var frag = this.factory.create(host, scope, this._frag);
	    frag.forId = this.id;
	    this.cacheFrag(value, frag, index, key);
	    return frag;
	  },
	
	  /**
	   * Update the v-ref on owner vm.
	   */
	
	  updateRef: function updateRef() {
	    var ref = this.descriptor.ref;
	    if (!ref) return;
	    var hash = (this._scope || this.vm).$refs;
	    var refs;
	    if (!this.fromObject) {
	      refs = this.frags.map(findVmFromFrag);
	    } else {
	      refs = {};
	      this.frags.forEach(function (frag) {
	        refs[frag.scope.$key] = findVmFromFrag(frag);
	      });
	    }
	    hash[ref] = refs;
	  },
	
	  /**
	   * For option lists, update the containing v-model on
	   * parent <select>.
	   */
	
	  updateModel: function updateModel() {
	    if (this.isOption) {
	      var parent = this.start.parentNode;
	      var model = parent && parent.__v_model;
	      if (model) {
	        model.forceUpdate();
	      }
	    }
	  },
	
	  /**
	   * Insert a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Node} prevEl
	   * @param {Boolean} inDocument
	   */
	
	  insert: function insert(frag, index, prevEl, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	    }
	    var staggerAmount = this.getStagger(frag, index, null, 'enter');
	    if (inDocument && staggerAmount) {
	      // create an anchor and insert it synchronously,
	      // so that we can resolve the correct order without
	      // worrying about some elements not inserted yet
	      var anchor = frag.staggerAnchor;
	      if (!anchor) {
	        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');
	        anchor.__v_frag = frag;
	      }
	      after(anchor, prevEl);
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.before(anchor);
	        remove(anchor);
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      var target = prevEl.nextSibling;
	      /* istanbul ignore if */
	      if (!target) {
	        // reset end anchor position in case the position was messed up
	        // by an external drag-n-drop library.
	        after(this.end, prevEl);
	        target = this.end;
	      }
	      frag.before(target);
	    }
	  },
	
	  /**
	   * Remove a fragment. Handles staggering.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {Boolean} inDocument
	   */
	
	  remove: function remove(frag, index, total, inDocument) {
	    if (frag.staggerCb) {
	      frag.staggerCb.cancel();
	      frag.staggerCb = null;
	      // it's not possible for the same frag to be removed
	      // twice, so if we have a pending stagger callback,
	      // it means this frag is queued for enter but removed
	      // before its transition started. Since it is already
	      // destroyed, we can just leave it in detached state.
	      return;
	    }
	    var staggerAmount = this.getStagger(frag, index, total, 'leave');
	    if (inDocument && staggerAmount) {
	      var op = frag.staggerCb = cancellable(function () {
	        frag.staggerCb = null;
	        frag.remove();
	      });
	      setTimeout(op, staggerAmount);
	    } else {
	      frag.remove();
	    }
	  },
	
	  /**
	   * Move a fragment to a new position.
	   * Force no transition.
	   *
	   * @param {Fragment} frag
	   * @param {Node} prevEl
	   */
	
	  move: function move(frag, prevEl) {
	    // fix a common issue with Sortable:
	    // if prevEl doesn't have nextSibling, this means it's
	    // been dragged after the end anchor. Just re-position
	    // the end anchor to the end of the container.
	    /* istanbul ignore if */
	    if (!prevEl.nextSibling) {
	      this.end.parentNode.appendChild(this.end);
	    }
	    frag.before(prevEl.nextSibling, false);
	  },
	
	  /**
	   * Cache a fragment using track-by or the object key.
	   *
	   * @param {*} value
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {String} [key]
	   */
	
	  cacheFrag: function cacheFrag(value, frag, index, key) {
	    var trackByKey = this.params.trackBy;
	    var cache = this.cache;
	    var primitive = !isObject(value);
	    var id;
	    if (key || trackByKey || primitive) {
	      id = getTrackByKey(index, key, value, trackByKey);
	      if (!cache[id]) {
	        cache[id] = frag;
	      } else if (trackByKey !== '$index') {
	        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	      }
	    } else {
	      id = this.id;
	      if (hasOwn(value, id)) {
	        if (value[id] === null) {
	          value[id] = frag;
	        } else {
	          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	        }
	      } else if (Object.isExtensible(value)) {
	        def(value, id, frag);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');
	      }
	    }
	    frag.raw = value;
	  },
	
	  /**
	   * Get a cached fragment from the value/index/key
	   *
	   * @param {*} value
	   * @param {Number} index
	   * @param {String} key
	   * @return {Fragment}
	   */
	
	  getCachedFrag: function getCachedFrag(value, index, key) {
	    var trackByKey = this.params.trackBy;
	    var primitive = !isObject(value);
	    var frag;
	    if (key || trackByKey || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      frag = this.cache[id];
	    } else {
	      frag = value[this.id];
	    }
	    if (frag && (frag.reused || frag.fresh)) {
	      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);
	    }
	    return frag;
	  },
	
	  /**
	   * Delete a fragment from cache.
	   *
	   * @param {Fragment} frag
	   */
	
	  deleteCachedFrag: function deleteCachedFrag(frag) {
	    var value = frag.raw;
	    var trackByKey = this.params.trackBy;
	    var scope = frag.scope;
	    var index = scope.$index;
	    // fix #948: avoid accidentally fall through to
	    // a parent repeater which happens to have $key.
	    var key = hasOwn(scope, '$key') && scope.$key;
	    var primitive = !isObject(value);
	    if (trackByKey || key || primitive) {
	      var id = getTrackByKey(index, key, value, trackByKey);
	      this.cache[id] = null;
	    } else {
	      value[this.id] = null;
	      frag.raw = null;
	    }
	  },
	
	  /**
	   * Get the stagger amount for an insertion/removal.
	   *
	   * @param {Fragment} frag
	   * @param {Number} index
	   * @param {Number} total
	   * @param {String} type
	   */
	
	  getStagger: function getStagger(frag, index, total, type) {
	    type = type + 'Stagger';
	    var trans = frag.node.__v_trans;
	    var hooks = trans && trans.hooks;
	    var hook = hooks && (hooks[type] || hooks.stagger);
	    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);
	  },
	
	  /**
	   * Pre-process the value before piping it through the
	   * filters. This is passed to and called by the watcher.
	   */
	
	  _preProcess: function _preProcess(value) {
	    // regardless of type, store the un-filtered raw value.
	    this.rawValue = value;
	    return value;
	  },
	
	  /**
	   * Post-process the value after it has been piped through
	   * the filters. This is passed to and called by the watcher.
	   *
	   * It is necessary for this to be called during the
	   * watcher's dependency collection phase because we want
	   * the v-for to update when the source Object is mutated.
	   */
	
	  _postProcess: function _postProcess(value) {
	    if (isArray(value)) {
	      return value;
	    } else if (isPlainObject(value)) {
	      // convert plain object to array.
	      var keys = Object.keys(value);
	      var i = keys.length;
	      var res = new Array(i);
	      var key;
	      while (i--) {
	        key = keys[i];
	        res[i] = {
	          $key: key,
	          $value: value[key]
	        };
	      }
	      return res;
	    } else {
	      if (typeof value === 'number' && !isNaN(value)) {
	        value = range(value);
	      }
	      return value || [];
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.descriptor.ref) {
	      (this._scope || this.vm).$refs[this.descriptor.ref] = null;
	    }
	    if (this.frags) {
	      var i = this.frags.length;
	      var frag;
	      while (i--) {
	        frag = this.frags[i];
	        this.deleteCachedFrag(frag);
	        frag.destroy();
	      }
	    }
	  }
	};
	
	/**
	 * Helper to find the previous element that is a fragment
	 * anchor. This is necessary because a destroyed frag's
	 * element could still be lingering in the DOM before its
	 * leaving transition finishes, but its inserted flag
	 * should have been set to false so we can skip them.
	 *
	 * If this is a block repeat, we want to make sure we only
	 * return frag that is bound to this v-for. (see #929)
	 *
	 * @param {Fragment} frag
	 * @param {Comment|Text} anchor
	 * @param {String} id
	 * @return {Fragment}
	 */
	
	function findPrevFrag(frag, anchor, id) {
	  var el = frag.node.previousSibling;
	  /* istanbul ignore if */
	  if (!el) return;
	  frag = el.__v_frag;
	  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {
	    el = el.previousSibling;
	    /* istanbul ignore if */
	    if (!el) return;
	    frag = el.__v_frag;
	  }
	  return frag;
	}
	
	/**
	 * Create a range array from given number.
	 *
	 * @param {Number} n
	 * @return {Array}
	 */
	
	function range(n) {
	  var i = -1;
	  var ret = new Array(Math.floor(n));
	  while (++i < n) {
	    ret[i] = i;
	  }
	  return ret;
	}
	
	/**
	 * Get the track by key for an item.
	 *
	 * @param {Number} index
	 * @param {String} key
	 * @param {*} value
	 * @param {String} [trackByKey]
	 */
	
	function getTrackByKey(index, key, value, trackByKey) {
	  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;
	}
	
	if (process.env.NODE_ENV !== 'production') {
	  vFor.warnDuplicate = function (value) {
	    warn('Duplicate value found in v-for="' + this.descriptor.raw + '": ' + JSON.stringify(value) + '. Use track-by="$index" if ' + 'you are expecting duplicate values.', this.vm);
	  };
	}
	
	/**
	 * Find a vm from a fragment.
	 *
	 * @param {Fragment} frag
	 * @return {Vue|undefined}
	 */
	
	function findVmFromFrag(frag) {
	  var node = frag.node;
	  // handle multi-node frag
	  if (frag.end) {
	    while (!node.__vue__ && node !== frag.end && node.nextSibling) {
	      node = node.nextSibling;
	    }
	  }
	  return node.__vue__;
	}
	
	var vIf = {
	
	  priority: IF,
	  terminal: true,
	
	  bind: function bind() {
	    var el = this.el;
	    if (!el.__vue__) {
	      // check else block
	      var next = el.nextElementSibling;
	      if (next && getAttr(next, 'v-else') !== null) {
	        remove(next);
	        this.elseEl = next;
	      }
	      // check main block
	      this.anchor = createAnchor('v-if');
	      replace(el, this.anchor);
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-if="' + this.expression + '" cannot be ' + 'used on an instance root element.', this.vm);
	      this.invalid = true;
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) return;
	    if (value) {
	      if (!this.frag) {
	        this.insert();
	      }
	    } else {
	      this.remove();
	    }
	  },
	
	  insert: function insert() {
	    if (this.elseFrag) {
	      this.elseFrag.remove();
	      this.elseFrag = null;
	    }
	    // lazy init factory
	    if (!this.factory) {
	      this.factory = new FragmentFactory(this.vm, this.el);
	    }
	    this.frag = this.factory.create(this._host, this._scope, this._frag);
	    this.frag.before(this.anchor);
	  },
	
	  remove: function remove() {
	    if (this.frag) {
	      this.frag.remove();
	      this.frag = null;
	    }
	    if (this.elseEl && !this.elseFrag) {
	      if (!this.elseFactory) {
	        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);
	      }
	      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);
	      this.elseFrag.before(this.anchor);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	    if (this.elseFrag) {
	      this.elseFrag.destroy();
	    }
	  }
	};
	
	var show = {
	
	  bind: function bind() {
	    // check else block
	    var next = this.el.nextElementSibling;
	    if (next && getAttr(next, 'v-else') !== null) {
	      this.elseEl = next;
	    }
	  },
	
	  update: function update(value) {
	    this.apply(this.el, value);
	    if (this.elseEl) {
	      this.apply(this.elseEl, !value);
	    }
	  },
	
	  apply: function apply(el, value) {
	    if (inDoc(el)) {
	      applyTransition(el, value ? 1 : -1, toggle, this.vm);
	    } else {
	      toggle();
	    }
	    function toggle() {
	      el.style.display = value ? '' : 'none';
	    }
	  }
	};
	
	var text$2 = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	    var isRange = el.type === 'range';
	    var lazy = this.params.lazy;
	    var number = this.params.number;
	    var debounce = this.params.debounce;
	
	    // handle composition events.
	    //   http://blog.evanyou.me/2014/01/03/composition-event/
	    // skip this for Android because it handles composition
	    // events quite differently. Android doesn't trigger
	    // composition events for language input methods e.g.
	    // Chinese, but instead triggers them for spelling
	    // suggestions... (see Discussion/#162)
	    var composing = false;
	    if (!isAndroid && !isRange) {
	      this.on('compositionstart', function () {
	        composing = true;
	      });
	      this.on('compositionend', function () {
	        composing = false;
	        // in IE11 the "compositionend" event fires AFTER
	        // the "input" event, so the input handler is blocked
	        // at the end... have to call it here.
	        //
	        // #1327: in lazy mode this is unecessary.
	        if (!lazy) {
	          self.listener();
	        }
	      });
	    }
	
	    // prevent messing with the input when user is typing,
	    // and force update on blur.
	    this.focused = false;
	    if (!isRange && !lazy) {
	      this.on('focus', function () {
	        self.focused = true;
	      });
	      this.on('blur', function () {
	        self.focused = false;
	        // do not sync value after fragment removal (#2017)
	        if (!self._frag || self._frag.inserted) {
	          self.rawListener();
	        }
	      });
	    }
	
	    // Now attach the main listener
	    this.listener = this.rawListener = function () {
	      if (composing || !self._bound) {
	        return;
	      }
	      var val = number || isRange ? toNumber(el.value) : el.value;
	      self.set(val);
	      // force update on next tick to avoid lock & same value
	      // also only update when user is not typing
	      nextTick(function () {
	        if (self._bound && !self.focused) {
	          self.update(self._watcher.value);
	        }
	      });
	    };
	
	    // apply debounce
	    if (debounce) {
	      this.listener = _debounce(this.listener, debounce);
	    }
	
	    // Support jQuery events, since jQuery.trigger() doesn't
	    // trigger native events in some cases and some plugins
	    // rely on $.trigger()
	    //
	    // We want to make sure if a listener is attached using
	    // jQuery, it is also removed with jQuery, that's why
	    // we do the check for each directive instance and
	    // store that check result on itself. This also allows
	    // easier test coverage control by unsetting the global
	    // jQuery variable in tests.
	    this.hasjQuery = typeof jQuery === 'function';
	    if (this.hasjQuery) {
	      var method = jQuery.fn.on ? 'on' : 'bind';
	      jQuery(el)[method]('change', this.rawListener);
	      if (!lazy) {
	        jQuery(el)[method]('input', this.listener);
	      }
	    } else {
	      this.on('change', this.rawListener);
	      if (!lazy) {
	        this.on('input', this.listener);
	      }
	    }
	
	    // IE9 doesn't fire input event on backspace/del/cut
	    if (!lazy && isIE9) {
	      this.on('cut', function () {
	        nextTick(self.listener);
	      });
	      this.on('keyup', function (e) {
	        if (e.keyCode === 46 || e.keyCode === 8) {
	          self.listener();
	        }
	      });
	    }
	
	    // set initial value if present
	    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    // #3029 only update when the value changes. This prevent
	    // browsers from overwriting values like selectionStart
	    value = _toString(value);
	    if (value !== this.el.value) this.el.value = value;
	  },
	
	  unbind: function unbind() {
	    var el = this.el;
	    if (this.hasjQuery) {
	      var method = jQuery.fn.off ? 'off' : 'unbind';
	      jQuery(el)[method]('change', this.listener);
	      jQuery(el)[method]('input', this.listener);
	    }
	  }
	};
	
	var radio = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      // value overwrite via v-bind:value
	      if (el.hasOwnProperty('_value')) {
	        return el._value;
	      }
	      var val = el.value;
	      if (self.params.number) {
	        val = toNumber(val);
	      }
	      return val;
	    };
	
	    this.listener = function () {
	      self.set(self.getValue());
	    };
	    this.on('change', this.listener);
	
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    this.el.checked = looseEqual(value, this.getValue());
	  }
	};
	
	var select = {
	
	  bind: function bind() {
	    var _this = this;
	
	    var self = this;
	    var el = this.el;
	
	    // method to force update DOM using latest value.
	    this.forceUpdate = function () {
	      if (self._watcher) {
	        self.update(self._watcher.get());
	      }
	    };
	
	    // check if this is a multiple select
	    var multiple = this.multiple = el.hasAttribute('multiple');
	
	    // attach listener
	    this.listener = function () {
	      var value = getValue(el, multiple);
	      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;
	      self.set(value);
	    };
	    this.on('change', this.listener);
	
	    // if has initial value, set afterBind
	    var initValue = getValue(el, multiple, true);
	    if (multiple && initValue.length || !multiple && initValue !== null) {
	      this.afterBind = this.listener;
	    }
	
	    // All major browsers except Firefox resets
	    // selectedIndex with value -1 to 0 when the element
	    // is appended to a new parent, therefore we have to
	    // force a DOM update whenever that happens...
	    this.vm.$on('hook:attached', function () {
	      nextTick(_this.forceUpdate);
	    });
	    if (!inDoc(el)) {
	      nextTick(this.forceUpdate);
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    el.selectedIndex = -1;
	    var multi = this.multiple && isArray(value);
	    var options = el.options;
	    var i = options.length;
	    var op, val;
	    while (i--) {
	      op = options[i];
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      /* eslint-disable eqeqeq */
	      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);
	      /* eslint-enable eqeqeq */
	    }
	  },
	
	  unbind: function unbind() {
	    /* istanbul ignore next */
	    this.vm.$off('hook:attached', this.forceUpdate);
	  }
	};
	
	/**
	 * Get select value
	 *
	 * @param {SelectElement} el
	 * @param {Boolean} multi
	 * @param {Boolean} init
	 * @return {Array|*}
	 */
	
	function getValue(el, multi, init) {
	  var res = multi ? [] : null;
	  var op, val, selected;
	  for (var i = 0, l = el.options.length; i < l; i++) {
	    op = el.options[i];
	    selected = init ? op.hasAttribute('selected') : op.selected;
	    if (selected) {
	      val = op.hasOwnProperty('_value') ? op._value : op.value;
	      if (multi) {
	        res.push(val);
	      } else {
	        return val;
	      }
	    }
	  }
	  return res;
	}
	
	/**
	 * Native Array.indexOf uses strict equal, but in this
	 * case we need to match string/numbers with custom equal.
	 *
	 * @param {Array} arr
	 * @param {*} val
	 */
	
	function indexOf$1(arr, val) {
	  var i = arr.length;
	  while (i--) {
	    if (looseEqual(arr[i], val)) {
	      return i;
	    }
	  }
	  return -1;
	}
	
	var checkbox = {
	
	  bind: function bind() {
	    var self = this;
	    var el = this.el;
	
	    this.getValue = function () {
	      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;
	    };
	
	    function getBooleanValue() {
	      var val = el.checked;
	      if (val && el.hasOwnProperty('_trueValue')) {
	        return el._trueValue;
	      }
	      if (!val && el.hasOwnProperty('_falseValue')) {
	        return el._falseValue;
	      }
	      return val;
	    }
	
	    this.listener = function () {
	      var model = self._watcher.get();
	      if (isArray(model)) {
	        var val = self.getValue();
	        var i = indexOf(model, val);
	        if (el.checked) {
	          if (i < 0) {
	            self.set(model.concat(val));
	          }
	        } else if (i > -1) {
	          self.set(model.slice(0, i).concat(model.slice(i + 1)));
	        }
	      } else {
	        self.set(getBooleanValue());
	      }
	    };
	
	    this.on('change', this.listener);
	    if (el.hasAttribute('checked')) {
	      this.afterBind = this.listener;
	    }
	  },
	
	  update: function update(value) {
	    var el = this.el;
	    if (isArray(value)) {
	      el.checked = indexOf(value, this.getValue()) > -1;
	    } else {
	      if (el.hasOwnProperty('_trueValue')) {
	        el.checked = looseEqual(value, el._trueValue);
	      } else {
	        el.checked = !!value;
	      }
	    }
	  }
	};
	
	var handlers = {
	  text: text$2,
	  radio: radio,
	  select: select,
	  checkbox: checkbox
	};
	
	var model = {
	
	  priority: MODEL,
	  twoWay: true,
	  handlers: handlers,
	  params: ['lazy', 'number', 'debounce'],
	
	  /**
	   * Possible elements:
	   *   <select>
	   *   <textarea>
	   *   <input type="*">
	   *     - text
	   *     - checkbox
	   *     - radio
	   *     - number
	   */
	
	  bind: function bind() {
	    // friendly warning...
	    this.checkFilters();
	    if (this.hasRead && !this.hasWrite) {
	      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model="' + this.descriptor.raw + '". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);
	    }
	    var el = this.el;
	    var tag = el.tagName;
	    var handler;
	    if (tag === 'INPUT') {
	      handler = handlers[el.type] || handlers.text;
	    } else if (tag === 'SELECT') {
	      handler = handlers.select;
	    } else if (tag === 'TEXTAREA') {
	      handler = handlers.text;
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);
	      return;
	    }
	    el.__v_model = this;
	    handler.bind.call(this);
	    this.update = handler.update;
	    this._unbind = handler.unbind;
	  },
	
	  /**
	   * Check read/write filter stats.
	   */
	
	  checkFilters: function checkFilters() {
	    var filters = this.filters;
	    if (!filters) return;
	    var i = filters.length;
	    while (i--) {
	      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);
	      if (typeof filter === 'function' || filter.read) {
	        this.hasRead = true;
	      }
	      if (filter.write) {
	        this.hasWrite = true;
	      }
	    }
	  },
	
	  unbind: function unbind() {
	    this.el.__v_model = null;
	    this._unbind && this._unbind();
	  }
	};
	
	// keyCode aliases
	var keyCodes = {
	  esc: 27,
	  tab: 9,
	  enter: 13,
	  space: 32,
	  'delete': [8, 46],
	  up: 38,
	  left: 37,
	  right: 39,
	  down: 40
	};
	
	function keyFilter(handler, keys) {
	  var codes = keys.map(function (key) {
	    var charCode = key.charCodeAt(0);
	    if (charCode > 47 && charCode < 58) {
	      return parseInt(key, 10);
	    }
	    if (key.length === 1) {
	      charCode = key.toUpperCase().charCodeAt(0);
	      if (charCode > 64 && charCode < 91) {
	        return charCode;
	      }
	    }
	    return keyCodes[key];
	  });
	  codes = [].concat.apply([], codes);
	  return function keyHandler(e) {
	    if (codes.indexOf(e.keyCode) > -1) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	function stopFilter(handler) {
	  return function stopHandler(e) {
	    e.stopPropagation();
	    return handler.call(this, e);
	  };
	}
	
	function preventFilter(handler) {
	  return function preventHandler(e) {
	    e.preventDefault();
	    return handler.call(this, e);
	  };
	}
	
	function selfFilter(handler) {
	  return function selfHandler(e) {
	    if (e.target === e.currentTarget) {
	      return handler.call(this, e);
	    }
	  };
	}
	
	var on$1 = {
	
	  priority: ON,
	  acceptStatement: true,
	  keyCodes: keyCodes,
	
	  bind: function bind() {
	    // deal with iframes
	    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {
	      var self = this;
	      this.iframeBind = function () {
	        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);
	      };
	      this.on('load', this.iframeBind);
	    }
	  },
	
	  update: function update(handler) {
	    // stub a noop for v-on with no value,
	    // e.g. @mousedown.prevent
	    if (!this.descriptor.raw) {
	      handler = function () {};
	    }
	
	    if (typeof handler !== 'function') {
	      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '="' + this.expression + '" expects a function value, ' + 'got ' + handler, this.vm);
	      return;
	    }
	
	    // apply modifiers
	    if (this.modifiers.stop) {
	      handler = stopFilter(handler);
	    }
	    if (this.modifiers.prevent) {
	      handler = preventFilter(handler);
	    }
	    if (this.modifiers.self) {
	      handler = selfFilter(handler);
	    }
	    // key filter
	    var keys = Object.keys(this.modifiers).filter(function (key) {
	      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';
	    });
	    if (keys.length) {
	      handler = keyFilter(handler, keys);
	    }
	
	    this.reset();
	    this.handler = handler;
	
	    if (this.iframeBind) {
	      this.iframeBind();
	    } else {
	      on(this.el, this.arg, this.handler, this.modifiers.capture);
	    }
	  },
	
	  reset: function reset() {
	    var el = this.iframeBind ? this.el.contentWindow : this.el;
	    if (this.handler) {
	      off(el, this.arg, this.handler);
	    }
	  },
	
	  unbind: function unbind() {
	    this.reset();
	  }
	};
	
	var prefixes = ['-webkit-', '-moz-', '-ms-'];
	var camelPrefixes = ['Webkit', 'Moz', 'ms'];
	var importantRE = /!important;?$/;
	var propCache = Object.create(null);
	
	var testEl = null;
	
	var style = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (typeof value === 'string') {
	      this.el.style.cssText = value;
	    } else if (isArray(value)) {
	      this.handleObject(value.reduce(extend, {}));
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  handleObject: function handleObject(value) {
	    // cache object styles so that only changed props
	    // are actually updated.
	    var cache = this.cache || (this.cache = {});
	    var name, val;
	    for (name in cache) {
	      if (!(name in value)) {
	        this.handleSingle(name, null);
	        delete cache[name];
	      }
	    }
	    for (name in value) {
	      val = value[name];
	      if (val !== cache[name]) {
	        cache[name] = val;
	        this.handleSingle(name, val);
	      }
	    }
	  },
	
	  handleSingle: function handleSingle(prop, value) {
	    prop = normalize(prop);
	    if (!prop) return; // unsupported prop
	    // cast possible numbers/booleans into strings
	    if (value != null) value += '';
	    if (value) {
	      var isImportant = importantRE.test(value) ? 'important' : '';
	      if (isImportant) {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          warn('It\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');
	        }
	        value = value.replace(importantRE, '').trim();
	        this.el.style.setProperty(prop.kebab, value, isImportant);
	      } else {
	        this.el.style[prop.camel] = value;
	      }
	    } else {
	      this.el.style[prop.camel] = '';
	    }
	  }
	
	};
	
	/**
	 * Normalize a CSS property name.
	 * - cache result
	 * - auto prefix
	 * - camelCase -> dash-case
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function normalize(prop) {
	  if (propCache[prop]) {
	    return propCache[prop];
	  }
	  var res = prefix(prop);
	  propCache[prop] = propCache[res] = res;
	  return res;
	}
	
	/**
	 * Auto detect the appropriate prefix for a CSS property.
	 * https://gist.github.com/paulirish/523692
	 *
	 * @param {String} prop
	 * @return {String}
	 */
	
	function prefix(prop) {
	  prop = hyphenate(prop);
	  var camel = camelize(prop);
	  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);
	  if (!testEl) {
	    testEl = document.createElement('div');
	  }
	  var i = prefixes.length;
	  var prefixed;
	  if (camel !== 'filter' && camel in testEl.style) {
	    return {
	      kebab: prop,
	      camel: camel
	    };
	  }
	  while (i--) {
	    prefixed = camelPrefixes[i] + upper;
	    if (prefixed in testEl.style) {
	      return {
	        kebab: prefixes[i] + prop,
	        camel: prefixed
	      };
	    }
	  }
	}
	
	// xlink
	var xlinkNS = 'http://www.w3.org/1999/xlink';
	var xlinkRE = /^xlink:/;
	
	// check for attributes that prohibit interpolations
	var disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;
	// these attributes should also set their corresponding properties
	// because they only affect the initial state of the element
	var attrWithPropsRE = /^(?:value|checked|selected|muted)$/;
	// these attributes expect enumrated values of "true" or "false"
	// but are not boolean attributes
	var enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;
	
	// these attributes should set a hidden property for
	// binding v-model to object values
	var modelProps = {
	  value: '_value',
	  'true-value': '_trueValue',
	  'false-value': '_falseValue'
	};
	
	var bind$1 = {
	
	  priority: BIND,
	
	  bind: function bind() {
	    var attr = this.arg;
	    var tag = this.el.tagName;
	    // should be deep watch on object mode
	    if (!attr) {
	      this.deep = true;
	    }
	    // handle interpolation bindings
	    var descriptor = this.descriptor;
	    var tokens = descriptor.interp;
	    if (tokens) {
	      // handle interpolations with one-time tokens
	      if (descriptor.hasOneTime) {
	        this.expression = tokensToExp(tokens, this._scope || this.vm);
	      }
	
	      // only allow binding on native attributes
	      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {
	        process.env.NODE_ENV !== 'production' && warn(attr + '="' + descriptor.raw + '": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);
	        this.el.removeAttribute(attr);
	        this.invalid = true;
	      }
	
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production') {
	        var raw = attr + '="' + descriptor.raw + '": ';
	        // warn src
	        if (attr === 'src') {
	          warn(raw + 'interpolation in "src" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);
	        }
	
	        // warn style
	        if (attr === 'style') {
	          warn(raw + 'interpolation in "style" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);
	        }
	      }
	    }
	  },
	
	  update: function update(value) {
	    if (this.invalid) {
	      return;
	    }
	    var attr = this.arg;
	    if (this.arg) {
	      this.handleSingle(attr, value);
	    } else {
	      this.handleObject(value || {});
	    }
	  },
	
	  // share object handler with v-bind:class
	  handleObject: style.handleObject,
	
	  handleSingle: function handleSingle(attr, value) {
	    var el = this.el;
	    var interp = this.descriptor.interp;
	    if (this.modifiers.camel) {
	      attr = camelize(attr);
	    }
	    if (!interp && attrWithPropsRE.test(attr) && attr in el) {
	      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to "null" for null...
	      ? '' : value : value;
	
	      if (el[attr] !== attrValue) {
	        el[attr] = attrValue;
	      }
	    }
	    // set model props
	    var modelProp = modelProps[attr];
	    if (!interp && modelProp) {
	      el[modelProp] = value;
	      // update v-model if present
	      var model = el.__v_model;
	      if (model) {
	        model.listener();
	      }
	    }
	    // do not set value attribute for textarea
	    if (attr === 'value' && el.tagName === 'TEXTAREA') {
	      el.removeAttribute(attr);
	      return;
	    }
	    // update attribute
	    if (enumeratedAttrRE.test(attr)) {
	      el.setAttribute(attr, value ? 'true' : 'false');
	    } else if (value != null && value !== false) {
	      if (attr === 'class') {
	        // handle edge case #1960:
	        // class interpolation should not overwrite Vue transition class
	        if (el.__v_trans) {
	          value += ' ' + el.__v_trans.id + '-transition';
	        }
	        setClass(el, value);
	      } else if (xlinkRE.test(attr)) {
	        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);
	      } else {
	        el.setAttribute(attr, value === true ? '' : value);
	      }
	    } else {
	      el.removeAttribute(attr);
	    }
	  }
	};
	
	var el = {
	
	  priority: EL,
	
	  bind: function bind() {
	    /* istanbul ignore if */
	    if (!this.arg) {
	      return;
	    }
	    var id = this.id = camelize(this.arg);
	    var refs = (this._scope || this.vm).$els;
	    if (hasOwn(refs, id)) {
	      refs[id] = this.el;
	    } else {
	      defineReactive(refs, id, this.el);
	    }
	  },
	
	  unbind: function unbind() {
	    var refs = (this._scope || this.vm).$els;
	    if (refs[this.id] === this.el) {
	      refs[this.id] = null;
	    }
	  }
	};
	
	var ref = {
	  bind: function bind() {
	    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);
	  }
	};
	
	var cloak = {
	  bind: function bind() {
	    var el = this.el;
	    this.vm.$once('pre-hook:compiled', function () {
	      el.removeAttribute('v-cloak');
	    });
	  }
	};
	
	// logic control
	// two-way binding
	// event handling
	// attributes
	// ref & el
	// cloak
	// must export plain object
	var directives = {
	  text: text$1,
	  html: html,
	  'for': vFor,
	  'if': vIf,
	  show: show,
	  model: model,
	  on: on$1,
	  bind: bind$1,
	  el: el,
	  ref: ref,
	  cloak: cloak
	};
	
	var vClass = {
	
	  deep: true,
	
	  update: function update(value) {
	    if (!value) {
	      this.cleanup();
	    } else if (typeof value === 'string') {
	      this.setClass(value.trim().split(/\s+/));
	    } else {
	      this.setClass(normalize$1(value));
	    }
	  },
	
	  setClass: function setClass(value) {
	    this.cleanup(value);
	    for (var i = 0, l = value.length; i < l; i++) {
	      var val = value[i];
	      if (val) {
	        apply(this.el, val, addClass);
	      }
	    }
	    this.prevKeys = value;
	  },
	
	  cleanup: function cleanup(value) {
	    var prevKeys = this.prevKeys;
	    if (!prevKeys) return;
	    var i = prevKeys.length;
	    while (i--) {
	      var key = prevKeys[i];
	      if (!value || value.indexOf(key) < 0) {
	        apply(this.el, key, removeClass);
	      }
	    }
	  }
	};
	
	/**
	 * Normalize objects and arrays (potentially containing objects)
	 * into array of strings.
	 *
	 * @param {Object|Array<String|Object>} value
	 * @return {Array<String>}
	 */
	
	function normalize$1(value) {
	  var res = [];
	  if (isArray(value)) {
	    for (var i = 0, l = value.length; i < l; i++) {
	      var _key = value[i];
	      if (_key) {
	        if (typeof _key === 'string') {
	          res.push(_key);
	        } else {
	          for (var k in _key) {
	            if (_key[k]) res.push(k);
	          }
	        }
	      }
	    }
	  } else if (isObject(value)) {
	    for (var key in value) {
	      if (value[key]) res.push(key);
	    }
	  }
	  return res;
	}
	
	/**
	 * Add or remove a class/classes on an element
	 *
	 * @param {Element} el
	 * @param {String} key The class name. This may or may not
	 *                     contain a space character, in such a
	 *                     case we'll deal with multiple class
	 *                     names at once.
	 * @param {Function} fn
	 */
	
	function apply(el, key, fn) {
	  key = key.trim();
	  if (key.indexOf(' ') === -1) {
	    fn(el, key);
	    return;
	  }
	  // The key contains one or more space characters.
	  // Since a class name doesn't accept such characters, we
	  // treat it as multiple classes.
	  var keys = key.split(/\s+/);
	  for (var i = 0, l = keys.length; i < l; i++) {
	    fn(el, keys[i]);
	  }
	}
	
	var component = {
	
	  priority: COMPONENT,
	
	  params: ['keep-alive', 'transition-mode', 'inline-template'],
	
	  /**
	   * Setup. Two possible usages:
	   *
	   * - static:
	   *   <comp> or <div v-component="comp">
	   *
	   * - dynamic:
	   *   <component :is="view">
	   */
	
	  bind: function bind() {
	    if (!this.el.__vue__) {
	      // keep-alive cache
	      this.keepAlive = this.params.keepAlive;
	      if (this.keepAlive) {
	        this.cache = {};
	      }
	      // check inline-template
	      if (this.params.inlineTemplate) {
	        // extract inline template as a DocumentFragment
	        this.inlineTemplate = extractContent(this.el, true);
	      }
	      // component resolution related state
	      this.pendingComponentCb = this.Component = null;
	      // transition related state
	      this.pendingRemovals = 0;
	      this.pendingRemovalCb = null;
	      // create a ref anchor
	      this.anchor = createAnchor('v-component');
	      replace(this.el, this.anchor);
	      // remove is attribute.
	      // this is removed during compilation, but because compilation is
	      // cached, when the component is used elsewhere this attribute
	      // will remain at link time.
	      this.el.removeAttribute('is');
	      this.el.removeAttribute(':is');
	      // remove ref, same as above
	      if (this.descriptor.ref) {
	        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));
	      }
	      // if static, build right now.
	      if (this.literal) {
	        this.setComponent(this.expression);
	      }
	    } else {
	      process.env.NODE_ENV !== 'production' && warn('cannot mount component "' + this.expression + '" ' + 'on already mounted element: ' + this.el);
	    }
	  },
	
	  /**
	   * Public update, called by the watcher in the dynamic
	   * literal scenario, e.g. <component :is="view">
	   */
	
	  update: function update(value) {
	    if (!this.literal) {
	      this.setComponent(value);
	    }
	  },
	
	  /**
	   * Switch dynamic components. May resolve the component
	   * asynchronously, and perform transition based on
	   * specified transition mode. Accepts a few additional
	   * arguments specifically for vue-router.
	   *
	   * The callback is called when the full transition is
	   * finished.
	   *
	   * @param {String} value
	   * @param {Function} [cb]
	   */
	
	  setComponent: function setComponent(value, cb) {
	    this.invalidatePending();
	    if (!value) {
	      // just remove current
	      this.unbuild(true);
	      this.remove(this.childVM, cb);
	      this.childVM = null;
	    } else {
	      var self = this;
	      this.resolveComponent(value, function () {
	        self.mountComponent(cb);
	      });
	    }
	  },
	
	  /**
	   * Resolve the component constructor to use when creating
	   * the child vm.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  resolveComponent: function resolveComponent(value, cb) {
	    var self = this;
	    this.pendingComponentCb = cancellable(function (Component) {
	      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);
	      self.Component = Component;
	      cb();
	    });
	    this.vm._resolveComponent(value, this.pendingComponentCb);
	  },
	
	  /**
	   * Create a new instance using the current constructor and
	   * replace the existing instance. This method doesn't care
	   * whether the new component and the old one are actually
	   * the same.
	   *
	   * @param {Function} [cb]
	   */
	
	  mountComponent: function mountComponent(cb) {
	    // actual mount
	    this.unbuild(true);
	    var self = this;
	    var activateHooks = this.Component.options.activate;
	    var cached = this.getCached();
	    var newComponent = this.build();
	    if (activateHooks && !cached) {
	      this.waitingFor = newComponent;
	      callActivateHooks(activateHooks, newComponent, function () {
	        if (self.waitingFor !== newComponent) {
	          return;
	        }
	        self.waitingFor = null;
	        self.transition(newComponent, cb);
	      });
	    } else {
	      // update ref for kept-alive component
	      if (cached) {
	        newComponent._updateRef();
	      }
	      this.transition(newComponent, cb);
	    }
	  },
	
	  /**
	   * When the component changes or unbinds before an async
	   * constructor is resolved, we need to invalidate its
	   * pending callback.
	   */
	
	  invalidatePending: function invalidatePending() {
	    if (this.pendingComponentCb) {
	      this.pendingComponentCb.cancel();
	      this.pendingComponentCb = null;
	    }
	  },
	
	  /**
	   * Instantiate/insert a new child vm.
	   * If keep alive and has cached instance, insert that
	   * instance; otherwise build a new one and cache it.
	   *
	   * @param {Object} [extraOptions]
	   * @return {Vue} - the created instance
	   */
	
	  build: function build(extraOptions) {
	    var cached = this.getCached();
	    if (cached) {
	      return cached;
	    }
	    if (this.Component) {
	      // default options
	      var options = {
	        name: this.ComponentName,
	        el: cloneNode(this.el),
	        template: this.inlineTemplate,
	        // make sure to add the child with correct parent
	        // if this is a transcluded component, its parent
	        // should be the transclusion host.
	        parent: this._host || this.vm,
	        // if no inline-template, then the compiled
	        // linker can be cached for better performance.
	        _linkerCachable: !this.inlineTemplate,
	        _ref: this.descriptor.ref,
	        _asComponent: true,
	        _isRouterView: this._isRouterView,
	        // if this is a transcluded component, context
	        // will be the common parent vm of this instance
	        // and its host.
	        _context: this.vm,
	        // if this is inside an inline v-for, the scope
	        // will be the intermediate scope created for this
	        // repeat fragment. this is used for linking props
	        // and container directives.
	        _scope: this._scope,
	        // pass in the owner fragment of this component.
	        // this is necessary so that the fragment can keep
	        // track of its contained components in order to
	        // call attach/detach hooks for them.
	        _frag: this._frag
	      };
	      // extra options
	      // in 1.0.0 this is used by vue-router only
	      /* istanbul ignore if */
	      if (extraOptions) {
	        extend(options, extraOptions);
	      }
	      var child = new this.Component(options);
	      if (this.keepAlive) {
	        this.cache[this.Component.cid] = child;
	      }
	      /* istanbul ignore if */
	      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {
	        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);
	      }
	      return child;
	    }
	  },
	
	  /**
	   * Try to get a cached instance of the current component.
	   *
	   * @return {Vue|undefined}
	   */
	
	  getCached: function getCached() {
	    return this.keepAlive && this.cache[this.Component.cid];
	  },
	
	  /**
	   * Teardown the current child, but defers cleanup so
	   * that we can separate the destroy and removal steps.
	   *
	   * @param {Boolean} defer
	   */
	
	  unbuild: function unbuild(defer) {
	    if (this.waitingFor) {
	      if (!this.keepAlive) {
	        this.waitingFor.$destroy();
	      }
	      this.waitingFor = null;
	    }
	    var child = this.childVM;
	    if (!child || this.keepAlive) {
	      if (child) {
	        // remove ref
	        child._inactive = true;
	        child._updateRef(true);
	      }
	      return;
	    }
	    // the sole purpose of `deferCleanup` is so that we can
	    // "deactivate" the vm right now and perform DOM removal
	    // later.
	    child.$destroy(false, defer);
	  },
	
	  /**
	   * Remove current destroyed child and manually do
	   * the cleanup after removal.
	   *
	   * @param {Function} cb
	   */
	
	  remove: function remove(child, cb) {
	    var keepAlive = this.keepAlive;
	    if (child) {
	      // we may have a component switch when a previous
	      // component is still being transitioned out.
	      // we want to trigger only one lastest insertion cb
	      // when the existing transition finishes. (#1119)
	      this.pendingRemovals++;
	      this.pendingRemovalCb = cb;
	      var self = this;
	      child.$remove(function () {
	        self.pendingRemovals--;
	        if (!keepAlive) child._cleanup();
	        if (!self.pendingRemovals && self.pendingRemovalCb) {
	          self.pendingRemovalCb();
	          self.pendingRemovalCb = null;
	        }
	      });
	    } else if (cb) {
	      cb();
	    }
	  },
	
	  /**
	   * Actually swap the components, depending on the
	   * transition mode. Defaults to simultaneous.
	   *
	   * @param {Vue} target
	   * @param {Function} [cb]
	   */
	
	  transition: function transition(target, cb) {
	    var self = this;
	    var current = this.childVM;
	    // for devtool inspection
	    if (current) current._inactive = true;
	    target._inactive = false;
	    this.childVM = target;
	    switch (self.params.transitionMode) {
	      case 'in-out':
	        target.$before(self.anchor, function () {
	          self.remove(current, cb);
	        });
	        break;
	      case 'out-in':
	        self.remove(current, function () {
	          target.$before(self.anchor, cb);
	        });
	        break;
	      default:
	        self.remove(current);
	        target.$before(self.anchor, cb);
	    }
	  },
	
	  /**
	   * Unbind.
	   */
	
	  unbind: function unbind() {
	    this.invalidatePending();
	    // Do not defer cleanup when unbinding
	    this.unbuild();
	    // destroy all keep-alive cached instances
	    if (this.cache) {
	      for (var key in this.cache) {
	        this.cache[key].$destroy();
	      }
	      this.cache = null;
	    }
	  }
	};
	
	/**
	 * Call activate hooks in order (asynchronous)
	 *
	 * @param {Array} hooks
	 * @param {Vue} vm
	 * @param {Function} cb
	 */
	
	function callActivateHooks(hooks, vm, cb) {
	  var total = hooks.length;
	  var called = 0;
	  hooks[0].call(vm, next);
	  function next() {
	    if (++called >= total) {
	      cb();
	    } else {
	      hooks[called].call(vm, next);
	    }
	  }
	}
	
	var propBindingModes = config._propBindingModes;
	var empty = {};
	
	// regexes
	var identRE$1 = /^[$_a-zA-Z]+[\w$]*$/;
	var settablePathRE = /^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/;
	
	/**
	 * Compile props on a root element and return
	 * a props link function.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Array} propOptions
	 * @param {Vue} vm
	 * @return {Function} propsLinkFn
	 */
	
	function compileProps(el, propOptions, vm) {
	  var props = [];
	  var propsData = vm.$options.propsData;
	  var names = Object.keys(propOptions);
	  var i = names.length;
	  var options, name, attr, value, path, parsed, prop;
	  while (i--) {
	    name = names[i];
	    options = propOptions[name] || empty;
	
	    if (process.env.NODE_ENV !== 'production' && name === '$data') {
	      warn('Do not use $data as prop.', vm);
	      continue;
	    }
	
	    // props could contain dashes, which will be
	    // interpreted as minus calculations by the parser
	    // so we need to camelize the path here
	    path = camelize(name);
	    if (!identRE$1.test(path)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: "' + name + '". Prop keys ' + 'must be valid identifiers.', vm);
	      continue;
	    }
	
	    prop = {
	      name: name,
	      path: path,
	      options: options,
	      mode: propBindingModes.ONE_WAY,
	      raw: null
	    };
	
	    attr = hyphenate(name);
	    // first check dynamic version
	    if ((value = getBindAttr(el, attr)) === null) {
	      if ((value = getBindAttr(el, attr + '.sync')) !== null) {
	        prop.mode = propBindingModes.TWO_WAY;
	      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {
	        prop.mode = propBindingModes.ONE_TIME;
	      }
	    }
	    if (value !== null) {
	      // has dynamic binding!
	      prop.raw = value;
	      parsed = parseDirective(value);
	      value = parsed.expression;
	      prop.filters = parsed.filters;
	      // check binding type
	      if (isLiteral(value) && !parsed.filters) {
	        // for expressions containing literal numbers and
	        // booleans, there's no need to setup a prop binding,
	        // so we can optimize them as a one-time set.
	        prop.optimizedLiteral = true;
	      } else {
	        prop.dynamic = true;
	        // check non-settable path for two-way bindings
	        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {
	          prop.mode = propBindingModes.ONE_WAY;
	          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);
	        }
	      }
	      prop.parentPath = value;
	
	      // warn required two-way
	      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {
	        warn('Prop "' + name + '" expects a two-way binding type.', vm);
	      }
	    } else if ((value = getAttr(el, attr)) !== null) {
	      // has literal binding!
	      prop.raw = value;
	    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {
	      // has propsData
	      prop.raw = value;
	    } else if (process.env.NODE_ENV !== 'production') {
	      // check possible camelCase prop usage
	      var lowerCaseName = path.toLowerCase();
	      value = /[A-Z\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));
	      if (value) {
	        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);
	      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {
	        // warn missing required
	        warn('Missing required prop: ' + name, vm);
	      }
	    }
	    // push prop
	    props.push(prop);
	  }
	  return makePropsLinkFn(props);
	}
	
	/**
	 * Build a function that applies props to a vm.
	 *
	 * @param {Array} props
	 * @return {Function} propsLinkFn
	 */
	
	function makePropsLinkFn(props) {
	  return function propsLinkFn(vm, scope) {
	    // store resolved props info
	    vm._props = {};
	    var inlineProps = vm.$options.propsData;
	    var i = props.length;
	    var prop, path, options, value, raw;
	    while (i--) {
	      prop = props[i];
	      raw = prop.raw;
	      path = prop.path;
	      options = prop.options;
	      vm._props[path] = prop;
	      if (inlineProps && hasOwn(inlineProps, path)) {
	        initProp(vm, prop, inlineProps[path]);
	      }if (raw === null) {
	        // initialize absent prop
	        initProp(vm, prop, undefined);
	      } else if (prop.dynamic) {
	        // dynamic prop
	        if (prop.mode === propBindingModes.ONE_TIME) {
	          // one time binding
	          value = (scope || vm._context || vm).$get(prop.parentPath);
	          initProp(vm, prop, value);
	        } else {
	          if (vm._context) {
	            // dynamic binding
	            vm._bindDir({
	              name: 'prop',
	              def: propDef,
	              prop: prop
	            }, null, null, scope); // el, host, scope
	          } else {
	              // root instance
	              initProp(vm, prop, vm.$get(prop.parentPath));
	            }
	        }
	      } else if (prop.optimizedLiteral) {
	        // optimized literal, cast it and just set once
	        var stripped = stripQuotes(raw);
	        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;
	        initProp(vm, prop, value);
	      } else {
	        // string literal, but we need to cater for
	        // Boolean props with no value, or with same
	        // literal value (e.g. disabled="disabled")
	        // see https://github.com/vuejs/vue-loader/issues/182
	        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;
	        initProp(vm, prop, value);
	      }
	    }
	  };
	}
	
	/**
	 * Process a prop with a rawValue, applying necessary coersions,
	 * default values & assertions and call the given callback with
	 * processed value.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} rawValue
	 * @param {Function} fn
	 */
	
	function processPropValue(vm, prop, rawValue, fn) {
	  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);
	  var value = rawValue;
	  if (value === undefined) {
	    value = getPropDefaultValue(vm, prop);
	  }
	  value = coerceProp(prop, value, vm);
	  var coerced = value !== rawValue;
	  if (!assertProp(prop, value, vm)) {
	    value = undefined;
	  }
	  if (isSimple && !coerced) {
	    withoutConversion(function () {
	      fn(value);
	    });
	  } else {
	    fn(value);
	  }
	}
	
	/**
	 * Set a prop's initial value on a vm and its data object.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function initProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    defineReactive(vm, prop.path, value);
	  });
	}
	
	/**
	 * Update a prop's value on a vm.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @param {*} value
	 */
	
	function updateProp(vm, prop, value) {
	  processPropValue(vm, prop, value, function (value) {
	    vm[prop.path] = value;
	  });
	}
	
	/**
	 * Get the default value of a prop.
	 *
	 * @param {Vue} vm
	 * @param {Object} prop
	 * @return {*}
	 */
	
	function getPropDefaultValue(vm, prop) {
	  // no default, return undefined
	  var options = prop.options;
	  if (!hasOwn(options, 'default')) {
	    // absent boolean value defaults to false
	    return options.type === Boolean ? false : undefined;
	  }
	  var def = options['default'];
	  // warn against non-factory defaults for Object & Array
	  if (isObject(def)) {
	    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop "' + prop.name + '": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);
	  }
	  // call factory function for non-Function types
	  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;
	}
	
	/**
	 * Assert whether a prop is valid.
	 *
	 * @param {Object} prop
	 * @param {*} value
	 * @param {Vue} vm
	 */
	
	function assertProp(prop, value, vm) {
	  if (!prop.options.required && ( // non-required
	  prop.raw === null || // abscent
	  value == null) // null or undefined
	  ) {
	      return true;
	    }
	  var options = prop.options;
	  var type = options.type;
	  var valid = !type;
	  var expectedTypes = [];
	  if (type) {
	    if (!isArray(type)) {
	      type = [type];
	    }
	    for (var i = 0; i < type.length && !valid; i++) {
	      var assertedType = assertType(value, type[i]);
	      expectedTypes.push(assertedType.expectedType);
	      valid = assertedType.valid;
	    }
	  }
	  if (!valid) {
	    if (process.env.NODE_ENV !== 'production') {
	      warn('Invalid prop: type check failed for prop "' + prop.name + '".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);
	    }
	    return false;
	  }
	  var validator = options.validator;
	  if (validator) {
	    if (!validator(value)) {
	      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop "' + prop.name + '".', vm);
	      return false;
	    }
	  }
	  return true;
	}
	
	/**
	 * Force parsing value with coerce option.
	 *
	 * @param {*} value
	 * @param {Object} options
	 * @return {*}
	 */
	
	function coerceProp(prop, value, vm) {
	  var coerce = prop.options.coerce;
	  if (!coerce) {
	    return value;
	  }
	  if (typeof coerce === 'function') {
	    return coerce(value);
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop "' + prop.name + '": expected function, got ' + typeof coerce + '.', vm);
	    return value;
	  }
	}
	
	/**
	 * Assert the type of a value
	 *
	 * @param {*} value
	 * @param {Function} type
	 * @return {Object}
	 */
	
	function assertType(value, type) {
	  var valid;
	  var expectedType;
	  if (type === String) {
	    expectedType = 'string';
	    valid = typeof value === expectedType;
	  } else if (type === Number) {
	    expectedType = 'number';
	    valid = typeof value === expectedType;
	  } else if (type === Boolean) {
	    expectedType = 'boolean';
	    valid = typeof value === expectedType;
	  } else if (type === Function) {
	    expectedType = 'function';
	    valid = typeof value === expectedType;
	  } else if (type === Object) {
	    expectedType = 'object';
	    valid = isPlainObject(value);
	  } else if (type === Array) {
	    expectedType = 'array';
	    valid = isArray(value);
	  } else {
	    valid = value instanceof type;
	  }
	  return {
	    valid: valid,
	    expectedType: expectedType
	  };
	}
	
	/**
	 * Format type for output
	 *
	 * @param {String} type
	 * @return {String}
	 */
	
	function formatType(type) {
	  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';
	}
	
	/**
	 * Format value
	 *
	 * @param {*} value
	 * @return {String}
	 */
	
	function formatValue(val) {
	  return Object.prototype.toString.call(val).slice(8, -1);
	}
	
	var bindingModes = config._propBindingModes;
	
	var propDef = {
	
	  bind: function bind() {
	    var child = this.vm;
	    var parent = child._context;
	    // passed in from compiler directly
	    var prop = this.descriptor.prop;
	    var childKey = prop.path;
	    var parentKey = prop.parentPath;
	    var twoWay = prop.mode === bindingModes.TWO_WAY;
	
	    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {
	      updateProp(child, prop, val);
	    }, {
	      twoWay: twoWay,
	      filters: prop.filters,
	      // important: props need to be observed on the
	      // v-for scope if present
	      scope: this._scope
	    });
	
	    // set the child initial value.
	    initProp(child, prop, parentWatcher.value);
	
	    // setup two-way binding
	    if (twoWay) {
	      // important: defer the child watcher creation until
	      // the created hook (after data observation)
	      var self = this;
	      child.$once('pre-hook:created', function () {
	        self.childWatcher = new Watcher(child, childKey, function (val) {
	          parentWatcher.set(val);
	        }, {
	          // ensure sync upward before parent sync down.
	          // this is necessary in cases e.g. the child
	          // mutates a prop array, then replaces it. (#1683)
	          sync: true
	        });
	      });
	    }
	  },
	
	  unbind: function unbind() {
	    this.parentWatcher.teardown();
	    if (this.childWatcher) {
	      this.childWatcher.teardown();
	    }
	  }
	};
	
	var queue$1 = [];
	var queued = false;
	
	/**
	 * Push a job into the queue.
	 *
	 * @param {Function} job
	 */
	
	function pushJob(job) {
	  queue$1.push(job);
	  if (!queued) {
	    queued = true;
	    nextTick(flush);
	  }
	}
	
	/**
	 * Flush the queue, and do one forced reflow before
	 * triggering transitions.
	 */
	
	function flush() {
	  // Force layout
	  var f = document.documentElement.offsetHeight;
	  for (var i = 0; i < queue$1.length; i++) {
	    queue$1[i]();
	  }
	  queue$1 = [];
	  queued = false;
	  // dummy return, so js linters don't complain about
	  // unused variable f
	  return f;
	}
	
	var TYPE_TRANSITION = 'transition';
	var TYPE_ANIMATION = 'animation';
	var transDurationProp = transitionProp + 'Duration';
	var animDurationProp = animationProp + 'Duration';
	
	/**
	 * If a just-entered element is applied the
	 * leave class while its enter transition hasn't started yet,
	 * and the transitioned property has the same value for both
	 * enter/leave, then the leave transition will be skipped and
	 * the transitionend event never fires. This function ensures
	 * its callback to be called after a transition has started
	 * by waiting for double raf.
	 *
	 * It falls back to setTimeout on devices that support CSS
	 * transitions but not raf (e.g. Android 4.2 browser) - since
	 * these environments are usually slow, we are giving it a
	 * relatively large timeout.
	 */
	
	var raf = inBrowser && window.requestAnimationFrame;
	var waitForTransitionStart = raf
	/* istanbul ignore next */
	? function (fn) {
	  raf(function () {
	    raf(fn);
	  });
	} : function (fn) {
	  setTimeout(fn, 50);
	};
	
	/**
	 * A Transition object that encapsulates the state and logic
	 * of the transition.
	 *
	 * @param {Element} el
	 * @param {String} id
	 * @param {Object} hooks
	 * @param {Vue} vm
	 */
	function Transition(el, id, hooks, vm) {
	  this.id = id;
	  this.el = el;
	  this.enterClass = hooks && hooks.enterClass || id + '-enter';
	  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';
	  this.hooks = hooks;
	  this.vm = vm;
	  // async state
	  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;
	  this.justEntered = false;
	  this.entered = this.left = false;
	  this.typeCache = {};
	  // check css transition type
	  this.type = hooks && hooks.type;
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV !== 'production') {
	    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {
	      warn('invalid CSS transition type for transition="' + this.id + '": ' + this.type, vm);
	    }
	  }
	  // bind
	  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {
	    self[m] = bind(self[m], self);
	  });
	}
	
	var p$1 = Transition.prototype;
	
	/**
	 * Start an entering transition.
	 *
	 * 1. enter transition triggered
	 * 2. call beforeEnter hook
	 * 3. add enter class
	 * 4. insert/show element
	 * 5. call enter hook (with possible explicit js callback)
	 * 6. reflow
	 * 7. based on transition type:
	 *    - transition:
	 *        remove class now, wait for transitionend,
	 *        then done if there's no explicit js callback.
	 *    - animation:
	 *        wait for animationend, remove class,
	 *        then done if there's no explicit js callback.
	 *    - no css transition:
	 *        done now if there's no explicit js callback.
	 * 8. wait for either done or js callback, then call
	 *    afterEnter hook.
	 *
	 * @param {Function} op - insert/show the element
	 * @param {Function} [cb]
	 */
	
	p$1.enter = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeEnter');
	  this.cb = cb;
	  addClass(this.el, this.enterClass);
	  op();
	  this.entered = false;
	  this.callHookWithCb('enter');
	  if (this.entered) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.enterCancelled;
	  pushJob(this.enterNextTick);
	};
	
	/**
	 * The "nextTick" phase of an entering transition, which is
	 * to be pushed into a queue and executed after a reflow so
	 * that removing the class can trigger a CSS transition.
	 */
	
	p$1.enterNextTick = function () {
	  var _this = this;
	
	  // prevent transition skipping
	  this.justEntered = true;
	  waitForTransitionStart(function () {
	    _this.justEntered = false;
	  });
	  var enterDone = this.enterDone;
	  var type = this.getCssTransitionType(this.enterClass);
	  if (!this.pendingJsCb) {
	    if (type === TYPE_TRANSITION) {
	      // trigger transition by removing enter class now
	      removeClass(this.el, this.enterClass);
	      this.setupCssCb(transitionEndEvent, enterDone);
	    } else if (type === TYPE_ANIMATION) {
	      this.setupCssCb(animationEndEvent, enterDone);
	    } else {
	      enterDone();
	    }
	  } else if (type === TYPE_TRANSITION) {
	    removeClass(this.el, this.enterClass);
	  }
	};
	
	/**
	 * The "cleanup" phase of an entering transition.
	 */
	
	p$1.enterDone = function () {
	  this.entered = true;
	  this.cancel = this.pendingJsCb = null;
	  removeClass(this.el, this.enterClass);
	  this.callHook('afterEnter');
	  if (this.cb) this.cb();
	};
	
	/**
	 * Start a leaving transition.
	 *
	 * 1. leave transition triggered.
	 * 2. call beforeLeave hook
	 * 3. add leave class (trigger css transition)
	 * 4. call leave hook (with possible explicit js callback)
	 * 5. reflow if no explicit js callback is provided
	 * 6. based on transition type:
	 *    - transition or animation:
	 *        wait for end event, remove class, then done if
	 *        there's no explicit js callback.
	 *    - no css transition:
	 *        done if there's no explicit js callback.
	 * 7. wait for either done or js callback, then call
	 *    afterLeave hook.
	 *
	 * @param {Function} op - remove/hide the element
	 * @param {Function} [cb]
	 */
	
	p$1.leave = function (op, cb) {
	  this.cancelPending();
	  this.callHook('beforeLeave');
	  this.op = op;
	  this.cb = cb;
	  addClass(this.el, this.leaveClass);
	  this.left = false;
	  this.callHookWithCb('leave');
	  if (this.left) {
	    return; // user called done synchronously.
	  }
	  this.cancel = this.hooks && this.hooks.leaveCancelled;
	  // only need to handle leaveDone if
	  // 1. the transition is already done (synchronously called
	  //    by the user, which causes this.op set to null)
	  // 2. there's no explicit js callback
	  if (this.op && !this.pendingJsCb) {
	    // if a CSS transition leaves immediately after enter,
	    // the transitionend event never fires. therefore we
	    // detect such cases and end the leave immediately.
	    if (this.justEntered) {
	      this.leaveDone();
	    } else {
	      pushJob(this.leaveNextTick);
	    }
	  }
	};
	
	/**
	 * The "nextTick" phase of a leaving transition.
	 */
	
	p$1.leaveNextTick = function () {
	  var type = this.getCssTransitionType(this.leaveClass);
	  if (type) {
	    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;
	    this.setupCssCb(event, this.leaveDone);
	  } else {
	    this.leaveDone();
	  }
	};
	
	/**
	 * The "cleanup" phase of a leaving transition.
	 */
	
	p$1.leaveDone = function () {
	  this.left = true;
	  this.cancel = this.pendingJsCb = null;
	  this.op();
	  removeClass(this.el, this.leaveClass);
	  this.callHook('afterLeave');
	  if (this.cb) this.cb();
	  this.op = null;
	};
	
	/**
	 * Cancel any pending callbacks from a previously running
	 * but not finished transition.
	 */
	
	p$1.cancelPending = function () {
	  this.op = this.cb = null;
	  var hasPending = false;
	  if (this.pendingCssCb) {
	    hasPending = true;
	    off(this.el, this.pendingCssEvent, this.pendingCssCb);
	    this.pendingCssEvent = this.pendingCssCb = null;
	  }
	  if (this.pendingJsCb) {
	    hasPending = true;
	    this.pendingJsCb.cancel();
	    this.pendingJsCb = null;
	  }
	  if (hasPending) {
	    removeClass(this.el, this.enterClass);
	    removeClass(this.el, this.leaveClass);
	  }
	  if (this.cancel) {
	    this.cancel.call(this.vm, this.el);
	    this.cancel = null;
	  }
	};
	
	/**
	 * Call a user-provided synchronous hook function.
	 *
	 * @param {String} type
	 */
	
	p$1.callHook = function (type) {
	  if (this.hooks && this.hooks[type]) {
	    this.hooks[type].call(this.vm, this.el);
	  }
	};
	
	/**
	 * Call a user-provided, potentially-async hook function.
	 * We check for the length of arguments to see if the hook
	 * expects a `done` callback. If true, the transition's end
	 * will be determined by when the user calls that callback;
	 * otherwise, the end is determined by the CSS transition or
	 * animation.
	 *
	 * @param {String} type
	 */
	
	p$1.callHookWithCb = function (type) {
	  var hook = this.hooks && this.hooks[type];
	  if (hook) {
	    if (hook.length > 1) {
	      this.pendingJsCb = cancellable(this[type + 'Done']);
	    }
	    hook.call(this.vm, this.el, this.pendingJsCb);
	  }
	};
	
	/**
	 * Get an element's transition type based on the
	 * calculated styles.
	 *
	 * @param {String} className
	 * @return {Number}
	 */
	
	p$1.getCssTransitionType = function (className) {
	  /* istanbul ignore if */
	  if (!transitionEndEvent ||
	  // skip CSS transitions if page is not visible -
	  // this solves the issue of transitionend events not
	  // firing until the page is visible again.
	  // pageVisibility API is supported in IE10+, same as
	  // CSS transitions.
	  document.hidden ||
	  // explicit js-only transition
	  this.hooks && this.hooks.css === false ||
	  // element is hidden
	  isHidden(this.el)) {
	    return;
	  }
	  var type = this.type || this.typeCache[className];
	  if (type) return type;
	  var inlineStyles = this.el.style;
	  var computedStyles = window.getComputedStyle(this.el);
	  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];
	  if (transDuration && transDuration !== '0s') {
	    type = TYPE_TRANSITION;
	  } else {
	    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];
	    if (animDuration && animDuration !== '0s') {
	      type = TYPE_ANIMATION;
	    }
	  }
	  if (type) {
	    this.typeCache[className] = type;
	  }
	  return type;
	};
	
	/**
	 * Setup a CSS transitionend/animationend callback.
	 *
	 * @param {String} event
	 * @param {Function} cb
	 */
	
	p$1.setupCssCb = function (event, cb) {
	  this.pendingCssEvent = event;
	  var self = this;
	  var el = this.el;
	  var onEnd = this.pendingCssCb = function (e) {
	    if (e.target === el) {
	      off(el, event, onEnd);
	      self.pendingCssEvent = self.pendingCssCb = null;
	      if (!self.pendingJsCb && cb) {
	        cb();
	      }
	    }
	  };
	  on(el, event, onEnd);
	};
	
	/**
	 * Check if an element is hidden - in that case we can just
	 * skip the transition alltogether.
	 *
	 * @param {Element} el
	 * @return {Boolean}
	 */
	
	function isHidden(el) {
	  if (/svg$/.test(el.namespaceURI)) {
	    // SVG elements do not have offset(Width|Height)
	    // so we need to check the client rect
	    var rect = el.getBoundingClientRect();
	    return !(rect.width || rect.height);
	  } else {
	    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);
	  }
	}
	
	var transition$1 = {
	
	  priority: TRANSITION,
	
	  update: function update(id, oldId) {
	    var el = this.el;
	    // resolve on owner vm
	    var hooks = resolveAsset(this.vm.$options, 'transitions', id);
	    id = id || 'v';
	    oldId = oldId || 'v';
	    el.__v_trans = new Transition(el, id, hooks, this.vm);
	    removeClass(el, oldId + '-transition');
	    addClass(el, id + '-transition');
	  }
	};
	
	var internalDirectives = {
	  style: style,
	  'class': vClass,
	  component: component,
	  prop: propDef,
	  transition: transition$1
	};
	
	// special binding prefixes
	var bindRE = /^v-bind:|^:/;
	var onRE = /^v-on:|^@/;
	var dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;
	var modifierRE = /\.[^\.]+/g;
	var transitionRE = /^(v-bind:|:)?transition$/;
	
	// default directive priority
	var DEFAULT_PRIORITY = 1000;
	var DEFAULT_TERMINAL_PRIORITY = 2000;
	
	/**
	 * Compile a template and return a reusable composite link
	 * function, which recursively contains more link functions
	 * inside. This top level compile function would normally
	 * be called on instance root nodes, but can also be used
	 * for partial compilation if the partial argument is true.
	 *
	 * The returned composite link function, when called, will
	 * return an unlink function that tearsdown all directives
	 * created during the linking phase.
	 *
	 * @param {Element|DocumentFragment} el
	 * @param {Object} options
	 * @param {Boolean} partial
	 * @return {Function}
	 */
	
	function compile(el, options, partial) {
	  // link function for the node itself.
	  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;
	  // link function for the childNodes
	  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;
	
	  /**
	   * A composite linker function to be called on a already
	   * compiled piece of DOM, which instantiates all directive
	   * instances.
	   *
	   * @param {Vue} vm
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host] - host vm of transcluded content
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - link context fragment
	   * @return {Function|undefined}
	   */
	
	  return function compositeLinkFn(vm, el, host, scope, frag) {
	    // cache childNodes before linking parent, fix #657
	    var childNodes = toArray(el.childNodes);
	    // link
	    var dirs = linkAndCapture(function compositeLinkCapturer() {
	      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);
	      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);
	    }, vm);
	    return makeUnlinkFn(vm, dirs);
	  };
	}
	
	/**
	 * Apply a linker to a vm/element pair and capture the
	 * directives created during the process.
	 *
	 * @param {Function} linker
	 * @param {Vue} vm
	 */
	
	function linkAndCapture(linker, vm) {
	  /* istanbul ignore if */
	  if (process.env.NODE_ENV === 'production') {
	    // reset directives before every capture in production
	    // mode, so that when unlinking we don't need to splice
	    // them out (which turns out to be a perf hit).
	    // they are kept in development mode because they are
	    // useful for Vue's own tests.
	    vm._directives = [];
	  }
	  var originalDirCount = vm._directives.length;
	  linker();
	  var dirs = vm._directives.slice(originalDirCount);
	  sortDirectives(dirs);
	  for (var i = 0, l = dirs.length; i < l; i++) {
	    dirs[i]._bind();
	  }
	  return dirs;
	}
	
	/**
	 * sort directives by priority (stable sort)
	 *
	 * @param {Array} dirs
	 */
	function sortDirectives(dirs) {
	  if (dirs.length === 0) return;
	
	  var groupedMap = {};
	  var i, j, k, l;
	  var index = 0;
	  var priorities = [];
	  for (i = 0, j = dirs.length; i < j; i++) {
	    var dir = dirs[i];
	    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;
	    var array = groupedMap[priority];
	    if (!array) {
	      array = groupedMap[priority] = [];
	      priorities.push(priority);
	    }
	    array.push(dir);
	  }
	
	  priorities.sort(function (a, b) {
	    return a > b ? -1 : a === b ? 0 : 1;
	  });
	  for (i = 0, j = priorities.length; i < j; i++) {
	    var group = groupedMap[priorities[i]];
	    for (k = 0, l = group.length; k < l; k++) {
	      dirs[index++] = group[k];
	    }
	  }
	}
	
	/**
	 * Linker functions return an unlink function that
	 * tearsdown all directives instances generated during
	 * the process.
	 *
	 * We create unlink functions with only the necessary
	 * information to avoid retaining additional closures.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Vue} [context]
	 * @param {Array} [contextDirs]
	 * @return {Function}
	 */
	
	function makeUnlinkFn(vm, dirs, context, contextDirs) {
	  function unlink(destroying) {
	    teardownDirs(vm, dirs, destroying);
	    if (context && contextDirs) {
	      teardownDirs(context, contextDirs);
	    }
	  }
	  // expose linked directives
	  unlink.dirs = dirs;
	  return unlink;
	}
	
	/**
	 * Teardown partial linked directives.
	 *
	 * @param {Vue} vm
	 * @param {Array} dirs
	 * @param {Boolean} destroying
	 */
	
	function teardownDirs(vm, dirs, destroying) {
	  var i = dirs.length;
	  while (i--) {
	    dirs[i]._teardown();
	    if (process.env.NODE_ENV !== 'production' && !destroying) {
	      vm._directives.$remove(dirs[i]);
	    }
	  }
	}
	
	/**
	 * Compile link props on an instance.
	 *
	 * @param {Vue} vm
	 * @param {Element} el
	 * @param {Object} props
	 * @param {Object} [scope]
	 * @return {Function}
	 */
	
	function compileAndLinkProps(vm, el, props, scope) {
	  var propsLinkFn = compileProps(el, props, vm);
	  var propDirs = linkAndCapture(function () {
	    propsLinkFn(vm, scope);
	  }, vm);
	  return makeUnlinkFn(vm, propDirs);
	}
	
	/**
	 * Compile the root element of an instance.
	 *
	 * 1. attrs on context container (context scope)
	 * 2. attrs on the component template root node, if
	 *    replace:true (child scope)
	 *
	 * If this is a fragment instance, we only need to compile 1.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @param {Object} contextOptions
	 * @return {Function}
	 */
	
	function compileRoot(el, options, contextOptions) {
	  var containerAttrs = options._containerAttrs;
	  var replacerAttrs = options._replacerAttrs;
	  var contextLinkFn, replacerLinkFn;
	
	  // only need to compile other attributes for
	  // non-fragment instances
	  if (el.nodeType !== 11) {
	    // for components, container and replacer need to be
	    // compiled separately and linked in different scopes.
	    if (options._asComponent) {
	      // 2. container attributes
	      if (containerAttrs && contextOptions) {
	        contextLinkFn = compileDirectives(containerAttrs, contextOptions);
	      }
	      if (replacerAttrs) {
	        // 3. replacer attributes
	        replacerLinkFn = compileDirectives(replacerAttrs, options);
	      }
	    } else {
	      // non-component, just compile as a normal element.
	      replacerLinkFn = compileDirectives(el.attributes, options);
	    }
	  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {
	    // warn container directives for fragment instances
	    var names = containerAttrs.filter(function (attr) {
	      // allow vue-loader/vueify scoped css attributes
	      return attr.name.indexOf('_v-') < 0 &&
	      // allow event listeners
	      !onRE.test(attr.name) &&
	      // allow slots
	      attr.name !== 'slot';
	    }).map(function (attr) {
	      return '"' + attr.name + '"';
	    });
	    if (names.length) {
	      var plural = names.length > 1;
	
	      var componentName = options.el.tagName.toLowerCase();
	      if (componentName === 'component' && options.name) {
	        componentName += ':' + options.name;
	      }
	
	      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');
	    }
	  }
	
	  options._containerAttrs = options._replacerAttrs = null;
	  return function rootLinkFn(vm, el, scope) {
	    // link context scope dirs
	    var context = vm._context;
	    var contextDirs;
	    if (context && contextLinkFn) {
	      contextDirs = linkAndCapture(function () {
	        contextLinkFn(context, el, null, scope);
	      }, context);
	    }
	
	    // link self
	    var selfDirs = linkAndCapture(function () {
	      if (replacerLinkFn) replacerLinkFn(vm, el);
	    }, vm);
	
	    // return the unlink function that tearsdown context
	    // container directives.
	    return makeUnlinkFn(vm, selfDirs, context, contextDirs);
	  };
	}
	
	/**
	 * Compile a node and return a nodeLinkFn based on the
	 * node type.
	 *
	 * @param {Node} node
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileNode(node, options) {
	  var type = node.nodeType;
	  if (type === 1 && !isScript(node)) {
	    return compileElement(node, options);
	  } else if (type === 3 && node.data.trim()) {
	    return compileTextNode(node, options);
	  } else {
	    return null;
	  }
	}
	
	/**
	 * Compile an element and return a nodeLinkFn.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|null}
	 */
	
	function compileElement(el, options) {
	  // preprocess textareas.
	  // textarea treats its text content as the initial value.
	  // just bind it as an attr directive for value.
	  if (el.tagName === 'TEXTAREA') {
	    // a textarea which has v-pre attr should skip complie.
	    if (getAttr(el, 'v-pre') !== null) {
	      return skip;
	    }
	    var tokens = parseText(el.value);
	    if (tokens) {
	      el.setAttribute(':value', tokensToExp(tokens));
	      el.value = '';
	    }
	  }
	  var linkFn;
	  var hasAttrs = el.hasAttributes();
	  var attrs = hasAttrs && toArray(el.attributes);
	  // check terminal directives (for & if)
	  if (hasAttrs) {
	    linkFn = checkTerminalDirectives(el, attrs, options);
	  }
	  // check element directives
	  if (!linkFn) {
	    linkFn = checkElementDirectives(el, options);
	  }
	  // check component
	  if (!linkFn) {
	    linkFn = checkComponent(el, options);
	  }
	  // normal directives
	  if (!linkFn && hasAttrs) {
	    linkFn = compileDirectives(attrs, options);
	  }
	  return linkFn;
	}
	
	/**
	 * Compile a textNode and return a nodeLinkFn.
	 *
	 * @param {TextNode} node
	 * @param {Object} options
	 * @return {Function|null} textNodeLinkFn
	 */
	
	function compileTextNode(node, options) {
	  // skip marked text nodes
	  if (node._skip) {
	    return removeText;
	  }
	
	  var tokens = parseText(node.wholeText);
	  if (!tokens) {
	    return null;
	  }
	
	  // mark adjacent text nodes as skipped,
	  // because we are using node.wholeText to compile
	  // all adjacent text nodes together. This fixes
	  // issues in IE where sometimes it splits up a single
	  // text node into multiple ones.
	  var next = node.nextSibling;
	  while (next && next.nodeType === 3) {
	    next._skip = true;
	    next = next.nextSibling;
	  }
	
	  var frag = document.createDocumentFragment();
	  var el, token;
	  for (var i = 0, l = tokens.length; i < l; i++) {
	    token = tokens[i];
	    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);
	    frag.appendChild(el);
	  }
	  return makeTextNodeLinkFn(tokens, frag, options);
	}
	
	/**
	 * Linker for an skipped text node.
	 *
	 * @param {Vue} vm
	 * @param {Text} node
	 */
	
	function removeText(vm, node) {
	  remove(node);
	}
	
	/**
	 * Process a single text token.
	 *
	 * @param {Object} token
	 * @param {Object} options
	 * @return {Node}
	 */
	
	function processTextToken(token, options) {
	  var el;
	  if (token.oneTime) {
	    el = document.createTextNode(token.value);
	  } else {
	    if (token.html) {
	      el = document.createComment('v-html');
	      setTokenType('html');
	    } else {
	      // IE will clean up empty textNodes during
	      // frag.cloneNode(true), so we have to give it
	      // something here...
	      el = document.createTextNode(' ');
	      setTokenType('text');
	    }
	  }
	  function setTokenType(type) {
	    if (token.descriptor) return;
	    var parsed = parseDirective(token.value);
	    token.descriptor = {
	      name: type,
	      def: directives[type],
	      expression: parsed.expression,
	      filters: parsed.filters
	    };
	  }
	  return el;
	}
	
	/**
	 * Build a function that processes a textNode.
	 *
	 * @param {Array<Object>} tokens
	 * @param {DocumentFragment} frag
	 */
	
	function makeTextNodeLinkFn(tokens, frag) {
	  return function textNodeLinkFn(vm, el, host, scope) {
	    var fragClone = frag.cloneNode(true);
	    var childNodes = toArray(fragClone.childNodes);
	    var token, value, node;
	    for (var i = 0, l = tokens.length; i < l; i++) {
	      token = tokens[i];
	      value = token.value;
	      if (token.tag) {
	        node = childNodes[i];
	        if (token.oneTime) {
	          value = (scope || vm).$eval(value);
	          if (token.html) {
	            replace(node, parseTemplate(value, true));
	          } else {
	            node.data = _toString(value);
	          }
	        } else {
	          vm._bindDir(token.descriptor, node, host, scope);
	        }
	      }
	    }
	    replace(el, fragClone);
	  };
	}
	
	/**
	 * Compile a node list and return a childLinkFn.
	 *
	 * @param {NodeList} nodeList
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function compileNodeList(nodeList, options) {
	  var linkFns = [];
	  var nodeLinkFn, childLinkFn, node;
	  for (var i = 0, l = nodeList.length; i < l; i++) {
	    node = nodeList[i];
	    nodeLinkFn = compileNode(node, options);
	    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;
	    linkFns.push(nodeLinkFn, childLinkFn);
	  }
	  return linkFns.length ? makeChildLinkFn(linkFns) : null;
	}
	
	/**
	 * Make a child link function for a node's childNodes.
	 *
	 * @param {Array<Function>} linkFns
	 * @return {Function} childLinkFn
	 */
	
	function makeChildLinkFn(linkFns) {
	  return function childLinkFn(vm, nodes, host, scope, frag) {
	    var node, nodeLinkFn, childrenLinkFn;
	    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {
	      node = nodes[n];
	      nodeLinkFn = linkFns[i++];
	      childrenLinkFn = linkFns[i++];
	      // cache childNodes before linking parent, fix #657
	      var childNodes = toArray(node.childNodes);
	      if (nodeLinkFn) {
	        nodeLinkFn(vm, node, host, scope, frag);
	      }
	      if (childrenLinkFn) {
	        childrenLinkFn(vm, childNodes, host, scope, frag);
	      }
	    }
	  };
	}
	
	/**
	 * Check for element directives (custom elements that should
	 * be resovled as terminal directives).
	 *
	 * @param {Element} el
	 * @param {Object} options
	 */
	
	function checkElementDirectives(el, options) {
	  var tag = el.tagName.toLowerCase();
	  if (commonTagRE.test(tag)) {
	    return;
	  }
	  var def = resolveAsset(options, 'elementDirectives', tag);
	  if (def) {
	    return makeTerminalNodeLinkFn(el, tag, '', options, def);
	  }
	}
	
	/**
	 * Check if an element is a component. If yes, return
	 * a component link function.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Function|undefined}
	 */
	
	function checkComponent(el, options) {
	  var component = checkComponentAttr(el, options);
	  if (component) {
	    var ref = findRef(el);
	    var descriptor = {
	      name: 'component',
	      ref: ref,
	      expression: component.id,
	      def: internalDirectives.component,
	      modifiers: {
	        literal: !component.dynamic
	      }
	    };
	    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {
	      if (ref) {
	        defineReactive((scope || vm).$refs, ref, null);
	      }
	      vm._bindDir(descriptor, el, host, scope, frag);
	    };
	    componentLinkFn.terminal = true;
	    return componentLinkFn;
	  }
	}
	
	/**
	 * Check an element for terminal directives in fixed order.
	 * If it finds one, return a terminal link function.
	 *
	 * @param {Element} el
	 * @param {Array} attrs
	 * @param {Object} options
	 * @return {Function} terminalLinkFn
	 */
	
	function checkTerminalDirectives(el, attrs, options) {
	  // skip v-pre
	  if (getAttr(el, 'v-pre') !== null) {
	    return skip;
	  }
	  // skip v-else block, but only if following v-if
	  if (el.hasAttribute('v-else')) {
	    var prev = el.previousElementSibling;
	    if (prev && prev.hasAttribute('v-if')) {
	      return skip;
	    }
	  }
	
	  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;
	  for (var i = 0, j = attrs.length; i < j; i++) {
	    attr = attrs[i];
	    name = attr.name.replace(modifierRE, '');
	    if (matched = name.match(dirAttrRE)) {
	      def = resolveAsset(options, 'directives', matched[1]);
	      if (def && def.terminal) {
	        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {
	          termDef = def;
	          rawName = attr.name;
	          modifiers = parseModifiers(attr.name);
	          value = attr.value;
	          dirName = matched[1];
	          arg = matched[2];
	        }
	      }
	    }
	  }
	
	  if (termDef) {
	    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);
	  }
	}
	
	function skip() {}
	skip.terminal = true;
	
	/**
	 * Build a node link function for a terminal directive.
	 * A terminal link function terminates the current
	 * compilation recursion and handles compilation of the
	 * subtree in the directive.
	 *
	 * @param {Element} el
	 * @param {String} dirName
	 * @param {String} value
	 * @param {Object} options
	 * @param {Object} def
	 * @param {String} [rawName]
	 * @param {String} [arg]
	 * @param {Object} [modifiers]
	 * @return {Function} terminalLinkFn
	 */
	
	function makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {
	  var parsed = parseDirective(value);
	  var descriptor = {
	    name: dirName,
	    arg: arg,
	    expression: parsed.expression,
	    filters: parsed.filters,
	    raw: value,
	    attr: rawName,
	    modifiers: modifiers,
	    def: def
	  };
	  // check ref for v-for, v-if and router-view
	  if (dirName === 'for' || dirName === 'router-view') {
	    descriptor.ref = findRef(el);
	  }
	  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {
	    if (descriptor.ref) {
	      defineReactive((scope || vm).$refs, descriptor.ref, null);
	    }
	    vm._bindDir(descriptor, el, host, scope, frag);
	  };
	  fn.terminal = true;
	  return fn;
	}
	
	/**
	 * Compile the directives on an element and return a linker.
	 *
	 * @param {Array|NamedNodeMap} attrs
	 * @param {Object} options
	 * @return {Function}
	 */
	
	function compileDirectives(attrs, options) {
	  var i = attrs.length;
	  var dirs = [];
	  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;
	  while (i--) {
	    attr = attrs[i];
	    name = rawName = attr.name;
	    value = rawValue = attr.value;
	    tokens = parseText(value);
	    // reset arg
	    arg = null;
	    // check modifiers
	    modifiers = parseModifiers(name);
	    name = name.replace(modifierRE, '');
	
	    // attribute interpolations
	    if (tokens) {
	      value = tokensToExp(tokens);
	      arg = name;
	      pushDir('bind', directives.bind, tokens);
	      // warn against mixing mustaches with v-bind
	      if (process.env.NODE_ENV !== 'production') {
	        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {
	          return attr.name === ':class' || attr.name === 'v-bind:class';
	        })) {
	          warn('class="' + rawValue + '": Do not mix mustache interpolation ' + 'and v-bind for "class" on the same element. Use one or the other.', options);
	        }
	      }
	    } else
	
	      // special attribute: transition
	      if (transitionRE.test(name)) {
	        modifiers.literal = !bindRE.test(name);
	        pushDir('transition', internalDirectives.transition);
	      } else
	
	        // event handlers
	        if (onRE.test(name)) {
	          arg = name.replace(onRE, '');
	          pushDir('on', directives.on);
	        } else
	
	          // attribute bindings
	          if (bindRE.test(name)) {
	            dirName = name.replace(bindRE, '');
	            if (dirName === 'style' || dirName === 'class') {
	              pushDir(dirName, internalDirectives[dirName]);
	            } else {
	              arg = dirName;
	              pushDir('bind', directives.bind);
	            }
	          } else
	
	            // normal directives
	            if (matched = name.match(dirAttrRE)) {
	              dirName = matched[1];
	              arg = matched[2];
	
	              // skip v-else (when used with v-show)
	              if (dirName === 'else') {
	                continue;
	              }
	
	              dirDef = resolveAsset(options, 'directives', dirName, true);
	              if (dirDef) {
	                pushDir(dirName, dirDef);
	              }
	            }
	  }
	
	  /**
	   * Push a directive.
	   *
	   * @param {String} dirName
	   * @param {Object|Function} def
	   * @param {Array} [interpTokens]
	   */
	
	  function pushDir(dirName, def, interpTokens) {
	    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);
	    var parsed = !hasOneTimeToken && parseDirective(value);
	    dirs.push({
	      name: dirName,
	      attr: rawName,
	      raw: rawValue,
	      def: def,
	      arg: arg,
	      modifiers: modifiers,
	      // conversion from interpolation strings with one-time token
	      // to expression is differed until directive bind time so that we
	      // have access to the actual vm context for one-time bindings.
	      expression: parsed && parsed.expression,
	      filters: parsed && parsed.filters,
	      interp: interpTokens,
	      hasOneTime: hasOneTimeToken
	    });
	  }
	
	  if (dirs.length) {
	    return makeNodeLinkFn(dirs);
	  }
	}
	
	/**
	 * Parse modifiers from directive attribute name.
	 *
	 * @param {String} name
	 * @return {Object}
	 */
	
	function parseModifiers(name) {
	  var res = Object.create(null);
	  var match = name.match(modifierRE);
	  if (match) {
	    var i = match.length;
	    while (i--) {
	      res[match[i].slice(1)] = true;
	    }
	  }
	  return res;
	}
	
	/**
	 * Build a link function for all directives on a single node.
	 *
	 * @param {Array} directives
	 * @return {Function} directivesLinkFn
	 */
	
	function makeNodeLinkFn(directives) {
	  return function nodeLinkFn(vm, el, host, scope, frag) {
	    // reverse apply because it's sorted low to high
	    var i = directives.length;
	    while (i--) {
	      vm._bindDir(directives[i], el, host, scope, frag);
	    }
	  };
	}
	
	/**
	 * Check if an interpolation string contains one-time tokens.
	 *
	 * @param {Array} tokens
	 * @return {Boolean}
	 */
	
	function hasOneTime(tokens) {
	  var i = tokens.length;
	  while (i--) {
	    if (tokens[i].oneTime) return true;
	  }
	}
	
	function isScript(el) {
	  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');
	}
	
	var specialCharRE = /[^\w\-:\.]/;
	
	/**
	 * Process an element or a DocumentFragment based on a
	 * instance option object. This allows us to transclude
	 * a template node/fragment before the instance is created,
	 * so the processed fragment can then be cloned and reused
	 * in v-for.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transclude(el, options) {
	  // extract container attributes to pass them down
	  // to compiler, because they need to be compiled in
	  // parent scope. we are mutating the options object here
	  // assuming the same object will be used for compile
	  // right after this.
	  if (options) {
	    options._containerAttrs = extractAttrs(el);
	  }
	  // for template tags, what we want is its content as
	  // a documentFragment (for fragment instances)
	  if (isTemplate(el)) {
	    el = parseTemplate(el);
	  }
	  if (options) {
	    if (options._asComponent && !options.template) {
	      options.template = '<slot></slot>';
	    }
	    if (options.template) {
	      options._content = extractContent(el);
	      el = transcludeTemplate(el, options);
	    }
	  }
	  if (isFragment(el)) {
	    // anchors for fragment instance
	    // passing in `persist: true` to avoid them being
	    // discarded by IE during template cloning
	    prepend(createAnchor('v-start', true), el);
	    el.appendChild(createAnchor('v-end', true));
	  }
	  return el;
	}
	
	/**
	 * Process the template option.
	 * If the replace option is true this will swap the $el.
	 *
	 * @param {Element} el
	 * @param {Object} options
	 * @return {Element|DocumentFragment}
	 */
	
	function transcludeTemplate(el, options) {
	  var template = options.template;
	  var frag = parseTemplate(template, true);
	  if (frag) {
	    var replacer = frag.firstChild;
	    if (!replacer) {
	      return frag;
	    }
	    var tag = replacer.tagName && replacer.tagName.toLowerCase();
	    if (options.replace) {
	      /* istanbul ignore if */
	      if (el === document.body) {
	        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');
	      }
	      // there are many cases where the instance must
	      // become a fragment instance: basically anything that
	      // can create more than 1 root nodes.
	      if (
	      // multi-children template
	      frag.childNodes.length > 1 ||
	      // non-element template
	      replacer.nodeType !== 1 ||
	      // single nested component
	      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||
	      // element directive
	      resolveAsset(options, 'elementDirectives', tag) ||
	      // for block
	      replacer.hasAttribute('v-for') ||
	      // if block
	      replacer.hasAttribute('v-if')) {
	        return frag;
	      } else {
	        options._replacerAttrs = extractAttrs(replacer);
	        mergeAttrs(el, replacer);
	        return replacer;
	      }
	    } else {
	      el.appendChild(frag);
	      return el;
	    }
	  } else {
	    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);
	  }
	}
	
	/**
	 * Helper to extract a component container's attributes
	 * into a plain object array.
	 *
	 * @param {Element} el
	 * @return {Array}
	 */
	
	function extractAttrs(el) {
	  if (el.nodeType === 1 && el.hasAttributes()) {
	    return toArray(el.attributes);
	  }
	}
	
	/**
	 * Merge the attributes of two elements, and make sure
	 * the class names are merged properly.
	 *
	 * @param {Element} from
	 * @param {Element} to
	 */
	
	function mergeAttrs(from, to) {
	  var attrs = from.attributes;
	  var i = attrs.length;
	  var name, value;
	  while (i--) {
	    name = attrs[i].name;
	    value = attrs[i].value;
	    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {
	      to.setAttribute(name, value);
	    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {
	      value.split(/\s+/).forEach(function (cls) {
	        addClass(to, cls);
	      });
	    }
	  }
	}
	
	/**
	 * Scan and determine slot content distribution.
	 * We do this during transclusion instead at compile time so that
	 * the distribution is decoupled from the compilation order of
	 * the slots.
	 *
	 * @param {Element|DocumentFragment} template
	 * @param {Element} content
	 * @param {Vue} vm
	 */
	
	function resolveSlots(vm, content) {
	  if (!content) {
	    return;
	  }
	  var contents = vm._slotContents = Object.create(null);
	  var el, name;
	  for (var i = 0, l = content.children.length; i < l; i++) {
	    el = content.children[i];
	    /* eslint-disable no-cond-assign */
	    if (name = el.getAttribute('slot')) {
	      (contents[name] || (contents[name] = [])).push(el);
	    }
	    /* eslint-enable no-cond-assign */
	    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {
	      warn('The "slot" attribute must be static.', vm.$parent);
	    }
	  }
	  for (name in contents) {
	    contents[name] = extractFragment(contents[name], content);
	  }
	  if (content.hasChildNodes()) {
	    var nodes = content.childNodes;
	    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {
	      return;
	    }
	    contents['default'] = extractFragment(content.childNodes, content);
	  }
	}
	
	/**
	 * Extract qualified content nodes from a node list.
	 *
	 * @param {NodeList} nodes
	 * @return {DocumentFragment}
	 */
	
	function extractFragment(nodes, parent) {
	  var frag = document.createDocumentFragment();
	  nodes = toArray(nodes);
	  for (var i = 0, l = nodes.length; i < l; i++) {
	    var node = nodes[i];
	    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {
	      parent.removeChild(node);
	      node = parseTemplate(node, true);
	    }
	    frag.appendChild(node);
	  }
	  return frag;
	}
	
	
	
	var compiler = Object.freeze({
		compile: compile,
		compileAndLinkProps: compileAndLinkProps,
		compileRoot: compileRoot,
		transclude: transclude,
		resolveSlots: resolveSlots
	});
	
	function stateMixin (Vue) {
	  /**
	   * Accessor for `$data` property, since setting $data
	   * requires observing the new object and updating
	   * proxied properties.
	   */
	
	  Object.defineProperty(Vue.prototype, '$data', {
	    get: function get() {
	      return this._data;
	    },
	    set: function set(newData) {
	      if (newData !== this._data) {
	        this._setData(newData);
	      }
	    }
	  });
	
	  /**
	   * Setup the scope of an instance, which contains:
	   * - observed data
	   * - computed properties
	   * - user methods
	   * - meta properties
	   */
	
	  Vue.prototype._initState = function () {
	    this._initProps();
	    this._initMeta();
	    this._initMethods();
	    this._initData();
	    this._initComputed();
	  };
	
	  /**
	   * Initialize props.
	   */
	
	  Vue.prototype._initProps = function () {
	    var options = this.$options;
	    var el = options.el;
	    var props = options.props;
	    if (props && !el) {
	      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);
	    }
	    // make sure to convert string selectors into element now
	    el = options.el = query(el);
	    this._propsUnlinkFn = el && el.nodeType === 1 && props
	    // props must be linked in proper scope if inside v-for
	    ? compileAndLinkProps(this, el, props, this._scope) : null;
	  };
	
	  /**
	   * Initialize the data.
	   */
	
	  Vue.prototype._initData = function () {
	    var dataFn = this.$options.data;
	    var data = this._data = dataFn ? dataFn() : {};
	    if (!isPlainObject(data)) {
	      data = {};
	      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);
	    }
	    var props = this._props;
	    // proxy data on instance
	    var keys = Object.keys(data);
	    var i, key;
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      // there are two scenarios where we can proxy a data key:
	      // 1. it's not already defined as a prop
	      // 2. it's provided via a instantiation option AND there are no
	      //    template prop present
	      if (!props || !hasOwn(props, key)) {
	        this._proxy(key);
	      } else if (process.env.NODE_ENV !== 'production') {
	        warn('Data field "' + key + '" is already defined ' + 'as a prop. To provide default value for a prop, use the "default" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the "propsData" option.', this);
	      }
	    }
	    // observe data
	    observe(data, this);
	  };
	
	  /**
	   * Swap the instance's $data. Called in $data's setter.
	   *
	   * @param {Object} newData
	   */
	
	  Vue.prototype._setData = function (newData) {
	    newData = newData || {};
	    var oldData = this._data;
	    this._data = newData;
	    var keys, key, i;
	    // unproxy keys not present in new data
	    keys = Object.keys(oldData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!(key in newData)) {
	        this._unproxy(key);
	      }
	    }
	    // proxy keys not already proxied,
	    // and trigger change for changed values
	    keys = Object.keys(newData);
	    i = keys.length;
	    while (i--) {
	      key = keys[i];
	      if (!hasOwn(this, key)) {
	        // new property
	        this._proxy(key);
	      }
	    }
	    oldData.__ob__.removeVm(this);
	    observe(newData, this);
	    this._digest();
	  };
	
	  /**
	   * Proxy a property, so that
	   * vm.prop === vm._data.prop
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._proxy = function (key) {
	    if (!isReserved(key)) {
	      // need to store ref to self here
	      // because these getter/setters might
	      // be called by child scopes via
	      // prototype inheritance.
	      var self = this;
	      Object.defineProperty(self, key, {
	        configurable: true,
	        enumerable: true,
	        get: function proxyGetter() {
	          return self._data[key];
	        },
	        set: function proxySetter(val) {
	          self._data[key] = val;
	        }
	      });
	    }
	  };
	
	  /**
	   * Unproxy a property.
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype._unproxy = function (key) {
	    if (!isReserved(key)) {
	      delete this[key];
	    }
	  };
	
	  /**
	   * Force update on every watcher in scope.
	   */
	
	  Vue.prototype._digest = function () {
	    for (var i = 0, l = this._watchers.length; i < l; i++) {
	      this._watchers[i].update(true); // shallow updates
	    }
	  };
	
	  /**
	   * Setup computed properties. They are essentially
	   * special getter/setters
	   */
	
	  function noop() {}
	  Vue.prototype._initComputed = function () {
	    var computed = this.$options.computed;
	    if (computed) {
	      for (var key in computed) {
	        var userDef = computed[key];
	        var def = {
	          enumerable: true,
	          configurable: true
	        };
	        if (typeof userDef === 'function') {
	          def.get = makeComputedGetter(userDef, this);
	          def.set = noop;
	        } else {
	          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;
	          def.set = userDef.set ? bind(userDef.set, this) : noop;
	        }
	        Object.defineProperty(this, key, def);
	      }
	    }
	  };
	
	  function makeComputedGetter(getter, owner) {
	    var watcher = new Watcher(owner, getter, null, {
	      lazy: true
	    });
	    return function computedGetter() {
	      if (watcher.dirty) {
	        watcher.evaluate();
	      }
	      if (Dep.target) {
	        watcher.depend();
	      }
	      return watcher.value;
	    };
	  }
	
	  /**
	   * Setup instance methods. Methods must be bound to the
	   * instance since they might be passed down as a prop to
	   * child components.
	   */
	
	  Vue.prototype._initMethods = function () {
	    var methods = this.$options.methods;
	    if (methods) {
	      for (var key in methods) {
	        this[key] = bind(methods[key], this);
	      }
	    }
	  };
	
	  /**
	   * Initialize meta information like $index, $key & $value.
	   */
	
	  Vue.prototype._initMeta = function () {
	    var metas = this.$options._meta;
	    if (metas) {
	      for (var key in metas) {
	        defineReactive(this, key, metas[key]);
	      }
	    }
	  };
	}
	
	var eventRE = /^v-on:|^@/;
	
	function eventsMixin (Vue) {
	  /**
	   * Setup the instance's option events & watchers.
	   * If the value is a string, we pull it from the
	   * instance's methods by name.
	   */
	
	  Vue.prototype._initEvents = function () {
	    var options = this.$options;
	    if (options._asComponent) {
	      registerComponentEvents(this, options.el);
	    }
	    registerCallbacks(this, '$on', options.events);
	    registerCallbacks(this, '$watch', options.watch);
	  };
	
	  /**
	   * Register v-on events on a child component
	   *
	   * @param {Vue} vm
	   * @param {Element} el
	   */
	
	  function registerComponentEvents(vm, el) {
	    var attrs = el.attributes;
	    var name, value, handler;
	    for (var i = 0, l = attrs.length; i < l; i++) {
	      name = attrs[i].name;
	      if (eventRE.test(name)) {
	        name = name.replace(eventRE, '');
	        // force the expression into a statement so that
	        // it always dynamically resolves the method to call (#2670)
	        // kinda ugly hack, but does the job.
	        value = attrs[i].value;
	        if (isSimplePath(value)) {
	          value += '.apply(this, $arguments)';
	        }
	        handler = (vm._scope || vm._context).$eval(value, true);
	        handler._fromParent = true;
	        vm.$on(name.replace(eventRE), handler);
	      }
	    }
	  }
	
	  /**
	   * Register callbacks for option events and watchers.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {Object} hash
	   */
	
	  function registerCallbacks(vm, action, hash) {
	    if (!hash) return;
	    var handlers, key, i, j;
	    for (key in hash) {
	      handlers = hash[key];
	      if (isArray(handlers)) {
	        for (i = 0, j = handlers.length; i < j; i++) {
	          register(vm, action, key, handlers[i]);
	        }
	      } else {
	        register(vm, action, key, handlers);
	      }
	    }
	  }
	
	  /**
	   * Helper to register an event/watch callback.
	   *
	   * @param {Vue} vm
	   * @param {String} action
	   * @param {String} key
	   * @param {Function|String|Object} handler
	   * @param {Object} [options]
	   */
	
	  function register(vm, action, key, handler, options) {
	    var type = typeof handler;
	    if (type === 'function') {
	      vm[action](key, handler, options);
	    } else if (type === 'string') {
	      var methods = vm.$options.methods;
	      var method = methods && methods[handler];
	      if (method) {
	        vm[action](key, method, options);
	      } else {
	        process.env.NODE_ENV !== 'production' && warn('Unknown method: "' + handler + '" when ' + 'registering callback for ' + action + ': "' + key + '".', vm);
	      }
	    } else if (handler && type === 'object') {
	      register(vm, action, key, handler.handler, handler);
	    }
	  }
	
	  /**
	   * Setup recursive attached/detached calls
	   */
	
	  Vue.prototype._initDOMHooks = function () {
	    this.$on('hook:attached', onAttached);
	    this.$on('hook:detached', onDetached);
	  };
	
	  /**
	   * Callback to recursively call attached hook on children
	   */
	
	  function onAttached() {
	    if (!this._isAttached) {
	      this._isAttached = true;
	      this.$children.forEach(callAttach);
	    }
	  }
	
	  /**
	   * Iterator to call attached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callAttach(child) {
	    if (!child._isAttached && inDoc(child.$el)) {
	      child._callHook('attached');
	    }
	  }
	
	  /**
	   * Callback to recursively call detached hook on children
	   */
	
	  function onDetached() {
	    if (this._isAttached) {
	      this._isAttached = false;
	      this.$children.forEach(callDetach);
	    }
	  }
	
	  /**
	   * Iterator to call detached hook
	   *
	   * @param {Vue} child
	   */
	
	  function callDetach(child) {
	    if (child._isAttached && !inDoc(child.$el)) {
	      child._callHook('detached');
	    }
	  }
	
	  /**
	   * Trigger all handlers for a hook
	   *
	   * @param {String} hook
	   */
	
	  Vue.prototype._callHook = function (hook) {
	    this.$emit('pre-hook:' + hook);
	    var handlers = this.$options[hook];
	    if (handlers) {
	      for (var i = 0, j = handlers.length; i < j; i++) {
	        handlers[i].call(this);
	      }
	    }
	    this.$emit('hook:' + hook);
	  };
	}
	
	function noop$1() {}
	
	/**
	 * A directive links a DOM element with a piece of data,
	 * which is the result of evaluating an expression.
	 * It registers a watcher with the expression and calls
	 * the DOM update function when a change is triggered.
	 *
	 * @param {Object} descriptor
	 *                 - {String} name
	 *                 - {Object} def
	 *                 - {String} expression
	 *                 - {Array<Object>} [filters]
	 *                 - {Object} [modifiers]
	 *                 - {Boolean} literal
	 *                 - {String} attr
	 *                 - {String} arg
	 *                 - {String} raw
	 *                 - {String} [ref]
	 *                 - {Array<Object>} [interp]
	 *                 - {Boolean} [hasOneTime]
	 * @param {Vue} vm
	 * @param {Node} el
	 * @param {Vue} [host] - transclusion host component
	 * @param {Object} [scope] - v-for scope
	 * @param {Fragment} [frag] - owner fragment
	 * @constructor
	 */
	function Directive(descriptor, vm, el, host, scope, frag) {
	  this.vm = vm;
	  this.el = el;
	  // copy descriptor properties
	  this.descriptor = descriptor;
	  this.name = descriptor.name;
	  this.expression = descriptor.expression;
	  this.arg = descriptor.arg;
	  this.modifiers = descriptor.modifiers;
	  this.filters = descriptor.filters;
	  this.literal = this.modifiers && this.modifiers.literal;
	  // private
	  this._locked = false;
	  this._bound = false;
	  this._listeners = null;
	  // link context
	  this._host = host;
	  this._scope = scope;
	  this._frag = frag;
	  // store directives on node in dev mode
	  if (process.env.NODE_ENV !== 'production' && this.el) {
	    this.el._vue_directives = this.el._vue_directives || [];
	    this.el._vue_directives.push(this);
	  }
	}
	
	/**
	 * Initialize the directive, mixin definition properties,
	 * setup the watcher, call definition bind() and update()
	 * if present.
	 */
	
	Directive.prototype._bind = function () {
	  var name = this.name;
	  var descriptor = this.descriptor;
	
	  // remove attribute
	  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {
	    var attr = descriptor.attr || 'v-' + name;
	    this.el.removeAttribute(attr);
	  }
	
	  // copy def properties
	  var def = descriptor.def;
	  if (typeof def === 'function') {
	    this.update = def;
	  } else {
	    extend(this, def);
	  }
	
	  // setup directive params
	  this._setupParams();
	
	  // initial bind
	  if (this.bind) {
	    this.bind();
	  }
	  this._bound = true;
	
	  if (this.literal) {
	    this.update && this.update(descriptor.raw);
	  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {
	    // wrapped updater for context
	    var dir = this;
	    if (this.update) {
	      this._update = function (val, oldVal) {
	        if (!dir._locked) {
	          dir.update(val, oldVal);
	        }
	      };
	    } else {
	      this._update = noop$1;
	    }
	    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;
	    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;
	    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback
	    {
	      filters: this.filters,
	      twoWay: this.twoWay,
	      deep: this.deep,
	      preProcess: preProcess,
	      postProcess: postProcess,
	      scope: this._scope
	    });
	    // v-model with inital inline value need to sync back to
	    // model instead of update to DOM on init. They would
	    // set the afterBind hook to indicate that.
	    if (this.afterBind) {
	      this.afterBind();
	    } else if (this.update) {
	      this.update(watcher.value);
	    }
	  }
	};
	
	/**
	 * Setup all param attributes, e.g. track-by,
	 * transition-mode, etc...
	 */
	
	Directive.prototype._setupParams = function () {
	  if (!this.params) {
	    return;
	  }
	  var params = this.params;
	  // swap the params array with a fresh object.
	  this.params = Object.create(null);
	  var i = params.length;
	  var key, val, mappedKey;
	  while (i--) {
	    key = hyphenate(params[i]);
	    mappedKey = camelize(key);
	    val = getBindAttr(this.el, key);
	    if (val != null) {
	      // dynamic
	      this._setupParamWatcher(mappedKey, val);
	    } else {
	      // static
	      val = getAttr(this.el, key);
	      if (val != null) {
	        this.params[mappedKey] = val === '' ? true : val;
	      }
	    }
	  }
	};
	
	/**
	 * Setup a watcher for a dynamic param.
	 *
	 * @param {String} key
	 * @param {String} expression
	 */
	
	Directive.prototype._setupParamWatcher = function (key, expression) {
	  var self = this;
	  var called = false;
	  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {
	    self.params[key] = val;
	    // since we are in immediate mode,
	    // only call the param change callbacks if this is not the first update.
	    if (called) {
	      var cb = self.paramWatchers && self.paramWatchers[key];
	      if (cb) {
	        cb.call(self, val, oldVal);
	      }
	    } else {
	      called = true;
	    }
	  }, {
	    immediate: true,
	    user: false
	  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);
	};
	
	/**
	 * Check if the directive is a function caller
	 * and if the expression is a callable one. If both true,
	 * we wrap up the expression and use it as the event
	 * handler.
	 *
	 * e.g. on-click="a++"
	 *
	 * @return {Boolean}
	 */
	
	Directive.prototype._checkStatement = function () {
	  var expression = this.expression;
	  if (expression && this.acceptStatement && !isSimplePath(expression)) {
	    var fn = parseExpression$1(expression).get;
	    var scope = this._scope || this.vm;
	    var handler = function handler(e) {
	      scope.$event = e;
	      fn.call(scope, scope);
	      scope.$event = null;
	    };
	    if (this.filters) {
	      handler = scope._applyFilters(handler, null, this.filters);
	    }
	    this.update(handler);
	    return true;
	  }
	};
	
	/**
	 * Set the corresponding value with the setter.
	 * This should only be used in two-way directives
	 * e.g. v-model.
	 *
	 * @param {*} value
	 * @public
	 */
	
	Directive.prototype.set = function (value) {
	  /* istanbul ignore else */
	  if (this.twoWay) {
	    this._withLock(function () {
	      this._watcher.set(value);
	    });
	  } else if (process.env.NODE_ENV !== 'production') {
	    warn('Directive.set() can only be used inside twoWay' + 'directives.');
	  }
	};
	
	/**
	 * Execute a function while preventing that function from
	 * triggering updates on this directive instance.
	 *
	 * @param {Function} fn
	 */
	
	Directive.prototype._withLock = function (fn) {
	  var self = this;
	  self._locked = true;
	  fn.call(self);
	  nextTick(function () {
	    self._locked = false;
	  });
	};
	
	/**
	 * Convenience method that attaches a DOM event listener
	 * to the directive element and autometically tears it down
	 * during unbind.
	 *
	 * @param {String} event
	 * @param {Function} handler
	 * @param {Boolean} [useCapture]
	 */
	
	Directive.prototype.on = function (event, handler, useCapture) {
	  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);
	};
	
	/**
	 * Teardown the watcher and call unbind.
	 */
	
	Directive.prototype._teardown = function () {
	  if (this._bound) {
	    this._bound = false;
	    if (this.unbind) {
	      this.unbind();
	    }
	    if (this._watcher) {
	      this._watcher.teardown();
	    }
	    var listeners = this._listeners;
	    var i;
	    if (listeners) {
	      i = listeners.length;
	      while (i--) {
	        off(this.el, listeners[i][0], listeners[i][1]);
	      }
	    }
	    var unwatchFns = this._paramUnwatchFns;
	    if (unwatchFns) {
	      i = unwatchFns.length;
	      while (i--) {
	        unwatchFns[i]();
	      }
	    }
	    if (process.env.NODE_ENV !== 'production' && this.el) {
	      this.el._vue_directives.$remove(this);
	    }
	    this.vm = this.el = this._watcher = this._listeners = null;
	  }
	};
	
	function lifecycleMixin (Vue) {
	  /**
	   * Update v-ref for component.
	   *
	   * @param {Boolean} remove
	   */
	
	  Vue.prototype._updateRef = function (remove) {
	    var ref = this.$options._ref;
	    if (ref) {
	      var refs = (this._scope || this._context).$refs;
	      if (remove) {
	        if (refs[ref] === this) {
	          refs[ref] = null;
	        }
	      } else {
	        refs[ref] = this;
	      }
	    }
	  };
	
	  /**
	   * Transclude, compile and link element.
	   *
	   * If a pre-compiled linker is available, that means the
	   * passed in element will be pre-transcluded and compiled
	   * as well - all we need to do is to call the linker.
	   *
	   * Otherwise we need to call transclude/compile/link here.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._compile = function (el) {
	    var options = this.$options;
	
	    // transclude and init element
	    // transclude can potentially replace original
	    // so we need to keep reference; this step also injects
	    // the template and caches the original attributes
	    // on the container node and replacer node.
	    var original = el;
	    el = transclude(el, options);
	    this._initElement(el);
	
	    // handle v-pre on root node (#2026)
	    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {
	      return;
	    }
	
	    // root is always compiled per-instance, because
	    // container attrs and props can be different every time.
	    var contextOptions = this._context && this._context.$options;
	    var rootLinker = compileRoot(el, options, contextOptions);
	
	    // resolve slot distribution
	    resolveSlots(this, options._content);
	
	    // compile and link the rest
	    var contentLinkFn;
	    var ctor = this.constructor;
	    // component compilation can be cached
	    // as long as it's not using inline-template
	    if (options._linkerCachable) {
	      contentLinkFn = ctor.linker;
	      if (!contentLinkFn) {
	        contentLinkFn = ctor.linker = compile(el, options);
	      }
	    }
	
	    // link phase
	    // make sure to link root with prop scope!
	    var rootUnlinkFn = rootLinker(this, el, this._scope);
	    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);
	
	    // register composite unlink function
	    // to be called during instance destruction
	    this._unlinkFn = function () {
	      rootUnlinkFn();
	      // passing destroying: true to avoid searching and
	      // splicing the directives
	      contentUnlinkFn(true);
	    };
	
	    // finally replace original
	    if (options.replace) {
	      replace(original, el);
	    }
	
	    this._isCompiled = true;
	    this._callHook('compiled');
	  };
	
	  /**
	   * Initialize instance element. Called in the public
	   * $mount() method.
	   *
	   * @param {Element} el
	   */
	
	  Vue.prototype._initElement = function (el) {
	    if (isFragment(el)) {
	      this._isFragment = true;
	      this.$el = this._fragmentStart = el.firstChild;
	      this._fragmentEnd = el.lastChild;
	      // set persisted text anchors to empty
	      if (this._fragmentStart.nodeType === 3) {
	        this._fragmentStart.data = this._fragmentEnd.data = '';
	      }
	      this._fragment = el;
	    } else {
	      this.$el = el;
	    }
	    this.$el.__vue__ = this;
	    this._callHook('beforeCompile');
	  };
	
	  /**
	   * Create and bind a directive to an element.
	   *
	   * @param {Object} descriptor - parsed directive descriptor
	   * @param {Node} node   - target node
	   * @param {Vue} [host] - transclusion host component
	   * @param {Object} [scope] - v-for scope
	   * @param {Fragment} [frag] - owner fragment
	   */
	
	  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {
	    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));
	  };
	
	  /**
	   * Teardown an instance, unobserves the data, unbind all the
	   * directives, turn off all the event listeners, etc.
	   *
	   * @param {Boolean} remove - whether to remove the DOM node.
	   * @param {Boolean} deferCleanup - if true, defer cleanup to
	   *                                 be called later
	   */
	
	  Vue.prototype._destroy = function (remove, deferCleanup) {
	    if (this._isBeingDestroyed) {
	      if (!deferCleanup) {
	        this._cleanup();
	      }
	      return;
	    }
	
	    var destroyReady;
	    var pendingRemoval;
	
	    var self = this;
	    // Cleanup should be called either synchronously or asynchronoysly as
	    // callback of this.$remove(), or if remove and deferCleanup are false.
	    // In any case it should be called after all other removing, unbinding and
	    // turning of is done
	    var cleanupIfPossible = function cleanupIfPossible() {
	      if (destroyReady && !pendingRemoval && !deferCleanup) {
	        self._cleanup();
	      }
	    };
	
	    // remove DOM element
	    if (remove && this.$el) {
	      pendingRemoval = true;
	      this.$remove(function () {
	        pendingRemoval = false;
	        cleanupIfPossible();
	      });
	    }
	
	    this._callHook('beforeDestroy');
	    this._isBeingDestroyed = true;
	    var i;
	    // remove self from parent. only necessary
	    // if parent is not being destroyed as well.
	    var parent = this.$parent;
	    if (parent && !parent._isBeingDestroyed) {
	      parent.$children.$remove(this);
	      // unregister ref (remove: true)
	      this._updateRef(true);
	    }
	    // destroy all children.
	    i = this.$children.length;
	    while (i--) {
	      this.$children[i].$destroy();
	    }
	    // teardown props
	    if (this._propsUnlinkFn) {
	      this._propsUnlinkFn();
	    }
	    // teardown all directives. this also tearsdown all
	    // directive-owned watchers.
	    if (this._unlinkFn) {
	      this._unlinkFn();
	    }
	    i = this._watchers.length;
	    while (i--) {
	      this._watchers[i].teardown();
	    }
	    // remove reference to self on $el
	    if (this.$el) {
	      this.$el.__vue__ = null;
	    }
	
	    destroyReady = true;
	    cleanupIfPossible();
	  };
	
	  /**
	   * Clean up to ensure garbage collection.
	   * This is called after the leave transition if there
	   * is any.
	   */
	
	  Vue.prototype._cleanup = function () {
	    if (this._isDestroyed) {
	      return;
	    }
	    // remove self from owner fragment
	    // do it in cleanup so that we can call $destroy with
	    // defer right when a fragment is about to be removed.
	    if (this._frag) {
	      this._frag.children.$remove(this);
	    }
	    // remove reference from data ob
	    // frozen object may not have observer.
	    if (this._data && this._data.__ob__) {
	      this._data.__ob__.removeVm(this);
	    }
	    // Clean up references to private properties and other
	    // instances. preserve reference to _data so that proxy
	    // accessors still work. The only potential side effect
	    // here is that mutating the instance after it's destroyed
	    // may affect the state of other components that are still
	    // observing the same object, but that seems to be a
	    // reasonable responsibility for the user rather than
	    // always throwing an error on them.
	    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;
	    // call the last hook...
	    this._isDestroyed = true;
	    this._callHook('destroyed');
	    // turn off all instance listeners.
	    this.$off();
	  };
	}
	
	function miscMixin (Vue) {
	  /**
	   * Apply a list of filter (descriptors) to a value.
	   * Using plain for loops here because this will be called in
	   * the getter of any watcher with filters so it is very
	   * performance sensitive.
	   *
	   * @param {*} value
	   * @param {*} [oldValue]
	   * @param {Array} filters
	   * @param {Boolean} write
	   * @return {*}
	   */
	
	  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {
	    var filter, fn, args, arg, offset, i, l, j, k;
	    for (i = 0, l = filters.length; i < l; i++) {
	      filter = filters[write ? l - i - 1 : i];
	      fn = resolveAsset(this.$options, 'filters', filter.name, true);
	      if (!fn) continue;
	      fn = write ? fn.write : fn.read || fn;
	      if (typeof fn !== 'function') continue;
	      args = write ? [value, oldValue] : [value];
	      offset = write ? 2 : 1;
	      if (filter.args) {
	        for (j = 0, k = filter.args.length; j < k; j++) {
	          arg = filter.args[j];
	          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;
	        }
	      }
	      value = fn.apply(this, args);
	    }
	    return value;
	  };
	
	  /**
	   * Resolve a component, depending on whether the component
	   * is defined normally or using an async factory function.
	   * Resolves synchronously if already resolved, otherwise
	   * resolves asynchronously and caches the resolved
	   * constructor on the factory.
	   *
	   * @param {String|Function} value
	   * @param {Function} cb
	   */
	
	  Vue.prototype._resolveComponent = function (value, cb) {
	    var factory;
	    if (typeof value === 'function') {
	      factory = value;
	    } else {
	      factory = resolveAsset(this.$options, 'components', value, true);
	    }
	    /* istanbul ignore if */
	    if (!factory) {
	      return;
	    }
	    // async component factory
	    if (!factory.options) {
	      if (factory.resolved) {
	        // cached
	        cb(factory.resolved);
	      } else if (factory.requested) {
	        // pool callbacks
	        factory.pendingCallbacks.push(cb);
	      } else {
	        factory.requested = true;
	        var cbs = factory.pendingCallbacks = [cb];
	        factory.call(this, function resolve(res) {
	          if (isPlainObject(res)) {
	            res = Vue.extend(res);
	          }
	          // cache resolved
	          factory.resolved = res;
	          // invoke callbacks
	          for (var i = 0, l = cbs.length; i < l; i++) {
	            cbs[i](res);
	          }
	        }, function reject(reason) {
	          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\nReason: ' + reason : ''));
	        });
	      }
	    } else {
	      // normal component
	      cb(factory);
	    }
	  };
	}
	
	var filterRE$1 = /[^|]\|[^|]/;
	
	function dataAPI (Vue) {
	  /**
	   * Get the value from an expression on this vm.
	   *
	   * @param {String} exp
	   * @param {Boolean} [asStatement]
	   * @return {*}
	   */
	
	  Vue.prototype.$get = function (exp, asStatement) {
	    var res = parseExpression$1(exp);
	    if (res) {
	      if (asStatement) {
	        var self = this;
	        return function statementHandler() {
	          self.$arguments = toArray(arguments);
	          var result = res.get.call(self, self);
	          self.$arguments = null;
	          return result;
	        };
	      } else {
	        try {
	          return res.get.call(this, this);
	        } catch (e) {}
	      }
	    }
	  };
	
	  /**
	   * Set the value from an expression on this vm.
	   * The expression must be a valid left-hand
	   * expression in an assignment.
	   *
	   * @param {String} exp
	   * @param {*} val
	   */
	
	  Vue.prototype.$set = function (exp, val) {
	    var res = parseExpression$1(exp, true);
	    if (res && res.set) {
	      res.set.call(this, this, val);
	    }
	  };
	
	  /**
	   * Delete a property on the VM
	   *
	   * @param {String} key
	   */
	
	  Vue.prototype.$delete = function (key) {
	    del(this._data, key);
	  };
	
	  /**
	   * Watch an expression, trigger callback when its
	   * value changes.
	   *
	   * @param {String|Function} expOrFn
	   * @param {Function} cb
	   * @param {Object} [options]
	   *                 - {Boolean} deep
	   *                 - {Boolean} immediate
	   * @return {Function} - unwatchFn
	   */
	
	  Vue.prototype.$watch = function (expOrFn, cb, options) {
	    var vm = this;
	    var parsed;
	    if (typeof expOrFn === 'string') {
	      parsed = parseDirective(expOrFn);
	      expOrFn = parsed.expression;
	    }
	    var watcher = new Watcher(vm, expOrFn, cb, {
	      deep: options && options.deep,
	      sync: options && options.sync,
	      filters: parsed && parsed.filters,
	      user: !options || options.user !== false
	    });
	    if (options && options.immediate) {
	      cb.call(vm, watcher.value);
	    }
	    return function unwatchFn() {
	      watcher.teardown();
	    };
	  };
	
	  /**
	   * Evaluate a text directive, including filters.
	   *
	   * @param {String} text
	   * @param {Boolean} [asStatement]
	   * @return {String}
	   */
	
	  Vue.prototype.$eval = function (text, asStatement) {
	    // check for filters.
	    if (filterRE$1.test(text)) {
	      var dir = parseDirective(text);
	      // the filter regex check might give false positive
	      // for pipes inside strings, so it's possible that
	      // we don't get any filters here
	      var val = this.$get(dir.expression, asStatement);
	      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;
	    } else {
	      // no filter
	      return this.$get(text, asStatement);
	    }
	  };
	
	  /**
	   * Interpolate a piece of template text.
	   *
	   * @param {String} text
	   * @return {String}
	   */
	
	  Vue.prototype.$interpolate = function (text) {
	    var tokens = parseText(text);
	    var vm = this;
	    if (tokens) {
	      if (tokens.length === 1) {
	        return vm.$eval(tokens[0].value) + '';
	      } else {
	        return tokens.map(function (token) {
	          return token.tag ? vm.$eval(token.value) : token.value;
	        }).join('');
	      }
	    } else {
	      return text;
	    }
	  };
	
	  /**
	   * Log instance data as a plain JS object
	   * so that it is easier to inspect in console.
	   * This method assumes console is available.
	   *
	   * @param {String} [path]
	   */
	
	  Vue.prototype.$log = function (path) {
	    var data = path ? getPath(this._data, path) : this._data;
	    if (data) {
	      data = clean(data);
	    }
	    // include computed fields
	    if (!path) {
	      var key;
	      for (key in this.$options.computed) {
	        data[key] = clean(this[key]);
	      }
	      if (this._props) {
	        for (key in this._props) {
	          data[key] = clean(this[key]);
	        }
	      }
	    }
	    console.log(data);
	  };
	
	  /**
	   * "clean" a getter/setter converted object into a plain
	   * object copy.
	   *
	   * @param {Object} - obj
	   * @return {Object}
	   */
	
	  function clean(obj) {
	    return JSON.parse(JSON.stringify(obj));
	  }
	}
	
	function domAPI (Vue) {
	  /**
	   * Convenience on-instance nextTick. The callback is
	   * auto-bound to the instance, and this avoids component
	   * modules having to rely on the global Vue.
	   *
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$nextTick = function (fn) {
	    nextTick(fn, this);
	  };
	
	  /**
	   * Append instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$appendTo = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, append, appendWithTransition);
	  };
	
	  /**
	   * Prepend instance to target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$prependTo = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.hasChildNodes()) {
	      this.$before(target.firstChild, cb, withTransition);
	    } else {
	      this.$appendTo(target, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Insert instance before target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$before = function (target, cb, withTransition) {
	    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);
	  };
	
	  /**
	   * Insert instance after target
	   *
	   * @param {Node} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$after = function (target, cb, withTransition) {
	    target = query(target);
	    if (target.nextSibling) {
	      this.$before(target.nextSibling, cb, withTransition);
	    } else {
	      this.$appendTo(target.parentNode, cb, withTransition);
	    }
	    return this;
	  };
	
	  /**
	   * Remove instance from DOM
	   *
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition] - defaults to true
	   */
	
	  Vue.prototype.$remove = function (cb, withTransition) {
	    if (!this.$el.parentNode) {
	      return cb && cb();
	    }
	    var inDocument = this._isAttached && inDoc(this.$el);
	    // if we are not in document, no need to check
	    // for transitions
	    if (!inDocument) withTransition = false;
	    var self = this;
	    var realCb = function realCb() {
	      if (inDocument) self._callHook('detached');
	      if (cb) cb();
	    };
	    if (this._isFragment) {
	      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);
	    } else {
	      var op = withTransition === false ? removeWithCb : removeWithTransition;
	      op(this.$el, this, realCb);
	    }
	    return this;
	  };
	
	  /**
	   * Shared DOM insertion function.
	   *
	   * @param {Vue} vm
	   * @param {Element} target
	   * @param {Function} [cb]
	   * @param {Boolean} [withTransition]
	   * @param {Function} op1 - op for non-transition insert
	   * @param {Function} op2 - op for transition insert
	   * @return vm
	   */
	
	  function insert(vm, target, cb, withTransition, op1, op2) {
	    target = query(target);
	    var targetIsDetached = !inDoc(target);
	    var op = withTransition === false || targetIsDetached ? op1 : op2;
	    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);
	    if (vm._isFragment) {
	      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {
	        op(node, target, vm);
	      });
	      cb && cb();
	    } else {
	      op(vm.$el, target, vm, cb);
	    }
	    if (shouldCallHook) {
	      vm._callHook('attached');
	    }
	    return vm;
	  }
	
	  /**
	   * Check for selectors
	   *
	   * @param {String|Element} el
	   */
	
	  function query(el) {
	    return typeof el === 'string' ? document.querySelector(el) : el;
	  }
	
	  /**
	   * Append operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function append(el, target, vm, cb) {
	    target.appendChild(el);
	    if (cb) cb();
	  }
	
	  /**
	   * InsertBefore operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Node} target
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function beforeWithCb(el, target, vm, cb) {
	    before(el, target);
	    if (cb) cb();
	  }
	
	  /**
	   * Remove operation that takes a callback.
	   *
	   * @param {Node} el
	   * @param {Vue} vm - unused
	   * @param {Function} [cb]
	   */
	
	  function removeWithCb(el, vm, cb) {
	    remove(el);
	    if (cb) cb();
	  }
	}
	
	function eventsAPI (Vue) {
	  /**
	   * Listen on the given `event` with `fn`.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$on = function (event, fn) {
	    (this._events[event] || (this._events[event] = [])).push(fn);
	    modifyListenerCount(this, event, 1);
	    return this;
	  };
	
	  /**
	   * Adds an `event` listener that will be invoked a single
	   * time then automatically removed.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$once = function (event, fn) {
	    var self = this;
	    function on() {
	      self.$off(event, on);
	      fn.apply(this, arguments);
	    }
	    on.fn = fn;
	    this.$on(event, on);
	    return this;
	  };
	
	  /**
	   * Remove the given callback for `event` or all
	   * registered callbacks.
	   *
	   * @param {String} event
	   * @param {Function} fn
	   */
	
	  Vue.prototype.$off = function (event, fn) {
	    var cbs;
	    // all
	    if (!arguments.length) {
	      if (this.$parent) {
	        for (event in this._events) {
	          cbs = this._events[event];
	          if (cbs) {
	            modifyListenerCount(this, event, -cbs.length);
	          }
	        }
	      }
	      this._events = {};
	      return this;
	    }
	    // specific event
	    cbs = this._events[event];
	    if (!cbs) {
	      return this;
	    }
	    if (arguments.length === 1) {
	      modifyListenerCount(this, event, -cbs.length);
	      this._events[event] = null;
	      return this;
	    }
	    // specific handler
	    var cb;
	    var i = cbs.length;
	    while (i--) {
	      cb = cbs[i];
	      if (cb === fn || cb.fn === fn) {
	        modifyListenerCount(this, event, -1);
	        cbs.splice(i, 1);
	        break;
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Trigger an event on self.
	   *
	   * @param {String|Object} event
	   * @return {Boolean} shouldPropagate
	   */
	
	  Vue.prototype.$emit = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    var cbs = this._events[event];
	    var shouldPropagate = isSource || !cbs;
	    if (cbs) {
	      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
	      // this is a somewhat hacky solution to the question raised
	      // in #2102: for an inline component listener like <comp @test="doThis">,
	      // the propagation handling is somewhat broken. Therefore we
	      // need to treat these inline callbacks differently.
	      var hasParentCbs = isSource && cbs.some(function (cb) {
	        return cb._fromParent;
	      });
	      if (hasParentCbs) {
	        shouldPropagate = false;
	      }
	      var args = toArray(arguments, 1);
	      for (var i = 0, l = cbs.length; i < l; i++) {
	        var cb = cbs[i];
	        var res = cb.apply(this, args);
	        if (res === true && (!hasParentCbs || cb._fromParent)) {
	          shouldPropagate = true;
	        }
	      }
	    }
	    return shouldPropagate;
	  };
	
	  /**
	   * Recursively broadcast an event to all children instances.
	   *
	   * @param {String|Object} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$broadcast = function (event) {
	    var isSource = typeof event === 'string';
	    event = isSource ? event : event.name;
	    // if no child has registered for this event,
	    // then there's no need to broadcast.
	    if (!this._eventsCount[event]) return;
	    var children = this.$children;
	    var args = toArray(arguments);
	    if (isSource) {
	      // use object event to indicate non-source emit
	      // on children
	      args[0] = { name: event, source: this };
	    }
	    for (var i = 0, l = children.length; i < l; i++) {
	      var child = children[i];
	      var shouldPropagate = child.$emit.apply(child, args);
	      if (shouldPropagate) {
	        child.$broadcast.apply(child, args);
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Recursively propagate an event up the parent chain.
	   *
	   * @param {String} event
	   * @param {...*} additional arguments
	   */
	
	  Vue.prototype.$dispatch = function (event) {
	    var shouldPropagate = this.$emit.apply(this, arguments);
	    if (!shouldPropagate) return;
	    var parent = this.$parent;
	    var args = toArray(arguments);
	    // use object event to indicate non-source emit
	    // on parents
	    args[0] = { name: event, source: this };
	    while (parent) {
	      shouldPropagate = parent.$emit.apply(parent, args);
	      parent = shouldPropagate ? parent.$parent : null;
	    }
	    return this;
	  };
	
	  /**
	   * Modify the listener counts on all parents.
	   * This bookkeeping allows $broadcast to return early when
	   * no child has listened to a certain event.
	   *
	   * @param {Vue} vm
	   * @param {String} event
	   * @param {Number} count
	   */
	
	  var hookRE = /^hook:/;
	  function modifyListenerCount(vm, event, count) {
	    var parent = vm.$parent;
	    // hooks do not get broadcasted so no need
	    // to do bookkeeping for them
	    if (!parent || !count || hookRE.test(event)) return;
	    while (parent) {
	      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;
	      parent = parent.$parent;
	    }
	  }
	}
	
	function lifecycleAPI (Vue) {
	  /**
	   * Set instance target element and kick off the compilation
	   * process. The passed in `el` can be a selector string, an
	   * existing Element, or a DocumentFragment (for block
	   * instances).
	   *
	   * @param {Element|DocumentFragment|string} el
	   * @public
	   */
	
	  Vue.prototype.$mount = function (el) {
	    if (this._isCompiled) {
	      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);
	      return;
	    }
	    el = query(el);
	    if (!el) {
	      el = document.createElement('div');
	    }
	    this._compile(el);
	    this._initDOMHooks();
	    if (inDoc(this.$el)) {
	      this._callHook('attached');
	      ready.call(this);
	    } else {
	      this.$once('hook:attached', ready);
	    }
	    return this;
	  };
	
	  /**
	   * Mark an instance as ready.
	   */
	
	  function ready() {
	    this._isAttached = true;
	    this._isReady = true;
	    this._callHook('ready');
	  }
	
	  /**
	   * Teardown the instance, simply delegate to the internal
	   * _destroy.
	   *
	   * @param {Boolean} remove
	   * @param {Boolean} deferCleanup
	   */
	
	  Vue.prototype.$destroy = function (remove, deferCleanup) {
	    this._destroy(remove, deferCleanup);
	  };
	
	  /**
	   * Partially compile a piece of DOM and return a
	   * decompile function.
	   *
	   * @param {Element|DocumentFragment} el
	   * @param {Vue} [host]
	   * @param {Object} [scope]
	   * @param {Fragment} [frag]
	   * @return {Function}
	   */
	
	  Vue.prototype.$compile = function (el, host, scope, frag) {
	    return compile(el, this.$options, true)(this, el, host, scope, frag);
	  };
	}
	
	/**
	 * The exposed Vue constructor.
	 *
	 * API conventions:
	 * - public API methods/properties are prefixed with `$`
	 * - internal methods/properties are prefixed with `_`
	 * - non-prefixed properties are assumed to be proxied user
	 *   data.
	 *
	 * @constructor
	 * @param {Object} [options]
	 * @public
	 */
	
	function Vue(options) {
	  this._init(options);
	}
	
	// install internals
	initMixin(Vue);
	stateMixin(Vue);
	eventsMixin(Vue);
	lifecycleMixin(Vue);
	miscMixin(Vue);
	
	// install instance APIs
	dataAPI(Vue);
	domAPI(Vue);
	eventsAPI(Vue);
	lifecycleAPI(Vue);
	
	var slot = {
	
	  priority: SLOT,
	  params: ['name'],
	
	  bind: function bind() {
	    // this was resolved during component transclusion
	    var name = this.params.name || 'default';
	    var content = this.vm._slotContents && this.vm._slotContents[name];
	    if (!content || !content.hasChildNodes()) {
	      this.fallback();
	    } else {
	      this.compile(content.cloneNode(true), this.vm._context, this.vm);
	    }
	  },
	
	  compile: function compile(content, context, host) {
	    if (content && context) {
	      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {
	        // if the inserted slot has v-if
	        // inject fallback content as the v-else
	        var elseBlock = document.createElement('template');
	        elseBlock.setAttribute('v-else', '');
	        elseBlock.innerHTML = this.el.innerHTML;
	        // the else block should be compiled in child scope
	        elseBlock._context = this.vm;
	        content.appendChild(elseBlock);
	      }
	      var scope = host ? host._scope : this._scope;
	      this.unlink = context.$compile(content, host, scope, this._frag);
	    }
	    if (content) {
	      replace(this.el, content);
	    } else {
	      remove(this.el);
	    }
	  },
	
	  fallback: function fallback() {
	    this.compile(extractContent(this.el, true), this.vm);
	  },
	
	  unbind: function unbind() {
	    if (this.unlink) {
	      this.unlink();
	    }
	  }
	};
	
	var partial = {
	
	  priority: PARTIAL,
	
	  params: ['name'],
	
	  // watch changes to name for dynamic partials
	  paramWatchers: {
	    name: function name(value) {
	      vIf.remove.call(this);
	      if (value) {
	        this.insert(value);
	      }
	    }
	  },
	
	  bind: function bind() {
	    this.anchor = createAnchor('v-partial');
	    replace(this.el, this.anchor);
	    this.insert(this.params.name);
	  },
	
	  insert: function insert(id) {
	    var partial = resolveAsset(this.vm.$options, 'partials', id, true);
	    if (partial) {
	      this.factory = new FragmentFactory(this.vm, partial);
	      vIf.insert.call(this);
	    }
	  },
	
	  unbind: function unbind() {
	    if (this.frag) {
	      this.frag.destroy();
	    }
	  }
	};
	
	var elementDirectives = {
	  slot: slot,
	  partial: partial
	};
	
	var convertArray = vFor._postProcess;
	
	/**
	 * Limit filter for arrays
	 *
	 * @param {Number} n
	 * @param {Number} offset (Decimal expected)
	 */
	
	function limitBy(arr, n, offset) {
	  offset = offset ? parseInt(offset, 10) : 0;
	  n = toNumber(n);
	  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;
	}
	
	/**
	 * Filter filter for arrays
	 *
	 * @param {String} search
	 * @param {String} [delimiter]
	 * @param {String} ...dataKeys
	 */
	
	function filterBy(arr, search, delimiter) {
	  arr = convertArray(arr);
	  if (search == null) {
	    return arr;
	  }
	  if (typeof search === 'function') {
	    return arr.filter(search);
	  }
	  // cast to lowercase string
	  search = ('' + search).toLowerCase();
	  // allow optional `in` delimiter
	  // because why not
	  var n = delimiter === 'in' ? 3 : 2;
	  // extract and flatten keys
	  var keys = Array.prototype.concat.apply([], toArray(arguments, n));
	  var res = [];
	  var item, key, val, j;
	  for (var i = 0, l = arr.length; i < l; i++) {
	    item = arr[i];
	    val = item && item.$value || item;
	    j = keys.length;
	    if (j) {
	      while (j--) {
	        key = keys[j];
	        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {
	          res.push(item);
	          break;
	        }
	      }
	    } else if (contains(item, search)) {
	      res.push(item);
	    }
	  }
	  return res;
	}
	
	/**
	 * Order filter for arrays
	 *
	 * @param {String|Array<String>|Function} ...sortKeys
	 * @param {Number} [order]
	 */
	
	function orderBy(arr) {
	  var comparator = null;
	  var sortKeys = undefined;
	  arr = convertArray(arr);
	
	  // determine order (last argument)
	  var args = toArray(arguments, 1);
	  var order = args[args.length - 1];
	  if (typeof order === 'number') {
	    order = order < 0 ? -1 : 1;
	    args = args.length > 1 ? args.slice(0, -1) : args;
	  } else {
	    order = 1;
	  }
	
	  // determine sortKeys & comparator
	  var firstArg = args[0];
	  if (!firstArg) {
	    return arr;
	  } else if (typeof firstArg === 'function') {
	    // custom comparator
	    comparator = function (a, b) {
	      return firstArg(a, b) * order;
	    };
	  } else {
	    // string keys. flatten first
	    sortKeys = Array.prototype.concat.apply([], args);
	    comparator = function (a, b, i) {
	      i = i || 0;
	      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);
	    };
	  }
	
	  function baseCompare(a, b, sortKeyIndex) {
	    var sortKey = sortKeys[sortKeyIndex];
	    if (sortKey) {
	      if (sortKey !== '$key') {
	        if (isObject(a) && '$value' in a) a = a.$value;
	        if (isObject(b) && '$value' in b) b = b.$value;
	      }
	      a = isObject(a) ? getPath(a, sortKey) : a;
	      b = isObject(b) ? getPath(b, sortKey) : b;
	    }
	    return a === b ? 0 : a > b ? order : -order;
	  }
	
	  // sort on a copy to avoid mutating original array
	  return arr.slice().sort(comparator);
	}
	
	/**
	 * String contain helper
	 *
	 * @param {*} val
	 * @param {String} search
	 */
	
	function contains(val, search) {
	  var i;
	  if (isPlainObject(val)) {
	    var keys = Object.keys(val);
	    i = keys.length;
	    while (i--) {
	      if (contains(val[keys[i]], search)) {
	        return true;
	      }
	    }
	  } else if (isArray(val)) {
	    i = val.length;
	    while (i--) {
	      if (contains(val[i], search)) {
	        return true;
	      }
	    }
	  } else if (val != null) {
	    return val.toString().toLowerCase().indexOf(search) > -1;
	  }
	}
	
	var digitsRE = /(\d{3})(?=\d)/g;
	
	// asset collections must be a plain object.
	var filters = {
	
	  orderBy: orderBy,
	  filterBy: filterBy,
	  limitBy: limitBy,
	
	  /**
	   * Stringify value.
	   *
	   * @param {Number} indent
	   */
	
	  json: {
	    read: function read(value, indent) {
	      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);
	    },
	    write: function write(value) {
	      try {
	        return JSON.parse(value);
	      } catch (e) {
	        return value;
	      }
	    }
	  },
	
	  /**
	   * 'abc' => 'Abc'
	   */
	
	  capitalize: function capitalize(value) {
	    if (!value && value !== 0) return '';
	    value = value.toString();
	    return value.charAt(0).toUpperCase() + value.slice(1);
	  },
	
	  /**
	   * 'abc' => 'ABC'
	   */
	
	  uppercase: function uppercase(value) {
	    return value || value === 0 ? value.toString().toUpperCase() : '';
	  },
	
	  /**
	   * 'AbC' => 'abc'
	   */
	
	  lowercase: function lowercase(value) {
	    return value || value === 0 ? value.toString().toLowerCase() : '';
	  },
	
	  /**
	   * 12345 => $12,345.00
	   *
	   * @param {String} sign
	   * @param {Number} decimals Decimal places
	   */
	
	  currency: function currency(value, _currency, decimals) {
	    value = parseFloat(value);
	    if (!isFinite(value) || !value && value !== 0) return '';
	    _currency = _currency != null ? _currency : '$';
	    decimals = decimals != null ? decimals : 2;
	    var stringified = Math.abs(value).toFixed(decimals);
	    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;
	    var i = _int.length % 3;
	    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';
	    var _float = decimals ? stringified.slice(-1 - decimals) : '';
	    var sign = value < 0 ? '-' : '';
	    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;
	  },
	
	  /**
	   * 'item' => 'items'
	   *
	   * @params
	   *  an array of strings corresponding to
	   *  the single, double, triple ... forms of the word to
	   *  be pluralized. When the number to be pluralized
	   *  exceeds the length of the args, it will use the last
	   *  entry in the array.
	   *
	   *  e.g. ['single', 'double', 'triple', 'multiple']
	   */
	
	  pluralize: function pluralize(value) {
	    var args = toArray(arguments, 1);
	    var length = args.length;
	    if (length > 1) {
	      var index = value % 10 - 1;
	      return index in args ? args[index] : args[length - 1];
	    } else {
	      return args[0] + (value === 1 ? '' : 's');
	    }
	  },
	
	  /**
	   * Debounce a handler function.
	   *
	   * @param {Function} handler
	   * @param {Number} delay = 300
	   * @return {Function}
	   */
	
	  debounce: function debounce(handler, delay) {
	    if (!handler) return;
	    if (!delay) {
	      delay = 300;
	    }
	    return _debounce(handler, delay);
	  }
	};
	
	function installGlobalAPI (Vue) {
	  /**
	   * Vue and every constructor that extends Vue has an
	   * associated options object, which can be accessed during
	   * compilation steps as `this.constructor.options`.
	   *
	   * These can be seen as the default options of every
	   * Vue instance.
	   */
	
	  Vue.options = {
	    directives: directives,
	    elementDirectives: elementDirectives,
	    filters: filters,
	    transitions: {},
	    components: {},
	    partials: {},
	    replace: true
	  };
	
	  /**
	   * Expose useful internals
	   */
	
	  Vue.util = util;
	  Vue.config = config;
	  Vue.set = set;
	  Vue['delete'] = del;
	  Vue.nextTick = nextTick;
	
	  /**
	   * The following are exposed for advanced usage / plugins
	   */
	
	  Vue.compiler = compiler;
	  Vue.FragmentFactory = FragmentFactory;
	  Vue.internalDirectives = internalDirectives;
	  Vue.parsers = {
	    path: path,
	    text: text,
	    template: template,
	    directive: directive,
	    expression: expression
	  };
	
	  /**
	   * Each instance constructor, including Vue, has a unique
	   * cid. This enables us to create wrapped "child
	   * constructors" for prototypal inheritance and cache them.
	   */
	
	  Vue.cid = 0;
	  var cid = 1;
	
	  /**
	   * Class inheritance
	   *
	   * @param {Object} extendOptions
	   */
	
	  Vue.extend = function (extendOptions) {
	    extendOptions = extendOptions || {};
	    var Super = this;
	    var isFirstExtend = Super.cid === 0;
	    if (isFirstExtend && extendOptions._Ctor) {
	      return extendOptions._Ctor;
	    }
	    var name = extendOptions.name || Super.options.name;
	    if (process.env.NODE_ENV !== 'production') {
	      if (!/^[a-zA-Z][\w-]*$/.test(name)) {
	        warn('Invalid component name: "' + name + '". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');
	        name = null;
	      }
	    }
	    var Sub = createClass(name || 'VueComponent');
	    Sub.prototype = Object.create(Super.prototype);
	    Sub.prototype.constructor = Sub;
	    Sub.cid = cid++;
	    Sub.options = mergeOptions(Super.options, extendOptions);
	    Sub['super'] = Super;
	    // allow further extension
	    Sub.extend = Super.extend;
	    // create asset registers, so extended classes
	    // can have their private assets too.
	    config._assetTypes.forEach(function (type) {
	      Sub[type] = Super[type];
	    });
	    // enable recursive self-lookup
	    if (name) {
	      Sub.options.components[name] = Sub;
	    }
	    // cache constructor
	    if (isFirstExtend) {
	      extendOptions._Ctor = Sub;
	    }
	    return Sub;
	  };
	
	  /**
	   * A function that returns a sub-class constructor with the
	   * given name. This gives us much nicer output when
	   * logging instances in the console.
	   *
	   * @param {String} name
	   * @return {Function}
	   */
	
	  function createClass(name) {
	    /* eslint-disable no-new-func */
	    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();
	    /* eslint-enable no-new-func */
	  }
	
	  /**
	   * Plugin system
	   *
	   * @param {Object} plugin
	   */
	
	  Vue.use = function (plugin) {
	    /* istanbul ignore if */
	    if (plugin.installed) {
	      return;
	    }
	    // additional parameters
	    var args = toArray(arguments, 1);
	    args.unshift(this);
	    if (typeof plugin.install === 'function') {
	      plugin.install.apply(plugin, args);
	    } else {
	      plugin.apply(null, args);
	    }
	    plugin.installed = true;
	    return this;
	  };
	
	  /**
	   * Apply a global mixin by merging it into the default
	   * options.
	   */
	
	  Vue.mixin = function (mixin) {
	    Vue.options = mergeOptions(Vue.options, mixin);
	  };
	
	  /**
	   * Create asset registration methods with the following
	   * signature:
	   *
	   * @param {String} id
	   * @param {*} definition
	   */
	
	  config._assetTypes.forEach(function (type) {
	    Vue[type] = function (id, definition) {
	      if (!definition) {
	        return this.options[type + 's'][id];
	      } else {
	        /* istanbul ignore if */
	        if (process.env.NODE_ENV !== 'production') {
	          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {
	            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);
	          }
	        }
	        if (type === 'component' && isPlainObject(definition)) {
	          if (!definition.name) {
	            definition.name = id;
	          }
	          definition = Vue.extend(definition);
	        }
	        this.options[type + 's'][id] = definition;
	        return definition;
	      }
	    };
	  });
	
	  // expose internal transition API
	  extend(Vue.transition, transition);
	}
	
	installGlobalAPI(Vue);
	
	Vue.version = '1.0.28';
	
	// devtools global hook
	/* istanbul ignore next */
	setTimeout(function () {
	  if (config.devtools) {
	    if (devtools) {
	      devtools.emit('init', Vue);
	    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\/\d+/.test(window.navigator.userAgent)) {
	      console.log('Download the Vue Devtools for a better development experience:\n' + 'https://github.com/vuejs/vue-devtools');
	    }
	  }
	}, 0);
	
	module.exports = Vue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(85), __webpack_require__(86)))

/***/ },
/* 85 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v2.2.4
	 * http://jquery.com/
	 *
	 * Includes Sizzle.js
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-05-20T17:23Z
	 */
	
	(function( global, factory ) {
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Support: Firefox 18+
	// Can't be in strict mode, several libs including ASP.NET trace
	// the stack via arguments.caller.callee and Firefox dies if
	// you try to trace through "use strict" call chains. (#13335)
	//"use strict";
	var arr = [];
	
	var document = window.document;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var support = {};
	
	
	
	var
		version = "2.2.4",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android<4.1
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([\da-z])/gi,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// Start with an empty selector
		selector: "",
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
			return num != null ?
	
				// Return just the one element from the set
				( num < 0 ? this[ num + this.length ] : this[ num ] ) :
	
				// Return all the elements in a clean array
				slice.call( this );
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
			ret.context = this.context;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = jQuery.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && jQuery.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isArray: Array.isArray,
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// parseFloat NaNs numeric-cast false positives (null|true|false|"")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			// adding 1 corrects loss of precision from parseFloat (#15100)
			var realStringObj = obj && obj.toString();
			return !jQuery.isArray( obj ) && ( realStringObj - parseFloat( realStringObj ) + 1 ) >= 0;
		},
	
		isPlainObject: function( obj ) {
			var key;
	
			// Not plain objects:
			// - Any object or value whose internal [[Class]] property is not "[object Object]"
			// - DOM nodes
			// - window
			if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
				return false;
			}
	
			// Not own constructor property must be Object
			if ( obj.constructor &&
					!hasOwn.call( obj, "constructor" ) &&
					!hasOwn.call( obj.constructor.prototype || {}, "isPrototypeOf" ) ) {
				return false;
			}
	
			// Own properties are enumerated firstly, so to speed up,
			// if last one is own, then all properties are own
			for ( key in obj ) {}
	
			return key === undefined || hasOwn.call( obj, key );
		},
	
		isEmptyObject: function( obj ) {
			var name;
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android<4.0, iOS<6 (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			var script,
				indirect = eval;
	
			code = jQuery.trim( code );
	
			if ( code ) {
	
				// If the code includes a valid, prologue position
				// strict mode pragma, execute code by injecting a
				// script tag into the document.
				if ( code.indexOf( "use strict" ) === 1 ) {
					script = document.createElement( "script" );
					script.text = code;
					document.head.appendChild( script ).parentNode.removeChild( script );
				} else {
	
					// Otherwise, avoid the DOM node creation, insertion
					// and removal by using an indirect global eval
	
					indirect( code );
				}
			}
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE9-11+
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		nodeName: function( elem, name ) {
			return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android<4.1
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	// JSHint would error on this code due to the Symbol not being defined in ES5.
	// Defining this global in .jshintrc would create a danger of using the global
	// unguarded in another place, it seems safer to just disable JSHint for these
	// three lines.
	/* jshint ignore: start */
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	/* jshint ignore: end */
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: iOS 8.2 (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.2.1
	 * http://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2015-10-17
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// General-purpose constants
		MAX_NEGATIVE = 1 << 31,
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// http://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
		rescape = /'|\\/g,
	
		// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		};
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, nidselect, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rescape, "\\$&" );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						nidselect = ridentifier.test( nid ) ? "#" + nid : "[id='" + nid + "']";
						while ( i-- ) {
							groups[i] = nidselect + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created div and expects a boolean result
	 */
	function assert( fn ) {
		var div = document.createElement("div");
	
		try {
			return !!fn( div );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( div.parentNode ) {
				div.parentNode.removeChild( div );
			}
			// release memory in IE
			div = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				( ~b.sourceIndex || MAX_NEGATIVE ) -
				( ~a.sourceIndex || MAX_NEGATIVE );
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, parent,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( (parent = document.defaultView) && parent.top !== parent ) {
			// Support: IE 11
			if ( parent.addEventListener ) {
				parent.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( parent.attachEvent ) {
				parent.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( div ) {
			div.className = "i";
			return !div.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( div ) {
			div.appendChild( document.createComment("") );
			return !div.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( div ) {
			docElem.appendChild( div ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID find and filter
		if ( support.getById ) {
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var m = context.getElementById( id );
					return m ? [ m ] : [];
				}
			};
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
		} else {
			// Support: IE6/7
			// getElementById is not reliable as a find shortcut
			delete Expr.find["ID"];
	
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See http://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( div ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// http://bugs.jquery.com/ticket/12359
				docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( div.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !div.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibing-combinator selector` fails
				if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( div ) {
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				div.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( div.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( !div.querySelectorAll(":enabled").length ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				div.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( div, "div" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( div, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": function( elem ) {
				return elem.disabled === false;
			},
	
			"disabled": function( elem ) {
				return elem.disabled === true;
			},
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			checkNonElements = base && dir === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( (oldCache = uniqueCache[ dir ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ dir ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					support.getById && context.nodeType === 9 && documentIsHTML &&
					Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( div1 ) {
		// Should return 1, but returns 4 (following)
		return div1.compareDocumentPosition( document.createElement("div") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( div ) {
		div.innerHTML = "<input/>";
		div.firstChild.setAttribute( "value", "" );
		return div.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( div ) {
		return div.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	var rsingleTag = ( /^<([\w-]+)\s*\/?>(?:<\/\1>|)$/ );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				/* jshint -W018 */
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
	
		}
	
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
	
		}
	
		if ( typeof qualifier === "string" ) {
			if ( risSimple.test( qualifier ) ) {
				return jQuery.filter( qualifier, elements, not );
			}
	
			qualifier = jQuery.filter( qualifier, elements );
		}
	
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		return elems.length === 1 && elem.nodeType === 1 ?
			jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
			jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
				return elem.nodeType === 1;
			} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i,
				len = this.length,
				ret = [],
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			// Needed because $( selector, context ) becomes $( context ).find( selector )
			ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
			ret.selector = this.selector ? this.selector + " " + selector : selector;
			return ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						// Support: Blackberry 4.6
						// gEBID returns nodes no longer in the document (#6963)
						if ( elem && elem.parentNode ) {
	
							// Inject the element directly into the jQuery object
							this.length = 1;
							this[ 0 ] = elem;
						}
	
						this.context = document;
						this.selector = selector;
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this.context = this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			if ( selector.selector !== undefined ) {
				this.selector = selector.selector;
				this.context = selector.context;
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
					jQuery( selectors, context || this.context ) :
					0;
	
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
					// Always skip document fragments
					if ( cur.nodeType < 11 && ( pos ?
						pos.index( cur ) > -1 :
	
						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
						matched.push( cur );
						break;
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			return elem.contentDocument || jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnotwhite = ( /\S+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, listener list, final state
					[ "resolve", "done", jQuery.Callbacks( "once memory" ), "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ), "rejected" ],
					[ "notify", "progress", jQuery.Callbacks( "memory" ) ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					then: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
								var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
	
								// deferred[ done | fail | progress ] for forwarding actions to newDefer
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this === promise ? newDefer.promise() : this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Keep pipe for back-compat
			promise.pipe = promise.then;
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 3 ];
	
				// promise[ done | fail | progress ] = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add( function() {
	
						// state = [ resolved | rejected ]
						state = stateString;
	
					// [ reject_list | resolve_list ].disable; progress_list.lock
					}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
				}
	
				// deferred[ resolve | reject | notify ]
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? promise : this, arguments );
					return this;
				};
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( subordinate /* , ..., subordinateN */ ) {
			var i = 0,
				resolveValues = slice.call( arguments ),
				length = resolveValues.length,
	
				// the count of uncompleted subordinates
				remaining = length !== 1 ||
					( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,
	
				// the master Deferred.
				// If resolveValues consist of only a single Deferred, just use that.
				deferred = remaining === 1 ? subordinate : jQuery.Deferred(),
	
				// Update function for both resolve and progress values
				updateFunc = function( i, contexts, values ) {
					return function( value ) {
						contexts[ i ] = this;
						values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( values === progressValues ) {
							deferred.notifyWith( contexts, values );
						} else if ( !( --remaining ) ) {
							deferred.resolveWith( contexts, values );
						}
					};
				},
	
				progressValues, progressContexts, resolveContexts;
	
			// Add listeners to Deferred subordinates; treat others as resolved
			if ( length > 1 ) {
				progressValues = new Array( length );
				progressContexts = new Array( length );
				resolveContexts = new Array( length );
				for ( ; i < length; i++ ) {
					if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
						resolveValues[ i ].promise()
							.progress( updateFunc( i, progressContexts, progressValues ) )
							.done( updateFunc( i, resolveContexts, resolveValues ) )
							.fail( deferred.reject );
					} else {
						--remaining;
					}
				}
			}
	
			// If we're not waiting on anything, resolve the master
			if ( !remaining ) {
				deferred.resolveWith( resolveContexts, resolveValues );
			}
	
			return deferred.promise();
		}
	} );
	
	
	// The deferred used on DOM ready
	var readyList;
	
	jQuery.fn.ready = function( fn ) {
	
		// Add the callback
		jQuery.ready.promise().done( fn );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Hold (or release) the ready event
		holdReady: function( hold ) {
			if ( hold ) {
				jQuery.readyWait++;
			} else {
				jQuery.ready( true );
			}
		},
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
	
			// Trigger any bound ready events
			if ( jQuery.fn.triggerHandler ) {
				jQuery( document ).triggerHandler( "ready" );
				jQuery( document ).off( "ready" );
			}
		}
	} );
	
	/**
	 * The ready event handler and self cleanup method
	 */
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	jQuery.ready.promise = function( obj ) {
		if ( !readyList ) {
	
			readyList = jQuery.Deferred();
	
			// Catch cases where $(document).ready() is called
			// after the browser event has already occurred.
			// Support: IE9-10 only
			// Older IE sometimes signals "interactive" too soon
			if ( document.readyState === "complete" ||
				( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
				// Handle it asynchronously to allow scripts the opportunity to delay ready
				window.setTimeout( jQuery.ready );
	
			} else {
	
				// Use the handy event callback
				document.addEventListener( "DOMContentLoaded", completed );
	
				// A fallback to window.onload, that will always work
				window.addEventListener( "load", completed );
			}
		}
		return readyList.promise( obj );
	};
	
	// Kick off the DOM ready check even if the user does not
	jQuery.ready.promise();
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		return chainable ?
			elems :
	
			// Gets
			bulk ?
				fn.call( elems ) :
				len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		/* jshint -W018 */
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		register: function( owner, initial ) {
			var value = initial || {};
	
			// If it is a node unlikely to be stringify-ed or looped over
			// use plain assignment
			if ( owner.nodeType ) {
				owner[ this.expando ] = value;
	
			// Otherwise secure it in a non-enumerable, non-writable property
			// configurability must be true to allow the property to be
			// deleted with the delete operator
			} else {
				Object.defineProperty( owner, this.expando, {
					value: value,
					writable: true,
					configurable: true
				} );
			}
			return owner[ this.expando ];
		},
		cache: function( owner ) {
	
			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( !acceptData( owner ) ) {
				return {};
			}
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			if ( typeof data === "string" ) {
				cache[ data ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
				owner[ this.expando ] && owner[ this.expando ][ key ];
		},
		access: function( owner, key, value ) {
			var stored;
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				stored = this.get( owner, key );
	
				return stored !== undefined ?
					stored : this.get( owner, jQuery.camelCase( key ) );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i, name, camel,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key === undefined ) {
				this.register( owner );
	
			} else {
	
				// Support array or space separated string of keys
				if ( jQuery.isArray( key ) ) {
	
					// If "name" is an array of keys...
					// When data is initially created, via ("key", "val") signature,
					// keys will be converted to camelCase.
					// Since there is no way to tell _how_ a key was added, remove
					// both plain key and camelCase key. #12786
					// This will only penalize the array argument path.
					name = key.concat( key.map( jQuery.camelCase ) );
				} else {
					camel = jQuery.camelCase( key );
	
					// Try the string as a key before any manipulation
					if ( key in cache ) {
						name = [ key, camel ];
					} else {
	
						// If a key with the spaces exists, use it.
						// Otherwise, create an array by matching non-whitespace
						name = camel;
						name = name in cache ?
							[ name ] : ( name.match( rnotwhite ) || [] );
					}
				}
	
				i = name.length;
	
				while ( i-- ) {
					delete cache[ name[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <= 35-45+
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://code.google.com/p/chromium/issues/detail?id=378607
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = data === "true" ? true :
						data === "false" ? false :
						data === "null" ? null :
	
						// Only convert to a number if it doesn't change the string
						+data + "" === data ? +data :
						rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE11+
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data, camelKey;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// with the key as-is
					data = dataUser.get( elem, key ) ||
	
						// Try to find dashed key if it exists (gh-2779)
						// This is for 2.2.x only
						dataUser.get( elem, key.replace( rmultiDash, "-$&" ).toLowerCase() );
	
					if ( data !== undefined ) {
						return data;
					}
	
					camelKey = jQuery.camelCase( key );
	
					// Attempt to get data from the cache
					// with the key camelized
					data = dataUser.get( elem, camelKey );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, camelKey, undefined );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				camelKey = jQuery.camelCase( key );
				this.each( function() {
	
					// First, attempt to store a copy or reference of any
					// data that might've been store with a camelCased key.
					var data = dataUser.get( this, camelKey );
	
					// For HTML5 data-* attribute interop, we have to
					// store property names with dashes in a camelCase form.
					// This might not apply to all properties...*
					dataUser.set( this, camelKey, value );
	
					// *... In the case of properties that might _actually_
					// have dashes, we need to also store a copy of that
					// unchanged property.
					if ( key.indexOf( "-" ) > -1 && data !== undefined ) {
						dataUser.set( this, key, value );
					}
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || jQuery.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHidden = function( elem, el ) {
	
			// isHidden might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
			return jQuery.css( elem, "display" ) === "none" ||
				!jQuery.contains( elem.ownerDocument, elem );
		};
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() { return tween.cur(); } :
				function() { return jQuery.css( elem, prop, "" ); },
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([\w:-]+)/ );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE9
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE9-11+
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret = typeof context.getElementsByTagName !== "undefined" ?
				context.getElementsByTagName( tag || "*" ) :
				typeof context.querySelectorAll !== "undefined" ?
					context.querySelectorAll( tag || "*" ) :
				[];
	
		return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
			jQuery.merge( [ context ], ret ) :
			ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android<4.1, PhantomJS<2
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0-4.3, Safari<=5.1
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Safari<=5.1, Android<4.2
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE<=11+
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE9
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnotwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( event ) {
	
			// Make a writable jQuery.Event from the native event object
			event = jQuery.event.fix( event );
	
			var i, j, ret, matched, handleObj,
				handlerQueue = [],
				args = slice.call( arguments ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, matches, sel, handleObj,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Support (at least): Chrome, IE9
			// Find delegate handlers
			// Black-hole SVG <use> instance trees (#13180)
			//
			// Support: Firefox<=42+
			// Avoid non-left-click in FF but don't block IE radio events (#3861, gh-2343)
			if ( delegateCount && cur.nodeType &&
				( event.type !== "click" || isNaN( event.button ) || event.button < 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && ( cur.disabled !== true || event.type !== "click" ) ) {
						matches = [];
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matches[ sel ] === undefined ) {
								matches[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matches[ sel ] ) {
								matches.push( handleObj );
							}
						}
						if ( matches.length ) {
							handlerQueue.push( { elem: cur, handlers: matches } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: this, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		// Includes some event props shared by KeyEvent and MouseEvent
		props: ( "altKey bubbles cancelable ctrlKey currentTarget detail eventPhase " +
			"metaKey relatedTarget shiftKey target timeStamp view which" ).split( " " ),
	
		fixHooks: {},
	
		keyHooks: {
			props: "char charCode key keyCode".split( " " ),
			filter: function( event, original ) {
	
				// Add which for key events
				if ( event.which == null ) {
					event.which = original.charCode != null ? original.charCode : original.keyCode;
				}
	
				return event;
			}
		},
	
		mouseHooks: {
			props: ( "button buttons clientX clientY offsetX offsetY pageX pageY " +
				"screenX screenY toElement" ).split( " " ),
			filter: function( event, original ) {
				var eventDoc, doc, body,
					button = original.button;
	
				// Calculate pageX/Y if missing and clientX/Y available
				if ( event.pageX == null && original.clientX != null ) {
					eventDoc = event.target.ownerDocument || document;
					doc = eventDoc.documentElement;
					body = eventDoc.body;
	
					event.pageX = original.clientX +
						( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) -
						( doc && doc.clientLeft || body && body.clientLeft || 0 );
					event.pageY = original.clientY +
						( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) -
						( doc && doc.clientTop  || body && body.clientTop  || 0 );
				}
	
				// Add which for click: 1 === left; 2 === middle; 3 === right
				// Note: button is not normalized, so don't use it
				if ( !event.which && button !== undefined ) {
					event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
				}
	
				return event;
			}
		},
	
		fix: function( event ) {
			if ( event[ jQuery.expando ] ) {
				return event;
			}
	
			// Create a writable copy of the event object and normalize some properties
			var i, prop, copy,
				type = event.type,
				originalEvent = event,
				fixHook = this.fixHooks[ type ];
	
			if ( !fixHook ) {
				this.fixHooks[ type ] = fixHook =
					rmouseEvent.test( type ) ? this.mouseHooks :
					rkeyEvent.test( type ) ? this.keyHooks :
					{};
			}
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;
	
			event = new jQuery.Event( originalEvent );
	
			i = copy.length;
			while ( i-- ) {
				prop = copy[ i ];
				event[ prop ] = originalEvent[ prop ];
			}
	
			// Support: Cordova 2.5 (WebKit) (#13255)
			// All events should have a target; Cordova deviceready doesn't
			if ( !event.target ) {
				event.target = document;
			}
	
			// Support: Safari 6.0+, Chrome<28
			// Target should not be a text node (#504, #13143)
			if ( event.target.nodeType === 3 ) {
				event.target = event.target.parentNode;
			}
	
			return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return jQuery.nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android<4.0
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://code.google.com/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)[^>]*)\/>/gi,
	
		// Support: IE 10-11, Edge 10240+
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Manipulating tables requires a tbody
	function manipulationTarget( elem, content ) {
		return jQuery.nodeName( elem, "table" ) &&
			jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?
	
			elem.getElementsByTagName( "tbody" )[ 0 ] ||
				elem.appendChild( elem.ownerDocument.createElement( "tbody" ) ) :
			elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android<4.1, PhantomJS<2
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <= 35-45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
	
		// Keep domManip exposed until 3.0 (gh-2225)
		domManip: domManip,
	
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: QtWebKit
				// .get() because push.apply(_, arraylike) throws
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	
	
	var iframe,
		elemdisplay = {
	
			// Support: Firefox
			// We have to pre-define these values for FF (#10227)
			HTML: "block",
			BODY: "block"
		};
	
	/**
	 * Retrieve the actual display of a element
	 * @param {String} name nodeName of the element
	 * @param {Object} doc Document object
	 */
	
	// Called only from within defaultDisplay
	function actualDisplay( name, doc ) {
		var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
	
			display = jQuery.css( elem[ 0 ], "display" );
	
		// We don't have any data stored on the element,
		// so use "detach" method as fast way to get rid of the element
		elem.detach();
	
		return display;
	}
	
	/**
	 * Try to determine the default display value of an element
	 * @param {String} nodeName
	 */
	function defaultDisplay( nodeName ) {
		var doc = document,
			display = elemdisplay[ nodeName ];
	
		if ( !display ) {
			display = actualDisplay( nodeName, doc );
	
			// If the simple way fails, read from inside an iframe
			if ( display === "none" || !display ) {
	
				// Use the already-created iframe if possible
				iframe = ( iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" ) )
					.appendTo( doc.documentElement );
	
				// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
				doc = iframe[ 0 ].contentDocument;
	
				// Support: IE
				doc.write();
				doc.close();
	
				display = actualDisplay( nodeName, doc );
				iframe.detach();
			}
	
			// Store the correct default display
			elemdisplay[ nodeName ] = display;
		}
	
		return display;
	}
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	var documentElement = document.documentElement;
	
	
	
	( function() {
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE9-11+
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
			div.style.cssText =
	
				// Support: Firefox<29, Android 2.3
				// Vendor-prefix box-sizing
				"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
		}
	
		jQuery.extend( support, {
			pixelPosition: function() {
	
				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
	
				// Support: Android 4.0-4.3
				// We're checking for boxSizingReliableVal here instead of pixelMarginRightVal
				// since that compresses better and they're computed together anyway.
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
	
				// Support: IE <=8 only, Android 4.0 - 4.3 only, Firefox <=3 - 37
				if ( boxSizingReliableVal == null ) {
					computeStyleTests();
				}
				return reliableMarginLeftVal;
			},
			reliableMarginRight: function() {
	
				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );
	
				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
	
					// Support: Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;box-sizing:content-box;" +
					"display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				documentElement.appendChild( container );
	
				ret = !parseFloat( window.getComputedStyle( marginDiv ).marginRight );
	
				documentElement.removeChild( container );
				div.removeChild( marginDiv );
	
				return ret;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
			style = elem.style;
	
		computed = computed || getStyles( elem );
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;
	
		// Support: Opera 12.1x only
		// Fall back to style even without computed
		// computed is undefined for elems on document fragments
		if ( ( ret === "" || ret === undefined ) && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}
	
		// Support: IE9
		// getPropertyValue is only needed for .css('filter') (#12537)
		if ( computed ) {
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// http://dev.w3.org/csswg/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE9-11+
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i = extra === ( isBorderBox ? "border" : "content" ) ?
	
			// If we already have the right measurement, avoid augmentation
			4 :
	
			// Otherwise initialize for horizontal or vertical properties
			name === "width" ? 1 : 0,
	
			val = 0;
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with offset property, which is equivalent to the border-box value
		var valueIsBorderBox = true,
			val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
			styles = getStyles( elem ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Some non-html elements return undefined for offsetWidth, so check for null/undefined
		// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
		// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
		if ( val <= 0 || val == null ) {
	
			// Fall back to computed then uncomputed css if necessary
			val = curCSS( elem, name, styles );
			if ( val < 0 || val == null ) {
				val = elem.style[ name ];
			}
	
			// Computed unit is not pixels. Stop here and return.
			if ( rnumnonpx.test( val ) ) {
				return val;
			}
	
			// Check for style in case a browser which returns unreliable values
			// for getComputedStyle silently falls back to the reliable elem.style
			valueIsBorderBox = isBorderBox &&
				( support.boxSizingReliable() || val === elem.style[ name ] );
	
			// Normalize "", auto, and prepare for extra
			val = parseFloat( val ) || 0;
		}
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	function showHide( elements, show ) {
		var display, elem, hidden,
			values = [],
			index = 0,
			length = elements.length;
	
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			values[ index ] = dataPriv.get( elem, "olddisplay" );
			display = elem.style.display;
			if ( show ) {
	
				// Reset the inline display of this element to learn if it is
				// being hidden by cascaded rules or not
				if ( !values[ index ] && display === "none" ) {
					elem.style.display = "";
				}
	
				// Set elements which have been overridden with display: none
				// in a stylesheet to whatever the default browser style is
				// for such an element
				if ( elem.style.display === "" && isHidden( elem ) ) {
					values[ index ] = dataPriv.access(
						elem,
						"olddisplay",
						defaultDisplay( elem.nodeName )
					);
				}
			} else {
				hidden = isHidden( elem );
	
				if ( display !== "none" || !hidden ) {
					dataPriv.set(
						elem,
						"olddisplay",
						hidden ? display : jQuery.css( elem, "display" )
					);
				}
			}
		}
	
		// Set the display of most of the elements in a second loop
		// to avoid the constant reflow
		for ( index = 0; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
			if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
				elem.style.display = show ? values[ index ] || "" : "none";
			}
		}
	
		return elements;
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				style = elem.style;
	
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// Support: IE9-11+
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					style[ name ] = value;
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name );
	
			// Make sure that we're working with the right name
			name = jQuery.cssProps[ origName ] ||
				( jQuery.cssProps[ origName ] = vendorPropName( origName ) || origName );
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
						elem.offsetWidth === 0 ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// Support: Android 2.3
	jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
		function( elem, computed ) {
			if ( computed ) {
				return swap( elem, { "display": "inline-block" },
					curCSS, [ elem, "marginRight" ] );
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( jQuery.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		},
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHidden( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE9
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back Compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, timerId,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4 ; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		/* jshint validthis: true */
		var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHidden( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Handle queue: false promises
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Height/width overflow pass
		if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
	
			// Make sure that nothing sneaks out
			// Record all 3 overflow attributes because IE9-10 do not
			// change the overflow attribute when overflowX and
			// overflowY are set to the same value
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Set display property to inline-block for height/width
			// animations on inline elements that are having width/height animated
			display = jQuery.css( elem, "display" );
	
			// Test default display if display is currently "none"
			checkDisplay = display === "none" ?
				dataPriv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;
	
			if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
				style.display = "inline-block";
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// show/hide pass
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.exec( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// If there is dataShow left over from a stopped hide or show
					// and we are going to proceed with show, we should pretend to be hidden
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
	
			// Any non-fx value stops us from restoring the original display value
			} else {
				display = undefined;
			}
		}
	
		if ( !jQuery.isEmptyObject( orig ) ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", {} );
			}
	
			// Store state if its toggle - enables .stop().toggle() to "reverse"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}
			if ( hidden ) {
				jQuery( elem ).show();
			} else {
				anim.done( function() {
					jQuery( elem ).hide();
				} );
			}
			anim.done( function() {
				var prop;
	
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
			for ( prop in orig ) {
				tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
	
				if ( !( prop in dataShow ) ) {
					dataShow[ prop ] = tween.start;
					if ( hidden ) {
						tween.end = tween.start;
						tween.start = prop === "width" || prop === "height" ? 1 : 0;
					}
				}
			}
	
		// If this is a noop like .hide().hide(), restore an overwritten display value
		} else if ( ( display === "none" ? defaultDisplay( elem.nodeName ) : display ) === "inline" ) {
			style.display = display;
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( jQuery.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				if ( percent < 1 && length ) {
					return remaining;
				} else {
					deferred.resolveWith( elem, [ animation ] );
					return false;
				}
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length ; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length ; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		// attach callbacks from options
		return animation.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnotwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length ; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ?
			opt.duration : opt.duration in jQuery.fx.speeds ?
				jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHidden ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Checks the timer has not already been removed
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		if ( timer() ) {
			jQuery.fx.start();
		} else {
			jQuery.timers.pop();
		}
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( !timerId ) {
			timerId = window.setInterval( jQuery.fx.tick, jQuery.fx.interval );
		}
	};
	
	jQuery.fx.stop = function() {
		window.clearInterval( timerId );
	
		timerId = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// http://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: iOS<=5.1, Android<=4.2+
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE<=11+
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: Android<=2.3
		// Options inside disabled selects are incorrectly marked as disabled
		select.disabled = true;
		support.optDisabled = !opt.disabled;
	
		// Support: IE<=11+
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// All attributes are lowercase
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				name = name.toLowerCase();
				hooks = jQuery.attrHooks[ name ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						jQuery.nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name, propName,
				i = 0,
				attrNames = value && value.match( rnotwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					propName = jQuery.propFix[ name ] || name;
	
					// Boolean attributes get special treatment (#10870)
					if ( jQuery.expr.match.bool.test( name ) ) {
	
						// Set corresponding property to false
						elem[ propName ] = false;
					}
	
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle;
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ name ];
				attrHandle[ name ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					name.toLowerCase() :
					null;
				attrHandle[ name ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					return tabindex ?
						parseInt( tabindex, 10 ) :
						rfocusable.test( elem.nodeName ) ||
							rclickable.test( elem.nodeName ) && elem.href ?
								0 :
								-1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
	var rclass = /[\t\r\n\f]/g;
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnotwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 &&
						( " " + curValue + " " ).replace( rclass, " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = jQuery.trim( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnotwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + getClass( elem ) + " " ).replace( rclass, " " )
						.indexOf( className ) > -1
				) {
					return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g,
		rspaces = /[\x20\t\r\n\f]+/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					return typeof ret === "string" ?
	
						// Handle most common string cases
						ret.replace( rreturn, "" ) :
	
						// Handle cases where value is null/undef or number
						ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( jQuery.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE10-11+
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						jQuery.trim( jQuery.text( elem ) ).replace( rspaces, " " );
				}
			},
			select: {
				get: function( elem ) {
					var value, option,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one" || index < 0,
						values = one ? null : [],
						max = one ? index + 1 : options.length,
						i = index < 0 ?
							max :
							one ? index : 0;
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								( support.optDisabled ?
									!option.disabled : option.getAttribute( "disabled" ) === null ) &&
								( !option.parentNode.disabled ||
									!jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( jQuery.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout load resize scroll unload click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup error contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome, Safari
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://code.google.com/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Support: Android 2.3
	// Workaround failure to string-cast null input
	jQuery.parseJSON = function( data ) {
		return JSON.parse( data + "" );
	};
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE9
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rhash = /#.*$/,
		rts = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
			// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": jQuery.parseJSON,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// The jqXHR state
				state = 0,
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( state === 2 ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return state === 2 ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						var lname = name.toLowerCase();
						if ( !state ) {
							name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( !state ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( state < 2 ) {
								for ( code in map ) {
	
									// Lazy-add the new callback in a way that preserves old ones
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							} else {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR ).complete = completeDeferred.add;
			jqXHR.success = jqXHR.done;
			jqXHR.error = jqXHR.fail;
	
			// Remove hash character (#7531: and string promotion)
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" ).replace( rhash, "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE8-11+
				// IE throws exception if url is malformed, e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE8-11+
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( state === 2 ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			cacheURL = s.url;
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add anti-cache in url if needed
				if ( s.cache === false ) {
					s.url = rts.test( cacheURL ) ?
	
						// If there is already a '_' parameter, set its value
						cacheURL.replace( rts, "$1_=" + nonce++ ) :
	
						// Otherwise add one to the end
						cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
				}
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			for ( i in { success: 1, error: 1, complete: 1 } ) {
				jqXHR[ i ]( s[ i ] );
			}
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( state === 2 ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					state = 1;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Propagate exception as error if not done
					if ( state < 2 ) {
						done( -1, e );
	
					// Simply rethrow otherwise
					} else {
						throw e;
					}
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Called once
				if ( state === 2 ) {
					return;
				}
	
				// State is "done" now
				state = 2;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapAll( html.call( this, i ) );
				} );
			}
	
			if ( this[ 0 ] ) {
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function() {
			return this.parent().each( function() {
				if ( !jQuery.nodeName( this, "body" ) ) {
					jQuery( this ).replaceWith( this.childNodes );
				}
			} ).end();
		}
	} );
	
	
	jQuery.expr.filters.hidden = function( elem ) {
		return !jQuery.expr.filters.visible( elem );
	};
	jQuery.expr.filters.visible = function( elem ) {
	
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		// Use OR instead of AND as the element is not visible if either is true
		// See tickets #10406 and #13132
		return elem.offsetWidth > 0 || elem.offsetHeight > 0 || elem.getClientRects().length > 0;
	};
	
	
	
	
	var r20 = /%20/g,
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( jQuery.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, value ) {
	
				// If value is a function, invoke it and return its value
				value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
				s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
			};
	
		// Set traditional to true for jQuery <= 1.3.2 behavior.
		if ( traditional === undefined ) {
			traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
		}
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" ).replace( r20, "+" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				return val == null ?
					null :
					jQuery.isArray( val ) ?
						jQuery.map( val, function( val ) {
							return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
						} ) :
						{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE9
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE9
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE9
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;
	
		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	// Keep a copy of the old load method
	var _load = jQuery.fn.load;
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		if ( typeof url !== "string" && _load ) {
			return _load.apply( this, arguments );
		}
	
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = jQuery.trim( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	/**
	 * Gets a window from an element
	 */
	function getWindow( elem ) {
		return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
	}
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var docElem, win,
				elem = this[ 0 ],
				box = { top: 0, left: 0 },
				doc = elem && elem.ownerDocument;
	
			if ( !doc ) {
				return;
			}
	
			docElem = doc.documentElement;
	
			// Make sure it's not a disconnected DOM node
			if ( !jQuery.contains( docElem, elem ) ) {
				return box;
			}
	
			box = elem.getBoundingClientRect();
			win = getWindow( doc );
			return {
				top: box.top + win.pageYOffset - docElem.clientTop,
				left: box.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
				var win = getWindow( elem );
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari<7-8+, Chrome<37-44+
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
						// isn't a whole lot we can do. See pull request at this URL for discussion:
						// https://github.com/jquery/jquery/pull/764
						return elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable, null );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},
		size: function() {
			return this.length;
		}
	} );
	
	jQuery.fn.andSelf = jQuery.fn.addBack;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	return jQuery;
	}));


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Install plugin.
	 */
	
	function install(Vue) {
	
	    var _ = __webpack_require__(88);
	
	    _.config = Vue.config;
	    _.warning = Vue.util.warn;
	    _.nextTick = Vue.util.nextTick;
	
	    Vue.url = __webpack_require__(89);
	    Vue.http = __webpack_require__(95);
	    Vue.resource = __webpack_require__(110);
	    Vue.Promise = __webpack_require__(97);
	
	    Object.defineProperties(Vue.prototype, {
	
	        $url: {
	            get: function () {
	                return _.options(Vue.url, this, this.$options.url);
	            }
	        },
	
	        $http: {
	            get: function () {
	                return _.options(Vue.http, this, this.$options.http);
	            }
	        },
	
	        $resource: {
	            get: function () {
	                return Vue.resource.bind(this);
	            }
	        },
	
	        $promise: {
	            get: function () {
	                return function (executor) {
	                    return new Vue.Promise(executor, this);
	                }.bind(this);
	            }
	        }
	
	    });
	}
	
	if (window.Vue) {
	    Vue.use(install);
	}
	
	module.exports = install;


/***/ },
/* 88 */
/***/ function(module, exports) {

	/**
	 * Utility functions.
	 */
	
	var _ = exports, array = [], console = window.console;
	
	_.warn = function (msg) {
	    if (console && _.warning && (!_.config.silent || _.config.debug)) {
	        console.warn('[VueResource warn]: ' + msg);
	    }
	};
	
	_.error = function (msg) {
	    if (console) {
	        console.error(msg);
	    }
	};
	
	_.trim = function (str) {
	    return str.replace(/^\s*|\s*$/g, '');
	};
	
	_.toLower = function (str) {
	    return str ? str.toLowerCase() : '';
	};
	
	_.isArray = Array.isArray;
	
	_.isString = function (val) {
	    return typeof val === 'string';
	};
	
	_.isFunction = function (val) {
	    return typeof val === 'function';
	};
	
	_.isObject = function (obj) {
	    return obj !== null && typeof obj === 'object';
	};
	
	_.isPlainObject = function (obj) {
	    return _.isObject(obj) && Object.getPrototypeOf(obj) == Object.prototype;
	};
	
	_.options = function (fn, obj, options) {
	
	    options = options || {};
	
	    if (_.isFunction(options)) {
	        options = options.call(obj);
	    }
	
	    return _.merge(fn.bind({$vm: obj, $options: options}), fn, {$options: options});
	};
	
	_.each = function (obj, iterator) {
	
	    var i, key;
	
	    if (typeof obj.length == 'number') {
	        for (i = 0; i < obj.length; i++) {
	            iterator.call(obj[i], obj[i], i);
	        }
	    } else if (_.isObject(obj)) {
	        for (key in obj) {
	            if (obj.hasOwnProperty(key)) {
	                iterator.call(obj[key], obj[key], key);
	            }
	        }
	    }
	
	    return obj;
	};
	
	_.defaults = function (target, source) {
	
	    for (var key in source) {
	        if (target[key] === undefined) {
	            target[key] = source[key];
	        }
	    }
	
	    return target;
	};
	
	_.extend = function (target) {
	
	    var args = array.slice.call(arguments, 1);
	
	    args.forEach(function (arg) {
	        merge(target, arg);
	    });
	
	    return target;
	};
	
	_.merge = function (target) {
	
	    var args = array.slice.call(arguments, 1);
	
	    args.forEach(function (arg) {
	        merge(target, arg, true);
	    });
	
	    return target;
	};
	
	function merge(target, source, deep) {
	    for (var key in source) {
	        if (deep && (_.isPlainObject(source[key]) || _.isArray(source[key]))) {
	            if (_.isPlainObject(source[key]) && !_.isPlainObject(target[key])) {
	                target[key] = {};
	            }
	            if (_.isArray(source[key]) && !_.isArray(target[key])) {
	                target[key] = [];
	            }
	            merge(target[key], source[key], deep);
	        } else if (source[key] !== undefined) {
	            target[key] = source[key];
	        }
	    }
	}


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Service for URL templating.
	 */
	
	var _ = __webpack_require__(88);
	var ie = document.documentMode;
	var el = document.createElement('a');
	
	function Url(url, params) {
	
	    var options = url, transform;
	
	    if (_.isString(url)) {
	        options = {url: url, params: params};
	    }
	
	    options = _.merge({}, Url.options, this.$options, options);
	
	    Url.transforms.forEach(function (handler) {
	        transform = factory(handler, transform, this.$vm);
	    }, this);
	
	    return transform(options);
	};
	
	/**
	 * Url options.
	 */
	
	Url.options = {
	    url: '',
	    root: null,
	    params: {}
	};
	
	/**
	 * Url transforms.
	 */
	
	Url.transforms = [
	    __webpack_require__(90),
	    __webpack_require__(92),
	    __webpack_require__(93),
	    __webpack_require__(94)
	];
	
	/**
	 * Encodes a Url parameter string.
	 *
	 * @param {Object} obj
	 */
	
	Url.params = function (obj) {
	
	    var params = [], escape = encodeURIComponent;
	
	    params.add = function (key, value) {
	
	        if (_.isFunction(value)) {
	            value = value();
	        }
	
	        if (value === null) {
	            value = '';
	        }
	
	        this.push(escape(key) + '=' + escape(value));
	    };
	
	    serialize(params, obj);
	
	    return params.join('&').replace(/%20/g, '+');
	};
	
	/**
	 * Parse a URL and return its components.
	 *
	 * @param {String} url
	 */
	
	Url.parse = function (url) {
	
	    if (ie) {
	        el.href = url;
	        url = el.href;
	    }
	
	    el.href = url;
	
	    return {
	        href: el.href,
	        protocol: el.protocol ? el.protocol.replace(/:$/, '') : '',
	        port: el.port,
	        host: el.host,
	        hostname: el.hostname,
	        pathname: el.pathname.charAt(0) === '/' ? el.pathname : '/' + el.pathname,
	        search: el.search ? el.search.replace(/^\?/, '') : '',
	        hash: el.hash ? el.hash.replace(/^#/, '') : ''
	    };
	};
	
	function factory(handler, next, vm) {
	    return function (options) {
	        return handler.call(vm, options, next);
	    };
	}
	
	function serialize(params, obj, scope) {
	
	    var array = _.isArray(obj), plain = _.isPlainObject(obj), hash;
	
	    _.each(obj, function (value, key) {
	
	        hash = _.isObject(value) || _.isArray(value);
	
	        if (scope) {
	            key = scope + '[' + (plain || hash ? key : '') + ']';
	        }
	
	        if (!scope && array) {
	            params.add(value.name, value.value);
	        } else if (hash) {
	            serialize(params, value, key);
	        } else {
	            params.add(key, value);
	        }
	    });
	}
	
	module.exports = _.url = Url;


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * URL Template (RFC 6570) Transform.
	 */
	
	var UrlTemplate = __webpack_require__(91);
	
	module.exports = function (options) {
	
	    var variables = [], url = UrlTemplate.expand(options.url, options.params, variables);
	
	    variables.forEach(function (key) {
	        delete options.params[key];
	    });
	
	    return url;
	};


/***/ },
/* 91 */
/***/ function(module, exports) {

	/**
	 * URL Template v2.0.6 (https://github.com/bramstein/url-template)
	 */
	
	exports.expand = function (url, params, variables) {
	
	    var tmpl = this.parse(url), expanded = tmpl.expand(params);
	
	    if (variables) {
	        variables.push.apply(variables, tmpl.vars);
	    }
	
	    return expanded;
	};
	
	exports.parse = function (template) {
	
	    var operators = ['+', '#', '.', '/', ';', '?', '&'], variables = [];
	
	    return {
	        vars: variables,
	        expand: function (context) {
	            return template.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (_, expression, literal) {
	                if (expression) {
	
	                    var operator = null, values = [];
	
	                    if (operators.indexOf(expression.charAt(0)) !== -1) {
	                        operator = expression.charAt(0);
	                        expression = expression.substr(1);
	                    }
	
	                    expression.split(/,/g).forEach(function (variable) {
	                        var tmp = /([^:\*]*)(?::(\d+)|(\*))?/.exec(variable);
	                        values.push.apply(values, exports.getValues(context, operator, tmp[1], tmp[2] || tmp[3]));
	                        variables.push(tmp[1]);
	                    });
	
	                    if (operator && operator !== '+') {
	
	                        var separator = ',';
	
	                        if (operator === '?') {
	                            separator = '&';
	                        } else if (operator !== '#') {
	                            separator = operator;
	                        }
	
	                        return (values.length !== 0 ? operator : '') + values.join(separator);
	                    } else {
	                        return values.join(',');
	                    }
	
	                } else {
	                    return exports.encodeReserved(literal);
	                }
	            });
	        }
	    };
	};
	
	exports.getValues = function (context, operator, key, modifier) {
	
	    var value = context[key], result = [];
	
	    if (this.isDefined(value) && value !== '') {
	        if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
	            value = value.toString();
	
	            if (modifier && modifier !== '*') {
	                value = value.substring(0, parseInt(modifier, 10));
	            }
	
	            result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));
	        } else {
	            if (modifier === '*') {
	                if (Array.isArray(value)) {
	                    value.filter(this.isDefined).forEach(function (value) {
	                        result.push(this.encodeValue(operator, value, this.isKeyOperator(operator) ? key : null));
	                    }, this);
	                } else {
	                    Object.keys(value).forEach(function (k) {
	                        if (this.isDefined(value[k])) {
	                            result.push(this.encodeValue(operator, value[k], k));
	                        }
	                    }, this);
	                }
	            } else {
	                var tmp = [];
	
	                if (Array.isArray(value)) {
	                    value.filter(this.isDefined).forEach(function (value) {
	                        tmp.push(this.encodeValue(operator, value));
	                    }, this);
	                } else {
	                    Object.keys(value).forEach(function (k) {
	                        if (this.isDefined(value[k])) {
	                            tmp.push(encodeURIComponent(k));
	                            tmp.push(this.encodeValue(operator, value[k].toString()));
	                        }
	                    }, this);
	                }
	
	                if (this.isKeyOperator(operator)) {
	                    result.push(encodeURIComponent(key) + '=' + tmp.join(','));
	                } else if (tmp.length !== 0) {
	                    result.push(tmp.join(','));
	                }
	            }
	        }
	    } else {
	        if (operator === ';') {
	            result.push(encodeURIComponent(key));
	        } else if (value === '' && (operator === '&' || operator === '?')) {
	            result.push(encodeURIComponent(key) + '=');
	        } else if (value === '') {
	            result.push('');
	        }
	    }
	
	    return result;
	};
	
	exports.isDefined = function (value) {
	    return value !== undefined && value !== null;
	};
	
	exports.isKeyOperator = function (operator) {
	    return operator === ';' || operator === '&' || operator === '?';
	};
	
	exports.encodeValue = function (operator, value, key) {
	
	    value = (operator === '+' || operator === '#') ? this.encodeReserved(value) : encodeURIComponent(value);
	
	    if (key) {
	        return encodeURIComponent(key) + '=' + value;
	    } else {
	        return value;
	    }
	};
	
	exports.encodeReserved = function (str) {
	    return str.split(/(%[0-9A-Fa-f]{2})/g).map(function (part) {
	        if (!/%[0-9A-Fa-f]/.test(part)) {
	            part = encodeURI(part);
	        }
	        return part;
	    }).join('');
	};


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Legacy Transform.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = function (options, next) {
	
	    var variables = [], url = next(options);
	
	    url = url.replace(/(\/?):([a-z]\w*)/gi, function (match, slash, name) {
	
	        _.warn('The `:' + name + '` parameter syntax has been deprecated. Use the `{' + name + '}` syntax instead.');
	
	        if (options.params[name]) {
	            variables.push(name);
	            return slash + encodeUriSegment(options.params[name]);
	        }
	
	        return '';
	    });
	
	    variables.forEach(function (key) {
	        delete options.params[key];
	    });
	
	    return url;
	};
	
	function encodeUriSegment(value) {
	
	    return encodeUriQuery(value, true).
	        replace(/%26/gi, '&').
	        replace(/%3D/gi, '=').
	        replace(/%2B/gi, '+');
	}
	
	function encodeUriQuery(value, spaces) {
	
	    return encodeURIComponent(value).
	        replace(/%40/gi, '@').
	        replace(/%3A/gi, ':').
	        replace(/%24/g, '$').
	        replace(/%2C/gi, ',').
	        replace(/%20/g, (spaces ? '%20' : '+'));
	}


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Query Parameter Transform.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = function (options, next) {
	
	    var urlParams = Object.keys(_.url.options.params), query = {}, url = next(options);
	
	   _.each(options.params, function (value, key) {
	        if (urlParams.indexOf(key) === -1) {
	            query[key] = value;
	        }
	    });
	
	    query = _.url.params(query);
	
	    if (query) {
	        url += (url.indexOf('?') == -1 ? '?' : '&') + query;
	    }
	
	    return url;
	};


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Root Prefix Transform.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = function (options, next) {
	
	    var url = next(options);
	
	    if (_.isString(options.root) && !url.match(/^(https?:)?\//)) {
	        url = options.root + '/' + url;
	    }
	
	    return url;
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Service for sending network requests.
	 */
	
	var _ = __webpack_require__(88);
	var Client = __webpack_require__(96);
	var Promise = __webpack_require__(97);
	var interceptor = __webpack_require__(100);
	var jsonType = {'Content-Type': 'application/json'};
	
	function Http(url, options) {
	
	    var client = Client, request, promise;
	
	    Http.interceptors.forEach(function (handler) {
	        client = interceptor(handler, this.$vm)(client);
	    }, this);
	
	    options = _.isObject(url) ? url : _.extend({url: url}, options);
	    request = _.merge({}, Http.options, this.$options, options);
	    promise = client(request).bind(this.$vm).then(function (response) {
	
	        return response.ok ? response : Promise.reject(response);
	
	    }, function (response) {
	
	        if (response instanceof Error) {
	            _.error(response);
	        }
	
	        return Promise.reject(response);
	    });
	
	    if (request.success) {
	        promise.success(request.success);
	    }
	
	    if (request.error) {
	        promise.error(request.error);
	    }
	
	    return promise;
	}
	
	Http.options = {
	    method: 'get',
	    data: '',
	    params: {},
	    headers: {},
	    xhr: null,
	    jsonp: 'callback',
	    beforeSend: null,
	    crossOrigin: null,
	    emulateHTTP: false,
	    emulateJSON: false,
	    timeout: 0
	};
	
	Http.interceptors = [
	    __webpack_require__(101),
	    __webpack_require__(102),
	    __webpack_require__(103),
	    __webpack_require__(105),
	    __webpack_require__(106),
	    __webpack_require__(107),
	    __webpack_require__(108)
	];
	
	Http.headers = {
	    put: jsonType,
	    post: jsonType,
	    patch: jsonType,
	    delete: jsonType,
	    common: {'Accept': 'application/json, text/plain, */*'},
	    custom: {'X-Requested-With': 'XMLHttpRequest'}
	};
	
	['get', 'put', 'post', 'patch', 'delete', 'jsonp'].forEach(function (method) {
	
	    Http[method] = function (url, data, success, options) {
	
	        if (_.isFunction(data)) {
	            options = success;
	            success = data;
	            data = undefined;
	        }
	
	        if (_.isObject(success)) {
	            options = success;
	            success = undefined;
	        }
	
	        return this(url, _.extend({method: method, data: data, success: success}, options));
	    };
	});
	
	module.exports = _.http = Http;


/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Base client.
	 */
	
	var _ = __webpack_require__(88);
	var Promise = __webpack_require__(97);
	var xhrClient = __webpack_require__(99);
	
	module.exports = function (request) {
	
	    var response = (request.client || xhrClient)(request);
	
	    return Promise.resolve(response).then(function (response) {
	
	        if (response.headers) {
	
	            var headers = parseHeaders(response.headers);
	
	            response.headers = function (name) {
	
	                if (name) {
	                    return headers[_.toLower(name)];
	                }
	
	                return headers;
	            };
	
	        }
	
	        response.ok = response.status >= 200 && response.status < 300;
	
	        return response;
	    });
	
	};
	
	function parseHeaders(str) {
	
	    var headers = {}, value, name, i;
	
	    if (_.isString(str)) {
	        _.each(str.split('\n'), function (row) {
	
	            i = row.indexOf(':');
	            name = _.trim(_.toLower(row.slice(0, i)));
	            value = _.trim(row.slice(i + 1));
	
	            if (headers[name]) {
	
	                if (_.isArray(headers[name])) {
	                    headers[name].push(value);
	                } else {
	                    headers[name] = [headers[name], value];
	                }
	
	            } else {
	
	                headers[name] = value;
	            }
	
	        });
	    }
	
	    return headers;
	}


/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Promise adapter.
	 */
	
	var _ = __webpack_require__(88);
	var PromiseObj = window.Promise || __webpack_require__(98);
	
	function Promise(executor, context) {
	
	    if (executor instanceof PromiseObj) {
	        this.promise = executor;
	    } else {
	        this.promise = new PromiseObj(executor.bind(context));
	    }
	
	    this.context = context;
	}
	
	Promise.all = function (iterable, context) {
	    return new Promise(PromiseObj.all(iterable), context);
	};
	
	Promise.resolve = function (value, context) {
	    return new Promise(PromiseObj.resolve(value), context);
	};
	
	Promise.reject = function (reason, context) {
	    return new Promise(PromiseObj.reject(reason), context);
	};
	
	Promise.race = function (iterable, context) {
	    return new Promise(PromiseObj.race(iterable), context);
	};
	
	var p = Promise.prototype;
	
	p.bind = function (context) {
	    this.context = context;
	    return this;
	};
	
	p.then = function (fulfilled, rejected) {
	
	    if (fulfilled && fulfilled.bind && this.context) {
	        fulfilled = fulfilled.bind(this.context);
	    }
	
	    if (rejected && rejected.bind && this.context) {
	        rejected = rejected.bind(this.context);
	    }
	
	    this.promise = this.promise.then(fulfilled, rejected);
	
	    return this;
	};
	
	p.catch = function (rejected) {
	
	    if (rejected && rejected.bind && this.context) {
	        rejected = rejected.bind(this.context);
	    }
	
	    this.promise = this.promise.catch(rejected);
	
	    return this;
	};
	
	p.finally = function (callback) {
	
	    return this.then(function (value) {
	            callback.call(this);
	            return value;
	        }, function (reason) {
	            callback.call(this);
	            return PromiseObj.reject(reason);
	        }
	    );
	};
	
	p.success = function (callback) {
	
	    _.warn('The `success` method has been deprecated. Use the `then` method instead.');
	
	    return this.then(function (response) {
	        return callback.call(this, response.data, response.status, response) || response;
	    });
	};
	
	p.error = function (callback) {
	
	    _.warn('The `error` method has been deprecated. Use the `catch` method instead.');
	
	    return this.catch(function (response) {
	        return callback.call(this, response.data, response.status, response) || response;
	    });
	};
	
	p.always = function (callback) {
	
	    _.warn('The `always` method has been deprecated. Use the `finally` method instead.');
	
	    var cb = function (response) {
	        return callback.call(this, response.data, response.status, response) || response;
	    };
	
	    return this.then(cb, cb);
	};
	
	module.exports = Promise;


/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Promises/A+ polyfill v1.1.4 (https://github.com/bramstein/promis)
	 */
	
	var _ = __webpack_require__(88);
	
	var RESOLVED = 0;
	var REJECTED = 1;
	var PENDING  = 2;
	
	function Promise(executor) {
	
	    this.state = PENDING;
	    this.value = undefined;
	    this.deferred = [];
	
	    var promise = this;
	
	    try {
	        executor(function (x) {
	            promise.resolve(x);
	        }, function (r) {
	            promise.reject(r);
	        });
	    } catch (e) {
	        promise.reject(e);
	    }
	}
	
	Promise.reject = function (r) {
	    return new Promise(function (resolve, reject) {
	        reject(r);
	    });
	};
	
	Promise.resolve = function (x) {
	    return new Promise(function (resolve, reject) {
	        resolve(x);
	    });
	};
	
	Promise.all = function all(iterable) {
	    return new Promise(function (resolve, reject) {
	        var count = 0, result = [];
	
	        if (iterable.length === 0) {
	            resolve(result);
	        }
	
	        function resolver(i) {
	            return function (x) {
	                result[i] = x;
	                count += 1;
	
	                if (count === iterable.length) {
	                    resolve(result);
	                }
	            };
	        }
	
	        for (var i = 0; i < iterable.length; i += 1) {
	            Promise.resolve(iterable[i]).then(resolver(i), reject);
	        }
	    });
	};
	
	Promise.race = function race(iterable) {
	    return new Promise(function (resolve, reject) {
	        for (var i = 0; i < iterable.length; i += 1) {
	            Promise.resolve(iterable[i]).then(resolve, reject);
	        }
	    });
	};
	
	var p = Promise.prototype;
	
	p.resolve = function resolve(x) {
	    var promise = this;
	
	    if (promise.state === PENDING) {
	        if (x === promise) {
	            throw new TypeError('Promise settled with itself.');
	        }
	
	        var called = false;
	
	        try {
	            var then = x && x['then'];
	
	            if (x !== null && typeof x === 'object' && typeof then === 'function') {
	                then.call(x, function (x) {
	                    if (!called) {
	                        promise.resolve(x);
	                    }
	                    called = true;
	
	                }, function (r) {
	                    if (!called) {
	                        promise.reject(r);
	                    }
	                    called = true;
	                });
	                return;
	            }
	        } catch (e) {
	            if (!called) {
	                promise.reject(e);
	            }
	            return;
	        }
	
	        promise.state = RESOLVED;
	        promise.value = x;
	        promise.notify();
	    }
	};
	
	p.reject = function reject(reason) {
	    var promise = this;
	
	    if (promise.state === PENDING) {
	        if (reason === promise) {
	            throw new TypeError('Promise settled with itself.');
	        }
	
	        promise.state = REJECTED;
	        promise.value = reason;
	        promise.notify();
	    }
	};
	
	p.notify = function notify() {
	    var promise = this;
	
	    _.nextTick(function () {
	        if (promise.state !== PENDING) {
	            while (promise.deferred.length) {
	                var deferred = promise.deferred.shift(),
	                    onResolved = deferred[0],
	                    onRejected = deferred[1],
	                    resolve = deferred[2],
	                    reject = deferred[3];
	
	                try {
	                    if (promise.state === RESOLVED) {
	                        if (typeof onResolved === 'function') {
	                            resolve(onResolved.call(undefined, promise.value));
	                        } else {
	                            resolve(promise.value);
	                        }
	                    } else if (promise.state === REJECTED) {
	                        if (typeof onRejected === 'function') {
	                            resolve(onRejected.call(undefined, promise.value));
	                        } else {
	                            reject(promise.value);
	                        }
	                    }
	                } catch (e) {
	                    reject(e);
	                }
	            }
	        }
	    });
	};
	
	p.then = function then(onResolved, onRejected) {
	    var promise = this;
	
	    return new Promise(function (resolve, reject) {
	        promise.deferred.push([onResolved, onRejected, resolve, reject]);
	        promise.notify();
	    });
	};
	
	p.catch = function (onRejected) {
	    return this.then(undefined, onRejected);
	};
	
	module.exports = Promise;


/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * XMLHttp client.
	 */
	
	var _ = __webpack_require__(88);
	var Promise = __webpack_require__(97);
	
	module.exports = function (request) {
	    return new Promise(function (resolve) {
	
	        var xhr = new XMLHttpRequest(), response = {request: request}, handler;
	
	        request.cancel = function () {
	            xhr.abort();
	        };
	
	        xhr.open(request.method, _.url(request), true);
	
	        if (_.isPlainObject(request.xhr)) {
	            _.extend(xhr, request.xhr);
	        }
	
	        _.each(request.headers || {}, function (value, header) {
	            xhr.setRequestHeader(header, value);
	        });
	
	        handler = function (event) {
	
	            response.data = xhr.responseText;
	            response.status = xhr.status;
	            response.statusText = xhr.statusText;
	            response.headers = xhr.getAllResponseHeaders();
	
	            resolve(response);
	        };
	
	        xhr.onload = handler;
	        xhr.onabort = handler;
	        xhr.onerror = handler;
	
	        xhr.send(request.data);
	    });
	};


/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Interceptor factory.
	 */
	
	var _ = __webpack_require__(88);
	var Promise = __webpack_require__(97);
	
	module.exports = function (handler, vm) {
	
	    return function (client) {
	
	        if (_.isFunction(handler)) {
	            handler = handler.call(vm, Promise);
	        }
	
	        return function (request) {
	
	            if (_.isFunction(handler.request)) {
	                request = handler.request.call(vm, request);
	            }
	
	            return when(request, function (request) {
	                return when(client(request), function (response) {
	
	                    if (_.isFunction(handler.response)) {
	                        response = handler.response.call(vm, response);
	                    }
	
	                    return response;
	                });
	            });
	        };
	    };
	};
	
	function when(value, fulfilled, rejected) {
	
	    var promise = Promise.resolve(value);
	
	    if (arguments.length < 2) {
	        return promise;
	    }
	
	    return promise.then(fulfilled, rejected);
	}


/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Before Interceptor.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = {
	
	    request: function (request) {
	
	        if (_.isFunction(request.beforeSend)) {
	            request.beforeSend.call(this, request);
	        }
	
	        return request;
	    }
	
	};


/***/ },
/* 102 */
/***/ function(module, exports) {

	/**
	 * Timeout Interceptor.
	 */
	
	module.exports = function () {
	
	    var timeout;
	
	    return {
	
	        request: function (request) {
	
	            if (request.timeout) {
	                timeout = setTimeout(function () {
	                    request.cancel();
	                }, request.timeout);
	            }
	
	            return request;
	        },
	
	        response: function (response) {
	
	            clearTimeout(timeout);
	
	            return response;
	        }
	
	    };
	};


/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * JSONP Interceptor.
	 */
	
	var jsonpClient = __webpack_require__(104);
	
	module.exports = {
	
	    request: function (request) {
	
	        if (request.method == 'JSONP') {
	            request.client = jsonpClient;
	        }
	
	        return request;
	    }
	
	};


/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * JSONP client.
	 */
	
	var _ = __webpack_require__(88);
	var Promise = __webpack_require__(97);
	
	module.exports = function (request) {
	    return new Promise(function (resolve) {
	
	        var callback = '_jsonp' + Math.random().toString(36).substr(2), response = {request: request, data: null}, handler, script;
	
	        request.params[request.jsonp] = callback;
	        request.cancel = function () {
	            handler({type: 'cancel'});
	        };
	
	        script = document.createElement('script');
	        script.src = _.url(request);
	        script.type = 'text/javascript';
	        script.async = true;
	
	        window[callback] = function (data) {
	            response.data = data;
	        };
	
	        handler = function (event) {
	
	            if (event.type === 'load' && response.data !== null) {
	                response.status = 200;
	            } else if (event.type === 'error') {
	                response.status = 404;
	            } else {
	                response.status = 0;
	            }
	
	            resolve(response);
	
	            delete window[callback];
	            document.body.removeChild(script);
	        };
	
	        script.onload = handler;
	        script.onerror = handler;
	
	        document.body.appendChild(script);
	    });
	};


/***/ },
/* 105 */
/***/ function(module, exports) {

	/**
	 * HTTP method override Interceptor.
	 */
	
	module.exports = {
	
	    request: function (request) {
	
	        if (request.emulateHTTP && /^(PUT|PATCH|DELETE)$/i.test(request.method)) {
	            request.headers['X-HTTP-Method-Override'] = request.method;
	            request.method = 'POST';
	        }
	
	        return request;
	    }
	
	};


/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Mime Interceptor.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = {
	
	    request: function (request) {
	
	        if (request.emulateJSON && _.isPlainObject(request.data)) {
	            request.headers['Content-Type'] = 'application/x-www-form-urlencoded';
	            request.data = _.url.params(request.data);
	        }
	
	        if (_.isObject(request.data) && /FormData/i.test(request.data.toString())) {
	            delete request.headers['Content-Type'];
	        }
	
	        if (_.isPlainObject(request.data)) {
	            request.data = JSON.stringify(request.data);
	        }
	
	        return request;
	    },
	
	    response: function (response) {
	
	        try {
	            response.data = JSON.parse(response.data);
	        } catch (e) {}
	
	        return response;
	    }
	
	};


/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Header Interceptor.
	 */
	
	var _ = __webpack_require__(88);
	
	module.exports = {
	
	    request: function (request) {
	
	        request.method = request.method.toUpperCase();
	        request.headers = _.extend({}, _.http.headers.common,
	            !request.crossOrigin ? _.http.headers.custom : {},
	            _.http.headers[request.method.toLowerCase()],
	            request.headers
	        );
	
	        if (_.isPlainObject(request.data) && /^(GET|JSONP)$/i.test(request.method)) {
	            _.extend(request.params, request.data);
	            delete request.data;
	        }
	
	        return request;
	    }
	
	};


/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * CORS Interceptor.
	 */
	
	var _ = __webpack_require__(88);
	var xdrClient = __webpack_require__(109);
	var xhrCors = 'withCredentials' in new XMLHttpRequest();
	var originUrl = _.url.parse(location.href);
	
	module.exports = {
	
	    request: function (request) {
	
	        if (request.crossOrigin === null) {
	            request.crossOrigin = crossOrigin(request);
	        }
	
	        if (request.crossOrigin) {
	
	            if (!xhrCors) {
	                request.client = xdrClient;
	            }
	
	            request.emulateHTTP = false;
	        }
	
	        return request;
	    }
	
	};
	
	function crossOrigin(request) {
	
	    var requestUrl = _.url.parse(_.url(request));
	
	    return (requestUrl.protocol !== originUrl.protocol || requestUrl.host !== originUrl.host);
	}


/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * XDomain client (Internet Explorer).
	 */
	
	var _ = __webpack_require__(88);
	var Promise = __webpack_require__(97);
	
	module.exports = function (request) {
	    return new Promise(function (resolve) {
	
	        var xdr = new XDomainRequest(), response = {request: request}, handler;
	
	        request.cancel = function () {
	            xdr.abort();
	        };
	
	        xdr.open(request.method, _.url(request), true);
	
	        handler = function (event) {
	
	            response.data = xdr.responseText;
	            response.status = xdr.status;
	            response.statusText = xdr.statusText;
	
	            resolve(response);
	        };
	
	        xdr.timeout = 0;
	        xdr.onload = handler;
	        xdr.onabort = handler;
	        xdr.onerror = handler;
	        xdr.ontimeout = function () {};
	        xdr.onprogress = function () {};
	
	        xdr.send(request.data);
	    });
	};


/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Service for interacting with RESTful services.
	 */
	
	var _ = __webpack_require__(88);
	
	function Resource(url, params, actions, options) {
	
	    var self = this, resource = {};
	
	    actions = _.extend({},
	        Resource.actions,
	        actions
	    );
	
	    _.each(actions, function (action, name) {
	
	        action = _.merge({url: url, params: params || {}}, options, action);
	
	        resource[name] = function () {
	            return (self.$http || _.http)(opts(action, arguments));
	        };
	    });
	
	    return resource;
	}
	
	function opts(action, args) {
	
	    var options = _.extend({}, action), params = {}, data, success, error;
	
	    switch (args.length) {
	
	        case 4:
	
	            error = args[3];
	            success = args[2];
	
	        case 3:
	        case 2:
	
	            if (_.isFunction(args[1])) {
	
	                if (_.isFunction(args[0])) {
	
	                    success = args[0];
	                    error = args[1];
	
	                    break;
	                }
	
	                success = args[1];
	                error = args[2];
	
	            } else {
	
	                params = args[0];
	                data = args[1];
	                success = args[2];
	
	                break;
	            }
	
	        case 1:
	
	            if (_.isFunction(args[0])) {
	                success = args[0];
	            } else if (/^(POST|PUT|PATCH)$/i.test(options.method)) {
	                data = args[0];
	            } else {
	                params = args[0];
	            }
	
	            break;
	
	        case 0:
	
	            break;
	
	        default:
	
	            throw 'Expected up to 4 arguments [params, data, success, error], got ' + args.length + ' arguments';
	    }
	
	    options.data = data;
	    options.params = _.extend({}, options.params, params);
	
	    if (success) {
	        options.success = success;
	    }
	
	    if (error) {
	        options.error = error;
	    }
	
	    return options;
	}
	
	Resource.actions = {
	
	    get: {method: 'GET'},
	    save: {method: 'POST'},
	    query: {method: 'GET'},
	    update: {method: 'PUT'},
	    remove: {method: 'DELETE'},
	    delete: {method: 'DELETE'}
	
	};
	
	module.exports = _.resource = Resource;


/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(112);
	__webpack_require__(121);


/***/ },
/* 112 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(113);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(120)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./../less-loader/index.js!./bootstrap-styles.loader.js!./bootstrap.config.js", function() {
				var newContent = require("!!./../css-loader/index.js!./../less-loader/index.js!./bootstrap-styles.loader.js!./bootstrap.config.js");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */\nhtml {\n  font-family: sans-serif;\n  -ms-text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n}\nbody {\n  margin: 0;\n}\narticle,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nmenu,\nnav,\nsection,\nsummary {\n  display: block;\n}\naudio,\ncanvas,\nprogress,\nvideo {\n  display: inline-block;\n  vertical-align: baseline;\n}\naudio:not([controls]) {\n  display: none;\n  height: 0;\n}\n[hidden],\ntemplate {\n  display: none;\n}\na {\n  background-color: transparent;\n}\na:active,\na:hover {\n  outline: 0;\n}\nabbr[title] {\n  border-bottom: 1px dotted;\n}\nb,\nstrong {\n  font-weight: bold;\n}\ndfn {\n  font-style: italic;\n}\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\nmark {\n  background: #ff0;\n  color: #000;\n}\nsmall {\n  font-size: 80%;\n}\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\nsup {\n  top: -0.5em;\n}\nsub {\n  bottom: -0.25em;\n}\nimg {\n  border: 0;\n}\nsvg:not(:root) {\n  overflow: hidden;\n}\nfigure {\n  margin: 1em 40px;\n}\nhr {\n  box-sizing: content-box;\n  height: 0;\n}\npre {\n  overflow: auto;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace, monospace;\n  font-size: 1em;\n}\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  color: inherit;\n  font: inherit;\n  margin: 0;\n}\nbutton {\n  overflow: visible;\n}\nbutton,\nselect {\n  text-transform: none;\n}\nbutton,\nhtml input[type=\"button\"],\ninput[type=\"reset\"],\ninput[type=\"submit\"] {\n  -webkit-appearance: button;\n  cursor: pointer;\n}\nbutton[disabled],\nhtml input[disabled] {\n  cursor: default;\n}\nbutton::-moz-focus-inner,\ninput::-moz-focus-inner {\n  border: 0;\n  padding: 0;\n}\ninput {\n  line-height: normal;\n}\ninput[type=\"checkbox\"],\ninput[type=\"radio\"] {\n  box-sizing: border-box;\n  padding: 0;\n}\ninput[type=\"number\"]::-webkit-inner-spin-button,\ninput[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: textfield;\n  box-sizing: content-box;\n}\ninput[type=\"search\"]::-webkit-search-cancel-button,\ninput[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\nfieldset {\n  border: 1px solid #c0c0c0;\n  margin: 0 2px;\n  padding: 0.35em 0.625em 0.75em;\n}\nlegend {\n  border: 0;\n  padding: 0;\n}\ntextarea {\n  overflow: auto;\n}\noptgroup {\n  font-weight: bold;\n}\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\ntd,\nth {\n  padding: 0;\n}\n/*! Source: https://github.com/h5bp/html5-boilerplate/blob/master/src/css/main.css */\n@media print {\n  *,\n  *:before,\n  *:after {\n    background: transparent !important;\n    color: #000 !important;\n    box-shadow: none !important;\n    text-shadow: none !important;\n  }\n  a,\n  a:visited {\n    text-decoration: underline;\n  }\n  a[href]:after {\n    content: \" (\" attr(href) \")\";\n  }\n  abbr[title]:after {\n    content: \" (\" attr(title) \")\";\n  }\n  a[href^=\"#\"]:after,\n  a[href^=\"javascript:\"]:after {\n    content: \"\";\n  }\n  pre,\n  blockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n  }\n  thead {\n    display: table-header-group;\n  }\n  tr,\n  img {\n    page-break-inside: avoid;\n  }\n  img {\n    max-width: 100% !important;\n  }\n  p,\n  h2,\n  h3 {\n    orphans: 3;\n    widows: 3;\n  }\n  h2,\n  h3 {\n    page-break-after: avoid;\n  }\n  .navbar {\n    display: none;\n  }\n  .btn > .caret,\n  .dropup > .btn > .caret {\n    border-top-color: #000 !important;\n  }\n  .label {\n    border: 1px solid #000;\n  }\n  .table {\n    border-collapse: collapse !important;\n  }\n  .table td,\n  .table th {\n    background-color: #fff !important;\n  }\n  .table-bordered th,\n  .table-bordered td {\n    border: 1px solid #ddd !important;\n  }\n}\n* {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\n*:before,\n*:after {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\nhtml {\n  font-size: 10px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n}\nbody {\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #333333;\n  background-color: #fff;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\na {\n  color: #337ab7;\n  text-decoration: none;\n}\na:hover,\na:focus {\n  color: #23527c;\n  text-decoration: underline;\n}\na:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\nfigure {\n  margin: 0;\n}\nimg {\n  vertical-align: middle;\n}\n.img-responsive,\n.thumbnail > img,\n.thumbnail a > img,\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  display: block;\n  max-width: 100%;\n  height: auto;\n}\n.img-rounded {\n  border-radius: 6px;\n}\n.img-thumbnail {\n  padding: 4px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n  display: inline-block;\n  max-width: 100%;\n  height: auto;\n}\n.img-circle {\n  border-radius: 50%;\n}\nhr {\n  margin-top: 20px;\n  margin-bottom: 20px;\n  border: 0;\n  border-top: 1px solid #eeeeee;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n[role=\"button\"] {\n  cursor: pointer;\n}\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\n.h1,\n.h2,\n.h3,\n.h4,\n.h5,\n.h6 {\n  font-family: inherit;\n  font-weight: 500;\n  line-height: 1.1;\n  color: inherit;\n}\nh1 small,\nh2 small,\nh3 small,\nh4 small,\nh5 small,\nh6 small,\n.h1 small,\n.h2 small,\n.h3 small,\n.h4 small,\n.h5 small,\n.h6 small,\nh1 .small,\nh2 .small,\nh3 .small,\nh4 .small,\nh5 .small,\nh6 .small,\n.h1 .small,\n.h2 .small,\n.h3 .small,\n.h4 .small,\n.h5 .small,\n.h6 .small {\n  font-weight: normal;\n  line-height: 1;\n  color: #777777;\n}\nh1,\n.h1,\nh2,\n.h2,\nh3,\n.h3 {\n  margin-top: 20px;\n  margin-bottom: 10px;\n}\nh1 small,\n.h1 small,\nh2 small,\n.h2 small,\nh3 small,\n.h3 small,\nh1 .small,\n.h1 .small,\nh2 .small,\n.h2 .small,\nh3 .small,\n.h3 .small {\n  font-size: 65%;\n}\nh4,\n.h4,\nh5,\n.h5,\nh6,\n.h6 {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\nh4 small,\n.h4 small,\nh5 small,\n.h5 small,\nh6 small,\n.h6 small,\nh4 .small,\n.h4 .small,\nh5 .small,\n.h5 .small,\nh6 .small,\n.h6 .small {\n  font-size: 75%;\n}\nh1,\n.h1 {\n  font-size: 36px;\n}\nh2,\n.h2 {\n  font-size: 30px;\n}\nh3,\n.h3 {\n  font-size: 24px;\n}\nh4,\n.h4 {\n  font-size: 18px;\n}\nh5,\n.h5 {\n  font-size: 14px;\n}\nh6,\n.h6 {\n  font-size: 12px;\n}\np {\n  margin: 0 0 10px;\n}\n.lead {\n  margin-bottom: 20px;\n  font-size: 16px;\n  font-weight: 300;\n  line-height: 1.4;\n}\n@media (min-width: 768px) {\n  .lead {\n    font-size: 21px;\n  }\n}\nsmall,\n.small {\n  font-size: 85%;\n}\nmark,\n.mark {\n  background-color: #fcf8e3;\n  padding: .2em;\n}\n.text-left {\n  text-align: left;\n}\n.text-right {\n  text-align: right;\n}\n.text-center {\n  text-align: center;\n}\n.text-justify {\n  text-align: justify;\n}\n.text-nowrap {\n  white-space: nowrap;\n}\n.text-lowercase {\n  text-transform: lowercase;\n}\n.text-uppercase {\n  text-transform: uppercase;\n}\n.text-capitalize {\n  text-transform: capitalize;\n}\n.text-muted {\n  color: #777777;\n}\n.text-primary {\n  color: #337ab7;\n}\na.text-primary:hover,\na.text-primary:focus {\n  color: #286090;\n}\n.text-success {\n  color: #3c763d;\n}\na.text-success:hover,\na.text-success:focus {\n  color: #2b542c;\n}\n.text-info {\n  color: #31708f;\n}\na.text-info:hover,\na.text-info:focus {\n  color: #245269;\n}\n.text-warning {\n  color: #8a6d3b;\n}\na.text-warning:hover,\na.text-warning:focus {\n  color: #66512c;\n}\n.text-danger {\n  color: #a94442;\n}\na.text-danger:hover,\na.text-danger:focus {\n  color: #843534;\n}\n.bg-primary {\n  color: #fff;\n  background-color: #337ab7;\n}\na.bg-primary:hover,\na.bg-primary:focus {\n  background-color: #286090;\n}\n.bg-success {\n  background-color: #dff0d8;\n}\na.bg-success:hover,\na.bg-success:focus {\n  background-color: #c1e2b3;\n}\n.bg-info {\n  background-color: #d9edf7;\n}\na.bg-info:hover,\na.bg-info:focus {\n  background-color: #afd9ee;\n}\n.bg-warning {\n  background-color: #fcf8e3;\n}\na.bg-warning:hover,\na.bg-warning:focus {\n  background-color: #f7ecb5;\n}\n.bg-danger {\n  background-color: #f2dede;\n}\na.bg-danger:hover,\na.bg-danger:focus {\n  background-color: #e4b9b9;\n}\n.page-header {\n  padding-bottom: 9px;\n  margin: 40px 0 20px;\n  border-bottom: 1px solid #eeeeee;\n}\nul,\nol {\n  margin-top: 0;\n  margin-bottom: 10px;\n}\nul ul,\nol ul,\nul ol,\nol ol {\n  margin-bottom: 0;\n}\n.list-unstyled {\n  padding-left: 0;\n  list-style: none;\n}\n.list-inline {\n  padding-left: 0;\n  list-style: none;\n  margin-left: -5px;\n}\n.list-inline > li {\n  display: inline-block;\n  padding-left: 5px;\n  padding-right: 5px;\n}\ndl {\n  margin-top: 0;\n  margin-bottom: 20px;\n}\ndt,\ndd {\n  line-height: 1.42857143;\n}\ndt {\n  font-weight: bold;\n}\ndd {\n  margin-left: 0;\n}\n@media (min-width: 768px) {\n  .dl-horizontal dt {\n    float: left;\n    width: 160px;\n    clear: left;\n    text-align: right;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n  .dl-horizontal dd {\n    margin-left: 180px;\n  }\n}\nabbr[title],\nabbr[data-original-title] {\n  cursor: help;\n  border-bottom: 1px dotted #777777;\n}\n.initialism {\n  font-size: 90%;\n  text-transform: uppercase;\n}\nblockquote {\n  padding: 10px 20px;\n  margin: 0 0 20px;\n  font-size: 17.5px;\n  border-left: 5px solid #eeeeee;\n}\nblockquote p:last-child,\nblockquote ul:last-child,\nblockquote ol:last-child {\n  margin-bottom: 0;\n}\nblockquote footer,\nblockquote small,\nblockquote .small {\n  display: block;\n  font-size: 80%;\n  line-height: 1.42857143;\n  color: #777777;\n}\nblockquote footer:before,\nblockquote small:before,\nblockquote .small:before {\n  content: '\\2014   \\A0';\n}\n.blockquote-reverse,\nblockquote.pull-right {\n  padding-right: 15px;\n  padding-left: 0;\n  border-right: 5px solid #eeeeee;\n  border-left: 0;\n  text-align: right;\n}\n.blockquote-reverse footer:before,\nblockquote.pull-right footer:before,\n.blockquote-reverse small:before,\nblockquote.pull-right small:before,\n.blockquote-reverse .small:before,\nblockquote.pull-right .small:before {\n  content: '';\n}\n.blockquote-reverse footer:after,\nblockquote.pull-right footer:after,\n.blockquote-reverse small:after,\nblockquote.pull-right small:after,\n.blockquote-reverse .small:after,\nblockquote.pull-right .small:after {\n  content: '\\A0   \\2014';\n}\naddress {\n  margin-bottom: 20px;\n  font-style: normal;\n  line-height: 1.42857143;\n}\ncode,\nkbd,\npre,\nsamp {\n  font-family: Menlo, Monaco, Consolas, \"Courier New\", monospace;\n}\ncode {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #c7254e;\n  background-color: #f9f2f4;\n  border-radius: 4px;\n}\nkbd {\n  padding: 2px 4px;\n  font-size: 90%;\n  color: #fff;\n  background-color: #333;\n  border-radius: 3px;\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.25);\n}\nkbd kbd {\n  padding: 0;\n  font-size: 100%;\n  font-weight: bold;\n  box-shadow: none;\n}\npre {\n  display: block;\n  padding: 9.5px;\n  margin: 0 0 10px;\n  font-size: 13px;\n  line-height: 1.42857143;\n  word-break: break-all;\n  word-wrap: break-word;\n  color: #333333;\n  background-color: #f5f5f5;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\npre code {\n  padding: 0;\n  font-size: inherit;\n  color: inherit;\n  white-space: pre-wrap;\n  background-color: transparent;\n  border-radius: 0;\n}\n.pre-scrollable {\n  max-height: 340px;\n  overflow-y: scroll;\n}\n.container {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n@media (min-width: 768px) {\n  .container {\n    width: 750px;\n  }\n}\n@media (min-width: 992px) {\n  .container {\n    width: 970px;\n  }\n}\n@media (min-width: 1200px) {\n  .container {\n    width: 1170px;\n  }\n}\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.row {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1, .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2, .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3, .col-xs-4, .col-sm-4, .col-md-4, .col-lg-4, .col-xs-5, .col-sm-5, .col-md-5, .col-lg-5, .col-xs-6, .col-sm-6, .col-md-6, .col-lg-6, .col-xs-7, .col-sm-7, .col-md-7, .col-lg-7, .col-xs-8, .col-sm-8, .col-md-8, .col-lg-8, .col-xs-9, .col-sm-9, .col-md-9, .col-lg-9, .col-xs-10, .col-sm-10, .col-md-10, .col-lg-10, .col-xs-11, .col-sm-11, .col-md-11, .col-lg-11, .col-xs-12, .col-sm-12, .col-md-12, .col-lg-12 {\n  position: relative;\n  min-height: 1px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.col-xs-1, .col-xs-2, .col-xs-3, .col-xs-4, .col-xs-5, .col-xs-6, .col-xs-7, .col-xs-8, .col-xs-9, .col-xs-10, .col-xs-11, .col-xs-12 {\n  float: left;\n}\n.col-xs-12 {\n  width: 100%;\n}\n.col-xs-11 {\n  width: 91.66666667%;\n}\n.col-xs-10 {\n  width: 83.33333333%;\n}\n.col-xs-9 {\n  width: 75%;\n}\n.col-xs-8 {\n  width: 66.66666667%;\n}\n.col-xs-7 {\n  width: 58.33333333%;\n}\n.col-xs-6 {\n  width: 50%;\n}\n.col-xs-5 {\n  width: 41.66666667%;\n}\n.col-xs-4 {\n  width: 33.33333333%;\n}\n.col-xs-3 {\n  width: 25%;\n}\n.col-xs-2 {\n  width: 16.66666667%;\n}\n.col-xs-1 {\n  width: 8.33333333%;\n}\n.col-xs-pull-12 {\n  right: 100%;\n}\n.col-xs-pull-11 {\n  right: 91.66666667%;\n}\n.col-xs-pull-10 {\n  right: 83.33333333%;\n}\n.col-xs-pull-9 {\n  right: 75%;\n}\n.col-xs-pull-8 {\n  right: 66.66666667%;\n}\n.col-xs-pull-7 {\n  right: 58.33333333%;\n}\n.col-xs-pull-6 {\n  right: 50%;\n}\n.col-xs-pull-5 {\n  right: 41.66666667%;\n}\n.col-xs-pull-4 {\n  right: 33.33333333%;\n}\n.col-xs-pull-3 {\n  right: 25%;\n}\n.col-xs-pull-2 {\n  right: 16.66666667%;\n}\n.col-xs-pull-1 {\n  right: 8.33333333%;\n}\n.col-xs-pull-0 {\n  right: auto;\n}\n.col-xs-push-12 {\n  left: 100%;\n}\n.col-xs-push-11 {\n  left: 91.66666667%;\n}\n.col-xs-push-10 {\n  left: 83.33333333%;\n}\n.col-xs-push-9 {\n  left: 75%;\n}\n.col-xs-push-8 {\n  left: 66.66666667%;\n}\n.col-xs-push-7 {\n  left: 58.33333333%;\n}\n.col-xs-push-6 {\n  left: 50%;\n}\n.col-xs-push-5 {\n  left: 41.66666667%;\n}\n.col-xs-push-4 {\n  left: 33.33333333%;\n}\n.col-xs-push-3 {\n  left: 25%;\n}\n.col-xs-push-2 {\n  left: 16.66666667%;\n}\n.col-xs-push-1 {\n  left: 8.33333333%;\n}\n.col-xs-push-0 {\n  left: auto;\n}\n.col-xs-offset-12 {\n  margin-left: 100%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-0 {\n  margin-left: 0%;\n}\n@media (min-width: 768px) {\n  .col-sm-1, .col-sm-2, .col-sm-3, .col-sm-4, .col-sm-5, .col-sm-6, .col-sm-7, .col-sm-8, .col-sm-9, .col-sm-10, .col-sm-11, .col-sm-12 {\n    float: left;\n  }\n  .col-sm-12 {\n    width: 100%;\n  }\n  .col-sm-11 {\n    width: 91.66666667%;\n  }\n  .col-sm-10 {\n    width: 83.33333333%;\n  }\n  .col-sm-9 {\n    width: 75%;\n  }\n  .col-sm-8 {\n    width: 66.66666667%;\n  }\n  .col-sm-7 {\n    width: 58.33333333%;\n  }\n  .col-sm-6 {\n    width: 50%;\n  }\n  .col-sm-5 {\n    width: 41.66666667%;\n  }\n  .col-sm-4 {\n    width: 33.33333333%;\n  }\n  .col-sm-3 {\n    width: 25%;\n  }\n  .col-sm-2 {\n    width: 16.66666667%;\n  }\n  .col-sm-1 {\n    width: 8.33333333%;\n  }\n  .col-sm-pull-12 {\n    right: 100%;\n  }\n  .col-sm-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-sm-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-sm-pull-9 {\n    right: 75%;\n  }\n  .col-sm-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-sm-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-sm-pull-6 {\n    right: 50%;\n  }\n  .col-sm-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-sm-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-sm-pull-3 {\n    right: 25%;\n  }\n  .col-sm-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-sm-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-sm-pull-0 {\n    right: auto;\n  }\n  .col-sm-push-12 {\n    left: 100%;\n  }\n  .col-sm-push-11 {\n    left: 91.66666667%;\n  }\n  .col-sm-push-10 {\n    left: 83.33333333%;\n  }\n  .col-sm-push-9 {\n    left: 75%;\n  }\n  .col-sm-push-8 {\n    left: 66.66666667%;\n  }\n  .col-sm-push-7 {\n    left: 58.33333333%;\n  }\n  .col-sm-push-6 {\n    left: 50%;\n  }\n  .col-sm-push-5 {\n    left: 41.66666667%;\n  }\n  .col-sm-push-4 {\n    left: 33.33333333%;\n  }\n  .col-sm-push-3 {\n    left: 25%;\n  }\n  .col-sm-push-2 {\n    left: 16.66666667%;\n  }\n  .col-sm-push-1 {\n    left: 8.33333333%;\n  }\n  .col-sm-push-0 {\n    left: auto;\n  }\n  .col-sm-offset-12 {\n    margin-left: 100%;\n  }\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-sm-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 992px) {\n  .col-md-1, .col-md-2, .col-md-3, .col-md-4, .col-md-5, .col-md-6, .col-md-7, .col-md-8, .col-md-9, .col-md-10, .col-md-11, .col-md-12 {\n    float: left;\n  }\n  .col-md-12 {\n    width: 100%;\n  }\n  .col-md-11 {\n    width: 91.66666667%;\n  }\n  .col-md-10 {\n    width: 83.33333333%;\n  }\n  .col-md-9 {\n    width: 75%;\n  }\n  .col-md-8 {\n    width: 66.66666667%;\n  }\n  .col-md-7 {\n    width: 58.33333333%;\n  }\n  .col-md-6 {\n    width: 50%;\n  }\n  .col-md-5 {\n    width: 41.66666667%;\n  }\n  .col-md-4 {\n    width: 33.33333333%;\n  }\n  .col-md-3 {\n    width: 25%;\n  }\n  .col-md-2 {\n    width: 16.66666667%;\n  }\n  .col-md-1 {\n    width: 8.33333333%;\n  }\n  .col-md-pull-12 {\n    right: 100%;\n  }\n  .col-md-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-md-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-md-pull-9 {\n    right: 75%;\n  }\n  .col-md-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-md-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-md-pull-6 {\n    right: 50%;\n  }\n  .col-md-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-md-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-md-pull-3 {\n    right: 25%;\n  }\n  .col-md-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-md-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-md-pull-0 {\n    right: auto;\n  }\n  .col-md-push-12 {\n    left: 100%;\n  }\n  .col-md-push-11 {\n    left: 91.66666667%;\n  }\n  .col-md-push-10 {\n    left: 83.33333333%;\n  }\n  .col-md-push-9 {\n    left: 75%;\n  }\n  .col-md-push-8 {\n    left: 66.66666667%;\n  }\n  .col-md-push-7 {\n    left: 58.33333333%;\n  }\n  .col-md-push-6 {\n    left: 50%;\n  }\n  .col-md-push-5 {\n    left: 41.66666667%;\n  }\n  .col-md-push-4 {\n    left: 33.33333333%;\n  }\n  .col-md-push-3 {\n    left: 25%;\n  }\n  .col-md-push-2 {\n    left: 16.66666667%;\n  }\n  .col-md-push-1 {\n    left: 8.33333333%;\n  }\n  .col-md-push-0 {\n    left: auto;\n  }\n  .col-md-offset-12 {\n    margin-left: 100%;\n  }\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-md-offset-0 {\n    margin-left: 0%;\n  }\n}\n@media (min-width: 1200px) {\n  .col-lg-1, .col-lg-2, .col-lg-3, .col-lg-4, .col-lg-5, .col-lg-6, .col-lg-7, .col-lg-8, .col-lg-9, .col-lg-10, .col-lg-11, .col-lg-12 {\n    float: left;\n  }\n  .col-lg-12 {\n    width: 100%;\n  }\n  .col-lg-11 {\n    width: 91.66666667%;\n  }\n  .col-lg-10 {\n    width: 83.33333333%;\n  }\n  .col-lg-9 {\n    width: 75%;\n  }\n  .col-lg-8 {\n    width: 66.66666667%;\n  }\n  .col-lg-7 {\n    width: 58.33333333%;\n  }\n  .col-lg-6 {\n    width: 50%;\n  }\n  .col-lg-5 {\n    width: 41.66666667%;\n  }\n  .col-lg-4 {\n    width: 33.33333333%;\n  }\n  .col-lg-3 {\n    width: 25%;\n  }\n  .col-lg-2 {\n    width: 16.66666667%;\n  }\n  .col-lg-1 {\n    width: 8.33333333%;\n  }\n  .col-lg-pull-12 {\n    right: 100%;\n  }\n  .col-lg-pull-11 {\n    right: 91.66666667%;\n  }\n  .col-lg-pull-10 {\n    right: 83.33333333%;\n  }\n  .col-lg-pull-9 {\n    right: 75%;\n  }\n  .col-lg-pull-8 {\n    right: 66.66666667%;\n  }\n  .col-lg-pull-7 {\n    right: 58.33333333%;\n  }\n  .col-lg-pull-6 {\n    right: 50%;\n  }\n  .col-lg-pull-5 {\n    right: 41.66666667%;\n  }\n  .col-lg-pull-4 {\n    right: 33.33333333%;\n  }\n  .col-lg-pull-3 {\n    right: 25%;\n  }\n  .col-lg-pull-2 {\n    right: 16.66666667%;\n  }\n  .col-lg-pull-1 {\n    right: 8.33333333%;\n  }\n  .col-lg-pull-0 {\n    right: auto;\n  }\n  .col-lg-push-12 {\n    left: 100%;\n  }\n  .col-lg-push-11 {\n    left: 91.66666667%;\n  }\n  .col-lg-push-10 {\n    left: 83.33333333%;\n  }\n  .col-lg-push-9 {\n    left: 75%;\n  }\n  .col-lg-push-8 {\n    left: 66.66666667%;\n  }\n  .col-lg-push-7 {\n    left: 58.33333333%;\n  }\n  .col-lg-push-6 {\n    left: 50%;\n  }\n  .col-lg-push-5 {\n    left: 41.66666667%;\n  }\n  .col-lg-push-4 {\n    left: 33.33333333%;\n  }\n  .col-lg-push-3 {\n    left: 25%;\n  }\n  .col-lg-push-2 {\n    left: 16.66666667%;\n  }\n  .col-lg-push-1 {\n    left: 8.33333333%;\n  }\n  .col-lg-push-0 {\n    left: auto;\n  }\n  .col-lg-offset-12 {\n    margin-left: 100%;\n  }\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n  .col-lg-offset-0 {\n    margin-left: 0%;\n  }\n}\ntable {\n  background-color: transparent;\n}\ncaption {\n  padding-top: 8px;\n  padding-bottom: 8px;\n  color: #777777;\n  text-align: left;\n}\nth {\n  text-align: left;\n}\n.table {\n  width: 100%;\n  max-width: 100%;\n  margin-bottom: 20px;\n}\n.table > thead > tr > th,\n.table > tbody > tr > th,\n.table > tfoot > tr > th,\n.table > thead > tr > td,\n.table > tbody > tr > td,\n.table > tfoot > tr > td {\n  padding: 8px;\n  line-height: 1.42857143;\n  vertical-align: top;\n  border-top: 1px solid #ddd;\n}\n.table > thead > tr > th {\n  vertical-align: bottom;\n  border-bottom: 2px solid #ddd;\n}\n.table > caption + thead > tr:first-child > th,\n.table > colgroup + thead > tr:first-child > th,\n.table > thead:first-child > tr:first-child > th,\n.table > caption + thead > tr:first-child > td,\n.table > colgroup + thead > tr:first-child > td,\n.table > thead:first-child > tr:first-child > td {\n  border-top: 0;\n}\n.table > tbody + tbody {\n  border-top: 2px solid #ddd;\n}\n.table .table {\n  background-color: #fff;\n}\n.table-condensed > thead > tr > th,\n.table-condensed > tbody > tr > th,\n.table-condensed > tfoot > tr > th,\n.table-condensed > thead > tr > td,\n.table-condensed > tbody > tr > td,\n.table-condensed > tfoot > tr > td {\n  padding: 5px;\n}\n.table-bordered {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > tbody > tr > th,\n.table-bordered > tfoot > tr > th,\n.table-bordered > thead > tr > td,\n.table-bordered > tbody > tr > td,\n.table-bordered > tfoot > tr > td {\n  border: 1px solid #ddd;\n}\n.table-bordered > thead > tr > th,\n.table-bordered > thead > tr > td {\n  border-bottom-width: 2px;\n}\n.table-striped > tbody > tr:nth-of-type(odd) {\n  background-color: #f9f9f9;\n}\n.table-hover > tbody > tr:hover {\n  background-color: #f5f5f5;\n}\ntable col[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-column;\n}\ntable td[class*=\"col-\"],\ntable th[class*=\"col-\"] {\n  position: static;\n  float: none;\n  display: table-cell;\n}\n.table > thead > tr > td.active,\n.table > tbody > tr > td.active,\n.table > tfoot > tr > td.active,\n.table > thead > tr > th.active,\n.table > tbody > tr > th.active,\n.table > tfoot > tr > th.active,\n.table > thead > tr.active > td,\n.table > tbody > tr.active > td,\n.table > tfoot > tr.active > td,\n.table > thead > tr.active > th,\n.table > tbody > tr.active > th,\n.table > tfoot > tr.active > th {\n  background-color: #f5f5f5;\n}\n.table-hover > tbody > tr > td.active:hover,\n.table-hover > tbody > tr > th.active:hover,\n.table-hover > tbody > tr.active:hover > td,\n.table-hover > tbody > tr:hover > .active,\n.table-hover > tbody > tr.active:hover > th {\n  background-color: #e8e8e8;\n}\n.table > thead > tr > td.success,\n.table > tbody > tr > td.success,\n.table > tfoot > tr > td.success,\n.table > thead > tr > th.success,\n.table > tbody > tr > th.success,\n.table > tfoot > tr > th.success,\n.table > thead > tr.success > td,\n.table > tbody > tr.success > td,\n.table > tfoot > tr.success > td,\n.table > thead > tr.success > th,\n.table > tbody > tr.success > th,\n.table > tfoot > tr.success > th {\n  background-color: #dff0d8;\n}\n.table-hover > tbody > tr > td.success:hover,\n.table-hover > tbody > tr > th.success:hover,\n.table-hover > tbody > tr.success:hover > td,\n.table-hover > tbody > tr:hover > .success,\n.table-hover > tbody > tr.success:hover > th {\n  background-color: #d0e9c6;\n}\n.table > thead > tr > td.info,\n.table > tbody > tr > td.info,\n.table > tfoot > tr > td.info,\n.table > thead > tr > th.info,\n.table > tbody > tr > th.info,\n.table > tfoot > tr > th.info,\n.table > thead > tr.info > td,\n.table > tbody > tr.info > td,\n.table > tfoot > tr.info > td,\n.table > thead > tr.info > th,\n.table > tbody > tr.info > th,\n.table > tfoot > tr.info > th {\n  background-color: #d9edf7;\n}\n.table-hover > tbody > tr > td.info:hover,\n.table-hover > tbody > tr > th.info:hover,\n.table-hover > tbody > tr.info:hover > td,\n.table-hover > tbody > tr:hover > .info,\n.table-hover > tbody > tr.info:hover > th {\n  background-color: #c4e3f3;\n}\n.table > thead > tr > td.warning,\n.table > tbody > tr > td.warning,\n.table > tfoot > tr > td.warning,\n.table > thead > tr > th.warning,\n.table > tbody > tr > th.warning,\n.table > tfoot > tr > th.warning,\n.table > thead > tr.warning > td,\n.table > tbody > tr.warning > td,\n.table > tfoot > tr.warning > td,\n.table > thead > tr.warning > th,\n.table > tbody > tr.warning > th,\n.table > tfoot > tr.warning > th {\n  background-color: #fcf8e3;\n}\n.table-hover > tbody > tr > td.warning:hover,\n.table-hover > tbody > tr > th.warning:hover,\n.table-hover > tbody > tr.warning:hover > td,\n.table-hover > tbody > tr:hover > .warning,\n.table-hover > tbody > tr.warning:hover > th {\n  background-color: #faf2cc;\n}\n.table > thead > tr > td.danger,\n.table > tbody > tr > td.danger,\n.table > tfoot > tr > td.danger,\n.table > thead > tr > th.danger,\n.table > tbody > tr > th.danger,\n.table > tfoot > tr > th.danger,\n.table > thead > tr.danger > td,\n.table > tbody > tr.danger > td,\n.table > tfoot > tr.danger > td,\n.table > thead > tr.danger > th,\n.table > tbody > tr.danger > th,\n.table > tfoot > tr.danger > th {\n  background-color: #f2dede;\n}\n.table-hover > tbody > tr > td.danger:hover,\n.table-hover > tbody > tr > th.danger:hover,\n.table-hover > tbody > tr.danger:hover > td,\n.table-hover > tbody > tr:hover > .danger,\n.table-hover > tbody > tr.danger:hover > th {\n  background-color: #ebcccc;\n}\n.table-responsive {\n  overflow-x: auto;\n  min-height: 0.01%;\n}\n@media screen and (max-width: 767px) {\n  .table-responsive {\n    width: 100%;\n    margin-bottom: 15px;\n    overflow-y: hidden;\n    -ms-overflow-style: -ms-autohiding-scrollbar;\n    border: 1px solid #ddd;\n  }\n  .table-responsive > .table {\n    margin-bottom: 0;\n  }\n  .table-responsive > .table > thead > tr > th,\n  .table-responsive > .table > tbody > tr > th,\n  .table-responsive > .table > tfoot > tr > th,\n  .table-responsive > .table > thead > tr > td,\n  .table-responsive > .table > tbody > tr > td,\n  .table-responsive > .table > tfoot > tr > td {\n    white-space: nowrap;\n  }\n  .table-responsive > .table-bordered {\n    border: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:first-child,\n  .table-responsive > .table-bordered > tbody > tr > th:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n  .table-responsive > .table-bordered > thead > tr > td:first-child,\n  .table-responsive > .table-bordered > tbody > tr > td:first-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n    border-left: 0;\n  }\n  .table-responsive > .table-bordered > thead > tr > th:last-child,\n  .table-responsive > .table-bordered > tbody > tr > th:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n  .table-responsive > .table-bordered > thead > tr > td:last-child,\n  .table-responsive > .table-bordered > tbody > tr > td:last-child,\n  .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n    border-right: 0;\n  }\n  .table-responsive > .table-bordered > tbody > tr:last-child > th,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > th,\n  .table-responsive > .table-bordered > tbody > tr:last-child > td,\n  .table-responsive > .table-bordered > tfoot > tr:last-child > td {\n    border-bottom: 0;\n  }\n}\nfieldset {\n  padding: 0;\n  margin: 0;\n  border: 0;\n  min-width: 0;\n}\nlegend {\n  display: block;\n  width: 100%;\n  padding: 0;\n  margin-bottom: 20px;\n  font-size: 21px;\n  line-height: inherit;\n  color: #333333;\n  border: 0;\n  border-bottom: 1px solid #e5e5e5;\n}\nlabel {\n  display: inline-block;\n  max-width: 100%;\n  margin-bottom: 5px;\n  font-weight: bold;\n}\ninput[type=\"search\"] {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  box-sizing: border-box;\n}\ninput[type=\"radio\"],\ninput[type=\"checkbox\"] {\n  margin: 4px 0 0;\n  margin-top: 1px \\9;\n  line-height: normal;\n}\ninput[type=\"file\"] {\n  display: block;\n}\ninput[type=\"range\"] {\n  display: block;\n  width: 100%;\n}\nselect[multiple],\nselect[size] {\n  height: auto;\n}\ninput[type=\"file\"]:focus,\ninput[type=\"radio\"]:focus,\ninput[type=\"checkbox\"]:focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\noutput {\n  display: block;\n  padding-top: 7px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555555;\n}\n.form-control {\n  display: block;\n  width: 100%;\n  height: 34px;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  color: #555555;\n  background-color: #fff;\n  background-image: none;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  -webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n  -o-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n  transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;\n}\n.form-control:focus {\n  border-color: #66afe9;\n  outline: 0;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(102, 175, 233, 0.6);\n}\n.form-control::-moz-placeholder {\n  color: #999;\n  opacity: 1;\n}\n.form-control:-ms-input-placeholder {\n  color: #999;\n}\n.form-control::-webkit-input-placeholder {\n  color: #999;\n}\n.form-control::-ms-expand {\n  border: 0;\n  background-color: transparent;\n}\n.form-control[disabled],\n.form-control[readonly],\nfieldset[disabled] .form-control {\n  background-color: #eeeeee;\n  opacity: 1;\n}\n.form-control[disabled],\nfieldset[disabled] .form-control {\n  cursor: not-allowed;\n}\ntextarea.form-control {\n  height: auto;\n}\ninput[type=\"search\"] {\n  -webkit-appearance: none;\n}\n@media screen and (-webkit-min-device-pixel-ratio: 0) {\n  input[type=\"date\"].form-control,\n  input[type=\"time\"].form-control,\n  input[type=\"datetime-local\"].form-control,\n  input[type=\"month\"].form-control {\n    line-height: 34px;\n  }\n  input[type=\"date\"].input-sm,\n  input[type=\"time\"].input-sm,\n  input[type=\"datetime-local\"].input-sm,\n  input[type=\"month\"].input-sm,\n  .input-group-sm input[type=\"date\"],\n  .input-group-sm input[type=\"time\"],\n  .input-group-sm input[type=\"datetime-local\"],\n  .input-group-sm input[type=\"month\"] {\n    line-height: 30px;\n  }\n  input[type=\"date\"].input-lg,\n  input[type=\"time\"].input-lg,\n  input[type=\"datetime-local\"].input-lg,\n  input[type=\"month\"].input-lg,\n  .input-group-lg input[type=\"date\"],\n  .input-group-lg input[type=\"time\"],\n  .input-group-lg input[type=\"datetime-local\"],\n  .input-group-lg input[type=\"month\"] {\n    line-height: 46px;\n  }\n}\n.form-group {\n  margin-bottom: 15px;\n}\n.radio,\n.checkbox {\n  position: relative;\n  display: block;\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.radio label,\n.checkbox label {\n  min-height: 20px;\n  padding-left: 20px;\n  margin-bottom: 0;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio input[type=\"radio\"],\n.radio-inline input[type=\"radio\"],\n.checkbox input[type=\"checkbox\"],\n.checkbox-inline input[type=\"checkbox\"] {\n  position: absolute;\n  margin-left: -20px;\n  margin-top: 4px \\9;\n}\n.radio + .radio,\n.checkbox + .checkbox {\n  margin-top: -5px;\n}\n.radio-inline,\n.checkbox-inline {\n  position: relative;\n  display: inline-block;\n  padding-left: 20px;\n  margin-bottom: 0;\n  vertical-align: middle;\n  font-weight: normal;\n  cursor: pointer;\n}\n.radio-inline + .radio-inline,\n.checkbox-inline + .checkbox-inline {\n  margin-top: 0;\n  margin-left: 10px;\n}\ninput[type=\"radio\"][disabled],\ninput[type=\"checkbox\"][disabled],\ninput[type=\"radio\"].disabled,\ninput[type=\"checkbox\"].disabled,\nfieldset[disabled] input[type=\"radio\"],\nfieldset[disabled] input[type=\"checkbox\"] {\n  cursor: not-allowed;\n}\n.radio-inline.disabled,\n.checkbox-inline.disabled,\nfieldset[disabled] .radio-inline,\nfieldset[disabled] .checkbox-inline {\n  cursor: not-allowed;\n}\n.radio.disabled label,\n.checkbox.disabled label,\nfieldset[disabled] .radio label,\nfieldset[disabled] .checkbox label {\n  cursor: not-allowed;\n}\n.form-control-static {\n  padding-top: 7px;\n  padding-bottom: 7px;\n  margin-bottom: 0;\n  min-height: 34px;\n}\n.form-control-static.input-lg,\n.form-control-static.input-sm {\n  padding-left: 0;\n  padding-right: 0;\n}\n.input-sm {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-sm {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-sm,\nselect[multiple].input-sm {\n  height: auto;\n}\n.form-group-sm .form-control {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.form-group-sm select.form-control {\n  height: 30px;\n  line-height: 30px;\n}\n.form-group-sm textarea.form-control,\n.form-group-sm select[multiple].form-control {\n  height: auto;\n}\n.form-group-sm .form-control-static {\n  height: 30px;\n  min-height: 32px;\n  padding: 6px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.input-lg {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-lg {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-lg,\nselect[multiple].input-lg {\n  height: auto;\n}\n.form-group-lg .form-control {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.form-group-lg select.form-control {\n  height: 46px;\n  line-height: 46px;\n}\n.form-group-lg textarea.form-control,\n.form-group-lg select[multiple].form-control {\n  height: auto;\n}\n.form-group-lg .form-control-static {\n  height: 46px;\n  min-height: 38px;\n  padding: 11px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.has-feedback {\n  position: relative;\n}\n.has-feedback .form-control {\n  padding-right: 42.5px;\n}\n.form-control-feedback {\n  position: absolute;\n  top: 0;\n  right: 0;\n  z-index: 2;\n  display: block;\n  width: 34px;\n  height: 34px;\n  line-height: 34px;\n  text-align: center;\n  pointer-events: none;\n}\n.input-lg + .form-control-feedback,\n.input-group-lg + .form-control-feedback,\n.form-group-lg .form-control + .form-control-feedback {\n  width: 46px;\n  height: 46px;\n  line-height: 46px;\n}\n.input-sm + .form-control-feedback,\n.input-group-sm + .form-control-feedback,\n.form-group-sm .form-control + .form-control-feedback {\n  width: 30px;\n  height: 30px;\n  line-height: 30px;\n}\n.has-success .help-block,\n.has-success .control-label,\n.has-success .radio,\n.has-success .checkbox,\n.has-success .radio-inline,\n.has-success .checkbox-inline,\n.has-success.radio label,\n.has-success.checkbox label,\n.has-success.radio-inline label,\n.has-success.checkbox-inline label {\n  color: #3c763d;\n}\n.has-success .form-control {\n  border-color: #3c763d;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-success .form-control:focus {\n  border-color: #2b542c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #67b168;\n}\n.has-success .input-group-addon {\n  color: #3c763d;\n  border-color: #3c763d;\n  background-color: #dff0d8;\n}\n.has-success .form-control-feedback {\n  color: #3c763d;\n}\n.has-warning .help-block,\n.has-warning .control-label,\n.has-warning .radio,\n.has-warning .checkbox,\n.has-warning .radio-inline,\n.has-warning .checkbox-inline,\n.has-warning.radio label,\n.has-warning.checkbox label,\n.has-warning.radio-inline label,\n.has-warning.checkbox-inline label {\n  color: #8a6d3b;\n}\n.has-warning .form-control {\n  border-color: #8a6d3b;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-warning .form-control:focus {\n  border-color: #66512c;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #c0a16b;\n}\n.has-warning .input-group-addon {\n  color: #8a6d3b;\n  border-color: #8a6d3b;\n  background-color: #fcf8e3;\n}\n.has-warning .form-control-feedback {\n  color: #8a6d3b;\n}\n.has-error .help-block,\n.has-error .control-label,\n.has-error .radio,\n.has-error .checkbox,\n.has-error .radio-inline,\n.has-error .checkbox-inline,\n.has-error.radio label,\n.has-error.checkbox label,\n.has-error.radio-inline label,\n.has-error.checkbox-inline label {\n  color: #a94442;\n}\n.has-error .form-control {\n  border-color: #a94442;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);\n}\n.has-error .form-control:focus {\n  border-color: #843534;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #ce8483;\n}\n.has-error .input-group-addon {\n  color: #a94442;\n  border-color: #a94442;\n  background-color: #f2dede;\n}\n.has-error .form-control-feedback {\n  color: #a94442;\n}\n.has-feedback label ~ .form-control-feedback {\n  top: 25px;\n}\n.has-feedback label.sr-only ~ .form-control-feedback {\n  top: 0;\n}\n.help-block {\n  display: block;\n  margin-top: 5px;\n  margin-bottom: 10px;\n  color: #737373;\n}\n@media (min-width: 768px) {\n  .form-inline .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .form-inline .form-control-static {\n    display: inline-block;\n  }\n  .form-inline .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .form-inline .input-group .input-group-addon,\n  .form-inline .input-group .input-group-btn,\n  .form-inline .input-group .form-control {\n    width: auto;\n  }\n  .form-inline .input-group > .form-control {\n    width: 100%;\n  }\n  .form-inline .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio,\n  .form-inline .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .form-inline .radio label,\n  .form-inline .checkbox label {\n    padding-left: 0;\n  }\n  .form-inline .radio input[type=\"radio\"],\n  .form-inline .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .form-inline .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox,\n.form-horizontal .radio-inline,\n.form-horizontal .checkbox-inline {\n  margin-top: 0;\n  margin-bottom: 0;\n  padding-top: 7px;\n}\n.form-horizontal .radio,\n.form-horizontal .checkbox {\n  min-height: 27px;\n}\n.form-horizontal .form-group {\n  margin-left: -15px;\n  margin-right: -15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .control-label {\n    text-align: right;\n    margin-bottom: 0;\n    padding-top: 7px;\n  }\n}\n.form-horizontal .has-feedback .form-control-feedback {\n  right: 15px;\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-lg .control-label {\n    padding-top: 11px;\n    font-size: 18px;\n  }\n}\n@media (min-width: 768px) {\n  .form-horizontal .form-group-sm .control-label {\n    padding-top: 6px;\n    font-size: 12px;\n  }\n}\n.btn {\n  display: inline-block;\n  margin-bottom: 0;\n  font-weight: normal;\n  text-align: center;\n  vertical-align: middle;\n  touch-action: manipulation;\n  cursor: pointer;\n  background-image: none;\n  border: 1px solid transparent;\n  white-space: nowrap;\n  padding: 6px 12px;\n  font-size: 14px;\n  line-height: 1.42857143;\n  border-radius: 4px;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n.btn:focus,\n.btn:active:focus,\n.btn.active:focus,\n.btn.focus,\n.btn:active.focus,\n.btn.active.focus {\n  outline: 5px auto -webkit-focus-ring-color;\n  outline-offset: -2px;\n}\n.btn:hover,\n.btn:focus,\n.btn.focus {\n  color: #333;\n  text-decoration: none;\n}\n.btn:active,\n.btn.active {\n  outline: 0;\n  background-image: none;\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn.disabled,\n.btn[disabled],\nfieldset[disabled] .btn {\n  cursor: not-allowed;\n  opacity: 0.65;\n  filter: alpha(opacity=65);\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\na.btn.disabled,\nfieldset[disabled] a.btn {\n  pointer-events: none;\n}\n.btn-default {\n  color: #333;\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default:focus,\n.btn-default.focus {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #8c8c8c;\n}\n.btn-default:hover {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  color: #333;\n  background-color: #e6e6e6;\n  border-color: #adadad;\n}\n.btn-default:active:hover,\n.btn-default.active:hover,\n.open > .dropdown-toggle.btn-default:hover,\n.btn-default:active:focus,\n.btn-default.active:focus,\n.open > .dropdown-toggle.btn-default:focus,\n.btn-default:active.focus,\n.btn-default.active.focus,\n.open > .dropdown-toggle.btn-default.focus {\n  color: #333;\n  background-color: #d4d4d4;\n  border-color: #8c8c8c;\n}\n.btn-default:active,\n.btn-default.active,\n.open > .dropdown-toggle.btn-default {\n  background-image: none;\n}\n.btn-default.disabled:hover,\n.btn-default[disabled]:hover,\nfieldset[disabled] .btn-default:hover,\n.btn-default.disabled:focus,\n.btn-default[disabled]:focus,\nfieldset[disabled] .btn-default:focus,\n.btn-default.disabled.focus,\n.btn-default[disabled].focus,\nfieldset[disabled] .btn-default.focus {\n  background-color: #fff;\n  border-color: #ccc;\n}\n.btn-default .badge {\n  color: #fff;\n  background-color: #333;\n}\n.btn-primary {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary:focus,\n.btn-primary.focus {\n  color: #fff;\n  background-color: #286090;\n  border-color: #122b40;\n}\n.btn-primary:hover {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  color: #fff;\n  background-color: #286090;\n  border-color: #204d74;\n}\n.btn-primary:active:hover,\n.btn-primary.active:hover,\n.open > .dropdown-toggle.btn-primary:hover,\n.btn-primary:active:focus,\n.btn-primary.active:focus,\n.open > .dropdown-toggle.btn-primary:focus,\n.btn-primary:active.focus,\n.btn-primary.active.focus,\n.open > .dropdown-toggle.btn-primary.focus {\n  color: #fff;\n  background-color: #204d74;\n  border-color: #122b40;\n}\n.btn-primary:active,\n.btn-primary.active,\n.open > .dropdown-toggle.btn-primary {\n  background-image: none;\n}\n.btn-primary.disabled:hover,\n.btn-primary[disabled]:hover,\nfieldset[disabled] .btn-primary:hover,\n.btn-primary.disabled:focus,\n.btn-primary[disabled]:focus,\nfieldset[disabled] .btn-primary:focus,\n.btn-primary.disabled.focus,\n.btn-primary[disabled].focus,\nfieldset[disabled] .btn-primary.focus {\n  background-color: #337ab7;\n  border-color: #2e6da4;\n}\n.btn-primary .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.btn-success {\n  color: #fff;\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success:focus,\n.btn-success.focus {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #255625;\n}\n.btn-success:hover {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  color: #fff;\n  background-color: #449d44;\n  border-color: #398439;\n}\n.btn-success:active:hover,\n.btn-success.active:hover,\n.open > .dropdown-toggle.btn-success:hover,\n.btn-success:active:focus,\n.btn-success.active:focus,\n.open > .dropdown-toggle.btn-success:focus,\n.btn-success:active.focus,\n.btn-success.active.focus,\n.open > .dropdown-toggle.btn-success.focus {\n  color: #fff;\n  background-color: #398439;\n  border-color: #255625;\n}\n.btn-success:active,\n.btn-success.active,\n.open > .dropdown-toggle.btn-success {\n  background-image: none;\n}\n.btn-success.disabled:hover,\n.btn-success[disabled]:hover,\nfieldset[disabled] .btn-success:hover,\n.btn-success.disabled:focus,\n.btn-success[disabled]:focus,\nfieldset[disabled] .btn-success:focus,\n.btn-success.disabled.focus,\n.btn-success[disabled].focus,\nfieldset[disabled] .btn-success.focus {\n  background-color: #5cb85c;\n  border-color: #4cae4c;\n}\n.btn-success .badge {\n  color: #5cb85c;\n  background-color: #fff;\n}\n.btn-info {\n  color: #fff;\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info:focus,\n.btn-info.focus {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #1b6d85;\n}\n.btn-info:hover {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  color: #fff;\n  background-color: #31b0d5;\n  border-color: #269abc;\n}\n.btn-info:active:hover,\n.btn-info.active:hover,\n.open > .dropdown-toggle.btn-info:hover,\n.btn-info:active:focus,\n.btn-info.active:focus,\n.open > .dropdown-toggle.btn-info:focus,\n.btn-info:active.focus,\n.btn-info.active.focus,\n.open > .dropdown-toggle.btn-info.focus {\n  color: #fff;\n  background-color: #269abc;\n  border-color: #1b6d85;\n}\n.btn-info:active,\n.btn-info.active,\n.open > .dropdown-toggle.btn-info {\n  background-image: none;\n}\n.btn-info.disabled:hover,\n.btn-info[disabled]:hover,\nfieldset[disabled] .btn-info:hover,\n.btn-info.disabled:focus,\n.btn-info[disabled]:focus,\nfieldset[disabled] .btn-info:focus,\n.btn-info.disabled.focus,\n.btn-info[disabled].focus,\nfieldset[disabled] .btn-info.focus {\n  background-color: #5bc0de;\n  border-color: #46b8da;\n}\n.btn-info .badge {\n  color: #5bc0de;\n  background-color: #fff;\n}\n.btn-warning {\n  color: #fff;\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning:focus,\n.btn-warning.focus {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #985f0d;\n}\n.btn-warning:hover {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  color: #fff;\n  background-color: #ec971f;\n  border-color: #d58512;\n}\n.btn-warning:active:hover,\n.btn-warning.active:hover,\n.open > .dropdown-toggle.btn-warning:hover,\n.btn-warning:active:focus,\n.btn-warning.active:focus,\n.open > .dropdown-toggle.btn-warning:focus,\n.btn-warning:active.focus,\n.btn-warning.active.focus,\n.open > .dropdown-toggle.btn-warning.focus {\n  color: #fff;\n  background-color: #d58512;\n  border-color: #985f0d;\n}\n.btn-warning:active,\n.btn-warning.active,\n.open > .dropdown-toggle.btn-warning {\n  background-image: none;\n}\n.btn-warning.disabled:hover,\n.btn-warning[disabled]:hover,\nfieldset[disabled] .btn-warning:hover,\n.btn-warning.disabled:focus,\n.btn-warning[disabled]:focus,\nfieldset[disabled] .btn-warning:focus,\n.btn-warning.disabled.focus,\n.btn-warning[disabled].focus,\nfieldset[disabled] .btn-warning.focus {\n  background-color: #f0ad4e;\n  border-color: #eea236;\n}\n.btn-warning .badge {\n  color: #f0ad4e;\n  background-color: #fff;\n}\n.btn-danger {\n  color: #fff;\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger:focus,\n.btn-danger.focus {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #761c19;\n}\n.btn-danger:hover {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  color: #fff;\n  background-color: #c9302c;\n  border-color: #ac2925;\n}\n.btn-danger:active:hover,\n.btn-danger.active:hover,\n.open > .dropdown-toggle.btn-danger:hover,\n.btn-danger:active:focus,\n.btn-danger.active:focus,\n.open > .dropdown-toggle.btn-danger:focus,\n.btn-danger:active.focus,\n.btn-danger.active.focus,\n.open > .dropdown-toggle.btn-danger.focus {\n  color: #fff;\n  background-color: #ac2925;\n  border-color: #761c19;\n}\n.btn-danger:active,\n.btn-danger.active,\n.open > .dropdown-toggle.btn-danger {\n  background-image: none;\n}\n.btn-danger.disabled:hover,\n.btn-danger[disabled]:hover,\nfieldset[disabled] .btn-danger:hover,\n.btn-danger.disabled:focus,\n.btn-danger[disabled]:focus,\nfieldset[disabled] .btn-danger:focus,\n.btn-danger.disabled.focus,\n.btn-danger[disabled].focus,\nfieldset[disabled] .btn-danger.focus {\n  background-color: #d9534f;\n  border-color: #d43f3a;\n}\n.btn-danger .badge {\n  color: #d9534f;\n  background-color: #fff;\n}\n.btn-link {\n  color: #337ab7;\n  font-weight: normal;\n  border-radius: 0;\n}\n.btn-link,\n.btn-link:active,\n.btn-link.active,\n.btn-link[disabled],\nfieldset[disabled] .btn-link {\n  background-color: transparent;\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.btn-link,\n.btn-link:hover,\n.btn-link:focus,\n.btn-link:active {\n  border-color: transparent;\n}\n.btn-link:hover,\n.btn-link:focus {\n  color: #23527c;\n  text-decoration: underline;\n  background-color: transparent;\n}\n.btn-link[disabled]:hover,\nfieldset[disabled] .btn-link:hover,\n.btn-link[disabled]:focus,\nfieldset[disabled] .btn-link:focus {\n  color: #777777;\n  text-decoration: none;\n}\n.btn-lg,\n.btn-group-lg > .btn {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\n.btn-sm,\n.btn-group-sm > .btn {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-xs,\n.btn-group-xs > .btn {\n  padding: 1px 5px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\n.btn-block {\n  display: block;\n  width: 100%;\n}\n.btn-block + .btn-block {\n  margin-top: 5px;\n}\ninput[type=\"submit\"].btn-block,\ninput[type=\"reset\"].btn-block,\ninput[type=\"button\"].btn-block {\n  width: 100%;\n}\n.fade {\n  opacity: 0;\n  -webkit-transition: opacity 0.15s linear;\n  -o-transition: opacity 0.15s linear;\n  transition: opacity 0.15s linear;\n}\n.fade.in {\n  opacity: 1;\n}\n.collapse {\n  display: none;\n}\n.collapse.in {\n  display: block;\n}\ntr.collapse.in {\n  display: table-row;\n}\ntbody.collapse.in {\n  display: table-row-group;\n}\n.collapsing {\n  position: relative;\n  height: 0;\n  overflow: hidden;\n  -webkit-transition-property: height, visibility;\n  transition-property: height, visibility;\n  -webkit-transition-duration: 0.35s;\n  transition-duration: 0.35s;\n  -webkit-transition-timing-function: ease;\n  transition-timing-function: ease;\n}\n@font-face {\n  font-family: 'Glyphicons Halflings';\n  src: url(" + __webpack_require__(115) + ");\n  src: url(" + __webpack_require__(115) + "?#iefix) format('embedded-opentype'), url(" + __webpack_require__(116) + ") format('woff2'), url(" + __webpack_require__(117) + ") format('woff'), url(" + __webpack_require__(118) + ") format('truetype'), url(" + __webpack_require__(119) + "#glyphicons_halflingsregular) format('svg');\n}\n.glyphicon {\n  position: relative;\n  top: 1px;\n  display: inline-block;\n  font-family: 'Glyphicons Halflings';\n  font-style: normal;\n  font-weight: normal;\n  line-height: 1;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.glyphicon-asterisk:before {\n  content: \"*\";\n}\n.glyphicon-plus:before {\n  content: \"+\";\n}\n.glyphicon-euro:before,\n.glyphicon-eur:before {\n  content: \"\\20AC\";\n}\n.glyphicon-minus:before {\n  content: \"\\2212\";\n}\n.glyphicon-cloud:before {\n  content: \"\\2601\";\n}\n.glyphicon-envelope:before {\n  content: \"\\2709\";\n}\n.glyphicon-pencil:before {\n  content: \"\\270F\";\n}\n.glyphicon-glass:before {\n  content: \"\\E001\";\n}\n.glyphicon-music:before {\n  content: \"\\E002\";\n}\n.glyphicon-search:before {\n  content: \"\\E003\";\n}\n.glyphicon-heart:before {\n  content: \"\\E005\";\n}\n.glyphicon-star:before {\n  content: \"\\E006\";\n}\n.glyphicon-star-empty:before {\n  content: \"\\E007\";\n}\n.glyphicon-user:before {\n  content: \"\\E008\";\n}\n.glyphicon-film:before {\n  content: \"\\E009\";\n}\n.glyphicon-th-large:before {\n  content: \"\\E010\";\n}\n.glyphicon-th:before {\n  content: \"\\E011\";\n}\n.glyphicon-th-list:before {\n  content: \"\\E012\";\n}\n.glyphicon-ok:before {\n  content: \"\\E013\";\n}\n.glyphicon-remove:before {\n  content: \"\\E014\";\n}\n.glyphicon-zoom-in:before {\n  content: \"\\E015\";\n}\n.glyphicon-zoom-out:before {\n  content: \"\\E016\";\n}\n.glyphicon-off:before {\n  content: \"\\E017\";\n}\n.glyphicon-signal:before {\n  content: \"\\E018\";\n}\n.glyphicon-cog:before {\n  content: \"\\E019\";\n}\n.glyphicon-trash:before {\n  content: \"\\E020\";\n}\n.glyphicon-home:before {\n  content: \"\\E021\";\n}\n.glyphicon-file:before {\n  content: \"\\E022\";\n}\n.glyphicon-time:before {\n  content: \"\\E023\";\n}\n.glyphicon-road:before {\n  content: \"\\E024\";\n}\n.glyphicon-download-alt:before {\n  content: \"\\E025\";\n}\n.glyphicon-download:before {\n  content: \"\\E026\";\n}\n.glyphicon-upload:before {\n  content: \"\\E027\";\n}\n.glyphicon-inbox:before {\n  content: \"\\E028\";\n}\n.glyphicon-play-circle:before {\n  content: \"\\E029\";\n}\n.glyphicon-repeat:before {\n  content: \"\\E030\";\n}\n.glyphicon-refresh:before {\n  content: \"\\E031\";\n}\n.glyphicon-list-alt:before {\n  content: \"\\E032\";\n}\n.glyphicon-lock:before {\n  content: \"\\E033\";\n}\n.glyphicon-flag:before {\n  content: \"\\E034\";\n}\n.glyphicon-headphones:before {\n  content: \"\\E035\";\n}\n.glyphicon-volume-off:before {\n  content: \"\\E036\";\n}\n.glyphicon-volume-down:before {\n  content: \"\\E037\";\n}\n.glyphicon-volume-up:before {\n  content: \"\\E038\";\n}\n.glyphicon-qrcode:before {\n  content: \"\\E039\";\n}\n.glyphicon-barcode:before {\n  content: \"\\E040\";\n}\n.glyphicon-tag:before {\n  content: \"\\E041\";\n}\n.glyphicon-tags:before {\n  content: \"\\E042\";\n}\n.glyphicon-book:before {\n  content: \"\\E043\";\n}\n.glyphicon-bookmark:before {\n  content: \"\\E044\";\n}\n.glyphicon-print:before {\n  content: \"\\E045\";\n}\n.glyphicon-camera:before {\n  content: \"\\E046\";\n}\n.glyphicon-font:before {\n  content: \"\\E047\";\n}\n.glyphicon-bold:before {\n  content: \"\\E048\";\n}\n.glyphicon-italic:before {\n  content: \"\\E049\";\n}\n.glyphicon-text-height:before {\n  content: \"\\E050\";\n}\n.glyphicon-text-width:before {\n  content: \"\\E051\";\n}\n.glyphicon-align-left:before {\n  content: \"\\E052\";\n}\n.glyphicon-align-center:before {\n  content: \"\\E053\";\n}\n.glyphicon-align-right:before {\n  content: \"\\E054\";\n}\n.glyphicon-align-justify:before {\n  content: \"\\E055\";\n}\n.glyphicon-list:before {\n  content: \"\\E056\";\n}\n.glyphicon-indent-left:before {\n  content: \"\\E057\";\n}\n.glyphicon-indent-right:before {\n  content: \"\\E058\";\n}\n.glyphicon-facetime-video:before {\n  content: \"\\E059\";\n}\n.glyphicon-picture:before {\n  content: \"\\E060\";\n}\n.glyphicon-map-marker:before {\n  content: \"\\E062\";\n}\n.glyphicon-adjust:before {\n  content: \"\\E063\";\n}\n.glyphicon-tint:before {\n  content: \"\\E064\";\n}\n.glyphicon-edit:before {\n  content: \"\\E065\";\n}\n.glyphicon-share:before {\n  content: \"\\E066\";\n}\n.glyphicon-check:before {\n  content: \"\\E067\";\n}\n.glyphicon-move:before {\n  content: \"\\E068\";\n}\n.glyphicon-step-backward:before {\n  content: \"\\E069\";\n}\n.glyphicon-fast-backward:before {\n  content: \"\\E070\";\n}\n.glyphicon-backward:before {\n  content: \"\\E071\";\n}\n.glyphicon-play:before {\n  content: \"\\E072\";\n}\n.glyphicon-pause:before {\n  content: \"\\E073\";\n}\n.glyphicon-stop:before {\n  content: \"\\E074\";\n}\n.glyphicon-forward:before {\n  content: \"\\E075\";\n}\n.glyphicon-fast-forward:before {\n  content: \"\\E076\";\n}\n.glyphicon-step-forward:before {\n  content: \"\\E077\";\n}\n.glyphicon-eject:before {\n  content: \"\\E078\";\n}\n.glyphicon-chevron-left:before {\n  content: \"\\E079\";\n}\n.glyphicon-chevron-right:before {\n  content: \"\\E080\";\n}\n.glyphicon-plus-sign:before {\n  content: \"\\E081\";\n}\n.glyphicon-minus-sign:before {\n  content: \"\\E082\";\n}\n.glyphicon-remove-sign:before {\n  content: \"\\E083\";\n}\n.glyphicon-ok-sign:before {\n  content: \"\\E084\";\n}\n.glyphicon-question-sign:before {\n  content: \"\\E085\";\n}\n.glyphicon-info-sign:before {\n  content: \"\\E086\";\n}\n.glyphicon-screenshot:before {\n  content: \"\\E087\";\n}\n.glyphicon-remove-circle:before {\n  content: \"\\E088\";\n}\n.glyphicon-ok-circle:before {\n  content: \"\\E089\";\n}\n.glyphicon-ban-circle:before {\n  content: \"\\E090\";\n}\n.glyphicon-arrow-left:before {\n  content: \"\\E091\";\n}\n.glyphicon-arrow-right:before {\n  content: \"\\E092\";\n}\n.glyphicon-arrow-up:before {\n  content: \"\\E093\";\n}\n.glyphicon-arrow-down:before {\n  content: \"\\E094\";\n}\n.glyphicon-share-alt:before {\n  content: \"\\E095\";\n}\n.glyphicon-resize-full:before {\n  content: \"\\E096\";\n}\n.glyphicon-resize-small:before {\n  content: \"\\E097\";\n}\n.glyphicon-exclamation-sign:before {\n  content: \"\\E101\";\n}\n.glyphicon-gift:before {\n  content: \"\\E102\";\n}\n.glyphicon-leaf:before {\n  content: \"\\E103\";\n}\n.glyphicon-fire:before {\n  content: \"\\E104\";\n}\n.glyphicon-eye-open:before {\n  content: \"\\E105\";\n}\n.glyphicon-eye-close:before {\n  content: \"\\E106\";\n}\n.glyphicon-warning-sign:before {\n  content: \"\\E107\";\n}\n.glyphicon-plane:before {\n  content: \"\\E108\";\n}\n.glyphicon-calendar:before {\n  content: \"\\E109\";\n}\n.glyphicon-random:before {\n  content: \"\\E110\";\n}\n.glyphicon-comment:before {\n  content: \"\\E111\";\n}\n.glyphicon-magnet:before {\n  content: \"\\E112\";\n}\n.glyphicon-chevron-up:before {\n  content: \"\\E113\";\n}\n.glyphicon-chevron-down:before {\n  content: \"\\E114\";\n}\n.glyphicon-retweet:before {\n  content: \"\\E115\";\n}\n.glyphicon-shopping-cart:before {\n  content: \"\\E116\";\n}\n.glyphicon-folder-close:before {\n  content: \"\\E117\";\n}\n.glyphicon-folder-open:before {\n  content: \"\\E118\";\n}\n.glyphicon-resize-vertical:before {\n  content: \"\\E119\";\n}\n.glyphicon-resize-horizontal:before {\n  content: \"\\E120\";\n}\n.glyphicon-hdd:before {\n  content: \"\\E121\";\n}\n.glyphicon-bullhorn:before {\n  content: \"\\E122\";\n}\n.glyphicon-bell:before {\n  content: \"\\E123\";\n}\n.glyphicon-certificate:before {\n  content: \"\\E124\";\n}\n.glyphicon-thumbs-up:before {\n  content: \"\\E125\";\n}\n.glyphicon-thumbs-down:before {\n  content: \"\\E126\";\n}\n.glyphicon-hand-right:before {\n  content: \"\\E127\";\n}\n.glyphicon-hand-left:before {\n  content: \"\\E128\";\n}\n.glyphicon-hand-up:before {\n  content: \"\\E129\";\n}\n.glyphicon-hand-down:before {\n  content: \"\\E130\";\n}\n.glyphicon-circle-arrow-right:before {\n  content: \"\\E131\";\n}\n.glyphicon-circle-arrow-left:before {\n  content: \"\\E132\";\n}\n.glyphicon-circle-arrow-up:before {\n  content: \"\\E133\";\n}\n.glyphicon-circle-arrow-down:before {\n  content: \"\\E134\";\n}\n.glyphicon-globe:before {\n  content: \"\\E135\";\n}\n.glyphicon-wrench:before {\n  content: \"\\E136\";\n}\n.glyphicon-tasks:before {\n  content: \"\\E137\";\n}\n.glyphicon-filter:before {\n  content: \"\\E138\";\n}\n.glyphicon-briefcase:before {\n  content: \"\\E139\";\n}\n.glyphicon-fullscreen:before {\n  content: \"\\E140\";\n}\n.glyphicon-dashboard:before {\n  content: \"\\E141\";\n}\n.glyphicon-paperclip:before {\n  content: \"\\E142\";\n}\n.glyphicon-heart-empty:before {\n  content: \"\\E143\";\n}\n.glyphicon-link:before {\n  content: \"\\E144\";\n}\n.glyphicon-phone:before {\n  content: \"\\E145\";\n}\n.glyphicon-pushpin:before {\n  content: \"\\E146\";\n}\n.glyphicon-usd:before {\n  content: \"\\E148\";\n}\n.glyphicon-gbp:before {\n  content: \"\\E149\";\n}\n.glyphicon-sort:before {\n  content: \"\\E150\";\n}\n.glyphicon-sort-by-alphabet:before {\n  content: \"\\E151\";\n}\n.glyphicon-sort-by-alphabet-alt:before {\n  content: \"\\E152\";\n}\n.glyphicon-sort-by-order:before {\n  content: \"\\E153\";\n}\n.glyphicon-sort-by-order-alt:before {\n  content: \"\\E154\";\n}\n.glyphicon-sort-by-attributes:before {\n  content: \"\\E155\";\n}\n.glyphicon-sort-by-attributes-alt:before {\n  content: \"\\E156\";\n}\n.glyphicon-unchecked:before {\n  content: \"\\E157\";\n}\n.glyphicon-expand:before {\n  content: \"\\E158\";\n}\n.glyphicon-collapse-down:before {\n  content: \"\\E159\";\n}\n.glyphicon-collapse-up:before {\n  content: \"\\E160\";\n}\n.glyphicon-log-in:before {\n  content: \"\\E161\";\n}\n.glyphicon-flash:before {\n  content: \"\\E162\";\n}\n.glyphicon-log-out:before {\n  content: \"\\E163\";\n}\n.glyphicon-new-window:before {\n  content: \"\\E164\";\n}\n.glyphicon-record:before {\n  content: \"\\E165\";\n}\n.glyphicon-save:before {\n  content: \"\\E166\";\n}\n.glyphicon-open:before {\n  content: \"\\E167\";\n}\n.glyphicon-saved:before {\n  content: \"\\E168\";\n}\n.glyphicon-import:before {\n  content: \"\\E169\";\n}\n.glyphicon-export:before {\n  content: \"\\E170\";\n}\n.glyphicon-send:before {\n  content: \"\\E171\";\n}\n.glyphicon-floppy-disk:before {\n  content: \"\\E172\";\n}\n.glyphicon-floppy-saved:before {\n  content: \"\\E173\";\n}\n.glyphicon-floppy-remove:before {\n  content: \"\\E174\";\n}\n.glyphicon-floppy-save:before {\n  content: \"\\E175\";\n}\n.glyphicon-floppy-open:before {\n  content: \"\\E176\";\n}\n.glyphicon-credit-card:before {\n  content: \"\\E177\";\n}\n.glyphicon-transfer:before {\n  content: \"\\E178\";\n}\n.glyphicon-cutlery:before {\n  content: \"\\E179\";\n}\n.glyphicon-header:before {\n  content: \"\\E180\";\n}\n.glyphicon-compressed:before {\n  content: \"\\E181\";\n}\n.glyphicon-earphone:before {\n  content: \"\\E182\";\n}\n.glyphicon-phone-alt:before {\n  content: \"\\E183\";\n}\n.glyphicon-tower:before {\n  content: \"\\E184\";\n}\n.glyphicon-stats:before {\n  content: \"\\E185\";\n}\n.glyphicon-sd-video:before {\n  content: \"\\E186\";\n}\n.glyphicon-hd-video:before {\n  content: \"\\E187\";\n}\n.glyphicon-subtitles:before {\n  content: \"\\E188\";\n}\n.glyphicon-sound-stereo:before {\n  content: \"\\E189\";\n}\n.glyphicon-sound-dolby:before {\n  content: \"\\E190\";\n}\n.glyphicon-sound-5-1:before {\n  content: \"\\E191\";\n}\n.glyphicon-sound-6-1:before {\n  content: \"\\E192\";\n}\n.glyphicon-sound-7-1:before {\n  content: \"\\E193\";\n}\n.glyphicon-copyright-mark:before {\n  content: \"\\E194\";\n}\n.glyphicon-registration-mark:before {\n  content: \"\\E195\";\n}\n.glyphicon-cloud-download:before {\n  content: \"\\E197\";\n}\n.glyphicon-cloud-upload:before {\n  content: \"\\E198\";\n}\n.glyphicon-tree-conifer:before {\n  content: \"\\E199\";\n}\n.glyphicon-tree-deciduous:before {\n  content: \"\\E200\";\n}\n.glyphicon-cd:before {\n  content: \"\\E201\";\n}\n.glyphicon-save-file:before {\n  content: \"\\E202\";\n}\n.glyphicon-open-file:before {\n  content: \"\\E203\";\n}\n.glyphicon-level-up:before {\n  content: \"\\E204\";\n}\n.glyphicon-copy:before {\n  content: \"\\E205\";\n}\n.glyphicon-paste:before {\n  content: \"\\E206\";\n}\n.glyphicon-alert:before {\n  content: \"\\E209\";\n}\n.glyphicon-equalizer:before {\n  content: \"\\E210\";\n}\n.glyphicon-king:before {\n  content: \"\\E211\";\n}\n.glyphicon-queen:before {\n  content: \"\\E212\";\n}\n.glyphicon-pawn:before {\n  content: \"\\E213\";\n}\n.glyphicon-bishop:before {\n  content: \"\\E214\";\n}\n.glyphicon-knight:before {\n  content: \"\\E215\";\n}\n.glyphicon-baby-formula:before {\n  content: \"\\E216\";\n}\n.glyphicon-tent:before {\n  content: \"\\26FA\";\n}\n.glyphicon-blackboard:before {\n  content: \"\\E218\";\n}\n.glyphicon-bed:before {\n  content: \"\\E219\";\n}\n.glyphicon-apple:before {\n  content: \"\\F8FF\";\n}\n.glyphicon-erase:before {\n  content: \"\\E221\";\n}\n.glyphicon-hourglass:before {\n  content: \"\\231B\";\n}\n.glyphicon-lamp:before {\n  content: \"\\E223\";\n}\n.glyphicon-duplicate:before {\n  content: \"\\E224\";\n}\n.glyphicon-piggy-bank:before {\n  content: \"\\E225\";\n}\n.glyphicon-scissors:before {\n  content: \"\\E226\";\n}\n.glyphicon-bitcoin:before {\n  content: \"\\E227\";\n}\n.glyphicon-btc:before {\n  content: \"\\E227\";\n}\n.glyphicon-xbt:before {\n  content: \"\\E227\";\n}\n.glyphicon-yen:before {\n  content: \"\\A5\";\n}\n.glyphicon-jpy:before {\n  content: \"\\A5\";\n}\n.glyphicon-ruble:before {\n  content: \"\\20BD\";\n}\n.glyphicon-rub:before {\n  content: \"\\20BD\";\n}\n.glyphicon-scale:before {\n  content: \"\\E230\";\n}\n.glyphicon-ice-lolly:before {\n  content: \"\\E231\";\n}\n.glyphicon-ice-lolly-tasted:before {\n  content: \"\\E232\";\n}\n.glyphicon-education:before {\n  content: \"\\E233\";\n}\n.glyphicon-option-horizontal:before {\n  content: \"\\E234\";\n}\n.glyphicon-option-vertical:before {\n  content: \"\\E235\";\n}\n.glyphicon-menu-hamburger:before {\n  content: \"\\E236\";\n}\n.glyphicon-modal-window:before {\n  content: \"\\E237\";\n}\n.glyphicon-oil:before {\n  content: \"\\E238\";\n}\n.glyphicon-grain:before {\n  content: \"\\E239\";\n}\n.glyphicon-sunglasses:before {\n  content: \"\\E240\";\n}\n.glyphicon-text-size:before {\n  content: \"\\E241\";\n}\n.glyphicon-text-color:before {\n  content: \"\\E242\";\n}\n.glyphicon-text-background:before {\n  content: \"\\E243\";\n}\n.glyphicon-object-align-top:before {\n  content: \"\\E244\";\n}\n.glyphicon-object-align-bottom:before {\n  content: \"\\E245\";\n}\n.glyphicon-object-align-horizontal:before {\n  content: \"\\E246\";\n}\n.glyphicon-object-align-left:before {\n  content: \"\\E247\";\n}\n.glyphicon-object-align-vertical:before {\n  content: \"\\E248\";\n}\n.glyphicon-object-align-right:before {\n  content: \"\\E249\";\n}\n.glyphicon-triangle-right:before {\n  content: \"\\E250\";\n}\n.glyphicon-triangle-left:before {\n  content: \"\\E251\";\n}\n.glyphicon-triangle-bottom:before {\n  content: \"\\E252\";\n}\n.glyphicon-triangle-top:before {\n  content: \"\\E253\";\n}\n.glyphicon-console:before {\n  content: \"\\E254\";\n}\n.glyphicon-superscript:before {\n  content: \"\\E255\";\n}\n.glyphicon-subscript:before {\n  content: \"\\E256\";\n}\n.glyphicon-menu-left:before {\n  content: \"\\E257\";\n}\n.glyphicon-menu-right:before {\n  content: \"\\E258\";\n}\n.glyphicon-menu-down:before {\n  content: \"\\E259\";\n}\n.glyphicon-menu-up:before {\n  content: \"\\E260\";\n}\n.caret {\n  display: inline-block;\n  width: 0;\n  height: 0;\n  margin-left: 2px;\n  vertical-align: middle;\n  border-top: 4px dashed;\n  border-top: 4px solid \\9;\n  border-right: 4px solid transparent;\n  border-left: 4px solid transparent;\n}\n.dropup,\n.dropdown {\n  position: relative;\n}\n.dropdown-toggle:focus {\n  outline: 0;\n}\n.dropdown-menu {\n  position: absolute;\n  top: 100%;\n  left: 0;\n  z-index: 1000;\n  display: none;\n  float: left;\n  min-width: 160px;\n  padding: 5px 0;\n  margin: 2px 0 0;\n  list-style: none;\n  font-size: 14px;\n  text-align: left;\n  background-color: #fff;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.15);\n  border-radius: 4px;\n  -webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);\n  background-clip: padding-box;\n}\n.dropdown-menu.pull-right {\n  right: 0;\n  left: auto;\n}\n.dropdown-menu .divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.dropdown-menu > li > a {\n  display: block;\n  padding: 3px 20px;\n  clear: both;\n  font-weight: normal;\n  line-height: 1.42857143;\n  color: #333333;\n  white-space: nowrap;\n}\n.dropdown-menu > li > a:hover,\n.dropdown-menu > li > a:focus {\n  text-decoration: none;\n  color: #262626;\n  background-color: #f5f5f5;\n}\n.dropdown-menu > .active > a,\n.dropdown-menu > .active > a:hover,\n.dropdown-menu > .active > a:focus {\n  color: #fff;\n  text-decoration: none;\n  outline: 0;\n  background-color: #337ab7;\n}\n.dropdown-menu > .disabled > a,\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  color: #777777;\n}\n.dropdown-menu > .disabled > a:hover,\n.dropdown-menu > .disabled > a:focus {\n  text-decoration: none;\n  background-color: transparent;\n  background-image: none;\n  filter: progid:DXImageTransform.Microsoft.gradient(enabled = false);\n  cursor: not-allowed;\n}\n.open > .dropdown-menu {\n  display: block;\n}\n.open > a {\n  outline: 0;\n}\n.dropdown-menu-right {\n  left: auto;\n  right: 0;\n}\n.dropdown-menu-left {\n  left: 0;\n  right: auto;\n}\n.dropdown-header {\n  display: block;\n  padding: 3px 20px;\n  font-size: 12px;\n  line-height: 1.42857143;\n  color: #777777;\n  white-space: nowrap;\n}\n.dropdown-backdrop {\n  position: fixed;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  top: 0;\n  z-index: 990;\n}\n.pull-right > .dropdown-menu {\n  right: 0;\n  left: auto;\n}\n.dropup .caret,\n.navbar-fixed-bottom .dropdown .caret {\n  border-top: 0;\n  border-bottom: 4px dashed;\n  border-bottom: 4px solid \\9;\n  content: \"\";\n}\n.dropup .dropdown-menu,\n.navbar-fixed-bottom .dropdown .dropdown-menu {\n  top: auto;\n  bottom: 100%;\n  margin-bottom: 2px;\n}\n@media (min-width: 768px) {\n  .navbar-right .dropdown-menu {\n    left: auto;\n    right: 0;\n  }\n  .navbar-right .dropdown-menu-left {\n    left: 0;\n    right: auto;\n  }\n}\n.btn-group,\n.btn-group-vertical {\n  position: relative;\n  display: inline-block;\n  vertical-align: middle;\n}\n.btn-group > .btn,\n.btn-group-vertical > .btn {\n  position: relative;\n  float: left;\n}\n.btn-group > .btn:hover,\n.btn-group-vertical > .btn:hover,\n.btn-group > .btn:focus,\n.btn-group-vertical > .btn:focus,\n.btn-group > .btn:active,\n.btn-group-vertical > .btn:active,\n.btn-group > .btn.active,\n.btn-group-vertical > .btn.active {\n  z-index: 2;\n}\n.btn-group .btn + .btn,\n.btn-group .btn + .btn-group,\n.btn-group .btn-group + .btn,\n.btn-group .btn-group + .btn-group {\n  margin-left: -1px;\n}\n.btn-toolbar {\n  margin-left: -5px;\n}\n.btn-toolbar .btn,\n.btn-toolbar .btn-group,\n.btn-toolbar .input-group {\n  float: left;\n}\n.btn-toolbar > .btn,\n.btn-toolbar > .btn-group,\n.btn-toolbar > .input-group {\n  margin-left: 5px;\n}\n.btn-group > .btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {\n  border-radius: 0;\n}\n.btn-group > .btn:first-child {\n  margin-left: 0;\n}\n.btn-group > .btn:first-child:not(:last-child):not(.dropdown-toggle) {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group > .btn:last-child:not(:first-child),\n.btn-group > .dropdown-toggle:not(:first-child) {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group > .btn-group {\n  float: left;\n}\n.btn-group > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.btn-group > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group .dropdown-toggle:active,\n.btn-group.open .dropdown-toggle {\n  outline: 0;\n}\n.btn-group > .btn + .dropdown-toggle {\n  padding-left: 8px;\n  padding-right: 8px;\n}\n.btn-group > .btn-lg + .dropdown-toggle {\n  padding-left: 12px;\n  padding-right: 12px;\n}\n.btn-group.open .dropdown-toggle {\n  -webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n  box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);\n}\n.btn-group.open .dropdown-toggle.btn-link {\n  -webkit-box-shadow: none;\n  box-shadow: none;\n}\n.btn .caret {\n  margin-left: 0;\n}\n.btn-lg .caret {\n  border-width: 5px 5px 0;\n  border-bottom-width: 0;\n}\n.dropup .btn-lg .caret {\n  border-width: 0 5px 5px;\n}\n.btn-group-vertical > .btn,\n.btn-group-vertical > .btn-group,\n.btn-group-vertical > .btn-group > .btn {\n  display: block;\n  float: none;\n  width: 100%;\n  max-width: 100%;\n}\n.btn-group-vertical > .btn-group > .btn {\n  float: none;\n}\n.btn-group-vertical > .btn + .btn,\n.btn-group-vertical > .btn + .btn-group,\n.btn-group-vertical > .btn-group + .btn,\n.btn-group-vertical > .btn-group + .btn-group {\n  margin-top: -1px;\n  margin-left: 0;\n}\n.btn-group-vertical > .btn:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn:first-child:not(:last-child) {\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn:last-child:not(:first-child) {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\n.btn-group-vertical > .btn-group:not(:first-child):not(:last-child) > .btn {\n  border-radius: 0;\n}\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .btn:last-child,\n.btn-group-vertical > .btn-group:first-child:not(:last-child) > .dropdown-toggle {\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.btn-group-vertical > .btn-group:last-child:not(:first-child) > .btn:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.btn-group-justified {\n  display: table;\n  width: 100%;\n  table-layout: fixed;\n  border-collapse: separate;\n}\n.btn-group-justified > .btn,\n.btn-group-justified > .btn-group {\n  float: none;\n  display: table-cell;\n  width: 1%;\n}\n.btn-group-justified > .btn-group .btn {\n  width: 100%;\n}\n.btn-group-justified > .btn-group .dropdown-menu {\n  left: auto;\n}\n[data-toggle=\"buttons\"] > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"radio\"],\n[data-toggle=\"buttons\"] > .btn input[type=\"checkbox\"],\n[data-toggle=\"buttons\"] > .btn-group > .btn input[type=\"checkbox\"] {\n  position: absolute;\n  clip: rect(0, 0, 0, 0);\n  pointer-events: none;\n}\n.input-group {\n  position: relative;\n  display: table;\n  border-collapse: separate;\n}\n.input-group[class*=\"col-\"] {\n  float: none;\n  padding-left: 0;\n  padding-right: 0;\n}\n.input-group .form-control {\n  position: relative;\n  z-index: 2;\n  float: left;\n  width: 100%;\n  margin-bottom: 0;\n}\n.input-group .form-control:focus {\n  z-index: 3;\n}\n.input-group-lg > .form-control,\n.input-group-lg > .input-group-addon,\n.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n  border-radius: 6px;\n}\nselect.input-group-lg > .form-control,\nselect.input-group-lg > .input-group-addon,\nselect.input-group-lg > .input-group-btn > .btn {\n  height: 46px;\n  line-height: 46px;\n}\ntextarea.input-group-lg > .form-control,\ntextarea.input-group-lg > .input-group-addon,\ntextarea.input-group-lg > .input-group-btn > .btn,\nselect[multiple].input-group-lg > .form-control,\nselect[multiple].input-group-lg > .input-group-addon,\nselect[multiple].input-group-lg > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-sm > .form-control,\n.input-group-sm > .input-group-addon,\n.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n  border-radius: 3px;\n}\nselect.input-group-sm > .form-control,\nselect.input-group-sm > .input-group-addon,\nselect.input-group-sm > .input-group-btn > .btn {\n  height: 30px;\n  line-height: 30px;\n}\ntextarea.input-group-sm > .form-control,\ntextarea.input-group-sm > .input-group-addon,\ntextarea.input-group-sm > .input-group-btn > .btn,\nselect[multiple].input-group-sm > .form-control,\nselect[multiple].input-group-sm > .input-group-addon,\nselect[multiple].input-group-sm > .input-group-btn > .btn {\n  height: auto;\n}\n.input-group-addon,\n.input-group-btn,\n.input-group .form-control {\n  display: table-cell;\n}\n.input-group-addon:not(:first-child):not(:last-child),\n.input-group-btn:not(:first-child):not(:last-child),\n.input-group .form-control:not(:first-child):not(:last-child) {\n  border-radius: 0;\n}\n.input-group-addon,\n.input-group-btn {\n  width: 1%;\n  white-space: nowrap;\n  vertical-align: middle;\n}\n.input-group-addon {\n  padding: 6px 12px;\n  font-size: 14px;\n  font-weight: normal;\n  line-height: 1;\n  color: #555555;\n  text-align: center;\n  background-color: #eeeeee;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n.input-group-addon.input-sm {\n  padding: 5px 10px;\n  font-size: 12px;\n  border-radius: 3px;\n}\n.input-group-addon.input-lg {\n  padding: 10px 16px;\n  font-size: 18px;\n  border-radius: 6px;\n}\n.input-group-addon input[type=\"radio\"],\n.input-group-addon input[type=\"checkbox\"] {\n  margin-top: 0;\n}\n.input-group .form-control:first-child,\n.input-group-addon:first-child,\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group > .btn,\n.input-group-btn:first-child > .dropdown-toggle,\n.input-group-btn:last-child > .btn:not(:last-child):not(.dropdown-toggle),\n.input-group-btn:last-child > .btn-group:not(:last-child) > .btn {\n  border-bottom-right-radius: 0;\n  border-top-right-radius: 0;\n}\n.input-group-addon:first-child {\n  border-right: 0;\n}\n.input-group .form-control:last-child,\n.input-group-addon:last-child,\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group > .btn,\n.input-group-btn:last-child > .dropdown-toggle,\n.input-group-btn:first-child > .btn:not(:first-child),\n.input-group-btn:first-child > .btn-group:not(:first-child) > .btn {\n  border-bottom-left-radius: 0;\n  border-top-left-radius: 0;\n}\n.input-group-addon:last-child {\n  border-left: 0;\n}\n.input-group-btn {\n  position: relative;\n  font-size: 0;\n  white-space: nowrap;\n}\n.input-group-btn > .btn {\n  position: relative;\n}\n.input-group-btn > .btn + .btn {\n  margin-left: -1px;\n}\n.input-group-btn > .btn:hover,\n.input-group-btn > .btn:focus,\n.input-group-btn > .btn:active {\n  z-index: 2;\n}\n.input-group-btn:first-child > .btn,\n.input-group-btn:first-child > .btn-group {\n  margin-right: -1px;\n}\n.input-group-btn:last-child > .btn,\n.input-group-btn:last-child > .btn-group {\n  z-index: 2;\n  margin-left: -1px;\n}\n.nav {\n  margin-bottom: 0;\n  padding-left: 0;\n  list-style: none;\n}\n.nav > li {\n  position: relative;\n  display: block;\n}\n.nav > li > a {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n}\n.nav > li > a:hover,\n.nav > li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n.nav > li.disabled > a {\n  color: #777777;\n}\n.nav > li.disabled > a:hover,\n.nav > li.disabled > a:focus {\n  color: #777777;\n  text-decoration: none;\n  background-color: transparent;\n  cursor: not-allowed;\n}\n.nav .open > a,\n.nav .open > a:hover,\n.nav .open > a:focus {\n  background-color: #eeeeee;\n  border-color: #337ab7;\n}\n.nav .nav-divider {\n  height: 1px;\n  margin: 9px 0;\n  overflow: hidden;\n  background-color: #e5e5e5;\n}\n.nav > li > a > img {\n  max-width: none;\n}\n.nav-tabs {\n  border-bottom: 1px solid #ddd;\n}\n.nav-tabs > li {\n  float: left;\n  margin-bottom: -1px;\n}\n.nav-tabs > li > a {\n  margin-right: 2px;\n  line-height: 1.42857143;\n  border: 1px solid transparent;\n  border-radius: 4px 4px 0 0;\n}\n.nav-tabs > li > a:hover {\n  border-color: #eeeeee #eeeeee #ddd;\n}\n.nav-tabs > li.active > a,\n.nav-tabs > li.active > a:hover,\n.nav-tabs > li.active > a:focus {\n  color: #555555;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-bottom-color: transparent;\n  cursor: default;\n}\n.nav-tabs.nav-justified {\n  width: 100%;\n  border-bottom: 0;\n}\n.nav-tabs.nav-justified > li {\n  float: none;\n}\n.nav-tabs.nav-justified > li > a {\n  text-align: center;\n  margin-bottom: 5px;\n}\n.nav-tabs.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-tabs.nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs.nav-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs.nav-justified > .active > a,\n.nav-tabs.nav-justified > .active > a:hover,\n.nav-tabs.nav-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs.nav-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs.nav-justified > .active > a,\n  .nav-tabs.nav-justified > .active > a:hover,\n  .nav-tabs.nav-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.nav-pills > li {\n  float: left;\n}\n.nav-pills > li > a {\n  border-radius: 4px;\n}\n.nav-pills > li + li {\n  margin-left: 2px;\n}\n.nav-pills > li.active > a,\n.nav-pills > li.active > a:hover,\n.nav-pills > li.active > a:focus {\n  color: #fff;\n  background-color: #337ab7;\n}\n.nav-stacked > li {\n  float: none;\n}\n.nav-stacked > li + li {\n  margin-top: 2px;\n  margin-left: 0;\n}\n.nav-justified {\n  width: 100%;\n}\n.nav-justified > li {\n  float: none;\n}\n.nav-justified > li > a {\n  text-align: center;\n  margin-bottom: 5px;\n}\n.nav-justified > .dropdown .dropdown-menu {\n  top: auto;\n  left: auto;\n}\n@media (min-width: 768px) {\n  .nav-justified > li {\n    display: table-cell;\n    width: 1%;\n  }\n  .nav-justified > li > a {\n    margin-bottom: 0;\n  }\n}\n.nav-tabs-justified {\n  border-bottom: 0;\n}\n.nav-tabs-justified > li > a {\n  margin-right: 0;\n  border-radius: 4px;\n}\n.nav-tabs-justified > .active > a,\n.nav-tabs-justified > .active > a:hover,\n.nav-tabs-justified > .active > a:focus {\n  border: 1px solid #ddd;\n}\n@media (min-width: 768px) {\n  .nav-tabs-justified > li > a {\n    border-bottom: 1px solid #ddd;\n    border-radius: 4px 4px 0 0;\n  }\n  .nav-tabs-justified > .active > a,\n  .nav-tabs-justified > .active > a:hover,\n  .nav-tabs-justified > .active > a:focus {\n    border-bottom-color: #fff;\n  }\n}\n.tab-content > .tab-pane {\n  display: none;\n}\n.tab-content > .active {\n  display: block;\n}\n.nav-tabs .dropdown-menu {\n  margin-top: -1px;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.navbar {\n  position: relative;\n  min-height: 50px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n}\n@media (min-width: 768px) {\n  .navbar {\n    border-radius: 4px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-header {\n    float: left;\n  }\n}\n.navbar-collapse {\n  overflow-x: visible;\n  padding-right: 15px;\n  padding-left: 15px;\n  border-top: 1px solid transparent;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);\n  -webkit-overflow-scrolling: touch;\n}\n.navbar-collapse.in {\n  overflow-y: auto;\n}\n@media (min-width: 768px) {\n  .navbar-collapse {\n    width: auto;\n    border-top: 0;\n    box-shadow: none;\n  }\n  .navbar-collapse.collapse {\n    display: block !important;\n    height: auto !important;\n    padding-bottom: 0;\n    overflow: visible !important;\n  }\n  .navbar-collapse.in {\n    overflow-y: visible;\n  }\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-static-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    padding-left: 0;\n    padding-right: 0;\n  }\n}\n.navbar-fixed-top .navbar-collapse,\n.navbar-fixed-bottom .navbar-collapse {\n  max-height: 340px;\n}\n@media (max-device-width: 480px) and (orientation: landscape) {\n  .navbar-fixed-top .navbar-collapse,\n  .navbar-fixed-bottom .navbar-collapse {\n    max-height: 200px;\n  }\n}\n.container > .navbar-header,\n.container-fluid > .navbar-header,\n.container > .navbar-collapse,\n.container-fluid > .navbar-collapse {\n  margin-right: -15px;\n  margin-left: -15px;\n}\n@media (min-width: 768px) {\n  .container > .navbar-header,\n  .container-fluid > .navbar-header,\n  .container > .navbar-collapse,\n  .container-fluid > .navbar-collapse {\n    margin-right: 0;\n    margin-left: 0;\n  }\n}\n.navbar-static-top {\n  z-index: 1000;\n  border-width: 0 0 1px;\n}\n@media (min-width: 768px) {\n  .navbar-static-top {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top,\n.navbar-fixed-bottom {\n  position: fixed;\n  right: 0;\n  left: 0;\n  z-index: 1030;\n}\n@media (min-width: 768px) {\n  .navbar-fixed-top,\n  .navbar-fixed-bottom {\n    border-radius: 0;\n  }\n}\n.navbar-fixed-top {\n  top: 0;\n  border-width: 0 0 1px;\n}\n.navbar-fixed-bottom {\n  bottom: 0;\n  margin-bottom: 0;\n  border-width: 1px 0 0;\n}\n.navbar-brand {\n  float: left;\n  padding: 15px 15px;\n  font-size: 18px;\n  line-height: 20px;\n  height: 50px;\n}\n.navbar-brand:hover,\n.navbar-brand:focus {\n  text-decoration: none;\n}\n.navbar-brand > img {\n  display: block;\n}\n@media (min-width: 768px) {\n  .navbar > .container .navbar-brand,\n  .navbar > .container-fluid .navbar-brand {\n    margin-left: -15px;\n  }\n}\n.navbar-toggle {\n  position: relative;\n  float: right;\n  margin-right: 15px;\n  padding: 9px 10px;\n  margin-top: 8px;\n  margin-bottom: 8px;\n  background-color: transparent;\n  background-image: none;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.navbar-toggle:focus {\n  outline: 0;\n}\n.navbar-toggle .icon-bar {\n  display: block;\n  width: 22px;\n  height: 2px;\n  border-radius: 1px;\n}\n.navbar-toggle .icon-bar + .icon-bar {\n  margin-top: 4px;\n}\n@media (min-width: 768px) {\n  .navbar-toggle {\n    display: none;\n  }\n}\n.navbar-nav {\n  margin: 7.5px -15px;\n}\n.navbar-nav > li > a {\n  padding-top: 10px;\n  padding-bottom: 10px;\n  line-height: 20px;\n}\n@media (max-width: 767px) {\n  .navbar-nav .open .dropdown-menu {\n    position: static;\n    float: none;\n    width: auto;\n    margin-top: 0;\n    background-color: transparent;\n    border: 0;\n    box-shadow: none;\n  }\n  .navbar-nav .open .dropdown-menu > li > a,\n  .navbar-nav .open .dropdown-menu .dropdown-header {\n    padding: 5px 15px 5px 25px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a {\n    line-height: 20px;\n  }\n  .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-nav .open .dropdown-menu > li > a:focus {\n    background-image: none;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-nav {\n    float: left;\n    margin: 0;\n  }\n  .navbar-nav > li {\n    float: left;\n  }\n  .navbar-nav > li > a {\n    padding-top: 15px;\n    padding-bottom: 15px;\n  }\n}\n.navbar-form {\n  margin-left: -15px;\n  margin-right: -15px;\n  padding: 10px 15px;\n  border-top: 1px solid transparent;\n  border-bottom: 1px solid transparent;\n  -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n@media (min-width: 768px) {\n  .navbar-form .form-group {\n    display: inline-block;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control {\n    display: inline-block;\n    width: auto;\n    vertical-align: middle;\n  }\n  .navbar-form .form-control-static {\n    display: inline-block;\n  }\n  .navbar-form .input-group {\n    display: inline-table;\n    vertical-align: middle;\n  }\n  .navbar-form .input-group .input-group-addon,\n  .navbar-form .input-group .input-group-btn,\n  .navbar-form .input-group .form-control {\n    width: auto;\n  }\n  .navbar-form .input-group > .form-control {\n    width: 100%;\n  }\n  .navbar-form .control-label {\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio,\n  .navbar-form .checkbox {\n    display: inline-block;\n    margin-top: 0;\n    margin-bottom: 0;\n    vertical-align: middle;\n  }\n  .navbar-form .radio label,\n  .navbar-form .checkbox label {\n    padding-left: 0;\n  }\n  .navbar-form .radio input[type=\"radio\"],\n  .navbar-form .checkbox input[type=\"checkbox\"] {\n    position: relative;\n    margin-left: 0;\n  }\n  .navbar-form .has-feedback .form-control-feedback {\n    top: 0;\n  }\n}\n@media (max-width: 767px) {\n  .navbar-form .form-group {\n    margin-bottom: 5px;\n  }\n  .navbar-form .form-group:last-child {\n    margin-bottom: 0;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-form {\n    width: auto;\n    border: 0;\n    margin-left: 0;\n    margin-right: 0;\n    padding-top: 0;\n    padding-bottom: 0;\n    -webkit-box-shadow: none;\n    box-shadow: none;\n  }\n}\n.navbar-nav > li > .dropdown-menu {\n  margin-top: 0;\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.navbar-fixed-bottom .navbar-nav > li > .dropdown-menu {\n  margin-bottom: 0;\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n  border-bottom-right-radius: 0;\n  border-bottom-left-radius: 0;\n}\n.navbar-btn {\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n.navbar-btn.btn-sm {\n  margin-top: 10px;\n  margin-bottom: 10px;\n}\n.navbar-btn.btn-xs {\n  margin-top: 14px;\n  margin-bottom: 14px;\n}\n.navbar-text {\n  margin-top: 15px;\n  margin-bottom: 15px;\n}\n@media (min-width: 768px) {\n  .navbar-text {\n    float: left;\n    margin-left: 15px;\n    margin-right: 15px;\n  }\n}\n@media (min-width: 768px) {\n  .navbar-left {\n    float: left !important;\n  }\n  .navbar-right {\n    float: right !important;\n    margin-right: -15px;\n  }\n  .navbar-right ~ .navbar-right {\n    margin-right: 0;\n  }\n}\n.navbar-default {\n  background-color: #f8f8f8;\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-brand {\n  color: #777;\n}\n.navbar-default .navbar-brand:hover,\n.navbar-default .navbar-brand:focus {\n  color: #5e5e5e;\n  background-color: transparent;\n}\n.navbar-default .navbar-text {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a {\n  color: #777;\n}\n.navbar-default .navbar-nav > li > a:hover,\n.navbar-default .navbar-nav > li > a:focus {\n  color: #333;\n  background-color: transparent;\n}\n.navbar-default .navbar-nav > .active > a,\n.navbar-default .navbar-nav > .active > a:hover,\n.navbar-default .navbar-nav > .active > a:focus {\n  color: #555;\n  background-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .disabled > a,\n.navbar-default .navbar-nav > .disabled > a:hover,\n.navbar-default .navbar-nav > .disabled > a:focus {\n  color: #ccc;\n  background-color: transparent;\n}\n.navbar-default .navbar-toggle {\n  border-color: #ddd;\n}\n.navbar-default .navbar-toggle:hover,\n.navbar-default .navbar-toggle:focus {\n  background-color: #ddd;\n}\n.navbar-default .navbar-toggle .icon-bar {\n  background-color: #888;\n}\n.navbar-default .navbar-collapse,\n.navbar-default .navbar-form {\n  border-color: #e7e7e7;\n}\n.navbar-default .navbar-nav > .open > a,\n.navbar-default .navbar-nav > .open > a:hover,\n.navbar-default .navbar-nav > .open > a:focus {\n  background-color: #e7e7e7;\n  color: #555;\n}\n@media (max-width: 767px) {\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a {\n    color: #777;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #333;\n    background-color: transparent;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #555;\n    background-color: #e7e7e7;\n  }\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-default .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #ccc;\n    background-color: transparent;\n  }\n}\n.navbar-default .navbar-link {\n  color: #777;\n}\n.navbar-default .navbar-link:hover {\n  color: #333;\n}\n.navbar-default .btn-link {\n  color: #777;\n}\n.navbar-default .btn-link:hover,\n.navbar-default .btn-link:focus {\n  color: #333;\n}\n.navbar-default .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-default .btn-link:hover,\n.navbar-default .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-default .btn-link:focus {\n  color: #ccc;\n}\n.navbar-inverse {\n  background-color: #222;\n  border-color: #080808;\n}\n.navbar-inverse .navbar-brand {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-brand:hover,\n.navbar-inverse .navbar-brand:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-text {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-nav > li > a:hover,\n.navbar-inverse .navbar-nav > li > a:focus {\n  color: #fff;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-nav > .active > a,\n.navbar-inverse .navbar-nav > .active > a:hover,\n.navbar-inverse .navbar-nav > .active > a:focus {\n  color: #fff;\n  background-color: #080808;\n}\n.navbar-inverse .navbar-nav > .disabled > a,\n.navbar-inverse .navbar-nav > .disabled > a:hover,\n.navbar-inverse .navbar-nav > .disabled > a:focus {\n  color: #444;\n  background-color: transparent;\n}\n.navbar-inverse .navbar-toggle {\n  border-color: #333;\n}\n.navbar-inverse .navbar-toggle:hover,\n.navbar-inverse .navbar-toggle:focus {\n  background-color: #333;\n}\n.navbar-inverse .navbar-toggle .icon-bar {\n  background-color: #fff;\n}\n.navbar-inverse .navbar-collapse,\n.navbar-inverse .navbar-form {\n  border-color: #101010;\n}\n.navbar-inverse .navbar-nav > .open > a,\n.navbar-inverse .navbar-nav > .open > a:hover,\n.navbar-inverse .navbar-nav > .open > a:focus {\n  background-color: #080808;\n  color: #fff;\n}\n@media (max-width: 767px) {\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .dropdown-header {\n    border-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu .divider {\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a {\n    color: #9d9d9d;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > li > a:focus {\n    color: #fff;\n    background-color: transparent;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .active > a:focus {\n    color: #fff;\n    background-color: #080808;\n  }\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:hover,\n  .navbar-inverse .navbar-nav .open .dropdown-menu > .disabled > a:focus {\n    color: #444;\n    background-color: transparent;\n  }\n}\n.navbar-inverse .navbar-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .navbar-link:hover {\n  color: #fff;\n}\n.navbar-inverse .btn-link {\n  color: #9d9d9d;\n}\n.navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link:focus {\n  color: #fff;\n}\n.navbar-inverse .btn-link[disabled]:hover,\nfieldset[disabled] .navbar-inverse .btn-link:hover,\n.navbar-inverse .btn-link[disabled]:focus,\nfieldset[disabled] .navbar-inverse .btn-link:focus {\n  color: #444;\n}\n.breadcrumb {\n  padding: 8px 15px;\n  margin-bottom: 20px;\n  list-style: none;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n}\n.breadcrumb > li {\n  display: inline-block;\n}\n.breadcrumb > li + li:before {\n  content: \"/\\A0\";\n  padding: 0 5px;\n  color: #ccc;\n}\n.breadcrumb > .active {\n  color: #777777;\n}\n.pagination {\n  display: inline-block;\n  padding-left: 0;\n  margin: 20px 0;\n  border-radius: 4px;\n}\n.pagination > li {\n  display: inline;\n}\n.pagination > li > a,\n.pagination > li > span {\n  position: relative;\n  float: left;\n  padding: 6px 12px;\n  line-height: 1.42857143;\n  text-decoration: none;\n  color: #337ab7;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  margin-left: -1px;\n}\n.pagination > li:first-child > a,\n.pagination > li:first-child > span {\n  margin-left: 0;\n  border-bottom-left-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.pagination > li:last-child > a,\n.pagination > li:last-child > span {\n  border-bottom-right-radius: 4px;\n  border-top-right-radius: 4px;\n}\n.pagination > li > a:hover,\n.pagination > li > span:hover,\n.pagination > li > a:focus,\n.pagination > li > span:focus {\n  z-index: 2;\n  color: #23527c;\n  background-color: #eeeeee;\n  border-color: #ddd;\n}\n.pagination > .active > a,\n.pagination > .active > span,\n.pagination > .active > a:hover,\n.pagination > .active > span:hover,\n.pagination > .active > a:focus,\n.pagination > .active > span:focus {\n  z-index: 3;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n  cursor: default;\n}\n.pagination > .disabled > span,\n.pagination > .disabled > span:hover,\n.pagination > .disabled > span:focus,\n.pagination > .disabled > a,\n.pagination > .disabled > a:hover,\n.pagination > .disabled > a:focus {\n  color: #777777;\n  background-color: #fff;\n  border-color: #ddd;\n  cursor: not-allowed;\n}\n.pagination-lg > li > a,\n.pagination-lg > li > span {\n  padding: 10px 16px;\n  font-size: 18px;\n  line-height: 1.3333333;\n}\n.pagination-lg > li:first-child > a,\n.pagination-lg > li:first-child > span {\n  border-bottom-left-radius: 6px;\n  border-top-left-radius: 6px;\n}\n.pagination-lg > li:last-child > a,\n.pagination-lg > li:last-child > span {\n  border-bottom-right-radius: 6px;\n  border-top-right-radius: 6px;\n}\n.pagination-sm > li > a,\n.pagination-sm > li > span {\n  padding: 5px 10px;\n  font-size: 12px;\n  line-height: 1.5;\n}\n.pagination-sm > li:first-child > a,\n.pagination-sm > li:first-child > span {\n  border-bottom-left-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.pagination-sm > li:last-child > a,\n.pagination-sm > li:last-child > span {\n  border-bottom-right-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.pager {\n  padding-left: 0;\n  margin: 20px 0;\n  list-style: none;\n  text-align: center;\n}\n.pager li {\n  display: inline;\n}\n.pager li > a,\n.pager li > span {\n  display: inline-block;\n  padding: 5px 14px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 15px;\n}\n.pager li > a:hover,\n.pager li > a:focus {\n  text-decoration: none;\n  background-color: #eeeeee;\n}\n.pager .next > a,\n.pager .next > span {\n  float: right;\n}\n.pager .previous > a,\n.pager .previous > span {\n  float: left;\n}\n.pager .disabled > a,\n.pager .disabled > a:hover,\n.pager .disabled > a:focus,\n.pager .disabled > span {\n  color: #777777;\n  background-color: #fff;\n  cursor: not-allowed;\n}\n.label {\n  display: inline;\n  padding: .2em .6em .3em;\n  font-size: 75%;\n  font-weight: bold;\n  line-height: 1;\n  color: #fff;\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: baseline;\n  border-radius: .25em;\n}\na.label:hover,\na.label:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.label:empty {\n  display: none;\n}\n.btn .label {\n  position: relative;\n  top: -1px;\n}\n.label-default {\n  background-color: #777777;\n}\n.label-default[href]:hover,\n.label-default[href]:focus {\n  background-color: #5e5e5e;\n}\n.label-primary {\n  background-color: #337ab7;\n}\n.label-primary[href]:hover,\n.label-primary[href]:focus {\n  background-color: #286090;\n}\n.label-success {\n  background-color: #5cb85c;\n}\n.label-success[href]:hover,\n.label-success[href]:focus {\n  background-color: #449d44;\n}\n.label-info {\n  background-color: #5bc0de;\n}\n.label-info[href]:hover,\n.label-info[href]:focus {\n  background-color: #31b0d5;\n}\n.label-warning {\n  background-color: #f0ad4e;\n}\n.label-warning[href]:hover,\n.label-warning[href]:focus {\n  background-color: #ec971f;\n}\n.label-danger {\n  background-color: #d9534f;\n}\n.label-danger[href]:hover,\n.label-danger[href]:focus {\n  background-color: #c9302c;\n}\n.badge {\n  display: inline-block;\n  min-width: 10px;\n  padding: 3px 7px;\n  font-size: 12px;\n  font-weight: bold;\n  color: #fff;\n  line-height: 1;\n  vertical-align: middle;\n  white-space: nowrap;\n  text-align: center;\n  background-color: #777777;\n  border-radius: 10px;\n}\n.badge:empty {\n  display: none;\n}\n.btn .badge {\n  position: relative;\n  top: -1px;\n}\n.btn-xs .badge,\n.btn-group-xs > .btn .badge {\n  top: 0;\n  padding: 1px 5px;\n}\na.badge:hover,\na.badge:focus {\n  color: #fff;\n  text-decoration: none;\n  cursor: pointer;\n}\n.list-group-item.active > .badge,\n.nav-pills > .active > a > .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.list-group-item > .badge {\n  float: right;\n}\n.list-group-item > .badge + .badge {\n  margin-right: 5px;\n}\n.nav-pills > li > a > .badge {\n  margin-left: 3px;\n}\n.jumbotron {\n  padding-top: 30px;\n  padding-bottom: 30px;\n  margin-bottom: 30px;\n  color: inherit;\n  background-color: #eeeeee;\n}\n.jumbotron h1,\n.jumbotron .h1 {\n  color: inherit;\n}\n.jumbotron p {\n  margin-bottom: 15px;\n  font-size: 21px;\n  font-weight: 200;\n}\n.jumbotron > hr {\n  border-top-color: #d5d5d5;\n}\n.container .jumbotron,\n.container-fluid .jumbotron {\n  border-radius: 6px;\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.jumbotron .container {\n  max-width: 100%;\n}\n@media screen and (min-width: 768px) {\n  .jumbotron {\n    padding-top: 48px;\n    padding-bottom: 48px;\n  }\n  .container .jumbotron,\n  .container-fluid .jumbotron {\n    padding-left: 60px;\n    padding-right: 60px;\n  }\n  .jumbotron h1,\n  .jumbotron .h1 {\n    font-size: 63px;\n  }\n}\n.thumbnail {\n  display: block;\n  padding: 4px;\n  margin-bottom: 20px;\n  line-height: 1.42857143;\n  background-color: #fff;\n  border: 1px solid #ddd;\n  border-radius: 4px;\n  -webkit-transition: border 0.2s ease-in-out;\n  -o-transition: border 0.2s ease-in-out;\n  transition: border 0.2s ease-in-out;\n}\n.thumbnail > img,\n.thumbnail a > img {\n  margin-left: auto;\n  margin-right: auto;\n}\na.thumbnail:hover,\na.thumbnail:focus,\na.thumbnail.active {\n  border-color: #337ab7;\n}\n.thumbnail .caption {\n  padding: 9px;\n  color: #333333;\n}\n.alert {\n  padding: 15px;\n  margin-bottom: 20px;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert h4 {\n  margin-top: 0;\n  color: inherit;\n}\n.alert .alert-link {\n  font-weight: bold;\n}\n.alert > p,\n.alert > ul {\n  margin-bottom: 0;\n}\n.alert > p + p {\n  margin-top: 5px;\n}\n.alert-dismissable,\n.alert-dismissible {\n  padding-right: 35px;\n}\n.alert-dismissable .close,\n.alert-dismissible .close {\n  position: relative;\n  top: -2px;\n  right: -21px;\n  color: inherit;\n}\n.alert-success {\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n  color: #3c763d;\n}\n.alert-success hr {\n  border-top-color: #c9e2b3;\n}\n.alert-success .alert-link {\n  color: #2b542c;\n}\n.alert-info {\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n  color: #31708f;\n}\n.alert-info hr {\n  border-top-color: #a6e1ec;\n}\n.alert-info .alert-link {\n  color: #245269;\n}\n.alert-warning {\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n  color: #8a6d3b;\n}\n.alert-warning hr {\n  border-top-color: #f7e1b5;\n}\n.alert-warning .alert-link {\n  color: #66512c;\n}\n.alert-danger {\n  background-color: #f2dede;\n  border-color: #ebccd1;\n  color: #a94442;\n}\n.alert-danger hr {\n  border-top-color: #e4b9c0;\n}\n.alert-danger .alert-link {\n  color: #843534;\n}\n@-webkit-keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n@keyframes progress-bar-stripes {\n  from {\n    background-position: 40px 0;\n  }\n  to {\n    background-position: 0 0;\n  }\n}\n.progress {\n  overflow: hidden;\n  height: 20px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n  box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);\n}\n.progress-bar {\n  float: left;\n  width: 0%;\n  height: 100%;\n  font-size: 12px;\n  line-height: 20px;\n  color: #fff;\n  text-align: center;\n  background-color: #337ab7;\n  -webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);\n  -webkit-transition: width 0.6s ease;\n  -o-transition: width 0.6s ease;\n  transition: width 0.6s ease;\n}\n.progress-striped .progress-bar,\n.progress-bar-striped {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-size: 40px 40px;\n}\n.progress.active .progress-bar,\n.progress-bar.active {\n  -webkit-animation: progress-bar-stripes 2s linear infinite;\n  -o-animation: progress-bar-stripes 2s linear infinite;\n  animation: progress-bar-stripes 2s linear infinite;\n}\n.progress-bar-success {\n  background-color: #5cb85c;\n}\n.progress-striped .progress-bar-success {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-info {\n  background-color: #5bc0de;\n}\n.progress-striped .progress-bar-info {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-warning {\n  background-color: #f0ad4e;\n}\n.progress-striped .progress-bar-warning {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.progress-bar-danger {\n  background-color: #d9534f;\n}\n.progress-striped .progress-bar-danger {\n  background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: -o-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n  background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);\n}\n.media {\n  margin-top: 15px;\n}\n.media:first-child {\n  margin-top: 0;\n}\n.media,\n.media-body {\n  zoom: 1;\n  overflow: hidden;\n}\n.media-body {\n  width: 10000px;\n}\n.media-object {\n  display: block;\n}\n.media-object.img-thumbnail {\n  max-width: none;\n}\n.media-right,\n.media > .pull-right {\n  padding-left: 10px;\n}\n.media-left,\n.media > .pull-left {\n  padding-right: 10px;\n}\n.media-left,\n.media-right,\n.media-body {\n  display: table-cell;\n  vertical-align: top;\n}\n.media-middle {\n  vertical-align: middle;\n}\n.media-bottom {\n  vertical-align: bottom;\n}\n.media-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.media-list {\n  padding-left: 0;\n  list-style: none;\n}\n.list-group {\n  margin-bottom: 20px;\n  padding-left: 0;\n}\n.list-group-item {\n  position: relative;\n  display: block;\n  padding: 10px 15px;\n  margin-bottom: -1px;\n  background-color: #fff;\n  border: 1px solid #ddd;\n}\n.list-group-item:first-child {\n  border-top-right-radius: 4px;\n  border-top-left-radius: 4px;\n}\n.list-group-item:last-child {\n  margin-bottom: 0;\n  border-bottom-right-radius: 4px;\n  border-bottom-left-radius: 4px;\n}\na.list-group-item,\nbutton.list-group-item {\n  color: #555;\n}\na.list-group-item .list-group-item-heading,\nbutton.list-group-item .list-group-item-heading {\n  color: #333;\n}\na.list-group-item:hover,\nbutton.list-group-item:hover,\na.list-group-item:focus,\nbutton.list-group-item:focus {\n  text-decoration: none;\n  color: #555;\n  background-color: #f5f5f5;\n}\nbutton.list-group-item {\n  width: 100%;\n  text-align: left;\n}\n.list-group-item.disabled,\n.list-group-item.disabled:hover,\n.list-group-item.disabled:focus {\n  background-color: #eeeeee;\n  color: #777777;\n  cursor: not-allowed;\n}\n.list-group-item.disabled .list-group-item-heading,\n.list-group-item.disabled:hover .list-group-item-heading,\n.list-group-item.disabled:focus .list-group-item-heading {\n  color: inherit;\n}\n.list-group-item.disabled .list-group-item-text,\n.list-group-item.disabled:hover .list-group-item-text,\n.list-group-item.disabled:focus .list-group-item-text {\n  color: #777777;\n}\n.list-group-item.active,\n.list-group-item.active:hover,\n.list-group-item.active:focus {\n  z-index: 2;\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.list-group-item.active .list-group-item-heading,\n.list-group-item.active:hover .list-group-item-heading,\n.list-group-item.active:focus .list-group-item-heading,\n.list-group-item.active .list-group-item-heading > small,\n.list-group-item.active:hover .list-group-item-heading > small,\n.list-group-item.active:focus .list-group-item-heading > small,\n.list-group-item.active .list-group-item-heading > .small,\n.list-group-item.active:hover .list-group-item-heading > .small,\n.list-group-item.active:focus .list-group-item-heading > .small {\n  color: inherit;\n}\n.list-group-item.active .list-group-item-text,\n.list-group-item.active:hover .list-group-item-text,\n.list-group-item.active:focus .list-group-item-text {\n  color: #c7ddef;\n}\n.list-group-item-success {\n  color: #3c763d;\n  background-color: #dff0d8;\n}\na.list-group-item-success,\nbutton.list-group-item-success {\n  color: #3c763d;\n}\na.list-group-item-success .list-group-item-heading,\nbutton.list-group-item-success .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-success:hover,\nbutton.list-group-item-success:hover,\na.list-group-item-success:focus,\nbutton.list-group-item-success:focus {\n  color: #3c763d;\n  background-color: #d0e9c6;\n}\na.list-group-item-success.active,\nbutton.list-group-item-success.active,\na.list-group-item-success.active:hover,\nbutton.list-group-item-success.active:hover,\na.list-group-item-success.active:focus,\nbutton.list-group-item-success.active:focus {\n  color: #fff;\n  background-color: #3c763d;\n  border-color: #3c763d;\n}\n.list-group-item-info {\n  color: #31708f;\n  background-color: #d9edf7;\n}\na.list-group-item-info,\nbutton.list-group-item-info {\n  color: #31708f;\n}\na.list-group-item-info .list-group-item-heading,\nbutton.list-group-item-info .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-info:hover,\nbutton.list-group-item-info:hover,\na.list-group-item-info:focus,\nbutton.list-group-item-info:focus {\n  color: #31708f;\n  background-color: #c4e3f3;\n}\na.list-group-item-info.active,\nbutton.list-group-item-info.active,\na.list-group-item-info.active:hover,\nbutton.list-group-item-info.active:hover,\na.list-group-item-info.active:focus,\nbutton.list-group-item-info.active:focus {\n  color: #fff;\n  background-color: #31708f;\n  border-color: #31708f;\n}\n.list-group-item-warning {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n}\na.list-group-item-warning,\nbutton.list-group-item-warning {\n  color: #8a6d3b;\n}\na.list-group-item-warning .list-group-item-heading,\nbutton.list-group-item-warning .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-warning:hover,\nbutton.list-group-item-warning:hover,\na.list-group-item-warning:focus,\nbutton.list-group-item-warning:focus {\n  color: #8a6d3b;\n  background-color: #faf2cc;\n}\na.list-group-item-warning.active,\nbutton.list-group-item-warning.active,\na.list-group-item-warning.active:hover,\nbutton.list-group-item-warning.active:hover,\na.list-group-item-warning.active:focus,\nbutton.list-group-item-warning.active:focus {\n  color: #fff;\n  background-color: #8a6d3b;\n  border-color: #8a6d3b;\n}\n.list-group-item-danger {\n  color: #a94442;\n  background-color: #f2dede;\n}\na.list-group-item-danger,\nbutton.list-group-item-danger {\n  color: #a94442;\n}\na.list-group-item-danger .list-group-item-heading,\nbutton.list-group-item-danger .list-group-item-heading {\n  color: inherit;\n}\na.list-group-item-danger:hover,\nbutton.list-group-item-danger:hover,\na.list-group-item-danger:focus,\nbutton.list-group-item-danger:focus {\n  color: #a94442;\n  background-color: #ebcccc;\n}\na.list-group-item-danger.active,\nbutton.list-group-item-danger.active,\na.list-group-item-danger.active:hover,\nbutton.list-group-item-danger.active:hover,\na.list-group-item-danger.active:focus,\nbutton.list-group-item-danger.active:focus {\n  color: #fff;\n  background-color: #a94442;\n  border-color: #a94442;\n}\n.list-group-item-heading {\n  margin-top: 0;\n  margin-bottom: 5px;\n}\n.list-group-item-text {\n  margin-bottom: 0;\n  line-height: 1.3;\n}\n.panel {\n  margin-bottom: 20px;\n  background-color: #fff;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  -webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.panel-body {\n  padding: 15px;\n}\n.panel-heading {\n  padding: 10px 15px;\n  border-bottom: 1px solid transparent;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel-heading > .dropdown .dropdown-toggle {\n  color: inherit;\n}\n.panel-title {\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 16px;\n  color: inherit;\n}\n.panel-title > a,\n.panel-title > small,\n.panel-title > .small,\n.panel-title > small > a,\n.panel-title > .small > a {\n  color: inherit;\n}\n.panel-footer {\n  padding: 10px 15px;\n  background-color: #f5f5f5;\n  border-top: 1px solid #ddd;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .list-group,\n.panel > .panel-collapse > .list-group {\n  margin-bottom: 0;\n}\n.panel > .list-group .list-group-item,\n.panel > .panel-collapse > .list-group .list-group-item {\n  border-width: 1px 0;\n  border-radius: 0;\n}\n.panel > .list-group:first-child .list-group-item:first-child,\n.panel > .panel-collapse > .list-group:first-child .list-group-item:first-child {\n  border-top: 0;\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel > .list-group:last-child .list-group-item:last-child,\n.panel > .panel-collapse > .list-group:last-child .list-group-item:last-child {\n  border-bottom: 0;\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .panel-heading + .panel-collapse > .list-group .list-group-item:first-child {\n  border-top-right-radius: 0;\n  border-top-left-radius: 0;\n}\n.panel-heading + .list-group .list-group-item:first-child {\n  border-top-width: 0;\n}\n.list-group + .panel-footer {\n  border-top-width: 0;\n}\n.panel > .table,\n.panel > .table-responsive > .table,\n.panel > .panel-collapse > .table {\n  margin-bottom: 0;\n}\n.panel > .table caption,\n.panel > .table-responsive > .table caption,\n.panel > .panel-collapse > .table caption {\n  padding-left: 15px;\n  padding-right: 15px;\n}\n.panel > .table:first-child,\n.panel > .table-responsive:first-child > .table:first-child {\n  border-top-right-radius: 3px;\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child {\n  border-top-left-radius: 3px;\n  border-top-right-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:first-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:first-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:first-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:first-child {\n  border-top-left-radius: 3px;\n}\n.panel > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child td:last-child,\n.panel > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > thead:first-child > tr:first-child th:last-child,\n.panel > .table:first-child > tbody:first-child > tr:first-child th:last-child,\n.panel > .table-responsive:first-child > .table:first-child > tbody:first-child > tr:first-child th:last-child {\n  border-top-right-radius: 3px;\n}\n.panel > .table:last-child,\n.panel > .table-responsive:last-child > .table:last-child {\n  border-bottom-right-radius: 3px;\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child {\n  border-bottom-left-radius: 3px;\n  border-bottom-right-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:first-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:first-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:first-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:first-child {\n  border-bottom-left-radius: 3px;\n}\n.panel > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child td:last-child,\n.panel > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tbody:last-child > tr:last-child th:last-child,\n.panel > .table:last-child > tfoot:last-child > tr:last-child th:last-child,\n.panel > .table-responsive:last-child > .table:last-child > tfoot:last-child > tr:last-child th:last-child {\n  border-bottom-right-radius: 3px;\n}\n.panel > .panel-body + .table,\n.panel > .panel-body + .table-responsive,\n.panel > .table + .panel-body,\n.panel > .table-responsive + .panel-body {\n  border-top: 1px solid #ddd;\n}\n.panel > .table > tbody:first-child > tr:first-child th,\n.panel > .table > tbody:first-child > tr:first-child td {\n  border-top: 0;\n}\n.panel > .table-bordered,\n.panel > .table-responsive > .table-bordered {\n  border: 0;\n}\n.panel > .table-bordered > thead > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:first-child,\n.panel > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:first-child,\n.panel > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:first-child,\n.panel > .table-bordered > thead > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:first-child,\n.panel > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:first-child,\n.panel > .table-bordered > tfoot > tr > td:first-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:first-child {\n  border-left: 0;\n}\n.panel > .table-bordered > thead > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > th:last-child,\n.panel > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > th:last-child,\n.panel > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > th:last-child,\n.panel > .table-bordered > thead > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > thead > tr > td:last-child,\n.panel > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tbody > tr > td:last-child,\n.panel > .table-bordered > tfoot > tr > td:last-child,\n.panel > .table-responsive > .table-bordered > tfoot > tr > td:last-child {\n  border-right: 0;\n}\n.panel > .table-bordered > thead > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > td,\n.panel > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > td,\n.panel > .table-bordered > thead > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > thead > tr:first-child > th,\n.panel > .table-bordered > tbody > tr:first-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:first-child > th {\n  border-bottom: 0;\n}\n.panel > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > td,\n.panel > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > td,\n.panel > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tbody > tr:last-child > th,\n.panel > .table-bordered > tfoot > tr:last-child > th,\n.panel > .table-responsive > .table-bordered > tfoot > tr:last-child > th {\n  border-bottom: 0;\n}\n.panel > .table-responsive {\n  border: 0;\n  margin-bottom: 0;\n}\n.panel-group {\n  margin-bottom: 20px;\n}\n.panel-group .panel {\n  margin-bottom: 0;\n  border-radius: 4px;\n}\n.panel-group .panel + .panel {\n  margin-top: 5px;\n}\n.panel-group .panel-heading {\n  border-bottom: 0;\n}\n.panel-group .panel-heading + .panel-collapse > .panel-body,\n.panel-group .panel-heading + .panel-collapse > .list-group {\n  border-top: 1px solid #ddd;\n}\n.panel-group .panel-footer {\n  border-top: 0;\n}\n.panel-group .panel-footer + .panel-collapse .panel-body {\n  border-bottom: 1px solid #ddd;\n}\n.panel-default {\n  border-color: #ddd;\n}\n.panel-default > .panel-heading {\n  color: #333333;\n  background-color: #f5f5f5;\n  border-color: #ddd;\n}\n.panel-default > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ddd;\n}\n.panel-default > .panel-heading .badge {\n  color: #f5f5f5;\n  background-color: #333333;\n}\n.panel-default > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ddd;\n}\n.panel-primary {\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading {\n  color: #fff;\n  background-color: #337ab7;\n  border-color: #337ab7;\n}\n.panel-primary > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #337ab7;\n}\n.panel-primary > .panel-heading .badge {\n  color: #337ab7;\n  background-color: #fff;\n}\n.panel-primary > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #337ab7;\n}\n.panel-success {\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading {\n  color: #3c763d;\n  background-color: #dff0d8;\n  border-color: #d6e9c6;\n}\n.panel-success > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #d6e9c6;\n}\n.panel-success > .panel-heading .badge {\n  color: #dff0d8;\n  background-color: #3c763d;\n}\n.panel-success > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #d6e9c6;\n}\n.panel-info {\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading {\n  color: #31708f;\n  background-color: #d9edf7;\n  border-color: #bce8f1;\n}\n.panel-info > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #bce8f1;\n}\n.panel-info > .panel-heading .badge {\n  color: #d9edf7;\n  background-color: #31708f;\n}\n.panel-info > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #bce8f1;\n}\n.panel-warning {\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading {\n  color: #8a6d3b;\n  background-color: #fcf8e3;\n  border-color: #faebcc;\n}\n.panel-warning > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #faebcc;\n}\n.panel-warning > .panel-heading .badge {\n  color: #fcf8e3;\n  background-color: #8a6d3b;\n}\n.panel-warning > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #faebcc;\n}\n.panel-danger {\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n.panel-danger > .panel-heading + .panel-collapse > .panel-body {\n  border-top-color: #ebccd1;\n}\n.panel-danger > .panel-heading .badge {\n  color: #f2dede;\n  background-color: #a94442;\n}\n.panel-danger > .panel-footer + .panel-collapse > .panel-body {\n  border-bottom-color: #ebccd1;\n}\n.well {\n  min-height: 20px;\n  padding: 19px;\n  margin-bottom: 20px;\n  background-color: #f5f5f5;\n  border: 1px solid #e3e3e3;\n  border-radius: 4px;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);\n}\n.well blockquote {\n  border-color: #ddd;\n  border-color: rgba(0, 0, 0, 0.15);\n}\n.well-lg {\n  padding: 24px;\n  border-radius: 6px;\n}\n.well-sm {\n  padding: 9px;\n  border-radius: 3px;\n}\n.close {\n  float: right;\n  font-size: 21px;\n  font-weight: bold;\n  line-height: 1;\n  color: #000;\n  text-shadow: 0 1px 0 #fff;\n  opacity: 0.2;\n  filter: alpha(opacity=20);\n}\n.close:hover,\n.close:focus {\n  color: #000;\n  text-decoration: none;\n  cursor: pointer;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\nbutton.close {\n  padding: 0;\n  cursor: pointer;\n  background: transparent;\n  border: 0;\n  -webkit-appearance: none;\n}\n.modal-open {\n  overflow: hidden;\n}\n.modal {\n  display: none;\n  overflow: hidden;\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1050;\n  -webkit-overflow-scrolling: touch;\n  outline: 0;\n}\n.modal.fade .modal-dialog {\n  -webkit-transform: translate(0, -25%);\n  -ms-transform: translate(0, -25%);\n  -o-transform: translate(0, -25%);\n  transform: translate(0, -25%);\n  -webkit-transition: -webkit-transform 0.3s ease-out;\n  -moz-transition: -moz-transform 0.3s ease-out;\n  -o-transition: -o-transform 0.3s ease-out;\n  transition: transform 0.3s ease-out;\n}\n.modal.in .modal-dialog {\n  -webkit-transform: translate(0, 0);\n  -ms-transform: translate(0, 0);\n  -o-transform: translate(0, 0);\n  transform: translate(0, 0);\n}\n.modal-open .modal {\n  overflow-x: hidden;\n  overflow-y: auto;\n}\n.modal-dialog {\n  position: relative;\n  width: auto;\n  margin: 10px;\n}\n.modal-content {\n  position: relative;\n  background-color: #fff;\n  border: 1px solid #999;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);\n  background-clip: padding-box;\n  outline: 0;\n}\n.modal-backdrop {\n  position: fixed;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  z-index: 1040;\n  background-color: #000;\n}\n.modal-backdrop.fade {\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n.modal-backdrop.in {\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n}\n.modal-header {\n  padding: 15px;\n  border-bottom: 1px solid #e5e5e5;\n}\n.modal-header .close {\n  margin-top: -2px;\n}\n.modal-title {\n  margin: 0;\n  line-height: 1.42857143;\n}\n.modal-body {\n  position: relative;\n  padding: 15px;\n}\n.modal-footer {\n  padding: 15px;\n  text-align: right;\n  border-top: 1px solid #e5e5e5;\n}\n.modal-footer .btn + .btn {\n  margin-left: 5px;\n  margin-bottom: 0;\n}\n.modal-footer .btn-group .btn + .btn {\n  margin-left: -1px;\n}\n.modal-footer .btn-block + .btn-block {\n  margin-left: 0;\n}\n.modal-scrollbar-measure {\n  position: absolute;\n  top: -9999px;\n  width: 50px;\n  height: 50px;\n  overflow: scroll;\n}\n@media (min-width: 768px) {\n  .modal-dialog {\n    width: 600px;\n    margin: 30px auto;\n  }\n  .modal-content {\n    -webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);\n  }\n  .modal-sm {\n    width: 300px;\n  }\n}\n@media (min-width: 992px) {\n  .modal-lg {\n    width: 900px;\n  }\n}\n.tooltip {\n  position: absolute;\n  z-index: 1070;\n  display: block;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 12px;\n  opacity: 0;\n  filter: alpha(opacity=0);\n}\n.tooltip.in {\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n.tooltip.top {\n  margin-top: -3px;\n  padding: 5px 0;\n}\n.tooltip.right {\n  margin-left: 3px;\n  padding: 0 5px;\n}\n.tooltip.bottom {\n  margin-top: 3px;\n  padding: 5px 0;\n}\n.tooltip.left {\n  margin-left: -3px;\n  padding: 0 5px;\n}\n.tooltip-inner {\n  max-width: 200px;\n  padding: 3px 8px;\n  color: #fff;\n  text-align: center;\n  background-color: #000;\n  border-radius: 4px;\n}\n.tooltip-arrow {\n  position: absolute;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.tooltip.top .tooltip-arrow {\n  bottom: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-left .tooltip-arrow {\n  bottom: 0;\n  right: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.top-right .tooltip-arrow {\n  bottom: 0;\n  left: 5px;\n  margin-bottom: -5px;\n  border-width: 5px 5px 0;\n  border-top-color: #000;\n}\n.tooltip.right .tooltip-arrow {\n  top: 50%;\n  left: 0;\n  margin-top: -5px;\n  border-width: 5px 5px 5px 0;\n  border-right-color: #000;\n}\n.tooltip.left .tooltip-arrow {\n  top: 50%;\n  right: 0;\n  margin-top: -5px;\n  border-width: 5px 0 5px 5px;\n  border-left-color: #000;\n}\n.tooltip.bottom .tooltip-arrow {\n  top: 0;\n  left: 50%;\n  margin-left: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-left .tooltip-arrow {\n  top: 0;\n  right: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.tooltip.bottom-right .tooltip-arrow {\n  top: 0;\n  left: 5px;\n  margin-top: -5px;\n  border-width: 0 5px 5px;\n  border-bottom-color: #000;\n}\n.popover {\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 1060;\n  display: none;\n  max-width: 276px;\n  padding: 1px;\n  font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  font-style: normal;\n  font-weight: normal;\n  letter-spacing: normal;\n  line-break: auto;\n  line-height: 1.42857143;\n  text-align: left;\n  text-align: start;\n  text-decoration: none;\n  text-shadow: none;\n  text-transform: none;\n  white-space: normal;\n  word-break: normal;\n  word-spacing: normal;\n  word-wrap: normal;\n  font-size: 14px;\n  background-color: #fff;\n  background-clip: padding-box;\n  border: 1px solid #ccc;\n  border: 1px solid rgba(0, 0, 0, 0.2);\n  border-radius: 6px;\n  -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);\n}\n.popover.top {\n  margin-top: -10px;\n}\n.popover.right {\n  margin-left: 10px;\n}\n.popover.bottom {\n  margin-top: 10px;\n}\n.popover.left {\n  margin-left: -10px;\n}\n.popover-title {\n  margin: 0;\n  padding: 8px 14px;\n  font-size: 14px;\n  background-color: #f7f7f7;\n  border-bottom: 1px solid #ebebeb;\n  border-radius: 5px 5px 0 0;\n}\n.popover-content {\n  padding: 9px 14px;\n}\n.popover > .arrow,\n.popover > .arrow:after {\n  position: absolute;\n  display: block;\n  width: 0;\n  height: 0;\n  border-color: transparent;\n  border-style: solid;\n}\n.popover > .arrow {\n  border-width: 11px;\n}\n.popover > .arrow:after {\n  border-width: 10px;\n  content: \"\";\n}\n.popover.top > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-bottom-width: 0;\n  border-top-color: #999999;\n  border-top-color: rgba(0, 0, 0, 0.25);\n  bottom: -11px;\n}\n.popover.top > .arrow:after {\n  content: \" \";\n  bottom: 1px;\n  margin-left: -10px;\n  border-bottom-width: 0;\n  border-top-color: #fff;\n}\n.popover.right > .arrow {\n  top: 50%;\n  left: -11px;\n  margin-top: -11px;\n  border-left-width: 0;\n  border-right-color: #999999;\n  border-right-color: rgba(0, 0, 0, 0.25);\n}\n.popover.right > .arrow:after {\n  content: \" \";\n  left: 1px;\n  bottom: -10px;\n  border-left-width: 0;\n  border-right-color: #fff;\n}\n.popover.bottom > .arrow {\n  left: 50%;\n  margin-left: -11px;\n  border-top-width: 0;\n  border-bottom-color: #999999;\n  border-bottom-color: rgba(0, 0, 0, 0.25);\n  top: -11px;\n}\n.popover.bottom > .arrow:after {\n  content: \" \";\n  top: 1px;\n  margin-left: -10px;\n  border-top-width: 0;\n  border-bottom-color: #fff;\n}\n.popover.left > .arrow {\n  top: 50%;\n  right: -11px;\n  margin-top: -11px;\n  border-right-width: 0;\n  border-left-color: #999999;\n  border-left-color: rgba(0, 0, 0, 0.25);\n}\n.popover.left > .arrow:after {\n  content: \" \";\n  right: 1px;\n  border-right-width: 0;\n  border-left-color: #fff;\n  bottom: -10px;\n}\n.carousel {\n  position: relative;\n}\n.carousel-inner {\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n}\n.carousel-inner > .item {\n  display: none;\n  position: relative;\n  -webkit-transition: 0.6s ease-in-out left;\n  -o-transition: 0.6s ease-in-out left;\n  transition: 0.6s ease-in-out left;\n}\n.carousel-inner > .item > img,\n.carousel-inner > .item > a > img {\n  line-height: 1;\n}\n@media all and (transform-3d), (-webkit-transform-3d) {\n  .carousel-inner > .item {\n    -webkit-transition: -webkit-transform 0.6s ease-in-out;\n    -moz-transition: -moz-transform 0.6s ease-in-out;\n    -o-transition: -o-transform 0.6s ease-in-out;\n    transition: transform 0.6s ease-in-out;\n    -webkit-backface-visibility: hidden;\n    -moz-backface-visibility: hidden;\n    backface-visibility: hidden;\n    -webkit-perspective: 1000px;\n    -moz-perspective: 1000px;\n    perspective: 1000px;\n  }\n  .carousel-inner > .item.next,\n  .carousel-inner > .item.active.right {\n    -webkit-transform: translate3d(100%, 0, 0);\n    transform: translate3d(100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.prev,\n  .carousel-inner > .item.active.left {\n    -webkit-transform: translate3d(-100%, 0, 0);\n    transform: translate3d(-100%, 0, 0);\n    left: 0;\n  }\n  .carousel-inner > .item.next.left,\n  .carousel-inner > .item.prev.right,\n  .carousel-inner > .item.active {\n    -webkit-transform: translate3d(0, 0, 0);\n    transform: translate3d(0, 0, 0);\n    left: 0;\n  }\n}\n.carousel-inner > .active,\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  display: block;\n}\n.carousel-inner > .active {\n  left: 0;\n}\n.carousel-inner > .next,\n.carousel-inner > .prev {\n  position: absolute;\n  top: 0;\n  width: 100%;\n}\n.carousel-inner > .next {\n  left: 100%;\n}\n.carousel-inner > .prev {\n  left: -100%;\n}\n.carousel-inner > .next.left,\n.carousel-inner > .prev.right {\n  left: 0;\n}\n.carousel-inner > .active.left {\n  left: -100%;\n}\n.carousel-inner > .active.right {\n  left: 100%;\n}\n.carousel-control {\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  width: 15%;\n  opacity: 0.5;\n  filter: alpha(opacity=50);\n  font-size: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n  background-color: rgba(0, 0, 0, 0);\n}\n.carousel-control.left {\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0.0001) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1);\n}\n.carousel-control.right {\n  left: auto;\n  right: 0;\n  background-image: -webkit-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-image: -o-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0%, rgba(0, 0, 0, 0.5) 100%);\n  background-repeat: repeat-x;\n  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1);\n}\n.carousel-control:hover,\n.carousel-control:focus {\n  outline: 0;\n  color: #fff;\n  text-decoration: none;\n  opacity: 0.9;\n  filter: alpha(opacity=90);\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-left,\n.carousel-control .glyphicon-chevron-right {\n  position: absolute;\n  top: 50%;\n  margin-top: -10px;\n  z-index: 5;\n  display: inline-block;\n}\n.carousel-control .icon-prev,\n.carousel-control .glyphicon-chevron-left {\n  left: 50%;\n  margin-left: -10px;\n}\n.carousel-control .icon-next,\n.carousel-control .glyphicon-chevron-right {\n  right: 50%;\n  margin-right: -10px;\n}\n.carousel-control .icon-prev,\n.carousel-control .icon-next {\n  width: 20px;\n  height: 20px;\n  line-height: 1;\n  font-family: serif;\n}\n.carousel-control .icon-prev:before {\n  content: '\\2039';\n}\n.carousel-control .icon-next:before {\n  content: '\\203A';\n}\n.carousel-indicators {\n  position: absolute;\n  bottom: 10px;\n  left: 50%;\n  z-index: 15;\n  width: 60%;\n  margin-left: -30%;\n  padding-left: 0;\n  list-style: none;\n  text-align: center;\n}\n.carousel-indicators li {\n  display: inline-block;\n  width: 10px;\n  height: 10px;\n  margin: 1px;\n  text-indent: -999px;\n  border: 1px solid #fff;\n  border-radius: 10px;\n  cursor: pointer;\n  background-color: #000 \\9;\n  background-color: rgba(0, 0, 0, 0);\n}\n.carousel-indicators .active {\n  margin: 0;\n  width: 12px;\n  height: 12px;\n  background-color: #fff;\n}\n.carousel-caption {\n  position: absolute;\n  left: 15%;\n  right: 15%;\n  bottom: 20px;\n  z-index: 10;\n  padding-top: 20px;\n  padding-bottom: 20px;\n  color: #fff;\n  text-align: center;\n  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);\n}\n.carousel-caption .btn {\n  text-shadow: none;\n}\n@media screen and (min-width: 768px) {\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-prev,\n  .carousel-control .icon-next {\n    width: 30px;\n    height: 30px;\n    margin-top: -10px;\n    font-size: 30px;\n  }\n  .carousel-control .glyphicon-chevron-left,\n  .carousel-control .icon-prev {\n    margin-left: -10px;\n  }\n  .carousel-control .glyphicon-chevron-right,\n  .carousel-control .icon-next {\n    margin-right: -10px;\n  }\n  .carousel-caption {\n    left: 20%;\n    right: 20%;\n    padding-bottom: 30px;\n  }\n  .carousel-indicators {\n    bottom: 20px;\n  }\n}\n.clearfix:before,\n.clearfix:after,\n.dl-horizontal dd:before,\n.dl-horizontal dd:after,\n.container:before,\n.container:after,\n.container-fluid:before,\n.container-fluid:after,\n.row:before,\n.row:after,\n.form-horizontal .form-group:before,\n.form-horizontal .form-group:after,\n.btn-toolbar:before,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:before,\n.btn-group-vertical > .btn-group:after,\n.nav:before,\n.nav:after,\n.navbar:before,\n.navbar:after,\n.navbar-header:before,\n.navbar-header:after,\n.navbar-collapse:before,\n.navbar-collapse:after,\n.pager:before,\n.pager:after,\n.panel-body:before,\n.panel-body:after,\n.modal-header:before,\n.modal-header:after,\n.modal-footer:before,\n.modal-footer:after {\n  content: \" \";\n  display: table;\n}\n.clearfix:after,\n.dl-horizontal dd:after,\n.container:after,\n.container-fluid:after,\n.row:after,\n.form-horizontal .form-group:after,\n.btn-toolbar:after,\n.btn-group-vertical > .btn-group:after,\n.nav:after,\n.navbar:after,\n.navbar-header:after,\n.navbar-collapse:after,\n.pager:after,\n.panel-body:after,\n.modal-header:after,\n.modal-footer:after {\n  clear: both;\n}\n.center-block {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n}\n.pull-right {\n  float: right !important;\n}\n.pull-left {\n  float: left !important;\n}\n.hide {\n  display: none !important;\n}\n.show {\n  display: block !important;\n}\n.invisible {\n  visibility: hidden;\n}\n.text-hide {\n  font: 0/0 a;\n  color: transparent;\n  text-shadow: none;\n  background-color: transparent;\n  border: 0;\n}\n.hidden {\n  display: none !important;\n}\n.affix {\n  position: fixed;\n}\n@-ms-viewport {\n  width: device-width;\n}\n.visible-xs,\n.visible-sm,\n.visible-md,\n.visible-lg {\n  display: none !important;\n}\n.visible-xs-block,\n.visible-xs-inline,\n.visible-xs-inline-block,\n.visible-sm-block,\n.visible-sm-inline,\n.visible-sm-inline-block,\n.visible-md-block,\n.visible-md-inline,\n.visible-md-inline-block,\n.visible-lg-block,\n.visible-lg-inline,\n.visible-lg-inline-block {\n  display: none !important;\n}\n@media (max-width: 767px) {\n  .visible-xs {\n    display: block !important;\n  }\n  table.visible-xs {\n    display: table !important;\n  }\n  tr.visible-xs {\n    display: table-row !important;\n  }\n  th.visible-xs,\n  td.visible-xs {\n    display: table-cell !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-block {\n    display: block !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline {\n    display: inline !important;\n  }\n}\n@media (max-width: 767px) {\n  .visible-xs-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm {\n    display: block !important;\n  }\n  table.visible-sm {\n    display: table !important;\n  }\n  tr.visible-sm {\n    display: table-row !important;\n  }\n  th.visible-sm,\n  td.visible-sm {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-block {\n    display: block !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .visible-sm-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md {\n    display: block !important;\n  }\n  table.visible-md {\n    display: table !important;\n  }\n  tr.visible-md {\n    display: table-row !important;\n  }\n  th.visible-md,\n  td.visible-md {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-block {\n    display: block !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .visible-md-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg {\n    display: block !important;\n  }\n  table.visible-lg {\n    display: table !important;\n  }\n  tr.visible-lg {\n    display: table-row !important;\n  }\n  th.visible-lg,\n  td.visible-lg {\n    display: table-cell !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-block {\n    display: block !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline {\n    display: inline !important;\n  }\n}\n@media (min-width: 1200px) {\n  .visible-lg-inline-block {\n    display: inline-block !important;\n  }\n}\n@media (max-width: 767px) {\n  .hidden-xs {\n    display: none !important;\n  }\n}\n@media (min-width: 768px) and (max-width: 991px) {\n  .hidden-sm {\n    display: none !important;\n  }\n}\n@media (min-width: 992px) and (max-width: 1199px) {\n  .hidden-md {\n    display: none !important;\n  }\n}\n@media (min-width: 1200px) {\n  .hidden-lg {\n    display: none !important;\n  }\n}\n.visible-print {\n  display: none !important;\n}\n@media print {\n  .visible-print {\n    display: block !important;\n  }\n  table.visible-print {\n    display: table !important;\n  }\n  tr.visible-print {\n    display: table-row !important;\n  }\n  th.visible-print,\n  td.visible-print {\n    display: table-cell !important;\n  }\n}\n.visible-print-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-block {\n    display: block !important;\n  }\n}\n.visible-print-inline {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline {\n    display: inline !important;\n  }\n}\n.visible-print-inline-block {\n  display: none !important;\n}\n@media print {\n  .visible-print-inline-block {\n    display: inline-block !important;\n  }\n}\n@media print {\n  .hidden-print {\n    display: none !important;\n  }\n}\n", ""]);
	
	// exports


/***/ },
/* 114 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "f4769f9bdb7466be65088239c12046d1.eot";

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "448c34a56d699c29117adc64c43affeb.woff2";

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "fa2772327f55d8198301fdb8bcfc8158.woff";

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e18bbf611f2a2e43afc071aa2f4e1512.ttf";

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "89889688147bd7575d6327160d64e760.svg";

/***/ },
/* 120 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function createLinkElement(options) {
		var linkElement = document.createElement("link");
		linkElement.rel = "stylesheet";
		insertStyleElement(options, linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement(options);
			update = updateLink.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(122);
	__webpack_require__(123);
	__webpack_require__(124);
	__webpack_require__(125);
	__webpack_require__(126);
	__webpack_require__(127);
	__webpack_require__(128);
	__webpack_require__(129);
	__webpack_require__(130);
	__webpack_require__(131);
	__webpack_require__(132);
	__webpack_require__(133);

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: transition.js v3.3.7
	 * http://getbootstrap.com/javascript/#transitions
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)
	  // ============================================================
	
	  function transitionEnd() {
	    var el = document.createElement('bootstrap')
	
	    var transEndEventNames = {
	      WebkitTransition : 'webkitTransitionEnd',
	      MozTransition    : 'transitionend',
	      OTransition      : 'oTransitionEnd otransitionend',
	      transition       : 'transitionend'
	    }
	
	    for (var name in transEndEventNames) {
	      if (el.style[name] !== undefined) {
	        return { end: transEndEventNames[name] }
	      }
	    }
	
	    return false // explicit for ie8 (  ._.)
	  }
	
	  // http://blog.alexmaccaw.com/css-transitions
	  $.fn.emulateTransitionEnd = function (duration) {
	    var called = false
	    var $el = this
	    $(this).one('bsTransitionEnd', function () { called = true })
	    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }
	    setTimeout(callback, duration)
	    return this
	  }
	
	  $(function () {
	    $.support.transition = transitionEnd()
	
	    if (!$.support.transition) return
	
	    $.event.special.bsTransitionEnd = {
	      bindType: $.support.transition.end,
	      delegateType: $.support.transition.end,
	      handle: function (e) {
	        if ($(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
	      }
	    }
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: alert.js v3.3.7
	 * http://getbootstrap.com/javascript/#alerts
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // ALERT CLASS DEFINITION
	  // ======================
	
	  var dismiss = '[data-dismiss="alert"]'
	  var Alert   = function (el) {
	    $(el).on('click', dismiss, this.close)
	  }
	
	  Alert.VERSION = '3.3.7'
	
	  Alert.TRANSITION_DURATION = 150
	
	  Alert.prototype.close = function (e) {
	    var $this    = $(this)
	    var selector = $this.attr('data-target')
	
	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }
	
	    var $parent = $(selector === '#' ? [] : selector)
	
	    if (e) e.preventDefault()
	
	    if (!$parent.length) {
	      $parent = $this.closest('.alert')
	    }
	
	    $parent.trigger(e = $.Event('close.bs.alert'))
	
	    if (e.isDefaultPrevented()) return
	
	    $parent.removeClass('in')
	
	    function removeElement() {
	      // detach from parent, fire event then clean up data
	      $parent.detach().trigger('closed.bs.alert').remove()
	    }
	
	    $.support.transition && $parent.hasClass('fade') ?
	      $parent
	        .one('bsTransitionEnd', removeElement)
	        .emulateTransitionEnd(Alert.TRANSITION_DURATION) :
	      removeElement()
	  }
	
	
	  // ALERT PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.alert')
	
	      if (!data) $this.data('bs.alert', (data = new Alert(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }
	
	  var old = $.fn.alert
	
	  $.fn.alert             = Plugin
	  $.fn.alert.Constructor = Alert
	
	
	  // ALERT NO CONFLICT
	  // =================
	
	  $.fn.alert.noConflict = function () {
	    $.fn.alert = old
	    return this
	  }
	
	
	  // ALERT DATA-API
	  // ==============
	
	  $(document).on('click.bs.alert.data-api', dismiss, Alert.prototype.close)
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: button.js v3.3.7
	 * http://getbootstrap.com/javascript/#buttons
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // BUTTON PUBLIC CLASS DEFINITION
	  // ==============================
	
	  var Button = function (element, options) {
	    this.$element  = $(element)
	    this.options   = $.extend({}, Button.DEFAULTS, options)
	    this.isLoading = false
	  }
	
	  Button.VERSION  = '3.3.7'
	
	  Button.DEFAULTS = {
	    loadingText: 'loading...'
	  }
	
	  Button.prototype.setState = function (state) {
	    var d    = 'disabled'
	    var $el  = this.$element
	    var val  = $el.is('input') ? 'val' : 'html'
	    var data = $el.data()
	
	    state += 'Text'
	
	    if (data.resetText == null) $el.data('resetText', $el[val]())
	
	    // push to event loop to allow forms to submit
	    setTimeout($.proxy(function () {
	      $el[val](data[state] == null ? this.options[state] : data[state])
	
	      if (state == 'loadingText') {
	        this.isLoading = true
	        $el.addClass(d).attr(d, d).prop(d, true)
	      } else if (this.isLoading) {
	        this.isLoading = false
	        $el.removeClass(d).removeAttr(d).prop(d, false)
	      }
	    }, this), 0)
	  }
	
	  Button.prototype.toggle = function () {
	    var changed = true
	    var $parent = this.$element.closest('[data-toggle="buttons"]')
	
	    if ($parent.length) {
	      var $input = this.$element.find('input')
	      if ($input.prop('type') == 'radio') {
	        if ($input.prop('checked')) changed = false
	        $parent.find('.active').removeClass('active')
	        this.$element.addClass('active')
	      } else if ($input.prop('type') == 'checkbox') {
	        if (($input.prop('checked')) !== this.$element.hasClass('active')) changed = false
	        this.$element.toggleClass('active')
	      }
	      $input.prop('checked', this.$element.hasClass('active'))
	      if (changed) $input.trigger('change')
	    } else {
	      this.$element.attr('aria-pressed', !this.$element.hasClass('active'))
	      this.$element.toggleClass('active')
	    }
	  }
	
	
	  // BUTTON PLUGIN DEFINITION
	  // ========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.button')
	      var options = typeof option == 'object' && option
	
	      if (!data) $this.data('bs.button', (data = new Button(this, options)))
	
	      if (option == 'toggle') data.toggle()
	      else if (option) data.setState(option)
	    })
	  }
	
	  var old = $.fn.button
	
	  $.fn.button             = Plugin
	  $.fn.button.Constructor = Button
	
	
	  // BUTTON NO CONFLICT
	  // ==================
	
	  $.fn.button.noConflict = function () {
	    $.fn.button = old
	    return this
	  }
	
	
	  // BUTTON DATA-API
	  // ===============
	
	  $(document)
	    .on('click.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	      var $btn = $(e.target).closest('.btn')
	      Plugin.call($btn, 'toggle')
	      if (!($(e.target).is('input[type="radio"], input[type="checkbox"]'))) {
	        // Prevent double click on radios, and the double selections (so cancellation) on checkboxes
	        e.preventDefault()
	        // The target component still receive the focus
	        if ($btn.is('input,button')) $btn.trigger('focus')
	        else $btn.find('input:visible,button:visible').first().trigger('focus')
	      }
	    })
	    .on('focus.bs.button.data-api blur.bs.button.data-api', '[data-toggle^="button"]', function (e) {
	      $(e.target).closest('.btn').toggleClass('focus', /^focus(in)?$/.test(e.type))
	    })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: carousel.js v3.3.7
	 * http://getbootstrap.com/javascript/#carousel
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // CAROUSEL CLASS DEFINITION
	  // =========================
	
	  var Carousel = function (element, options) {
	    this.$element    = $(element)
	    this.$indicators = this.$element.find('.carousel-indicators')
	    this.options     = options
	    this.paused      = null
	    this.sliding     = null
	    this.interval    = null
	    this.$active     = null
	    this.$items      = null
	
	    this.options.keyboard && this.$element.on('keydown.bs.carousel', $.proxy(this.keydown, this))
	
	    this.options.pause == 'hover' && !('ontouchstart' in document.documentElement) && this.$element
	      .on('mouseenter.bs.carousel', $.proxy(this.pause, this))
	      .on('mouseleave.bs.carousel', $.proxy(this.cycle, this))
	  }
	
	  Carousel.VERSION  = '3.3.7'
	
	  Carousel.TRANSITION_DURATION = 600
	
	  Carousel.DEFAULTS = {
	    interval: 5000,
	    pause: 'hover',
	    wrap: true,
	    keyboard: true
	  }
	
	  Carousel.prototype.keydown = function (e) {
	    if (/input|textarea/i.test(e.target.tagName)) return
	    switch (e.which) {
	      case 37: this.prev(); break
	      case 39: this.next(); break
	      default: return
	    }
	
	    e.preventDefault()
	  }
	
	  Carousel.prototype.cycle = function (e) {
	    e || (this.paused = false)
	
	    this.interval && clearInterval(this.interval)
	
	    this.options.interval
	      && !this.paused
	      && (this.interval = setInterval($.proxy(this.next, this), this.options.interval))
	
	    return this
	  }
	
	  Carousel.prototype.getItemIndex = function (item) {
	    this.$items = item.parent().children('.item')
	    return this.$items.index(item || this.$active)
	  }
	
	  Carousel.prototype.getItemForDirection = function (direction, active) {
	    var activeIndex = this.getItemIndex(active)
	    var willWrap = (direction == 'prev' && activeIndex === 0)
	                || (direction == 'next' && activeIndex == (this.$items.length - 1))
	    if (willWrap && !this.options.wrap) return active
	    var delta = direction == 'prev' ? -1 : 1
	    var itemIndex = (activeIndex + delta) % this.$items.length
	    return this.$items.eq(itemIndex)
	  }
	
	  Carousel.prototype.to = function (pos) {
	    var that        = this
	    var activeIndex = this.getItemIndex(this.$active = this.$element.find('.item.active'))
	
	    if (pos > (this.$items.length - 1) || pos < 0) return
	
	    if (this.sliding)       return this.$element.one('slid.bs.carousel', function () { that.to(pos) }) // yes, "slid"
	    if (activeIndex == pos) return this.pause().cycle()
	
	    return this.slide(pos > activeIndex ? 'next' : 'prev', this.$items.eq(pos))
	  }
	
	  Carousel.prototype.pause = function (e) {
	    e || (this.paused = true)
	
	    if (this.$element.find('.next, .prev').length && $.support.transition) {
	      this.$element.trigger($.support.transition.end)
	      this.cycle(true)
	    }
	
	    this.interval = clearInterval(this.interval)
	
	    return this
	  }
	
	  Carousel.prototype.next = function () {
	    if (this.sliding) return
	    return this.slide('next')
	  }
	
	  Carousel.prototype.prev = function () {
	    if (this.sliding) return
	    return this.slide('prev')
	  }
	
	  Carousel.prototype.slide = function (type, next) {
	    var $active   = this.$element.find('.item.active')
	    var $next     = next || this.getItemForDirection(type, $active)
	    var isCycling = this.interval
	    var direction = type == 'next' ? 'left' : 'right'
	    var that      = this
	
	    if ($next.hasClass('active')) return (this.sliding = false)
	
	    var relatedTarget = $next[0]
	    var slideEvent = $.Event('slide.bs.carousel', {
	      relatedTarget: relatedTarget,
	      direction: direction
	    })
	    this.$element.trigger(slideEvent)
	    if (slideEvent.isDefaultPrevented()) return
	
	    this.sliding = true
	
	    isCycling && this.pause()
	
	    if (this.$indicators.length) {
	      this.$indicators.find('.active').removeClass('active')
	      var $nextIndicator = $(this.$indicators.children()[this.getItemIndex($next)])
	      $nextIndicator && $nextIndicator.addClass('active')
	    }
	
	    var slidEvent = $.Event('slid.bs.carousel', { relatedTarget: relatedTarget, direction: direction }) // yes, "slid"
	    if ($.support.transition && this.$element.hasClass('slide')) {
	      $next.addClass(type)
	      $next[0].offsetWidth // force reflow
	      $active.addClass(direction)
	      $next.addClass(direction)
	      $active
	        .one('bsTransitionEnd', function () {
	          $next.removeClass([type, direction].join(' ')).addClass('active')
	          $active.removeClass(['active', direction].join(' '))
	          that.sliding = false
	          setTimeout(function () {
	            that.$element.trigger(slidEvent)
	          }, 0)
	        })
	        .emulateTransitionEnd(Carousel.TRANSITION_DURATION)
	    } else {
	      $active.removeClass('active')
	      $next.addClass('active')
	      this.sliding = false
	      this.$element.trigger(slidEvent)
	    }
	
	    isCycling && this.cycle()
	
	    return this
	  }
	
	
	  // CAROUSEL PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.carousel')
	      var options = $.extend({}, Carousel.DEFAULTS, $this.data(), typeof option == 'object' && option)
	      var action  = typeof option == 'string' ? option : options.slide
	
	      if (!data) $this.data('bs.carousel', (data = new Carousel(this, options)))
	      if (typeof option == 'number') data.to(option)
	      else if (action) data[action]()
	      else if (options.interval) data.pause().cycle()
	    })
	  }
	
	  var old = $.fn.carousel
	
	  $.fn.carousel             = Plugin
	  $.fn.carousel.Constructor = Carousel
	
	
	  // CAROUSEL NO CONFLICT
	  // ====================
	
	  $.fn.carousel.noConflict = function () {
	    $.fn.carousel = old
	    return this
	  }
	
	
	  // CAROUSEL DATA-API
	  // =================
	
	  var clickHandler = function (e) {
	    var href
	    var $this   = $(this)
	    var $target = $($this.attr('data-target') || (href = $this.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '')) // strip for ie7
	    if (!$target.hasClass('carousel')) return
	    var options = $.extend({}, $target.data(), $this.data())
	    var slideIndex = $this.attr('data-slide-to')
	    if (slideIndex) options.interval = false
	
	    Plugin.call($target, options)
	
	    if (slideIndex) {
	      $target.data('bs.carousel').to(slideIndex)
	    }
	
	    e.preventDefault()
	  }
	
	  $(document)
	    .on('click.bs.carousel.data-api', '[data-slide]', clickHandler)
	    .on('click.bs.carousel.data-api', '[data-slide-to]', clickHandler)
	
	  $(window).on('load', function () {
	    $('[data-ride="carousel"]').each(function () {
	      var $carousel = $(this)
	      Plugin.call($carousel, $carousel.data())
	    })
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: collapse.js v3.3.7
	 * http://getbootstrap.com/javascript/#collapse
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	/* jshint latedef: false */
	
	+function ($) {
	  'use strict';
	
	  // COLLAPSE PUBLIC CLASS DEFINITION
	  // ================================
	
	  var Collapse = function (element, options) {
	    this.$element      = $(element)
	    this.options       = $.extend({}, Collapse.DEFAULTS, options)
	    this.$trigger      = $('[data-toggle="collapse"][href="#' + element.id + '"],' +
	                           '[data-toggle="collapse"][data-target="#' + element.id + '"]')
	    this.transitioning = null
	
	    if (this.options.parent) {
	      this.$parent = this.getParent()
	    } else {
	      this.addAriaAndCollapsedClass(this.$element, this.$trigger)
	    }
	
	    if (this.options.toggle) this.toggle()
	  }
	
	  Collapse.VERSION  = '3.3.7'
	
	  Collapse.TRANSITION_DURATION = 350
	
	  Collapse.DEFAULTS = {
	    toggle: true
	  }
	
	  Collapse.prototype.dimension = function () {
	    var hasWidth = this.$element.hasClass('width')
	    return hasWidth ? 'width' : 'height'
	  }
	
	  Collapse.prototype.show = function () {
	    if (this.transitioning || this.$element.hasClass('in')) return
	
	    var activesData
	    var actives = this.$parent && this.$parent.children('.panel').children('.in, .collapsing')
	
	    if (actives && actives.length) {
	      activesData = actives.data('bs.collapse')
	      if (activesData && activesData.transitioning) return
	    }
	
	    var startEvent = $.Event('show.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return
	
	    if (actives && actives.length) {
	      Plugin.call(actives, 'hide')
	      activesData || actives.data('bs.collapse', null)
	    }
	
	    var dimension = this.dimension()
	
	    this.$element
	      .removeClass('collapse')
	      .addClass('collapsing')[dimension](0)
	      .attr('aria-expanded', true)
	
	    this.$trigger
	      .removeClass('collapsed')
	      .attr('aria-expanded', true)
	
	    this.transitioning = 1
	
	    var complete = function () {
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse in')[dimension]('')
	      this.transitioning = 0
	      this.$element
	        .trigger('shown.bs.collapse')
	    }
	
	    if (!$.support.transition) return complete.call(this)
	
	    var scrollSize = $.camelCase(['scroll', dimension].join('-'))
	
	    this.$element
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)[dimension](this.$element[0][scrollSize])
	  }
	
	  Collapse.prototype.hide = function () {
	    if (this.transitioning || !this.$element.hasClass('in')) return
	
	    var startEvent = $.Event('hide.bs.collapse')
	    this.$element.trigger(startEvent)
	    if (startEvent.isDefaultPrevented()) return
	
	    var dimension = this.dimension()
	
	    this.$element[dimension](this.$element[dimension]())[0].offsetHeight
	
	    this.$element
	      .addClass('collapsing')
	      .removeClass('collapse in')
	      .attr('aria-expanded', false)
	
	    this.$trigger
	      .addClass('collapsed')
	      .attr('aria-expanded', false)
	
	    this.transitioning = 1
	
	    var complete = function () {
	      this.transitioning = 0
	      this.$element
	        .removeClass('collapsing')
	        .addClass('collapse')
	        .trigger('hidden.bs.collapse')
	    }
	
	    if (!$.support.transition) return complete.call(this)
	
	    this.$element
	      [dimension](0)
	      .one('bsTransitionEnd', $.proxy(complete, this))
	      .emulateTransitionEnd(Collapse.TRANSITION_DURATION)
	  }
	
	  Collapse.prototype.toggle = function () {
	    this[this.$element.hasClass('in') ? 'hide' : 'show']()
	  }
	
	  Collapse.prototype.getParent = function () {
	    return $(this.options.parent)
	      .find('[data-toggle="collapse"][data-parent="' + this.options.parent + '"]')
	      .each($.proxy(function (i, element) {
	        var $element = $(element)
	        this.addAriaAndCollapsedClass(getTargetFromTrigger($element), $element)
	      }, this))
	      .end()
	  }
	
	  Collapse.prototype.addAriaAndCollapsedClass = function ($element, $trigger) {
	    var isOpen = $element.hasClass('in')
	
	    $element.attr('aria-expanded', isOpen)
	    $trigger
	      .toggleClass('collapsed', !isOpen)
	      .attr('aria-expanded', isOpen)
	  }
	
	  function getTargetFromTrigger($trigger) {
	    var href
	    var target = $trigger.attr('data-target')
	      || (href = $trigger.attr('href')) && href.replace(/.*(?=#[^\s]+$)/, '') // strip for ie7
	
	    return $(target)
	  }
	
	
	  // COLLAPSE PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.collapse')
	      var options = $.extend({}, Collapse.DEFAULTS, $this.data(), typeof option == 'object' && option)
	
	      if (!data && options.toggle && /show|hide/.test(option)) options.toggle = false
	      if (!data) $this.data('bs.collapse', (data = new Collapse(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.collapse
	
	  $.fn.collapse             = Plugin
	  $.fn.collapse.Constructor = Collapse
	
	
	  // COLLAPSE NO CONFLICT
	  // ====================
	
	  $.fn.collapse.noConflict = function () {
	    $.fn.collapse = old
	    return this
	  }
	
	
	  // COLLAPSE DATA-API
	  // =================
	
	  $(document).on('click.bs.collapse.data-api', '[data-toggle="collapse"]', function (e) {
	    var $this   = $(this)
	
	    if (!$this.attr('data-target')) e.preventDefault()
	
	    var $target = getTargetFromTrigger($this)
	    var data    = $target.data('bs.collapse')
	    var option  = data ? 'toggle' : $this.data()
	
	    Plugin.call($target, option)
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: dropdown.js v3.3.7
	 * http://getbootstrap.com/javascript/#dropdowns
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // DROPDOWN CLASS DEFINITION
	  // =========================
	
	  var backdrop = '.dropdown-backdrop'
	  var toggle   = '[data-toggle="dropdown"]'
	  var Dropdown = function (element) {
	    $(element).on('click.bs.dropdown', this.toggle)
	  }
	
	  Dropdown.VERSION = '3.3.7'
	
	  function getParent($this) {
	    var selector = $this.attr('data-target')
	
	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && /#[A-Za-z]/.test(selector) && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }
	
	    var $parent = selector && $(selector)
	
	    return $parent && $parent.length ? $parent : $this.parent()
	  }
	
	  function clearMenus(e) {
	    if (e && e.which === 3) return
	    $(backdrop).remove()
	    $(toggle).each(function () {
	      var $this         = $(this)
	      var $parent       = getParent($this)
	      var relatedTarget = { relatedTarget: this }
	
	      if (!$parent.hasClass('open')) return
	
	      if (e && e.type == 'click' && /input|textarea/i.test(e.target.tagName) && $.contains($parent[0], e.target)) return
	
	      $parent.trigger(e = $.Event('hide.bs.dropdown', relatedTarget))
	
	      if (e.isDefaultPrevented()) return
	
	      $this.attr('aria-expanded', 'false')
	      $parent.removeClass('open').trigger($.Event('hidden.bs.dropdown', relatedTarget))
	    })
	  }
	
	  Dropdown.prototype.toggle = function (e) {
	    var $this = $(this)
	
	    if ($this.is('.disabled, :disabled')) return
	
	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')
	
	    clearMenus()
	
	    if (!isActive) {
	      if ('ontouchstart' in document.documentElement && !$parent.closest('.navbar-nav').length) {
	        // if mobile we use a backdrop because click events don't delegate
	        $(document.createElement('div'))
	          .addClass('dropdown-backdrop')
	          .insertAfter($(this))
	          .on('click', clearMenus)
	      }
	
	      var relatedTarget = { relatedTarget: this }
	      $parent.trigger(e = $.Event('show.bs.dropdown', relatedTarget))
	
	      if (e.isDefaultPrevented()) return
	
	      $this
	        .trigger('focus')
	        .attr('aria-expanded', 'true')
	
	      $parent
	        .toggleClass('open')
	        .trigger($.Event('shown.bs.dropdown', relatedTarget))
	    }
	
	    return false
	  }
	
	  Dropdown.prototype.keydown = function (e) {
	    if (!/(38|40|27|32)/.test(e.which) || /input|textarea/i.test(e.target.tagName)) return
	
	    var $this = $(this)
	
	    e.preventDefault()
	    e.stopPropagation()
	
	    if ($this.is('.disabled, :disabled')) return
	
	    var $parent  = getParent($this)
	    var isActive = $parent.hasClass('open')
	
	    if (!isActive && e.which != 27 || isActive && e.which == 27) {
	      if (e.which == 27) $parent.find(toggle).trigger('focus')
	      return $this.trigger('click')
	    }
	
	    var desc = ' li:not(.disabled):visible a'
	    var $items = $parent.find('.dropdown-menu' + desc)
	
	    if (!$items.length) return
	
	    var index = $items.index(e.target)
	
	    if (e.which == 38 && index > 0)                 index--         // up
	    if (e.which == 40 && index < $items.length - 1) index++         // down
	    if (!~index)                                    index = 0
	
	    $items.eq(index).trigger('focus')
	  }
	
	
	  // DROPDOWN PLUGIN DEFINITION
	  // ==========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.dropdown')
	
	      if (!data) $this.data('bs.dropdown', (data = new Dropdown(this)))
	      if (typeof option == 'string') data[option].call($this)
	    })
	  }
	
	  var old = $.fn.dropdown
	
	  $.fn.dropdown             = Plugin
	  $.fn.dropdown.Constructor = Dropdown
	
	
	  // DROPDOWN NO CONFLICT
	  // ====================
	
	  $.fn.dropdown.noConflict = function () {
	    $.fn.dropdown = old
	    return this
	  }
	
	
	  // APPLY TO STANDARD DROPDOWN ELEMENTS
	  // ===================================
	
	  $(document)
	    .on('click.bs.dropdown.data-api', clearMenus)
	    .on('click.bs.dropdown.data-api', '.dropdown form', function (e) { e.stopPropagation() })
	    .on('click.bs.dropdown.data-api', toggle, Dropdown.prototype.toggle)
	    .on('keydown.bs.dropdown.data-api', toggle, Dropdown.prototype.keydown)
	    .on('keydown.bs.dropdown.data-api', '.dropdown-menu', Dropdown.prototype.keydown)
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: modal.js v3.3.7
	 * http://getbootstrap.com/javascript/#modals
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // MODAL CLASS DEFINITION
	  // ======================
	
	  var Modal = function (element, options) {
	    this.options             = options
	    this.$body               = $(document.body)
	    this.$element            = $(element)
	    this.$dialog             = this.$element.find('.modal-dialog')
	    this.$backdrop           = null
	    this.isShown             = null
	    this.originalBodyPad     = null
	    this.scrollbarWidth      = 0
	    this.ignoreBackdropClick = false
	
	    if (this.options.remote) {
	      this.$element
	        .find('.modal-content')
	        .load(this.options.remote, $.proxy(function () {
	          this.$element.trigger('loaded.bs.modal')
	        }, this))
	    }
	  }
	
	  Modal.VERSION  = '3.3.7'
	
	  Modal.TRANSITION_DURATION = 300
	  Modal.BACKDROP_TRANSITION_DURATION = 150
	
	  Modal.DEFAULTS = {
	    backdrop: true,
	    keyboard: true,
	    show: true
	  }
	
	  Modal.prototype.toggle = function (_relatedTarget) {
	    return this.isShown ? this.hide() : this.show(_relatedTarget)
	  }
	
	  Modal.prototype.show = function (_relatedTarget) {
	    var that = this
	    var e    = $.Event('show.bs.modal', { relatedTarget: _relatedTarget })
	
	    this.$element.trigger(e)
	
	    if (this.isShown || e.isDefaultPrevented()) return
	
	    this.isShown = true
	
	    this.checkScrollbar()
	    this.setScrollbar()
	    this.$body.addClass('modal-open')
	
	    this.escape()
	    this.resize()
	
	    this.$element.on('click.dismiss.bs.modal', '[data-dismiss="modal"]', $.proxy(this.hide, this))
	
	    this.$dialog.on('mousedown.dismiss.bs.modal', function () {
	      that.$element.one('mouseup.dismiss.bs.modal', function (e) {
	        if ($(e.target).is(that.$element)) that.ignoreBackdropClick = true
	      })
	    })
	
	    this.backdrop(function () {
	      var transition = $.support.transition && that.$element.hasClass('fade')
	
	      if (!that.$element.parent().length) {
	        that.$element.appendTo(that.$body) // don't move modals dom position
	      }
	
	      that.$element
	        .show()
	        .scrollTop(0)
	
	      that.adjustDialog()
	
	      if (transition) {
	        that.$element[0].offsetWidth // force reflow
	      }
	
	      that.$element.addClass('in')
	
	      that.enforceFocus()
	
	      var e = $.Event('shown.bs.modal', { relatedTarget: _relatedTarget })
	
	      transition ?
	        that.$dialog // wait for modal to slide in
	          .one('bsTransitionEnd', function () {
	            that.$element.trigger('focus').trigger(e)
	          })
	          .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	        that.$element.trigger('focus').trigger(e)
	    })
	  }
	
	  Modal.prototype.hide = function (e) {
	    if (e) e.preventDefault()
	
	    e = $.Event('hide.bs.modal')
	
	    this.$element.trigger(e)
	
	    if (!this.isShown || e.isDefaultPrevented()) return
	
	    this.isShown = false
	
	    this.escape()
	    this.resize()
	
	    $(document).off('focusin.bs.modal')
	
	    this.$element
	      .removeClass('in')
	      .off('click.dismiss.bs.modal')
	      .off('mouseup.dismiss.bs.modal')
	
	    this.$dialog.off('mousedown.dismiss.bs.modal')
	
	    $.support.transition && this.$element.hasClass('fade') ?
	      this.$element
	        .one('bsTransitionEnd', $.proxy(this.hideModal, this))
	        .emulateTransitionEnd(Modal.TRANSITION_DURATION) :
	      this.hideModal()
	  }
	
	  Modal.prototype.enforceFocus = function () {
	    $(document)
	      .off('focusin.bs.modal') // guard against infinite focus loop
	      .on('focusin.bs.modal', $.proxy(function (e) {
	        if (document !== e.target &&
	            this.$element[0] !== e.target &&
	            !this.$element.has(e.target).length) {
	          this.$element.trigger('focus')
	        }
	      }, this))
	  }
	
	  Modal.prototype.escape = function () {
	    if (this.isShown && this.options.keyboard) {
	      this.$element.on('keydown.dismiss.bs.modal', $.proxy(function (e) {
	        e.which == 27 && this.hide()
	      }, this))
	    } else if (!this.isShown) {
	      this.$element.off('keydown.dismiss.bs.modal')
	    }
	  }
	
	  Modal.prototype.resize = function () {
	    if (this.isShown) {
	      $(window).on('resize.bs.modal', $.proxy(this.handleUpdate, this))
	    } else {
	      $(window).off('resize.bs.modal')
	    }
	  }
	
	  Modal.prototype.hideModal = function () {
	    var that = this
	    this.$element.hide()
	    this.backdrop(function () {
	      that.$body.removeClass('modal-open')
	      that.resetAdjustments()
	      that.resetScrollbar()
	      that.$element.trigger('hidden.bs.modal')
	    })
	  }
	
	  Modal.prototype.removeBackdrop = function () {
	    this.$backdrop && this.$backdrop.remove()
	    this.$backdrop = null
	  }
	
	  Modal.prototype.backdrop = function (callback) {
	    var that = this
	    var animate = this.$element.hasClass('fade') ? 'fade' : ''
	
	    if (this.isShown && this.options.backdrop) {
	      var doAnimate = $.support.transition && animate
	
	      this.$backdrop = $(document.createElement('div'))
	        .addClass('modal-backdrop ' + animate)
	        .appendTo(this.$body)
	
	      this.$element.on('click.dismiss.bs.modal', $.proxy(function (e) {
	        if (this.ignoreBackdropClick) {
	          this.ignoreBackdropClick = false
	          return
	        }
	        if (e.target !== e.currentTarget) return
	        this.options.backdrop == 'static'
	          ? this.$element[0].focus()
	          : this.hide()
	      }, this))
	
	      if (doAnimate) this.$backdrop[0].offsetWidth // force reflow
	
	      this.$backdrop.addClass('in')
	
	      if (!callback) return
	
	      doAnimate ?
	        this.$backdrop
	          .one('bsTransitionEnd', callback)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callback()
	
	    } else if (!this.isShown && this.$backdrop) {
	      this.$backdrop.removeClass('in')
	
	      var callbackRemove = function () {
	        that.removeBackdrop()
	        callback && callback()
	      }
	      $.support.transition && this.$element.hasClass('fade') ?
	        this.$backdrop
	          .one('bsTransitionEnd', callbackRemove)
	          .emulateTransitionEnd(Modal.BACKDROP_TRANSITION_DURATION) :
	        callbackRemove()
	
	    } else if (callback) {
	      callback()
	    }
	  }
	
	  // these following methods are used to handle overflowing modals
	
	  Modal.prototype.handleUpdate = function () {
	    this.adjustDialog()
	  }
	
	  Modal.prototype.adjustDialog = function () {
	    var modalIsOverflowing = this.$element[0].scrollHeight > document.documentElement.clientHeight
	
	    this.$element.css({
	      paddingLeft:  !this.bodyIsOverflowing && modalIsOverflowing ? this.scrollbarWidth : '',
	      paddingRight: this.bodyIsOverflowing && !modalIsOverflowing ? this.scrollbarWidth : ''
	    })
	  }
	
	  Modal.prototype.resetAdjustments = function () {
	    this.$element.css({
	      paddingLeft: '',
	      paddingRight: ''
	    })
	  }
	
	  Modal.prototype.checkScrollbar = function () {
	    var fullWindowWidth = window.innerWidth
	    if (!fullWindowWidth) { // workaround for missing window.innerWidth in IE8
	      var documentElementRect = document.documentElement.getBoundingClientRect()
	      fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left)
	    }
	    this.bodyIsOverflowing = document.body.clientWidth < fullWindowWidth
	    this.scrollbarWidth = this.measureScrollbar()
	  }
	
	  Modal.prototype.setScrollbar = function () {
	    var bodyPad = parseInt((this.$body.css('padding-right') || 0), 10)
	    this.originalBodyPad = document.body.style.paddingRight || ''
	    if (this.bodyIsOverflowing) this.$body.css('padding-right', bodyPad + this.scrollbarWidth)
	  }
	
	  Modal.prototype.resetScrollbar = function () {
	    this.$body.css('padding-right', this.originalBodyPad)
	  }
	
	  Modal.prototype.measureScrollbar = function () { // thx walsh
	    var scrollDiv = document.createElement('div')
	    scrollDiv.className = 'modal-scrollbar-measure'
	    this.$body.append(scrollDiv)
	    var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth
	    this.$body[0].removeChild(scrollDiv)
	    return scrollbarWidth
	  }
	
	
	  // MODAL PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option, _relatedTarget) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.modal')
	      var options = $.extend({}, Modal.DEFAULTS, $this.data(), typeof option == 'object' && option)
	
	      if (!data) $this.data('bs.modal', (data = new Modal(this, options)))
	      if (typeof option == 'string') data[option](_relatedTarget)
	      else if (options.show) data.show(_relatedTarget)
	    })
	  }
	
	  var old = $.fn.modal
	
	  $.fn.modal             = Plugin
	  $.fn.modal.Constructor = Modal
	
	
	  // MODAL NO CONFLICT
	  // =================
	
	  $.fn.modal.noConflict = function () {
	    $.fn.modal = old
	    return this
	  }
	
	
	  // MODAL DATA-API
	  // ==============
	
	  $(document).on('click.bs.modal.data-api', '[data-toggle="modal"]', function (e) {
	    var $this   = $(this)
	    var href    = $this.attr('href')
	    var $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, ''))) // strip for ie7
	    var option  = $target.data('bs.modal') ? 'toggle' : $.extend({ remote: !/#/.test(href) && href }, $target.data(), $this.data())
	
	    if ($this.is('a')) e.preventDefault()
	
	    $target.one('show.bs.modal', function (showEvent) {
	      if (showEvent.isDefaultPrevented()) return // only register focus restorer if modal will actually get shown
	      $target.one('hidden.bs.modal', function () {
	        $this.is(':visible') && $this.trigger('focus')
	      })
	    })
	    Plugin.call($target, option, this)
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 129 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: tooltip.js v3.3.7
	 * http://getbootstrap.com/javascript/#tooltip
	 * Inspired by the original jQuery.tipsy by Jason Frame
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // TOOLTIP PUBLIC CLASS DEFINITION
	  // ===============================
	
	  var Tooltip = function (element, options) {
	    this.type       = null
	    this.options    = null
	    this.enabled    = null
	    this.timeout    = null
	    this.hoverState = null
	    this.$element   = null
	    this.inState    = null
	
	    this.init('tooltip', element, options)
	  }
	
	  Tooltip.VERSION  = '3.3.7'
	
	  Tooltip.TRANSITION_DURATION = 150
	
	  Tooltip.DEFAULTS = {
	    animation: true,
	    placement: 'top',
	    selector: false,
	    template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
	    trigger: 'hover focus',
	    title: '',
	    delay: 0,
	    html: false,
	    container: false,
	    viewport: {
	      selector: 'body',
	      padding: 0
	    }
	  }
	
	  Tooltip.prototype.init = function (type, element, options) {
	    this.enabled   = true
	    this.type      = type
	    this.$element  = $(element)
	    this.options   = this.getOptions(options)
	    this.$viewport = this.options.viewport && $($.isFunction(this.options.viewport) ? this.options.viewport.call(this, this.$element) : (this.options.viewport.selector || this.options.viewport))
	    this.inState   = { click: false, hover: false, focus: false }
	
	    if (this.$element[0] instanceof document.constructor && !this.options.selector) {
	      throw new Error('`selector` option must be specified when initializing ' + this.type + ' on the window.document object!')
	    }
	
	    var triggers = this.options.trigger.split(' ')
	
	    for (var i = triggers.length; i--;) {
	      var trigger = triggers[i]
	
	      if (trigger == 'click') {
	        this.$element.on('click.' + this.type, this.options.selector, $.proxy(this.toggle, this))
	      } else if (trigger != 'manual') {
	        var eventIn  = trigger == 'hover' ? 'mouseenter' : 'focusin'
	        var eventOut = trigger == 'hover' ? 'mouseleave' : 'focusout'
	
	        this.$element.on(eventIn  + '.' + this.type, this.options.selector, $.proxy(this.enter, this))
	        this.$element.on(eventOut + '.' + this.type, this.options.selector, $.proxy(this.leave, this))
	      }
	    }
	
	    this.options.selector ?
	      (this._options = $.extend({}, this.options, { trigger: 'manual', selector: '' })) :
	      this.fixTitle()
	  }
	
	  Tooltip.prototype.getDefaults = function () {
	    return Tooltip.DEFAULTS
	  }
	
	  Tooltip.prototype.getOptions = function (options) {
	    options = $.extend({}, this.getDefaults(), this.$element.data(), options)
	
	    if (options.delay && typeof options.delay == 'number') {
	      options.delay = {
	        show: options.delay,
	        hide: options.delay
	      }
	    }
	
	    return options
	  }
	
	  Tooltip.prototype.getDelegateOptions = function () {
	    var options  = {}
	    var defaults = this.getDefaults()
	
	    this._options && $.each(this._options, function (key, value) {
	      if (defaults[key] != value) options[key] = value
	    })
	
	    return options
	  }
	
	  Tooltip.prototype.enter = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)
	
	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }
	
	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusin' ? 'focus' : 'hover'] = true
	    }
	
	    if (self.tip().hasClass('in') || self.hoverState == 'in') {
	      self.hoverState = 'in'
	      return
	    }
	
	    clearTimeout(self.timeout)
	
	    self.hoverState = 'in'
	
	    if (!self.options.delay || !self.options.delay.show) return self.show()
	
	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'in') self.show()
	    }, self.options.delay.show)
	  }
	
	  Tooltip.prototype.isInStateTrue = function () {
	    for (var key in this.inState) {
	      if (this.inState[key]) return true
	    }
	
	    return false
	  }
	
	  Tooltip.prototype.leave = function (obj) {
	    var self = obj instanceof this.constructor ?
	      obj : $(obj.currentTarget).data('bs.' + this.type)
	
	    if (!self) {
	      self = new this.constructor(obj.currentTarget, this.getDelegateOptions())
	      $(obj.currentTarget).data('bs.' + this.type, self)
	    }
	
	    if (obj instanceof $.Event) {
	      self.inState[obj.type == 'focusout' ? 'focus' : 'hover'] = false
	    }
	
	    if (self.isInStateTrue()) return
	
	    clearTimeout(self.timeout)
	
	    self.hoverState = 'out'
	
	    if (!self.options.delay || !self.options.delay.hide) return self.hide()
	
	    self.timeout = setTimeout(function () {
	      if (self.hoverState == 'out') self.hide()
	    }, self.options.delay.hide)
	  }
	
	  Tooltip.prototype.show = function () {
	    var e = $.Event('show.bs.' + this.type)
	
	    if (this.hasContent() && this.enabled) {
	      this.$element.trigger(e)
	
	      var inDom = $.contains(this.$element[0].ownerDocument.documentElement, this.$element[0])
	      if (e.isDefaultPrevented() || !inDom) return
	      var that = this
	
	      var $tip = this.tip()
	
	      var tipId = this.getUID(this.type)
	
	      this.setContent()
	      $tip.attr('id', tipId)
	      this.$element.attr('aria-describedby', tipId)
	
	      if (this.options.animation) $tip.addClass('fade')
	
	      var placement = typeof this.options.placement == 'function' ?
	        this.options.placement.call(this, $tip[0], this.$element[0]) :
	        this.options.placement
	
	      var autoToken = /\s?auto?\s?/i
	      var autoPlace = autoToken.test(placement)
	      if (autoPlace) placement = placement.replace(autoToken, '') || 'top'
	
	      $tip
	        .detach()
	        .css({ top: 0, left: 0, display: 'block' })
	        .addClass(placement)
	        .data('bs.' + this.type, this)
	
	      this.options.container ? $tip.appendTo(this.options.container) : $tip.insertAfter(this.$element)
	      this.$element.trigger('inserted.bs.' + this.type)
	
	      var pos          = this.getPosition()
	      var actualWidth  = $tip[0].offsetWidth
	      var actualHeight = $tip[0].offsetHeight
	
	      if (autoPlace) {
	        var orgPlacement = placement
	        var viewportDim = this.getPosition(this.$viewport)
	
	        placement = placement == 'bottom' && pos.bottom + actualHeight > viewportDim.bottom ? 'top'    :
	                    placement == 'top'    && pos.top    - actualHeight < viewportDim.top    ? 'bottom' :
	                    placement == 'right'  && pos.right  + actualWidth  > viewportDim.width  ? 'left'   :
	                    placement == 'left'   && pos.left   - actualWidth  < viewportDim.left   ? 'right'  :
	                    placement
	
	        $tip
	          .removeClass(orgPlacement)
	          .addClass(placement)
	      }
	
	      var calculatedOffset = this.getCalculatedOffset(placement, pos, actualWidth, actualHeight)
	
	      this.applyPlacement(calculatedOffset, placement)
	
	      var complete = function () {
	        var prevHoverState = that.hoverState
	        that.$element.trigger('shown.bs.' + that.type)
	        that.hoverState = null
	
	        if (prevHoverState == 'out') that.leave(that)
	      }
	
	      $.support.transition && this.$tip.hasClass('fade') ?
	        $tip
	          .one('bsTransitionEnd', complete)
	          .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	        complete()
	    }
	  }
	
	  Tooltip.prototype.applyPlacement = function (offset, placement) {
	    var $tip   = this.tip()
	    var width  = $tip[0].offsetWidth
	    var height = $tip[0].offsetHeight
	
	    // manually read margins because getBoundingClientRect includes difference
	    var marginTop = parseInt($tip.css('margin-top'), 10)
	    var marginLeft = parseInt($tip.css('margin-left'), 10)
	
	    // we must check for NaN for ie 8/9
	    if (isNaN(marginTop))  marginTop  = 0
	    if (isNaN(marginLeft)) marginLeft = 0
	
	    offset.top  += marginTop
	    offset.left += marginLeft
	
	    // $.fn.offset doesn't round pixel values
	    // so we use setOffset directly with our own function B-0
	    $.offset.setOffset($tip[0], $.extend({
	      using: function (props) {
	        $tip.css({
	          top: Math.round(props.top),
	          left: Math.round(props.left)
	        })
	      }
	    }, offset), 0)
	
	    $tip.addClass('in')
	
	    // check to see if placing tip in new offset caused the tip to resize itself
	    var actualWidth  = $tip[0].offsetWidth
	    var actualHeight = $tip[0].offsetHeight
	
	    if (placement == 'top' && actualHeight != height) {
	      offset.top = offset.top + height - actualHeight
	    }
	
	    var delta = this.getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight)
	
	    if (delta.left) offset.left += delta.left
	    else offset.top += delta.top
	
	    var isVertical          = /top|bottom/.test(placement)
	    var arrowDelta          = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight
	    var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight'
	
	    $tip.offset(offset)
	    this.replaceArrow(arrowDelta, $tip[0][arrowOffsetPosition], isVertical)
	  }
	
	  Tooltip.prototype.replaceArrow = function (delta, dimension, isVertical) {
	    this.arrow()
	      .css(isVertical ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')
	      .css(isVertical ? 'top' : 'left', '')
	  }
	
	  Tooltip.prototype.setContent = function () {
	    var $tip  = this.tip()
	    var title = this.getTitle()
	
	    $tip.find('.tooltip-inner')[this.options.html ? 'html' : 'text'](title)
	    $tip.removeClass('fade in top bottom left right')
	  }
	
	  Tooltip.prototype.hide = function (callback) {
	    var that = this
	    var $tip = $(this.$tip)
	    var e    = $.Event('hide.bs.' + this.type)
	
	    function complete() {
	      if (that.hoverState != 'in') $tip.detach()
	      if (that.$element) { // TODO: Check whether guarding this code with this `if` is really necessary.
	        that.$element
	          .removeAttr('aria-describedby')
	          .trigger('hidden.bs.' + that.type)
	      }
	      callback && callback()
	    }
	
	    this.$element.trigger(e)
	
	    if (e.isDefaultPrevented()) return
	
	    $tip.removeClass('in')
	
	    $.support.transition && $tip.hasClass('fade') ?
	      $tip
	        .one('bsTransitionEnd', complete)
	        .emulateTransitionEnd(Tooltip.TRANSITION_DURATION) :
	      complete()
	
	    this.hoverState = null
	
	    return this
	  }
	
	  Tooltip.prototype.fixTitle = function () {
	    var $e = this.$element
	    if ($e.attr('title') || typeof $e.attr('data-original-title') != 'string') {
	      $e.attr('data-original-title', $e.attr('title') || '').attr('title', '')
	    }
	  }
	
	  Tooltip.prototype.hasContent = function () {
	    return this.getTitle()
	  }
	
	  Tooltip.prototype.getPosition = function ($element) {
	    $element   = $element || this.$element
	
	    var el     = $element[0]
	    var isBody = el.tagName == 'BODY'
	
	    var elRect    = el.getBoundingClientRect()
	    if (elRect.width == null) {
	      // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093
	      elRect = $.extend({}, elRect, { width: elRect.right - elRect.left, height: elRect.bottom - elRect.top })
	    }
	    var isSvg = window.SVGElement && el instanceof window.SVGElement
	    // Avoid using $.offset() on SVGs since it gives incorrect results in jQuery 3.
	    // See https://github.com/twbs/bootstrap/issues/20280
	    var elOffset  = isBody ? { top: 0, left: 0 } : (isSvg ? null : $element.offset())
	    var scroll    = { scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.scrollTop() }
	    var outerDims = isBody ? { width: $(window).width(), height: $(window).height() } : null
	
	    return $.extend({}, elRect, scroll, outerDims, elOffset)
	  }
	
	  Tooltip.prototype.getCalculatedOffset = function (placement, pos, actualWidth, actualHeight) {
	    return placement == 'bottom' ? { top: pos.top + pos.height,   left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'top'    ? { top: pos.top - actualHeight, left: pos.left + pos.width / 2 - actualWidth / 2 } :
	           placement == 'left'   ? { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth } :
	        /* placement == 'right' */ { top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width }
	
	  }
	
	  Tooltip.prototype.getViewportAdjustedDelta = function (placement, pos, actualWidth, actualHeight) {
	    var delta = { top: 0, left: 0 }
	    if (!this.$viewport) return delta
	
	    var viewportPadding = this.options.viewport && this.options.viewport.padding || 0
	    var viewportDimensions = this.getPosition(this.$viewport)
	
	    if (/right|left/.test(placement)) {
	      var topEdgeOffset    = pos.top - viewportPadding - viewportDimensions.scroll
	      var bottomEdgeOffset = pos.top + viewportPadding - viewportDimensions.scroll + actualHeight
	      if (topEdgeOffset < viewportDimensions.top) { // top overflow
	        delta.top = viewportDimensions.top - topEdgeOffset
	      } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow
	        delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset
	      }
	    } else {
	      var leftEdgeOffset  = pos.left - viewportPadding
	      var rightEdgeOffset = pos.left + viewportPadding + actualWidth
	      if (leftEdgeOffset < viewportDimensions.left) { // left overflow
	        delta.left = viewportDimensions.left - leftEdgeOffset
	      } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow
	        delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset
	      }
	    }
	
	    return delta
	  }
	
	  Tooltip.prototype.getTitle = function () {
	    var title
	    var $e = this.$element
	    var o  = this.options
	
	    title = $e.attr('data-original-title')
	      || (typeof o.title == 'function' ? o.title.call($e[0]) :  o.title)
	
	    return title
	  }
	
	  Tooltip.prototype.getUID = function (prefix) {
	    do prefix += ~~(Math.random() * 1000000)
	    while (document.getElementById(prefix))
	    return prefix
	  }
	
	  Tooltip.prototype.tip = function () {
	    if (!this.$tip) {
	      this.$tip = $(this.options.template)
	      if (this.$tip.length != 1) {
	        throw new Error(this.type + ' `template` option must consist of exactly 1 top-level element!')
	      }
	    }
	    return this.$tip
	  }
	
	  Tooltip.prototype.arrow = function () {
	    return (this.$arrow = this.$arrow || this.tip().find('.tooltip-arrow'))
	  }
	
	  Tooltip.prototype.enable = function () {
	    this.enabled = true
	  }
	
	  Tooltip.prototype.disable = function () {
	    this.enabled = false
	  }
	
	  Tooltip.prototype.toggleEnabled = function () {
	    this.enabled = !this.enabled
	  }
	
	  Tooltip.prototype.toggle = function (e) {
	    var self = this
	    if (e) {
	      self = $(e.currentTarget).data('bs.' + this.type)
	      if (!self) {
	        self = new this.constructor(e.currentTarget, this.getDelegateOptions())
	        $(e.currentTarget).data('bs.' + this.type, self)
	      }
	    }
	
	    if (e) {
	      self.inState.click = !self.inState.click
	      if (self.isInStateTrue()) self.enter(self)
	      else self.leave(self)
	    } else {
	      self.tip().hasClass('in') ? self.leave(self) : self.enter(self)
	    }
	  }
	
	  Tooltip.prototype.destroy = function () {
	    var that = this
	    clearTimeout(this.timeout)
	    this.hide(function () {
	      that.$element.off('.' + that.type).removeData('bs.' + that.type)
	      if (that.$tip) {
	        that.$tip.detach()
	      }
	      that.$tip = null
	      that.$arrow = null
	      that.$viewport = null
	      that.$element = null
	    })
	  }
	
	
	  // TOOLTIP PLUGIN DEFINITION
	  // =========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.tooltip')
	      var options = typeof option == 'object' && option
	
	      if (!data && /destroy|hide/.test(option)) return
	      if (!data) $this.data('bs.tooltip', (data = new Tooltip(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.tooltip
	
	  $.fn.tooltip             = Plugin
	  $.fn.tooltip.Constructor = Tooltip
	
	
	  // TOOLTIP NO CONFLICT
	  // ===================
	
	  $.fn.tooltip.noConflict = function () {
	    $.fn.tooltip = old
	    return this
	  }
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: popover.js v3.3.7
	 * http://getbootstrap.com/javascript/#popovers
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // POPOVER PUBLIC CLASS DEFINITION
	  // ===============================
	
	  var Popover = function (element, options) {
	    this.init('popover', element, options)
	  }
	
	  if (!$.fn.tooltip) throw new Error('Popover requires tooltip.js')
	
	  Popover.VERSION  = '3.3.7'
	
	  Popover.DEFAULTS = $.extend({}, $.fn.tooltip.Constructor.DEFAULTS, {
	    placement: 'right',
	    trigger: 'click',
	    content: '',
	    template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
	  })
	
	
	  // NOTE: POPOVER EXTENDS tooltip.js
	  // ================================
	
	  Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype)
	
	  Popover.prototype.constructor = Popover
	
	  Popover.prototype.getDefaults = function () {
	    return Popover.DEFAULTS
	  }
	
	  Popover.prototype.setContent = function () {
	    var $tip    = this.tip()
	    var title   = this.getTitle()
	    var content = this.getContent()
	
	    $tip.find('.popover-title')[this.options.html ? 'html' : 'text'](title)
	    $tip.find('.popover-content').children().detach().end()[ // we use append for html objects to maintain js events
	      this.options.html ? (typeof content == 'string' ? 'html' : 'append') : 'text'
	    ](content)
	
	    $tip.removeClass('fade top bottom left right in')
	
	    // IE8 doesn't accept hiding via the `:empty` pseudo selector, we have to do
	    // this manually by checking the contents.
	    if (!$tip.find('.popover-title').html()) $tip.find('.popover-title').hide()
	  }
	
	  Popover.prototype.hasContent = function () {
	    return this.getTitle() || this.getContent()
	  }
	
	  Popover.prototype.getContent = function () {
	    var $e = this.$element
	    var o  = this.options
	
	    return $e.attr('data-content')
	      || (typeof o.content == 'function' ?
	            o.content.call($e[0]) :
	            o.content)
	  }
	
	  Popover.prototype.arrow = function () {
	    return (this.$arrow = this.$arrow || this.tip().find('.arrow'))
	  }
	
	
	  // POPOVER PLUGIN DEFINITION
	  // =========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.popover')
	      var options = typeof option == 'object' && option
	
	      if (!data && /destroy|hide/.test(option)) return
	      if (!data) $this.data('bs.popover', (data = new Popover(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.popover
	
	  $.fn.popover             = Plugin
	  $.fn.popover.Constructor = Popover
	
	
	  // POPOVER NO CONFLICT
	  // ===================
	
	  $.fn.popover.noConflict = function () {
	    $.fn.popover = old
	    return this
	  }
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: scrollspy.js v3.3.7
	 * http://getbootstrap.com/javascript/#scrollspy
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // SCROLLSPY CLASS DEFINITION
	  // ==========================
	
	  function ScrollSpy(element, options) {
	    this.$body          = $(document.body)
	    this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)
	    this.options        = $.extend({}, ScrollSpy.DEFAULTS, options)
	    this.selector       = (this.options.target || '') + ' .nav li > a'
	    this.offsets        = []
	    this.targets        = []
	    this.activeTarget   = null
	    this.scrollHeight   = 0
	
	    this.$scrollElement.on('scroll.bs.scrollspy', $.proxy(this.process, this))
	    this.refresh()
	    this.process()
	  }
	
	  ScrollSpy.VERSION  = '3.3.7'
	
	  ScrollSpy.DEFAULTS = {
	    offset: 10
	  }
	
	  ScrollSpy.prototype.getScrollHeight = function () {
	    return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
	  }
	
	  ScrollSpy.prototype.refresh = function () {
	    var that          = this
	    var offsetMethod  = 'offset'
	    var offsetBase    = 0
	
	    this.offsets      = []
	    this.targets      = []
	    this.scrollHeight = this.getScrollHeight()
	
	    if (!$.isWindow(this.$scrollElement[0])) {
	      offsetMethod = 'position'
	      offsetBase   = this.$scrollElement.scrollTop()
	    }
	
	    this.$body
	      .find(this.selector)
	      .map(function () {
	        var $el   = $(this)
	        var href  = $el.data('target') || $el.attr('href')
	        var $href = /^#./.test(href) && $(href)
	
	        return ($href
	          && $href.length
	          && $href.is(':visible')
	          && [[$href[offsetMethod]().top + offsetBase, href]]) || null
	      })
	      .sort(function (a, b) { return a[0] - b[0] })
	      .each(function () {
	        that.offsets.push(this[0])
	        that.targets.push(this[1])
	      })
	  }
	
	  ScrollSpy.prototype.process = function () {
	    var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset
	    var scrollHeight = this.getScrollHeight()
	    var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()
	    var offsets      = this.offsets
	    var targets      = this.targets
	    var activeTarget = this.activeTarget
	    var i
	
	    if (this.scrollHeight != scrollHeight) {
	      this.refresh()
	    }
	
	    if (scrollTop >= maxScroll) {
	      return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)
	    }
	
	    if (activeTarget && scrollTop < offsets[0]) {
	      this.activeTarget = null
	      return this.clear()
	    }
	
	    for (i = offsets.length; i--;) {
	      activeTarget != targets[i]
	        && scrollTop >= offsets[i]
	        && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])
	        && this.activate(targets[i])
	    }
	  }
	
	  ScrollSpy.prototype.activate = function (target) {
	    this.activeTarget = target
	
	    this.clear()
	
	    var selector = this.selector +
	      '[data-target="' + target + '"],' +
	      this.selector + '[href="' + target + '"]'
	
	    var active = $(selector)
	      .parents('li')
	      .addClass('active')
	
	    if (active.parent('.dropdown-menu').length) {
	      active = active
	        .closest('li.dropdown')
	        .addClass('active')
	    }
	
	    active.trigger('activate.bs.scrollspy')
	  }
	
	  ScrollSpy.prototype.clear = function () {
	    $(this.selector)
	      .parentsUntil(this.options.target, '.active')
	      .removeClass('active')
	  }
	
	
	  // SCROLLSPY PLUGIN DEFINITION
	  // ===========================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.scrollspy')
	      var options = typeof option == 'object' && option
	
	      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.scrollspy
	
	  $.fn.scrollspy             = Plugin
	  $.fn.scrollspy.Constructor = ScrollSpy
	
	
	  // SCROLLSPY NO CONFLICT
	  // =====================
	
	  $.fn.scrollspy.noConflict = function () {
	    $.fn.scrollspy = old
	    return this
	  }
	
	
	  // SCROLLSPY DATA-API
	  // ==================
	
	  $(window).on('load.bs.scrollspy.data-api', function () {
	    $('[data-spy="scroll"]').each(function () {
	      var $spy = $(this)
	      Plugin.call($spy, $spy.data())
	    })
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: tab.js v3.3.7
	 * http://getbootstrap.com/javascript/#tabs
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // TAB CLASS DEFINITION
	  // ====================
	
	  var Tab = function (element) {
	    // jscs:disable requireDollarBeforejQueryAssignment
	    this.element = $(element)
	    // jscs:enable requireDollarBeforejQueryAssignment
	  }
	
	  Tab.VERSION = '3.3.7'
	
	  Tab.TRANSITION_DURATION = 150
	
	  Tab.prototype.show = function () {
	    var $this    = this.element
	    var $ul      = $this.closest('ul:not(.dropdown-menu)')
	    var selector = $this.data('target')
	
	    if (!selector) {
	      selector = $this.attr('href')
	      selector = selector && selector.replace(/.*(?=#[^\s]*$)/, '') // strip for ie7
	    }
	
	    if ($this.parent('li').hasClass('active')) return
	
	    var $previous = $ul.find('.active:last a')
	    var hideEvent = $.Event('hide.bs.tab', {
	      relatedTarget: $this[0]
	    })
	    var showEvent = $.Event('show.bs.tab', {
	      relatedTarget: $previous[0]
	    })
	
	    $previous.trigger(hideEvent)
	    $this.trigger(showEvent)
	
	    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) return
	
	    var $target = $(selector)
	
	    this.activate($this.closest('li'), $ul)
	    this.activate($target, $target.parent(), function () {
	      $previous.trigger({
	        type: 'hidden.bs.tab',
	        relatedTarget: $this[0]
	      })
	      $this.trigger({
	        type: 'shown.bs.tab',
	        relatedTarget: $previous[0]
	      })
	    })
	  }
	
	  Tab.prototype.activate = function (element, container, callback) {
	    var $active    = container.find('> .active')
	    var transition = callback
	      && $.support.transition
	      && ($active.length && $active.hasClass('fade') || !!container.find('> .fade').length)
	
	    function next() {
	      $active
	        .removeClass('active')
	        .find('> .dropdown-menu > .active')
	          .removeClass('active')
	        .end()
	        .find('[data-toggle="tab"]')
	          .attr('aria-expanded', false)
	
	      element
	        .addClass('active')
	        .find('[data-toggle="tab"]')
	          .attr('aria-expanded', true)
	
	      if (transition) {
	        element[0].offsetWidth // reflow for transition
	        element.addClass('in')
	      } else {
	        element.removeClass('fade')
	      }
	
	      if (element.parent('.dropdown-menu').length) {
	        element
	          .closest('li.dropdown')
	            .addClass('active')
	          .end()
	          .find('[data-toggle="tab"]')
	            .attr('aria-expanded', true)
	      }
	
	      callback && callback()
	    }
	
	    $active.length && transition ?
	      $active
	        .one('bsTransitionEnd', next)
	        .emulateTransitionEnd(Tab.TRANSITION_DURATION) :
	      next()
	
	    $active.removeClass('in')
	  }
	
	
	  // TAB PLUGIN DEFINITION
	  // =====================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this = $(this)
	      var data  = $this.data('bs.tab')
	
	      if (!data) $this.data('bs.tab', (data = new Tab(this)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.tab
	
	  $.fn.tab             = Plugin
	  $.fn.tab.Constructor = Tab
	
	
	  // TAB NO CONFLICT
	  // ===============
	
	  $.fn.tab.noConflict = function () {
	    $.fn.tab = old
	    return this
	  }
	
	
	  // TAB DATA-API
	  // ============
	
	  var clickHandler = function (e) {
	    e.preventDefault()
	    Plugin.call($(this), 'show')
	  }
	
	  $(document)
	    .on('click.bs.tab.data-api', '[data-toggle="tab"]', clickHandler)
	    .on('click.bs.tab.data-api', '[data-toggle="pill"]', clickHandler)
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(jQuery) {/* ========================================================================
	 * Bootstrap: affix.js v3.3.7
	 * http://getbootstrap.com/javascript/#affix
	 * ========================================================================
	 * Copyright 2011-2016 Twitter, Inc.
	 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
	 * ======================================================================== */
	
	
	+function ($) {
	  'use strict';
	
	  // AFFIX CLASS DEFINITION
	  // ======================
	
	  var Affix = function (element, options) {
	    this.options = $.extend({}, Affix.DEFAULTS, options)
	
	    this.$target = $(this.options.target)
	      .on('scroll.bs.affix.data-api', $.proxy(this.checkPosition, this))
	      .on('click.bs.affix.data-api',  $.proxy(this.checkPositionWithEventLoop, this))
	
	    this.$element     = $(element)
	    this.affixed      = null
	    this.unpin        = null
	    this.pinnedOffset = null
	
	    this.checkPosition()
	  }
	
	  Affix.VERSION  = '3.3.7'
	
	  Affix.RESET    = 'affix affix-top affix-bottom'
	
	  Affix.DEFAULTS = {
	    offset: 0,
	    target: window
	  }
	
	  Affix.prototype.getState = function (scrollHeight, height, offsetTop, offsetBottom) {
	    var scrollTop    = this.$target.scrollTop()
	    var position     = this.$element.offset()
	    var targetHeight = this.$target.height()
	
	    if (offsetTop != null && this.affixed == 'top') return scrollTop < offsetTop ? 'top' : false
	
	    if (this.affixed == 'bottom') {
	      if (offsetTop != null) return (scrollTop + this.unpin <= position.top) ? false : 'bottom'
	      return (scrollTop + targetHeight <= scrollHeight - offsetBottom) ? false : 'bottom'
	    }
	
	    var initializing   = this.affixed == null
	    var colliderTop    = initializing ? scrollTop : position.top
	    var colliderHeight = initializing ? targetHeight : height
	
	    if (offsetTop != null && scrollTop <= offsetTop) return 'top'
	    if (offsetBottom != null && (colliderTop + colliderHeight >= scrollHeight - offsetBottom)) return 'bottom'
	
	    return false
	  }
	
	  Affix.prototype.getPinnedOffset = function () {
	    if (this.pinnedOffset) return this.pinnedOffset
	    this.$element.removeClass(Affix.RESET).addClass('affix')
	    var scrollTop = this.$target.scrollTop()
	    var position  = this.$element.offset()
	    return (this.pinnedOffset = position.top - scrollTop)
	  }
	
	  Affix.prototype.checkPositionWithEventLoop = function () {
	    setTimeout($.proxy(this.checkPosition, this), 1)
	  }
	
	  Affix.prototype.checkPosition = function () {
	    if (!this.$element.is(':visible')) return
	
	    var height       = this.$element.height()
	    var offset       = this.options.offset
	    var offsetTop    = offset.top
	    var offsetBottom = offset.bottom
	    var scrollHeight = Math.max($(document).height(), $(document.body).height())
	
	    if (typeof offset != 'object')         offsetBottom = offsetTop = offset
	    if (typeof offsetTop == 'function')    offsetTop    = offset.top(this.$element)
	    if (typeof offsetBottom == 'function') offsetBottom = offset.bottom(this.$element)
	
	    var affix = this.getState(scrollHeight, height, offsetTop, offsetBottom)
	
	    if (this.affixed != affix) {
	      if (this.unpin != null) this.$element.css('top', '')
	
	      var affixType = 'affix' + (affix ? '-' + affix : '')
	      var e         = $.Event(affixType + '.bs.affix')
	
	      this.$element.trigger(e)
	
	      if (e.isDefaultPrevented()) return
	
	      this.affixed = affix
	      this.unpin = affix == 'bottom' ? this.getPinnedOffset() : null
	
	      this.$element
	        .removeClass(Affix.RESET)
	        .addClass(affixType)
	        .trigger(affixType.replace('affix', 'affixed') + '.bs.affix')
	    }
	
	    if (affix == 'bottom') {
	      this.$element.offset({
	        top: scrollHeight - height - offsetBottom
	      })
	    }
	  }
	
	
	  // AFFIX PLUGIN DEFINITION
	  // =======================
	
	  function Plugin(option) {
	    return this.each(function () {
	      var $this   = $(this)
	      var data    = $this.data('bs.affix')
	      var options = typeof option == 'object' && option
	
	      if (!data) $this.data('bs.affix', (data = new Affix(this, options)))
	      if (typeof option == 'string') data[option]()
	    })
	  }
	
	  var old = $.fn.affix
	
	  $.fn.affix             = Plugin
	  $.fn.affix.Constructor = Affix
	
	
	  // AFFIX NO CONFLICT
	  // =================
	
	  $.fn.affix.noConflict = function () {
	    $.fn.affix = old
	    return this
	  }
	
	
	  // AFFIX DATA-API
	  // ==============
	
	  $(window).on('load', function () {
	    $('[data-spy="affix"]').each(function () {
	      var $spy = $(this)
	      var data = $spy.data()
	
	      data.offset = data.offset || {}
	
	      if (data.offsetBottom != null) data.offset.bottom = data.offsetBottom
	      if (data.offsetTop    != null) data.offset.top    = data.offsetTop
	
	      Plugin.call($spy, data)
	    })
	  })
	
	}(jQuery);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(135);


/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(136);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(144)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./node_modules/css-loader/index.js!./../less-loader/index.js!./font-awesome-styles.loader.js!./font-awesome.config.js", function() {
				var newContent = require("!!./node_modules/css-loader/index.js!./../less-loader/index.js!./font-awesome-styles.loader.js!./font-awesome.config.js");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 136 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(137)();
	// imports
	
	
	// module
	exports.push([module.id, ".fa-border {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eee;\n  border-radius: .1em;\n}\n.fa-pull-left {\n  float: left;\n}\n.fa-pull-right {\n  float: right;\n}\n.fa.fa-pull-left {\n  margin-right: .3em;\n}\n.fa.fa-pull-right {\n  margin-left: .3em;\n}\n/* Deprecated as of 4.4.0 */\n.pull-right {\n  float: right;\n}\n.pull-left {\n  float: left;\n}\n.fa.pull-left {\n  margin-right: .3em;\n}\n.fa.pull-right {\n  margin-left: .3em;\n}\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n.fa-fw {\n  width: 1.28571429em;\n  text-align: center;\n}\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: \"\\F000\";\n}\n.fa-music:before {\n  content: \"\\F001\";\n}\n.fa-search:before {\n  content: \"\\F002\";\n}\n.fa-envelope-o:before {\n  content: \"\\F003\";\n}\n.fa-heart:before {\n  content: \"\\F004\";\n}\n.fa-star:before {\n  content: \"\\F005\";\n}\n.fa-star-o:before {\n  content: \"\\F006\";\n}\n.fa-user:before {\n  content: \"\\F007\";\n}\n.fa-film:before {\n  content: \"\\F008\";\n}\n.fa-th-large:before {\n  content: \"\\F009\";\n}\n.fa-th:before {\n  content: \"\\F00A\";\n}\n.fa-th-list:before {\n  content: \"\\F00B\";\n}\n.fa-check:before {\n  content: \"\\F00C\";\n}\n.fa-remove:before,\n.fa-close:before,\n.fa-times:before {\n  content: \"\\F00D\";\n}\n.fa-search-plus:before {\n  content: \"\\F00E\";\n}\n.fa-search-minus:before {\n  content: \"\\F010\";\n}\n.fa-power-off:before {\n  content: \"\\F011\";\n}\n.fa-signal:before {\n  content: \"\\F012\";\n}\n.fa-gear:before,\n.fa-cog:before {\n  content: \"\\F013\";\n}\n.fa-trash-o:before {\n  content: \"\\F014\";\n}\n.fa-home:before {\n  content: \"\\F015\";\n}\n.fa-file-o:before {\n  content: \"\\F016\";\n}\n.fa-clock-o:before {\n  content: \"\\F017\";\n}\n.fa-road:before {\n  content: \"\\F018\";\n}\n.fa-download:before {\n  content: \"\\F019\";\n}\n.fa-arrow-circle-o-down:before {\n  content: \"\\F01A\";\n}\n.fa-arrow-circle-o-up:before {\n  content: \"\\F01B\";\n}\n.fa-inbox:before {\n  content: \"\\F01C\";\n}\n.fa-play-circle-o:before {\n  content: \"\\F01D\";\n}\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: \"\\F01E\";\n}\n.fa-refresh:before {\n  content: \"\\F021\";\n}\n.fa-list-alt:before {\n  content: \"\\F022\";\n}\n.fa-lock:before {\n  content: \"\\F023\";\n}\n.fa-flag:before {\n  content: \"\\F024\";\n}\n.fa-headphones:before {\n  content: \"\\F025\";\n}\n.fa-volume-off:before {\n  content: \"\\F026\";\n}\n.fa-volume-down:before {\n  content: \"\\F027\";\n}\n.fa-volume-up:before {\n  content: \"\\F028\";\n}\n.fa-qrcode:before {\n  content: \"\\F029\";\n}\n.fa-barcode:before {\n  content: \"\\F02A\";\n}\n.fa-tag:before {\n  content: \"\\F02B\";\n}\n.fa-tags:before {\n  content: \"\\F02C\";\n}\n.fa-book:before {\n  content: \"\\F02D\";\n}\n.fa-bookmark:before {\n  content: \"\\F02E\";\n}\n.fa-print:before {\n  content: \"\\F02F\";\n}\n.fa-camera:before {\n  content: \"\\F030\";\n}\n.fa-font:before {\n  content: \"\\F031\";\n}\n.fa-bold:before {\n  content: \"\\F032\";\n}\n.fa-italic:before {\n  content: \"\\F033\";\n}\n.fa-text-height:before {\n  content: \"\\F034\";\n}\n.fa-text-width:before {\n  content: \"\\F035\";\n}\n.fa-align-left:before {\n  content: \"\\F036\";\n}\n.fa-align-center:before {\n  content: \"\\F037\";\n}\n.fa-align-right:before {\n  content: \"\\F038\";\n}\n.fa-align-justify:before {\n  content: \"\\F039\";\n}\n.fa-list:before {\n  content: \"\\F03A\";\n}\n.fa-dedent:before,\n.fa-outdent:before {\n  content: \"\\F03B\";\n}\n.fa-indent:before {\n  content: \"\\F03C\";\n}\n.fa-video-camera:before {\n  content: \"\\F03D\";\n}\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: \"\\F03E\";\n}\n.fa-pencil:before {\n  content: \"\\F040\";\n}\n.fa-map-marker:before {\n  content: \"\\F041\";\n}\n.fa-adjust:before {\n  content: \"\\F042\";\n}\n.fa-tint:before {\n  content: \"\\F043\";\n}\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: \"\\F044\";\n}\n.fa-share-square-o:before {\n  content: \"\\F045\";\n}\n.fa-check-square-o:before {\n  content: \"\\F046\";\n}\n.fa-arrows:before {\n  content: \"\\F047\";\n}\n.fa-step-backward:before {\n  content: \"\\F048\";\n}\n.fa-fast-backward:before {\n  content: \"\\F049\";\n}\n.fa-backward:before {\n  content: \"\\F04A\";\n}\n.fa-play:before {\n  content: \"\\F04B\";\n}\n.fa-pause:before {\n  content: \"\\F04C\";\n}\n.fa-stop:before {\n  content: \"\\F04D\";\n}\n.fa-forward:before {\n  content: \"\\F04E\";\n}\n.fa-fast-forward:before {\n  content: \"\\F050\";\n}\n.fa-step-forward:before {\n  content: \"\\F051\";\n}\n.fa-eject:before {\n  content: \"\\F052\";\n}\n.fa-chevron-left:before {\n  content: \"\\F053\";\n}\n.fa-chevron-right:before {\n  content: \"\\F054\";\n}\n.fa-plus-circle:before {\n  content: \"\\F055\";\n}\n.fa-minus-circle:before {\n  content: \"\\F056\";\n}\n.fa-times-circle:before {\n  content: \"\\F057\";\n}\n.fa-check-circle:before {\n  content: \"\\F058\";\n}\n.fa-question-circle:before {\n  content: \"\\F059\";\n}\n.fa-info-circle:before {\n  content: \"\\F05A\";\n}\n.fa-crosshairs:before {\n  content: \"\\F05B\";\n}\n.fa-times-circle-o:before {\n  content: \"\\F05C\";\n}\n.fa-check-circle-o:before {\n  content: \"\\F05D\";\n}\n.fa-ban:before {\n  content: \"\\F05E\";\n}\n.fa-arrow-left:before {\n  content: \"\\F060\";\n}\n.fa-arrow-right:before {\n  content: \"\\F061\";\n}\n.fa-arrow-up:before {\n  content: \"\\F062\";\n}\n.fa-arrow-down:before {\n  content: \"\\F063\";\n}\n.fa-mail-forward:before,\n.fa-share:before {\n  content: \"\\F064\";\n}\n.fa-expand:before {\n  content: \"\\F065\";\n}\n.fa-compress:before {\n  content: \"\\F066\";\n}\n.fa-plus:before {\n  content: \"\\F067\";\n}\n.fa-minus:before {\n  content: \"\\F068\";\n}\n.fa-asterisk:before {\n  content: \"\\F069\";\n}\n.fa-exclamation-circle:before {\n  content: \"\\F06A\";\n}\n.fa-gift:before {\n  content: \"\\F06B\";\n}\n.fa-leaf:before {\n  content: \"\\F06C\";\n}\n.fa-fire:before {\n  content: \"\\F06D\";\n}\n.fa-eye:before {\n  content: \"\\F06E\";\n}\n.fa-eye-slash:before {\n  content: \"\\F070\";\n}\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: \"\\F071\";\n}\n.fa-plane:before {\n  content: \"\\F072\";\n}\n.fa-calendar:before {\n  content: \"\\F073\";\n}\n.fa-random:before {\n  content: \"\\F074\";\n}\n.fa-comment:before {\n  content: \"\\F075\";\n}\n.fa-magnet:before {\n  content: \"\\F076\";\n}\n.fa-chevron-up:before {\n  content: \"\\F077\";\n}\n.fa-chevron-down:before {\n  content: \"\\F078\";\n}\n.fa-retweet:before {\n  content: \"\\F079\";\n}\n.fa-shopping-cart:before {\n  content: \"\\F07A\";\n}\n.fa-folder:before {\n  content: \"\\F07B\";\n}\n.fa-folder-open:before {\n  content: \"\\F07C\";\n}\n.fa-arrows-v:before {\n  content: \"\\F07D\";\n}\n.fa-arrows-h:before {\n  content: \"\\F07E\";\n}\n.fa-bar-chart-o:before,\n.fa-bar-chart:before {\n  content: \"\\F080\";\n}\n.fa-twitter-square:before {\n  content: \"\\F081\";\n}\n.fa-facebook-square:before {\n  content: \"\\F082\";\n}\n.fa-camera-retro:before {\n  content: \"\\F083\";\n}\n.fa-key:before {\n  content: \"\\F084\";\n}\n.fa-gears:before,\n.fa-cogs:before {\n  content: \"\\F085\";\n}\n.fa-comments:before {\n  content: \"\\F086\";\n}\n.fa-thumbs-o-up:before {\n  content: \"\\F087\";\n}\n.fa-thumbs-o-down:before {\n  content: \"\\F088\";\n}\n.fa-star-half:before {\n  content: \"\\F089\";\n}\n.fa-heart-o:before {\n  content: \"\\F08A\";\n}\n.fa-sign-out:before {\n  content: \"\\F08B\";\n}\n.fa-linkedin-square:before {\n  content: \"\\F08C\";\n}\n.fa-thumb-tack:before {\n  content: \"\\F08D\";\n}\n.fa-external-link:before {\n  content: \"\\F08E\";\n}\n.fa-sign-in:before {\n  content: \"\\F090\";\n}\n.fa-trophy:before {\n  content: \"\\F091\";\n}\n.fa-github-square:before {\n  content: \"\\F092\";\n}\n.fa-upload:before {\n  content: \"\\F093\";\n}\n.fa-lemon-o:before {\n  content: \"\\F094\";\n}\n.fa-phone:before {\n  content: \"\\F095\";\n}\n.fa-square-o:before {\n  content: \"\\F096\";\n}\n.fa-bookmark-o:before {\n  content: \"\\F097\";\n}\n.fa-phone-square:before {\n  content: \"\\F098\";\n}\n.fa-twitter:before {\n  content: \"\\F099\";\n}\n.fa-facebook-f:before,\n.fa-facebook:before {\n  content: \"\\F09A\";\n}\n.fa-github:before {\n  content: \"\\F09B\";\n}\n.fa-unlock:before {\n  content: \"\\F09C\";\n}\n.fa-credit-card:before {\n  content: \"\\F09D\";\n}\n.fa-feed:before,\n.fa-rss:before {\n  content: \"\\F09E\";\n}\n.fa-hdd-o:before {\n  content: \"\\F0A0\";\n}\n.fa-bullhorn:before {\n  content: \"\\F0A1\";\n}\n.fa-bell:before {\n  content: \"\\F0F3\";\n}\n.fa-certificate:before {\n  content: \"\\F0A3\";\n}\n.fa-hand-o-right:before {\n  content: \"\\F0A4\";\n}\n.fa-hand-o-left:before {\n  content: \"\\F0A5\";\n}\n.fa-hand-o-up:before {\n  content: \"\\F0A6\";\n}\n.fa-hand-o-down:before {\n  content: \"\\F0A7\";\n}\n.fa-arrow-circle-left:before {\n  content: \"\\F0A8\";\n}\n.fa-arrow-circle-right:before {\n  content: \"\\F0A9\";\n}\n.fa-arrow-circle-up:before {\n  content: \"\\F0AA\";\n}\n.fa-arrow-circle-down:before {\n  content: \"\\F0AB\";\n}\n.fa-globe:before {\n  content: \"\\F0AC\";\n}\n.fa-wrench:before {\n  content: \"\\F0AD\";\n}\n.fa-tasks:before {\n  content: \"\\F0AE\";\n}\n.fa-filter:before {\n  content: \"\\F0B0\";\n}\n.fa-briefcase:before {\n  content: \"\\F0B1\";\n}\n.fa-arrows-alt:before {\n  content: \"\\F0B2\";\n}\n.fa-group:before,\n.fa-users:before {\n  content: \"\\F0C0\";\n}\n.fa-chain:before,\n.fa-link:before {\n  content: \"\\F0C1\";\n}\n.fa-cloud:before {\n  content: \"\\F0C2\";\n}\n.fa-flask:before {\n  content: \"\\F0C3\";\n}\n.fa-cut:before,\n.fa-scissors:before {\n  content: \"\\F0C4\";\n}\n.fa-copy:before,\n.fa-files-o:before {\n  content: \"\\F0C5\";\n}\n.fa-paperclip:before {\n  content: \"\\F0C6\";\n}\n.fa-save:before,\n.fa-floppy-o:before {\n  content: \"\\F0C7\";\n}\n.fa-square:before {\n  content: \"\\F0C8\";\n}\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: \"\\F0C9\";\n}\n.fa-list-ul:before {\n  content: \"\\F0CA\";\n}\n.fa-list-ol:before {\n  content: \"\\F0CB\";\n}\n.fa-strikethrough:before {\n  content: \"\\F0CC\";\n}\n.fa-underline:before {\n  content: \"\\F0CD\";\n}\n.fa-table:before {\n  content: \"\\F0CE\";\n}\n.fa-magic:before {\n  content: \"\\F0D0\";\n}\n.fa-truck:before {\n  content: \"\\F0D1\";\n}\n.fa-pinterest:before {\n  content: \"\\F0D2\";\n}\n.fa-pinterest-square:before {\n  content: \"\\F0D3\";\n}\n.fa-google-plus-square:before {\n  content: \"\\F0D4\";\n}\n.fa-google-plus:before {\n  content: \"\\F0D5\";\n}\n.fa-money:before {\n  content: \"\\F0D6\";\n}\n.fa-caret-down:before {\n  content: \"\\F0D7\";\n}\n.fa-caret-up:before {\n  content: \"\\F0D8\";\n}\n.fa-caret-left:before {\n  content: \"\\F0D9\";\n}\n.fa-caret-right:before {\n  content: \"\\F0DA\";\n}\n.fa-columns:before {\n  content: \"\\F0DB\";\n}\n.fa-unsorted:before,\n.fa-sort:before {\n  content: \"\\F0DC\";\n}\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: \"\\F0DD\";\n}\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: \"\\F0DE\";\n}\n.fa-envelope:before {\n  content: \"\\F0E0\";\n}\n.fa-linkedin:before {\n  content: \"\\F0E1\";\n}\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: \"\\F0E2\";\n}\n.fa-legal:before,\n.fa-gavel:before {\n  content: \"\\F0E3\";\n}\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: \"\\F0E4\";\n}\n.fa-comment-o:before {\n  content: \"\\F0E5\";\n}\n.fa-comments-o:before {\n  content: \"\\F0E6\";\n}\n.fa-flash:before,\n.fa-bolt:before {\n  content: \"\\F0E7\";\n}\n.fa-sitemap:before {\n  content: \"\\F0E8\";\n}\n.fa-umbrella:before {\n  content: \"\\F0E9\";\n}\n.fa-paste:before,\n.fa-clipboard:before {\n  content: \"\\F0EA\";\n}\n.fa-lightbulb-o:before {\n  content: \"\\F0EB\";\n}\n.fa-exchange:before {\n  content: \"\\F0EC\";\n}\n.fa-cloud-download:before {\n  content: \"\\F0ED\";\n}\n.fa-cloud-upload:before {\n  content: \"\\F0EE\";\n}\n.fa-user-md:before {\n  content: \"\\F0F0\";\n}\n.fa-stethoscope:before {\n  content: \"\\F0F1\";\n}\n.fa-suitcase:before {\n  content: \"\\F0F2\";\n}\n.fa-bell-o:before {\n  content: \"\\F0A2\";\n}\n.fa-coffee:before {\n  content: \"\\F0F4\";\n}\n.fa-cutlery:before {\n  content: \"\\F0F5\";\n}\n.fa-file-text-o:before {\n  content: \"\\F0F6\";\n}\n.fa-building-o:before {\n  content: \"\\F0F7\";\n}\n.fa-hospital-o:before {\n  content: \"\\F0F8\";\n}\n.fa-ambulance:before {\n  content: \"\\F0F9\";\n}\n.fa-medkit:before {\n  content: \"\\F0FA\";\n}\n.fa-fighter-jet:before {\n  content: \"\\F0FB\";\n}\n.fa-beer:before {\n  content: \"\\F0FC\";\n}\n.fa-h-square:before {\n  content: \"\\F0FD\";\n}\n.fa-plus-square:before {\n  content: \"\\F0FE\";\n}\n.fa-angle-double-left:before {\n  content: \"\\F100\";\n}\n.fa-angle-double-right:before {\n  content: \"\\F101\";\n}\n.fa-angle-double-up:before {\n  content: \"\\F102\";\n}\n.fa-angle-double-down:before {\n  content: \"\\F103\";\n}\n.fa-angle-left:before {\n  content: \"\\F104\";\n}\n.fa-angle-right:before {\n  content: \"\\F105\";\n}\n.fa-angle-up:before {\n  content: \"\\F106\";\n}\n.fa-angle-down:before {\n  content: \"\\F107\";\n}\n.fa-desktop:before {\n  content: \"\\F108\";\n}\n.fa-laptop:before {\n  content: \"\\F109\";\n}\n.fa-tablet:before {\n  content: \"\\F10A\";\n}\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: \"\\F10B\";\n}\n.fa-circle-o:before {\n  content: \"\\F10C\";\n}\n.fa-quote-left:before {\n  content: \"\\F10D\";\n}\n.fa-quote-right:before {\n  content: \"\\F10E\";\n}\n.fa-spinner:before {\n  content: \"\\F110\";\n}\n.fa-circle:before {\n  content: \"\\F111\";\n}\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: \"\\F112\";\n}\n.fa-github-alt:before {\n  content: \"\\F113\";\n}\n.fa-folder-o:before {\n  content: \"\\F114\";\n}\n.fa-folder-open-o:before {\n  content: \"\\F115\";\n}\n.fa-smile-o:before {\n  content: \"\\F118\";\n}\n.fa-frown-o:before {\n  content: \"\\F119\";\n}\n.fa-meh-o:before {\n  content: \"\\F11A\";\n}\n.fa-gamepad:before {\n  content: \"\\F11B\";\n}\n.fa-keyboard-o:before {\n  content: \"\\F11C\";\n}\n.fa-flag-o:before {\n  content: \"\\F11D\";\n}\n.fa-flag-checkered:before {\n  content: \"\\F11E\";\n}\n.fa-terminal:before {\n  content: \"\\F120\";\n}\n.fa-code:before {\n  content: \"\\F121\";\n}\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: \"\\F122\";\n}\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: \"\\F123\";\n}\n.fa-location-arrow:before {\n  content: \"\\F124\";\n}\n.fa-crop:before {\n  content: \"\\F125\";\n}\n.fa-code-fork:before {\n  content: \"\\F126\";\n}\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: \"\\F127\";\n}\n.fa-question:before {\n  content: \"\\F128\";\n}\n.fa-info:before {\n  content: \"\\F129\";\n}\n.fa-exclamation:before {\n  content: \"\\F12A\";\n}\n.fa-superscript:before {\n  content: \"\\F12B\";\n}\n.fa-subscript:before {\n  content: \"\\F12C\";\n}\n.fa-eraser:before {\n  content: \"\\F12D\";\n}\n.fa-puzzle-piece:before {\n  content: \"\\F12E\";\n}\n.fa-microphone:before {\n  content: \"\\F130\";\n}\n.fa-microphone-slash:before {\n  content: \"\\F131\";\n}\n.fa-shield:before {\n  content: \"\\F132\";\n}\n.fa-calendar-o:before {\n  content: \"\\F133\";\n}\n.fa-fire-extinguisher:before {\n  content: \"\\F134\";\n}\n.fa-rocket:before {\n  content: \"\\F135\";\n}\n.fa-maxcdn:before {\n  content: \"\\F136\";\n}\n.fa-chevron-circle-left:before {\n  content: \"\\F137\";\n}\n.fa-chevron-circle-right:before {\n  content: \"\\F138\";\n}\n.fa-chevron-circle-up:before {\n  content: \"\\F139\";\n}\n.fa-chevron-circle-down:before {\n  content: \"\\F13A\";\n}\n.fa-html5:before {\n  content: \"\\F13B\";\n}\n.fa-css3:before {\n  content: \"\\F13C\";\n}\n.fa-anchor:before {\n  content: \"\\F13D\";\n}\n.fa-unlock-alt:before {\n  content: \"\\F13E\";\n}\n.fa-bullseye:before {\n  content: \"\\F140\";\n}\n.fa-ellipsis-h:before {\n  content: \"\\F141\";\n}\n.fa-ellipsis-v:before {\n  content: \"\\F142\";\n}\n.fa-rss-square:before {\n  content: \"\\F143\";\n}\n.fa-play-circle:before {\n  content: \"\\F144\";\n}\n.fa-ticket:before {\n  content: \"\\F145\";\n}\n.fa-minus-square:before {\n  content: \"\\F146\";\n}\n.fa-minus-square-o:before {\n  content: \"\\F147\";\n}\n.fa-level-up:before {\n  content: \"\\F148\";\n}\n.fa-level-down:before {\n  content: \"\\F149\";\n}\n.fa-check-square:before {\n  content: \"\\F14A\";\n}\n.fa-pencil-square:before {\n  content: \"\\F14B\";\n}\n.fa-external-link-square:before {\n  content: \"\\F14C\";\n}\n.fa-share-square:before {\n  content: \"\\F14D\";\n}\n.fa-compass:before {\n  content: \"\\F14E\";\n}\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: \"\\F150\";\n}\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: \"\\F151\";\n}\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: \"\\F152\";\n}\n.fa-euro:before,\n.fa-eur:before {\n  content: \"\\F153\";\n}\n.fa-gbp:before {\n  content: \"\\F154\";\n}\n.fa-dollar:before,\n.fa-usd:before {\n  content: \"\\F155\";\n}\n.fa-rupee:before,\n.fa-inr:before {\n  content: \"\\F156\";\n}\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: \"\\F157\";\n}\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: \"\\F158\";\n}\n.fa-won:before,\n.fa-krw:before {\n  content: \"\\F159\";\n}\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: \"\\F15A\";\n}\n.fa-file:before {\n  content: \"\\F15B\";\n}\n.fa-file-text:before {\n  content: \"\\F15C\";\n}\n.fa-sort-alpha-asc:before {\n  content: \"\\F15D\";\n}\n.fa-sort-alpha-desc:before {\n  content: \"\\F15E\";\n}\n.fa-sort-amount-asc:before {\n  content: \"\\F160\";\n}\n.fa-sort-amount-desc:before {\n  content: \"\\F161\";\n}\n.fa-sort-numeric-asc:before {\n  content: \"\\F162\";\n}\n.fa-sort-numeric-desc:before {\n  content: \"\\F163\";\n}\n.fa-thumbs-up:before {\n  content: \"\\F164\";\n}\n.fa-thumbs-down:before {\n  content: \"\\F165\";\n}\n.fa-youtube-square:before {\n  content: \"\\F166\";\n}\n.fa-youtube:before {\n  content: \"\\F167\";\n}\n.fa-xing:before {\n  content: \"\\F168\";\n}\n.fa-xing-square:before {\n  content: \"\\F169\";\n}\n.fa-youtube-play:before {\n  content: \"\\F16A\";\n}\n.fa-dropbox:before {\n  content: \"\\F16B\";\n}\n.fa-stack-overflow:before {\n  content: \"\\F16C\";\n}\n.fa-instagram:before {\n  content: \"\\F16D\";\n}\n.fa-flickr:before {\n  content: \"\\F16E\";\n}\n.fa-adn:before {\n  content: \"\\F170\";\n}\n.fa-bitbucket:before {\n  content: \"\\F171\";\n}\n.fa-bitbucket-square:before {\n  content: \"\\F172\";\n}\n.fa-tumblr:before {\n  content: \"\\F173\";\n}\n.fa-tumblr-square:before {\n  content: \"\\F174\";\n}\n.fa-long-arrow-down:before {\n  content: \"\\F175\";\n}\n.fa-long-arrow-up:before {\n  content: \"\\F176\";\n}\n.fa-long-arrow-left:before {\n  content: \"\\F177\";\n}\n.fa-long-arrow-right:before {\n  content: \"\\F178\";\n}\n.fa-apple:before {\n  content: \"\\F179\";\n}\n.fa-windows:before {\n  content: \"\\F17A\";\n}\n.fa-android:before {\n  content: \"\\F17B\";\n}\n.fa-linux:before {\n  content: \"\\F17C\";\n}\n.fa-dribbble:before {\n  content: \"\\F17D\";\n}\n.fa-skype:before {\n  content: \"\\F17E\";\n}\n.fa-foursquare:before {\n  content: \"\\F180\";\n}\n.fa-trello:before {\n  content: \"\\F181\";\n}\n.fa-female:before {\n  content: \"\\F182\";\n}\n.fa-male:before {\n  content: \"\\F183\";\n}\n.fa-gittip:before,\n.fa-gratipay:before {\n  content: \"\\F184\";\n}\n.fa-sun-o:before {\n  content: \"\\F185\";\n}\n.fa-moon-o:before {\n  content: \"\\F186\";\n}\n.fa-archive:before {\n  content: \"\\F187\";\n}\n.fa-bug:before {\n  content: \"\\F188\";\n}\n.fa-vk:before {\n  content: \"\\F189\";\n}\n.fa-weibo:before {\n  content: \"\\F18A\";\n}\n.fa-renren:before {\n  content: \"\\F18B\";\n}\n.fa-pagelines:before {\n  content: \"\\F18C\";\n}\n.fa-stack-exchange:before {\n  content: \"\\F18D\";\n}\n.fa-arrow-circle-o-right:before {\n  content: \"\\F18E\";\n}\n.fa-arrow-circle-o-left:before {\n  content: \"\\F190\";\n}\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: \"\\F191\";\n}\n.fa-dot-circle-o:before {\n  content: \"\\F192\";\n}\n.fa-wheelchair:before {\n  content: \"\\F193\";\n}\n.fa-vimeo-square:before {\n  content: \"\\F194\";\n}\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: \"\\F195\";\n}\n.fa-plus-square-o:before {\n  content: \"\\F196\";\n}\n.fa-space-shuttle:before {\n  content: \"\\F197\";\n}\n.fa-slack:before {\n  content: \"\\F198\";\n}\n.fa-envelope-square:before {\n  content: \"\\F199\";\n}\n.fa-wordpress:before {\n  content: \"\\F19A\";\n}\n.fa-openid:before {\n  content: \"\\F19B\";\n}\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: \"\\F19C\";\n}\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: \"\\F19D\";\n}\n.fa-yahoo:before {\n  content: \"\\F19E\";\n}\n.fa-google:before {\n  content: \"\\F1A0\";\n}\n.fa-reddit:before {\n  content: \"\\F1A1\";\n}\n.fa-reddit-square:before {\n  content: \"\\F1A2\";\n}\n.fa-stumbleupon-circle:before {\n  content: \"\\F1A3\";\n}\n.fa-stumbleupon:before {\n  content: \"\\F1A4\";\n}\n.fa-delicious:before {\n  content: \"\\F1A5\";\n}\n.fa-digg:before {\n  content: \"\\F1A6\";\n}\n.fa-pied-piper-pp:before {\n  content: \"\\F1A7\";\n}\n.fa-pied-piper-alt:before {\n  content: \"\\F1A8\";\n}\n.fa-drupal:before {\n  content: \"\\F1A9\";\n}\n.fa-joomla:before {\n  content: \"\\F1AA\";\n}\n.fa-language:before {\n  content: \"\\F1AB\";\n}\n.fa-fax:before {\n  content: \"\\F1AC\";\n}\n.fa-building:before {\n  content: \"\\F1AD\";\n}\n.fa-child:before {\n  content: \"\\F1AE\";\n}\n.fa-paw:before {\n  content: \"\\F1B0\";\n}\n.fa-spoon:before {\n  content: \"\\F1B1\";\n}\n.fa-cube:before {\n  content: \"\\F1B2\";\n}\n.fa-cubes:before {\n  content: \"\\F1B3\";\n}\n.fa-behance:before {\n  content: \"\\F1B4\";\n}\n.fa-behance-square:before {\n  content: \"\\F1B5\";\n}\n.fa-steam:before {\n  content: \"\\F1B6\";\n}\n.fa-steam-square:before {\n  content: \"\\F1B7\";\n}\n.fa-recycle:before {\n  content: \"\\F1B8\";\n}\n.fa-automobile:before,\n.fa-car:before {\n  content: \"\\F1B9\";\n}\n.fa-cab:before,\n.fa-taxi:before {\n  content: \"\\F1BA\";\n}\n.fa-tree:before {\n  content: \"\\F1BB\";\n}\n.fa-spotify:before {\n  content: \"\\F1BC\";\n}\n.fa-deviantart:before {\n  content: \"\\F1BD\";\n}\n.fa-soundcloud:before {\n  content: \"\\F1BE\";\n}\n.fa-database:before {\n  content: \"\\F1C0\";\n}\n.fa-file-pdf-o:before {\n  content: \"\\F1C1\";\n}\n.fa-file-word-o:before {\n  content: \"\\F1C2\";\n}\n.fa-file-excel-o:before {\n  content: \"\\F1C3\";\n}\n.fa-file-powerpoint-o:before {\n  content: \"\\F1C4\";\n}\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: \"\\F1C5\";\n}\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: \"\\F1C6\";\n}\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: \"\\F1C7\";\n}\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: \"\\F1C8\";\n}\n.fa-file-code-o:before {\n  content: \"\\F1C9\";\n}\n.fa-vine:before {\n  content: \"\\F1CA\";\n}\n.fa-codepen:before {\n  content: \"\\F1CB\";\n}\n.fa-jsfiddle:before {\n  content: \"\\F1CC\";\n}\n.fa-life-bouy:before,\n.fa-life-buoy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: \"\\F1CD\";\n}\n.fa-circle-o-notch:before {\n  content: \"\\F1CE\";\n}\n.fa-ra:before,\n.fa-resistance:before,\n.fa-rebel:before {\n  content: \"\\F1D0\";\n}\n.fa-ge:before,\n.fa-empire:before {\n  content: \"\\F1D1\";\n}\n.fa-git-square:before {\n  content: \"\\F1D2\";\n}\n.fa-git:before {\n  content: \"\\F1D3\";\n}\n.fa-y-combinator-square:before,\n.fa-yc-square:before,\n.fa-hacker-news:before {\n  content: \"\\F1D4\";\n}\n.fa-tencent-weibo:before {\n  content: \"\\F1D5\";\n}\n.fa-qq:before {\n  content: \"\\F1D6\";\n}\n.fa-wechat:before,\n.fa-weixin:before {\n  content: \"\\F1D7\";\n}\n.fa-send:before,\n.fa-paper-plane:before {\n  content: \"\\F1D8\";\n}\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: \"\\F1D9\";\n}\n.fa-history:before {\n  content: \"\\F1DA\";\n}\n.fa-circle-thin:before {\n  content: \"\\F1DB\";\n}\n.fa-header:before {\n  content: \"\\F1DC\";\n}\n.fa-paragraph:before {\n  content: \"\\F1DD\";\n}\n.fa-sliders:before {\n  content: \"\\F1DE\";\n}\n.fa-share-alt:before {\n  content: \"\\F1E0\";\n}\n.fa-share-alt-square:before {\n  content: \"\\F1E1\";\n}\n.fa-bomb:before {\n  content: \"\\F1E2\";\n}\n.fa-soccer-ball-o:before,\n.fa-futbol-o:before {\n  content: \"\\F1E3\";\n}\n.fa-tty:before {\n  content: \"\\F1E4\";\n}\n.fa-binoculars:before {\n  content: \"\\F1E5\";\n}\n.fa-plug:before {\n  content: \"\\F1E6\";\n}\n.fa-slideshare:before {\n  content: \"\\F1E7\";\n}\n.fa-twitch:before {\n  content: \"\\F1E8\";\n}\n.fa-yelp:before {\n  content: \"\\F1E9\";\n}\n.fa-newspaper-o:before {\n  content: \"\\F1EA\";\n}\n.fa-wifi:before {\n  content: \"\\F1EB\";\n}\n.fa-calculator:before {\n  content: \"\\F1EC\";\n}\n.fa-paypal:before {\n  content: \"\\F1ED\";\n}\n.fa-google-wallet:before {\n  content: \"\\F1EE\";\n}\n.fa-cc-visa:before {\n  content: \"\\F1F0\";\n}\n.fa-cc-mastercard:before {\n  content: \"\\F1F1\";\n}\n.fa-cc-discover:before {\n  content: \"\\F1F2\";\n}\n.fa-cc-amex:before {\n  content: \"\\F1F3\";\n}\n.fa-cc-paypal:before {\n  content: \"\\F1F4\";\n}\n.fa-cc-stripe:before {\n  content: \"\\F1F5\";\n}\n.fa-bell-slash:before {\n  content: \"\\F1F6\";\n}\n.fa-bell-slash-o:before {\n  content: \"\\F1F7\";\n}\n.fa-trash:before {\n  content: \"\\F1F8\";\n}\n.fa-copyright:before {\n  content: \"\\F1F9\";\n}\n.fa-at:before {\n  content: \"\\F1FA\";\n}\n.fa-eyedropper:before {\n  content: \"\\F1FB\";\n}\n.fa-paint-brush:before {\n  content: \"\\F1FC\";\n}\n.fa-birthday-cake:before {\n  content: \"\\F1FD\";\n}\n.fa-area-chart:before {\n  content: \"\\F1FE\";\n}\n.fa-pie-chart:before {\n  content: \"\\F200\";\n}\n.fa-line-chart:before {\n  content: \"\\F201\";\n}\n.fa-lastfm:before {\n  content: \"\\F202\";\n}\n.fa-lastfm-square:before {\n  content: \"\\F203\";\n}\n.fa-toggle-off:before {\n  content: \"\\F204\";\n}\n.fa-toggle-on:before {\n  content: \"\\F205\";\n}\n.fa-bicycle:before {\n  content: \"\\F206\";\n}\n.fa-bus:before {\n  content: \"\\F207\";\n}\n.fa-ioxhost:before {\n  content: \"\\F208\";\n}\n.fa-angellist:before {\n  content: \"\\F209\";\n}\n.fa-cc:before {\n  content: \"\\F20A\";\n}\n.fa-shekel:before,\n.fa-sheqel:before,\n.fa-ils:before {\n  content: \"\\F20B\";\n}\n.fa-meanpath:before {\n  content: \"\\F20C\";\n}\n.fa-buysellads:before {\n  content: \"\\F20D\";\n}\n.fa-connectdevelop:before {\n  content: \"\\F20E\";\n}\n.fa-dashcube:before {\n  content: \"\\F210\";\n}\n.fa-forumbee:before {\n  content: \"\\F211\";\n}\n.fa-leanpub:before {\n  content: \"\\F212\";\n}\n.fa-sellsy:before {\n  content: \"\\F213\";\n}\n.fa-shirtsinbulk:before {\n  content: \"\\F214\";\n}\n.fa-simplybuilt:before {\n  content: \"\\F215\";\n}\n.fa-skyatlas:before {\n  content: \"\\F216\";\n}\n.fa-cart-plus:before {\n  content: \"\\F217\";\n}\n.fa-cart-arrow-down:before {\n  content: \"\\F218\";\n}\n.fa-diamond:before {\n  content: \"\\F219\";\n}\n.fa-ship:before {\n  content: \"\\F21A\";\n}\n.fa-user-secret:before {\n  content: \"\\F21B\";\n}\n.fa-motorcycle:before {\n  content: \"\\F21C\";\n}\n.fa-street-view:before {\n  content: \"\\F21D\";\n}\n.fa-heartbeat:before {\n  content: \"\\F21E\";\n}\n.fa-venus:before {\n  content: \"\\F221\";\n}\n.fa-mars:before {\n  content: \"\\F222\";\n}\n.fa-mercury:before {\n  content: \"\\F223\";\n}\n.fa-intersex:before,\n.fa-transgender:before {\n  content: \"\\F224\";\n}\n.fa-transgender-alt:before {\n  content: \"\\F225\";\n}\n.fa-venus-double:before {\n  content: \"\\F226\";\n}\n.fa-mars-double:before {\n  content: \"\\F227\";\n}\n.fa-venus-mars:before {\n  content: \"\\F228\";\n}\n.fa-mars-stroke:before {\n  content: \"\\F229\";\n}\n.fa-mars-stroke-v:before {\n  content: \"\\F22A\";\n}\n.fa-mars-stroke-h:before {\n  content: \"\\F22B\";\n}\n.fa-neuter:before {\n  content: \"\\F22C\";\n}\n.fa-genderless:before {\n  content: \"\\F22D\";\n}\n.fa-facebook-official:before {\n  content: \"\\F230\";\n}\n.fa-pinterest-p:before {\n  content: \"\\F231\";\n}\n.fa-whatsapp:before {\n  content: \"\\F232\";\n}\n.fa-server:before {\n  content: \"\\F233\";\n}\n.fa-user-plus:before {\n  content: \"\\F234\";\n}\n.fa-user-times:before {\n  content: \"\\F235\";\n}\n.fa-hotel:before,\n.fa-bed:before {\n  content: \"\\F236\";\n}\n.fa-viacoin:before {\n  content: \"\\F237\";\n}\n.fa-train:before {\n  content: \"\\F238\";\n}\n.fa-subway:before {\n  content: \"\\F239\";\n}\n.fa-medium:before {\n  content: \"\\F23A\";\n}\n.fa-yc:before,\n.fa-y-combinator:before {\n  content: \"\\F23B\";\n}\n.fa-optin-monster:before {\n  content: \"\\F23C\";\n}\n.fa-opencart:before {\n  content: \"\\F23D\";\n}\n.fa-expeditedssl:before {\n  content: \"\\F23E\";\n}\n.fa-battery-4:before,\n.fa-battery-full:before {\n  content: \"\\F240\";\n}\n.fa-battery-3:before,\n.fa-battery-three-quarters:before {\n  content: \"\\F241\";\n}\n.fa-battery-2:before,\n.fa-battery-half:before {\n  content: \"\\F242\";\n}\n.fa-battery-1:before,\n.fa-battery-quarter:before {\n  content: \"\\F243\";\n}\n.fa-battery-0:before,\n.fa-battery-empty:before {\n  content: \"\\F244\";\n}\n.fa-mouse-pointer:before {\n  content: \"\\F245\";\n}\n.fa-i-cursor:before {\n  content: \"\\F246\";\n}\n.fa-object-group:before {\n  content: \"\\F247\";\n}\n.fa-object-ungroup:before {\n  content: \"\\F248\";\n}\n.fa-sticky-note:before {\n  content: \"\\F249\";\n}\n.fa-sticky-note-o:before {\n  content: \"\\F24A\";\n}\n.fa-cc-jcb:before {\n  content: \"\\F24B\";\n}\n.fa-cc-diners-club:before {\n  content: \"\\F24C\";\n}\n.fa-clone:before {\n  content: \"\\F24D\";\n}\n.fa-balance-scale:before {\n  content: \"\\F24E\";\n}\n.fa-hourglass-o:before {\n  content: \"\\F250\";\n}\n.fa-hourglass-1:before,\n.fa-hourglass-start:before {\n  content: \"\\F251\";\n}\n.fa-hourglass-2:before,\n.fa-hourglass-half:before {\n  content: \"\\F252\";\n}\n.fa-hourglass-3:before,\n.fa-hourglass-end:before {\n  content: \"\\F253\";\n}\n.fa-hourglass:before {\n  content: \"\\F254\";\n}\n.fa-hand-grab-o:before,\n.fa-hand-rock-o:before {\n  content: \"\\F255\";\n}\n.fa-hand-stop-o:before,\n.fa-hand-paper-o:before {\n  content: \"\\F256\";\n}\n.fa-hand-scissors-o:before {\n  content: \"\\F257\";\n}\n.fa-hand-lizard-o:before {\n  content: \"\\F258\";\n}\n.fa-hand-spock-o:before {\n  content: \"\\F259\";\n}\n.fa-hand-pointer-o:before {\n  content: \"\\F25A\";\n}\n.fa-hand-peace-o:before {\n  content: \"\\F25B\";\n}\n.fa-trademark:before {\n  content: \"\\F25C\";\n}\n.fa-registered:before {\n  content: \"\\F25D\";\n}\n.fa-creative-commons:before {\n  content: \"\\F25E\";\n}\n.fa-gg:before {\n  content: \"\\F260\";\n}\n.fa-gg-circle:before {\n  content: \"\\F261\";\n}\n.fa-tripadvisor:before {\n  content: \"\\F262\";\n}\n.fa-odnoklassniki:before {\n  content: \"\\F263\";\n}\n.fa-odnoklassniki-square:before {\n  content: \"\\F264\";\n}\n.fa-get-pocket:before {\n  content: \"\\F265\";\n}\n.fa-wikipedia-w:before {\n  content: \"\\F266\";\n}\n.fa-safari:before {\n  content: \"\\F267\";\n}\n.fa-chrome:before {\n  content: \"\\F268\";\n}\n.fa-firefox:before {\n  content: \"\\F269\";\n}\n.fa-opera:before {\n  content: \"\\F26A\";\n}\n.fa-internet-explorer:before {\n  content: \"\\F26B\";\n}\n.fa-tv:before,\n.fa-television:before {\n  content: \"\\F26C\";\n}\n.fa-contao:before {\n  content: \"\\F26D\";\n}\n.fa-500px:before {\n  content: \"\\F26E\";\n}\n.fa-amazon:before {\n  content: \"\\F270\";\n}\n.fa-calendar-plus-o:before {\n  content: \"\\F271\";\n}\n.fa-calendar-minus-o:before {\n  content: \"\\F272\";\n}\n.fa-calendar-times-o:before {\n  content: \"\\F273\";\n}\n.fa-calendar-check-o:before {\n  content: \"\\F274\";\n}\n.fa-industry:before {\n  content: \"\\F275\";\n}\n.fa-map-pin:before {\n  content: \"\\F276\";\n}\n.fa-map-signs:before {\n  content: \"\\F277\";\n}\n.fa-map-o:before {\n  content: \"\\F278\";\n}\n.fa-map:before {\n  content: \"\\F279\";\n}\n.fa-commenting:before {\n  content: \"\\F27A\";\n}\n.fa-commenting-o:before {\n  content: \"\\F27B\";\n}\n.fa-houzz:before {\n  content: \"\\F27C\";\n}\n.fa-vimeo:before {\n  content: \"\\F27D\";\n}\n.fa-black-tie:before {\n  content: \"\\F27E\";\n}\n.fa-fonticons:before {\n  content: \"\\F280\";\n}\n.fa-reddit-alien:before {\n  content: \"\\F281\";\n}\n.fa-edge:before {\n  content: \"\\F282\";\n}\n.fa-credit-card-alt:before {\n  content: \"\\F283\";\n}\n.fa-codiepie:before {\n  content: \"\\F284\";\n}\n.fa-modx:before {\n  content: \"\\F285\";\n}\n.fa-fort-awesome:before {\n  content: \"\\F286\";\n}\n.fa-usb:before {\n  content: \"\\F287\";\n}\n.fa-product-hunt:before {\n  content: \"\\F288\";\n}\n.fa-mixcloud:before {\n  content: \"\\F289\";\n}\n.fa-scribd:before {\n  content: \"\\F28A\";\n}\n.fa-pause-circle:before {\n  content: \"\\F28B\";\n}\n.fa-pause-circle-o:before {\n  content: \"\\F28C\";\n}\n.fa-stop-circle:before {\n  content: \"\\F28D\";\n}\n.fa-stop-circle-o:before {\n  content: \"\\F28E\";\n}\n.fa-shopping-bag:before {\n  content: \"\\F290\";\n}\n.fa-shopping-basket:before {\n  content: \"\\F291\";\n}\n.fa-hashtag:before {\n  content: \"\\F292\";\n}\n.fa-bluetooth:before {\n  content: \"\\F293\";\n}\n.fa-bluetooth-b:before {\n  content: \"\\F294\";\n}\n.fa-percent:before {\n  content: \"\\F295\";\n}\n.fa-gitlab:before {\n  content: \"\\F296\";\n}\n.fa-wpbeginner:before {\n  content: \"\\F297\";\n}\n.fa-wpforms:before {\n  content: \"\\F298\";\n}\n.fa-envira:before {\n  content: \"\\F299\";\n}\n.fa-universal-access:before {\n  content: \"\\F29A\";\n}\n.fa-wheelchair-alt:before {\n  content: \"\\F29B\";\n}\n.fa-question-circle-o:before {\n  content: \"\\F29C\";\n}\n.fa-blind:before {\n  content: \"\\F29D\";\n}\n.fa-audio-description:before {\n  content: \"\\F29E\";\n}\n.fa-volume-control-phone:before {\n  content: \"\\F2A0\";\n}\n.fa-braille:before {\n  content: \"\\F2A1\";\n}\n.fa-assistive-listening-systems:before {\n  content: \"\\F2A2\";\n}\n.fa-asl-interpreting:before,\n.fa-american-sign-language-interpreting:before {\n  content: \"\\F2A3\";\n}\n.fa-deafness:before,\n.fa-hard-of-hearing:before,\n.fa-deaf:before {\n  content: \"\\F2A4\";\n}\n.fa-glide:before {\n  content: \"\\F2A5\";\n}\n.fa-glide-g:before {\n  content: \"\\F2A6\";\n}\n.fa-signing:before,\n.fa-sign-language:before {\n  content: \"\\F2A7\";\n}\n.fa-low-vision:before {\n  content: \"\\F2A8\";\n}\n.fa-viadeo:before {\n  content: \"\\F2A9\";\n}\n.fa-viadeo-square:before {\n  content: \"\\F2AA\";\n}\n.fa-snapchat:before {\n  content: \"\\F2AB\";\n}\n.fa-snapchat-ghost:before {\n  content: \"\\F2AC\";\n}\n.fa-snapchat-square:before {\n  content: \"\\F2AD\";\n}\n.fa-pied-piper:before {\n  content: \"\\F2AE\";\n}\n.fa-first-order:before {\n  content: \"\\F2B0\";\n}\n.fa-yoast:before {\n  content: \"\\F2B1\";\n}\n.fa-themeisle:before {\n  content: \"\\F2B2\";\n}\n.fa-google-plus-circle:before,\n.fa-google-plus-official:before {\n  content: \"\\F2B3\";\n}\n.fa-fa:before,\n.fa-font-awesome:before {\n  content: \"\\F2B4\";\n}\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.fa-2x {\n  font-size: 2em;\n}\n.fa-3x {\n  font-size: 3em;\n}\n.fa-4x {\n  font-size: 4em;\n}\n.fa-5x {\n  font-size: 5em;\n}\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.fa-ul > li {\n  position: relative;\n}\n.fa-li {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.fa-li.fa-lg {\n  left: -1.85714286em;\n}\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url(" + __webpack_require__(138) + ");\n  src: url(" + __webpack_require__(139) + "?#iefix&v=4.6.3) format('embedded-opentype'), url(" + __webpack_require__(140) + ") format('woff2'), url(" + __webpack_require__(141) + ") format('woff'), url(" + __webpack_require__(142) + ") format('truetype'), url(" + __webpack_require__(143) + "#fontawesomeregular) format('svg');\n  font-weight: normal;\n  font-style: normal;\n}\n.fa-rotate-90 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n.fa-rotate-180 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg);\n}\n.fa-rotate-270 {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg);\n}\n.fa-flip-horizontal {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  -ms-filter: \"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  filter: none;\n}\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear;\n}\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8);\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.fa-stack-1x,\n.fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.fa-stack-1x {\n  line-height: inherit;\n}\n.fa-stack-2x {\n  font-size: 2em;\n}\n.fa-inverse {\n  color: #fff;\n}\n", ""]);
	
	// exports


/***/ },
/* 137 */
/***/ function(module, exports) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	// css base code, injected by the css-loader
	module.exports = function() {
		var list = [];
	
		// return the list of modules as css string
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
	
		// import a list of modules into the list
		list.i = function(modules, mediaQuery) {
			if(typeof modules === "string")
				modules = [[null, modules, ""]];
			var alreadyImportedModules = {};
			for(var i = 0; i < this.length; i++) {
				var id = this[i][0];
				if(typeof id === "number")
					alreadyImportedModules[id] = true;
			}
			for(i = 0; i < modules.length; i++) {
				var item = modules[i];
				// skip already imported module
				// this implementation is not 100% perfect for weird media query combinations
				//  when a module is imported multiple times with different media queries.
				//  I hope this will never occur (Hey this way we have smaller bundles)
				if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
					if(mediaQuery && !item[2]) {
						item[2] = mediaQuery;
					} else if(mediaQuery) {
						item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
					}
					list.push(item);
				}
			}
		};
		return list;
	};


/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "25a32416abee198dd821b0b17a198a8f.eot";

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "25a32416abee198dd821b0b17a198a8f.eot";

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "e6cf7c6ec7c2d6f670ae9d762604cb0b.woff2";

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "c8ddf1e5e5bf3682bc7bebf30f394148.woff";

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "1dc35d25e61d819a9c357074014867ab.ttf";

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "d7c639084f684d66a1bc66855d193ed8.svg";

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}
	
	function createLinkElement() {
		var linkElement = document.createElement("link");
		var head = getHeadElement();
		linkElement.rel = "stylesheet";
		head.appendChild(linkElement);
		return linkElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else if(obj.sourceMap &&
			typeof URL === "function" &&
			typeof URL.createObjectURL === "function" &&
			typeof URL.revokeObjectURL === "function" &&
			typeof Blob === "function" &&
			typeof btoa === "function") {
			styleElement = createLinkElement();
			update = updateLink.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
				if(styleElement.href)
					URL.revokeObjectURL(styleElement.href);
			};
		} else {
			styleElement = createStyleElement();
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				styleElement.parentNode.removeChild(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}
	
	function updateLink(linkElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap) {
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		var blob = new Blob([css], { type: "text/css" });
	
		var oldSrc = linkElement.href;
	
		linkElement.href = URL.createObjectURL(blob);
	
		if(oldSrc)
			URL.revokeObjectURL(oldSrc);
	}


/***/ },
/* 145 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(146)
	__vue_script__ = __webpack_require__(149)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\App.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(274)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(147);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./App.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./App.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nbody {\r\n\tbackground: white !important;\r\n\tpadding-top: 50px;\r\n}\r\n\r\n.content {\r\n\tmargin-top: 50px;\r\n}\r\n\r\n.headContainer {\r\n\tmargin-left: 1%;\r\n\tmargin-right: 1%;\r\n}\r\n\r\n.sidebar {\r\n  display: none;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n.sidebar {\r\n    position: fixed;\r\n    top: 50px;\r\n    bottom: 0;\r\n    left: 0;\r\n    z-index: 1000;\r\n    display: block;\r\n    padding: 20px;\r\n    overflow-x: hidden;\r\n    overflow-y: auto;         /* Scrollable contents if viewport is shorter than content. */\r\n    background-color: #f5f5f5;\r\n    border-right: 1px solid #eee;\r\n  }\r\n}\r\n\r\n.undecorated-link:hover {\r\n\ttext-decoration: none;\r\n}\r\n\r\n", ""]);
	
	// exports


/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isOldIE = memoize(function() {
			return /msie [6-9]\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0,
		styleElementsInsertedAtTop = [];
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isOldIE();
	
		// By default, add <style> tags to the bottom of <head>.
		if (typeof options.insertAt === "undefined") options.insertAt = "bottom";
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function insertStyleElement(options, styleElement) {
		var head = getHeadElement();
		var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
		if (options.insertAt === "top") {
			if(!lastStyleElementInsertedAtTop) {
				head.insertBefore(styleElement, head.firstChild);
			} else if(lastStyleElementInsertedAtTop.nextSibling) {
				head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
			} else {
				head.appendChild(styleElement);
			}
			styleElementsInsertedAtTop.push(styleElement);
		} else if (options.insertAt === "bottom") {
			head.appendChild(styleElement);
		} else {
			throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
		}
	}
	
	function removeStyleElement(styleElement) {
		styleElement.parentNode.removeChild(styleElement);
		var idx = styleElementsInsertedAtTop.indexOf(styleElement);
		if(idx >= 0) {
			styleElementsInsertedAtTop.splice(idx, 1);
		}
	}
	
	function createStyleElement(options) {
		var styleElement = document.createElement("style");
		styleElement.type = "text/css";
		insertStyleElement(options, styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement(options));
			update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
			remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
		} else {
			styleElement = createStyleElement(options);
			update = applyToTag.bind(null, styleElement);
			remove = function() {
				removeStyleElement(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	var replaceText = (function () {
		var textStore = [];
	
		return function (index, replacement) {
			textStore[index] = replacement;
			return textStore.filter(Boolean).join('\n');
		};
	})();
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if (media) {
			styleElement.setAttribute("media", media);
		}
	
		if (sourceMap) {
			// https://developer.chrome.com/devtools/docs/javascript-debugging
			// this makes source maps inside style tags work properly in Chrome
			css += '\n/*# sourceURL=' + sourceMap.sources[0] + ' */';
			// http://stackoverflow.com/a/26603875
			css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
		}
	
		if (styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _SideBar = __webpack_require__(150);
	
	var _SideBar2 = _interopRequireDefault(_SideBar);
	
	var _Content = __webpack_require__(224);
	
	var _Content2 = _interopRequireDefault(_Content);
	
	var _ToolList = __webpack_require__(244);
	
	var _ToolList2 = _interopRequireDefault(_ToolList);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    components: {
	        SideBar: _SideBar2.default,
	        Content: _Content2.default,
	        ToolList: _ToolList2.default
	    }
	};
	
	// </script>
	//
	// <<style>
	// body {
	// 	background: white !important;
	// 	padding-top: 50px;
	// }
	//
	// .content {
	// 	margin-top: 50px;
	// }
	//
	// .headContainer {
	// 	margin-left: 1%;
	// 	margin-right: 1%;
	// }
	//
	// .sidebar {
	//   display: none;
	// }
	//
	// @media (min-width: 768px) {
	// .sidebar {
	//     position: fixed;
	//     top: 50px;
	//     bottom: 0;
	//     left: 0;
	//     z-index: 1000;
	//     display: block;
	//     padding: 20px;
	//     overflow-x: hidden;
	//     overflow-y: auto;         /* Scrollable contents if viewport is shorter than content. */
	//     background-color: #f5f5f5;
	//     border-right: 1px solid #eee;
	//   }
	// }
	//
	// .undecorated-link:hover {
	// 	text-decoration: none;
	// }
	//
	// </style>
	/* generated by vue-loader */
	// <template>
	//
	// <header  class="navbar navbar-fixed-top navbar-inverse">
	//     <div class="headContainer">
	// 	<div class="navbar-header">
	// 		<a class="navbar-brand" style="font-size: 24px; color: white; cursor: pointer;">VisMooc</a>
	// 	</div>
	//
	// 	<div class="navbar-header" style="float: right">
	// 		<a class="navbar-brand" style="font-size: 22px; color: #DEDEDE; cursor: pointer;" href="/login">Login</a>
	// 		<a class="navbar-brand" style="font-size: 22px; color: #DEDEDE; cursor: pointer;">Help</a>
	// 	</div>
	// </div>
	// </header>
	//
	//     <div class="container-fluid">
	//
	//     <div class="row">
	//         <div class="col-xs-3 col-sm-3 col-md-3 col-lg-3 sidebar">
	//
	//             <side-bar></side-bar>
	//         </div>
	//
	//         <div class="col-sm-8 col-sm-offset-3 col-md-8 col-md-offset-3 col-lg-8 col-lg-offset-3 content">
	//             <content></content>
	//         </div>
	//
	//         <div class="col-sm-1 col-sm-offset-11 col-md-1 col-md-offset-11 sidebar vistoolkit">
	//
	//             <tool-list></tool-list>
	//         </div>
	//     </div>
	//     </div>
	//
	// </template>
	//
	// <script>


	//Component

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__vue_script__ = __webpack_require__(151)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\SideBar.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(223)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _session = __webpack_require__(221);
	
	var _session2 = _interopRequireDefault(_session);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    ready: function ready() {
	        var _this = this;
	
	        //Get the course list when component is ready
	        _datamanager2.default.getCourseList(function (response) {
	            _this.courseList = {};
	            response.data.forEach(function (d) {
	                _this.courseList[d.courseId] = d;
	            });
	        });
	
	        //set the event listener
	        (0, _communicator2.default)(this).onChangeVideo(function (video) {
	            if (_this.selectedVideoId === video.videoId) return;
	            _this.selectedVideoId = video.videoId;
	            $('#videolist').scrollTop(0);
	            $('#videolist').scrollTop($(_this.hashVideo[video.videoId]).position().top - 50);
	        });
	    },
	    data: function data() {
	        return {
	
	            selectedCourseId: "",
	            /*
	            course:{
	                _id:string,
	                courseId:number|string,
	                courseName:string,
	                instructor:string,
	                url:string,img:string,
	                description:string 
	            }
	            */
	            courseList: {},
	            selectedVideoId: -1,
	            /*
	            videoGroup:[{
	                week:number|string,
	                videos:[
	                    {
	                        id:string,
	                        courseId:string,
	                        date:number|string,
	                        pop:number|string,
	                        title:string,
	                        videoId:string,
	                        videoLength:string|number,
	                        videoSource:string,
	                        week:string|number
	                    }
	                ]
	            }]
	             */
	            videoList: [],
	            hashVideo: {}
	        };
	    },
	
	    methods: {
	        selectVideo: function selectVideo(video) {
	            if (this.selectedVideoId === video.videoId) return;
	
	            this.selectedVideoId = video.videoId;
	            video.currentTime = 0;
	            _session2.default.set('selectedVideo', video);
	            (0, _communicator2.default)(this).emitChangeVideo(video);
	        }
	    },
	    watch: {
	        selectedCourseId: function selectedCourseId(newValue, oldValue) {
	            var _this2 = this;
	
	            if (newValue === oldValue || !newValue) return;
	            //Set the session of selectedCourseId
	            _session2.default.set('selectedCourse', this.courseList[this.selectedCourseId]);
	
	            //Get the video list when switch to different course
	            _datamanager2.default.getVideoList(this.selectedCourseId, function (response) {
	                _this2.videoList = response.data;
	                var hashVideo = {};
	                _this2.videoList.forEach(function (group, group_index) {
	                    group.videos.forEach(function (video, video_index) {
	                        hashVideo[video.videoId] = '#v_group' + group_index;
	                    });
	                });
	                _this2.hashVideo = hashVideo;
	            });
	
	            //emit signal
	            (0, _communicator2.default)(this).emitChangeCourse(this.selectedCourseId);
	        }
	    }
	};
	
	// </script>
	/* generated by vue-loader */
	// <template>
	//     <div id="videolist">
	//         <h4>Course Name</h4>
	//         <div class="input-group">
	//             <select class="form-control" v-model="selectedCourseId">
	//                 <option v-for="course in courseList" :value="course.courseId" track-by="courseId">
	//                     {{course.courseName }}
	//                 </option>
	//             </select>
	//         </div>
	//         <hr/>
	//         <div id="{{'v_group'+$index}}" class="panel panel-default panel-group"  v-for="videoGroup in videoList">
	//             <div class="panel-heading">
	//                 <h4 class="panel-title">
	//                     <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordionTwo" href="#collapse{{videoGroup.week}}">Week {{videoGroup.week}}</a>
	//                 </h4>
	//             </div>
	//             <div class="panel-collapse collapse in" id="collapse{{videoGroup.week}}">
	//                 <div class="list-group" v-for="video in videoGroup.videos">
	//                     <a :class="{'active':selectedVideoId === video.videoId}" @click="selectVideo(video)" class="list-group-item" style="cursor:pointer;">{{video.title}}</a>
	//                 </div>
	//             </div>
	//         </div>
	//     </div>
	// </template>
	//
	// <script>
	//service
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof2 = __webpack_require__(153);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	var _vue = __webpack_require__(84);
	
	var _vue2 = _interopRequireDefault(_vue);
	
	var _vueResource = __webpack_require__(87);
	
	var _vueResource2 = _interopRequireDefault(_vueResource);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	_vue2.default.use(_vueResource2.default);
	
	var mainPath = '/';
	var $http = _vue2.default.http;
	
	// We need
	var getActionCountInfo = function getActionCountInfo(courseId, videoId, paramters, callback) {
	    var tmpURL = mainPath + 'getContentBasedData?type=action&courseId=' + courseId + '&videoId=' + videoId;
	    if (typeof paramters === 'function') {
	        callback = paramters;
	    } else if ((typeof paramters === 'undefined' ? 'undefined' : (0, _typeof3.default)(paramters)) === 'object') {
	        for (var p in paramters) {
	            tmpURL += '&' + p + '=' + paramters[p];
	        }
	    }
	
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getSeekInfo = function getSeekInfo(courseId, videoId, paramters, callback) {
	    var tmpURL = mainPath + 'getContentBasedData?type=seek&courseId=' + courseId + '&videoId=' + videoId;
	    if (typeof paramters === 'function') {
	        callback = paramters;
	    } else if ((typeof paramters === 'undefined' ? 'undefined' : (0, _typeof3.default)(paramters)) === 'object') {
	        for (var p in paramters) {
	            tmpURL += '&' + p + '=' + paramters[p];
	        }
	    }
	
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getCourseList = function getCourseList(callback) {
	    var tmpURL = mainPath + 'getCourseList';
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getVideoList = function getVideoList(courseId, callback) {
	    var tmpURL = mainPath + 'getVideoList?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        response.data.forEach(function (week) {
	            week.videos.forEach(function (video) {
	                if (!video.videoSource) {
	                    video.videoSource = "";
	                }
	            });
	        });
	        callback(response);
	    });
	};
	
	var getCourseInfo = function getCourseInfo(courseId, callback) {
	    var tmpURL = mainPath + 'getCourseInfo?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getHotness = function getHotness(courseId, callback) {
	    var tmpURL = mainPath + 'getHotness?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getDemographicData = function getDemographicData(courseId, callback) {
	    var tmpURL = mainPath + 'getDemographicData?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	var getDailyHotnessByVideo = function getDailyHotnessByVideo(courseId, videoId, callback) {
	    var tmpURL = mainPath + 'getVideoPop?courseId=' + courseId + '&videoId=' + videoId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	// no need currently
	var getSentiment = function getSentiment(courseId, callback) {
	    var tmpURL = mainPath + 'getSentiment?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getWordCloudData = function getWordCloudData(courseId, userId, callback) {
	    var tmpURL = mainPath + 'getWordCloudData?courseId=' + courseId + '&userId=' + userId;
	
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getWordCloudDataByGeo = function getWordCloudDataByGeo(courseId, code3, callback) {
	    var tmpURL = mainPath + 'getWordCloudDataByGeo?courseId=' + courseId + '&countryCode=' + code3;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getSentimentDetails = function getSentimentDetails(courseId, days, callback) {
	    var tmpURL = mainPath + 'getSentimentDetails?courseId=' + courseId + '&days=' + days;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getForumSocialNetwork = function getForumSocialNetwork(courseId, filterLevel, callback) {
	    if (filterLevel === 0 || filterLevel) {} else {
	        filterLevel = 0;
	    }
	    var tmpURL = mainPath + 'data/forumSocialNetwork/' + courseId + '-' + filterLevel + ".json";
	    $http.get(tmpURL).then(function (response) {
	        if (response.ok) callback(response);
	    });
	};
	
	var getAnimationTest = function getAnimationTest(courseId, videoId, startTime, endTime, callback) {
	    var tmpURL = mainPath + 'animationtest?videoId=' + videoId + '&courseId=' + courseId + '&startTime=' + startTime + '&endTime=' + endTime;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getGlyphInfo = function getGlyphInfo(courseId, callback) {
	    var tmpURL = mainPath + 'getGlyphInfo?courseId=' + courseId;
	    $http.get(tmpURL).then(function (response) {
	        callback(response);
	    });
	};
	
	var getParallelCoor = function getParallelCoor(courseId, callback) {
	    var tempURL = mainPath + 'ParallelCoor?courseId=' + courseId;
	    $http.get(tempURL).then(function (response) {
	        callback(response);
	    });
	};
	
	// Public API
	exports.default = {
	    getParallelCoor: getParallelCoor,
	    getGlyphInfo: getGlyphInfo,
	    getAnimationTest: getAnimationTest,
	    getSentiment: getSentiment,
	    getWordCloudData: getWordCloudData,
	    getWordCloudDataByGeo: getWordCloudDataByGeo,
	    getSentimentDetails: getSentimentDetails,
	    getForumSocialNetwork: getForumSocialNetwork,
	    getActionCountInfo: getActionCountInfo,
	    getSeekInfo: getSeekInfo,
	    getDailyHotnessByVideo: getDailyHotnessByVideo,
	    getDemographicData: getDemographicData,
	    getCourseInfo: getCourseInfo,
	    getCourseList: getCourseList,
	    getHotness: getHotness,
	    getVideoList: getVideoList
	};

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(154);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(205);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj; };
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 154 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(155), __esModule: true };

/***/ },
/* 155 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(156);
	__webpack_require__(200);
	module.exports = __webpack_require__(204).f('iterator');

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $at  = __webpack_require__(157)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(160)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(158)
	  , defined   = __webpack_require__(159);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 158 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 159 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 160 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var LIBRARY        = __webpack_require__(161)
	  , $export        = __webpack_require__(162)
	  , redefine       = __webpack_require__(177)
	  , hide           = __webpack_require__(167)
	  , has            = __webpack_require__(178)
	  , Iterators      = __webpack_require__(179)
	  , $iterCreate    = __webpack_require__(180)
	  , setToStringTag = __webpack_require__(196)
	  , getPrototypeOf = __webpack_require__(198)
	  , ITERATOR       = __webpack_require__(197)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';
	
	var returnThis = function(){ return this; };
	
	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
	    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
	    , methods, key, IteratorPrototype;
	  // Fix native
	  if($anyNative){
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
	    if(IteratorPrototype !== Object.prototype){
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if(DEF_VALUES && $native && $native.name !== VALUES){
	    VALUES_BUG = true;
	    $default = function values(){ return $native.call(this); };
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES ? $default : getMethod(VALUES),
	      keys:    IS_SET     ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 161 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	var global    = __webpack_require__(163)
	  , core      = __webpack_require__(164)
	  , ctx       = __webpack_require__(165)
	  , hide      = __webpack_require__(167)
	  , PROTOTYPE = 'prototype';
	
	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , expProto  = exports[PROTOTYPE]
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(a, b, c){
	        if(this instanceof C){
	          switch(arguments.length){
	            case 0: return new C;
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if(IS_PROTO){
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 163 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 164 */
/***/ function(module, exports) {

	var core = module.exports = {version: '2.4.0'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(166);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 166 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	var dP         = __webpack_require__(168)
	  , createDesc = __webpack_require__(176);
	module.exports = __webpack_require__(172) ? function(object, key, value){
	  return dP.f(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	var anObject       = __webpack_require__(169)
	  , IE8_DOM_DEFINE = __webpack_require__(171)
	  , toPrimitive    = __webpack_require__(175)
	  , dP             = Object.defineProperty;
	
	exports.f = __webpack_require__(172) ? Object.defineProperty : function defineProperty(O, P, Attributes){
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if(IE8_DOM_DEFINE)try {
	    return dP(O, P, Attributes);
	  } catch(e){ /* empty */ }
	  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
	  if('value' in Attributes)O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(170);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 170 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = !__webpack_require__(172) && !__webpack_require__(173)(function(){
	  return Object.defineProperty(__webpack_require__(174)('div'), 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(173)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 173 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 174 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(170)
	  , document = __webpack_require__(163).document
	  // in old IE typeof document.createElement is 'object'
	  , is = isObject(document) && isObject(document.createElement);
	module.exports = function(it){
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 175 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(170);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function(it, S){
	  if(!isObject(it))return it;
	  var fn, val;
	  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
	  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 176 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(167);

/***/ },
/* 178 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 179 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var create         = __webpack_require__(181)
	  , descriptor     = __webpack_require__(176)
	  , setToStringTag = __webpack_require__(196)
	  , IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(167)(IteratorPrototype, __webpack_require__(197)('iterator'), function(){ return this; });
	
	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject    = __webpack_require__(169)
	  , dPs         = __webpack_require__(182)
	  , enumBugKeys = __webpack_require__(194)
	  , IE_PROTO    = __webpack_require__(191)('IE_PROTO')
	  , Empty       = function(){ /* empty */ }
	  , PROTOTYPE   = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function(){
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(174)('iframe')
	    , i      = enumBugKeys.length
	    , lt     = '<'
	    , gt     = '>'
	    , iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(195).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
	  return createDict();
	};
	
	module.exports = Object.create || function create(O, Properties){
	  var result;
	  if(O !== null){
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty;
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};


/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	var dP       = __webpack_require__(168)
	  , anObject = __webpack_require__(169)
	  , getKeys  = __webpack_require__(183);
	
	module.exports = __webpack_require__(172) ? Object.defineProperties : function defineProperties(O, Properties){
	  anObject(O);
	  var keys   = getKeys(Properties)
	    , length = keys.length
	    , i = 0
	    , P;
	  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys       = __webpack_require__(184)
	  , enumBugKeys = __webpack_require__(194);
	
	module.exports = Object.keys || function keys(O){
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	var has          = __webpack_require__(178)
	  , toIObject    = __webpack_require__(185)
	  , arrayIndexOf = __webpack_require__(188)(false)
	  , IE_PROTO     = __webpack_require__(191)('IE_PROTO');
	
	module.exports = function(object, names){
	  var O      = toIObject(object)
	    , i      = 0
	    , result = []
	    , key;
	  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while(names.length > i)if(has(O, key = names[i++])){
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(186)
	  , defined = __webpack_require__(159);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 186 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(187);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 187 */
/***/ function(module, exports) {

	var toString = {}.toString;
	
	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(185)
	  , toLength  = __webpack_require__(189)
	  , toIndex   = __webpack_require__(190);
	module.exports = function(IS_INCLUDES){
	  return function($this, el, fromIndex){
	    var O      = toIObject($this)
	      , length = toLength(O.length)
	      , index  = toIndex(fromIndex, length)
	      , value;
	    // Array#includes uses SameValueZero equality algorithm
	    if(IS_INCLUDES && el != el)while(length > index){
	      value = O[index++];
	      if(value != value)return true;
	    // Array#toIndex ignores holes, Array#includes - not
	    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
	      if(O[index] === el)return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(158)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(158)
	  , max       = Math.max
	  , min       = Math.min;
	module.exports = function(index, length){
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var shared = __webpack_require__(192)('keys')
	  , uid    = __webpack_require__(193);
	module.exports = function(key){
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	var global = __webpack_require__(163)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 193 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 194 */
/***/ function(module, exports) {

	// IE 8- don't enum bug keys
	module.exports = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

/***/ },
/* 195 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(163).document && document.documentElement;

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var def = __webpack_require__(168).f
	  , has = __webpack_require__(178)
	  , TAG = __webpack_require__(197)('toStringTag');
	
	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	var store      = __webpack_require__(192)('wks')
	  , uid        = __webpack_require__(193)
	  , Symbol     = __webpack_require__(163).Symbol
	  , USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function(name){
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has         = __webpack_require__(178)
	  , toObject    = __webpack_require__(199)
	  , IE_PROTO    = __webpack_require__(191)('IE_PROTO')
	  , ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function(O){
	  O = toObject(O);
	  if(has(O, IE_PROTO))return O[IE_PROTO];
	  if(typeof O.constructor == 'function' && O instanceof O.constructor){
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 199 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(159);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(201);
	var global        = __webpack_require__(163)
	  , hide          = __webpack_require__(167)
	  , Iterators     = __webpack_require__(179)
	  , TO_STRING_TAG = __webpack_require__(197)('toStringTag');
	
	for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
	  var NAME       = collections[i]
	    , Collection = global[NAME]
	    , proto      = Collection && Collection.prototype;
	  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var addToUnscopables = __webpack_require__(202)
	  , step             = __webpack_require__(203)
	  , Iterators        = __webpack_require__(179)
	  , toIObject        = __webpack_require__(185);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(160)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 202 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 203 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	exports.f = __webpack_require__(197);

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(206), __esModule: true };

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(207);
	__webpack_require__(218);
	__webpack_require__(219);
	__webpack_require__(220);
	module.exports = __webpack_require__(164).Symbol;

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var global         = __webpack_require__(163)
	  , has            = __webpack_require__(178)
	  , DESCRIPTORS    = __webpack_require__(172)
	  , $export        = __webpack_require__(162)
	  , redefine       = __webpack_require__(177)
	  , META           = __webpack_require__(208).KEY
	  , $fails         = __webpack_require__(173)
	  , shared         = __webpack_require__(192)
	  , setToStringTag = __webpack_require__(196)
	  , uid            = __webpack_require__(193)
	  , wks            = __webpack_require__(197)
	  , wksExt         = __webpack_require__(204)
	  , wksDefine      = __webpack_require__(209)
	  , keyOf          = __webpack_require__(210)
	  , enumKeys       = __webpack_require__(211)
	  , isArray        = __webpack_require__(214)
	  , anObject       = __webpack_require__(169)
	  , toIObject      = __webpack_require__(185)
	  , toPrimitive    = __webpack_require__(175)
	  , createDesc     = __webpack_require__(176)
	  , _create        = __webpack_require__(181)
	  , gOPNExt        = __webpack_require__(215)
	  , $GOPD          = __webpack_require__(217)
	  , $DP            = __webpack_require__(168)
	  , $keys          = __webpack_require__(183)
	  , gOPD           = $GOPD.f
	  , dP             = $DP.f
	  , gOPN           = gOPNExt.f
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , PROTOTYPE      = 'prototype'
	  , HIDDEN         = wks('_hidden')
	  , TO_PRIMITIVE   = wks('toPrimitive')
	  , isEnum         = {}.propertyIsEnumerable
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , OPSymbols      = shared('op-symbols')
	  , ObjectProto    = Object[PROTOTYPE]
	  , USE_NATIVE     = typeof $Symbol == 'function'
	  , QObject        = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(dP({}, 'a', {
	    get: function(){ return dP(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = gOPD(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  dP(it, key, D);
	  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
	  return typeof it == 'symbol';
	} : function(it){
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D){
	  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if(has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  it  = toIObject(it);
	  key = toPrimitive(key, true);
	  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
	  var D = gOPD(it, key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = gOPN(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var IS_OP  = it === ObjectProto
	    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i){
	    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
	  } return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if(!USE_NATIVE){
	  $Symbol = function Symbol(){
	    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function(value){
	      if(this === ObjectProto)$set.call(OPSymbols, value);
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f   = $defineProperty;
	  __webpack_require__(216).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(213).f  = $propertyIsEnumerable;
	  __webpack_require__(212).f = $getOwnPropertySymbols;
	
	  if(DESCRIPTORS && !__webpack_require__(161)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function(name){
	    return wrap(wks(name));
	  }
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});
	
	for(var symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);
	
	for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);
	
	$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    if(isSymbol(key))return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it){
	    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	    var args = [it]
	      , i    = 1
	      , replacer, $replacer;
	    while(arguments.length > i)args.push(arguments[i++]);
	    replacer = args[1];
	    if(typeof replacer == 'function')$replacer = replacer;
	    if($replacer || !isArray(replacer))replacer = function(key, value){
	      if($replacer)value = $replacer.call(this, key, value);
	      if(!isSymbol(value))return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(167)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	var META     = __webpack_require__(193)('meta')
	  , isObject = __webpack_require__(170)
	  , has      = __webpack_require__(178)
	  , setDesc  = __webpack_require__(168).f
	  , id       = 0;
	var isExtensible = Object.isExtensible || function(){
	  return true;
	};
	var FREEZE = !__webpack_require__(173)(function(){
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function(it){
	  setDesc(it, META, {value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  }});
	};
	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add metadata
	    if(!create)return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function(it, create){
	  if(!has(it, META)){
	    // can't set metadata to uncaught frozen object
	    if(!isExtensible(it))return true;
	    // not necessary to add metadata
	    if(!create)return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function(it){
	  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY:      META,
	  NEED:     false,
	  fastKey:  fastKey,
	  getWeak:  getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	var global         = __webpack_require__(163)
	  , core           = __webpack_require__(164)
	  , LIBRARY        = __webpack_require__(161)
	  , wksExt         = __webpack_require__(204)
	  , defineProperty = __webpack_require__(168).f;
	module.exports = function(name){
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
	};

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	var getKeys   = __webpack_require__(183)
	  , toIObject = __webpack_require__(185);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(183)
	  , gOPS    = __webpack_require__(212)
	  , pIE     = __webpack_require__(213);
	module.exports = function(it){
	  var result     = getKeys(it)
	    , getSymbols = gOPS.f;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = pIE.f
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
	  } return result;
	};

/***/ },
/* 212 */
/***/ function(module, exports) {

	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 213 */
/***/ function(module, exports) {

	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(187);
	module.exports = Array.isArray || function isArray(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(185)
	  , gOPN      = __webpack_require__(216).f
	  , toString  = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function(it){
	  try {
	    return gOPN(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it){
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};


/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys      = __webpack_require__(184)
	  , hiddenKeys = __webpack_require__(194).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	var pIE            = __webpack_require__(213)
	  , createDesc     = __webpack_require__(176)
	  , toIObject      = __webpack_require__(185)
	  , toPrimitive    = __webpack_require__(175)
	  , has            = __webpack_require__(178)
	  , IE8_DOM_DEFINE = __webpack_require__(171)
	  , gOPD           = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(172) ? gOPD : function getOwnPropertyDescriptor(O, P){
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if(IE8_DOM_DEFINE)try {
	    return gOPD(O, P);
	  } catch(e){ /* empty */ }
	  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 218 */
/***/ function(module, exports) {



/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(209)('asyncIterator');

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(209)('observable');

/***/ },
/* 221 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	var data = {};
	
	exports.default = {
	    get: function get(name) {
	        if (name) return data[name];
	        return undefined;
	    },
	    set: function set(name, value) {
	        data[name] = value;
	    }
	};

/***/ },
/* 222 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (scope) {
	
	    //sentiment analysis
	    var emitSentiment = function emitSentiment(data) {
	        scope.$root.$children[0].$broadcast(SENTIMENT_MESSAGE, data);
	    };
	
	    //click a user in social network
	    var emitGraphUsername = function emitGraphUsername(data) {
	        scope.$root.$children[0].$broadcast(GRAPH_USERNAME_MESSAGE, data);
	    };
	
	    var emitCode3 = function emitCode3(data) {
	        scope.$root.$children[0].$broadcast(CODE3_MESSAGE, data);
	    };
	
	    // change slide bar value in flowmap view
	    var emitFlowmapSlideChange = function emitFlowmapSlideChange(data) {
	        scope.$root.$children[0].$broadcast(FLOWMAPSLIDE_MESSAGE, data);
	    };
	
	    var emitShotImgChange = function emitShotImgChange(data) {
	        scope.$root.$children[0].$broadcast(SHOTIMG_MESSAGE, data);
	    };
	
	    var emitSlideComponentChange = function emitSlideComponentChange(data) {
	        scope.$root.$children[0].$broadcast(SLIDECOMPONENT_MESSAGE, data);
	    };
	
	    var emitFilterCountry = function emitFilterCountry(countryID) {
	        scope.$root.$children[0].$broadcast(FILTER_COUNTRY, countryID);
	    };
	
	    var emitFilterDate = function emitFilterDate(period) {
	        scope.$root.$children[0].$broadcast(FILTER_DATE, period);
	    };
	
	    var onSentiment = function onSentiment(handler) {
	        scope.$on(SENTIMENT_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    var onGraphUsername = function onGraphUsername(handler) {
	        scope.$on(GRAPH_USERNAME_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    //click a country in the social network
	    var onCode3 = function onCode3(handler) {
	        scope.$on(CODE3_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    var onFlowmapSlideChange = function onFlowmapSlideChange(handler) {
	        scope.$on(FLOWMAPSLIDE_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    // ShotImg
	    var onShotImgChange = function onShotImgChange(handler) {
	        scope.$on(SHOTIMG_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    // Slide Component include  preview & leftArrow & rightArrow
	    var onSlideComponentChange = function onSlideComponentChange(handler) {
	        scope.$on(SLIDECOMPONENT_MESSAGE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    var emitChangeCourse = function emitChangeCourse(courseId) {
	        scope.$root.$children[0].$broadcast(CHANGE_COURSE, courseId);
	    };
	
	    var onChangeCourse = function onChangeCourse(handler) {
	        scope.$on(CHANGE_COURSE, function (courseId) {
	            handler.call(scope, courseId);
	        });
	    };
	
	    var emitChangeVideo = function emitChangeVideo(video) {
	        scope.$root.$children[0].$broadcast(CHANGE_VIDEO, video);
	    };
	
	    var onChangeVideo = function onChangeVideo(handler) {
	        scope.$on(CHANGE_VIDEO, function (video) {
	            handler.call(scope, video);
	        });
	    };
	
	    var onFilterCountry = function onFilterCountry(handler) {
	        scope.$on(FILTER_COUNTRY, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    var onFilterDate = function onFilterDate(handler) {
	        scope.$on(FILTER_DATE, function (data) {
	            handler.call(scope, data);
	        });
	    };
	
	    return {
	        'emitSlideComponentChange': emitSlideComponentChange,
	        'onSlideComponentChange': onSlideComponentChange,
	        'emitShotImgChange': emitShotImgChange,
	        'onShotImgChange': onShotImgChange,
	        'emitFlowmapSlideChange': emitFlowmapSlideChange,
	        'onFlowmapSlideChange': onFlowmapSlideChange,
	        'emitSentiment': emitSentiment,
	        'onSentiment': onSentiment,
	        'emitGraphUsername': emitGraphUsername,
	        'onGraphUsername': onGraphUsername,
	        'emitCode3': emitCode3,
	        'onCode3': onCode3,
	        'emitChangeCourse': emitChangeCourse,
	        'onChangeCourse': onChangeCourse,
	        'emitChangeVideo': emitChangeVideo,
	        'onChangeVideo': onChangeVideo,
	        'emitFilterCountry': emitFilterCountry,
	        'onFilterCountry': onFilterCountry,
	        'emitFilterDate': emitFilterDate,
	        'onFilterDate': onFilterDate
	    };
	};
	
	var SLIDECOMPONENT_MESSAGE = 'slideComponentChanged',
	    SHOTIMG_MESSAGE = 'shotImgChanged',
	    FLOWMAPSLIDE_MESSAGE = 'flowmapSlideChanged',
	    SENTIMENT_MESSAGE = 'sentimentChanged',
	    GRAPH_USERNAME_MESSAGE = 'graphUsernameChanged',
	    CODE3_MESSAGE = 'code3Changed';
	
	var CHANGE_COURSE = "changeCourse",
	    CHANGE_VIDEO = "changeVideo",
	    FILTER_COUNTRY = "filterCountry",
	    FILTER_DATE = "filterDate",
	    FILTER_FREQ = "filterFreq";

/***/ },
/* 223 */
/***/ function(module, exports) {

	module.exports = "\n<div id=\"videolist\">\n    <h4>Course Name</h4>\n    <div class=\"input-group\">\n        <select class=\"form-control\" v-model=\"selectedCourseId\">\n            <option v-for=\"course in courseList\" :value=\"course.courseId\" track-by=\"courseId\">\n                {{course.courseName }}\n            </option>\n        </select>\n    </div>\n    <hr/>\n    <div id=\"{{'v_group'+$index}}\" class=\"panel panel-default panel-group\"  v-for=\"videoGroup in videoList\">\n        <div class=\"panel-heading\">\n            <h4 class=\"panel-title\">\n                <a class=\"accordion-toggle\" data-toggle=\"collapse\" data-parent=\"#accordionTwo\" href=\"#collapse{{videoGroup.week}}\">Week {{videoGroup.week}}</a>\n            </h4>\n        </div>\n        <div class=\"panel-collapse collapse in\" id=\"collapse{{videoGroup.week}}\">\n            <div class=\"list-group\" v-for=\"video in videoGroup.videos\">\n                <a :class=\"{'active':selectedVideoId === video.videoId}\" @click=\"selectVideo(video)\" class=\"list-group-item\" style=\"cursor:pointer;\">{{video.title}}</a>\n            </div>\n        </div>\n    </div>\n</div>\n";

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(225)
	__vue_script__ = __webpack_require__(227)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\Content.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(243)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(226);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Content.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./Content.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n\r\n/* main view, middle part*/\r\n#content {\r\n\tposition: absolute;\r\n\twidth: 94%;\r\n\tmargin-left: 2%;\r\n}\r\n\r\n\r\n#content-video-progress-bar{\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 0;\r\n    height: 100%;\r\n    background: #aaaaaa;\r\n    border-right: dashed 1px;\r\n    border-color: #000000;\r\n    opacity: 0.2;\r\n    z-index: -3;\r\n}\r\n\r\n#seekline-graph {\r\n\r\n}\r\n\r\n#stacked-area-graph {\r\n    width: calc(100% + 40px);\r\n}\r\n\r\n/* .video-container {\r\n     width: 100%;\r\n     height: 320px;\r\n     margin: auto;\r\n     overflow: hidden;\r\n }*/\r\n\r\n/* video*/\r\n#moocVideo .video-js.vjs-default-skin.vjs-paused .vjs-big-play-button,\r\n#moocVideo .vjs-control-bar .vjs-current-time,\r\n#moocVideo .vjs-control-bar .vjs-time-divider,\r\n#moocVideo .vjs-control-bar .vjs-duration {\r\n  display: block;\r\n}\r\n\r\n#moocVideo .vjs-control-bar .vjs-progress-control {  \r\n  position: absolute;\r\n  bottom: 26px; /* The height of the ControlBar minus 4px. */\r\n  left: 0;\r\n  right: 0;\r\n  width: 100%;\r\n  height: 10px; /* the height must be reduced from 30 to 10px in order to allow the buttons below (e.g. play) to be pushed */\r\n}\r\n#moocVideo .vjs-control-bar .vjs-progress-holder {/* needed to have a real 100% width display. */\r\n  margin-left: 0px;\r\n  margin-right: 0px;\r\n}\r\n\r\n#moocVideo .vjs-control-bar .vjs-volume-menu-button {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 55px;\r\n}\r\n#moocVideo .vjs-control-bar .vjs-playback-rate {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 28px;\r\n}\r\n#moocVideo .vjs-control-bar .vjs-fullscreen-control {\r\n  position: absolute;\r\n  bottom: 0;\r\n  right: 0;\r\n}\r\n\r\n", ""]);
	
	// exports


/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _keys = __webpack_require__(228);
	
	var _keys2 = _interopRequireDefault(_keys);
	
	__webpack_require__(232);
	
	__webpack_require__(234);
	
	var _video = __webpack_require__(237);
	
	var _video2 = _interopRequireDefault(_video);
	
	var _d = __webpack_require__(238);
	
	var _d2 = _interopRequireDefault(_d);
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	var _seekLine = __webpack_require__(239);
	
	var _seekLine2 = _interopRequireDefault(_seekLine);
	
	var _nvd3StackChart = __webpack_require__(241);
	
	var _nvd3StackChart2 = _interopRequireDefault(_nvd3StackChart);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//directives
	
	//service
	
	//js
	// <template>
	//
	//     <div id="content">
	//
	//         <div v-show="videoSource.src" >
	//             <video id="moocVideo" class="video-js vjs-16-9 vjs-default-skin  vjs-big-play-centered" controls></video>
	//         </div>
	//
	//         <div id="content-video-progress-bar"></div>    
	//         <div v-show="seekData" id="seekline-graph">
	//             <canvas v-seekline="seekData" 
	//             style="height: 200px; left:0; z-index:1; width:100% "> </canvas>
	//         </div>
	//
	//         <div v-show="chartData" id="stacked-area-graph" >
	//             <svg v-nvd3stackchart="chartData" :course-id="selectedCourseId" :config="chartConfig" ></svg>
	//         </div>
	//     </div>
	//
	//
	// </template>
	//
	//
	// <script>
	//CSS
	exports.default = {
	    directives: {
	        seekline: _seekLine2.default,
	        nvd3stackchart: _nvd3StackChart2.default
	    },
	    ready: function ready() {
	        var _this = this;
	
	        Array.prototype.aggregate = function (num) {
	            var length = this.length;
	            var newArray = [];
	            var sum = 0;
	            for (var i = 0; i < length; i++) {
	                sum += this[i];
	                if ((i + 1) % num == 0) {
	                    newArray.push(sum / num);
	                    sum = 0;
	                }
	            }
	            if (length % num != 0) newArray.push(sum / length % num);
	            return newArray;
	        };
	
	        $('#moocVideo').on('timeupdate', function () {
	            var currentPos = this.currentTime; //Get currenttime
	            var maxDuration = this.duration; //Get video duration
	
	            $('#content-video-progress-bar').css('width', 100 * currentPos / maxDuration + '%');
	        });
	
	        //init colors
	        this.colors = _d2.default.scale.ordinal().range(['#1f77b4', '#fdae6b', '#2ca02c', '#d62728', '#9467bd', '#8c564b']).domain(['seeked', 'pause', 'play', 'stalled', 'error', 'ratechange']);
	
	        (0, _communicator2.default)(this).onChangeVideo(function (videoInfo) {
	            if (videoInfo) {
	                _this.videoId = videoInfo.videoId;
	                //this.currentTime = videoInfo.currentTime;
	                _this.videoSource['src'] = videoInfo.videoSource;
	                _this.setData(videoInfo.videoId);
	
	                if (!_this.player) {
	                    _this.player = (0, _video2.default)('moocVideo', _this.videoConfig);
	                }
	                _this.player.src(_this.videoSource);
	            }
	        });
	
	        (0, _communicator2.default)(this).onChangeCourse(function (courseId) {
	            if (courseId) {
	                _this.selectedCourseId = courseId;
	            }
	        });
	
	        (0, _communicator2.default)(this).onFilterCountry(function (countryID) {
	            if (countryID) {
	                _this.country = countryID;
	                _this.setData(_this.videoId, { country: countryID });
	            }
	        });
	
	        (0, _communicator2.default)(this).onFilterDate(function (period) {
	            if (period) {
	                _this.period = period;
	                _this.setData(_this.videoId, { startTime: period.startDate, endTime: period.endDate });
	            }
	        });
	    },
	    data: function data() {
	
	        return {
	            player: null,
	            videoSource: { src: null, type: "video/mp4" },
	
	            videoConfig: {
	                playbackRates: [1, 1.5, 2],
	                controls: true,
	                preload: "none",
	                controlBar: {
	                    currentTimeDisplay: true,
	                    durationDisplay: true,
	                    timeDivider: true,
	                    remainingTimeDisplay: false
	                }
	            },
	            chartConfig: {
	                type: 'stackedAreaChart',
	                height: 300,
	                margin: {
	                    top: 60,
	                    right: 0,
	                    bottom: 40,
	                    left: 40
	                },
	                x: function x(d) {
	                    return d.x;
	                },
	                y: function y(d) {
	                    return d.y;
	                },
	                useVoronoi: false,
	                clipEdge: true,
	                duration: 500,
	                useInteractiveGuideline: true,
	                xAxis: {
	                    showMaxMin: false,
	                    tickFormat: function tickFormat(d) {
	                        var sec = d % 60;
	                        var min = Math.floor(d / 60);
	                        if (sec === 0) {
	                            sec = '00';
	                        }
	                        return _d2.default.time.format(min + '\'' + sec + '\"');
	                    }
	                },
	                yAxis: {
	                    tickFormat: function tickFormat(d) {
	                        return d;
	                    }
	                }
	
	            },
	
	            selectedCourseId: -1,
	            videoId: -1,
	            period: {}, //startDate:string,endDate:string
	
	            chartData: null,
	            seekData: null,
	            weeks: null,
	
	            colors: null
	        };
	    },
	
	
	    methods: {
	        getWeeks: function getWeeks(seekData) {
	            var ret = {};
	            for (var i = 0, len = seekData.length; i < len; i++) {
	                var tempKey = '' + seekData[i].week;
	                if (!ret.hasOwnProperty(tempKey)) {
	                    ret[tempKey] = 1;
	                } else {
	                    ret[tempKey]++;
	                }
	            }
	            return ret;
	        },
	        processData: function processData(response) {
	            var data = response.data;
	            var colors = this.colors;
	            if (data.clicks) {
	                data = data.clicks.map(function (dat) {
	                    var length = dat.data.length;
	                    var result = dat.data.slice(3, length - 3).aggregate(3).map(function (dd, i) {
	                        return {
	                            x: i * 3,
	                            y: Math.floor(dd)
	                        };
	                    });
	
	                    return {
	                        key: dat.type,
	                        values: result,
	                        color: colors(dat.type)
	                    };
	                });
	                this.chartData = data;
	            }
	        },
	        processSeekData: function processSeekData(response) {
	            var barHeight = 40;
	            var barMargin = 10;
	
	            this.seekData = response.data;
	            this.mouseCount++;
	
	            var weeks = this.getWeeks(this.seekData);
	            this.weeks = weeks;
	            var textHeight = (0, _keys2.default)(weeks).length;
	
	            this.dynamicHeight = (barHeight + barMargin) * 2 * textHeight;
	        },
	        setData: function setData(videoId, filter) {
	            _datamanager2.default.getActionCountInfo(this.selectedCourseId, videoId, filter, this.processData);
	            _datamanager2.default.getSeekInfo(this.selectedCourseId, videoId, filter, this.processSeekData);
	        }
	    }
	};
	
	// </script>
	//
	//
	// <style>
	//
	// /* main view, middle part*/
	// #content {
	// 	position: absolute;
	// 	width: 94%;
	// 	margin-left: 2%;
	// }
	//
	//
	// #content-video-progress-bar{
	//     position: absolute;
	//     top: 0;
	//     left: 0;
	//     width: 0;
	//     height: 100%;
	//     background: #aaaaaa;
	//     border-right: dashed 1px;
	//     border-color: #000000;
	//     opacity: 0.2;
	//     z-index: -3;
	// }
	//
	// #seekline-graph {
	//
	// }
	//
	// #stacked-area-graph {
	//     width: calc(100% + 40px);
	// }
	//
	// /* .video-container {
	//      width: 100%;
	//      height: 320px;
	//      margin: auto;
	//      overflow: hidden;
	//  }*/
	//
	// /* video*/
	// #moocVideo .video-js.vjs-default-skin.vjs-paused .vjs-big-play-button,
	// #moocVideo .vjs-control-bar .vjs-current-time,
	// #moocVideo .vjs-control-bar .vjs-time-divider,
	// #moocVideo .vjs-control-bar .vjs-duration {
	//   display: block;
	// }
	//
	// #moocVideo .vjs-control-bar .vjs-progress-control {  
	//   position: absolute;
	//   bottom: 26px; /* The height of the ControlBar minus 4px. */
	//   left: 0;
	//   right: 0;
	//   width: 100%;
	//   height: 10px; /* the height must be reduced from 30 to 10px in order to allow the buttons below (e.g. play) to be pushed */
	// }
	// #moocVideo .vjs-control-bar .vjs-progress-holder {/* needed to have a real 100% width display. */
	//   margin-left: 0px;
	//   margin-right: 0px;
	// }
	//
	// #moocVideo .vjs-control-bar .vjs-volume-menu-button {
	//   position: absolute;
	//   bottom: 0;
	//   right: 55px;
	// }
	// #moocVideo .vjs-control-bar .vjs-playback-rate {
	//   position: absolute;
	//   bottom: 0;
	//   right: 28px;
	// }
	// #moocVideo .vjs-control-bar .vjs-fullscreen-control {
	//   position: absolute;
	//   bottom: 0;
	//   right: 0;
	// }
	//
	// </style>
	/* generated by vue-loader */
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(229), __esModule: true };

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(230);
	module.exports = __webpack_require__(164).Object.keys;

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(199)
	  , $keys    = __webpack_require__(183);
	
	__webpack_require__(231)('keys', function(){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(162)
	  , core    = __webpack_require__(164)
	  , fails   = __webpack_require__(173);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 232 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(233);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(120)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./nv.d3.min.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./nv.d3.min.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 233 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, ".nvd3 .nv-axis line,.nvd3 .nv-axis path{fill:none;shape-rendering:crispEdges}.nv-brush .extent,.nvd3 .background path,.nvd3 .nv-axis line,.nvd3 .nv-axis path{shape-rendering:crispEdges}.nv-distx,.nv-disty,.nv-noninteractive,.nvd3 .nv-axis,.nvd3.nv-pie .nv-label,.nvd3.nv-sparklineplus g.nv-hoverValue{pointer-events:none}.nvtooltip,svg.nvd3-svg{display:block;-webkit-touch-callout:none;-khtml-user-select:none}.nvd3 .nv-axis{opacity:1}.nvd3 .nv-axis.nv-disabled,.nvd3 .nv-controlsWrap .nv-legend .nv-check-box .nv-check{opacity:0}.nvd3 .nv-axis path{stroke:#000;stroke-opacity:.75}.nvd3 .nv-axis path.domain{stroke-opacity:.75}.nvd3 .nv-axis.nv-x path.domain{stroke-opacity:0}.nvd3 .nv-axis line{stroke:#e5e5e5}.nvd3 .nv-axis .zero line, .nvd3 .nv-axis line.zero{stroke-opacity:.75}.nvd3 .nv-axis .nv-axisMaxMin text{font-weight:700}.nvd3 .x .nv-axis .nv-axisMaxMin text,.nvd3 .x2 .nv-axis .nv-axisMaxMin text,.nvd3 .x3 .nv-axis .nv-axisMaxMin text{text-anchor:middle}.nvd3 .nv-bars rect{fill-opacity:.75;transition:fill-opacity 250ms linear;-moz-transition:fill-opacity 250ms linear;-webkit-transition:fill-opacity 250ms linear}.nvd3 .nv-bars rect.hover{fill-opacity:1}.nvd3 .nv-bars .hover rect{fill:#add8e6}.nvd3 .nv-bars text{fill:transparent}.nvd3 .nv-bars .hover text{fill:rgba(0,0,0,1)}.nvd3 .nv-discretebar .nv-groups rect,.nvd3 .nv-multibar .nv-groups rect,.nvd3 .nv-multibarHorizontal .nv-groups rect{stroke-opacity:0;transition:fill-opacity 250ms linear;-moz-transition:fill-opacity 250ms linear;-webkit-transition:fill-opacity 250ms linear}.nvd3 .nv-candlestickBar .nv-ticks rect:hover,.nvd3 .nv-discretebar .nv-groups rect:hover,.nvd3 .nv-multibar .nv-groups rect:hover,.nvd3 .nv-multibarHorizontal .nv-groups rect:hover{fill-opacity:1}.nvd3 .nv-discretebar .nv-groups text,.nvd3 .nv-multibarHorizontal .nv-groups text{font-weight:700;fill:rgba(0,0,0,1);stroke:transparent}.nvd3 .nv-boxplot circle{fill-opacity:.5}.nvd3 .nv-boxplot circle:hover,.nvd3 .nv-boxplot rect:hover{fill-opacity:1}.nvd3 line.nv-boxplot-median{stroke:#000}.nv-boxplot-tick:hover{stroke-width:2.5px}.nvd3.nv-bullet{font:10px sans-serif}.nvd3.nv-bullet .nv-measure{fill-opacity:.8}.nvd3.nv-bullet .nv-measure:hover{fill-opacity:1}.nvd3.nv-bullet .nv-marker{stroke:#000;stroke-width:2px}.nvd3.nv-bullet .nv-markerTriangle{stroke:#000;fill:#fff;stroke-width:1.5px}.nvd3.nv-bullet .nv-markerLine{stroke:#000;stroke-width:1.5px}.nvd3.nv-bullet .nv-tick line{stroke:#666;stroke-width:.5px}.nvd3.nv-bullet .nv-range.nv-s0{fill:#eee}.nvd3.nv-bullet .nv-range.nv-s1{fill:#ddd}.nvd3.nv-bullet .nv-range.nv-s2{fill:#ccc}.nvd3.nv-bullet .nv-title{font-size:14px;font-weight:700}.nvd3.nv-bullet .nv-subtitle{fill:#999}.nvd3.nv-bullet .nv-range{fill:#bababa;fill-opacity:.4}.nvd3.nv-bullet .nv-range:hover{fill-opacity:.7}.nvd3.nv-candlestickBar .nv-ticks .nv-tick{stroke-width:1px}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.hover{stroke-width:2px}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.positive rect{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-candlestickBar .nv-ticks .nv-tick.negative rect{stroke:#d62728;fill:#d62728}.with-transitions .nv-candlestickBar .nv-ticks .nv-tick{transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-moz-transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-webkit-transition:stroke-width 250ms linear,stroke-opacity 250ms linear}.nvd3.nv-candlestickBar .nv-ticks line{stroke:#333}.nv-force-node{stroke:#fff;stroke-width:1.5px}.nv-force-link{stroke:#999;stroke-opacity:.6}.nv-force-node text{stroke-width:0}.nvd3 .nv-check-box .nv-box{fill-opacity:0;stroke-width:2}.nvd3 .nv-check-box .nv-check{fill-opacity:0;stroke-width:4}.nvd3 .nv-series.nv-disabled .nv-check-box .nv-check{fill-opacity:0;stroke-opacity:0}.nvd3.nv-linePlusBar .nv-bar rect{fill-opacity:.75}.nvd3.nv-linePlusBar .nv-bar rect:hover{fill-opacity:1}.nvd3 .nv-groups path.nv-line{fill:none}.nvd3 .nv-groups path.nv-area{stroke:none}.nvd3.nv-line .nvd3.nv-scatter .nv-groups .nv-point{fill-opacity:0;stroke-opacity:0}.nvd3.nv-scatter.nv-single-point .nv-groups .nv-point{fill-opacity:.5!important;stroke-opacity:.5!important}.with-transitions .nvd3 .nv-groups .nv-point{transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-moz-transition:stroke-width 250ms linear,stroke-opacity 250ms linear;-webkit-transition:stroke-width 250ms linear,stroke-opacity 250ms linear}.nvd3 .nv-groups .nv-point.hover,.nvd3.nv-scatter .nv-groups .nv-point.hover{stroke-width:7px;fill-opacity:.95!important;stroke-opacity:.95!important}.nvd3 .nv-point-paths path{stroke:#aaa;stroke-opacity:0;fill:#eee;fill-opacity:0}.nvd3 .nv-indexLine{cursor:ew-resize}svg.nvd3-svg{-webkit-user-select:none;-ms-user-select:none;-moz-user-select:none;user-select:none;width:100%;height:100%}.nvtooltip.with-3d-shadow,.with-3d-shadow .nvtooltip{-moz-box-shadow:0 5px 10px rgba(0,0,0,.2);-webkit-box-shadow:0 5px 10px rgba(0,0,0,.2);box-shadow:0 5px 10px rgba(0,0,0,.2);-webkit-border-radius:5px;-moz-border-radius:5px;border-radius:5px}.nvd3 text{font:400 12px Arial}.nvd3 .title{font:700 14px Arial}.nvd3 .nv-background{fill:#fff;fill-opacity:0}.nvd3.nv-noData{font-size:18px;font-weight:700}.nv-brush .extent{fill-opacity:.125}.nv-brush .resize path{fill:#eee;stroke:#666}.nvd3 .nv-legend .nv-series{cursor:pointer}.nvd3 .nv-legend .nv-disabled circle{fill-opacity:0}.nvd3 .nv-brush .extent{fill-opacity:0!important}.nvd3 .nv-brushBackground rect{stroke:#000;stroke-width:.4;fill:#fff;fill-opacity:.7}@media print{.nvd3 text{stroke-width:0;fill-opacity:1}}.nvd3.nv-ohlcBar .nv-ticks .nv-tick{stroke-width:1px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.hover{stroke-width:2px}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.positive{stroke:#2ca02c}.nvd3.nv-ohlcBar .nv-ticks .nv-tick.negative{stroke:#d62728}.nvd3 .background path{fill:none;stroke:#EEE;stroke-opacity:.4}.nvd3 .foreground path{fill:none;stroke-opacity:.7}.nvd3 .nv-parallelCoordinates-brush .extent{fill:#fff;fill-opacity:.6;stroke:gray;shape-rendering:crispEdges}.nvd3 .nv-parallelCoordinates .hover{fill-opacity:1;stroke-width:3px}.nvd3 .missingValuesline line{fill:none;stroke:#000;stroke-width:1;stroke-opacity:1;stroke-dasharray:5,5}.nvd3.nv-pie .nv-pie-title{font-size:24px;fill:rgba(19,196,249,.59)}.nvd3.nv-pie .nv-slice text{stroke:#000;stroke-width:0}.nvd3.nv-pie path{transition:fill-opacity 250ms linear,stroke-width 250ms linear,stroke-opacity 250ms linear;-moz-transition:fill-opacity 250ms linear,stroke-width 250ms linear,stroke-opacity 250ms linear;-webkit-transition:fill-opacity 250ms linear,stroke-width 250ms linear,stroke-opacity 250ms linear;stroke:#fff;stroke-width:1px;stroke-opacity:1;fill-opacity:.7}.nvd3.nv-pie .hover path{fill-opacity:1}.nvd3.nv-pie .nv-label rect{fill-opacity:0;stroke-opacity:0}.nvd3 .nv-groups .nv-point.hover{stroke-width:20px;stroke-opacity:.5}.nvd3 .nv-scatter .nv-point.hover{fill-opacity:1}.nvd3.nv-sparkline path{fill:none}.nvd3.nv-sparklineplus .nv-hoverValue line{stroke:#333;stroke-width:1.5px}.nvd3.nv-sparklineplus,.nvd3.nv-sparklineplus g{pointer-events:all}.nvd3 .nv-interactiveGuideLine,.nvtooltip{pointer-events:none}.nvd3 .nv-hoverArea{fill-opacity:0;stroke-opacity:0}.nvd3.nv-sparklineplus .nv-xValue,.nvd3.nv-sparklineplus .nv-yValue{stroke-width:0;font-size:.9em;font-weight:400}.nvd3.nv-sparklineplus .nv-yValue{stroke:#f66}.nvd3.nv-sparklineplus .nv-maxValue{stroke:#2ca02c;fill:#2ca02c}.nvd3.nv-sparklineplus .nv-minValue{stroke:#d62728;fill:#d62728}.nvd3.nv-sparklineplus .nv-currentValue{font-weight:700;font-size:1.1em}.nvtooltip h3,.nvtooltip table td.key{font-weight:400}.nvd3.nv-stackedarea path.nv-area{fill-opacity:.7;stroke-opacity:0;transition:fill-opacity 250ms linear,stroke-opacity 250ms linear;-moz-transition:fill-opacity 250ms linear,stroke-opacity 250ms linear;-webkit-transition:fill-opacity 250ms linear,stroke-opacity 250ms linear}.nvd3.nv-stackedarea path.nv-area.hover{fill-opacity:.9}.nvd3.nv-stackedarea .nv-groups .nv-point{stroke-opacity:0;fill-opacity:0}.nvtooltip{position:absolute;color:rgba(0,0,0,1);padding:1px;z-index:10000;font-family:Arial;font-size:13px;text-align:left;white-space:nowrap;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background:rgba(255,255,255,.8);border:1px solid rgba(0,0,0,.5);border-radius:4px}.nvtooltip h3,.nvtooltip p{margin:0;text-align:center}.nvtooltip.with-transitions,.with-transitions .nvtooltip{transition:opacity 50ms linear;-moz-transition:opacity 50ms linear;-webkit-transition:opacity 50ms linear;transition-delay:200ms;-moz-transition-delay:200ms;-webkit-transition-delay:200ms}.nvtooltip.x-nvtooltip,.nvtooltip.y-nvtooltip{padding:8px}.nvtooltip h3{padding:4px 14px;line-height:18px;background-color:rgba(247,247,247,.75);color:rgba(0,0,0,1);border-bottom:1px solid #ebebeb;-webkit-border-radius:5px 5px 0 0;-moz-border-radius:5px 5px 0 0;border-radius:5px 5px 0 0}.nvtooltip p{padding:5px 14px}.nvtooltip span{display:inline-block;margin:2px 0}.nvtooltip table{margin:6px;border-spacing:0}.nvtooltip table td{padding:2px 9px 2px 0;vertical-align:middle}.nvtooltip table td.key.total{font-weight:700}.nvtooltip table td.value{text-align:right;font-weight:700}.nvtooltip table td.percent{color:#a9a9a9}.nvtooltip table tr.highlight td{padding:1px 9px 1px 0;border-bottom-style:solid;border-bottom-width:1px;border-top-style:solid;border-top-width:1px}.nvtooltip table td.legend-color-guide div{vertical-align:middle;width:12px;height:12px;border:1px solid #999}.nvtooltip .footer{padding:3px;text-align:center}.nvtooltip-pending-removal{pointer-events:none;display:none}.nvd3 line.nv-guideline{stroke:#ccc}\n/*# sourceMappingURL=nv.d3.min.css.map */", ""]);
	
	// exports


/***/ },
/* 234 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(235);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(120)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../css-loader/index.js!./video-js.min.css", function() {
				var newContent = require("!!./../../css-loader/index.js!./video-js.min.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 235 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, ".video-js .vjs-big-play-button:before,.video-js .vjs-control:before,.video-js .vjs-modal-dialog,.vjs-modal-dialog .vjs-modal-dialog-content{position:absolute;top:0;left:0;width:100%;height:100%}.video-js .vjs-big-play-button:before,.video-js .vjs-control:before{text-align:center}@font-face{font-family:VideoJS;src:url(" + __webpack_require__(236) + "?#iefix) format(\"eot\")}@font-face{font-family:VideoJS;src:url(data:application/font-woff;charset=utf-8;base64,d09GRgABAAAAAA54AAoAAAAAFmgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABPUy8yAAAA9AAAAD4AAABWUZFeBWNtYXAAAAE0AAAAOgAAAUriMBC2Z2x5ZgAAAXAAAAouAAAPUFvx6AdoZWFkAAALoAAAACsAAAA2DIPpX2hoZWEAAAvMAAAAGAAAACQOogcgaG10eAAAC+QAAAAPAAAAfNkAAABsb2NhAAAL9AAAAEAAAABAMMg06m1heHAAAAw0AAAAHwAAACABMAB5bmFtZQAADFQAAAElAAACCtXH9aBwb3N0AAANfAAAAPwAAAGBZkSN43icY2BkZ2CcwMDKwMFSyPKMgYHhF4RmjmEIZzzHwMDEwMrMgBUEpLmmMDh8ZPwoxw7iLmSHCDOCCADvEAo+AAB4nGNgYGBmgGAZBkYGEHAB8hjBfBYGDSDNBqQZGZgYGD7K/f8PUvCREUTzM0DVAwEjG8OIBwCPdwbVAAB4nI1Xe1CU1xX/zv1eLItLln0JwrIfC7sJGET2hRJ2N1GUoBJE8AESQEEhmBHjaB7UuBMTO4GMaSu7aY3RNlOdRPNqO2pqRmuTaSZtR6JJILUZk00a/4imjpmiecB303O/XUgMJOPufvd+99xzzz33nN855y4HHH7EfrGfIxwHRiANvF/sH71I9BzHszmpW+rGOQOXxXE6YhI4PoMT8zkT4cDFuf1cwMrZJI5cglM0HKVv0MaUFDgIFfg9mJJCG+kbKn1JkqBOVaFOkuhLpARq8fu0Nnc9/zdvfY9PxXW4PdH0C6N+PCejhorxFjAqRjgFRXSINEARbBGsoxcFK7IJmr4OycFJnInL59zIXwxui80fkGRbEHyosMWaATJKUfCskmwJQsAWANkmnIGOhlf514h7U8HNIv3owoHB0WMt0Eb3sx0guLi5pq/8Ny1q6969fKR9X9GBV6dPv6dp04K99SOwtmyPl47ApRa6n4ZpP1yjr5fn7MmYP/vXLUJs715UguklHBaHOZHZmG1N9FAIW2mf0MqWCIdo/8RZ1yGfxKUldDcGIbFA7ICO+vqOMSPTh/ZrSqgHi/bB/O8E8Mnzp+M+acxfpsTShBwej26TiGxBn7m4eEIO+Rueu6Hj+IFBnh88cAEUEQ//nVLx5C7kf+yIR47QEe+eMlhz9SqsGbe3hh2R03NGzoY6O42Kz8l7fB6fAk6LYnTyFo/FYyT6GGyNx2Jx2sdH4rA1Fo/HyCXaFyOp8dhYBCfJb2NIn1ImE6CYNGmgSTb52DawJR6jfXEmDU4xyTEmpgHHOIStoxfjSGdkbsK2w2jbdMQG4sgAstEONgURYCwGHhEhhscioQaAhhCf7McifEQc0l6+mxj9nI+gmSdiQ0Zbm7gZnIO7GSMEXG6UDAVocxAV8GcEXCKg1a02RcTtwANWRGIAyElor6n/+ZU2yOB3+T77Hb1MLqhn4KHVnQBjJnqe9QZSon6Kc5DxAD2vMdPL/BXSmQGwspa67z9wLUjdi9TN7QC7lyyBr9rpt7uXVC1CMpyjKRoXnGPHTuiaPLsNdc2dbAFQLAooPkXEh33FodHl4XpC6sPCIa0ftUIhHSYXVSu5iME+DIXsbZJ51BeidCgajcai43jU9nVzoSn2dPqcFvSoxSzJzgRKAx47WMRxOrIj3Wf0+hndxhJTiOkSEqxar3b3RKM9hY64oxBA64ieURLvCfpkDb8siBdUJ1bgT+urJ5PGfewQrmm5R5+0HmfyIPySD7OYkT0WxRePah8oEiyjlxIP74thVoRTURpmL6QhGuWS+QDjdANXjIM8SQa/1w128ODx0Qp4aLMNg9+JL3joUn8AMxW+aLNiuKjarn4uyyTdXjOzZTsh21uwldUvJoYza+zELALfu3p1L8/3krtyZ0Ag058J3hxHghvbGZn0dHZy6Mim/7Blre4lpHd1c28yVqRViO153F2oIWoXCIKbL4Z0cM1iaQn9mI5KuV2SzEvWXJDMNtkANpMdQoDDhIdD4A/YrP6Aye9ysxyE+uOEAcTDorgvVZJjcua043PnZ/PmdDqcbibZlXOOT8uSo7Kof0YUn9GL+Jo17ficymxiTofC6znUso0DhAxs1Fo+kF+d36vLmgZ8mk5cdGv2mwYj5k3Dm9m3LhJ1aVRNm6HrTbLgYAoWXDhDd/u4PGy5CT+xGMdiaBovewUCF/1BiWNljI9MLn7jeScpg+WyH6mfU62eVDql7hsrmvx1ezp/YldE2LhjbkiDnAn8tGy/MW3IXRMYJduvq9HpmIcKuFt+JCtgdGEGKAcF6UacVwIYbVPGfw/+YuNBS4cx/CUHcnyfc+wRDMtTr72mMSBjT/yn/GKSdeDWQUCH6Xoqq5R10RE60gV6erUL0iCti16d0hZjxut4QI/rEpgSh6WjnJXdBXRg1GKCucGJPtFqM27aD1tOqqKonsQ2KsFSSmEpmvRlsR+TcD9OFwrqXxIclL4sJTnGMSuG8KpkZvKdeVIOKDyWSyPLV16/p1QMPbP8NihwUzr47bdnXtwtjdCvqqpO0H+pOvIl3Pzv46e5CT/tQjklXCXXym1AaWY7bzHLkuDMc7ldKCvgxzLn8wYkJLBhEDyK7MT8bTbwbkxbfp+3mKAGsmTBpabSIEECzMIcQlzOPAMKsxMs7uhsnxPLuofPDTc1hkuq6MX9j16YU7CqegcYHbmWYuvAP6tCS97tgWf7dlQvnl25YPavXLVZvrzQPeHCpZmzzEUVq/xzu5sChnSTPTW7oOYmh69z4zL/gk3b+O6hoa733uviP82vnFcbqWlc9tDmZa23LVzaV1yXURi+JX+28NeBuj3+O8IrQ080Vm1eWB4OKjPmrJu7c1udWynvKF6/vs479lSW9+5gZkn+dKfellNGDPllzeULustz+A0bPvhgw7lkvEUwn/N4Ty7U7nhGsEpFkOfy+kutbOh1JQxhVDJumoW11hnkPThznh6FFlhfT+ra1x9sF56kx5YuDzVY9PQYAYA7iblw4frQ4TPCk2MK/xGU3rlmze62trHz6lsko+v+So/do74PT8KVkpJfOErKcv8znrMGsHTNxoEkWy1mYgDB6XBbPaWsuiS6CryGaL6zCjaXBgvtkuyXBua1wOKnh+k7L9AvPnYWffxK18FcJbuosGf3/Jo7amY+CE1vppzY+UTrva0FXc1i55pKQ/YjVL187N5fCn1kW5uot/1hi+DiZ+5atnJR9E+prvydJ9ZZ5mwOpU5gM4KYysMBQ71UzPuMTl9QQOyUo5nwioeYCPjFklrbK6s6X+ypUZ6rum9+CZYzWRiBJfSP0xzzSmrg7f86g0DKVj/wwFzieD9rRfPGFbeKMl05pn5j9/rsQJJ2iEgRrpohlyBo3f4QK7Kl+EcAYZgAoNVmZWXK704YAa3FwBxgSGUOs5htvGRz4Sgj3yFkSJFBuv/sxu5yk998T8WDJzvv/2RX19HtTUW1S+wpKRKRjJ6zzz/1/OPdFdWGlAKbvzS4PHOtURikg9AGz0LbIB85S/cPOpoXvuue8/iV2H1vPTy3ddvOeZ37HGmO3OmSzVzR+NS53+84dHlFhXPLqtzSO+5ruHM2vXtBdxP87LOzKAD359j/INYIbyPabIi3Cq6Wa+SaGe78diIzu7qcblcAa6/fJRvNopXFJnO+U9KKM5bqH5LM0iQSVmpPCPDu7ZT4Aoubz3709EBTyrTDjyx8MQXgUH1nqm7TWng4TzE4i4AsKskBITXfSyC4Fkl5MxnJDiKSIDSJAsGvd1y+/eNDp2e+A+5d8HeiiunrTkT6TqWLIs+/QRoWr98s0qj8uuzLuS22Ytufg3rdTaHn1m46sfgGKHXt0MGnLaRHdnwN37tvHcWKo2V6lnPxL4UvUQcRdOzmZSQs8X5CH5OxXMXpkATuDz8Et0SH4uyCRR+TjmBDP1GvsVrWEGVzEj33YVQ9jAtIKpqsl/s/0xrocwAAeJxjYGRgYADig3cEzsTz23xl4GZnAIHLRucNkWl2BrA4BwMTiAIAF4IITwB4nGNgZGBgZwCChWASxGZkQAXyABOUANh4nGNnYGBgHyAMADa8ANoAAAAAAAAOAFAAZgCyAMYA5gEeAUgBdAGcAfICLgKOAroDCgOOA7AD6gQ4BHwEuAToBQwFogXoBjYGbAbaB3IHqHicY2BkYGCQZ8hlYGcAASYg5gJCBob/YD4DABbVAaoAeJxdkE1qg0AYhl8Tk9AIoVDaVSmzahcF87PMARLIMoFAl0ZHY1BHdBJIT9AT9AQ9RQ9Qeqy+yteNMzDzfM+88w0K4BY/cNAMB6N2bUaPPBLukybCLvleeAAPj8JD+hfhMV7hC3u4wxs7OO4NzQSZcI/8Ltwnfwi75E/hAR7wJTyk/xYeY49fYQ/PztM+jbTZ7LY6OWdBJdX/pqs6NYWa+zMxa13oKrA6Uoerqi/JwtpYxZXJ1coUVmeZUWVlTjq0/tHacjmdxuL90OR8O0UEDYMNdtiSEpz5XQGqzlm30kzUdAYFFOb8R7NOZk0q2lwAyz1i7oAr1xoXvrOgtYhZx8wY5KRV269JZ5yGpmzPTjQhvY9je6vEElPOuJP3mWKnP5M3V+YAAAB4nG2P2XLCMAxFfYFspGUp3Te+IB9lHJF4cOzUS2n/voaEGR6qB+lKo+WITdhga/a/bRnDBFPMkCBFhhwF5ihxg1sssMQKa9xhg3s84BFPeMYLXvGGd3zgE9tZr/hveXKVkFYoSnoeHJXfRoWOqi54mo9ameNFdrK+dLSyaVf7oJQTlkhXpD3Z5XXhR/rUfQVuKXO91Jps4cLOS6/I5YL3XhodRRsVWZe4NnZOhWnSAWgxhMoEr6SmzZieF43Mk7ZOBdeCVGrp9Eu+54J2xhySplfB5XHwQLXUmT9KH6+kPnQ7ZYuIEzNyfs1DLU1VU4SWZ6LkXGHsD1ZKbMw=) format(\"woff\"),url(data:application/x-font-ttf;charset=utf-8;base64,AAEAAAAKAIAAAwAgT1MvMlGRXgUAAAEoAAAAVmNtYXDiMBC2AAAB/AAAAUpnbHlmW/HoBwAAA4gAAA9QaGVhZAyD6V8AAADQAAAANmhoZWEOogcgAAAArAAAACRobXR42QAAAAAAAYAAAAB8bG9jYTDINOoAAANIAAAAQG1heHABMAB5AAABCAAAACBuYW1l1cf1oAAAEtgAAAIKcG9zdGZEjeMAABTkAAABgQABAAAHAAAAAKEHAAAAAAAHAAABAAAAAAAAAAAAAAAAAAAAHwABAAAAAQAAwdxheF8PPPUACwcAAAAAANMyzzEAAAAA0zLPMQAAAAAHAAcAAAAACAACAAAAAAAAAAEAAAAfAG0ABwAAAAAAAgAAAAoACgAAAP8AAAAAAAAAAQcAAZAABQAIBHEE5gAAAPoEcQTmAAADXABXAc4AAAIABQMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUGZFZABA8QHxHgcAAAAAoQcAAAAAAAABAAAAAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAAAABwAAAAAAAAMAAAADAAAAHAABAAAAAABEAAMAAQAAABwABAAoAAAABgAEAAEAAgAA8R7//wAAAADxAf//AAAPAAABAAAAAAAAAAABBgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAFAAZgCyAMYA5gEeAUgBdAGcAfICLgKOAroDCgOOA7AD6gQ4BHwEuAToBQwFogXoBjYGbAbaB3IHqAABAAAAAAWLBYsAAgAAAREBAlUDNgWL++oCCwAAAwAAAAAGawZrAAIADgAaAAAJAhMEAAMSAAUkABMCAAEmACc2ADcWABcGAALrAcD+QJX+w/5aCAgBpgE9AT0BpggI/lr+w/3+rgYGAVL9/QFSBgb+rgIwAVABUAGbCP5a/sP+w/5aCAgBpgE9AT0BpvrIBgFS/f0BUgYG/q79/f6uAAAAAgAAAAAFQAWLAAMABwAAASERKQERIREBwAEr/tUCVQErAXUEFvvqBBYAAAAEAAAAAAYgBiAABgATACQAJwAAAS4BJxUXNjcGBxc+ATUmACcVFhIBBwEhESEBEQEGBxU+ATcXNwEHFwTQAWVVuAO7AidxJSgF/t/lpc77t18BYf6fASsBdQE+TF1OijuZX/1gnJwDgGSeK6W4GBhqW3FGnFT0AWM4mjT+9AHrX/6f/kD+iwH2/sI7HZoSRDGYXwSWnJwAAAEAAAAABKsF1gAFAAABESEBEQECCwEqAXb+igRg/kD+iwSq/osAAAACAAAAAAVmBdYABgAMAAABLgEnET4BAREhAREBBWUBZVRUZfwRASsBdf6LA4Bkniv9piueAUT+QP6LBKr+iwAAAwAAAAAGIAYPAAUADAAaAAATESEBEQEFLgEnET4BAxUWEhcGAgcVNgA3JgDgASsBdf6LAsUBZVVVZbqlzgMDzqXlASEFBf7fBGD+QP6LBKr+i+Bkniv9piueAvOaNP70tbX+9DSaOAFi9fUBYgAAAAQAAAAABYsFiwAFAAsAEQAXAAABIxEhNSMDMzUzNSEBIxUhESMDFTMVMxECC5YBduCWluD+igOA4AF2luDglgLr/oqWAgrglvyAlgF2AqCW4AF2AAQAAAAABYsFiwAFAAsAEQAXAAABMxUzESETIxUhESMBMzUzNSETNSMRITUBdeCW/org4AF2lgHAluD+ipaWAXYCVeABdgHAlgF2++rglgHA4P6KlgAAAAACAAAAAAXWBdYADwATAAABIQ4BBxEeARchPgE3ES4BAyERIQVA/IA/VQEBVT8DgD9VAQFVP/yAA4AF1QFVP/yAP1UBAVU/A4A/VfvsA4AAAAYAAAAABmsGawAHAAwAEwAbACAAKAAACQEmJw4BBwElLgEnAQUhATYSNyYFAQYCBxYXIQUeARcBMwEWFz4BNwECvgFkTlSH8GEBEgOONemh/u4C5f3QAXpcaAEB/BP+3VxoAQEOAjD95DXpoQESeP7dTlSH8GH+7gPwAmgSAQFYUP4nd6X2Pv4nS/1zZAEBk01NAfhk/v+TTUhLpfY+Adn+CBIBAVhQAdkAAAAFAAAAAAZrBdYADwATABcAGwAfAAABIQ4BBxEeARchPgE3ES4BASEVIQEhNSEFITUhNSE1IQXV+1ZAVAICVEAEqkBUAgJU+xYBKv7WAur9FgLqAcD+1gEq/RYC6gXVAVU//IA/VQEBVT8DgD9V/ayV/tWVlZWWlQADAAAAAAYgBdYADwAnAD8AAAEhDgEHER4BFyE+ATcRLgEBIzUjFTM1MxUUBgcjLgEnET4BNzMeARUFIzUjFTM1MxUOAQcjLgE1ETQ2NzMeARcFi/vqP1QCAlQ/BBY/VAICVP1rcJWVcCog4CAqAQEqIOAgKgILcJWVcAEqIOAgKiog4CAqAQXVAVU//IA/VQEBVT8DgD9V/fcl4CVKICoBASogASogKgEBKiBKJeAlSiAqAQEqIAEqICoBASogAAAGAAAAAAYgBPYAAwAHAAsADwATABcAABMzNSMRMzUjETM1IwEhNSERITUhERUhNeCVlZWVlZUBKwQV++sEFfvrBBUDNZb+QJUBwJX+QJb+QJUCVZWVAAAAAQAAAAAGIAZsAC4AAAEiBgcBNjQnAR4BMz4BNy4BJw4BBxQXAS4BIw4BBx4BFzI2NwEGBx4BFz4BNy4BBUArSh797AcHAg8eTixffwICf19ffwIH/fEeTixffwICf18sTh4CFAUBA3tcXHsDA3sCTx8bATcZNhkBNB0gAn9fX38CAn9fGxn+zRwgAn9fX38CIBz+yhcaXHsCAntcXXsAAAIAAAAABlkGawBDAE8AAAE2NCc3PgEnAy4BDwEmLwEuASchDgEPAQYHJyYGBwMGFh8BBhQXBw4BFxMeAT8BFh8BHgEXIT4BPwE2NxcWNjcTNiYnBS4BJz4BNx4BFw4BBasFBZ4KBgeWBxkNujpEHAMUD/7WDxQCHEU5ug0aB5UHBQudBQWdCwUHlQcaDbo5RRwCFA8BKg8UAhxFOboNGgeVBwUL/ThvlAIClG9vlAIClAM3JEokewkaDQEDDAkFSy0cxg4RAQERDsYcLUsFCQz+/QwbCXskSiR7CRoN/v0MCQVLLRzGDhEBAREOxhwtSwUJDAEDDBsJQQKUb2+UAgKUb2+UAAAAAAEAAAAABmsGawALAAATEgAFJAATAgAlBACVCAGmAT0BPQGmCAj+Wv7D/sP+WgOA/sP+WggIAaYBPQE9AaYICP5aAAAAAgAAAAAGawZrAAsAFwAAAQQAAxIABSQAEwIAASYAJzYANxYAFwYAA4D+w/5aCAgBpgE9AT0BpggI/lr+w/3+rgYGAVL9/QFSBgb+rgZrCP5a/sP+w/5aCAgBpgE9AT0BpvrIBgFS/f0BUgYG/q79/f6uAAADAAAAAAZrBmsACwAXACMAAAEEAAMSAAUkABMCAAEmACc2ADcWABcGAAMOAQcuASc+ATceAQOA/sP+WggIAaYBPQE9AaYICP5a/sP9/q4GBgFS/f0BUgYG/q4dAn9fX38CAn9fX38Gawj+Wv7D/sP+WggIAaYBPQE9Aab6yAYBUv39AVIGBv6u/f3+rgJPX38CAn9fX38CAn8AAAAEAAAAAAYgBiAADwAbACUAKQAAASEOAQcRHgEXIT4BNxEuAQEjNSMVIxEzFTM1OwEhHgEXEQ4BByE3MzUjBYv76j9UAgJUPwQWP1QCAlT9a3CVcHCVcJYBKiAqAQEqIP7WcJWVBiACVD/76j9UAgJUPwQWP1T8gpWVAcC7uwEqIP7WICoBcOAAAgAAAAAGawZrAAsAFwAAAQQAAxIABSQAEwIAEwcJAScJATcJARcBA4D+w/5aCAgBpgE9AT0BpggI/lo4af70/vRpAQv+9WkBDAEMaf71BmsI/lr+w/7D/loICAGmAT0BPQGm/BFpAQv+9WkBDAEMaf71AQtp/vQAAQAAAAAF1ga2ABYAAAERCQERHgEXDgEHLgEnIxYAFzYANyYAA4D+iwF1vv0FBf2+vv0FlQYBUf7+AVEGBv6vBYsBKv6L/osBKgT9v779BQX9vv7+rwYGAVH+/gFRAAAAAQAAAAAFPwcAABQAAAERIyIGHQEhAyMRIREjETM1NDYzMgU/nVY8ASUn/v7O///QrZMG9P74SEi9/tj9CQL3ASjaus0AAAAABAAAAAAGjgcAADAARQBgAGwAAAEUHgMVFAcGBCMiJicmNTQ2NzYlLgE1NDcGIyImNTQ2Nz4BMyEHIx4BFRQOAycyNjc2NTQuAiMiBgcGFRQeAxMyPgI1NC4BLwEmLwImIyIOAxUUHgIBMxUjFSM1IzUzNTMDH0BbWkAwSP7qn4TlOSVZSoMBESAfFS4WlMtIP03TcAGiioNKTDFFRjGSJlAaNSI/akAqURkvFCs9WTY6a1s3Dg8THgocJU4QIDVob1M2RnF9A2vV1WnU1GkD5CRFQ1CATlpTenNTYDxHUYouUhIqQCkkMQTBlFKaNkJAWD+MWkhzRztAPiEbOWY6hn1SJyE7ZS5nZ1I0/JcaNF4+GTAkGCMLFx04Ag4kOF07Rms7HQNsbNvbbNkAAwAAAAAGgAZsAAMADgAqAAABESERARYGKwEiJjQ2MhYBESERNCYjIgYHBhURIRIQLwEhFSM+AzMyFgHd/rYBXwFnVAJSZGemZASP/rdRVj9VFQv+twIBAQFJAhQqR2c/q9AEj/whA98BMkliYpNhYfzd/cgCEml3RTMeM/3XAY8B8DAwkCAwOB/jAAABAAAAAAaUBgAAMQAAAQYHFhUUAg4BBCMgJxYzMjcuAScWMzI3LgE9ARYXLgE1NDcWBBcmNTQ2MzIXNjcGBzYGlENfAUyb1v7SrP7x4SMr4bBpph8hHCsqcJNETkJOLHkBW8YIvYaMYG1gJWldBWhiRQ4cgv797rdtkQSKAn1hBQsXsXUEJgMsjlNYS5WzCiYkhr1mFTlzPwoAAAABAAAAAAWABwAAIgAAARcOAQcGLgM1ESM1PgQ3PgE7AREhFSERFB4CNzYFMFAXsFlorXBOIahIckQwFAUBBwT0AU3+sg0gQzBOAc/tIz4BAjhceHg6AiDXGlddb1ctBQf+WPz9+h40NR4BAgABAAAAAAaABoAASgAAARQCBCMiJzY/AR4BMzI+ATU0LgEjIg4DFRQWFxY/ATY3NicmNTQ2MzIWFRQGIyImNz4CNTQmIyIGFRQXAwYXJgI1NBIkIAQSBoDO/p/Rb2s7EzYUaj15vmh34o5ptn9bK1BNHggIBgIGETPRqZepiWs9Sg4IJRc2Mj5WGWMRBM7+zgFhAaIBYc4DgNH+n84gXUfTJzmJ8JZyyH46YH2GQ2ieIAwgHxgGFxQ9WpfZpIOq7lc9I3VZHzJCclVJMf5eRmtbAXzp0QFhzs7+nwAABwAAAAAHAATPAA4AFwAqAD0AUABaAF0AAAERNh4CBw4BBwYmIycmNxY2NzYmBxEUBRY2Nz4BNy4BJyMGHwEeARcOARcWNjc+ATcuAScjBh8BHgEXFAYXFjY3PgE3LgEnIwYfAR4BFw4BBTM/ARUzESMGAyUVJwMchM2UWwgNq4JHrQgBAapUaAoJcWMBfiIhDiMrAQJLMB0BBAokNAIBPmMiIQ4iLAECSzAeAQUKJDQBP2MiIQ4iLAECSzAeAQUKJDQBAT75g+5B4arNLNIBJ44ByQL9BQ9mvYCKwA8FBQMDwwJVTGdzBf6VB8IHNR08lld9uT4LCRA/qGNxvUwHNR08lld9uT4LCRA/qGNxvUwHNR08lld9uT4LCRA/qGNxvVJkAWUDDEf+tYP5AQAAAAEAAAAABiAGtgAbAAABBAADER4BFzMRITU2ADcWABcVIREzPgE3EQIAA4D+4v6FBwJ/X+D+1QYBJ97eAScG/tXgX38CB/6FBrUH/oX+4v32X38CAlWV3gEnBgb+2d6V/asCf18CCgEeAXsAAAAAEADGAAEAAAAAAAEABwAAAAEAAAAAAAIABwAHAAEAAAAAAAMABwAOAAEAAAAAAAQABwAVAAEAAAAAAAUACwAcAAEAAAAAAAYABwAnAAEAAAAAAAoAKwAuAAEAAAAAAAsAEwBZAAMAAQQJAAEADgBsAAMAAQQJAAIADgB6AAMAAQQJAAMADgCIAAMAAQQJAAQADgCWAAMAAQQJAAUAFgCkAAMAAQQJAAYADgC6AAMAAQQJAAoAVgDIAAMAAQQJAAsAJgEeVmlkZW9KU1JlZ3VsYXJWaWRlb0pTVmlkZW9KU1ZlcnNpb24gMS4wVmlkZW9KU0dlbmVyYXRlZCBieSBzdmcydHRmIGZyb20gRm9udGVsbG8gcHJvamVjdC5odHRwOi8vZm9udGVsbG8uY29tAFYAaQBkAGUAbwBKAFMAUgBlAGcAdQBsAGEAcgBWAGkAZABlAG8ASgBTAFYAaQBkAGUAbwBKAFMAVgBlAHIAcwBpAG8AbgAgADEALgAwAFYAaQBkAGUAbwBKAFMARwBlAG4AZQByAGEAdABlAGQAIABiAHkAIABzAHYAZwAyAHQAdABmACAAZgByAG8AbQAgAEYAbwBuAHQAZQBsAGwAbwAgAHAAcgBvAGoAZQBjAHQALgBoAHQAdABwADoALwAvAGYAbwBuAHQAZQBsAGwAbwAuAGMAbwBtAAAAAgAAAAAAAAARAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfAAABAgEDAQQBBQEGAQcBCAEJAQoBCwEMAQ0BDgEPARABEQESARMBFAEVARYBFwEYARkBGgEbARwBHQEeAR8EcGxheQtwbGF5LWNpcmNsZQVwYXVzZQt2b2x1bWUtbXV0ZQp2b2x1bWUtbG93CnZvbHVtZS1taWQLdm9sdW1lLWhpZ2gQZnVsbHNjcmVlbi1lbnRlcg9mdWxsc2NyZWVuLWV4aXQGc3F1YXJlB3NwaW5uZXIJc3VidGl0bGVzCGNhcHRpb25zCGNoYXB0ZXJzBXNoYXJlA2NvZwZjaXJjbGUOY2lyY2xlLW91dGxpbmUTY2lyY2xlLWlubmVyLWNpcmNsZQJoZAZjYW5jZWwGcmVwbGF5CGZhY2Vib29rBWdwbHVzCGxpbmtlZGluB3R3aXR0ZXIGdHVtYmxyCXBpbnRlcmVzdBFhdWRpby1kZXNjcmlwdGlvbgVhdWRpbwAAAAAA) format(\"truetype\");font-weight:400;font-style:normal}.vjs-icon-play,.video-js .vjs-big-play-button,.video-js .vjs-play-control{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-play:before,.video-js .vjs-big-play-button:before,.video-js .vjs-play-control:before{content:\"\\F101\"}.vjs-icon-play-circle{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-play-circle:before{content:\"\\F102\"}.vjs-icon-pause,.video-js .vjs-play-control.vjs-playing{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-pause:before,.video-js .vjs-play-control.vjs-playing:before{content:\"\\F103\"}.vjs-icon-volume-mute,.video-js .vjs-mute-control.vjs-vol-0,.video-js .vjs-volume-menu-button.vjs-vol-0{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-volume-mute:before,.video-js .vjs-mute-control.vjs-vol-0:before,.video-js .vjs-volume-menu-button.vjs-vol-0:before{content:\"\\F104\"}.vjs-icon-volume-low,.video-js .vjs-mute-control.vjs-vol-1,.video-js .vjs-volume-menu-button.vjs-vol-1{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-volume-low:before,.video-js .vjs-mute-control.vjs-vol-1:before,.video-js .vjs-volume-menu-button.vjs-vol-1:before{content:\"\\F105\"}.vjs-icon-volume-mid,.video-js .vjs-mute-control.vjs-vol-2,.video-js .vjs-volume-menu-button.vjs-vol-2{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-volume-mid:before,.video-js .vjs-mute-control.vjs-vol-2:before,.video-js .vjs-volume-menu-button.vjs-vol-2:before{content:\"\\F106\"}.vjs-icon-volume-high,.video-js .vjs-mute-control,.video-js .vjs-volume-menu-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-volume-high:before,.video-js .vjs-mute-control:before,.video-js .vjs-volume-menu-button:before{content:\"\\F107\"}.vjs-icon-fullscreen-enter,.video-js .vjs-fullscreen-control{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-fullscreen-enter:before,.video-js .vjs-fullscreen-control:before{content:\"\\F108\"}.vjs-icon-fullscreen-exit,.video-js.vjs-fullscreen .vjs-fullscreen-control{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-fullscreen-exit:before,.video-js.vjs-fullscreen .vjs-fullscreen-control:before{content:\"\\F109\"}.vjs-icon-square{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-square:before{content:\"\\F10A\"}.vjs-icon-spinner{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-spinner:before{content:\"\\F10B\"}.vjs-icon-subtitles,.video-js .vjs-subtitles-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-subtitles:before,.video-js .vjs-subtitles-button:before{content:\"\\F10C\"}.vjs-icon-captions,.video-js .vjs-captions-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-captions:before,.video-js .vjs-captions-button:before{content:\"\\F10D\"}.vjs-icon-chapters,.video-js .vjs-chapters-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-chapters:before,.video-js .vjs-chapters-button:before{content:\"\\F10E\"}.vjs-icon-share{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-share:before{content:\"\\F10F\"}.vjs-icon-cog{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-cog:before{content:\"\\F110\"}.vjs-icon-circle,.video-js .vjs-mouse-display,.video-js .vjs-play-progress,.video-js .vjs-volume-level{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-circle:before,.video-js .vjs-mouse-display:before,.video-js .vjs-play-progress:before,.video-js .vjs-volume-level:before{content:\"\\F111\"}.vjs-icon-circle-outline{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-circle-outline:before{content:\"\\F112\"}.vjs-icon-circle-inner-circle{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-circle-inner-circle:before{content:\"\\F113\"}.vjs-icon-hd{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-hd:before{content:\"\\F114\"}.vjs-icon-cancel,.video-js .vjs-control.vjs-close-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-cancel:before,.video-js .vjs-control.vjs-close-button:before{content:\"\\F115\"}.vjs-icon-replay{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-replay:before{content:\"\\F116\"}.vjs-icon-facebook{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-facebook:before{content:\"\\F117\"}.vjs-icon-gplus{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-gplus:before{content:\"\\F118\"}.vjs-icon-linkedin{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-linkedin:before{content:\"\\F119\"}.vjs-icon-twitter{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-twitter:before{content:\"\\F11A\"}.vjs-icon-tumblr{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-tumblr:before{content:\"\\F11B\"}.vjs-icon-pinterest{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-pinterest:before{content:\"\\F11C\"}.vjs-icon-audio-description,.video-js .vjs-descriptions-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-audio-description:before,.video-js .vjs-descriptions-button:before{content:\"\\F11D\"}.vjs-icon-audio,.video-js .vjs-audio-button{font-family:VideoJS;font-weight:400;font-style:normal}.vjs-icon-audio:before,.video-js .vjs-audio-button:before{content:\"\\F11E\"}.video-js{display:block;vertical-align:top;box-sizing:border-box;color:#fff;background-color:#000;position:relative;padding:0;font-size:10px;line-height:1;font-weight:400;font-style:normal;font-family:Arial,Helvetica,sans-serif;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.video-js:-moz-full-screen{position:absolute}.video-js:-webkit-full-screen{width:100%!important;height:100%!important}.video-js *,.video-js :before,.video-js :after{box-sizing:inherit}.video-js ul{font-family:inherit;font-size:inherit;line-height:inherit;list-style-position:outside;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}.video-js.vjs-fluid,.video-js.vjs-16-9,.video-js.vjs-4-3{width:100%;max-width:100%;height:0}.video-js.vjs-16-9{padding-top:56.25%}.video-js.vjs-4-3{padding-top:75%}.video-js.vjs-fill{width:100%;height:100%}.video-js .vjs-tech{position:absolute;top:0;left:0;width:100%;height:100%}body.vjs-full-window{padding:0;margin:0;height:100%;overflow-y:auto}.vjs-full-window .video-js.vjs-fullscreen{position:fixed;overflow:hidden;z-index:1000;left:0;top:0;bottom:0;right:0}.video-js.vjs-fullscreen{width:100%!important;height:100%!important;padding-top:0!important}.video-js.vjs-fullscreen.vjs-user-inactive{cursor:none}.vjs-hidden{display:none!important}.vjs-disabled{opacity:.5;cursor:default}.video-js .vjs-offscreen{height:1px;left:-9999px;position:absolute;top:0;width:1px}.vjs-lock-showing{display:block!important;opacity:1;visibility:visible}.vjs-no-js{padding:20px;color:#fff;background-color:#000;font-size:18px;font-family:Arial,Helvetica,sans-serif;text-align:center;width:300px;height:150px;margin:0 auto}.vjs-no-js a,.vjs-no-js a:visited{color:#66A8CC}.video-js .vjs-big-play-button{font-size:3em;line-height:1.5em;height:1.5em;width:3em;display:block;position:absolute;top:10px;left:10px;padding:0;cursor:pointer;opacity:1;border:.06666em solid #fff;background-color:#2B333F;background-color:rgba(43,51,63,.7);-webkit-border-radius:.3em;-moz-border-radius:.3em;border-radius:.3em;-webkit-transition:all .4s;-moz-transition:all .4s;-o-transition:all .4s;transition:all .4s}.vjs-big-play-centered .vjs-big-play-button{top:50%;left:50%;margin-top:-.75em;margin-left:-1.5em}.video-js:hover .vjs-big-play-button,.video-js .vjs-big-play-button:focus{outline:0;border-color:#fff;background-color:#73859f;background-color:rgba(115,133,159,.5);-webkit-transition:all 0s;-moz-transition:all 0s;-o-transition:all 0s;transition:all 0s}.vjs-controls-disabled .vjs-big-play-button,.vjs-has-started .vjs-big-play-button,.vjs-using-native-controls .vjs-big-play-button,.vjs-error .vjs-big-play-button{display:none}.video-js button{background:0 0;border:0;color:inherit;display:inline-block;overflow:visible;font-size:inherit;line-height:inherit;text-transform:none;text-decoration:none;transition:none;-webkit-appearance:none;-moz-appearance:none;appearance:none}.video-js .vjs-control.vjs-close-button{cursor:pointer;height:3em;position:absolute;right:0;top:.5em;z-index:2}.vjs-menu-button{cursor:pointer}.vjs-menu-button.vjs-disabled{cursor:default}.vjs-workinghover .vjs-menu-button.vjs-disabled:hover .vjs-menu{display:none}.vjs-menu .vjs-menu-content{display:block;padding:0;margin:0;overflow:auto;font-family:Arial,Helvetica,sans-serif}.vjs-scrubbing .vjs-menu-button:hover .vjs-menu{display:none}.vjs-menu li{list-style:none;margin:0;padding:.2em 0;line-height:1.4em;font-size:1.2em;text-align:center;text-transform:lowercase}.vjs-menu li:focus,.vjs-menu li:hover{outline:0;background-color:#73859f;background-color:rgba(115,133,159,.5)}.vjs-menu li.vjs-selected,.vjs-menu li.vjs-selected:focus,.vjs-menu li.vjs-selected:hover{background-color:#fff;color:#2B333F}.vjs-menu li.vjs-menu-title{text-align:center;text-transform:uppercase;font-size:1em;line-height:2em;padding:0;margin:0 0 .3em;font-weight:700;cursor:default}.vjs-menu-button-popup .vjs-menu{display:none;position:absolute;bottom:0;width:10em;left:-3em;height:0;margin-bottom:1.5em;border-top-color:rgba(43,51,63,.7)}.vjs-menu-button-popup .vjs-menu .vjs-menu-content{background-color:#2B333F;background-color:rgba(43,51,63,.7);position:absolute;width:100%;bottom:1.5em;max-height:15em}.vjs-workinghover .vjs-menu-button-popup:hover .vjs-menu,.vjs-menu-button-popup .vjs-menu.vjs-lock-showing{display:block}.video-js .vjs-menu-button-inline{-webkit-transition:all .4s;-moz-transition:all .4s;-o-transition:all .4s;transition:all .4s;overflow:hidden}.video-js .vjs-menu-button-inline:before{width:2.222222222em}.video-js .vjs-menu-button-inline:hover,.video-js .vjs-menu-button-inline:focus,.video-js .vjs-menu-button-inline.vjs-slider-active,.video-js.vjs-no-flex .vjs-menu-button-inline{width:12em}.video-js .vjs-menu-button-inline.vjs-slider-active{-webkit-transition:none;-moz-transition:none;-o-transition:none;transition:none}.vjs-menu-button-inline .vjs-menu{opacity:0;height:100%;width:auto;position:absolute;left:4em;top:0;padding:0;margin:0;-webkit-transition:all .4s;-moz-transition:all .4s;-o-transition:all .4s;transition:all .4s}.vjs-menu-button-inline:hover .vjs-menu,.vjs-menu-button-inline:focus .vjs-menu,.vjs-menu-button-inline.vjs-slider-active .vjs-menu{display:block;opacity:1}.vjs-no-flex .vjs-menu-button-inline .vjs-menu{display:block;opacity:1;position:relative;width:auto}.vjs-no-flex .vjs-menu-button-inline:hover .vjs-menu,.vjs-no-flex .vjs-menu-button-inline:focus .vjs-menu,.vjs-no-flex .vjs-menu-button-inline.vjs-slider-active .vjs-menu{width:auto}.vjs-menu-button-inline .vjs-menu-content{width:auto;height:100%;margin:0;overflow:hidden}.video-js .vjs-control-bar{display:none;width:100%;position:absolute;bottom:0;left:0;right:0;height:3em;background-color:#2B333F;background-color:rgba(43,51,63,.7)}.vjs-has-started .vjs-control-bar{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;visibility:visible;opacity:1;-webkit-transition:visibility .1s,opacity .1s;-moz-transition:visibility .1s,opacity .1s;-o-transition:visibility .1s,opacity .1s;transition:visibility .1s,opacity .1s}.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{visibility:visible;opacity:0;-webkit-transition:visibility 1s,opacity 1s;-moz-transition:visibility 1s,opacity 1s;-o-transition:visibility 1s,opacity 1s;transition:visibility 1s,opacity 1s}@media \\0screen{.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{visibility:hidden}}.vjs-controls-disabled .vjs-control-bar,.vjs-using-native-controls .vjs-control-bar,.vjs-error .vjs-control-bar{display:none!important}.vjs-audio.vjs-has-started.vjs-user-inactive.vjs-playing .vjs-control-bar{opacity:1;visibility:visible}@media \\0screen{.vjs-user-inactive.vjs-playing .vjs-control-bar :before{content:\"\"}}.vjs-has-started.vjs-no-flex .vjs-control-bar{display:table}.video-js .vjs-control{outline:0;position:relative;text-align:center;margin:0;padding:0;height:100%;width:4em;-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none}.video-js .vjs-control:before{font-size:1.8em;line-height:1.67}.video-js .vjs-control:focus:before,.video-js .vjs-control:hover:before,.video-js .vjs-control:focus{text-shadow:0 0 1em #fff}.video-js .vjs-control-text{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.vjs-no-flex .vjs-control{display:table-cell;vertical-align:middle}.video-js .vjs-custom-control-spacer{display:none}.video-js .vjs-progress-control{-webkit-box-flex:auto;-moz-box-flex:auto;-webkit-flex:auto;-ms-flex:auto;flex:auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center;min-width:4em}.vjs-live .vjs-progress-control{display:none}.video-js .vjs-progress-holder{-webkit-box-flex:auto;-moz-box-flex:auto;-webkit-flex:auto;-ms-flex:auto;flex:auto;-webkit-transition:all .2s;-moz-transition:all .2s;-o-transition:all .2s;transition:all .2s;height:.3em}.video-js .vjs-progress-control:hover .vjs-progress-holder{font-size:1.666666666666666666em}.video-js .vjs-progress-control:hover .vjs-time-tooltip,.video-js .vjs-progress-control:hover .vjs-mouse-display:after,.video-js .vjs-progress-control:hover .vjs-play-progress:after{font-family:Arial,Helvetica,sans-serif;visibility:visible;font-size:.6em}.video-js .vjs-progress-holder .vjs-play-progress,.video-js .vjs-progress-holder .vjs-load-progress,.video-js .vjs-progress-holder .vjs-tooltip-progress-bar,.video-js .vjs-progress-holder .vjs-load-progress div{position:absolute;display:block;height:.3em;margin:0;padding:0;width:0;left:0;top:0}.video-js .vjs-mouse-display:before{display:none}.video-js .vjs-play-progress{background-color:#fff}.video-js .vjs-play-progress:before{position:absolute;top:-.333333333333333em;right:-.5em;font-size:.9em}.video-js .vjs-time-tooltip,.video-js .vjs-mouse-display:after,.video-js .vjs-play-progress:after{visibility:hidden;pointer-events:none;position:absolute;top:-3.4em;right:-1.9em;font-size:.9em;color:#000;content:attr(data-current-time);padding:6px 8px 8px;background-color:#fff;background-color:rgba(255,255,255,.8);-webkit-border-radius:.3em;-moz-border-radius:.3em;border-radius:.3em}.video-js .vjs-time-tooltip,.video-js .vjs-play-progress:before,.video-js .vjs-play-progress:after{z-index:1}.video-js .vjs-progress-control .vjs-keep-tooltips-inside:after{display:none}.video-js .vjs-load-progress{background:#bfc7d3;background:rgba(115,133,159,.5)}.video-js .vjs-load-progress div{background:#fff;background:rgba(115,133,159,.75)}.video-js.vjs-no-flex .vjs-progress-control{width:auto}.video-js .vjs-time-tooltip{display:inline-block;height:2.4em;position:relative;float:right;right:-1.9em}.vjs-tooltip-progress-bar{visibility:hidden}.video-js .vjs-progress-control .vjs-mouse-display{display:none;position:absolute;width:1px;height:100%;background-color:#000;z-index:1}.vjs-no-flex .vjs-progress-control .vjs-mouse-display{z-index:0}.video-js .vjs-progress-control:hover .vjs-mouse-display{display:block}.video-js.vjs-user-inactive .vjs-progress-control .vjs-mouse-display,.video-js.vjs-user-inactive .vjs-progress-control .vjs-mouse-display:after{visibility:hidden;opacity:0;-webkit-transition:visibility 1s,opacity 1s;-moz-transition:visibility 1s,opacity 1s;-o-transition:visibility 1s,opacity 1s;transition:visibility 1s,opacity 1s}.video-js.vjs-user-inactive.vjs-no-flex .vjs-progress-control .vjs-mouse-display,.video-js.vjs-user-inactive.vjs-no-flex .vjs-progress-control .vjs-mouse-display:after{display:none}.vjs-mouse-display .vjs-time-tooltip,.video-js .vjs-progress-control .vjs-mouse-display:after{color:#fff;background-color:#000;background-color:rgba(0,0,0,.8)}.video-js .vjs-slider{outline:0;position:relative;cursor:pointer;padding:0;margin:0 .45em;background-color:#73859f;background-color:rgba(115,133,159,.5)}.video-js .vjs-slider:focus{text-shadow:0 0 1em #fff;-webkit-box-shadow:0 0 1em #fff;-moz-box-shadow:0 0 1em #fff;box-shadow:0 0 1em #fff}.video-js .vjs-mute-control,.video-js .vjs-volume-menu-button{cursor:pointer;-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none}.video-js .vjs-volume-control{width:5em;-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:center;-webkit-align-items:center;-ms-flex-align:center;align-items:center}.video-js .vjs-volume-bar{margin:1.35em .45em}.vjs-volume-bar.vjs-slider-horizontal{width:5em;height:.3em}.vjs-volume-bar.vjs-slider-vertical{width:.3em;height:5em;margin:1.35em auto}.video-js .vjs-volume-level{position:absolute;bottom:0;left:0;background-color:#fff}.video-js .vjs-volume-level:before{position:absolute;font-size:.9em}.vjs-slider-vertical .vjs-volume-level{width:.3em}.vjs-slider-vertical .vjs-volume-level:before{top:-.5em;left:-.3em}.vjs-slider-horizontal .vjs-volume-level{height:.3em}.vjs-slider-horizontal .vjs-volume-level:before{top:-.3em;right:-.5em}.vjs-volume-bar.vjs-slider-vertical .vjs-volume-level{height:100%}.vjs-volume-bar.vjs-slider-horizontal .vjs-volume-level{width:100%}.vjs-menu-button-popup.vjs-volume-menu-button .vjs-menu{display:block;width:0;height:0;border-top-color:transparent}.vjs-menu-button-popup.vjs-volume-menu-button-vertical .vjs-menu{left:.5em;height:8em}.vjs-menu-button-popup.vjs-volume-menu-button-horizontal .vjs-menu{left:-2em}.vjs-menu-button-popup.vjs-volume-menu-button .vjs-menu-content{height:0;width:0;overflow-x:hidden;overflow-y:hidden}.vjs-volume-menu-button-vertical:hover .vjs-menu-content,.vjs-volume-menu-button-vertical:focus .vjs-menu-content,.vjs-volume-menu-button-vertical.vjs-slider-active .vjs-menu-content,.vjs-volume-menu-button-vertical .vjs-lock-showing .vjs-menu-content{height:8em;width:2.9em}.vjs-volume-menu-button-horizontal:hover .vjs-menu-content,.vjs-volume-menu-button-horizontal:focus .vjs-menu-content,.vjs-volume-menu-button-horizontal .vjs-slider-active .vjs-menu-content,.vjs-volume-menu-button-horizontal .vjs-lock-showing .vjs-menu-content{height:2.9em;width:8em}.vjs-volume-menu-button.vjs-menu-button-inline .vjs-menu-content{background-color:transparent!important}.vjs-poster{display:inline-block;vertical-align:middle;background-repeat:no-repeat;background-position:50% 50%;background-size:contain;background-color:#000;cursor:pointer;margin:0;padding:0;position:absolute;top:0;right:0;bottom:0;left:0;height:100%}.vjs-poster img{display:block;vertical-align:middle;margin:0 auto;max-height:100%;padding:0;width:100%}.vjs-has-started .vjs-poster{display:none}.vjs-audio.vjs-has-started .vjs-poster{display:block}.vjs-controls-disabled .vjs-poster{display:none}.vjs-using-native-controls .vjs-poster{display:none}.video-js .vjs-live-control{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-align:flex-start;-webkit-align-items:flex-start;-ms-flex-align:flex-start;align-items:flex-start;-webkit-box-flex:auto;-moz-box-flex:auto;-webkit-flex:auto;-ms-flex:auto;flex:auto;font-size:1em;line-height:3em}.vjs-no-flex .vjs-live-control{display:table-cell;width:auto;text-align:left}.video-js .vjs-time-control{-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none;font-size:1em;line-height:3em;min-width:2em;width:auto;padding-left:1em;padding-right:1em}.vjs-live .vjs-time-control{display:none}.video-js .vjs-current-time,.vjs-no-flex .vjs-current-time{display:none}.video-js .vjs-duration,.vjs-no-flex .vjs-duration{display:none}.vjs-time-divider{display:none;line-height:3em}.vjs-live .vjs-time-divider{display:none}.video-js .vjs-play-control{cursor:pointer;-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none}.vjs-text-track-display{position:absolute;bottom:3em;left:0;right:0;top:0;pointer-events:none}.video-js.vjs-user-inactive.vjs-playing .vjs-text-track-display{bottom:1em}.video-js .vjs-text-track{font-size:1.4em;text-align:center;margin-bottom:.1em;background-color:#000;background-color:rgba(0,0,0,.5)}.vjs-subtitles{color:#fff}.vjs-captions{color:#fc6}.vjs-tt-cue{display:block}video::-webkit-media-text-track-display{-moz-transform:translateY(-3em);-ms-transform:translateY(-3em);-o-transform:translateY(-3em);-webkit-transform:translateY(-3em);transform:translateY(-3em)}.video-js.vjs-user-inactive.vjs-playing video::-webkit-media-text-track-display{-moz-transform:translateY(-1.5em);-ms-transform:translateY(-1.5em);-o-transform:translateY(-1.5em);-webkit-transform:translateY(-1.5em);transform:translateY(-1.5em)}.video-js .vjs-fullscreen-control{cursor:pointer;-webkit-box-flex:none;-moz-box-flex:none;-webkit-flex:none;-ms-flex:none;flex:none}.vjs-playback-rate .vjs-playback-rate-value{font-size:1.5em;line-height:2;position:absolute;top:0;left:0;width:100%;height:100%;text-align:center}.vjs-playback-rate .vjs-menu{width:4em;left:0}.vjs-error .vjs-error-display .vjs-modal-dialog-content{font-size:1.4em;text-align:center}.vjs-error .vjs-error-display:before{color:#fff;content:'X';font-family:Arial,Helvetica,sans-serif;font-size:4em;left:0;line-height:1;margin-top:-.5em;position:absolute;text-shadow:.05em .05em .1em #000;text-align:center;top:50%;vertical-align:middle;width:100%}.vjs-loading-spinner{display:none;position:absolute;top:50%;left:50%;margin:-25px 0 0 -25px;opacity:.85;text-align:left;border:6px solid rgba(43,51,63,.7);box-sizing:border-box;background-clip:padding-box;width:50px;height:50px;border-radius:25px}.vjs-seeking .vjs-loading-spinner,.vjs-waiting .vjs-loading-spinner{display:block}.vjs-loading-spinner:before,.vjs-loading-spinner:after{content:\"\";position:absolute;margin:-6px;box-sizing:inherit;width:inherit;height:inherit;border-radius:inherit;opacity:1;border:inherit;border-color:transparent;border-top-color:#fff}.vjs-seeking .vjs-loading-spinner:before,.vjs-seeking .vjs-loading-spinner:after,.vjs-waiting .vjs-loading-spinner:before,.vjs-waiting .vjs-loading-spinner:after{-webkit-animation:vjs-spinner-spin 1.1s cubic-bezier(0.6,.2,0,.8) infinite,vjs-spinner-fade 1.1s linear infinite;animation:vjs-spinner-spin 1.1s cubic-bezier(0.6,.2,0,.8) infinite,vjs-spinner-fade 1.1s linear infinite}.vjs-seeking .vjs-loading-spinner:before,.vjs-waiting .vjs-loading-spinner:before{border-top-color:#fff}.vjs-seeking .vjs-loading-spinner:after,.vjs-waiting .vjs-loading-spinner:after{border-top-color:#fff;-webkit-animation-delay:.44s;animation-delay:.44s}@keyframes vjs-spinner-spin{100%{transform:rotate(360deg)}}@-webkit-keyframes vjs-spinner-spin{100%{-webkit-transform:rotate(360deg)}}@keyframes vjs-spinner-fade{0%{border-top-color:#73859f}20%{border-top-color:#73859f}35%{border-top-color:#fff}60%{border-top-color:#73859f}100%{border-top-color:#73859f}}@-webkit-keyframes vjs-spinner-fade{0%{border-top-color:#73859f}20%{border-top-color:#73859f}35%{border-top-color:#fff}60%{border-top-color:#73859f}100%{border-top-color:#73859f}}.vjs-chapters-button .vjs-menu ul{width:24em}.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-custom-control-spacer{-webkit-box-flex:auto;-moz-box-flex:auto;-webkit-flex:auto;-ms-flex:auto;flex:auto}.video-js.vjs-layout-tiny:not(.vjs-fullscreen).vjs-no-flex .vjs-custom-control-spacer{width:auto}.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-current-time,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-time-divider,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-duration,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-remaining-time,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-playback-rate,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-progress-control,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-mute-control,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-volume-control,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-volume-menu-button,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-chapters-button,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-descriptions-button,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-captions-button,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-subtitles-button,.video-js.vjs-layout-tiny:not(.vjs-fullscreen) .vjs-audio-button{display:none}.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-current-time,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-time-divider,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-duration,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-remaining-time,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-playback-rate,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-mute-control,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-volume-control,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-volume-menu-button,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-chapters-button,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-descriptions-button,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-captions-button,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-subtitles-button,.video-js.vjs-layout-x-small:not(.vjs-fullscreen) .vjs-audio-button{display:none}.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-current-time,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-time-divider,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-duration,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-remaining-time,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-playback-rate,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-mute-control,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-volume-control,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-chapters-button,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-descriptions-button,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-captions-button,.video-js.vjs-layout-small:not(.vjs-fullscreen) .vjs-subtitles-button .vjs-audio-button{display:none}.vjs-caption-settings{position:relative;top:1em;background-color:#2B333F;background-color:rgba(43,51,63,.75);color:#fff;margin:0 auto;padding:.5em;height:16em;font-size:12px;width:40em}.vjs-caption-settings .vjs-tracksettings{top:0;bottom:1em;left:0;right:0;position:absolute;overflow:auto}.vjs-caption-settings .vjs-tracksettings-colors,.vjs-caption-settings .vjs-tracksettings-font{float:left}.vjs-caption-settings .vjs-tracksettings-colors:after,.vjs-caption-settings .vjs-tracksettings-font:after,.vjs-caption-settings .vjs-tracksettings-controls:after{clear:both}.vjs-caption-settings .vjs-tracksettings-controls{position:absolute;bottom:1em;right:1em}.vjs-caption-settings .vjs-tracksetting{margin:5px;padding:3px;min-height:40px;border:0}.vjs-caption-settings .vjs-tracksetting label,.vjs-caption-settings .vjs-tracksetting legend{display:block;width:100px;margin-bottom:5px}.vjs-caption-settings .vjs-tracksetting span{display:inline;margin-left:5px;vertical-align:top;float:right}.vjs-caption-settings .vjs-tracksetting>div{margin-bottom:5px;min-height:20px}.vjs-caption-settings .vjs-tracksetting>div:last-child{margin-bottom:0;padding-bottom:0;min-height:0}.vjs-caption-settings label>input{margin-right:10px}.vjs-caption-settings fieldset{margin-top:1em;margin-left:.5em}.vjs-caption-settings fieldset .vjs-label{position:absolute;clip:rect(1px 1px 1px 1px);clip:rect(1px,1px,1px,1px);padding:0;border:0;height:1px;width:1px;overflow:hidden}.vjs-caption-settings input[type=button]{width:40px;height:40px}.video-js .vjs-modal-dialog{background:rgba(0,0,0,.8);background:-webkit-linear-gradient(-90deg,rgba(0,0,0,.8),rgba(255,255,255,0));background:linear-gradient(180deg,rgba(0,0,0,.8),rgba(255,255,255,0))}.vjs-modal-dialog .vjs-modal-dialog-content{font-size:1.2em;line-height:1.5;padding:20px 24px;z-index:1}@media print{.video-js>:not(.vjs-tech):not(.vjs-poster){visibility:hidden}}", ""]);
	
	// exports


/***/ },
/* 236 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__.p + "00103e881a36640a08f869ff6888f0fd.eot";

/***/ },
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var require;var require;/* WEBPACK VAR INJECTION */(function(global) {/**
	 * @license
	 * Video.js 5.11.7 <http://videojs.com/>
	 * Copyright Brightcove, Inc. <https://www.brightcove.com/>
	 * Available under Apache License Version 2.0
	 * <https://github.com/videojs/video.js/blob/master/LICENSE>
	 *
	 * Includes vtt.js <https://github.com/mozilla/vtt.js>
	 * Available under Apache License Version 2.0
	 * <https://github.com/mozilla/vtt.js/blob/master/LICENSE>
	 */
	
	(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.videojs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
	(function (global){
	var topLevel = typeof global !== 'undefined' ? global :
	    typeof window !== 'undefined' ? window : {}
	var minDoc = _dereq_('min-document');
	
	if (typeof document !== 'undefined') {
	    module.exports = document;
	} else {
	    var doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];
	
	    if (!doccy) {
	        doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
	    }
	
	    module.exports = doccy;
	}
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvZG9jdW1lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdG9wTGV2ZWwgPSB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6XG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fVxudmFyIG1pbkRvYyA9IHJlcXVpcmUoJ21pbi1kb2N1bWVudCcpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQ7XG59IGVsc2Uge1xuICAgIHZhciBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107XG5cbiAgICBpZiAoIWRvY2N5KSB7XG4gICAgICAgIGRvY2N5ID0gdG9wTGV2ZWxbJ19fR0xPQkFMX0RPQ1VNRU5UX0NBQ0hFQDQnXSA9IG1pbkRvYztcbiAgICB9XG5cbiAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5O1xufVxuIl19
	},{"min-document":3}],2:[function(_dereq_,module,exports){
	(function (global){
	if (typeof window !== "undefined") {
	    module.exports = window;
	} else if (typeof global !== "undefined") {
	    module.exports = global;
	} else if (typeof self !== "undefined"){
	    module.exports = self;
	} else {
	    module.exports = {};
	}
	
	}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
	//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9nbG9iYWwvd2luZG93LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbmRvdztcbn0gZWxzZSBpZiAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBzZWxmO1xufSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IHt9O1xufVxuIl19
	},{}],3:[function(_dereq_,module,exports){
	
	},{}],4:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative');
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeNow = getNative(Date, 'now');
	
	/**
	 * Gets the number of milliseconds that have elapsed since the Unix epoch
	 * (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @category Date
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => logs the number of milliseconds it took for the deferred function to be invoked
	 */
	var now = nativeNow || function() {
	  return new Date().getTime();
	};
	
	module.exports = now;
	
	},{"../internal/getNative":20}],5:[function(_dereq_,module,exports){
	var isObject = _dereq_('../lang/isObject'),
	    now = _dereq_('../date/now');
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed invocations. Provide an options object to indicate that `func`
	 * should be invoked on the leading and/or trailing edge of the `wait` timeout.
	 * Subsequent calls to the debounced function return the result of the last
	 * `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the debounced function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=false] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {number} [options.maxWait] The maximum time `func` is allowed to be
	 *  delayed before it's invoked.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // avoid costly calculations while the window size is in flux
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
	 * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // ensure `batchLog` is invoked once after 1 second of debounced calls
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', _.debounce(batchLog, 250, {
	 *   'maxWait': 1000
	 * }));
	 *
	 * // cancel a debounced call
	 * var todoChanges = _.debounce(batchLog, 1000);
	 * Object.observe(models.todo, todoChanges);
	 *
	 * Object.observe(models, function(changes) {
	 *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
	 *     todoChanges.cancel();
	 *   }
	 * }, ['delete']);
	 *
	 * // ...at some point `models.todo` is changed
	 * models.todo.completed = true;
	 *
	 * // ...before 1 second has passed `models.todo` is deleted
	 * // which cancels the debounced `todoChanges` call
	 * delete models.todo;
	 */
	function debounce(func, wait, options) {
	  var args,
	      maxTimeoutId,
	      result,
	      stamp,
	      thisArg,
	      timeoutId,
	      trailingCall,
	      lastCalled = 0,
	      maxWait = false,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = wait < 0 ? 0 : (+wait || 0);
	  if (options === true) {
	    var leading = true;
	    trailing = false;
	  } else if (isObject(options)) {
	    leading = !!options.leading;
	    maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	
	  function cancel() {
	    if (timeoutId) {
	      clearTimeout(timeoutId);
	    }
	    if (maxTimeoutId) {
	      clearTimeout(maxTimeoutId);
	    }
	    lastCalled = 0;
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	  }
	
	  function complete(isCalled, id) {
	    if (id) {
	      clearTimeout(id);
	    }
	    maxTimeoutId = timeoutId = trailingCall = undefined;
	    if (isCalled) {
	      lastCalled = now();
	      result = func.apply(thisArg, args);
	      if (!timeoutId && !maxTimeoutId) {
	        args = thisArg = undefined;
	      }
	    }
	  }
	
	  function delayed() {
	    var remaining = wait - (now() - stamp);
	    if (remaining <= 0 || remaining > wait) {
	      complete(trailingCall, maxTimeoutId);
	    } else {
	      timeoutId = setTimeout(delayed, remaining);
	    }
	  }
	
	  function maxDelayed() {
	    complete(trailing, timeoutId);
	  }
	
	  function debounced() {
	    args = arguments;
	    stamp = now();
	    thisArg = this;
	    trailingCall = trailing && (timeoutId || !leading);
	
	    if (maxWait === false) {
	      var leadingCall = leading && !timeoutId;
	    } else {
	      if (!maxTimeoutId && !leading) {
	        lastCalled = stamp;
	      }
	      var remaining = maxWait - (stamp - lastCalled),
	          isCalled = remaining <= 0 || remaining > maxWait;
	
	      if (isCalled) {
	        if (maxTimeoutId) {
	          maxTimeoutId = clearTimeout(maxTimeoutId);
	        }
	        lastCalled = stamp;
	        result = func.apply(thisArg, args);
	      }
	      else if (!maxTimeoutId) {
	        maxTimeoutId = setTimeout(maxDelayed, remaining);
	      }
	    }
	    if (isCalled && timeoutId) {
	      timeoutId = clearTimeout(timeoutId);
	    }
	    else if (!timeoutId && wait !== maxWait) {
	      timeoutId = setTimeout(delayed, wait);
	    }
	    if (leadingCall) {
	      isCalled = true;
	      result = func.apply(thisArg, args);
	    }
	    if (isCalled && !timeoutId && !maxTimeoutId) {
	      args = thisArg = undefined;
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  return debounced;
	}
	
	module.exports = debounce;
	
	},{"../date/now":4,"../lang/isObject":33}],6:[function(_dereq_,module,exports){
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;
	
	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);
	
	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}
	
	module.exports = restParam;
	
	},{}],7:[function(_dereq_,module,exports){
	var debounce = _dereq_('./debounce'),
	    isObject = _dereq_('../lang/isObject');
	
	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed invocations. Provide an options object to indicate
	 * that `func` should be invoked on the leading and/or trailing edge of the
	 * `wait` timeout. Subsequent calls to the throttled function return the
	 * result of the last `func` call.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
	 * on the trailing edge of the timeout only if the the throttled function is
	 * invoked more than once during the `wait` timeout.
	 *
	 * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options] The options object.
	 * @param {boolean} [options.leading=true] Specify invoking on the leading
	 *  edge of the timeout.
	 * @param {boolean} [options.trailing=true] Specify invoking on the trailing
	 *  edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // avoid excessively updating the position while scrolling
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
	 * jQuery('.interactive').on('click', _.throttle(renewToken, 300000, {
	 *   'trailing': false
	 * }));
	 *
	 * // cancel a trailing throttled call
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (options === false) {
	    leading = false;
	  } else if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, { 'leading': leading, 'maxWait': +wait, 'trailing': trailing });
	}
	
	module.exports = throttle;
	
	},{"../lang/isObject":33,"./debounce":5}],8:[function(_dereq_,module,exports){
	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;
	
	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}
	
	module.exports = arrayCopy;
	
	},{}],9:[function(_dereq_,module,exports){
	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;
	
	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}
	
	module.exports = arrayEach;
	
	},{}],10:[function(_dereq_,module,exports){
	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});
	
	  var index = -1,
	      length = props.length;
	
	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}
	
	module.exports = baseCopy;
	
	},{}],11:[function(_dereq_,module,exports){
	var createBaseFor = _dereq_('./createBaseFor');
	
	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();
	
	module.exports = baseFor;
	
	},{"./createBaseFor":18}],12:[function(_dereq_,module,exports){
	var baseFor = _dereq_('./baseFor'),
	    keysIn = _dereq_('../object/keysIn');
	
	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}
	
	module.exports = baseForIn;
	
	},{"../object/keysIn":39,"./baseFor":11}],13:[function(_dereq_,module,exports){
	var arrayEach = _dereq_('./arrayEach'),
	    baseMergeDeep = _dereq_('./baseMergeDeep'),
	    isArray = _dereq_('../lang/isArray'),
	    isArrayLike = _dereq_('./isArrayLike'),
	    isObject = _dereq_('../lang/isObject'),
	    isObjectLike = _dereq_('./isObjectLike'),
	    isTypedArray = _dereq_('../lang/isTypedArray'),
	    keys = _dereq_('../object/keys');
	
	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);
	
	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;
	
	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}
	
	module.exports = baseMerge;
	
	},{"../lang/isArray":30,"../lang/isObject":33,"../lang/isTypedArray":36,"../object/keys":38,"./arrayEach":9,"./baseMergeDeep":14,"./isArrayLike":21,"./isObjectLike":26}],14:[function(_dereq_,module,exports){
	var arrayCopy = _dereq_('./arrayCopy'),
	    isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isArrayLike = _dereq_('./isArrayLike'),
	    isPlainObject = _dereq_('../lang/isPlainObject'),
	    isTypedArray = _dereq_('../lang/isTypedArray'),
	    toPlainObject = _dereq_('../lang/toPlainObject');
	
	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];
	
	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;
	
	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);
	
	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}
	
	module.exports = baseMergeDeep;
	
	},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isPlainObject":34,"../lang/isTypedArray":36,"../lang/toPlainObject":37,"./arrayCopy":8,"./isArrayLike":21}],15:[function(_dereq_,module,exports){
	var toObject = _dereq_('./toObject');
	
	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : toObject(object)[key];
	  };
	}
	
	module.exports = baseProperty;
	
	},{"./toObject":28}],16:[function(_dereq_,module,exports){
	var identity = _dereq_('../utility/identity');
	
	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}
	
	module.exports = bindCallback;
	
	},{"../utility/identity":42}],17:[function(_dereq_,module,exports){
	var bindCallback = _dereq_('./bindCallback'),
	    isIterateeCall = _dereq_('./isIterateeCall'),
	    restParam = _dereq_('../function/restParam');
	
	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;
	
	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}
	
	module.exports = createAssigner;
	
	},{"../function/restParam":6,"./bindCallback":16,"./isIterateeCall":24}],18:[function(_dereq_,module,exports){
	var toObject = _dereq_('./toObject');
	
	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;
	
	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}
	
	module.exports = createBaseFor;
	
	},{"./toObject":28}],19:[function(_dereq_,module,exports){
	var baseProperty = _dereq_('./baseProperty');
	
	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');
	
	module.exports = getLength;
	
	},{"./baseProperty":15}],20:[function(_dereq_,module,exports){
	var isNative = _dereq_('../lang/isNative');
	
	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}
	
	module.exports = getNative;
	
	},{"../lang/isNative":32}],21:[function(_dereq_,module,exports){
	var getLength = _dereq_('./getLength'),
	    isLength = _dereq_('./isLength');
	
	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}
	
	module.exports = isArrayLike;
	
	},{"./getLength":19,"./isLength":25}],22:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is a host object in IE < 9.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
	 */
	var isHostObject = (function() {
	  try {
	    Object({ 'toString': 0 } + '');
	  } catch(e) {
	    return function() { return false; };
	  }
	  return function(value) {
	    // IE < 9 presents many host objects as `Object` objects that can coerce
	    // to strings despite having improperly defined `toString` methods.
	    return typeof value.toString != 'function' && typeof (value + '') == 'string';
	  };
	}());
	
	module.exports = isHostObject;
	
	},{}],23:[function(_dereq_,module,exports){
	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;
	
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}
	
	module.exports = isIndex;
	
	},{}],24:[function(_dereq_,module,exports){
	var isArrayLike = _dereq_('./isArrayLike'),
	    isIndex = _dereq_('./isIndex'),
	    isObject = _dereq_('../lang/isObject');
	
	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}
	
	module.exports = isIterateeCall;
	
	},{"../lang/isObject":33,"./isArrayLike":21,"./isIndex":23}],25:[function(_dereq_,module,exports){
	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;
	
	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}
	
	module.exports = isLength;
	
	},{}],26:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}
	
	module.exports = isObjectLike;
	
	},{}],27:[function(_dereq_,module,exports){
	var isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isIndex = _dereq_('./isIndex'),
	    isLength = _dereq_('./isLength'),
	    isString = _dereq_('../lang/isString'),
	    keysIn = _dereq_('../object/keysIn');
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;
	
	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object));
	
	  var index = -1,
	      result = [];
	
	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}
	
	module.exports = shimKeys;
	
	},{"../lang/isArguments":29,"../lang/isArray":30,"../lang/isString":35,"../object/keysIn":39,"./isIndex":23,"./isLength":25}],28:[function(_dereq_,module,exports){
	var isObject = _dereq_('../lang/isObject'),
	    isString = _dereq_('../lang/isString'),
	    support = _dereq_('../support');
	
	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  if (support.unindexedChars && isString(value)) {
	    var index = -1,
	        length = value.length,
	        result = Object(value);
	
	    while (++index < length) {
	      result[index] = value.charAt(index);
	    }
	    return result;
	  }
	  return isObject(value) ? value : Object(value);
	}
	
	module.exports = toObject;
	
	},{"../lang/isObject":33,"../lang/isString":35,"../support":41}],29:[function(_dereq_,module,exports){
	var isArrayLike = _dereq_('../internal/isArrayLike'),
	    isObjectLike = _dereq_('../internal/isObjectLike');
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;
	
	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}
	
	module.exports = isArguments;
	
	},{"../internal/isArrayLike":21,"../internal/isObjectLike":26}],30:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative'),
	    isLength = _dereq_('../internal/isLength'),
	    isObjectLike = _dereq_('../internal/isObjectLike');
	
	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');
	
	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};
	
	module.exports = isArray;
	
	},{"../internal/getNative":20,"../internal/isLength":25,"../internal/isObjectLike":26}],31:[function(_dereq_,module,exports){
	var isObject = _dereq_('./isObject');
	
	/** `Object#toString` result references. */
	var funcTag = '[object Function]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}
	
	module.exports = isFunction;
	
	},{"./isObject":33}],32:[function(_dereq_,module,exports){
	var isFunction = _dereq_('./isFunction'),
	    isHostObject = _dereq_('../internal/isHostObject'),
	    isObjectLike = _dereq_('../internal/isObjectLike');
	
	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);
	
	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && (isHostObject(value) ? reIsNative : reIsHostCtor).test(value);
	}
	
	module.exports = isNative;
	
	},{"../internal/isHostObject":22,"../internal/isObjectLike":26,"./isFunction":31}],33:[function(_dereq_,module,exports){
	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;
	
	},{}],34:[function(_dereq_,module,exports){
	var baseForIn = _dereq_('../internal/baseForIn'),
	    isArguments = _dereq_('./isArguments'),
	    isHostObject = _dereq_('../internal/isHostObject'),
	    isObjectLike = _dereq_('../internal/isObjectLike'),
	    support = _dereq_('../support');
	
	/** `Object#toString` result references. */
	var objectTag = '[object Object]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;
	
	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isHostObject(value) && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  if (support.ownLast) {
	    baseForIn(value, function(subValue, key, object) {
	      result = hasOwnProperty.call(object, key);
	      return false;
	    });
	    return result !== false;
	  }
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}
	
	module.exports = isPlainObject;
	
	},{"../internal/baseForIn":12,"../internal/isHostObject":22,"../internal/isObjectLike":26,"../support":41,"./isArguments":29}],35:[function(_dereq_,module,exports){
	var isObjectLike = _dereq_('../internal/isObjectLike');
	
	/** `Object#toString` result references. */
	var stringTag = '[object String]';
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}
	
	module.exports = isString;
	
	},{"../internal/isObjectLike":26}],36:[function(_dereq_,module,exports){
	var isLength = _dereq_('../internal/isLength'),
	    isObjectLike = _dereq_('../internal/isObjectLike');
	
	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';
	
	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';
	
	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
	
	/** Used for native method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}
	
	module.exports = isTypedArray;
	
	},{"../internal/isLength":25,"../internal/isObjectLike":26}],37:[function(_dereq_,module,exports){
	var baseCopy = _dereq_('../internal/baseCopy'),
	    keysIn = _dereq_('../object/keysIn');
	
	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}
	
	module.exports = toPlainObject;
	
	},{"../internal/baseCopy":10,"../object/keysIn":39}],38:[function(_dereq_,module,exports){
	var getNative = _dereq_('../internal/getNative'),
	    isArrayLike = _dereq_('../internal/isArrayLike'),
	    isObject = _dereq_('../lang/isObject'),
	    shimKeys = _dereq_('../internal/shimKeys'),
	    support = _dereq_('../support');
	
	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');
	
	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object == 'function' ? support.enumPrototypes : isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};
	
	module.exports = keys;
	
	},{"../internal/getNative":20,"../internal/isArrayLike":21,"../internal/shimKeys":27,"../lang/isObject":33,"../support":41}],39:[function(_dereq_,module,exports){
	var arrayEach = _dereq_('../internal/arrayEach'),
	    isArguments = _dereq_('../lang/isArguments'),
	    isArray = _dereq_('../lang/isArray'),
	    isFunction = _dereq_('../lang/isFunction'),
	    isIndex = _dereq_('../internal/isIndex'),
	    isLength = _dereq_('../internal/isLength'),
	    isObject = _dereq_('../lang/isObject'),
	    isString = _dereq_('../lang/isString'),
	    support = _dereq_('../support');
	
	/** `Object#toString` result references. */
	var arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';
	
	/** Used to fix the JScript `[[DontEnum]]` bug. */
	var shadowProps = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];
	
	/** Used for native method references. */
	var errorProto = Error.prototype,
	    objectProto = Object.prototype,
	    stringProto = String.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;
	
	/** Used to avoid iterating over non-enumerable properties in IE < 9. */
	var nonEnumProps = {};
	nonEnumProps[arrayTag] = nonEnumProps[dateTag] = nonEnumProps[numberTag] = { 'constructor': true, 'toLocaleString': true, 'toString': true, 'valueOf': true };
	nonEnumProps[boolTag] = nonEnumProps[stringTag] = { 'constructor': true, 'toString': true, 'valueOf': true };
	nonEnumProps[errorTag] = nonEnumProps[funcTag] = nonEnumProps[regexpTag] = { 'constructor': true, 'toString': true };
	nonEnumProps[objectTag] = { 'constructor': true };
	
	arrayEach(shadowProps, function(key) {
	  for (var tag in nonEnumProps) {
	    if (hasOwnProperty.call(nonEnumProps, tag)) {
	      var props = nonEnumProps[tag];
	      props[key] = hasOwnProperty.call(props, key);
	    }
	  }
	});
	
	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object) || isString(object)) && length) || 0;
	
	  var Ctor = object.constructor,
	      index = -1,
	      proto = (isFunction(Ctor) && Ctor.prototype) || objectProto,
	      isProto = proto === object,
	      result = Array(length),
	      skipIndexes = length > 0,
	      skipErrorProps = support.enumErrorProps && (object === errorProto || object instanceof Error),
	      skipProto = support.enumPrototypes && isFunction(object);
	
	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  // lodash skips the `constructor` property when it infers it's iterating
	  // over a `prototype` object because IE < 9 can't set the `[[Enumerable]]`
	  // attribute of an existing property and the `constructor` property of a
	  // prototype defaults to non-enumerable.
	  for (var key in object) {
	    if (!(skipProto && key == 'prototype') &&
	        !(skipErrorProps && (key == 'message' || key == 'name')) &&
	        !(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  if (support.nonEnumShadows && object !== objectProto) {
	    var tag = object === stringProto ? stringTag : (object === errorProto ? errorTag : objToString.call(object)),
	        nonEnums = nonEnumProps[tag] || nonEnumProps[objectTag];
	
	    if (tag == objectTag) {
	      proto = objectProto;
	    }
	    length = shadowProps.length;
	    while (length--) {
	      key = shadowProps[length];
	      var nonEnum = nonEnums[key];
	      if (!(isProto && nonEnum) &&
	          (nonEnum ? hasOwnProperty.call(object, key) : object[key] !== proto[key])) {
	        result.push(key);
	      }
	    }
	  }
	  return result;
	}
	
	module.exports = keysIn;
	
	},{"../internal/arrayEach":9,"../internal/isIndex":23,"../internal/isLength":25,"../lang/isArguments":29,"../lang/isArray":30,"../lang/isFunction":31,"../lang/isObject":33,"../lang/isString":35,"../support":41}],40:[function(_dereq_,module,exports){
	var baseMerge = _dereq_('../internal/baseMerge'),
	    createAssigner = _dereq_('../internal/createAssigner');
	
	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it's invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);
	
	module.exports = merge;
	
	},{"../internal/baseMerge":13,"../internal/createAssigner":17}],41:[function(_dereq_,module,exports){
	/** Used for native method references. */
	var arrayProto = Array.prototype,
	    errorProto = Error.prototype,
	    objectProto = Object.prototype;
	
	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable,
	    splice = arrayProto.splice;
	
	/**
	 * An object environment feature flags.
	 *
	 * @static
	 * @memberOf _
	 * @type Object
	 */
	var support = {};
	
	(function(x) {
	  var Ctor = function() { this.x = x; },
	      object = { '0': x, 'length': x },
	      props = [];
	
	  Ctor.prototype = { 'valueOf': x, 'y': x };
	  for (var key in new Ctor) { props.push(key); }
	
	  /**
	   * Detect if `name` or `message` properties of `Error.prototype` are
	   * enumerable by default (IE < 9, Safari < 5.1).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumErrorProps = propertyIsEnumerable.call(errorProto, 'message') ||
	    propertyIsEnumerable.call(errorProto, 'name');
	
	  /**
	   * Detect if `prototype` properties are enumerable by default.
	   *
	   * Firefox < 3.6, Opera > 9.50 - Opera < 11.60, and Safari < 5.1
	   * (if the prototype or a property on the prototype has been set)
	   * incorrectly set the `[[Enumerable]]` value of a function's `prototype`
	   * property to `true`.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.enumPrototypes = propertyIsEnumerable.call(Ctor, 'prototype');
	
	  /**
	   * Detect if properties shadowing those on `Object.prototype` are non-enumerable.
	   *
	   * In IE < 9 an object's own properties, shadowing non-enumerable ones,
	   * are made non-enumerable as well (a.k.a the JScript `[[DontEnum]]` bug).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.nonEnumShadows = !/valueOf/.test(props);
	
	  /**
	   * Detect if own properties are iterated after inherited properties (IE < 9).
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.ownLast = props[0] != 'x';
	
	  /**
	   * Detect if `Array#shift` and `Array#splice` augment array-like objects
	   * correctly.
	   *
	   * Firefox < 10, compatibility modes of IE 8, and IE < 9 have buggy Array
	   * `shift()` and `splice()` functions that fail to remove the last element,
	   * `value[0]`, of array-like objects even though the "length" property is
	   * set to `0`. The `shift()` method is buggy in compatibility modes of IE 8,
	   * while `splice()` is buggy regardless of mode in IE < 9.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.spliceObjects = (splice.call(object, 0, 1), !object[0]);
	
	  /**
	   * Detect lack of support for accessing string characters by index.
	   *
	   * IE < 8 can't access characters by index. IE 8 can only access characters
	   * by index on string literals, not string objects.
	   *
	   * @memberOf _.support
	   * @type boolean
	   */
	  support.unindexedChars = ('x'[0] + Object('x')[0]) != 'xx';
	}(1, 0));
	
	module.exports = support;
	
	},{}],42:[function(_dereq_,module,exports){
	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}
	
	module.exports = identity;
	
	},{}],43:[function(_dereq_,module,exports){
	'use strict';
	
	var keys = _dereq_('object-keys');
	
	module.exports = function hasSymbols() {
		if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
		if (typeof Symbol.iterator === 'symbol') { return true; }
	
		var obj = {};
		var sym = Symbol('test');
		if (typeof sym === 'string') { return false; }
	
		// temp disabled per https://github.com/ljharb/object.assign/issues/17
		// if (sym instanceof Symbol) { return false; }
		// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
		// if (!(Object(sym) instanceof Symbol)) { return false; }
	
		var symVal = 42;
		obj[sym] = symVal;
		for (sym in obj) { return false; }
		if (keys(obj).length !== 0) { return false; }
		if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }
	
		if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }
	
		var syms = Object.getOwnPropertySymbols(obj);
		if (syms.length !== 1 || syms[0] !== sym) { return false; }
	
		if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }
	
		if (typeof Object.getOwnPropertyDescriptor === 'function') {
			var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
			if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
		}
	
		return true;
	};
	
	},{"object-keys":50}],44:[function(_dereq_,module,exports){
	'use strict';
	
	// modified from https://github.com/es-shims/es6-shim
	var keys = _dereq_('object-keys');
	var bind = _dereq_('function-bind');
	var canBeObject = function (obj) {
		return typeof obj !== 'undefined' && obj !== null;
	};
	var hasSymbols = _dereq_('./hasSymbols')();
	var toObject = Object;
	var push = bind.call(Function.call, Array.prototype.push);
	var propIsEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);
	
	module.exports = function assign(target, source1) {
		if (!canBeObject(target)) { throw new TypeError('target must be an object'); }
		var objTarget = toObject(target);
		var s, source, i, props, syms, value, key;
		for (s = 1; s < arguments.length; ++s) {
			source = toObject(arguments[s]);
			props = keys(source);
			if (hasSymbols && Object.getOwnPropertySymbols) {
				syms = Object.getOwnPropertySymbols(source);
				for (i = 0; i < syms.length; ++i) {
					key = syms[i];
					if (propIsEnumerable(source, key)) {
						push(props, key);
					}
				}
			}
			for (i = 0; i < props.length; ++i) {
				key = props[i];
				value = source[key];
				if (propIsEnumerable(source, key)) {
					objTarget[key] = value;
				}
			}
		}
		return objTarget;
	};
	
	},{"./hasSymbols":43,"function-bind":49,"object-keys":50}],45:[function(_dereq_,module,exports){
	'use strict';
	
	var defineProperties = _dereq_('define-properties');
	
	var implementation = _dereq_('./implementation');
	var getPolyfill = _dereq_('./polyfill');
	var shim = _dereq_('./shim');
	
	defineProperties(implementation, {
		implementation: implementation,
		getPolyfill: getPolyfill,
		shim: shim
	});
	
	module.exports = implementation;
	
	},{"./implementation":44,"./polyfill":52,"./shim":53,"define-properties":46}],46:[function(_dereq_,module,exports){
	'use strict';
	
	var keys = _dereq_('object-keys');
	var foreach = _dereq_('foreach');
	var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';
	
	var toStr = Object.prototype.toString;
	
	var isFunction = function (fn) {
		return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
	};
	
	var arePropertyDescriptorsSupported = function () {
		var obj = {};
		try {
			Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
	        /* eslint-disable no-unused-vars, no-restricted-syntax */
	        for (var _ in obj) { return false; }
	        /* eslint-enable no-unused-vars, no-restricted-syntax */
			return obj.x === obj;
		} catch (e) { /* this is IE 8. */
			return false;
		}
	};
	var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();
	
	var defineProperty = function (object, name, value, predicate) {
		if (name in object && (!isFunction(predicate) || !predicate())) {
			return;
		}
		if (supportsDescriptors) {
			Object.defineProperty(object, name, {
				configurable: true,
				enumerable: false,
				value: value,
				writable: true
			});
		} else {
			object[name] = value;
		}
	};
	
	var defineProperties = function (object, map) {
		var predicates = arguments.length > 2 ? arguments[2] : {};
		var props = keys(map);
		if (hasSymbols) {
			props = props.concat(Object.getOwnPropertySymbols(map));
		}
		foreach(props, function (name) {
			defineProperty(object, name, map[name], predicates[name]);
		});
	};
	
	defineProperties.supportsDescriptors = !!supportsDescriptors;
	
	module.exports = defineProperties;
	
	},{"foreach":47,"object-keys":50}],47:[function(_dereq_,module,exports){
	
	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	
	module.exports = function forEach (obj, fn, ctx) {
	    if (toString.call(fn) !== '[object Function]') {
	        throw new TypeError('iterator must be a function');
	    }
	    var l = obj.length;
	    if (l === +l) {
	        for (var i = 0; i < l; i++) {
	            fn.call(ctx, obj[i], i, obj);
	        }
	    } else {
	        for (var k in obj) {
	            if (hasOwn.call(obj, k)) {
	                fn.call(ctx, obj[k], k, obj);
	            }
	        }
	    }
	};
	
	
	},{}],48:[function(_dereq_,module,exports){
	var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
	var slice = Array.prototype.slice;
	var toStr = Object.prototype.toString;
	var funcType = '[object Function]';
	
	module.exports = function bind(that) {
	    var target = this;
	    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
	        throw new TypeError(ERROR_MESSAGE + target);
	    }
	    var args = slice.call(arguments, 1);
	
	    var bound;
	    var binder = function () {
	        if (this instanceof bound) {
	            var result = target.apply(
	                this,
	                args.concat(slice.call(arguments))
	            );
	            if (Object(result) === result) {
	                return result;
	            }
	            return this;
	        } else {
	            return target.apply(
	                that,
	                args.concat(slice.call(arguments))
	            );
	        }
	    };
	
	    var boundLength = Math.max(0, target.length - args.length);
	    var boundArgs = [];
	    for (var i = 0; i < boundLength; i++) {
	        boundArgs.push('$' + i);
	    }
	
	    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
	
	    if (target.prototype) {
	        var Empty = function Empty() {};
	        Empty.prototype = target.prototype;
	        bound.prototype = new Empty();
	        Empty.prototype = null;
	    }
	
	    return bound;
	};
	
	},{}],49:[function(_dereq_,module,exports){
	var implementation = _dereq_('./implementation');
	
	module.exports = Function.prototype.bind || implementation;
	
	},{"./implementation":48}],50:[function(_dereq_,module,exports){
	'use strict';
	
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var slice = Array.prototype.slice;
	var isArgs = _dereq_('./isArguments');
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};
	
	var keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];
	
		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}
	
		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}
	
		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}
	
		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);
	
			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
	
	keysShim.shim = function shimObjectKeys() {
		if (Object.keys) {
			var keysWorksWithArguments = (function () {
				// Safari 5.0 bug
				return (Object.keys(arguments) || '').length === 2;
			}(1, 2));
			if (!keysWorksWithArguments) {
				var originalKeys = Object.keys;
				Object.keys = function keys(object) {
					if (isArgs(object)) {
						return originalKeys(slice.call(object));
					} else {
						return originalKeys(object);
					}
				};
			}
		} else {
			Object.keys = keysShim;
		}
		return Object.keys || keysShim;
	};
	
	module.exports = keysShim;
	
	},{"./isArguments":51}],51:[function(_dereq_,module,exports){
	'use strict';
	
	var toStr = Object.prototype.toString;
	
	module.exports = function isArguments(value) {
		var str = toStr.call(value);
		var isArgs = str === '[object Arguments]';
		if (!isArgs) {
			isArgs = str !== '[object Array]' &&
				value !== null &&
				typeof value === 'object' &&
				typeof value.length === 'number' &&
				value.length >= 0 &&
				toStr.call(value.callee) === '[object Function]';
		}
		return isArgs;
	};
	
	},{}],52:[function(_dereq_,module,exports){
	'use strict';
	
	var implementation = _dereq_('./implementation');
	
	var lacksProperEnumerationOrder = function () {
		if (!Object.assign) {
			return false;
		}
		// v8, specifically in node 4.x, has a bug with incorrect property enumeration order
		// note: this does not detect the bug unless there's 20 characters
		var str = 'abcdefghijklmnopqrst';
		var letters = str.split('');
		var map = {};
		for (var i = 0; i < letters.length; ++i) {
			map[letters[i]] = letters[i];
		}
		var obj = Object.assign({}, map);
		var actual = '';
		for (var k in obj) {
			actual += k;
		}
		return str !== actual;
	};
	
	var assignHasPendingExceptions = function () {
		if (!Object.assign || !Object.preventExtensions) {
			return false;
		}
		// Firefox 37 still has "pending exception" logic in its Object.assign implementation,
		// which is 72% slower than our shim, and Firefox 40's native implementation.
		var thrower = Object.preventExtensions({ 1: 2 });
		try {
			Object.assign(thrower, 'xy');
		} catch (e) {
			return thrower[1] === 'y';
		}
	};
	
	module.exports = function getPolyfill() {
		if (!Object.assign) {
			return implementation;
		}
		if (lacksProperEnumerationOrder()) {
			return implementation;
		}
		if (assignHasPendingExceptions()) {
			return implementation;
		}
		return Object.assign;
	};
	
	},{"./implementation":44}],53:[function(_dereq_,module,exports){
	'use strict';
	
	var define = _dereq_('define-properties');
	var getPolyfill = _dereq_('./polyfill');
	
	module.exports = function shimAssign() {
		var polyfill = getPolyfill();
		define(
			Object,
			{ assign: polyfill },
			{ assign: function () { return Object.assign !== polyfill; } }
		);
		return polyfill;
	};
	
	},{"./polyfill":52,"define-properties":46}],54:[function(_dereq_,module,exports){
	module.exports = SafeParseTuple
	
	function SafeParseTuple(obj, reviver) {
	    var json
	    var error = null
	
	    try {
	        json = JSON.parse(obj, reviver)
	    } catch (err) {
	        error = err
	    }
	
	    return [error, json]
	}
	
	},{}],55:[function(_dereq_,module,exports){
	function clean (s) {
	  return s.replace(/\n\r?\s*/g, '')
	}
	
	
	module.exports = function tsml (sa) {
	  var s = ''
	    , i = 0
	
	  for (; i < arguments.length; i++)
	    s += clean(sa[i]) + (arguments[i + 1] || '')
	
	  return s
	}
	},{}],56:[function(_dereq_,module,exports){
	"use strict";
	var window = _dereq_("global/window")
	var once = _dereq_("once")
	var isFunction = _dereq_("is-function")
	var parseHeaders = _dereq_("parse-headers")
	var xtend = _dereq_("xtend")
	
	module.exports = createXHR
	createXHR.XMLHttpRequest = window.XMLHttpRequest || noop
	createXHR.XDomainRequest = "withCredentials" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest
	
	forEachArray(["get", "put", "post", "patch", "head", "delete"], function(method) {
	    createXHR[method === "delete" ? "del" : method] = function(uri, options, callback) {
	        options = initParams(uri, options, callback)
	        options.method = method.toUpperCase()
	        return _createXHR(options)
	    }
	})
	
	function forEachArray(array, iterator) {
	    for (var i = 0; i < array.length; i++) {
	        iterator(array[i])
	    }
	}
	
	function isEmpty(obj){
	    for(var i in obj){
	        if(obj.hasOwnProperty(i)) return false
	    }
	    return true
	}
	
	function initParams(uri, options, callback) {
	    var params = uri
	
	    if (isFunction(options)) {
	        callback = options
	        if (typeof uri === "string") {
	            params = {uri:uri}
	        }
	    } else {
	        params = xtend(options, {uri: uri})
	    }
	
	    params.callback = callback
	    return params
	}
	
	function createXHR(uri, options, callback) {
	    options = initParams(uri, options, callback)
	    return _createXHR(options)
	}
	
	function _createXHR(options) {
	    var callback = options.callback
	    if(typeof callback === "undefined"){
	        throw new Error("callback argument missing")
	    }
	    callback = once(callback)
	
	    function readystatechange() {
	        if (xhr.readyState === 4) {
	            loadFunc()
	        }
	    }
	
	    function getBody() {
	        // Chrome with requestType=blob throws errors arround when even testing access to responseText
	        var body = undefined
	
	        if (xhr.response) {
	            body = xhr.response
	        } else if (xhr.responseType === "text" || !xhr.responseType) {
	            body = xhr.responseText || xhr.responseXML
	        }
	
	        if (isJson) {
	            try {
	                body = JSON.parse(body)
	            } catch (e) {}
	        }
	
	        return body
	    }
	
	    var failureResponse = {
	                body: undefined,
	                headers: {},
	                statusCode: 0,
	                method: method,
	                url: uri,
	                rawRequest: xhr
	            }
	
	    function errorFunc(evt) {
	        clearTimeout(timeoutTimer)
	        if(!(evt instanceof Error)){
	            evt = new Error("" + (evt || "Unknown XMLHttpRequest Error") )
	        }
	        evt.statusCode = 0
	        callback(evt, failureResponse)
	    }
	
	    // will load the data & process the response in a special response object
	    function loadFunc() {
	        if (aborted) return
	        var status
	        clearTimeout(timeoutTimer)
	        if(options.useXDR && xhr.status===undefined) {
	            //IE8 CORS GET successful response doesn't have a status field, but body is fine
	            status = 200
	        } else {
	            status = (xhr.status === 1223 ? 204 : xhr.status)
	        }
	        var response = failureResponse
	        var err = null
	
	        if (status !== 0){
	            response = {
	                body: getBody(),
	                statusCode: status,
	                method: method,
	                headers: {},
	                url: uri,
	                rawRequest: xhr
	            }
	            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE
	                response.headers = parseHeaders(xhr.getAllResponseHeaders())
	            }
	        } else {
	            err = new Error("Internal XMLHttpRequest Error")
	        }
	        callback(err, response, response.body)
	
	    }
	
	    var xhr = options.xhr || null
	
	    if (!xhr) {
	        if (options.cors || options.useXDR) {
	            xhr = new createXHR.XDomainRequest()
	        }else{
	            xhr = new createXHR.XMLHttpRequest()
	        }
	    }
	
	    var key
	    var aborted
	    var uri = xhr.url = options.uri || options.url
	    var method = xhr.method = options.method || "GET"
	    var body = options.body || options.data || null
	    var headers = xhr.headers = options.headers || {}
	    var sync = !!options.sync
	    var isJson = false
	    var timeoutTimer
	
	    if ("json" in options) {
	        isJson = true
	        headers["accept"] || headers["Accept"] || (headers["Accept"] = "application/json") //Don't override existing accept header declared by user
	        if (method !== "GET" && method !== "HEAD") {
	            headers["content-type"] || headers["Content-Type"] || (headers["Content-Type"] = "application/json") //Don't override existing accept header declared by user
	            body = JSON.stringify(options.json)
	        }
	    }
	
	    xhr.onreadystatechange = readystatechange
	    xhr.onload = loadFunc
	    xhr.onerror = errorFunc
	    // IE9 must have onprogress be set to a unique function.
	    xhr.onprogress = function () {
	        // IE must die
	    }
	    xhr.ontimeout = errorFunc
	    xhr.open(method, uri, !sync, options.username, options.password)
	    //has to be after open
	    if(!sync) {
	        xhr.withCredentials = !!options.withCredentials
	    }
	    // Cannot set timeout with sync request
	    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly
	    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent
	    if (!sync && options.timeout > 0 ) {
	        timeoutTimer = setTimeout(function(){
	            aborted=true//IE9 may still call readystatechange
	            xhr.abort("timeout")
	            var e = new Error("XMLHttpRequest timeout")
	            e.code = "ETIMEDOUT"
	            errorFunc(e)
	        }, options.timeout )
	    }
	
	    if (xhr.setRequestHeader) {
	        for(key in headers){
	            if(headers.hasOwnProperty(key)){
	                xhr.setRequestHeader(key, headers[key])
	            }
	        }
	    } else if (options.headers && !isEmpty(options.headers)) {
	        throw new Error("Headers cannot be set on an XDomainRequest object")
	    }
	
	    if ("responseType" in options) {
	        xhr.responseType = options.responseType
	    }
	
	    if ("beforeSend" in options &&
	        typeof options.beforeSend === "function"
	    ) {
	        options.beforeSend(xhr)
	    }
	
	    xhr.send(body)
	
	    return xhr
	
	
	}
	
	function noop() {}
	
	},{"global/window":2,"is-function":57,"once":58,"parse-headers":61,"xtend":62}],57:[function(_dereq_,module,exports){
	module.exports = isFunction
	
	var toString = Object.prototype.toString
	
	function isFunction (fn) {
	  var string = toString.call(fn)
	  return string === '[object Function]' ||
	    (typeof fn === 'function' && string !== '[object RegExp]') ||
	    (typeof window !== 'undefined' &&
	     // IE8 and below
	     (fn === window.setTimeout ||
	      fn === window.alert ||
	      fn === window.confirm ||
	      fn === window.prompt))
	};
	
	},{}],58:[function(_dereq_,module,exports){
	module.exports = once
	
	once.proto = once(function () {
	  Object.defineProperty(Function.prototype, 'once', {
	    value: function () {
	      return once(this)
	    },
	    configurable: true
	  })
	})
	
	function once (fn) {
	  var called = false
	  return function () {
	    if (called) return
	    called = true
	    return fn.apply(this, arguments)
	  }
	}
	
	},{}],59:[function(_dereq_,module,exports){
	var isFunction = _dereq_('is-function')
	
	module.exports = forEach
	
	var toString = Object.prototype.toString
	var hasOwnProperty = Object.prototype.hasOwnProperty
	
	function forEach(list, iterator, context) {
	    if (!isFunction(iterator)) {
	        throw new TypeError('iterator must be a function')
	    }
	
	    if (arguments.length < 3) {
	        context = this
	    }
	    
	    if (toString.call(list) === '[object Array]')
	        forEachArray(list, iterator, context)
	    else if (typeof list === 'string')
	        forEachString(list, iterator, context)
	    else
	        forEachObject(list, iterator, context)
	}
	
	function forEachArray(array, iterator, context) {
	    for (var i = 0, len = array.length; i < len; i++) {
	        if (hasOwnProperty.call(array, i)) {
	            iterator.call(context, array[i], i, array)
	        }
	    }
	}
	
	function forEachString(string, iterator, context) {
	    for (var i = 0, len = string.length; i < len; i++) {
	        // no such thing as a sparse string.
	        iterator.call(context, string.charAt(i), i, string)
	    }
	}
	
	function forEachObject(object, iterator, context) {
	    for (var k in object) {
	        if (hasOwnProperty.call(object, k)) {
	            iterator.call(context, object[k], k, object)
	        }
	    }
	}
	
	},{"is-function":57}],60:[function(_dereq_,module,exports){
	
	exports = module.exports = trim;
	
	function trim(str){
	  return str.replace(/^\s*|\s*$/g, '');
	}
	
	exports.left = function(str){
	  return str.replace(/^\s*/, '');
	};
	
	exports.right = function(str){
	  return str.replace(/\s*$/, '');
	};
	
	},{}],61:[function(_dereq_,module,exports){
	var trim = _dereq_('trim')
	  , forEach = _dereq_('for-each')
	  , isArray = function(arg) {
	      return Object.prototype.toString.call(arg) === '[object Array]';
	    }
	
	module.exports = function (headers) {
	  if (!headers)
	    return {}
	
	  var result = {}
	
	  forEach(
	      trim(headers).split('\n')
	    , function (row) {
	        var index = row.indexOf(':')
	          , key = trim(row.slice(0, index)).toLowerCase()
	          , value = trim(row.slice(index + 1))
	
	        if (typeof(result[key]) === 'undefined') {
	          result[key] = value
	        } else if (isArray(result[key])) {
	          result[key].push(value)
	        } else {
	          result[key] = [ result[key], value ]
	        }
	      }
	  )
	
	  return result
	}
	},{"for-each":59,"trim":60}],62:[function(_dereq_,module,exports){
	module.exports = extend
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	function extend() {
	    var target = {}
	
	    for (var i = 0; i < arguments.length; i++) {
	        var source = arguments[i]
	
	        for (var key in source) {
	            if (hasOwnProperty.call(source, key)) {
	                target[key] = source[key]
	            }
	        }
	    }
	
	    return target
	}
	
	},{}],63:[function(_dereq_,module,exports){
	/**
	 * @file big-play-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _buttonJs = _dereq_('./button.js');
	
	var _buttonJs2 = _interopRequireDefault(_buttonJs);
	
	var _componentJs = _dereq_('./component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Initial play button. Shows before the video has played. The hiding of the
	 * big play button is done via CSS and player states.
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Button
	 * @class BigPlayButton
	 */
	
	var BigPlayButton = (function (_Button) {
	  _inherits(BigPlayButton, _Button);
	
	  function BigPlayButton(player, options) {
	    _classCallCheck(this, BigPlayButton);
	
	    _Button.call(this, player, options);
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  BigPlayButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-big-play-button';
	  };
	
	  /**
	   * Handles click for play
	   *
	   * @method handleClick
	   */
	
	  BigPlayButton.prototype.handleClick = function handleClick() {
	    this.player_.play();
	  };
	
	  return BigPlayButton;
	})(_buttonJs2['default']);
	
	BigPlayButton.prototype.controlText_ = 'Play Video';
	
	_componentJs2['default'].registerComponent('BigPlayButton', BigPlayButton);
	exports['default'] = BigPlayButton;
	module.exports = exports['default'];
	
	},{"./button.js":64,"./component.js":67}],64:[function(_dereq_,module,exports){
	/**
	 * @file button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _clickableComponentJs = _dereq_('./clickable-component.js');
	
	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsLogJs = _dereq_('./utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/**
	 * Base class for all buttons
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends ClickableComponent
	 * @class Button
	 */
	
	var Button = (function (_ClickableComponent) {
	  _inherits(Button, _ClickableComponent);
	
	  function Button(player, options) {
	    _classCallCheck(this, Button);
	
	    _ClickableComponent.call(this, player, options);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Element's node type. e.g. 'div'
	   * @param {Object=} props An object of properties that should be set on the element
	   * @param {Object=} attributes An object of attributes that should be set on the element
	   * @return {Element}
	   * @method createEl
	   */
	
	  Button.prototype.createEl = function createEl() {
	    var tag = arguments.length <= 0 || arguments[0] === undefined ? 'button' : arguments[0];
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    props = _objectAssign2['default']({
	      className: this.buildCSSClass()
	    }, props);
	
	    if (tag !== 'button') {
	      _utilsLogJs2['default'].warn('Creating a Button with an HTML element of ' + tag + ' is deprecated; use ClickableComponent instead.');
	
	      // Add properties for clickable element which is not a native HTML button
	      props = _objectAssign2['default']({
	        tabIndex: 0
	      }, props);
	
	      // Add ARIA attributes for clickable element which is not a native HTML button
	      attributes = _objectAssign2['default']({
	        role: 'button'
	      }, attributes);
	    }
	
	    // Add attributes for button element
	    attributes = _objectAssign2['default']({
	      type: 'button', // Necessary since the default button type is "submit"
	      'aria-live': 'polite' // let the screen reader user know that the text of the button may change
	    }, attributes);
	
	    var el = _component2['default'].prototype.createEl.call(this, tag, props, attributes);
	
	    this.createControlTextEl(el);
	
	    return el;
	  };
	
	  /**
	   * Adds a child component inside this button
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @return {Component} The child component (created by this process if a string was used)
	   * @deprecated
	   * @method addChild
	   */
	
	  Button.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var className = this.constructor.name;
	    _utilsLogJs2['default'].warn('Adding an actionable (user controllable) child to a Button (' + className + ') is not supported; use a ClickableComponent instead.');
	
	    // Avoid the error message generated by ClickableComponent's addChild method
	    return _component2['default'].prototype.addChild.call(this, child, options);
	  };
	
	  /**
	   * Handle KeyPress (document level) - Extend with specific functionality for button
	   *
	   * @method handleKeyPress
	   */
	
	  Button.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Ignore Space (32) or Enter (13) key operation, which is handled by the browser for a button.
	    if (event.which === 32 || event.which === 13) {} else {
	      _ClickableComponent.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
	    }
	  };
	
	  return Button;
	})(_clickableComponentJs2['default']);
	
	_component2['default'].registerComponent('Button', Button);
	exports['default'] = Button;
	module.exports = exports['default'];
	
	},{"./clickable-component.js":65,"./component":67,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],65:[function(_dereq_,module,exports){
	/**
	 * @file button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsDomJs = _dereq_('./utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsLogJs = _dereq_('./utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/**
	 * Clickable Component which is clickable or keyboard actionable, but is not a native HTML button
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Component
	 * @class ClickableComponent
	 */
	
	var ClickableComponent = (function (_Component) {
	  _inherits(ClickableComponent, _Component);
	
	  function ClickableComponent(player, options) {
	    _classCallCheck(this, ClickableComponent);
	
	    _Component.call(this, player, options);
	
	    this.emitTapEvents();
	
	    this.on('tap', this.handleClick);
	    this.on('click', this.handleClick);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Element's node type. e.g. 'div'
	   * @param {Object=} props An object of properties that should be set on the element
	   * @param {Object=} attributes An object of attributes that should be set on the element
	   * @return {Element}
	   * @method createEl
	   */
	
	  ClickableComponent.prototype.createEl = function createEl() {
	    var tag = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    props = _objectAssign2['default']({
	      className: this.buildCSSClass(),
	      tabIndex: 0
	    }, props);
	
	    if (tag === 'button') {
	      _utilsLogJs2['default'].error('Creating a ClickableComponent with an HTML element of ' + tag + ' is not supported; use a Button instead.');
	    }
	
	    // Add ARIA attributes for clickable element which is not a native HTML button
	    attributes = _objectAssign2['default']({
	      role: 'button',
	      'aria-live': 'polite' // let the screen reader user know that the text of the element may change
	    }, attributes);
	
	    var el = _Component.prototype.createEl.call(this, tag, props, attributes);
	
	    this.createControlTextEl(el);
	
	    return el;
	  };
	
	  /**
	   * create control text
	   *
	   * @param {Element} el Parent element for the control text
	   * @return {Element}
	   * @method controlText
	   */
	
	  ClickableComponent.prototype.createControlTextEl = function createControlTextEl(el) {
	    this.controlTextEl_ = Dom.createEl('span', {
	      className: 'vjs-control-text'
	    });
	
	    if (el) {
	      el.appendChild(this.controlTextEl_);
	    }
	
	    this.controlText(this.controlText_, el);
	
	    return this.controlTextEl_;
	  };
	
	  /**
	   * Controls text - both request and localize
	   *
	   * @param {String}  text Text for element
	   * @param {Element=} el Element to set the title on
	   * @return {String}
	   * @method controlText
	   */
	
	  ClickableComponent.prototype.controlText = function controlText(text) {
	    var el = arguments.length <= 1 || arguments[1] === undefined ? this.el() : arguments[1];
	
	    if (!text) return this.controlText_ || 'Need Text';
	
	    var localizedText = this.localize(text);
	
	    this.controlText_ = text;
	    this.controlTextEl_.innerHTML = localizedText;
	    el.setAttribute('title', localizedText);
	
	    return this;
	  };
	
	  /**
	   * Allows sub components to stack CSS class names
	   *
	   * @return {String}
	   * @method buildCSSClass
	   */
	
	  ClickableComponent.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-control vjs-button ' + _Component.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Adds a child component inside this clickable-component
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @return {Component} The child component (created by this process if a string was used)
	   * @method addChild
	   */
	
	  ClickableComponent.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    // TODO: Fix adding an actionable child to a ClickableComponent; currently
	    // it will cause issues with assistive technology (e.g. screen readers)
	    // which support ARIA, since an element with role="button" cannot have
	    // actionable child elements.
	
	    //let className = this.constructor.name;
	    //log.warn(`Adding a child to a ClickableComponent (${className}) can cause issues with assistive technology which supports ARIA, since an element with role="button" cannot have actionable child elements.`);
	
	    return _Component.prototype.addChild.call(this, child, options);
	  };
	
	  /**
	   * Enable the component element
	   *
	   * @return {Component}
	   * @method enable
	   */
	
	  ClickableComponent.prototype.enable = function enable() {
	    this.removeClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'false');
	    return this;
	  };
	
	  /**
	   * Disable the component element
	   *
	   * @return {Component}
	   * @method disable
	   */
	
	  ClickableComponent.prototype.disable = function disable() {
	    this.addClass('vjs-disabled');
	    this.el_.setAttribute('aria-disabled', 'true');
	    return this;
	  };
	
	  /**
	   * Handle Click - Override with specific functionality for component
	   *
	   * @method handleClick
	   */
	
	  ClickableComponent.prototype.handleClick = function handleClick() {};
	
	  /**
	   * Handle Focus - Add keyboard functionality to element
	   *
	   * @method handleFocus
	   */
	
	  ClickableComponent.prototype.handleFocus = function handleFocus() {
	    Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };
	
	  /**
	   * Handle KeyPress (document level) - Trigger click when Space or Enter key is pressed
	   *
	   * @method handleKeyPress
	   */
	
	  ClickableComponent.prototype.handleKeyPress = function handleKeyPress(event) {
	    // Support Space (32) or Enter (13) key operation to fire a click event
	    if (event.which === 32 || event.which === 13) {
	      event.preventDefault();
	      this.handleClick(event);
	    } else if (_Component.prototype.handleKeyPress) {
	      _Component.prototype.handleKeyPress.call(this, event); // Pass keypress handling up for unsupported keys
	    }
	  };
	
	  /**
	   * Handle Blur - Remove keyboard triggers
	   *
	   * @method handleBlur
	   */
	
	  ClickableComponent.prototype.handleBlur = function handleBlur() {
	    Events.off(_globalDocument2['default'], 'keydown', Fn.bind(this, this.handleKeyPress));
	  };
	
	  return ClickableComponent;
	})(_component2['default']);
	
	_component2['default'].registerComponent('ClickableComponent', ClickableComponent);
	exports['default'] = ClickableComponent;
	module.exports = exports['default'];
	
	},{"./component":67,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/log.js":147,"global/document":1,"object.assign":45}],66:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _button = _dereq_('./button');
	
	var _button2 = _interopRequireDefault(_button);
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	/**
	 * The `CloseButton` component is a button which fires a "close" event
	 * when it is activated.
	 *
	 * @extends Button
	 * @class CloseButton
	 */
	
	var CloseButton = (function (_Button) {
	  _inherits(CloseButton, _Button);
	
	  function CloseButton(player, options) {
	    _classCallCheck(this, CloseButton);
	
	    _Button.call(this, player, options);
	    this.controlText(options && options.controlText || this.localize('Close'));
	  }
	
	  CloseButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-close-button ' + _Button.prototype.buildCSSClass.call(this);
	  };
	
	  CloseButton.prototype.handleClick = function handleClick() {
	    this.trigger({ type: 'close', bubbles: false });
	  };
	
	  return CloseButton;
	})(_button2['default']);
	
	_component2['default'].registerComponent('CloseButton', CloseButton);
	exports['default'] = CloseButton;
	module.exports = exports['default'];
	
	},{"./button":64,"./component":67}],67:[function(_dereq_,module,exports){
	/**
	 * @file component.js
	 *
	 * Player Component - Base class for all UI objects
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _utilsDomJs = _dereq_('./utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsGuidJs = _dereq_('./utils/guid.js');
	
	var Guid = _interopRequireWildcard(_utilsGuidJs);
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _utilsLogJs = _dereq_('./utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');
	
	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);
	
	/**
	 * Base UI Component class
	 * Components are embeddable UI objects that are represented by both a
	 * javascript object and an element in the DOM. They can be children of other
	 * components, and can have many children themselves.
	 * ```js
	 *     // adding a button to the player
	 *     var button = player.addChild('button');
	 *     button.el(); // -> button element
	 * ```
	 * ```html
	 *     <div class="video-js">
	 *       <div class="vjs-button">Button</div>
	 *     </div>
	 * ```
	 * Components are also event targets.
	 * ```js
	 *     button.on('click', function(){
	 *       console.log('Button Clicked!');
	 *     });
	 *     button.trigger('customevent');
	 * ```
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @class Component
	 */
	
	var Component = (function () {
	  function Component(player, options, ready) {
	    _classCallCheck(this, Component);
	
	    // The component might be the player itself and we can't pass `this` to super
	    if (!player && this.play) {
	      this.player_ = player = this; // eslint-disable-line
	    } else {
	        this.player_ = player;
	      }
	
	    // Make a copy of prototype.options_ to protect against overriding defaults
	    this.options_ = _utilsMergeOptionsJs2['default']({}, this.options_);
	
	    // Updated options with supplied options
	    options = this.options_ = _utilsMergeOptionsJs2['default'](this.options_, options);
	
	    // Get ID from options or options element if one is supplied
	    this.id_ = options.id || options.el && options.el.id;
	
	    // If there was no ID from the options, generate one
	    if (!this.id_) {
	      // Don't require the player ID function in the case of mock players
	      var id = player && player.id && player.id() || 'no_player';
	
	      this.id_ = id + '_component_' + Guid.newGUID();
	    }
	
	    this.name_ = options.name || null;
	
	    // Create element if one wasn't provided in options
	    if (options.el) {
	      this.el_ = options.el;
	    } else if (options.createEl !== false) {
	      this.el_ = this.createEl();
	    }
	
	    this.children_ = [];
	    this.childIndex_ = {};
	    this.childNameIndex_ = {};
	
	    // Add any child components in options
	    if (options.initChildren !== false) {
	      this.initChildren();
	    }
	
	    this.ready(ready);
	    // Don't want to trigger ready here or it will before init is actually
	    // finished for all children that run this constructor
	
	    if (options.reportTouchActivity !== false) {
	      this.enableTouchActivity();
	    }
	  }
	
	  /**
	   * Dispose of the component and all child components
	   *
	   * @method dispose
	   */
	
	  Component.prototype.dispose = function dispose() {
	    this.trigger({ type: 'dispose', bubbles: false });
	
	    // Dispose all children.
	    if (this.children_) {
	      for (var i = this.children_.length - 1; i >= 0; i--) {
	        if (this.children_[i].dispose) {
	          this.children_[i].dispose();
	        }
	      }
	    }
	
	    // Delete child references
	    this.children_ = null;
	    this.childIndex_ = null;
	    this.childNameIndex_ = null;
	
	    // Remove all event listeners.
	    this.off();
	
	    // Remove element from DOM
	    if (this.el_.parentNode) {
	      this.el_.parentNode.removeChild(this.el_);
	    }
	
	    Dom.removeElData(this.el_);
	    this.el_ = null;
	  };
	
	  /**
	   * Return the component's player
	   *
	   * @return {Player}
	   * @method player
	   */
	
	  Component.prototype.player = function player() {
	    return this.player_;
	  };
	
	  /**
	   * Deep merge of options objects
	   * Whenever a property is an object on both options objects
	   * the two properties will be merged using mergeOptions.
	   *
	   * ```js
	   *     Parent.prototype.options_ = {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'bar', 'asdf': 'fdsa' },
	   *         'childTwo': {},
	   *         'childThree': {}
	   *       }
	   *     }
	   *     newOptions = {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'baz', 'abc': '123' }
	   *         'childTwo': null,
	   *         'childFour': {}
	   *       }
	   *     }
	   *
	   *     this.options(newOptions);
	   * ```
	   * RESULT
	   * ```js
	   *     {
	   *       optionSet: {
	   *         'childOne': { 'foo': 'baz', 'asdf': 'fdsa', 'abc': '123' },
	   *         'childTwo': null, // Disabled. Won't be initialized.
	   *         'childThree': {},
	   *         'childFour': {}
	   *       }
	   *     }
	   * ```
	   *
	   * @param  {Object} obj Object of new option values
	   * @return {Object}     A NEW object of this.options_ and obj merged
	   * @method options
	   */
	
	  Component.prototype.options = function options(obj) {
	    _utilsLogJs2['default'].warn('this.options() has been deprecated and will be moved to the constructor in 6.0');
	
	    if (!obj) {
	      return this.options_;
	    }
	
	    this.options_ = _utilsMergeOptionsJs2['default'](this.options_, obj);
	    return this.options_;
	  };
	
	  /**
	   * Get the component's DOM element
	   * ```js
	   *     var domEl = myComponent.el();
	   * ```
	   *
	   * @return {Element}
	   * @method el
	   */
	
	  Component.prototype.el = function el() {
	    return this.el_;
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @param  {String=} tagName  Element's node type. e.g. 'div'
	   * @param  {Object=} properties An object of properties that should be set
	   * @param  {Object=} attributes An object of attributes that should be set
	   * @return {Element}
	   * @method createEl
	   */
	
	  Component.prototype.createEl = function createEl(tagName, properties, attributes) {
	    return Dom.createEl(tagName, properties, attributes);
	  };
	
	  Component.prototype.localize = function localize(string) {
	    var code = this.player_.language && this.player_.language();
	    var languages = this.player_.languages && this.player_.languages();
	
	    if (!code || !languages) {
	      return string;
	    }
	
	    var language = languages[code];
	
	    if (language && language[string]) {
	      return language[string];
	    }
	
	    var primaryCode = code.split('-')[0];
	    var primaryLang = languages[primaryCode];
	
	    if (primaryLang && primaryLang[string]) {
	      return primaryLang[string];
	    }
	
	    return string;
	  };
	
	  /**
	   * Return the component's DOM element where children are inserted.
	   * Will either be the same as el() or a new element defined in createEl().
	   *
	   * @return {Element}
	   * @method contentEl
	   */
	
	  Component.prototype.contentEl = function contentEl() {
	    return this.contentEl_ || this.el_;
	  };
	
	  /**
	   * Get the component's ID
	   * ```js
	   *     var id = myComponent.id();
	   * ```
	   *
	   * @return {String}
	   * @method id
	   */
	
	  Component.prototype.id = function id() {
	    return this.id_;
	  };
	
	  /**
	   * Get the component's name. The name is often used to reference the component.
	   * ```js
	   *     var name = myComponent.name();
	   * ```
	   *
	   * @return {String}
	   * @method name
	   */
	
	  Component.prototype.name = function name() {
	    return this.name_;
	  };
	
	  /**
	   * Get an array of all child components
	   * ```js
	   *     var kids = myComponent.children();
	   * ```
	   *
	   * @return {Array} The children
	   * @method children
	   */
	
	  Component.prototype.children = function children() {
	    return this.children_;
	  };
	
	  /**
	   * Returns a child component with the provided ID
	   *
	   * @return {Component}
	   * @method getChildById
	   */
	
	  Component.prototype.getChildById = function getChildById(id) {
	    return this.childIndex_[id];
	  };
	
	  /**
	   * Returns a child component with the provided name
	   *
	   * @return {Component}
	   * @method getChild
	   */
	
	  Component.prototype.getChild = function getChild(name) {
	    return this.childNameIndex_[name];
	  };
	
	  /**
	   * Adds a child component inside this component
	   * ```js
	   *     myComponent.el();
	   *     // -> <div class='my-component'></div>
	   *     myComponent.children();
	   *     // [empty array]
	   *
	   *     var myButton = myComponent.addChild('MyButton');
	   *     // -> <div class='my-component'><div class="my-button">myButton<div></div>
	   *     // -> myButton === myComponent.children()[0];
	   * ```
	   * Pass in options for child constructors and options for children of the child
	   * ```js
	   *     var myButton = myComponent.addChild('MyButton', {
	   *       text: 'Press Me',
	   *       buttonChildExample: {
	   *         buttonChildOption: true
	   *       }
	   *     });
	   * ```
	   *
	   * @param {String|Component} child The class name or instance of a child to add
	   * @param {Object=} options Options, including options to be passed to children of the child.
	   * @param {Number} index into our children array to attempt to add the child
	   * @return {Component} The child component (created by this process if a string was used)
	   * @method addChild
	   */
	
	  Component.prototype.addChild = function addChild(child) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var index = arguments.length <= 2 || arguments[2] === undefined ? this.children_.length : arguments[2];
	
	    var component = undefined;
	    var componentName = undefined;
	
	    // If child is a string, create nt with options
	    if (typeof child === 'string') {
	      componentName = child;
	
	      // Options can also be specified as a boolean, so convert to an empty object if false.
	      if (!options) {
	        options = {};
	      }
	
	      // Same as above, but true is deprecated so show a warning.
	      if (options === true) {
	        _utilsLogJs2['default'].warn('Initializing a child component with `true` is deprecated. Children should be defined in an array when possible, but if necessary use an object instead of `true`.');
	        options = {};
	      }
	
	      // If no componentClass in options, assume componentClass is the name lowercased
	      // (e.g. playButton)
	      var componentClassName = options.componentClass || _utilsToTitleCaseJs2['default'](componentName);
	
	      // Set name through options
	      options.name = componentName;
	
	      // Create a new object & element for this controls set
	      // If there's no .player_, this is a player
	      var ComponentClass = Component.getComponent(componentClassName);
	
	      if (!ComponentClass) {
	        throw new Error('Component ' + componentClassName + ' does not exist');
	      }
	
	      // data stored directly on the videojs object may be
	      // misidentified as a component to retain
	      // backwards-compatibility with 4.x. check to make sure the
	      // component class can be instantiated.
	      if (typeof ComponentClass !== 'function') {
	        return null;
	      }
	
	      component = new ComponentClass(this.player_ || this, options);
	
	      // child is a component instance
	    } else {
	        component = child;
	      }
	
	    this.children_.splice(index, 0, component);
	
	    if (typeof component.id === 'function') {
	      this.childIndex_[component.id()] = component;
	    }
	
	    // If a name wasn't used to create the component, check if we can use the
	    // name function of the component
	    componentName = componentName || component.name && component.name();
	
	    if (componentName) {
	      this.childNameIndex_[componentName] = component;
	    }
	
	    // Add the UI object's element to the container div (box)
	    // Having an element is not required
	    if (typeof component.el === 'function' && component.el()) {
	      var childNodes = this.contentEl().children;
	      var refNode = childNodes[index] || null;
	      this.contentEl().insertBefore(component.el(), refNode);
	    }
	
	    // Return so it can stored on parent object if desired.
	    return component;
	  };
	
	  /**
	   * Remove a child component from this component's list of children, and the
	   * child component's element from this component's element
	   *
	   * @param  {Component} component Component to remove
	   * @method removeChild
	   */
	
	  Component.prototype.removeChild = function removeChild(component) {
	    if (typeof component === 'string') {
	      component = this.getChild(component);
	    }
	
	    if (!component || !this.children_) {
	      return;
	    }
	
	    var childFound = false;
	
	    for (var i = this.children_.length - 1; i >= 0; i--) {
	      if (this.children_[i] === component) {
	        childFound = true;
	        this.children_.splice(i, 1);
	        break;
	      }
	    }
	
	    if (!childFound) {
	      return;
	    }
	
	    this.childIndex_[component.id()] = null;
	    this.childNameIndex_[component.name()] = null;
	
	    var compEl = component.el();
	
	    if (compEl && compEl.parentNode === this.contentEl()) {
	      this.contentEl().removeChild(component.el());
	    }
	  };
	
	  /**
	   * Add and initialize default child components from options
	   * ```js
	   *     // when an instance of MyComponent is created, all children in options
	   *     // will be added to the instance by their name strings and options
	   *     MyComponent.prototype.options_ = {
	   *       children: [
	   *         'myChildComponent'
	   *       ],
	   *       myChildComponent: {
	   *         myChildOption: true
	   *       }
	   *     };
	   *
	   *     // Or when creating the component
	   *     var myComp = new MyComponent(player, {
	   *       children: [
	   *         'myChildComponent'
	   *       ],
	   *       myChildComponent: {
	   *         myChildOption: true
	   *       }
	   *     });
	   * ```
	   * The children option can also be an array of
	   * child options objects (that also include a 'name' key).
	   * This can be used if you have two child components of the
	   * same type that need different options.
	   * ```js
	   *     var myComp = new MyComponent(player, {
	   *       children: [
	   *         'button',
	   *         {
	   *           name: 'button',
	   *           someOtherOption: true
	   *         },
	   *         {
	   *           name: 'button',
	   *           someOtherOption: false
	   *         }
	   *       ]
	   *     });
	   * ```
	   *
	   * @method initChildren
	   */
	
	  Component.prototype.initChildren = function initChildren() {
	    var _this = this;
	
	    var children = this.options_.children;
	
	    if (children) {
	      (function () {
	        // `this` is `parent`
	        var parentOptions = _this.options_;
	
	        var handleAdd = function handleAdd(child) {
	          var name = child.name;
	          var opts = child.opts;
	
	          // Allow options for children to be set at the parent options
	          // e.g. videojs(id, { controlBar: false });
	          // instead of videojs(id, { children: { controlBar: false });
	          if (parentOptions[name] !== undefined) {
	            opts = parentOptions[name];
	          }
	
	          // Allow for disabling default components
	          // e.g. options['children']['posterImage'] = false
	          if (opts === false) {
	            return;
	          }
	
	          // Allow options to be passed as a simple boolean if no configuration
	          // is necessary.
	          if (opts === true) {
	            opts = {};
	          }
	
	          // We also want to pass the original player options to each component as well so they don't need to
	          // reach back into the player for options later.
	          opts.playerOptions = _this.options_.playerOptions;
	
	          // Create and add the child component.
	          // Add a direct reference to the child by name on the parent instance.
	          // If two of the same component are used, different names should be supplied
	          // for each
	          var newChild = _this.addChild(name, opts);
	          if (newChild) {
	            _this[name] = newChild;
	          }
	        };
	
	        // Allow for an array of children details to passed in the options
	        var workingChildren = undefined;
	        var Tech = Component.getComponent('Tech');
	
	        if (Array.isArray(children)) {
	          workingChildren = children;
	        } else {
	          workingChildren = Object.keys(children);
	        }
	
	        workingChildren
	        // children that are in this.options_ but also in workingChildren  would
	        // give us extra children we do not want. So, we want to filter them out.
	        .concat(Object.keys(_this.options_).filter(function (child) {
	          return !workingChildren.some(function (wchild) {
	            if (typeof wchild === 'string') {
	              return child === wchild;
	            } else {
	              return child === wchild.name;
	            }
	          });
	        })).map(function (child) {
	          var name = undefined,
	              opts = undefined;
	
	          if (typeof child === 'string') {
	            name = child;
	            opts = children[name] || _this.options_[name] || {};
	          } else {
	            name = child.name;
	            opts = child;
	          }
	
	          return { name: name, opts: opts };
	        }).filter(function (child) {
	          // we have to make sure that child.name isn't in the techOrder since
	          // techs are registerd as Components but can't aren't compatible
	          // See https://github.com/videojs/video.js/issues/2772
	          var c = Component.getComponent(child.opts.componentClass || _utilsToTitleCaseJs2['default'](child.name));
	          return c && !Tech.isTech(c);
	        }).forEach(handleAdd);
	      })();
	    }
	  };
	
	  /**
	   * Allows sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  Component.prototype.buildCSSClass = function buildCSSClass() {
	    // Child classes can include a function that does:
	    // return 'CLASS NAME' + this._super();
	    return '';
	  };
	
	  /**
	   * Add an event listener to this component's element
	   * ```js
	   *     var myFunc = function(){
	   *       var myComponent = this;
	   *       // Do something when the event is fired
	   *     };
	   *
	   *     myComponent.on('eventType', myFunc);
	   * ```
	   * The context of myFunc will be myComponent unless previously bound.
	   * Alternatively, you can add a listener to another element or component.
	   * ```js
	   *     myComponent.on(otherElement, 'eventName', myFunc);
	   *     myComponent.on(otherComponent, 'eventName', myFunc);
	   * ```
	   * The benefit of using this over `VjsEvents.on(otherElement, 'eventName', myFunc)`
	   * and `otherComponent.on('eventName', myFunc)` is that this way the listeners
	   * will be automatically cleaned up when either component is disposed.
	   * It will also bind myComponent as the context of myFunc.
	   * **NOTE**: When using this on elements in the page other than window
	   * and document (both permanent), if you remove the element from the DOM
	   * you need to call `myComponent.trigger(el, 'dispose')` on it to clean up
	   * references to it and allow the browser to garbage collect it.
	   *
	   * @param  {String|Component} first   The event type or other component
	   * @param  {Function|String}      second  The event handler or event type
	   * @param  {Function}             third   The event handler
	   * @return {Component}
	   * @method on
	   */
	
	  Component.prototype.on = function on(first, second, third) {
	    var _this2 = this;
	
	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.on(this.el_, first, Fn.bind(this, second));
	
	      // Targeting another component or element
	    } else {
	        (function () {
	          var target = first;
	          var type = second;
	          var fn = Fn.bind(_this2, third);
	
	          // When this component is disposed, remove the listener from the other component
	          var removeOnDispose = function removeOnDispose() {
	            return _this2.off(target, type, fn);
	          };
	
	          // Use the same function ID so we can remove it later it using the ID
	          // of the original listener
	          removeOnDispose.guid = fn.guid;
	          _this2.on('dispose', removeOnDispose);
	
	          // If the other component is disposed first we need to clean the reference
	          // to the other component in this component's removeOnDispose listener
	          // Otherwise we create a memory leak.
	          var cleanRemover = function cleanRemover() {
	            return _this2.off('dispose', removeOnDispose);
	          };
	
	          // Add the same function ID so we can easily remove it later
	          cleanRemover.guid = fn.guid;
	
	          // Check if this is a DOM node
	          if (first.nodeName) {
	            // Add the listener to the other element
	            Events.on(target, type, fn);
	            Events.on(target, 'dispose', cleanRemover);
	
	            // Should be a component
	            // Not using `instanceof Component` because it makes mock players difficult
	          } else if (typeof first.on === 'function') {
	              // Add the listener to the other component
	              target.on(type, fn);
	              target.on('dispose', cleanRemover);
	            }
	        })();
	      }
	
	    return this;
	  };
	
	  /**
	   * Remove an event listener from this component's element
	   * ```js
	   *     myComponent.off('eventType', myFunc);
	   * ```
	   * If myFunc is excluded, ALL listeners for the event type will be removed.
	   * If eventType is excluded, ALL listeners will be removed from the component.
	   * Alternatively you can use `off` to remove listeners that were added to other
	   * elements or components using `myComponent.on(otherComponent...`.
	   * In this case both the event type and listener function are REQUIRED.
	   * ```js
	   *     myComponent.off(otherElement, 'eventType', myFunc);
	   *     myComponent.off(otherComponent, 'eventType', myFunc);
	   * ```
	   *
	   * @param  {String=|Component}  first  The event type or other component
	   * @param  {Function=|String}       second The listener function or event type
	   * @param  {Function=}              third  The listener for other component
	   * @return {Component}
	   * @method off
	   */
	
	  Component.prototype.off = function off(first, second, third) {
	    if (!first || typeof first === 'string' || Array.isArray(first)) {
	      Events.off(this.el_, first, second);
	    } else {
	      var target = first;
	      var type = second;
	      // Ensure there's at least a guid, even if the function hasn't been used
	      var fn = Fn.bind(this, third);
	
	      // Remove the dispose listener on this component,
	      // which was given the same guid as the event listener
	      this.off('dispose', fn);
	
	      if (first.nodeName) {
	        // Remove the listener
	        Events.off(target, type, fn);
	        // Remove the listener for cleaning the dispose listener
	        Events.off(target, 'dispose', fn);
	      } else {
	        target.off(type, fn);
	        target.off('dispose', fn);
	      }
	    }
	
	    return this;
	  };
	
	  /**
	   * Add an event listener to be triggered only once and then removed
	   * ```js
	   *     myComponent.one('eventName', myFunc);
	   * ```
	   * Alternatively you can add a listener to another element or component
	   * that will be triggered only once.
	   * ```js
	   *     myComponent.one(otherElement, 'eventName', myFunc);
	   *     myComponent.one(otherComponent, 'eventName', myFunc);
	   * ```
	   *
	   * @param  {String|Component}  first   The event type or other component
	   * @param  {Function|String}       second  The listener function or event type
	   * @param  {Function=}             third   The listener function for other component
	   * @return {Component}
	   * @method one
	   */
	
	  Component.prototype.one = function one(first, second, third) {
	    var _this3 = this,
	        _arguments = arguments;
	
	    if (typeof first === 'string' || Array.isArray(first)) {
	      Events.one(this.el_, first, Fn.bind(this, second));
	    } else {
	      (function () {
	        var target = first;
	        var type = second;
	        var fn = Fn.bind(_this3, third);
	
	        var newFunc = function newFunc() {
	          _this3.off(target, type, newFunc);
	          fn.apply(null, _arguments);
	        };
	
	        // Keep the same function ID so we can remove it later
	        newFunc.guid = fn.guid;
	
	        _this3.on(target, type, newFunc);
	      })();
	    }
	
	    return this;
	  };
	
	  /**
	   * Trigger an event on an element
	   * ```js
	   *     myComponent.trigger('eventName');
	   *     myComponent.trigger({'type':'eventName'});
	   *     myComponent.trigger('eventName', {data: 'some data'});
	   *     myComponent.trigger({'type':'eventName'}, {data: 'some data'});
	   * ```
	   *
	   * @param  {Event|Object|String} event  A string (the type) or an event object with a type attribute
	   * @param  {Object} [hash] data hash to pass along with the event
	   * @return {Component}       self
	   * @method trigger
	   */
	
	  Component.prototype.trigger = function trigger(event, hash) {
	    Events.trigger(this.el_, event, hash);
	    return this;
	  };
	
	  /**
	   * Bind a listener to the component's ready state.
	   * Different from event listeners in that if the ready event has already happened
	   * it will trigger the function immediately.
	   *
	   * @param  {Function} fn Ready listener
	   * @param  {Boolean} sync Exec the listener synchronously if component is ready
	   * @return {Component}
	   * @method ready
	   */
	
	  Component.prototype.ready = function ready(fn) {
	    var sync = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	    if (fn) {
	      if (this.isReady_) {
	        if (sync) {
	          fn.call(this);
	        } else {
	          // Call the function asynchronously by default for consistency
	          this.setTimeout(fn, 1);
	        }
	      } else {
	        this.readyQueue_ = this.readyQueue_ || [];
	        this.readyQueue_.push(fn);
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Trigger the ready listeners
	   *
	   * @return {Component}
	   * @method triggerReady
	   */
	
	  Component.prototype.triggerReady = function triggerReady() {
	    this.isReady_ = true;
	
	    // Ensure ready is triggerd asynchronously
	    this.setTimeout(function () {
	      var readyQueue = this.readyQueue_;
	
	      // Reset Ready Queue
	      this.readyQueue_ = [];
	
	      if (readyQueue && readyQueue.length > 0) {
	        readyQueue.forEach(function (fn) {
	          fn.call(this);
	        }, this);
	      }
	
	      // Allow for using event listeners also
	      this.trigger('ready');
	    }, 1);
	  };
	
	  /**
	   * Finds a single DOM element matching `selector` within the component's
	   * `contentEl` or another custom context.
	   *
	   * @method $
	   * @param  {String} selector
	   *         A valid CSS selector, which will be passed to `querySelector`.
	   *
	   * @param  {Element|String} [context=document]
	   *         A DOM element within which to query. Can also be a selector
	   *         string in which case the first matching element will be used
	   *         as context. If missing (or no element matches selector), falls
	   *         back to `document`.
	   *
	   * @return {Element|null}
	   */
	
	  Component.prototype.$ = function $(selector, context) {
	    return Dom.$(selector, context || this.contentEl());
	  };
	
	  /**
	   * Finds a all DOM elements matching `selector` within the component's
	   * `contentEl` or another custom context.
	   *
	   * @method $$
	   * @param  {String} selector
	   *         A valid CSS selector, which will be passed to `querySelectorAll`.
	   *
	   * @param  {Element|String} [context=document]
	   *         A DOM element within which to query. Can also be a selector
	   *         string in which case the first matching element will be used
	   *         as context. If missing (or no element matches selector), falls
	   *         back to `document`.
	   *
	   * @return {NodeList}
	   */
	
	  Component.prototype.$$ = function $$(selector, context) {
	    return Dom.$$(selector, context || this.contentEl());
	  };
	
	  /**
	   * Check if a component's element has a CSS class name
	   *
	   * @param {String} classToCheck Classname to check
	   * @return {Component}
	   * @method hasClass
	   */
	
	  Component.prototype.hasClass = function hasClass(classToCheck) {
	    return Dom.hasElClass(this.el_, classToCheck);
	  };
	
	  /**
	   * Add a CSS class name to the component's element
	   *
	   * @param {String} classToAdd Classname to add
	   * @return {Component}
	   * @method addClass
	   */
	
	  Component.prototype.addClass = function addClass(classToAdd) {
	    Dom.addElClass(this.el_, classToAdd);
	    return this;
	  };
	
	  /**
	   * Remove a CSS class name from the component's element
	   *
	   * @param {String} classToRemove Classname to remove
	   * @return {Component}
	   * @method removeClass
	   */
	
	  Component.prototype.removeClass = function removeClass(classToRemove) {
	    Dom.removeElClass(this.el_, classToRemove);
	    return this;
	  };
	
	  /**
	   * Add or remove a CSS class name from the component's element
	   *
	   * @param  {String} classToToggle
	   * @param  {Boolean|Function} [predicate]
	   *         Can be a function that returns a Boolean. If `true`, the class
	   *         will be added; if `false`, the class will be removed. If not
	   *         given, the class will be added if not present and vice versa.
	   *
	   * @return {Component}
	   * @method toggleClass
	   */
	
	  Component.prototype.toggleClass = function toggleClass(classToToggle, predicate) {
	    Dom.toggleElClass(this.el_, classToToggle, predicate);
	    return this;
	  };
	
	  /**
	   * Show the component element if hidden
	   *
	   * @return {Component}
	   * @method show
	   */
	
	  Component.prototype.show = function show() {
	    this.removeClass('vjs-hidden');
	    return this;
	  };
	
	  /**
	   * Hide the component element if currently showing
	   *
	   * @return {Component}
	   * @method hide
	   */
	
	  Component.prototype.hide = function hide() {
	    this.addClass('vjs-hidden');
	    return this;
	  };
	
	  /**
	   * Lock an item in its visible state
	   * To be used with fadeIn/fadeOut.
	   *
	   * @return {Component}
	   * @private
	   * @method lockShowing
	   */
	
	  Component.prototype.lockShowing = function lockShowing() {
	    this.addClass('vjs-lock-showing');
	    return this;
	  };
	
	  /**
	   * Unlock an item to be hidden
	   * To be used with fadeIn/fadeOut.
	   *
	   * @return {Component}
	   * @private
	   * @method unlockShowing
	   */
	
	  Component.prototype.unlockShowing = function unlockShowing() {
	    this.removeClass('vjs-lock-showing');
	    return this;
	  };
	
	  /**
	   * Set or get the width of the component (CSS values)
	   * Setting the video tag dimension values only works with values in pixels.
	   * Percent values will not work.
	   * Some percents can be used, but width()/height() will return the number + %,
	   * not the actual computed width/height.
	   *
	   * @param  {Number|String=} num   Optional width number
	   * @param  {Boolean} skipListeners Skip the 'resize' event trigger
	   * @return {Component} This component, when setting the width
	   * @return {Number|String} The width, when getting
	   * @method width
	   */
	
	  Component.prototype.width = function width(num, skipListeners) {
	    return this.dimension('width', num, skipListeners);
	  };
	
	  /**
	   * Get or set the height of the component (CSS values)
	   * Setting the video tag dimension values only works with values in pixels.
	   * Percent values will not work.
	   * Some percents can be used, but width()/height() will return the number + %,
	   * not the actual computed width/height.
	   *
	   * @param  {Number|String=} num     New component height
	   * @param  {Boolean=} skipListeners Skip the resize event trigger
	   * @return {Component} This component, when setting the height
	   * @return {Number|String} The height, when getting
	   * @method height
	   */
	
	  Component.prototype.height = function height(num, skipListeners) {
	    return this.dimension('height', num, skipListeners);
	  };
	
	  /**
	   * Set both width and height at the same time
	   *
	   * @param  {Number|String} width Width of player
	   * @param  {Number|String} height Height of player
	   * @return {Component} The component
	   * @method dimensions
	   */
	
	  Component.prototype.dimensions = function dimensions(width, height) {
	    // Skip resize listeners on width for optimization
	    return this.width(width, true).height(height);
	  };
	
	  /**
	   * Get or set width or height
	   * This is the shared code for the width() and height() methods.
	   * All for an integer, integer + 'px' or integer + '%';
	   * Known issue: Hidden elements officially have a width of 0. We're defaulting
	   * to the style.width value and falling back to computedStyle which has the
	   * hidden element issue. Info, but probably not an efficient fix:
	   * http://www.foliotek.com/devblog/getting-the-width-of-a-hidden-element-with-jquery-using-width/
	   *
	   * @param  {String} widthOrHeight  'width' or 'height'
	   * @param  {Number|String=} num     New dimension
	   * @param  {Boolean=} skipListeners Skip resize event trigger
	   * @return {Component} The component if a dimension was set
	   * @return {Number|String} The dimension if nothing was set
	   * @private
	   * @method dimension
	   */
	
	  Component.prototype.dimension = function dimension(widthOrHeight, num, skipListeners) {
	    if (num !== undefined) {
	      // Set to zero if null or literally NaN (NaN !== NaN)
	      if (num === null || num !== num) {
	        num = 0;
	      }
	
	      // Check if using css width/height (% or px) and adjust
	      if (('' + num).indexOf('%') !== -1 || ('' + num).indexOf('px') !== -1) {
	        this.el_.style[widthOrHeight] = num;
	      } else if (num === 'auto') {
	        this.el_.style[widthOrHeight] = '';
	      } else {
	        this.el_.style[widthOrHeight] = num + 'px';
	      }
	
	      // skipListeners allows us to avoid triggering the resize event when setting both width and height
	      if (!skipListeners) {
	        this.trigger('resize');
	      }
	
	      // Return component
	      return this;
	    }
	
	    // Not setting a value, so getting it
	    // Make sure element exists
	    if (!this.el_) {
	      return 0;
	    }
	
	    // Get dimension value from style
	    var val = this.el_.style[widthOrHeight];
	    var pxIndex = val.indexOf('px');
	
	    if (pxIndex !== -1) {
	      // Return the pixel value with no 'px'
	      return parseInt(val.slice(0, pxIndex), 10);
	    }
	
	    // No px so using % or no style was set, so falling back to offsetWidth/height
	    // If component has display:none, offset will return 0
	    // TODO: handle display:none and no dimension style using px
	    return parseInt(this.el_['offset' + _utilsToTitleCaseJs2['default'](widthOrHeight)], 10);
	  };
	
	  /**
	   * Get width or height of computed style
	   * @param  {String} widthOrHeight  'width' or 'height'
	   * @return {Number|Boolean} The bolean false if nothing was set
	   * @method currentDimension
	   */
	
	  Component.prototype.currentDimension = function currentDimension(widthOrHeight) {
	    var computedWidthOrHeight = 0;
	
	    if (widthOrHeight !== 'width' && widthOrHeight !== 'height') {
	      throw new Error('currentDimension only accepts width or height value');
	    }
	
	    if (typeof _globalWindow2['default'].getComputedStyle === 'function') {
	      var computedStyle = _globalWindow2['default'].getComputedStyle(this.el_);
	      computedWidthOrHeight = computedStyle.getPropertyValue(widthOrHeight) || computedStyle[widthOrHeight];
	    } else if (this.el_.currentStyle) {
	      // ie 8 doesn't support computed style, shim it
	      // return clientWidth or clientHeight instead for better accuracy
	      var rule = 'offset' + _utilsToTitleCaseJs2['default'](widthOrHeight);
	      computedWidthOrHeight = this.el_[rule];
	    }
	
	    // remove 'px' from variable and parse as integer
	    computedWidthOrHeight = parseFloat(computedWidthOrHeight);
	    return computedWidthOrHeight;
	  };
	
	  /**
	   * Get an object which contains width and height values of computed style
	   * @return {Object} The dimensions of element
	   * @method currentDimensions
	   */
	
	  Component.prototype.currentDimensions = function currentDimensions() {
	    return {
	      width: this.currentDimension('width'),
	      height: this.currentDimension('height')
	    };
	  };
	
	  /**
	   * Get width of computed style
	   * @return {Integer}
	   * @method currentWidth
	   */
	
	  Component.prototype.currentWidth = function currentWidth() {
	    return this.currentDimension('width');
	  };
	
	  /**
	   * Get height of computed style
	   * @return {Integer}
	   * @method currentHeight
	   */
	
	  Component.prototype.currentHeight = function currentHeight() {
	    return this.currentDimension('height');
	  };
	
	  /**
	   * Emit 'tap' events when touch events are supported
	   * This is used to support toggling the controls through a tap on the video.
	   * We're requiring them to be enabled because otherwise every component would
	   * have this extra overhead unnecessarily, on mobile devices where extra
	   * overhead is especially bad.
	   *
	   * @private
	   * @method emitTapEvents
	   */
	
	  Component.prototype.emitTapEvents = function emitTapEvents() {
	    // Track the start time so we can determine how long the touch lasted
	    var touchStart = 0;
	    var firstTouch = null;
	
	    // Maximum movement allowed during a touch event to still be considered a tap
	    // Other popular libs use anywhere from 2 (hammer.js) to 15, so 10 seems like a nice, round number.
	    var tapMovementThreshold = 10;
	
	    // The maximum length a touch can be while still being considered a tap
	    var touchTimeThreshold = 200;
	
	    var couldBeTap = undefined;
	
	    this.on('touchstart', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length === 1) {
	        // Copy pageX/pageY from the object
	        firstTouch = {
	          pageX: event.touches[0].pageX,
	          pageY: event.touches[0].pageY
	        };
	        // Record start time so we can detect a tap vs. "touch and hold"
	        touchStart = new Date().getTime();
	        // Reset couldBeTap tracking
	        couldBeTap = true;
	      }
	    });
	
	    this.on('touchmove', function (event) {
	      // If more than one finger, don't consider treating this as a click
	      if (event.touches.length > 1) {
	        couldBeTap = false;
	      } else if (firstTouch) {
	        // Some devices will throw touchmoves for all but the slightest of taps.
	        // So, if we moved only a small distance, this could still be a tap
	        var xdiff = event.touches[0].pageX - firstTouch.pageX;
	        var ydiff = event.touches[0].pageY - firstTouch.pageY;
	        var touchDistance = Math.sqrt(xdiff * xdiff + ydiff * ydiff);
	
	        if (touchDistance > tapMovementThreshold) {
	          couldBeTap = false;
	        }
	      }
	    });
	
	    var noTap = function noTap() {
	      couldBeTap = false;
	    };
	
	    // TODO: Listen to the original target. http://youtu.be/DujfpXOKUp8?t=13m8s
	    this.on('touchleave', noTap);
	    this.on('touchcancel', noTap);
	
	    // When the touch ends, measure how long it took and trigger the appropriate
	    // event
	    this.on('touchend', function (event) {
	      firstTouch = null;
	      // Proceed only if the touchmove/leave/cancel event didn't happen
	      if (couldBeTap === true) {
	        // Measure how long the touch lasted
	        var touchTime = new Date().getTime() - touchStart;
	
	        // Make sure the touch was less than the threshold to be considered a tap
	        if (touchTime < touchTimeThreshold) {
	          // Don't let browser turn this into a click
	          event.preventDefault();
	          this.trigger('tap');
	          // It may be good to copy the touchend event object and change the
	          // type to tap, if the other event properties aren't exact after
	          // Events.fixEvent runs (e.g. event.target)
	        }
	      }
	    });
	  };
	
	  /**
	   * Report user touch activity when touch events occur
	   * User activity is used to determine when controls should show/hide. It's
	   * relatively simple when it comes to mouse events, because any mouse event
	   * should show the controls. So we capture mouse events that bubble up to the
	   * player and report activity when that happens.
	   * With touch events it isn't as easy. We can't rely on touch events at the
	   * player level, because a tap (touchstart + touchend) on the video itself on
	   * mobile devices is meant to turn controls off (and on). User activity is
	   * checked asynchronously, so what could happen is a tap event on the video
	   * turns the controls off, then the touchend event bubbles up to the player,
	   * which if it reported user activity, would turn the controls right back on.
	   * (We also don't want to completely block touch events from bubbling up)
	   * Also a touchmove, touch+hold, and anything other than a tap is not supposed
	   * to turn the controls back on on a mobile device.
	   * Here we're setting the default component behavior to report user activity
	   * whenever touch events happen, and this can be turned off by components that
	   * want touch events to act differently.
	   *
	   * @method enableTouchActivity
	   */
	
	  Component.prototype.enableTouchActivity = function enableTouchActivity() {
	    // Don't continue if the root player doesn't support reporting user activity
	    if (!this.player() || !this.player().reportUserActivity) {
	      return;
	    }
	
	    // listener for reporting that the user is active
	    var report = Fn.bind(this.player(), this.player().reportUserActivity);
	
	    var touchHolding = undefined;
	
	    this.on('touchstart', function () {
	      report();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(touchHolding);
	      // report at the same interval as activityCheck
	      touchHolding = this.setInterval(report, 250);
	    });
	
	    var touchEnd = function touchEnd(event) {
	      report();
	      // stop the interval that maintains activity if the touch is holding
	      this.clearInterval(touchHolding);
	    };
	
	    this.on('touchmove', report);
	    this.on('touchend', touchEnd);
	    this.on('touchcancel', touchEnd);
	  };
	
	  /**
	   * Creates timeout and sets up disposal automatically.
	   *
	   * @param {Function} fn The function to run after the timeout.
	   * @param {Number} timeout Number of ms to delay before executing specified function.
	   * @return {Number} Returns the timeout ID
	   * @method setTimeout
	   */
	
	  Component.prototype.setTimeout = function setTimeout(fn, timeout) {
	    fn = Fn.bind(this, fn);
	
	    // window.setTimeout would be preferable here, but due to some bizarre issue with Sinon and/or Phantomjs, we can't.
	    var timeoutId = _globalWindow2['default'].setTimeout(fn, timeout);
	
	    var disposeFn = function disposeFn() {
	      this.clearTimeout(timeoutId);
	    };
	
	    disposeFn.guid = 'vjs-timeout-' + timeoutId;
	
	    this.on('dispose', disposeFn);
	
	    return timeoutId;
	  };
	
	  /**
	   * Clears a timeout and removes the associated dispose listener
	   *
	   * @param {Number} timeoutId The id of the timeout to clear
	   * @return {Number} Returns the timeout ID
	   * @method clearTimeout
	   */
	
	  Component.prototype.clearTimeout = function clearTimeout(timeoutId) {
	    _globalWindow2['default'].clearTimeout(timeoutId);
	
	    var disposeFn = function disposeFn() {};
	
	    disposeFn.guid = 'vjs-timeout-' + timeoutId;
	
	    this.off('dispose', disposeFn);
	
	    return timeoutId;
	  };
	
	  /**
	   * Creates an interval and sets up disposal automatically.
	   *
	   * @param {Function} fn The function to run every N seconds.
	   * @param {Number} interval Number of ms to delay before executing specified function.
	   * @return {Number} Returns the interval ID
	   * @method setInterval
	   */
	
	  Component.prototype.setInterval = function setInterval(fn, interval) {
	    fn = Fn.bind(this, fn);
	
	    var intervalId = _globalWindow2['default'].setInterval(fn, interval);
	
	    var disposeFn = function disposeFn() {
	      this.clearInterval(intervalId);
	    };
	
	    disposeFn.guid = 'vjs-interval-' + intervalId;
	
	    this.on('dispose', disposeFn);
	
	    return intervalId;
	  };
	
	  /**
	   * Clears an interval and removes the associated dispose listener
	   *
	   * @param {Number} intervalId The id of the interval to clear
	   * @return {Number} Returns the interval ID
	   * @method clearInterval
	   */
	
	  Component.prototype.clearInterval = function clearInterval(intervalId) {
	    _globalWindow2['default'].clearInterval(intervalId);
	
	    var disposeFn = function disposeFn() {};
	
	    disposeFn.guid = 'vjs-interval-' + intervalId;
	
	    this.off('dispose', disposeFn);
	
	    return intervalId;
	  };
	
	  /**
	   * Registers a component
	   *
	   * @param {String} name Name of the component to register
	   * @param {Object} comp The component to register
	   * @static
	   * @method registerComponent
	   */
	
	  Component.registerComponent = function registerComponent(name, comp) {
	    if (!Component.components_) {
	      Component.components_ = {};
	    }
	
	    Component.components_[name] = comp;
	    return comp;
	  };
	
	  /**
	   * Gets a component by name
	   *
	   * @param {String} name Name of the component to get
	   * @return {Component}
	   * @static
	   * @method getComponent
	   */
	
	  Component.getComponent = function getComponent(name) {
	    if (Component.components_ && Component.components_[name]) {
	      return Component.components_[name];
	    }
	
	    if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
	      _utilsLogJs2['default'].warn('The ' + name + ' component was added to the videojs object when it should be registered using videojs.registerComponent(name, component)');
	      return _globalWindow2['default'].videojs[name];
	    }
	  };
	
	  /**
	   * Sets up the constructor using the supplied init method
	   * or uses the init of the parent object
	   *
	   * @param {Object} props An object of properties
	   * @static
	   * @deprecated
	   * @method extend
	   */
	
	  Component.extend = function extend(props) {
	    props = props || {};
	
	    _utilsLogJs2['default'].warn('Component.extend({}) has been deprecated, use videojs.extend(Component, {}) instead');
	
	    // Set up the constructor using the supplied init method
	    // or using the init of the parent object
	    // Make sure to check the unobfuscated version for external libs
	    var init = props.init || props.init || this.prototype.init || this.prototype.init || function () {};
	    // In Resig's simple class inheritance (previously used) the constructor
	    //  is a function that calls `this.init.apply(arguments)`
	    // However that would prevent us from using `ParentObject.call(this);`
	    //  in a Child constructor because the `this` in `this.init`
	    //  would still refer to the Child and cause an infinite loop.
	    // We would instead have to do
	    //    `ParentObject.prototype.init.apply(this, arguments);`
	    //  Bleh. We're not creating a _super() function, so it's good to keep
	    //  the parent constructor reference simple.
	    var subObj = function subObj() {
	      init.apply(this, arguments);
	    };
	
	    // Inherit from this object's prototype
	    subObj.prototype = Object.create(this.prototype);
	    // Reset the constructor property for subObj otherwise
	    // instances of subObj would have the constructor of the parent Object
	    subObj.prototype.constructor = subObj;
	
	    // Make the class extendable
	    subObj.extend = Component.extend;
	
	    // Extend subObj's prototype with functions and other properties from props
	    for (var _name in props) {
	      if (props.hasOwnProperty(_name)) {
	        subObj.prototype[_name] = props[_name];
	      }
	    }
	
	    return subObj;
	  };
	
	  return Component;
	})();
	
	Component.registerComponent('Component', Component);
	exports['default'] = Component;
	module.exports = exports['default'];
	
	},{"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/to-title-case.js":151,"global/window":2}],68:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackButtonJs = _dereq_('../track-button.js');
	
	var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _audioTrackMenuItemJs = _dereq_('./audio-track-menu-item.js');
	
	var _audioTrackMenuItemJs2 = _interopRequireDefault(_audioTrackMenuItemJs);
	
	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TrackButton
	 * @class AudioTrackButton
	 */
	
	var AudioTrackButton = (function (_TrackButton) {
	  _inherits(AudioTrackButton, _TrackButton);
	
	  function AudioTrackButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, AudioTrackButton);
	
	    options.tracks = player.audioTracks && player.audioTracks();
	
	    _TrackButton.call(this, player, options);
	
	    this.el_.setAttribute('aria-label', 'Audio Menu');
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  AudioTrackButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-audio-button ' + _TrackButton.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Create a menu item for each audio track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */
	
	  AudioTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    var tracks = this.player_.audioTracks && this.player_.audioTracks();
	
	    if (!tracks) {
	      return items;
	    }
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	
	      items.push(new _audioTrackMenuItemJs2['default'](this.player_, {
	        // MenuItem is selectable
	        'selectable': true,
	        'track': track
	      }));
	    }
	
	    return items;
	  };
	
	  return AudioTrackButton;
	})(_trackButtonJs2['default']);
	
	AudioTrackButton.prototype.controlText_ = 'Audio Track';
	_componentJs2['default'].registerComponent('AudioTrackButton', AudioTrackButton);
	exports['default'] = AudioTrackButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./audio-track-menu-item.js":69}],69:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');
	
	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	/**
	 * The audio track menu item
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class AudioTrackMenuItem
	 */
	
	var AudioTrackMenuItem = (function (_MenuItem) {
	  _inherits(AudioTrackMenuItem, _MenuItem);
	
	  function AudioTrackMenuItem(player, options) {
	    var _this = this;
	
	    _classCallCheck(this, AudioTrackMenuItem);
	
	    var track = options.track;
	    var tracks = player.audioTracks();
	
	    // Modify options for parent MenuItem class's init.
	    options.label = track.label || track.language || 'Unknown';
	    options.selected = track.enabled;
	
	    _MenuItem.call(this, player, options);
	
	    this.track = track;
	
	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);
	
	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	  }
	
	  /**
	   * Handle click on audio track
	   *
	   * @method handleClick
	   */
	
	  AudioTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var tracks = this.player_.audioTracks();
	
	    _MenuItem.prototype.handleClick.call(this, event);
	
	    if (!tracks) return;
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	
	      track.enabled = track === this.track;
	    }
	  };
	
	  /**
	   * Handle audio track change
	   *
	   * @method handleTracksChange
	   */
	
	  AudioTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track.enabled);
	  };
	
	  return AudioTrackMenuItem;
	})(_menuMenuItemJs2['default']);
	
	_componentJs2['default'].registerComponent('AudioTrackMenuItem', AudioTrackMenuItem);
	exports['default'] = AudioTrackMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],70:[function(_dereq_,module,exports){
	/**
	 * @file control-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	// Required children
	
	var _playToggleJs = _dereq_('./play-toggle.js');
	
	var _playToggleJs2 = _interopRequireDefault(_playToggleJs);
	
	var _timeControlsCurrentTimeDisplayJs = _dereq_('./time-controls/current-time-display.js');
	
	var _timeControlsCurrentTimeDisplayJs2 = _interopRequireDefault(_timeControlsCurrentTimeDisplayJs);
	
	var _timeControlsDurationDisplayJs = _dereq_('./time-controls/duration-display.js');
	
	var _timeControlsDurationDisplayJs2 = _interopRequireDefault(_timeControlsDurationDisplayJs);
	
	var _timeControlsTimeDividerJs = _dereq_('./time-controls/time-divider.js');
	
	var _timeControlsTimeDividerJs2 = _interopRequireDefault(_timeControlsTimeDividerJs);
	
	var _timeControlsRemainingTimeDisplayJs = _dereq_('./time-controls/remaining-time-display.js');
	
	var _timeControlsRemainingTimeDisplayJs2 = _interopRequireDefault(_timeControlsRemainingTimeDisplayJs);
	
	var _liveDisplayJs = _dereq_('./live-display.js');
	
	var _liveDisplayJs2 = _interopRequireDefault(_liveDisplayJs);
	
	var _progressControlProgressControlJs = _dereq_('./progress-control/progress-control.js');
	
	var _progressControlProgressControlJs2 = _interopRequireDefault(_progressControlProgressControlJs);
	
	var _fullscreenToggleJs = _dereq_('./fullscreen-toggle.js');
	
	var _fullscreenToggleJs2 = _interopRequireDefault(_fullscreenToggleJs);
	
	var _volumeControlVolumeControlJs = _dereq_('./volume-control/volume-control.js');
	
	var _volumeControlVolumeControlJs2 = _interopRequireDefault(_volumeControlVolumeControlJs);
	
	var _volumeMenuButtonJs = _dereq_('./volume-menu-button.js');
	
	var _volumeMenuButtonJs2 = _interopRequireDefault(_volumeMenuButtonJs);
	
	var _muteToggleJs = _dereq_('./mute-toggle.js');
	
	var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);
	
	var _textTrackControlsChaptersButtonJs = _dereq_('./text-track-controls/chapters-button.js');
	
	var _textTrackControlsChaptersButtonJs2 = _interopRequireDefault(_textTrackControlsChaptersButtonJs);
	
	var _textTrackControlsDescriptionsButtonJs = _dereq_('./text-track-controls/descriptions-button.js');
	
	var _textTrackControlsDescriptionsButtonJs2 = _interopRequireDefault(_textTrackControlsDescriptionsButtonJs);
	
	var _textTrackControlsSubtitlesButtonJs = _dereq_('./text-track-controls/subtitles-button.js');
	
	var _textTrackControlsSubtitlesButtonJs2 = _interopRequireDefault(_textTrackControlsSubtitlesButtonJs);
	
	var _textTrackControlsCaptionsButtonJs = _dereq_('./text-track-controls/captions-button.js');
	
	var _textTrackControlsCaptionsButtonJs2 = _interopRequireDefault(_textTrackControlsCaptionsButtonJs);
	
	var _audioTrackControlsAudioTrackButtonJs = _dereq_('./audio-track-controls/audio-track-button.js');
	
	var _audioTrackControlsAudioTrackButtonJs2 = _interopRequireDefault(_audioTrackControlsAudioTrackButtonJs);
	
	var _playbackRateMenuPlaybackRateMenuButtonJs = _dereq_('./playback-rate-menu/playback-rate-menu-button.js');
	
	var _playbackRateMenuPlaybackRateMenuButtonJs2 = _interopRequireDefault(_playbackRateMenuPlaybackRateMenuButtonJs);
	
	var _spacerControlsCustomControlSpacerJs = _dereq_('./spacer-controls/custom-control-spacer.js');
	
	var _spacerControlsCustomControlSpacerJs2 = _interopRequireDefault(_spacerControlsCustomControlSpacerJs);
	
	/**
	 * Container of main controls
	 *
	 * @extends Component
	 * @class ControlBar
	 */
	
	var ControlBar = (function (_Component) {
	  _inherits(ControlBar, _Component);
	
	  function ControlBar() {
	    _classCallCheck(this, ControlBar);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  ControlBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-control-bar',
	      dir: 'ltr'
	    }, {
	      'role': 'group' // The control bar is a group, so it can contain menuitems
	    });
	  };
	
	  return ControlBar;
	})(_componentJs2['default']);
	
	ControlBar.prototype.options_ = {
	  children: ['playToggle', 'volumeMenuButton', 'currentTimeDisplay', 'timeDivider', 'durationDisplay', 'progressControl', 'liveDisplay', 'remainingTimeDisplay', 'customControlSpacer', 'playbackRateMenuButton', 'chaptersButton', 'descriptionsButton', 'subtitlesButton', 'captionsButton', 'audioTrackButton', 'fullscreenToggle']
	};
	
	_componentJs2['default'].registerComponent('ControlBar', ControlBar);
	exports['default'] = ControlBar;
	module.exports = exports['default'];
	
	},{"../component.js":67,"./audio-track-controls/audio-track-button.js":68,"./fullscreen-toggle.js":71,"./live-display.js":72,"./mute-toggle.js":73,"./play-toggle.js":74,"./playback-rate-menu/playback-rate-menu-button.js":75,"./progress-control/progress-control.js":80,"./spacer-controls/custom-control-spacer.js":83,"./text-track-controls/captions-button.js":86,"./text-track-controls/chapters-button.js":87,"./text-track-controls/descriptions-button.js":89,"./text-track-controls/subtitles-button.js":91,"./time-controls/current-time-display.js":94,"./time-controls/duration-display.js":95,"./time-controls/remaining-time-display.js":96,"./time-controls/time-divider.js":97,"./volume-control/volume-control.js":100,"./volume-menu-button.js":102}],71:[function(_dereq_,module,exports){
	/**
	 * @file fullscreen-toggle.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _buttonJs = _dereq_('../button.js');
	
	var _buttonJs2 = _interopRequireDefault(_buttonJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Toggle fullscreen video
	 *
	 * @extends Button
	 * @class FullscreenToggle
	 */
	
	var FullscreenToggle = (function (_Button) {
	  _inherits(FullscreenToggle, _Button);
	
	  function FullscreenToggle(player, options) {
	    _classCallCheck(this, FullscreenToggle);
	
	    _Button.call(this, player, options);
	    this.on(player, 'fullscreenchange', this.handleFullscreenChange);
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  FullscreenToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-fullscreen-control ' + _Button.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Handles Fullscreenchange on the component and change control text accordingly
	   *
	   * @method handleFullscreenChange
	   */
	
	  FullscreenToggle.prototype.handleFullscreenChange = function handleFullscreenChange() {
	    if (this.player_.isFullscreen()) {
	      this.controlText('Non-Fullscreen');
	    } else {
	      this.controlText('Fullscreen');
	    }
	  };
	
	  /**
	   * Handles click for full screen
	   *
	   * @method handleClick
	   */
	
	  FullscreenToggle.prototype.handleClick = function handleClick() {
	    if (!this.player_.isFullscreen()) {
	      this.player_.requestFullscreen();
	    } else {
	      this.player_.exitFullscreen();
	    }
	  };
	
	  return FullscreenToggle;
	})(_buttonJs2['default']);
	
	FullscreenToggle.prototype.controlText_ = 'Fullscreen';
	
	_componentJs2['default'].registerComponent('FullscreenToggle', FullscreenToggle);
	exports['default'] = FullscreenToggle;
	module.exports = exports['default'];
	
	},{"../button.js":64,"../component.js":67}],72:[function(_dereq_,module,exports){
	/**
	 * @file live-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	/**
	 * Displays the live indicator
	 * TODO - Future make it click to snap to live
	 *
	 * @extends Component
	 * @class LiveDisplay
	 */
	
	var LiveDisplay = (function (_Component) {
	  _inherits(LiveDisplay, _Component);
	
	  function LiveDisplay(player, options) {
	    _classCallCheck(this, LiveDisplay);
	
	    _Component.call(this, player, options);
	
	    this.updateShowing();
	    this.on(this.player(), 'durationchange', this.updateShowing);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  LiveDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-live-control vjs-control'
	    });
	
	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-live-display',
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Stream Type') + '</span>' + this.localize('LIVE')
	    }, {
	      'aria-live': 'off'
	    });
	
	    el.appendChild(this.contentEl_);
	    return el;
	  };
	
	  LiveDisplay.prototype.updateShowing = function updateShowing() {
	    if (this.player().duration() === Infinity) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };
	
	  return LiveDisplay;
	})(_component2['default']);
	
	_component2['default'].registerComponent('LiveDisplay', LiveDisplay);
	exports['default'] = LiveDisplay;
	module.exports = exports['default'];
	
	},{"../component":67,"../utils/dom.js":142}],73:[function(_dereq_,module,exports){
	/**
	 * @file mute-toggle.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _button = _dereq_('../button');
	
	var _button2 = _interopRequireDefault(_button);
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	/**
	 * A button component for muting the audio
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MuteToggle
	 */
	
	var MuteToggle = (function (_Button) {
	  _inherits(MuteToggle, _Button);
	
	  function MuteToggle(player, options) {
	    _classCallCheck(this, MuteToggle);
	
	    _Button.call(this, player, options);
	
	    this.on(player, 'volumechange', this.update);
	
	    // hide mute toggle if the current tech doesn't support volume control
	    if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	      this.addClass('vjs-hidden');
	    }
	
	    this.on(player, 'loadstart', function () {
	      this.update(); // We need to update the button to account for a default muted state.
	
	      if (player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  MuteToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-mute-control ' + _Button.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Handle click on mute
	   *
	   * @method handleClick
	   */
	
	  MuteToggle.prototype.handleClick = function handleClick() {
	    this.player_.muted(this.player_.muted() ? false : true);
	  };
	
	  /**
	   * Update volume
	   *
	   * @method update
	   */
	
	  MuteToggle.prototype.update = function update() {
	    var vol = this.player_.volume(),
	        level = 3;
	
	    if (vol === 0 || this.player_.muted()) {
	      level = 0;
	    } else if (vol < 0.33) {
	      level = 1;
	    } else if (vol < 0.67) {
	      level = 2;
	    }
	
	    // Don't rewrite the button text if the actual text doesn't change.
	    // This causes unnecessary and confusing information for screen reader users.
	    // This check is needed because this function gets called every time the volume level is changed.
	    var toMute = this.player_.muted() ? 'Unmute' : 'Mute';
	    if (this.controlText() !== toMute) {
	      this.controlText(toMute);
	    }
	
	    /* TODO improve muted icon classes */
	    for (var i = 0; i < 4; i++) {
	      Dom.removeElClass(this.el_, 'vjs-vol-' + i);
	    }
	    Dom.addElClass(this.el_, 'vjs-vol-' + level);
	  };
	
	  return MuteToggle;
	})(_button2['default']);
	
	MuteToggle.prototype.controlText_ = 'Mute';
	
	_component2['default'].registerComponent('MuteToggle', MuteToggle);
	exports['default'] = MuteToggle;
	module.exports = exports['default'];
	
	},{"../button":64,"../component":67,"../utils/dom.js":142}],74:[function(_dereq_,module,exports){
	/**
	 * @file play-toggle.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _buttonJs = _dereq_('../button.js');
	
	var _buttonJs2 = _interopRequireDefault(_buttonJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Button to toggle between play and pause
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class PlayToggle
	 */
	
	var PlayToggle = (function (_Button) {
	  _inherits(PlayToggle, _Button);
	
	  function PlayToggle(player, options) {
	    _classCallCheck(this, PlayToggle);
	
	    _Button.call(this, player, options);
	
	    this.on(player, 'play', this.handlePlay);
	    this.on(player, 'pause', this.handlePause);
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  PlayToggle.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-play-control ' + _Button.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Handle click to toggle between play and pause
	   *
	   * @method handleClick
	   */
	
	  PlayToggle.prototype.handleClick = function handleClick() {
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };
	
	  /**
	   * Add the vjs-playing class to the element so it can change appearance
	   *
	   * @method handlePlay
	   */
	
	  PlayToggle.prototype.handlePlay = function handlePlay() {
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	    this.controlText('Pause'); // change the button text to "Pause"
	  };
	
	  /**
	   * Add the vjs-paused class to the element so it can change appearance
	   *
	   * @method handlePause
	   */
	
	  PlayToggle.prototype.handlePause = function handlePause() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    this.controlText('Play'); // change the button text to "Play"
	  };
	
	  return PlayToggle;
	})(_buttonJs2['default']);
	
	PlayToggle.prototype.controlText_ = 'Play';
	
	_componentJs2['default'].registerComponent('PlayToggle', PlayToggle);
	exports['default'] = PlayToggle;
	module.exports = exports['default'];
	
	},{"../button.js":64,"../component.js":67}],75:[function(_dereq_,module,exports){
	/**
	 * @file playback-rate-menu-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuButtonJs = _dereq_('../../menu/menu-button.js');
	
	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);
	
	var _menuMenuJs = _dereq_('../../menu/menu.js');
	
	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);
	
	var _playbackRateMenuItemJs = _dereq_('./playback-rate-menu-item.js');
	
	var _playbackRateMenuItemJs2 = _interopRequireDefault(_playbackRateMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	/**
	 * The component for controlling the playback rate
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class PlaybackRateMenuButton
	 */
	
	var PlaybackRateMenuButton = (function (_MenuButton) {
	  _inherits(PlaybackRateMenuButton, _MenuButton);
	
	  function PlaybackRateMenuButton(player, options) {
	    _classCallCheck(this, PlaybackRateMenuButton);
	
	    _MenuButton.call(this, player, options);
	
	    this.updateVisibility();
	    this.updateLabel();
	
	    this.on(player, 'loadstart', this.updateVisibility);
	    this.on(player, 'ratechange', this.updateLabel);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  PlaybackRateMenuButton.prototype.createEl = function createEl() {
	    var el = _MenuButton.prototype.createEl.call(this);
	
	    this.labelEl_ = Dom.createEl('div', {
	      className: 'vjs-playback-rate-value',
	      innerHTML: 1.0
	    });
	
	    el.appendChild(this.labelEl_);
	
	    return el;
	  };
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  PlaybackRateMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-playback-rate ' + _MenuButton.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Create the playback rate menu
	   *
	   * @return {Menu} Menu object populated with items
	   * @method createMenu
	   */
	
	  PlaybackRateMenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menuMenuJs2['default'](this.player());
	    var rates = this.playbackRates();
	
	    if (rates) {
	      for (var i = rates.length - 1; i >= 0; i--) {
	        menu.addChild(new _playbackRateMenuItemJs2['default'](this.player(), { 'rate': rates[i] + 'x' }));
	      }
	    }
	
	    return menu;
	  };
	
	  /**
	   * Updates ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */
	
	  PlaybackRateMenuButton.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current playback rate
	    this.el().setAttribute('aria-valuenow', this.player().playbackRate());
	  };
	
	  /**
	   * Handle menu item click
	   *
	   * @method handleClick
	   */
	
	  PlaybackRateMenuButton.prototype.handleClick = function handleClick() {
	    // select next rate option
	    var currentRate = this.player().playbackRate();
	    var rates = this.playbackRates();
	
	    // this will select first one if the last one currently selected
	    var newRate = rates[0];
	    for (var i = 0; i < rates.length; i++) {
	      if (rates[i] > currentRate) {
	        newRate = rates[i];
	        break;
	      }
	    }
	    this.player().playbackRate(newRate);
	  };
	
	  /**
	   * Get possible playback rates
	   *
	   * @return {Array} Possible playback rates
	   * @method playbackRates
	   */
	
	  PlaybackRateMenuButton.prototype.playbackRates = function playbackRates() {
	    return this.options_['playbackRates'] || this.options_.playerOptions && this.options_.playerOptions['playbackRates'];
	  };
	
	  /**
	   * Get whether playback rates is supported by the tech
	   * and an array of playback rates exists
	   *
	   * @return {Boolean} Whether changing playback rate is supported
	   * @method playbackRateSupported
	   */
	
	  PlaybackRateMenuButton.prototype.playbackRateSupported = function playbackRateSupported() {
	    return this.player().tech_ && this.player().tech_['featuresPlaybackRate'] && this.playbackRates() && this.playbackRates().length > 0;
	  };
	
	  /**
	   * Hide playback rate controls when they're no playback rate options to select
	   *
	   * @method updateVisibility
	   */
	
	  PlaybackRateMenuButton.prototype.updateVisibility = function updateVisibility() {
	    if (this.playbackRateSupported()) {
	      this.removeClass('vjs-hidden');
	    } else {
	      this.addClass('vjs-hidden');
	    }
	  };
	
	  /**
	   * Update button label when rate changed
	   *
	   * @method updateLabel
	   */
	
	  PlaybackRateMenuButton.prototype.updateLabel = function updateLabel() {
	    if (this.playbackRateSupported()) {
	      this.labelEl_.innerHTML = this.player().playbackRate() + 'x';
	    }
	  };
	
	  return PlaybackRateMenuButton;
	})(_menuMenuButtonJs2['default']);
	
	PlaybackRateMenuButton.prototype.controlText_ = 'Playback Rate';
	
	_componentJs2['default'].registerComponent('PlaybackRateMenuButton', PlaybackRateMenuButton);
	exports['default'] = PlaybackRateMenuButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu-button.js":109,"../../menu/menu.js":111,"../../utils/dom.js":142,"./playback-rate-menu-item.js":76}],76:[function(_dereq_,module,exports){
	/**
	 * @file playback-rate-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');
	
	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * The specific menu item type for selecting a playback rate
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class PlaybackRateMenuItem
	 */
	
	var PlaybackRateMenuItem = (function (_MenuItem) {
	  _inherits(PlaybackRateMenuItem, _MenuItem);
	
	  function PlaybackRateMenuItem(player, options) {
	    _classCallCheck(this, PlaybackRateMenuItem);
	
	    var label = options['rate'];
	    var rate = parseFloat(label, 10);
	
	    // Modify options for parent MenuItem class's init.
	    options['label'] = label;
	    options['selected'] = rate === 1;
	    _MenuItem.call(this, player, options);
	
	    this.label = label;
	    this.rate = rate;
	
	    this.on(player, 'ratechange', this.update);
	  }
	
	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */
	
	  PlaybackRateMenuItem.prototype.handleClick = function handleClick() {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player().playbackRate(this.rate);
	  };
	
	  /**
	   * Update playback rate with selected rate
	   *
	   * @method update
	   */
	
	  PlaybackRateMenuItem.prototype.update = function update() {
	    this.selected(this.player().playbackRate() === this.rate);
	  };
	
	  return PlaybackRateMenuItem;
	})(_menuMenuItemJs2['default']);
	
	PlaybackRateMenuItem.prototype.contentElType = 'button';
	
	_componentJs2['default'].registerComponent('PlaybackRateMenuItem', PlaybackRateMenuItem);
	exports['default'] = PlaybackRateMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu-item.js":110}],77:[function(_dereq_,module,exports){
	/**
	 * @file load-progress-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	/**
	 * Shows load progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class LoadProgressBar
	 */
	
	var LoadProgressBar = (function (_Component) {
	  _inherits(LoadProgressBar, _Component);
	
	  function LoadProgressBar(player, options) {
	    _classCallCheck(this, LoadProgressBar);
	
	    _Component.call(this, player, options);
	    this.on(player, 'progress', this.update);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  LoadProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-load-progress',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Loaded') + '</span>: 0%</span>'
	    });
	  };
	
	  /**
	   * Update progress bar
	   *
	   * @method update
	   */
	
	  LoadProgressBar.prototype.update = function update() {
	    var buffered = this.player_.buffered();
	    var duration = this.player_.duration();
	    var bufferedEnd = this.player_.bufferedEnd();
	    var children = this.el_.children;
	
	    // get the percent width of a time compared to the total end
	    var percentify = function percentify(time, end) {
	      var percent = time / end || 0; // no NaN
	      return (percent >= 1 ? 1 : percent) * 100 + '%';
	    };
	
	    // update the width of the progress bar
	    this.el_.style.width = percentify(bufferedEnd, duration);
	
	    // add child elements to represent the individual buffered time ranges
	    for (var i = 0; i < buffered.length; i++) {
	      var start = buffered.start(i);
	      var end = buffered.end(i);
	      var part = children[i];
	
	      if (!part) {
	        part = this.el_.appendChild(Dom.createEl());
	      }
	
	      // set the percent based on the width of the progress bar (bufferedEnd)
	      part.style.left = percentify(start, bufferedEnd);
	      part.style.width = percentify(end - start, bufferedEnd);
	    }
	
	    // remove unused buffered range elements
	    for (var i = children.length; i > buffered.length; i--) {
	      this.el_.removeChild(children[i - 1]);
	    }
	  };
	
	  return LoadProgressBar;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('LoadProgressBar', LoadProgressBar);
	exports['default'] = LoadProgressBar;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142}],78:[function(_dereq_,module,exports){
	/**
	 * @file mouse-time-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	var _lodashCompatFunctionThrottle = _dereq_('lodash-compat/function/throttle');
	
	var _lodashCompatFunctionThrottle2 = _interopRequireDefault(_lodashCompatFunctionThrottle);
	
	/**
	 * The Mouse Time Display component shows the time you will seek to
	 * when hovering over the progress bar
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class MouseTimeDisplay
	 */
	
	var MouseTimeDisplay = (function (_Component) {
	  _inherits(MouseTimeDisplay, _Component);
	
	  function MouseTimeDisplay(player, options) {
	    var _this = this;
	
	    _classCallCheck(this, MouseTimeDisplay);
	
	    _Component.call(this, player, options);
	
	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }
	
	    if (this.keepTooltipsInside) {
	      this.tooltip = Dom.createEl('div', { className: 'vjs-time-tooltip' });
	      this.el().appendChild(this.tooltip);
	      this.addClass('vjs-keep-tooltips-inside');
	    }
	
	    this.update(0, 0);
	
	    player.on('ready', function () {
	      _this.on(player.controlBar.progressControl.el(), 'mousemove', _lodashCompatFunctionThrottle2['default'](Fn.bind(_this, _this.handleMouseMove), 25));
	    });
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  MouseTimeDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-mouse-display'
	    });
	  };
	
	  MouseTimeDisplay.prototype.handleMouseMove = function handleMouseMove(event) {
	    var duration = this.player_.duration();
	    var newTime = this.calculateDistance(event) * duration;
	    var position = event.pageX - Dom.findElPosition(this.el().parentNode).left;
	
	    this.update(newTime, position);
	  };
	
	  MouseTimeDisplay.prototype.update = function update(newTime, position) {
	    var time = _utilsFormatTimeJs2['default'](newTime, this.player_.duration());
	
	    this.el().style.left = position + 'px';
	    this.el().setAttribute('data-current-time', time);
	
	    if (this.keepTooltipsInside) {
	      var clampedPosition = this.clampPosition_(position);
	      var difference = position - clampedPosition + 1;
	      var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
	      var tooltipWidthHalf = tooltipWidth / 2;
	
	      this.tooltip.innerHTML = time;
	      this.tooltip.style.right = '-' + (tooltipWidthHalf - difference) + 'px';
	    }
	  };
	
	  MouseTimeDisplay.prototype.calculateDistance = function calculateDistance(event) {
	    return Dom.getPointerPosition(this.el().parentNode, event).x;
	  };
	
	  /**
	   * This takes in a horizontal position for the bar and returns a clamped position.
	   * Clamped position means that it will keep the position greater than half the width
	   * of the tooltip and smaller than the player width minus half the width o the tooltip.
	   * It will only clamp the position if `keepTooltipsInside` option is set.
	   *
	   * @param {Number} position the position the bar wants to be
	   * @return {Number} newPosition the (potentially) clamped position
	   * @method clampPosition_
	   */
	
	  MouseTimeDisplay.prototype.clampPosition_ = function clampPosition_(position) {
	    if (!this.keepTooltipsInside) {
	      return position;
	    }
	
	    var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
	    var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltip).width);
	    var tooltipWidthHalf = tooltipWidth / 2;
	    var actualPosition = position;
	
	    if (position < tooltipWidthHalf) {
	      actualPosition = Math.ceil(tooltipWidthHalf);
	    } else if (position > playerWidth - tooltipWidthHalf) {
	      actualPosition = Math.floor(playerWidth - tooltipWidthHalf);
	    }
	
	    return actualPosition;
	  };
	
	  return MouseTimeDisplay;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('MouseTimeDisplay', MouseTimeDisplay);
	exports['default'] = MouseTimeDisplay;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145,"global/window":2,"lodash-compat/function/throttle":7}],79:[function(_dereq_,module,exports){
	/**
	 * @file play-progress-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	/**
	 * Shows play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class PlayProgressBar
	 */
	
	var PlayProgressBar = (function (_Component) {
	  _inherits(PlayProgressBar, _Component);
	
	  function PlayProgressBar(player, options) {
	    _classCallCheck(this, PlayProgressBar);
	
	    _Component.call(this, player, options);
	    this.updateDataAttr();
	    this.on(player, 'timeupdate', this.updateDataAttr);
	    player.ready(Fn.bind(this, this.updateDataAttr));
	
	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }
	
	    if (this.keepTooltipsInside) {
	      this.addClass('vjs-keep-tooltips-inside');
	    }
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  PlayProgressBar.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-play-progress vjs-slider-bar',
	      innerHTML: '<span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	  };
	
	  PlayProgressBar.prototype.updateDataAttr = function updateDataAttr() {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    this.el_.setAttribute('data-current-time', _utilsFormatTimeJs2['default'](time, this.player_.duration()));
	  };
	
	  return PlayProgressBar;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('PlayProgressBar', PlayProgressBar);
	exports['default'] = PlayProgressBar;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],80:[function(_dereq_,module,exports){
	/**
	 * @file progress-control.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _seekBarJs = _dereq_('./seek-bar.js');
	
	var _seekBarJs2 = _interopRequireDefault(_seekBarJs);
	
	var _mouseTimeDisplayJs = _dereq_('./mouse-time-display.js');
	
	var _mouseTimeDisplayJs2 = _interopRequireDefault(_mouseTimeDisplayJs);
	
	/**
	 * The Progress Control component contains the seek bar, load progress,
	 * and play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class ProgressControl
	 */
	
	var ProgressControl = (function (_Component) {
	  _inherits(ProgressControl, _Component);
	
	  function ProgressControl() {
	    _classCallCheck(this, ProgressControl);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  ProgressControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-control vjs-control'
	    });
	  };
	
	  return ProgressControl;
	})(_componentJs2['default']);
	
	ProgressControl.prototype.options_ = {
	  children: ['seekBar']
	};
	
	_componentJs2['default'].registerComponent('ProgressControl', ProgressControl);
	exports['default'] = ProgressControl;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./mouse-time-display.js":78,"./seek-bar.js":81}],81:[function(_dereq_,module,exports){
	/**
	 * @file seek-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _sliderSliderJs = _dereq_('../../slider/slider.js');
	
	var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _loadProgressBarJs = _dereq_('./load-progress-bar.js');
	
	var _loadProgressBarJs2 = _interopRequireDefault(_loadProgressBarJs);
	
	var _playProgressBarJs = _dereq_('./play-progress-bar.js');
	
	var _playProgressBarJs2 = _interopRequireDefault(_playProgressBarJs);
	
	var _tooltipProgressBarJs = _dereq_('./tooltip-progress-bar.js');
	
	var _tooltipProgressBarJs2 = _interopRequireDefault(_tooltipProgressBarJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/**
	 * Seek Bar and holder for the progress bars
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Slider
	 * @class SeekBar
	 */
	
	var SeekBar = (function (_Slider) {
	  _inherits(SeekBar, _Slider);
	
	  function SeekBar(player, options) {
	    _classCallCheck(this, SeekBar);
	
	    _Slider.call(this, player, options);
	    this.on(player, 'timeupdate', this.updateProgress);
	    this.on(player, 'ended', this.updateProgress);
	    player.ready(Fn.bind(this, this.updateProgress));
	
	    if (options.playerOptions && options.playerOptions.controlBar && options.playerOptions.controlBar.progressControl && options.playerOptions.controlBar.progressControl.keepTooltipsInside) {
	      this.keepTooltipsInside = options.playerOptions.controlBar.progressControl.keepTooltipsInside;
	    }
	
	    if (this.keepTooltipsInside) {
	      this.tooltipProgressBar = this.addChild('TooltipProgressBar');
	    }
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  SeekBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-progress-holder'
	    }, {
	      'aria-label': 'progress bar'
	    });
	  };
	
	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */
	
	  SeekBar.prototype.updateProgress = function updateProgress() {
	    this.updateAriaAttributes(this.el_);
	
	    if (this.keepTooltipsInside) {
	      this.updateAriaAttributes(this.tooltipProgressBar.el_);
	      this.tooltipProgressBar.el_.style.width = this.bar.el_.style.width;
	
	      var playerWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.player().el()).width);
	      var tooltipWidth = parseFloat(_globalWindow2['default'].getComputedStyle(this.tooltipProgressBar.tooltip).width);
	      var tooltipStyle = this.tooltipProgressBar.el().style;
	      tooltipStyle.maxWidth = Math.floor(playerWidth - tooltipWidth / 2) + 'px';
	      tooltipStyle.minWidth = Math.ceil(tooltipWidth / 2) + 'px';
	      tooltipStyle.right = '-' + tooltipWidth / 2 + 'px';
	    }
	  };
	
	  SeekBar.prototype.updateAriaAttributes = function updateAriaAttributes(el) {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    el.setAttribute('aria-valuenow', (this.getPercent() * 100).toFixed(2)); // machine readable value of progress bar (percentage complete)
	    el.setAttribute('aria-valuetext', _utilsFormatTimeJs2['default'](time, this.player_.duration())); // human readable value of progress bar (time complete)
	  };
	
	  /**
	   * Get percentage of video played
	   *
	   * @return {Number} Percentage played
	   * @method getPercent
	   */
	
	  SeekBar.prototype.getPercent = function getPercent() {
	    var percent = this.player_.currentTime() / this.player_.duration();
	    return percent >= 1 ? 1 : percent;
	  };
	
	  /**
	   * Handle mouse down on seek bar
	   *
	   * @method handleMouseDown
	   */
	
	  SeekBar.prototype.handleMouseDown = function handleMouseDown(event) {
	    _Slider.prototype.handleMouseDown.call(this, event);
	
	    this.player_.scrubbing(true);
	
	    this.videoWasPlaying = !this.player_.paused();
	    this.player_.pause();
	  };
	
	  /**
	   * Handle mouse move on seek bar
	   *
	   * @method handleMouseMove
	   */
	
	  SeekBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    var newTime = this.calculateDistance(event) * this.player_.duration();
	
	    // Don't let video end while scrubbing.
	    if (newTime === this.player_.duration()) {
	      newTime = newTime - 0.1;
	    }
	
	    // Set new time (tell player to seek to new time)
	    this.player_.currentTime(newTime);
	  };
	
	  /**
	   * Handle mouse up on seek bar
	   *
	   * @method handleMouseUp
	   */
	
	  SeekBar.prototype.handleMouseUp = function handleMouseUp(event) {
	    _Slider.prototype.handleMouseUp.call(this, event);
	
	    this.player_.scrubbing(false);
	    if (this.videoWasPlaying) {
	      this.player_.play();
	    }
	  };
	
	  /**
	   * Move more quickly fast forward for keyboard-only users
	   *
	   * @method stepForward
	   */
	
	  SeekBar.prototype.stepForward = function stepForward() {
	    this.player_.currentTime(this.player_.currentTime() + 5); // more quickly fast forward for keyboard-only users
	  };
	
	  /**
	   * Move more quickly rewind for keyboard-only users
	   *
	   * @method stepBack
	   */
	
	  SeekBar.prototype.stepBack = function stepBack() {
	    this.player_.currentTime(this.player_.currentTime() - 5); // more quickly rewind for keyboard-only users
	  };
	
	  return SeekBar;
	})(_sliderSliderJs2['default']);
	
	SeekBar.prototype.options_ = {
	  children: ['loadProgressBar', 'mouseTimeDisplay', 'playProgressBar'],
	  'barName': 'playProgressBar'
	};
	
	SeekBar.prototype.playerEvent = 'timeupdate';
	
	_componentJs2['default'].registerComponent('SeekBar', SeekBar);
	exports['default'] = SeekBar;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"../../utils/format-time.js":145,"./load-progress-bar.js":77,"./play-progress-bar.js":79,"./tooltip-progress-bar.js":82,"global/window":2,"object.assign":45}],82:[function(_dereq_,module,exports){
	/**
	 * @file play-progress-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	/**
	 * Shows play progress
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class PlayProgressBar
	 */
	
	var TooltipProgressBar = (function (_Component) {
	  _inherits(TooltipProgressBar, _Component);
	
	  function TooltipProgressBar(player, options) {
	    _classCallCheck(this, TooltipProgressBar);
	
	    _Component.call(this, player, options);
	    this.updateDataAttr();
	    this.on(player, 'timeupdate', this.updateDataAttr);
	    player.ready(Fn.bind(this, this.updateDataAttr));
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  TooltipProgressBar.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-tooltip-progress-bar vjs-slider-bar',
	      innerHTML: '<div class="vjs-time-tooltip"></div>\n        <span class="vjs-control-text"><span>' + this.localize('Progress') + '</span>: 0%</span>'
	    });
	
	    this.tooltip = el.querySelector('.vjs-time-tooltip');
	
	    return el;
	  };
	
	  TooltipProgressBar.prototype.updateDataAttr = function updateDataAttr() {
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
	    this.el_.setAttribute('data-current-time', formattedTime);
	    this.tooltip.innerHTML = formattedTime;
	  };
	
	  return TooltipProgressBar;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('TooltipProgressBar', TooltipProgressBar);
	exports['default'] = TooltipProgressBar;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/format-time.js":145}],83:[function(_dereq_,module,exports){
	/**
	 * @file custom-control-spacer.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _spacerJs = _dereq_('./spacer.js');
	
	var _spacerJs2 = _interopRequireDefault(_spacerJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Spacer specifically meant to be used as an insertion point for new plugins, etc.
	 *
	 * @extends Spacer
	 * @class CustomControlSpacer
	 */
	
	var CustomControlSpacer = (function (_Spacer) {
	  _inherits(CustomControlSpacer, _Spacer);
	
	  function CustomControlSpacer() {
	    _classCallCheck(this, CustomControlSpacer);
	
	    _Spacer.apply(this, arguments);
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  CustomControlSpacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-custom-control-spacer ' + _Spacer.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  CustomControlSpacer.prototype.createEl = function createEl() {
	    var el = _Spacer.prototype.createEl.call(this, {
	      className: this.buildCSSClass()
	    });
	
	    // No-flex/table-cell mode requires there be some content
	    // in the cell to fill the remaining space of the table.
	    el.innerHTML = '&nbsp;';
	    return el;
	  };
	
	  return CustomControlSpacer;
	})(_spacerJs2['default']);
	
	_componentJs2['default'].registerComponent('CustomControlSpacer', CustomControlSpacer);
	exports['default'] = CustomControlSpacer;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./spacer.js":84}],84:[function(_dereq_,module,exports){
	/**
	 * @file spacer.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Just an empty spacer element that can be used as an append point for plugins, etc.
	 * Also can be used to create space between elements when necessary.
	 *
	 * @extends Component
	 * @class Spacer
	 */
	
	var Spacer = (function (_Component) {
	  _inherits(Spacer, _Component);
	
	  function Spacer() {
	    _classCallCheck(this, Spacer);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  Spacer.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-spacer ' + _Component.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Spacer.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };
	
	  return Spacer;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('Spacer', Spacer);
	
	exports['default'] = Spacer;
	module.exports = exports['default'];
	
	},{"../../component.js":67}],85:[function(_dereq_,module,exports){
	/**
	 * @file caption-settings-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');
	
	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * The menu item for caption track settings menu
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TextTrackMenuItem
	 * @class CaptionSettingsMenuItem
	 */
	
	var CaptionSettingsMenuItem = (function (_TextTrackMenuItem) {
	  _inherits(CaptionSettingsMenuItem, _TextTrackMenuItem);
	
	  function CaptionSettingsMenuItem(player, options) {
	    _classCallCheck(this, CaptionSettingsMenuItem);
	
	    options['track'] = {
	      'kind': options['kind'],
	      'player': player,
	      'label': options['kind'] + ' settings',
	      'selectable': false,
	      'default': false,
	      mode: 'disabled'
	    };
	
	    // CaptionSettingsMenuItem has no concept of 'selected'
	    options['selectable'] = false;
	
	    _TextTrackMenuItem.call(this, player, options);
	    this.addClass('vjs-texttrack-settings');
	    this.controlText(', opens ' + options['kind'] + ' settings dialog');
	  }
	
	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */
	
	  CaptionSettingsMenuItem.prototype.handleClick = function handleClick() {
	    this.player().getChild('textTrackSettings').show();
	    this.player().getChild('textTrackSettings').el_.focus();
	  };
	
	  return CaptionSettingsMenuItem;
	})(_textTrackMenuItemJs2['default']);
	
	_componentJs2['default'].registerComponent('CaptionSettingsMenuItem', CaptionSettingsMenuItem);
	exports['default'] = CaptionSettingsMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./text-track-menu-item.js":93}],86:[function(_dereq_,module,exports){
	/**
	 * @file captions-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackButtonJs = _dereq_('./text-track-button.js');
	
	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _captionSettingsMenuItemJs = _dereq_('./caption-settings-menu-item.js');
	
	var _captionSettingsMenuItemJs2 = _interopRequireDefault(_captionSettingsMenuItemJs);
	
	/**
	 * The button component for toggling and selecting captions
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class CaptionsButton
	 */
	
	var CaptionsButton = (function (_TextTrackButton) {
	  _inherits(CaptionsButton, _TextTrackButton);
	
	  function CaptionsButton(player, options, ready) {
	    _classCallCheck(this, CaptionsButton);
	
	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Captions Menu');
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  CaptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-captions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Update caption menu items
	   *
	   * @method update
	   */
	
	  CaptionsButton.prototype.update = function update() {
	    var threshold = 2;
	    _TextTrackButton.prototype.update.call(this);
	
	    // if native, then threshold is 1 because no settings button
	    if (this.player().tech_ && this.player().tech_['featuresNativeTextTracks']) {
	      threshold = 1;
	    }
	
	    if (this.items && this.items.length > threshold) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };
	
	  /**
	   * Create caption menu items
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */
	
	  CaptionsButton.prototype.createItems = function createItems() {
	    var items = [];
	
	    if (!(this.player().tech_ && this.player().tech_['featuresNativeTextTracks'])) {
	      items.push(new _captionSettingsMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
	    }
	
	    return _TextTrackButton.prototype.createItems.call(this, items);
	  };
	
	  return CaptionsButton;
	})(_textTrackButtonJs2['default']);
	
	CaptionsButton.prototype.kind_ = 'captions';
	CaptionsButton.prototype.controlText_ = 'Captions';
	
	_componentJs2['default'].registerComponent('CaptionsButton', CaptionsButton);
	exports['default'] = CaptionsButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./caption-settings-menu-item.js":85,"./text-track-button.js":92}],87:[function(_dereq_,module,exports){
	/**
	 * @file chapters-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackButtonJs = _dereq_('./text-track-button.js');
	
	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');
	
	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);
	
	var _chaptersTrackMenuItemJs = _dereq_('./chapters-track-menu-item.js');
	
	var _chaptersTrackMenuItemJs2 = _interopRequireDefault(_chaptersTrackMenuItemJs);
	
	var _menuMenuJs = _dereq_('../../menu/menu.js');
	
	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsToTitleCaseJs = _dereq_('../../utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	/**
	 * The button component for toggling and selecting chapters
	 * Chapters act much differently than other text tracks
	 * Cues are navigation vs. other tracks of alternative languages
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class ChaptersButton
	 */
	
	var ChaptersButton = (function (_TextTrackButton) {
	  _inherits(ChaptersButton, _TextTrackButton);
	
	  function ChaptersButton(player, options, ready) {
	    _classCallCheck(this, ChaptersButton);
	
	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Chapters Menu');
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  ChaptersButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-chapters-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Create a menu item for each text track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */
	
	  ChaptersButton.prototype.createItems = function createItems() {
	    var items = [];
	
	    var tracks = this.player_.textTracks();
	
	    if (!tracks) {
	      return items;
	    }
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	      if (track['kind'] === this.kind_) {
	        items.push(new _textTrackMenuItemJs2['default'](this.player_, {
	          'track': track
	        }));
	      }
	    }
	
	    return items;
	  };
	
	  /**
	   * Create menu from chapter buttons
	   *
	   * @return {Menu} Menu of chapter buttons
	   * @method createMenu
	   */
	
	  ChaptersButton.prototype.createMenu = function createMenu() {
	    var _this = this;
	
	    var tracks = this.player_.textTracks() || [];
	    var chaptersTrack = undefined;
	    var items = this.items || [];
	
	    for (var i = tracks.length - 1; i >= 0; i--) {
	
	      // We will always choose the last track as our chaptersTrack
	      var track = tracks[i];
	
	      if (track['kind'] === this.kind_) {
	        chaptersTrack = track;
	
	        break;
	      }
	    }
	
	    var menu = this.menu;
	    if (menu === undefined) {
	      menu = new _menuMenuJs2['default'](this.player_);
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: _utilsToTitleCaseJs2['default'](this.kind_),
	        tabIndex: -1
	      });
	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    } else {
	      // We will empty out the menu children each time because we want a
	      // fresh new menu child list each time
	      items.forEach(function (item) {
	        return menu.removeChild(item);
	      });
	      // Empty out the ChaptersButton menu items because we no longer need them
	      items = [];
	    }
	
	    if (chaptersTrack && chaptersTrack.cues == null) {
	      chaptersTrack['mode'] = 'hidden';
	
	      var remoteTextTrackEl = this.player_.remoteTextTrackEls().getTrackElementByTrack_(chaptersTrack);
	
	      if (remoteTextTrackEl) {
	        remoteTextTrackEl.addEventListener('load', function (event) {
	          return _this.update();
	        });
	      }
	    }
	
	    if (chaptersTrack && chaptersTrack.cues && chaptersTrack.cues.length > 0) {
	      var cues = chaptersTrack['cues'],
	          cue = undefined;
	
	      for (var i = 0, l = cues.length; i < l; i++) {
	        cue = cues[i];
	
	        var mi = new _chaptersTrackMenuItemJs2['default'](this.player_, {
	          'track': chaptersTrack,
	          'cue': cue
	        });
	
	        items.push(mi);
	
	        menu.addChild(mi);
	      }
	    }
	
	    if (items.length > 0) {
	      this.show();
	    }
	    // Assigning the value of items back to this.items for next iteration
	    this.items = items;
	    return menu;
	  };
	
	  return ChaptersButton;
	})(_textTrackButtonJs2['default']);
	
	ChaptersButton.prototype.kind_ = 'chapters';
	ChaptersButton.prototype.controlText_ = 'Chapters';
	
	_componentJs2['default'].registerComponent('ChaptersButton', ChaptersButton);
	exports['default'] = ChaptersButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu.js":111,"../../utils/dom.js":142,"../../utils/fn.js":144,"../../utils/to-title-case.js":151,"./chapters-track-menu-item.js":88,"./text-track-button.js":92,"./text-track-menu-item.js":93,"global/window":2}],88:[function(_dereq_,module,exports){
	/**
	 * @file chapters-track-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');
	
	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	/**
	 * The chapter track menu item
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class ChaptersTrackMenuItem
	 */
	
	var ChaptersTrackMenuItem = (function (_MenuItem) {
	  _inherits(ChaptersTrackMenuItem, _MenuItem);
	
	  function ChaptersTrackMenuItem(player, options) {
	    _classCallCheck(this, ChaptersTrackMenuItem);
	
	    var track = options['track'];
	    var cue = options['cue'];
	    var currentTime = player.currentTime();
	
	    // Modify options for parent MenuItem class's init.
	    options['label'] = cue.text;
	    options['selected'] = cue['startTime'] <= currentTime && currentTime < cue['endTime'];
	    _MenuItem.call(this, player, options);
	
	    this.track = track;
	    this.cue = cue;
	    track.addEventListener('cuechange', Fn.bind(this, this.update));
	  }
	
	  /**
	   * Handle click on menu item
	   *
	   * @method handleClick
	   */
	
	  ChaptersTrackMenuItem.prototype.handleClick = function handleClick() {
	    _MenuItem.prototype.handleClick.call(this);
	    this.player_.currentTime(this.cue.startTime);
	    this.update(this.cue.startTime);
	  };
	
	  /**
	   * Update chapter menu item
	   *
	   * @method update
	   */
	
	  ChaptersTrackMenuItem.prototype.update = function update() {
	    var cue = this.cue;
	    var currentTime = this.player_.currentTime();
	
	    // vjs.log(currentTime, cue.startTime);
	    this.selected(cue['startTime'] <= currentTime && currentTime < cue['endTime']);
	  };
	
	  return ChaptersTrackMenuItem;
	})(_menuMenuItemJs2['default']);
	
	_componentJs2['default'].registerComponent('ChaptersTrackMenuItem', ChaptersTrackMenuItem);
	exports['default'] = ChaptersTrackMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144}],89:[function(_dereq_,module,exports){
	/**
	 * @file descriptions-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackButtonJs = _dereq_('./text-track-button.js');
	
	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	/**
	 * The button component for toggling and selecting descriptions
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class DescriptionsButton
	 */
	
	var DescriptionsButton = (function (_TextTrackButton) {
	  _inherits(DescriptionsButton, _TextTrackButton);
	
	  function DescriptionsButton(player, options, ready) {
	    var _this = this;
	
	    _classCallCheck(this, DescriptionsButton);
	
	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Descriptions Menu');
	
	    var tracks = player.textTracks();
	
	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);
	
	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	  }
	
	  /**
	   * Handle text track change
	   *
	   * @method handleTracksChange
	   */
	
	  DescriptionsButton.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var disabled = false;
	
	    // Check whether a track of a different kind is showing
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];
	      if (track['kind'] !== this.kind_ && track['mode'] === 'showing') {
	        disabled = true;
	        break;
	      }
	    }
	
	    // If another track is showing, disable this menu button
	    if (disabled) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  };
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  DescriptionsButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-descriptions-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };
	
	  return DescriptionsButton;
	})(_textTrackButtonJs2['default']);
	
	DescriptionsButton.prototype.kind_ = 'descriptions';
	DescriptionsButton.prototype.controlText_ = 'Descriptions';
	
	_componentJs2['default'].registerComponent('DescriptionsButton', DescriptionsButton);
	exports['default'] = DescriptionsButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/fn.js":144,"./text-track-button.js":92}],90:[function(_dereq_,module,exports){
	/**
	 * @file off-text-track-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');
	
	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * A special menu item for turning of a specific type of text track
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends TextTrackMenuItem
	 * @class OffTextTrackMenuItem
	 */
	
	var OffTextTrackMenuItem = (function (_TextTrackMenuItem) {
	  _inherits(OffTextTrackMenuItem, _TextTrackMenuItem);
	
	  function OffTextTrackMenuItem(player, options) {
	    _classCallCheck(this, OffTextTrackMenuItem);
	
	    // Create pseudo track info
	    // Requires options['kind']
	    options['track'] = {
	      'kind': options['kind'],
	      'player': player,
	      'label': options['kind'] + ' off',
	      'default': false,
	      'mode': 'disabled'
	    };
	
	    // MenuItem is selectable
	    options['selectable'] = true;
	
	    _TextTrackMenuItem.call(this, player, options);
	    this.selected(true);
	  }
	
	  /**
	   * Handle text track change
	   *
	   * @param {Object} event Event object
	   * @method handleTracksChange
	   */
	
	  OffTextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    var tracks = this.player().textTracks();
	    var selected = true;
	
	    for (var i = 0, l = tracks.length; i < l; i++) {
	      var track = tracks[i];
	      if (track['kind'] === this.track['kind'] && track['mode'] === 'showing') {
	        selected = false;
	        break;
	      }
	    }
	
	    this.selected(selected);
	  };
	
	  return OffTextTrackMenuItem;
	})(_textTrackMenuItemJs2['default']);
	
	_componentJs2['default'].registerComponent('OffTextTrackMenuItem', OffTextTrackMenuItem);
	exports['default'] = OffTextTrackMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./text-track-menu-item.js":93}],91:[function(_dereq_,module,exports){
	/**
	 * @file subtitles-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackButtonJs = _dereq_('./text-track-button.js');
	
	var _textTrackButtonJs2 = _interopRequireDefault(_textTrackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * The button component for toggling and selecting subtitles
	 *
	 * @param {Object} player  Player object
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends TextTrackButton
	 * @class SubtitlesButton
	 */
	
	var SubtitlesButton = (function (_TextTrackButton) {
	  _inherits(SubtitlesButton, _TextTrackButton);
	
	  function SubtitlesButton(player, options, ready) {
	    _classCallCheck(this, SubtitlesButton);
	
	    _TextTrackButton.call(this, player, options, ready);
	    this.el_.setAttribute('aria-label', 'Subtitles Menu');
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  SubtitlesButton.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-subtitles-button ' + _TextTrackButton.prototype.buildCSSClass.call(this);
	  };
	
	  return SubtitlesButton;
	})(_textTrackButtonJs2['default']);
	
	SubtitlesButton.prototype.kind_ = 'subtitles';
	SubtitlesButton.prototype.controlText_ = 'Subtitles';
	
	_componentJs2['default'].registerComponent('SubtitlesButton', SubtitlesButton);
	exports['default'] = SubtitlesButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./text-track-button.js":92}],92:[function(_dereq_,module,exports){
	/**
	 * @file text-track-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackButtonJs = _dereq_('../track-button.js');
	
	var _trackButtonJs2 = _interopRequireDefault(_trackButtonJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _textTrackMenuItemJs = _dereq_('./text-track-menu-item.js');
	
	var _textTrackMenuItemJs2 = _interopRequireDefault(_textTrackMenuItemJs);
	
	var _offTextTrackMenuItemJs = _dereq_('./off-text-track-menu-item.js');
	
	var _offTextTrackMenuItemJs2 = _interopRequireDefault(_offTextTrackMenuItemJs);
	
	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class TextTrackButton
	 */
	
	var TextTrackButton = (function (_TrackButton) {
	  _inherits(TextTrackButton, _TrackButton);
	
	  function TextTrackButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, TextTrackButton);
	
	    options.tracks = player.textTracks();
	
	    _TrackButton.call(this, player, options);
	  }
	
	  /**
	   * Create a menu item for each text track
	   *
	   * @return {Array} Array of menu items
	   * @method createItems
	   */
	
	  TextTrackButton.prototype.createItems = function createItems() {
	    var items = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    // Add an OFF menu item to turn all tracks off
	    items.push(new _offTextTrackMenuItemJs2['default'](this.player_, { 'kind': this.kind_ }));
	
	    var tracks = this.player_.textTracks();
	
	    if (!tracks) {
	      return items;
	    }
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	
	      // only add tracks that are of the appropriate kind and have a label
	      if (track['kind'] === this.kind_) {
	        items.push(new _textTrackMenuItemJs2['default'](this.player_, {
	          // MenuItem is selectable
	          'selectable': true,
	          'track': track
	        }));
	      }
	    }
	
	    return items;
	  };
	
	  return TextTrackButton;
	})(_trackButtonJs2['default']);
	
	_componentJs2['default'].registerComponent('TextTrackButton', TextTrackButton);
	exports['default'] = TextTrackButton;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/fn.js":144,"../track-button.js":98,"./off-text-track-menu-item.js":90,"./text-track-menu-item.js":93}],93:[function(_dereq_,module,exports){
	/**
	 * @file text-track-menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuItemJs = _dereq_('../../menu/menu-item.js');
	
	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * The specific menu item type for selecting a language within a text track kind
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuItem
	 * @class TextTrackMenuItem
	 */
	
	var TextTrackMenuItem = (function (_MenuItem) {
	  _inherits(TextTrackMenuItem, _MenuItem);
	
	  function TextTrackMenuItem(player, options) {
	    var _this = this;
	
	    _classCallCheck(this, TextTrackMenuItem);
	
	    var track = options['track'];
	    var tracks = player.textTracks();
	
	    // Modify options for parent MenuItem class's init.
	    options['label'] = track['label'] || track['language'] || 'Unknown';
	    options['selected'] = track['default'] || track['mode'] === 'showing';
	
	    _MenuItem.call(this, player, options);
	
	    this.track = track;
	
	    if (tracks) {
	      (function () {
	        var changeHandler = Fn.bind(_this, _this.handleTracksChange);
	
	        tracks.addEventListener('change', changeHandler);
	        _this.on('dispose', function () {
	          tracks.removeEventListener('change', changeHandler);
	        });
	      })();
	    }
	
	    // iOS7 doesn't dispatch change events to TextTrackLists when an
	    // associated track's mode changes. Without something like
	    // Object.observe() (also not present on iOS7), it's not
	    // possible to detect changes to the mode attribute and polyfill
	    // the change event. As a poor substitute, we manually dispatch
	    // change events whenever the controls modify the mode.
	    if (tracks && tracks.onchange === undefined) {
	      (function () {
	        var event = undefined;
	
	        _this.on(['tap', 'click'], function () {
	          if (typeof _globalWindow2['default'].Event !== 'object') {
	            // Android 2.3 throws an Illegal Constructor error for window.Event
	            try {
	              event = new _globalWindow2['default'].Event('change');
	            } catch (err) {}
	          }
	
	          if (!event) {
	            event = _globalDocument2['default'].createEvent('Event');
	            event.initEvent('change', true, true);
	          }
	
	          tracks.dispatchEvent(event);
	        });
	      })();
	    }
	  }
	
	  /**
	   * Handle click on text track
	   *
	   * @method handleClick
	   */
	
	  TextTrackMenuItem.prototype.handleClick = function handleClick(event) {
	    var kind = this.track['kind'];
	    var tracks = this.player_.textTracks();
	
	    _MenuItem.prototype.handleClick.call(this, event);
	
	    if (!tracks) return;
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	
	      if (track['kind'] !== kind) {
	        continue;
	      }
	
	      if (track === this.track) {
	        track['mode'] = 'showing';
	      } else {
	        track['mode'] = 'disabled';
	      }
	    }
	  };
	
	  /**
	   * Handle text track change
	   *
	   * @method handleTracksChange
	   */
	
	  TextTrackMenuItem.prototype.handleTracksChange = function handleTracksChange(event) {
	    this.selected(this.track['mode'] === 'showing');
	  };
	
	  return TextTrackMenuItem;
	})(_menuMenuItemJs2['default']);
	
	_componentJs2['default'].registerComponent('TextTrackMenuItem', TextTrackMenuItem);
	exports['default'] = TextTrackMenuItem;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../menu/menu-item.js":110,"../../utils/fn.js":144,"global/document":1,"global/window":2}],94:[function(_dereq_,module,exports){
	/**
	 * @file current-time-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	/**
	 * Displays the current time
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class CurrentTimeDisplay
	 */
	
	var CurrentTimeDisplay = (function (_Component) {
	  _inherits(CurrentTimeDisplay, _Component);
	
	  function CurrentTimeDisplay(player, options) {
	    _classCallCheck(this, CurrentTimeDisplay);
	
	    _Component.call(this, player, options);
	
	    this.on(player, 'timeupdate', this.updateContent);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  CurrentTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-current-time vjs-time-control vjs-control'
	    });
	
	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-current-time-display',
	      // label the current time for screen reader users
	      innerHTML: '<span class="vjs-control-text">Current Time </span>' + '0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });
	
	    el.appendChild(this.contentEl_);
	    return el;
	  };
	
	  /**
	   * Update current time display
	   *
	   * @method updateContent
	   */
	
	  CurrentTimeDisplay.prototype.updateContent = function updateContent() {
	    // Allows for smooth scrubbing, when player can't keep up.
	    var time = this.player_.scrubbing() ? this.player_.getCache().currentTime : this.player_.currentTime();
	    var localizedText = this.localize('Current Time');
	    var formattedTime = _utilsFormatTimeJs2['default'](time, this.player_.duration());
	    if (formattedTime !== this.formattedTime_) {
	      this.formattedTime_ = formattedTime;
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime;
	    }
	  };
	
	  return CurrentTimeDisplay;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('CurrentTimeDisplay', CurrentTimeDisplay);
	exports['default'] = CurrentTimeDisplay;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],95:[function(_dereq_,module,exports){
	/**
	 * @file duration-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	/**
	 * Displays the duration
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class DurationDisplay
	 */
	
	var DurationDisplay = (function (_Component) {
	  _inherits(DurationDisplay, _Component);
	
	  function DurationDisplay(player, options) {
	    _classCallCheck(this, DurationDisplay);
	
	    _Component.call(this, player, options);
	
	    this.on(player, 'durationchange', this.updateContent);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  DurationDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-duration vjs-time-control vjs-control'
	    });
	
	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-duration-display',
	      // label the duration time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Duration Time') + '</span> 0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });
	
	    el.appendChild(this.contentEl_);
	    return el;
	  };
	
	  /**
	   * Update duration time display
	   *
	   * @method updateContent
	   */
	
	  DurationDisplay.prototype.updateContent = function updateContent() {
	    var duration = this.player_.duration();
	    if (duration && this.duration_ !== duration) {
	      this.duration_ = duration;
	      var localizedText = this.localize('Duration Time');
	      var formattedTime = _utilsFormatTimeJs2['default'](duration);
	      this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> ' + formattedTime; // label the duration time for screen reader users
	    }
	  };
	
	  return DurationDisplay;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('DurationDisplay', DurationDisplay);
	exports['default'] = DurationDisplay;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],96:[function(_dereq_,module,exports){
	/**
	 * @file remaining-time-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFormatTimeJs = _dereq_('../../utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	/**
	 * Displays the time left in the video
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class RemainingTimeDisplay
	 */
	
	var RemainingTimeDisplay = (function (_Component) {
	  _inherits(RemainingTimeDisplay, _Component);
	
	  function RemainingTimeDisplay(player, options) {
	    _classCallCheck(this, RemainingTimeDisplay);
	
	    _Component.call(this, player, options);
	
	    this.on(player, 'timeupdate', this.updateContent);
	    this.on(player, 'durationchange', this.updateContent);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  RemainingTimeDisplay.prototype.createEl = function createEl() {
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-remaining-time vjs-time-control vjs-control'
	    });
	
	    this.contentEl_ = Dom.createEl('div', {
	      className: 'vjs-remaining-time-display',
	      // label the remaining time for screen reader users
	      innerHTML: '<span class="vjs-control-text">' + this.localize('Remaining Time') + '</span> -0:00'
	    }, {
	      // tell screen readers not to automatically read the time as it changes
	      'aria-live': 'off'
	    });
	
	    el.appendChild(this.contentEl_);
	    return el;
	  };
	
	  /**
	   * Update remaining time display
	   *
	   * @method updateContent
	   */
	
	  RemainingTimeDisplay.prototype.updateContent = function updateContent() {
	    if (this.player_.duration()) {
	      var localizedText = this.localize('Remaining Time');
	      var formattedTime = _utilsFormatTimeJs2['default'](this.player_.remainingTime());
	      if (formattedTime !== this.formattedTime_) {
	        this.formattedTime_ = formattedTime;
	        this.contentEl_.innerHTML = '<span class="vjs-control-text">' + localizedText + '</span> -' + formattedTime;
	      }
	    }
	
	    // Allows for smooth scrubbing, when player can't keep up.
	    // var time = (this.player_.scrubbing()) ? this.player_.getCache().currentTime : this.player_.currentTime();
	    // this.contentEl_.innerHTML = vjs.formatTime(time, this.player_.duration());
	  };
	
	  return RemainingTimeDisplay;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('RemainingTimeDisplay', RemainingTimeDisplay);
	exports['default'] = RemainingTimeDisplay;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../utils/dom.js":142,"../../utils/format-time.js":145}],97:[function(_dereq_,module,exports){
	/**
	 * @file time-divider.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * The separator between the current time and duration.
	 * Can be hidden if it's not needed in the design.
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class TimeDivider
	 */
	
	var TimeDivider = (function (_Component) {
	  _inherits(TimeDivider, _Component);
	
	  function TimeDivider() {
	    _classCallCheck(this, TimeDivider);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  TimeDivider.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-time-control vjs-time-divider',
	      innerHTML: '<div><span>/</span></div>'
	    });
	  };
	
	  return TimeDivider;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('TimeDivider', TimeDivider);
	exports['default'] = TimeDivider;
	module.exports = exports['default'];
	
	},{"../../component.js":67}],98:[function(_dereq_,module,exports){
	/**
	 * @file track-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');
	
	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	/**
	 * The base class for buttons that toggle specific text track types (e.g. subtitles)
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends MenuButton
	 * @class TrackButton
	 */
	
	var TrackButton = (function (_MenuButton) {
	  _inherits(TrackButton, _MenuButton);
	
	  function TrackButton(player, options) {
	    _classCallCheck(this, TrackButton);
	
	    var tracks = options.tracks;
	
	    _MenuButton.call(this, player, options);
	
	    if (this.items.length <= 1) {
	      this.hide();
	    }
	
	    if (!tracks) {
	      return;
	    }
	
	    var updateHandler = Fn.bind(this, this.update);
	    tracks.addEventListener('removetrack', updateHandler);
	    tracks.addEventListener('addtrack', updateHandler);
	
	    this.player_.on('dispose', function () {
	      tracks.removeEventListener('removetrack', updateHandler);
	      tracks.removeEventListener('addtrack', updateHandler);
	    });
	  }
	
	  return TrackButton;
	})(_menuMenuButtonJs2['default']);
	
	_componentJs2['default'].registerComponent('TrackButton', TrackButton);
	exports['default'] = TrackButton;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../menu/menu-button.js":109,"../utils/fn.js":144}],99:[function(_dereq_,module,exports){
	/**
	 * @file volume-bar.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _sliderSliderJs = _dereq_('../../slider/slider.js');
	
	var _sliderSliderJs2 = _interopRequireDefault(_sliderSliderJs);
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('../../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	// Required children
	
	var _volumeLevelJs = _dereq_('./volume-level.js');
	
	var _volumeLevelJs2 = _interopRequireDefault(_volumeLevelJs);
	
	/**
	 * The bar that contains the volume level and can be clicked on to adjust the level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Slider
	 * @class VolumeBar
	 */
	
	var VolumeBar = (function (_Slider) {
	  _inherits(VolumeBar, _Slider);
	
	  function VolumeBar(player, options) {
	    _classCallCheck(this, VolumeBar);
	
	    _Slider.call(this, player, options);
	    this.on(player, 'volumechange', this.updateARIAAttributes);
	    player.ready(Fn.bind(this, this.updateARIAAttributes));
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  VolumeBar.prototype.createEl = function createEl() {
	    return _Slider.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-bar vjs-slider-bar'
	    }, {
	      'aria-label': 'volume level'
	    });
	  };
	
	  /**
	   * Handle mouse move on volume bar
	   *
	   * @method handleMouseMove
	   */
	
	  VolumeBar.prototype.handleMouseMove = function handleMouseMove(event) {
	    this.checkMuted();
	    this.player_.volume(this.calculateDistance(event));
	  };
	
	  VolumeBar.prototype.checkMuted = function checkMuted() {
	    if (this.player_.muted()) {
	      this.player_.muted(false);
	    }
	  };
	
	  /**
	   * Get percent of volume level
	   *
	   * @retun {Number} Volume level percent
	   * @method getPercent
	   */
	
	  VolumeBar.prototype.getPercent = function getPercent() {
	    if (this.player_.muted()) {
	      return 0;
	    } else {
	      return this.player_.volume();
	    }
	  };
	
	  /**
	   * Increase volume level for keyboard users
	   *
	   * @method stepForward
	   */
	
	  VolumeBar.prototype.stepForward = function stepForward() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() + 0.1);
	  };
	
	  /**
	   * Decrease volume level for keyboard users
	   *
	   * @method stepBack
	   */
	
	  VolumeBar.prototype.stepBack = function stepBack() {
	    this.checkMuted();
	    this.player_.volume(this.player_.volume() - 0.1);
	  };
	
	  /**
	   * Update ARIA accessibility attributes
	   *
	   * @method updateARIAAttributes
	   */
	
	  VolumeBar.prototype.updateARIAAttributes = function updateARIAAttributes() {
	    // Current value of volume bar as a percentage
	    var volume = (this.player_.volume() * 100).toFixed(2);
	    this.el_.setAttribute('aria-valuenow', volume);
	    this.el_.setAttribute('aria-valuetext', volume + '%');
	  };
	
	  return VolumeBar;
	})(_sliderSliderJs2['default']);
	
	VolumeBar.prototype.options_ = {
	  children: ['volumeLevel'],
	  'barName': 'volumeLevel'
	};
	
	VolumeBar.prototype.playerEvent = 'volumechange';
	
	_componentJs2['default'].registerComponent('VolumeBar', VolumeBar);
	exports['default'] = VolumeBar;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"../../slider/slider.js":119,"../../utils/fn.js":144,"./volume-level.js":101}],100:[function(_dereq_,module,exports){
	/**
	 * @file volume-control.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	// Required children
	
	var _volumeBarJs = _dereq_('./volume-bar.js');
	
	var _volumeBarJs2 = _interopRequireDefault(_volumeBarJs);
	
	/**
	 * The component for controlling the volume level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class VolumeControl
	 */
	
	var VolumeControl = (function (_Component) {
	  _inherits(VolumeControl, _Component);
	
	  function VolumeControl(player, options) {
	    _classCallCheck(this, VolumeControl);
	
	    _Component.call(this, player, options);
	
	    // hide volume controls when they're not supported by the current tech
	    if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	      this.addClass('vjs-hidden');
	    }
	    this.on(player, 'loadstart', function () {
	      if (player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    });
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  VolumeControl.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-control vjs-control'
	    });
	  };
	
	  return VolumeControl;
	})(_componentJs2['default']);
	
	VolumeControl.prototype.options_ = {
	  children: ['volumeBar']
	};
	
	_componentJs2['default'].registerComponent('VolumeControl', VolumeControl);
	exports['default'] = VolumeControl;
	module.exports = exports['default'];
	
	},{"../../component.js":67,"./volume-bar.js":99}],101:[function(_dereq_,module,exports){
	/**
	 * @file volume-level.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	/**
	 * Shows volume level
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class VolumeLevel
	 */
	
	var VolumeLevel = (function (_Component) {
	  _inherits(VolumeLevel, _Component);
	
	  function VolumeLevel() {
	    _classCallCheck(this, VolumeLevel);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  VolumeLevel.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-volume-level',
	      innerHTML: '<span class="vjs-control-text"></span>'
	    });
	  };
	
	  return VolumeLevel;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('VolumeLevel', VolumeLevel);
	exports['default'] = VolumeLevel;
	module.exports = exports['default'];
	
	},{"../../component.js":67}],102:[function(_dereq_,module,exports){
	/**
	 * @file volume-menu-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _popupPopupJs = _dereq_('../popup/popup.js');
	
	var _popupPopupJs2 = _interopRequireDefault(_popupPopupJs);
	
	var _popupPopupButtonJs = _dereq_('../popup/popup-button.js');
	
	var _popupPopupButtonJs2 = _interopRequireDefault(_popupPopupButtonJs);
	
	var _muteToggleJs = _dereq_('./mute-toggle.js');
	
	var _muteToggleJs2 = _interopRequireDefault(_muteToggleJs);
	
	var _volumeControlVolumeBarJs = _dereq_('./volume-control/volume-bar.js');
	
	var _volumeControlVolumeBarJs2 = _interopRequireDefault(_volumeControlVolumeBarJs);
	
	/**
	 * Button for volume popup
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends PopupButton
	 * @class VolumeMenuButton
	 */
	
	var VolumeMenuButton = (function (_PopupButton) {
	  _inherits(VolumeMenuButton, _PopupButton);
	
	  function VolumeMenuButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, VolumeMenuButton);
	
	    // Default to inline
	    if (options.inline === undefined) {
	      options.inline = true;
	    }
	
	    // If the vertical option isn't passed at all, default to true.
	    if (options.vertical === undefined) {
	      // If an inline volumeMenuButton is used, we should default to using
	      // a horizontal slider for obvious reasons.
	      if (options.inline) {
	        options.vertical = false;
	      } else {
	        options.vertical = true;
	      }
	    }
	
	    // The vertical option needs to be set on the volumeBar as well,
	    // since that will need to be passed along to the VolumeBar constructor
	    options.volumeBar = options.volumeBar || {};
	    options.volumeBar.vertical = !!options.vertical;
	
	    _PopupButton.call(this, player, options);
	
	    // Same listeners as MuteToggle
	    this.on(player, 'volumechange', this.volumeUpdate);
	    this.on(player, 'loadstart', this.volumeUpdate);
	
	    // hide mute toggle if the current tech doesn't support volume control
	    function updateVisibility() {
	      if (player.tech_ && player.tech_['featuresVolumeControl'] === false) {
	        this.addClass('vjs-hidden');
	      } else {
	        this.removeClass('vjs-hidden');
	      }
	    }
	
	    updateVisibility.call(this);
	    this.on(player, 'loadstart', updateVisibility);
	
	    this.on(this.volumeBar, ['slideractive', 'focus'], function () {
	      this.addClass('vjs-slider-active');
	    });
	
	    this.on(this.volumeBar, ['sliderinactive', 'blur'], function () {
	      this.removeClass('vjs-slider-active');
	    });
	
	    this.on(this.volumeBar, ['focus'], function () {
	      this.addClass('vjs-lock-showing');
	    });
	
	    this.on(this.volumeBar, ['blur'], function () {
	      this.removeClass('vjs-lock-showing');
	    });
	  }
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  VolumeMenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var orientationClass = '';
	    if (!!this.options_.vertical) {
	      orientationClass = 'vjs-volume-menu-button-vertical';
	    } else {
	      orientationClass = 'vjs-volume-menu-button-horizontal';
	    }
	
	    return 'vjs-volume-menu-button ' + _PopupButton.prototype.buildCSSClass.call(this) + ' ' + orientationClass;
	  };
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {Popup} The volume popup button
	   * @method createPopup
	   */
	
	  VolumeMenuButton.prototype.createPopup = function createPopup() {
	    var popup = new _popupPopupJs2['default'](this.player_, {
	      contentElType: 'div'
	    });
	
	    var vb = new _volumeControlVolumeBarJs2['default'](this.player_, this.options_.volumeBar);
	
	    popup.addChild(vb);
	
	    this.menuContent = popup;
	    this.volumeBar = vb;
	
	    this.attachVolumeBarEvents();
	
	    return popup;
	  };
	
	  /**
	   * Handle click on volume popup and calls super
	   *
	   * @method handleClick
	   */
	
	  VolumeMenuButton.prototype.handleClick = function handleClick() {
	    _muteToggleJs2['default'].prototype.handleClick.call(this);
	    _PopupButton.prototype.handleClick.call(this);
	  };
	
	  VolumeMenuButton.prototype.attachVolumeBarEvents = function attachVolumeBarEvents() {
	    this.menuContent.on(['mousedown', 'touchdown'], Fn.bind(this, this.handleMouseDown));
	  };
	
	  VolumeMenuButton.prototype.handleMouseDown = function handleMouseDown(event) {
	    this.on(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	    this.on(this.el_.ownerDocument, ['mouseup', 'touchend'], this.handleMouseUp);
	  };
	
	  VolumeMenuButton.prototype.handleMouseUp = function handleMouseUp(event) {
	    this.off(['mousemove', 'touchmove'], Fn.bind(this.volumeBar, this.volumeBar.handleMouseMove));
	  };
	
	  return VolumeMenuButton;
	})(_popupPopupButtonJs2['default']);
	
	VolumeMenuButton.prototype.volumeUpdate = _muteToggleJs2['default'].prototype.update;
	VolumeMenuButton.prototype.controlText_ = 'Mute';
	
	_componentJs2['default'].registerComponent('VolumeMenuButton', VolumeMenuButton);
	exports['default'] = VolumeMenuButton;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../popup/popup-button.js":115,"../popup/popup.js":116,"../utils/fn.js":144,"./mute-toggle.js":73,"./volume-control/volume-bar.js":99}],103:[function(_dereq_,module,exports){
	/**
	 * @file error-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _modalDialog = _dereq_('./modal-dialog');
	
	var _modalDialog2 = _interopRequireDefault(_modalDialog);
	
	var _utilsDom = _dereq_('./utils/dom');
	
	var Dom = _interopRequireWildcard(_utilsDom);
	
	var _utilsMergeOptions = _dereq_('./utils/merge-options');
	
	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);
	
	/**
	 * Display that an error has occurred making the video unplayable.
	 *
	 * @extends ModalDialog
	 * @class ErrorDisplay
	 */
	
	var ErrorDisplay = (function (_ModalDialog) {
	  _inherits(ErrorDisplay, _ModalDialog);
	
	  /**
	   * Constructor for error display modal.
	   *
	   * @param  {Player} player
	   * @param  {Object} [options]
	   */
	
	  function ErrorDisplay(player, options) {
	    _classCallCheck(this, ErrorDisplay);
	
	    _ModalDialog.call(this, player, options);
	    this.on(player, 'error', this.open);
	  }
	
	  /**
	   * Include the old class for backward-compatibility.
	   *
	   * This can be removed in 6.0.
	   *
	   * @method buildCSSClass
	   * @deprecated
	   * @return {String}
	   */
	
	  ErrorDisplay.prototype.buildCSSClass = function buildCSSClass() {
	    return 'vjs-error-display ' + _ModalDialog.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Generates the modal content based on the player error.
	   *
	   * @return {String|Null}
	   */
	
	  ErrorDisplay.prototype.content = function content() {
	    var error = this.player().error();
	    return error ? this.localize(error.message) : '';
	  };
	
	  return ErrorDisplay;
	})(_modalDialog2['default']);
	
	ErrorDisplay.prototype.options_ = _utilsMergeOptions2['default'](_modalDialog2['default'].prototype.options_, {
	  fillAlways: true,
	  temporary: false,
	  uncloseable: true
	});
	
	_component2['default'].registerComponent('ErrorDisplay', ErrorDisplay);
	exports['default'] = ErrorDisplay;
	module.exports = exports['default'];
	
	},{"./component":67,"./modal-dialog":112,"./utils/dom":142,"./utils/merge-options":148}],104:[function(_dereq_,module,exports){
	/**
	 * @file event-target.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var EventTarget = function EventTarget() {};
	
	EventTarget.prototype.allowedEvents_ = {};
	
	EventTarget.prototype.on = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;
	  this.addEventListener = function () {};
	  Events.on(this, type, fn);
	  this.addEventListener = ael;
	};
	EventTarget.prototype.addEventListener = EventTarget.prototype.on;
	
	EventTarget.prototype.off = function (type, fn) {
	  Events.off(this, type, fn);
	};
	EventTarget.prototype.removeEventListener = EventTarget.prototype.off;
	
	EventTarget.prototype.one = function (type, fn) {
	  // Remove the addEventListener alias before calling Events.on
	  // so we don't get into an infinite type loop
	  var ael = this.addEventListener;
	  this.addEventListener = function () {};
	  Events.one(this, type, fn);
	  this.addEventListener = ael;
	};
	
	EventTarget.prototype.trigger = function (event) {
	  var type = event.type || event;
	
	  if (typeof event === 'string') {
	    event = {
	      type: type
	    };
	  }
	  event = Events.fixEvent(event);
	
	  if (this.allowedEvents_[type] && this['on' + type]) {
	    this['on' + type](event);
	  }
	
	  Events.trigger(this, event);
	};
	// The standard DOM EventTarget.dispatchEvent() is aliased to trigger()
	EventTarget.prototype.dispatchEvent = EventTarget.prototype.trigger;
	
	exports['default'] = EventTarget;
	module.exports = exports['default'];
	
	},{"./utils/events.js":143}],105:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _utilsLog = _dereq_('./utils/log');
	
	var _utilsLog2 = _interopRequireDefault(_utilsLog);
	
	/*
	 * @file extend.js
	 *
	 * A combination of node inherits and babel's inherits (after transpile).
	 * Both work the same but node adds `super_` to the subClass
	 * and Bable adds the superClass as __proto__. Both seem useful.
	 */
	var _inherits = function _inherits(subClass, superClass) {
	  if (typeof superClass !== 'function' && superClass !== null) {
	    throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
	  }
	
	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	
	  if (superClass) {
	    // node
	    subClass.super_ = superClass;
	  }
	};
	
	/*
	 * Function for subclassing using the same inheritance that
	 * videojs uses internally
	 * ```js
	 * var Button = videojs.getComponent('Button');
	 * ```
	 * ```js
	 * var MyButton = videojs.extend(Button, {
	 *   constructor: function(player, options) {
	 *     Button.call(this, player, options);
	 *   },
	 *   onClick: function() {
	 *     // doSomething
	 *   }
	 * });
	 * ```
	 */
	var extendFn = function extendFn(superClass) {
	  var subClassMethods = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	  var subClass = function subClass() {
	    superClass.apply(this, arguments);
	  };
	  var methods = {};
	
	  if (typeof subClassMethods === 'object') {
	    if (typeof subClassMethods.init === 'function') {
	      _utilsLog2['default'].warn('Constructor logic via init() is deprecated; please use constructor() instead.');
	      subClassMethods.constructor = subClassMethods.init;
	    }
	    if (subClassMethods.constructor !== Object.prototype.constructor) {
	      subClass = subClassMethods.constructor;
	    }
	    methods = subClassMethods;
	  } else if (typeof subClassMethods === 'function') {
	    subClass = subClassMethods;
	  }
	
	  _inherits(subClass, superClass);
	
	  // Extend subObj's prototype with functions and other properties from props
	  for (var name in methods) {
	    if (methods.hasOwnProperty(name)) {
	      subClass.prototype[name] = methods[name];
	    }
	  }
	
	  return subClass;
	};
	
	exports['default'] = extendFn;
	module.exports = exports['default'];
	
	},{"./utils/log":147}],106:[function(_dereq_,module,exports){
	/**
	 * @file fullscreen-api.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/*
	 * Store the browser-specific methods for the fullscreen API
	 * @type {Object|undefined}
	 * @private
	 */
	var FullscreenApi = {};
	
	// browser API methods
	// map approach from Screenful.js - https://github.com/sindresorhus/screenfull.js
	var apiMap = [
	// Spec: https://dvcs.w3.org/hg/fullscreen/raw-file/tip/Overview.html
	['requestFullscreen', 'exitFullscreen', 'fullscreenElement', 'fullscreenEnabled', 'fullscreenchange', 'fullscreenerror'],
	// WebKit
	['webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitFullscreenElement', 'webkitFullscreenEnabled', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Old WebKit (Safari 5.1)
	['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitCurrentFullScreenElement', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitfullscreenerror'],
	// Mozilla
	['mozRequestFullScreen', 'mozCancelFullScreen', 'mozFullScreenElement', 'mozFullScreenEnabled', 'mozfullscreenchange', 'mozfullscreenerror'],
	// Microsoft
	['msRequestFullscreen', 'msExitFullscreen', 'msFullscreenElement', 'msFullscreenEnabled', 'MSFullscreenChange', 'MSFullscreenError']];
	
	var specApi = apiMap[0];
	var browserApi = undefined;
	
	// determine the supported set of functions
	for (var i = 0; i < apiMap.length; i++) {
	  // check for exitFullscreen function
	  if (apiMap[i][1] in _globalDocument2['default']) {
	    browserApi = apiMap[i];
	    break;
	  }
	}
	
	// map the browser API names to the spec API names
	if (browserApi) {
	  for (var i = 0; i < browserApi.length; i++) {
	    FullscreenApi[specApi[i]] = browserApi[i];
	  }
	}
	
	exports['default'] = FullscreenApi;
	module.exports = exports['default'];
	
	},{"global/document":1}],107:[function(_dereq_,module,exports){
	/**
	 * @file loading-spinner.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	/* Loading Spinner
	================================================================================ */
	/**
	 * Loading spinner for waiting events
	 *
	 * @extends Component
	 * @class LoadingSpinner
	 */
	
	var LoadingSpinner = (function (_Component) {
	  _inherits(LoadingSpinner, _Component);
	
	  function LoadingSpinner() {
	    _classCallCheck(this, LoadingSpinner);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @method createEl
	   */
	
	  LoadingSpinner.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-loading-spinner',
	      dir: 'ltr'
	    });
	  };
	
	  return LoadingSpinner;
	})(_component2['default']);
	
	_component2['default'].registerComponent('LoadingSpinner', LoadingSpinner);
	exports['default'] = LoadingSpinner;
	module.exports = exports['default'];
	
	},{"./component":67}],108:[function(_dereq_,module,exports){
	/**
	 * @file media-error.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/*
	 * Custom MediaError class which mimics the standard HTML5 MediaError class.
	 *
	 * @param {Number|String|Object|MediaError} value
	 *        This can be of multiple types:
	 *        - Number: should be a standard error code
	 *        - String: an error message (the code will be 0)
	 *        - Object: arbitrary properties
	 *        - MediaError (native): used to populate a video.js MediaError object
	 *        - MediaError (video.js): will return itself if it's already a
	 *          video.js MediaError object.
	 */
	function MediaError(value) {
	
	  // Allow redundant calls to this constructor to avoid having `instanceof`
	  // checks peppered around the code.
	  if (value instanceof MediaError) {
	    return value;
	  }
	
	  if (typeof value === 'number') {
	    this.code = value;
	  } else if (typeof value === 'string') {
	    // default code is zero, so this is a custom error
	    this.message = value;
	  } else if (typeof value === 'object') {
	
	    // We assign the `code` property manually because native MediaError objects
	    // do not expose it as an own/enumerable property of the object.
	    if (typeof value.code === 'number') {
	      this.code = value.code;
	    }
	
	    _objectAssign2['default'](this, value);
	  }
	
	  if (!this.message) {
	    this.message = MediaError.defaultMessages[this.code] || '';
	  }
	}
	
	/*
	 * The error code that refers two one of the defined
	 * MediaError types
	 *
	 * @type {Number}
	 */
	MediaError.prototype.code = 0;
	
	/*
	 * An optional message to be shown with the error.
	 * Message is not part of the HTML5 video spec
	 * but allows for more informative custom errors.
	 *
	 * @type {String}
	 */
	MediaError.prototype.message = '';
	
	/*
	 * An optional status code that can be set by plugins
	 * to allow even more detail about the error.
	 * For example the HLS plugin might provide the specific
	 * HTTP status code that was returned when the error
	 * occurred, then allowing a custom error overlay
	 * to display more information.
	 *
	 * @type {Array}
	 */
	MediaError.prototype.status = null;
	
	MediaError.errorTypes = ['MEDIA_ERR_CUSTOM', // = 0
	'MEDIA_ERR_ABORTED', // = 1
	'MEDIA_ERR_NETWORK', // = 2
	'MEDIA_ERR_DECODE', // = 3
	'MEDIA_ERR_SRC_NOT_SUPPORTED', // = 4
	'MEDIA_ERR_ENCRYPTED' // = 5
	];
	
	MediaError.defaultMessages = {
	  1: 'You aborted the media playback',
	  2: 'A network error caused the media download to fail part-way.',
	  3: 'The media playback was aborted due to a corruption problem or because the media used features your browser did not support.',
	  4: 'The media could not be loaded, either because the server or network failed or because the format is not supported.',
	  5: 'The media is encrypted and we do not have the keys to decrypt it.'
	};
	
	// Add types as properties on MediaError
	// e.g. MediaError.MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
	for (var errNum = 0; errNum < MediaError.errorTypes.length; errNum++) {
	  MediaError[MediaError.errorTypes[errNum]] = errNum;
	  // values should be accessible on both the class and instance
	  MediaError.prototype[MediaError.errorTypes[errNum]] = errNum;
	}
	
	exports['default'] = MediaError;
	module.exports = exports['default'];
	
	},{"object.assign":45}],109:[function(_dereq_,module,exports){
	/**
	 * @file menu-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _clickableComponentJs = _dereq_('../clickable-component.js');
	
	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _menuJs = _dereq_('./menu.js');
	
	var _menuJs2 = _interopRequireDefault(_menuJs);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	/**
	 * A button class with a popup menu
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MenuButton
	 */
	
	var MenuButton = (function (_ClickableComponent) {
	  _inherits(MenuButton, _ClickableComponent);
	
	  function MenuButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, MenuButton);
	
	    _ClickableComponent.call(this, player, options);
	
	    this.update();
	
	    this.enabled_ = true;
	
	    this.el_.setAttribute('aria-haspopup', 'true');
	    this.el_.setAttribute('role', 'menuitem');
	    this.on('keydown', this.handleSubmenuKeyPress);
	  }
	
	  /**
	   * Update menu
	   *
	   * @method update
	   */
	
	  MenuButton.prototype.update = function update() {
	    var menu = this.createMenu();
	
	    if (this.menu) {
	      this.removeChild(this.menu);
	    }
	
	    this.menu = menu;
	    this.addChild(menu);
	
	    /**
	     * Track the state of the menu button
	     *
	     * @type {Boolean}
	     * @private
	     */
	    this.buttonPressed_ = false;
	    this.el_.setAttribute('aria-expanded', 'false');
	
	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };
	
	  /**
	   * Create menu
	   *
	   * @return {Menu} The constructed menu
	   * @method createMenu
	   */
	
	  MenuButton.prototype.createMenu = function createMenu() {
	    var menu = new _menuJs2['default'](this.player_);
	
	    // Add a title list item to the top
	    if (this.options_.title) {
	      var title = Dom.createEl('li', {
	        className: 'vjs-menu-title',
	        innerHTML: _utilsToTitleCaseJs2['default'](this.options_.title),
	        tabIndex: -1
	      });
	      menu.children_.unshift(title);
	      Dom.insertElFirst(title, menu.contentEl());
	    }
	
	    this.items = this['createItems']();
	
	    if (this.items) {
	      // Add menu items to the menu
	      for (var i = 0; i < this.items.length; i++) {
	        menu.addItem(this.items[i]);
	      }
	    }
	
	    return menu;
	  };
	
	  /**
	   * Create the list of menu items. Specific to each subclass.
	   *
	   * @method createItems
	   */
	
	  MenuButton.prototype.createItems = function createItems() {};
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  MenuButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  MenuButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';
	
	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }
	
	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * When you click the button it adds focus, which
	   * will show the menu indefinitely.
	   * So we'll remove focus when the mouse leaves the button.
	   * Focus is needed for tab navigation.
	   * Allow sub components to stack CSS class names
	   *
	   * @method handleClick
	   */
	
	  MenuButton.prototype.handleClick = function handleClick() {
	    this.one(this.menu.contentEl(), 'mouseleave', Fn.bind(this, function (e) {
	      this.unpressButton();
	      this.el_.blur();
	    }));
	    if (this.buttonPressed_) {
	      this.unpressButton();
	    } else {
	      this.pressButton();
	    }
	  };
	
	  /**
	   * Handle key press on menu
	   *
	   * @param {Object} event Key press event
	   * @method handleKeyPress
	   */
	
	  MenuButton.prototype.handleKeyPress = function handleKeyPress(event) {
	
	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	      // Up (38) key or Down (40) key press the 'button'
	    } else if (event.which === 38 || event.which === 40) {
	        if (!this.buttonPressed_) {
	          this.pressButton();
	          event.preventDefault();
	        }
	      } else {
	        _ClickableComponent.prototype.handleKeyPress.call(this, event);
	      }
	  };
	
	  /**
	   * Handle key press on submenu
	   *
	   * @param {Object} event Key press event
	   * @method handleSubmenuKeyPress
	   */
	
	  MenuButton.prototype.handleSubmenuKeyPress = function handleSubmenuKeyPress(event) {
	
	    // Escape (27) key or Tab (9) key unpress the 'button'
	    if (event.which === 27 || event.which === 9) {
	      if (this.buttonPressed_) {
	        this.unpressButton();
	      }
	      // Don't preventDefault for Tab key - we still want to lose focus
	      if (event.which !== 9) {
	        event.preventDefault();
	      }
	    }
	  };
	
	  /**
	   * Makes changes based on button pressed
	   *
	   * @method pressButton
	   */
	
	  MenuButton.prototype.pressButton = function pressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = true;
	      this.menu.lockShowing();
	      this.el_.setAttribute('aria-expanded', 'true');
	      this.menu.focus(); // set the focus into the submenu
	    }
	  };
	
	  /**
	   * Makes changes based on button unpressed
	   *
	   * @method unpressButton
	   */
	
	  MenuButton.prototype.unpressButton = function unpressButton() {
	    if (this.enabled_) {
	      this.buttonPressed_ = false;
	      this.menu.unlockShowing();
	      this.el_.setAttribute('aria-expanded', 'false');
	      this.el_.focus(); // Set focus back to this menu button
	    }
	  };
	
	  /**
	   * Disable the menu button
	   *
	   * @return {Component}
	   * @method disable
	   */
	
	  MenuButton.prototype.disable = function disable() {
	    // Unpress, but don't force focus on this button
	    this.buttonPressed_ = false;
	    this.menu.unlockShowing();
	    this.el_.setAttribute('aria-expanded', 'false');
	
	    this.enabled_ = false;
	
	    return _ClickableComponent.prototype.disable.call(this);
	  };
	
	  /**
	   * Enable the menu button
	   *
	   * @return {Component}
	   * @method disable
	   */
	
	  MenuButton.prototype.enable = function enable() {
	    this.enabled_ = true;
	
	    return _ClickableComponent.prototype.enable.call(this);
	  };
	
	  return MenuButton;
	})(_clickableComponentJs2['default']);
	
	_componentJs2['default'].registerComponent('MenuButton', MenuButton);
	exports['default'] = MenuButton;
	module.exports = exports['default'];
	
	},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./menu.js":111}],110:[function(_dereq_,module,exports){
	/**
	 * @file menu-item.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _clickableComponentJs = _dereq_('../clickable-component.js');
	
	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/**
	 * The component for a menu item. `<li>`
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class MenuItem
	 */
	
	var MenuItem = (function (_ClickableComponent) {
	  _inherits(MenuItem, _ClickableComponent);
	
	  function MenuItem(player, options) {
	    _classCallCheck(this, MenuItem);
	
	    _ClickableComponent.call(this, player, options);
	
	    this.selectable = options['selectable'];
	
	    this.selected(options['selected']);
	
	    if (this.selectable) {
	      // TODO: May need to be either menuitemcheckbox or menuitemradio,
	      //       and may need logical grouping of menu items.
	      this.el_.setAttribute('role', 'menuitemcheckbox');
	    } else {
	      this.el_.setAttribute('role', 'menuitem');
	    }
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @param {String=} type Desc
	   * @param {Object=} props Desc
	   * @return {Element}
	   * @method createEl
	   */
	
	  MenuItem.prototype.createEl = function createEl(type, props, attrs) {
	    return _ClickableComponent.prototype.createEl.call(this, 'li', _objectAssign2['default']({
	      className: 'vjs-menu-item',
	      innerHTML: this.localize(this.options_['label']),
	      tabIndex: -1
	    }, props), attrs);
	  };
	
	  /**
	   * Handle a click on the menu item, and set it to selected
	   *
	   * @method handleClick
	   */
	
	  MenuItem.prototype.handleClick = function handleClick() {
	    this.selected(true);
	  };
	
	  /**
	   * Set this menu item as selected or not
	   *
	   * @param  {Boolean} selected
	   * @method selected
	   */
	
	  MenuItem.prototype.selected = function selected(_selected) {
	    if (this.selectable) {
	      if (_selected) {
	        this.addClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'true');
	        // aria-checked isn't fully supported by browsers/screen readers,
	        // so indicate selected state to screen reader in the control text.
	        this.controlText(', selected');
	      } else {
	        this.removeClass('vjs-selected');
	        this.el_.setAttribute('aria-checked', 'false');
	        // Indicate un-selected state to screen reader
	        // Note that a space clears out the selected state text
	        this.controlText(' ');
	      }
	    }
	  };
	
	  return MenuItem;
	})(_clickableComponentJs2['default']);
	
	_componentJs2['default'].registerComponent('MenuItem', MenuItem);
	exports['default'] = MenuItem;
	module.exports = exports['default'];
	
	},{"../clickable-component.js":65,"../component.js":67,"object.assign":45}],111:[function(_dereq_,module,exports){
	/**
	 * @file menu.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsEventsJs = _dereq_('../utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	/**
	 * The Menu component is used to build pop up menus, including subtitle and
	 * captions selection menus.
	 *
	 * @extends Component
	 * @class Menu
	 */
	
	var Menu = (function (_Component) {
	  _inherits(Menu, _Component);
	
	  function Menu(player, options) {
	    _classCallCheck(this, Menu);
	
	    _Component.call(this, player, options);
	
	    this.focusedChild_ = -1;
	
	    this.on('keydown', this.handleKeyPress);
	  }
	
	  /**
	   * Add a menu item to the menu
	   *
	   * @param {Object|String} component Component or component type to add
	   * @method addItem
	   */
	
	  Menu.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	      //TODO: Need to set keyboard focus back to the menuButton
	    }));
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Menu.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';
	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });
	    this.contentEl_.setAttribute('role', 'menu');
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });
	    el.setAttribute('role', 'presentation');
	    el.appendChild(this.contentEl_);
	
	    // Prevent clicks from bubbling up. Needed for Menu Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });
	
	    return el;
	  };
	
	  /**
	   * Handle key press for menu
	   *
	   * @param {Object} event Event object
	   * @method handleKeyPress
	   */
	
	  Menu.prototype.handleKeyPress = function handleKeyPress(event) {
	    if (event.which === 37 || event.which === 40) {
	      // Left and Down Arrows
	      event.preventDefault();
	      this.stepForward();
	    } else if (event.which === 38 || event.which === 39) {
	      // Up and Right Arrows
	      event.preventDefault();
	      this.stepBack();
	    }
	  };
	
	  /**
	   * Move to next (lower) menu item for keyboard users
	   *
	   * @method stepForward
	   */
	
	  Menu.prototype.stepForward = function stepForward() {
	    var stepChild = 0;
	
	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ + 1;
	    }
	    this.focus(stepChild);
	  };
	
	  /**
	   * Move to previous (higher) menu item for keyboard users
	   *
	   * @method stepBack
	   */
	
	  Menu.prototype.stepBack = function stepBack() {
	    var stepChild = 0;
	
	    if (this.focusedChild_ !== undefined) {
	      stepChild = this.focusedChild_ - 1;
	    }
	    this.focus(stepChild);
	  };
	
	  /**
	   * Set focus on a menu item in the menu
	   *
	   * @param {Object|String} item Index of child item set focus on
	   * @method focus
	   */
	
	  Menu.prototype.focus = function focus() {
	    var item = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];
	
	    var children = this.children().slice();
	    var haveTitle = children.length && children[0].className && /vjs-menu-title/.test(children[0].className);
	
	    if (haveTitle) {
	      children.shift();
	    }
	
	    if (children.length > 0) {
	      if (item < 0) {
	        item = 0;
	      } else if (item >= children.length) {
	        item = children.length - 1;
	      }
	
	      this.focusedChild_ = item;
	
	      children[item].el_.focus();
	    }
	  };
	
	  return Menu;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('Menu', Menu);
	exports['default'] = Menu;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],112:[function(_dereq_,module,exports){
	/**
	 * @file modal-dialog.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _utilsDom = _dereq_('./utils/dom');
	
	var Dom = _interopRequireWildcard(_utilsDom);
	
	var _utilsFn = _dereq_('./utils/fn');
	
	var Fn = _interopRequireWildcard(_utilsFn);
	
	var _utilsLog = _dereq_('./utils/log');
	
	var _utilsLog2 = _interopRequireDefault(_utilsLog);
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _closeButton = _dereq_('./close-button');
	
	var _closeButton2 = _interopRequireDefault(_closeButton);
	
	var MODAL_CLASS_NAME = 'vjs-modal-dialog';
	var ESC = 27;
	
	/**
	 * The `ModalDialog` displays over the video and its controls, which blocks
	 * interaction with the player until it is closed.
	 *
	 * Modal dialogs include a "Close" button and will close when that button
	 * is activated - or when ESC is pressed anywhere.
	 *
	 * @extends Component
	 * @class ModalDialog
	 */
	
	var ModalDialog = (function (_Component) {
	  _inherits(ModalDialog, _Component);
	
	  /**
	   * Constructor for modals.
	   *
	   * @param  {Player} player
	   * @param  {Object} [options]
	   * @param  {Mixed} [options.content=undefined]
	   *         Provide customized content for this modal.
	   *
	   * @param  {String} [options.description]
	   *         A text description for the modal, primarily for accessibility.
	   *
	   * @param  {Boolean} [options.fillAlways=false]
	   *         Normally, modals are automatically filled only the first time
	   *         they open. This tells the modal to refresh its content
	   *         every time it opens.
	   *
	   * @param  {String} [options.label]
	   *         A text label for the modal, primarily for accessibility.
	   *
	   * @param  {Boolean} [options.temporary=true]
	   *         If `true`, the modal can only be opened once; it will be
	   *         disposed as soon as it's closed.
	   *
	   * @param  {Boolean} [options.uncloseable=false]
	   *         If `true`, the user will not be able to close the modal
	   *         through the UI in the normal ways. Programmatic closing is
	   *         still possible.
	   *
	   */
	
	  function ModalDialog(player, options) {
	    _classCallCheck(this, ModalDialog);
	
	    _Component.call(this, player, options);
	    this.opened_ = this.hasBeenOpened_ = this.hasBeenFilled_ = false;
	
	    this.closeable(!this.options_.uncloseable);
	    this.content(this.options_.content);
	
	    // Make sure the contentEl is defined AFTER any children are initialized
	    // because we only want the contents of the modal in the contentEl
	    // (not the UI elements like the close button).
	    this.contentEl_ = Dom.createEl('div', {
	      className: MODAL_CLASS_NAME + '-content'
	    }, {
	      role: 'document'
	    });
	
	    this.descEl_ = Dom.createEl('p', {
	      className: MODAL_CLASS_NAME + '-description vjs-offscreen',
	      id: this.el().getAttribute('aria-describedby')
	    });
	
	    Dom.textContent(this.descEl_, this.description());
	    this.el_.appendChild(this.descEl_);
	    this.el_.appendChild(this.contentEl_);
	  }
	
	  /*
	   * Modal dialog default options.
	   *
	   * @type {Object}
	   * @private
	   */
	
	  /**
	   * Create the modal's DOM element
	   *
	   * @method createEl
	   * @return {Element}
	   */
	
	  ModalDialog.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass(),
	      tabIndex: -1
	    }, {
	      'aria-describedby': this.id() + '_description',
	      'aria-hidden': 'true',
	      'aria-label': this.label(),
	      role: 'dialog'
	    });
	  };
	
	  /**
	   * Build the modal's CSS class.
	   *
	   * @method buildCSSClass
	   * @return {String}
	   */
	
	  ModalDialog.prototype.buildCSSClass = function buildCSSClass() {
	    return MODAL_CLASS_NAME + ' vjs-hidden ' + _Component.prototype.buildCSSClass.call(this);
	  };
	
	  /**
	   * Handles key presses on the document, looking for ESC, which closes
	   * the modal.
	   *
	   * @method handleKeyPress
	   * @param  {Event} e
	   */
	
	  ModalDialog.prototype.handleKeyPress = function handleKeyPress(e) {
	    if (e.which === ESC && this.closeable()) {
	      this.close();
	    }
	  };
	
	  /**
	   * Returns the label string for this modal. Primarily used for accessibility.
	   *
	   * @return {String}
	   */
	
	  ModalDialog.prototype.label = function label() {
	    return this.options_.label || this.localize('Modal Window');
	  };
	
	  /**
	   * Returns the description string for this modal. Primarily used for
	   * accessibility.
	   *
	   * @return {String}
	   */
	
	  ModalDialog.prototype.description = function description() {
	    var desc = this.options_.description || this.localize('This is a modal window.');
	
	    // Append a universal closeability message if the modal is closeable.
	    if (this.closeable()) {
	      desc += ' ' + this.localize('This modal can be closed by pressing the Escape key or activating the close button.');
	    }
	
	    return desc;
	  };
	
	  /**
	   * Opens the modal.
	   *
	   * @method open
	   * @return {ModalDialog}
	   */
	
	  ModalDialog.prototype.open = function open() {
	    if (!this.opened_) {
	      var player = this.player();
	
	      this.trigger('beforemodalopen');
	      this.opened_ = true;
	
	      // Fill content if the modal has never opened before and
	      // never been filled.
	      if (this.options_.fillAlways || !this.hasBeenOpened_ && !this.hasBeenFilled_) {
	        this.fill();
	      }
	
	      // If the player was playing, pause it and take note of its previously
	      // playing state.
	      this.wasPlaying_ = !player.paused();
	
	      if (this.wasPlaying_) {
	        player.pause();
	      }
	
	      if (this.closeable()) {
	        this.on(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }
	
	      player.controls(false);
	      this.show();
	      this.el().setAttribute('aria-hidden', 'false');
	      this.trigger('modalopen');
	      this.hasBeenOpened_ = true;
	    }
	    return this;
	  };
	
	  /**
	   * Whether or not the modal is opened currently.
	   *
	   * @method opened
	   * @param  {Boolean} [value]
	   *         If given, it will open (`true`) or close (`false`) the modal.
	   *
	   * @return {Boolean}
	   */
	
	  ModalDialog.prototype.opened = function opened(value) {
	    if (typeof value === 'boolean') {
	      this[value ? 'open' : 'close']();
	    }
	    return this.opened_;
	  };
	
	  /**
	   * Closes the modal.
	   *
	   * @method close
	   * @return {ModalDialog}
	   */
	
	  ModalDialog.prototype.close = function close() {
	    if (this.opened_) {
	      var player = this.player();
	
	      this.trigger('beforemodalclose');
	      this.opened_ = false;
	
	      if (this.wasPlaying_) {
	        player.play();
	      }
	
	      if (this.closeable()) {
	        this.off(this.el_.ownerDocument, 'keydown', Fn.bind(this, this.handleKeyPress));
	      }
	
	      player.controls(true);
	      this.hide();
	      this.el().setAttribute('aria-hidden', 'true');
	      this.trigger('modalclose');
	
	      if (this.options_.temporary) {
	        this.dispose();
	      }
	    }
	    return this;
	  };
	
	  /**
	   * Whether or not the modal is closeable via the UI.
	   *
	   * @method closeable
	   * @param  {Boolean} [value]
	   *         If given as a Boolean, it will set the `closeable` option.
	   *
	   * @return {Boolean}
	   */
	
	  ModalDialog.prototype.closeable = function closeable(value) {
	    if (typeof value === 'boolean') {
	      var closeable = this.closeable_ = !!value;
	      var _close = this.getChild('closeButton');
	
	      // If this is being made closeable and has no close button, add one.
	      if (closeable && !_close) {
	
	        // The close button should be a child of the modal - not its
	        // content element, so temporarily change the content element.
	        var temp = this.contentEl_;
	        this.contentEl_ = this.el_;
	        _close = this.addChild('closeButton', { controlText: 'Close Modal Dialog' });
	        this.contentEl_ = temp;
	        this.on(_close, 'close', this.close);
	      }
	
	      // If this is being made uncloseable and has a close button, remove it.
	      if (!closeable && _close) {
	        this.off(_close, 'close', this.close);
	        this.removeChild(_close);
	        _close.dispose();
	      }
	    }
	    return this.closeable_;
	  };
	
	  /**
	   * Fill the modal's content element with the modal's "content" option.
	   *
	   * The content element will be emptied before this change takes place.
	   *
	   * @method fill
	   * @return {ModalDialog}
	   */
	
	  ModalDialog.prototype.fill = function fill() {
	    return this.fillWith(this.content());
	  };
	
	  /**
	   * Fill the modal's content element with arbitrary content.
	   *
	   * The content element will be emptied before this change takes place.
	   *
	   * @method fillWith
	   * @param  {Mixed} [content]
	   *         The same rules apply to this as apply to the `content` option.
	   *
	   * @return {ModalDialog}
	   */
	
	  ModalDialog.prototype.fillWith = function fillWith(content) {
	    var contentEl = this.contentEl();
	    var parentEl = contentEl.parentNode;
	    var nextSiblingEl = contentEl.nextSibling;
	
	    this.trigger('beforemodalfill');
	    this.hasBeenFilled_ = true;
	
	    // Detach the content element from the DOM before performing
	    // manipulation to avoid modifying the live DOM multiple times.
	    parentEl.removeChild(contentEl);
	    this.empty();
	    Dom.insertContent(contentEl, content);
	    this.trigger('modalfill');
	
	    // Re-inject the re-filled content element.
	    if (nextSiblingEl) {
	      parentEl.insertBefore(contentEl, nextSiblingEl);
	    } else {
	      parentEl.appendChild(contentEl);
	    }
	
	    return this;
	  };
	
	  /**
	   * Empties the content element.
	   *
	   * This happens automatically anytime the modal is filled.
	   *
	   * @method empty
	   * @return {ModalDialog}
	   */
	
	  ModalDialog.prototype.empty = function empty() {
	    this.trigger('beforemodalempty');
	    Dom.emptyEl(this.contentEl());
	    this.trigger('modalempty');
	    return this;
	  };
	
	  /**
	   * Gets or sets the modal content, which gets normalized before being
	   * rendered into the DOM.
	   *
	   * This does not update the DOM or fill the modal, but it is called during
	   * that process.
	   *
	   * @method content
	   * @param  {Mixed} [value]
	   *         If defined, sets the internal content value to be used on the
	   *         next call(s) to `fill`. This value is normalized before being
	   *         inserted. To "clear" the internal content value, pass `null`.
	   *
	   * @return {Mixed}
	   */
	
	  ModalDialog.prototype.content = function content(value) {
	    if (typeof value !== 'undefined') {
	      this.content_ = value;
	    }
	    return this.content_;
	  };
	
	  return ModalDialog;
	})(_component2['default']);
	
	ModalDialog.prototype.options_ = {
	  temporary: true
	};
	
	_component2['default'].registerComponent('ModalDialog', ModalDialog);
	exports['default'] = ModalDialog;
	module.exports = exports['default'];
	
	},{"./close-button":66,"./component":67,"./utils/dom":142,"./utils/fn":144,"./utils/log":147}],113:[function(_dereq_,module,exports){
	/**
	 * @file player.js
	 */
	// Subclasses Component
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('./component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _utilsDomJs = _dereq_('./utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsGuidJs = _dereq_('./utils/guid.js');
	
	var Guid = _interopRequireWildcard(_utilsGuidJs);
	
	var _utilsBrowserJs = _dereq_('./utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _utilsLogJs = _dereq_('./utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _utilsToTitleCaseJs = _dereq_('./utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');
	
	var _utilsBufferJs = _dereq_('./utils/buffer.js');
	
	var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');
	
	var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);
	
	var _fullscreenApiJs = _dereq_('./fullscreen-api.js');
	
	var _fullscreenApiJs2 = _interopRequireDefault(_fullscreenApiJs);
	
	var _mediaErrorJs = _dereq_('./media-error.js');
	
	var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);
	
	var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');
	
	var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _utilsMergeOptionsJs = _dereq_('./utils/merge-options.js');
	
	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);
	
	var _tracksTextTrackListConverterJs = _dereq_('./tracks/text-track-list-converter.js');
	
	var _tracksTextTrackListConverterJs2 = _interopRequireDefault(_tracksTextTrackListConverterJs);
	
	var _tracksAudioTrackListJs = _dereq_('./tracks/audio-track-list.js');
	
	var _tracksAudioTrackListJs2 = _interopRequireDefault(_tracksAudioTrackListJs);
	
	var _tracksVideoTrackListJs = _dereq_('./tracks/video-track-list.js');
	
	var _tracksVideoTrackListJs2 = _interopRequireDefault(_tracksVideoTrackListJs);
	
	// Include required child components (importing also registers them)
	
	var _techLoaderJs = _dereq_('./tech/loader.js');
	
	var _techLoaderJs2 = _interopRequireDefault(_techLoaderJs);
	
	var _posterImageJs = _dereq_('./poster-image.js');
	
	var _posterImageJs2 = _interopRequireDefault(_posterImageJs);
	
	var _tracksTextTrackDisplayJs = _dereq_('./tracks/text-track-display.js');
	
	var _tracksTextTrackDisplayJs2 = _interopRequireDefault(_tracksTextTrackDisplayJs);
	
	var _loadingSpinnerJs = _dereq_('./loading-spinner.js');
	
	var _loadingSpinnerJs2 = _interopRequireDefault(_loadingSpinnerJs);
	
	var _bigPlayButtonJs = _dereq_('./big-play-button.js');
	
	var _bigPlayButtonJs2 = _interopRequireDefault(_bigPlayButtonJs);
	
	var _controlBarControlBarJs = _dereq_('./control-bar/control-bar.js');
	
	var _controlBarControlBarJs2 = _interopRequireDefault(_controlBarControlBarJs);
	
	var _errorDisplayJs = _dereq_('./error-display.js');
	
	var _errorDisplayJs2 = _interopRequireDefault(_errorDisplayJs);
	
	var _tracksTextTrackSettingsJs = _dereq_('./tracks/text-track-settings.js');
	
	var _tracksTextTrackSettingsJs2 = _interopRequireDefault(_tracksTextTrackSettingsJs);
	
	var _modalDialog = _dereq_('./modal-dialog');
	
	var _modalDialog2 = _interopRequireDefault(_modalDialog);
	
	// Require html5 tech, at least for disposing the original video tag
	
	var _techTechJs = _dereq_('./tech/tech.js');
	
	var _techTechJs2 = _interopRequireDefault(_techTechJs);
	
	var _techHtml5Js = _dereq_('./tech/html5.js');
	
	var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);
	
	/**
	 * An instance of the `Player` class is created when any of the Video.js setup methods are used to initialize a video.
	 * ```js
	 * var myPlayer = videojs('example_video_1');
	 * ```
	 * In the following example, the `data-setup` attribute tells the Video.js library to create a player instance when the library is ready.
	 * ```html
	 * <video id="example_video_1" data-setup='{}' controls>
	 *   <source src="my-source.mp4" type="video/mp4">
	 * </video>
	 * ```
	 * After an instance has been created it can be accessed globally using `Video('example_video_1')`.
	 *
	 * @param {Element} tag        The original video tag used for configuring options
	 * @param {Object=} options    Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class Player
	 */
	
	var Player = (function (_Component) {
	  _inherits(Player, _Component);
	
	  /**
	   * player's constructor function
	   *
	   * @constructs
	   * @method init
	   * @param {Element} tag        The original video tag used for configuring options
	   * @param {Object=} options    Player options
	   * @param {Function=} ready    Ready callback function
	   */
	
	  function Player(tag, options, ready) {
	    var _this = this;
	
	    _classCallCheck(this, Player);
	
	    // Make sure tag ID exists
	    tag.id = tag.id || 'vjs_video_' + Guid.newGUID();
	
	    // Set Options
	    // The options argument overrides options set in the video tag
	    // which overrides globally set options.
	    // This latter part coincides with the load order
	    // (tag must exist before Player)
	    options = _objectAssign2['default'](Player.getTagSettings(tag), options);
	
	    // Delay the initialization of children because we need to set up
	    // player properties first, and can't use `this` before `super()`
	    options.initChildren = false;
	
	    // Same with creating the element
	    options.createEl = false;
	
	    // we don't want the player to report touch activity on itself
	    // see enableTouchActivity in Component
	    options.reportTouchActivity = false;
	
	    // If language is not set, get the closest lang attribute
	    if (!options.language) {
	      if (typeof tag.closest === 'function') {
	        var closest = tag.closest('[lang]');
	        if (closest) {
	          options.language = closest.getAttribute('lang');
	        }
	      } else {
	        var element = tag;
	        while (element && element.nodeType === 1) {
	          if (Dom.getElAttributes(element).hasOwnProperty('lang')) {
	            options.language = element.getAttribute('lang');
	            break;
	          }
	          element = element.parentNode;
	        }
	      }
	    }
	
	    // Run base component initializing with new options
	    _Component.call(this, null, options, ready);
	
	    // if the global option object was accidentally blown away by
	    // someone, bail early with an informative error
	    if (!this.options_ || !this.options_.techOrder || !this.options_.techOrder.length) {
	      throw new Error('No techOrder specified. Did you overwrite ' + 'videojs.options instead of just changing the ' + 'properties you want to override?');
	    }
	
	    this.tag = tag; // Store the original tag used to set options
	
	    // Store the tag attributes used to restore html5 element
	    this.tagAttributes = tag && Dom.getElAttributes(tag);
	
	    // Update current language
	    this.language(this.options_.language);
	
	    // Update Supported Languages
	    if (options.languages) {
	      (function () {
	        // Normalise player option languages to lowercase
	        var languagesToLower = {};
	
	        Object.getOwnPropertyNames(options.languages).forEach(function (name) {
	          languagesToLower[name.toLowerCase()] = options.languages[name];
	        });
	        _this.languages_ = languagesToLower;
	      })();
	    } else {
	      this.languages_ = Player.prototype.options_.languages;
	    }
	
	    // Cache for video property values.
	    this.cache_ = {};
	
	    // Set poster
	    this.poster_ = options.poster || '';
	
	    // Set controls
	    this.controls_ = !!options.controls;
	
	    // Original tag settings stored in options
	    // now remove immediately so native controls don't flash.
	    // May be turned back on by HTML5 tech if nativeControlsForTouch is true
	    tag.controls = false;
	
	    /*
	     * Store the internal state of scrubbing
	     *
	     * @private
	     * @return {Boolean} True if the user is scrubbing
	     */
	    this.scrubbing_ = false;
	
	    this.el_ = this.createEl();
	
	    // We also want to pass the original player options to each component and plugin
	    // as well so they don't need to reach back into the player for options later.
	    // We also need to do another copy of this.options_ so we don't end up with
	    // an infinite loop.
	    var playerOptionsCopy = _utilsMergeOptionsJs2['default'](this.options_);
	
	    // Load plugins
	    if (options.plugins) {
	      (function () {
	        var plugins = options.plugins;
	
	        Object.getOwnPropertyNames(plugins).forEach(function (name) {
	          if (typeof this[name] === 'function') {
	            this[name](plugins[name]);
	          } else {
	            _utilsLogJs2['default'].error('Unable to find plugin:', name);
	          }
	        }, _this);
	      })();
	    }
	
	    this.options_.playerOptions = playerOptionsCopy;
	
	    this.initChildren();
	
	    // Set isAudio based on whether or not an audio tag was used
	    this.isAudio(tag.nodeName.toLowerCase() === 'audio');
	
	    // Update controls className. Can't do this when the controls are initially
	    // set because the element doesn't exist yet.
	    if (this.controls()) {
	      this.addClass('vjs-controls-enabled');
	    } else {
	      this.addClass('vjs-controls-disabled');
	    }
	
	    // Set ARIA label and region role depending on player type
	    this.el_.setAttribute('role', 'region');
	    if (this.isAudio()) {
	      this.el_.setAttribute('aria-label', 'audio player');
	    } else {
	      this.el_.setAttribute('aria-label', 'video player');
	    }
	
	    if (this.isAudio()) {
	      this.addClass('vjs-audio');
	    }
	
	    if (this.flexNotSupported_()) {
	      this.addClass('vjs-no-flex');
	    }
	
	    // TODO: Make this smarter. Toggle user state between touching/mousing
	    // using events, since devices can have both touch and mouse events.
	    // if (browser.TOUCH_ENABLED) {
	    //   this.addClass('vjs-touch-enabled');
	    // }
	
	    // iOS Safari has broken hover handling
	    if (!browser.IS_IOS) {
	      this.addClass('vjs-workinghover');
	    }
	
	    // Make player easily findable by ID
	    Player.players[this.id_] = this;
	
	    // When the player is first initialized, trigger activity so components
	    // like the control bar show themselves if needed
	    this.userActive(true);
	    this.reportUserActivity();
	    this.listenForUserActivity_();
	
	    this.on('fullscreenchange', this.handleFullscreenChange_);
	    this.on('stageclick', this.handleStageClick_);
	  }
	
	  /*
	   * Global player list
	   *
	   * @type {Object}
	   */
	
	  /**
	   * Destroys the video player and does any necessary cleanup
	   * ```js
	   *     myPlayer.dispose();
	   * ```
	   * This is especially helpful if you are dynamically adding and removing videos
	   * to/from the DOM.
	   *
	   * @method dispose
	   */
	
	  Player.prototype.dispose = function dispose() {
	    this.trigger('dispose');
	    // prevent dispose from being called twice
	    this.off('dispose');
	
	    if (this.styleEl_ && this.styleEl_.parentNode) {
	      this.styleEl_.parentNode.removeChild(this.styleEl_);
	    }
	
	    // Kill reference to this player
	    Player.players[this.id_] = null;
	    if (this.tag && this.tag.player) {
	      this.tag.player = null;
	    }
	    if (this.el_ && this.el_.player) {
	      this.el_.player = null;
	    }
	
	    if (this.tech_) {
	      this.tech_.dispose();
	    }
	
	    _Component.prototype.dispose.call(this);
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Player.prototype.createEl = function createEl() {
	    var el = this.el_ = _Component.prototype.createEl.call(this, 'div');
	    var tag = this.tag;
	
	    // Remove width/height attrs from tag so CSS can make it 100% width/height
	    tag.removeAttribute('width');
	    tag.removeAttribute('height');
	
	    // Copy over all the attributes from the tag, including ID and class
	    // ID will now reference player box, not the video tag
	    var attrs = Dom.getElAttributes(tag);
	
	    Object.getOwnPropertyNames(attrs).forEach(function (attr) {
	      // workaround so we don't totally break IE7
	      // http://stackoverflow.com/questions/3653444/css-styles-not-applied-on-dynamic-elements-in-internet-explorer-7
	      if (attr === 'class') {
	        el.className = attrs[attr];
	      } else {
	        el.setAttribute(attr, attrs[attr]);
	      }
	    });
	
	    // Update tag id/class for use as HTML5 playback tech
	    // Might think we should do this after embedding in container so .vjs-tech class
	    // doesn't flash 100% width/height, but class only applies with .video-js parent
	    tag.playerId = tag.id;
	    tag.id += '_html5_api';
	    tag.className = 'vjs-tech';
	
	    // Make player findable on elements
	    tag.player = el.player = this;
	    // Default state of video is paused
	    this.addClass('vjs-paused');
	
	    // Add a style element in the player that we'll use to set the width/height
	    // of the player in a way that's still overrideable by CSS, just like the
	    // video element
	    if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	      this.styleEl_ = stylesheet.createStyleElement('vjs-styles-dimensions');
	      var defaultsStyleEl = Dom.$('.vjs-styles-defaults');
	      var head = Dom.$('head');
	      head.insertBefore(this.styleEl_, defaultsStyleEl ? defaultsStyleEl.nextSibling : head.firstChild);
	    }
	
	    // Pass in the width/height/aspectRatio options which will update the style el
	    this.width(this.options_.width);
	    this.height(this.options_.height);
	    this.fluid(this.options_.fluid);
	    this.aspectRatio(this.options_.aspectRatio);
	
	    // Hide any links within the video/audio tag, because IE doesn't hide them completely.
	    var links = tag.getElementsByTagName('a');
	    for (var i = 0; i < links.length; i++) {
	      var linkEl = links.item(i);
	      Dom.addElClass(linkEl, 'vjs-hidden');
	      linkEl.setAttribute('hidden', 'hidden');
	    }
	
	    // insertElFirst seems to cause the networkState to flicker from 3 to 2, so
	    // keep track of the original for later so we can know if the source originally failed
	    tag.initNetworkState_ = tag.networkState;
	
	    // Wrap video tag in div (el/box) container
	    if (tag.parentNode) {
	      tag.parentNode.insertBefore(el, tag);
	    }
	
	    // insert the tag as the first child of the player element
	    // then manually add it to the children array so that this.addChild
	    // will work properly for other components
	    Dom.insertElFirst(tag, el); // Breaks iPhone, fixed in HTML5 setup.
	    this.children_.unshift(tag);
	
	    this.el_ = el;
	
	    return el;
	  };
	
	  /**
	   * Get/set player width
	   *
	   * @param {Number=} value Value for width
	   * @return {Number} Width when getting
	   * @method width
	   */
	
	  Player.prototype.width = function width(value) {
	    return this.dimension('width', value);
	  };
	
	  /**
	   * Get/set player height
	   *
	   * @param {Number=} value Value for height
	   * @return {Number} Height when getting
	   * @method height
	   */
	
	  Player.prototype.height = function height(value) {
	    return this.dimension('height', value);
	  };
	
	  /**
	   * Get/set dimension for player
	   *
	   * @param {String} dimension Either width or height
	   * @param {Number=} value Value for dimension
	   * @return {Component}
	   * @method dimension
	   */
	
	  Player.prototype.dimension = function dimension(_dimension, value) {
	    var privDimension = _dimension + '_';
	
	    if (value === undefined) {
	      return this[privDimension] || 0;
	    }
	
	    if (value === '') {
	      // If an empty string is given, reset the dimension to be automatic
	      this[privDimension] = undefined;
	    } else {
	      var parsedVal = parseFloat(value);
	
	      if (isNaN(parsedVal)) {
	        _utilsLogJs2['default'].error('Improper value "' + value + '" supplied for for ' + _dimension);
	        return this;
	      }
	
	      this[privDimension] = parsedVal;
	    }
	
	    this.updateStyleEl_();
	    return this;
	  };
	
	  /**
	   * Add/remove the vjs-fluid class
	   *
	   * @param {Boolean} bool Value of true adds the class, value of false removes the class
	   * @method fluid
	   */
	
	  Player.prototype.fluid = function fluid(bool) {
	    if (bool === undefined) {
	      return !!this.fluid_;
	    }
	
	    this.fluid_ = !!bool;
	
	    if (bool) {
	      this.addClass('vjs-fluid');
	    } else {
	      this.removeClass('vjs-fluid');
	    }
	  };
	
	  /**
	   * Get/Set the aspect ratio
	   *
	   * @param {String=} ratio Aspect ratio for player
	   * @return aspectRatio
	   * @method aspectRatio
	   */
	
	  Player.prototype.aspectRatio = function aspectRatio(ratio) {
	    if (ratio === undefined) {
	      return this.aspectRatio_;
	    }
	
	    // Check for width:height format
	    if (!/^\d+\:\d+$/.test(ratio)) {
	      throw new Error('Improper value supplied for aspect ratio. The format should be width:height, for example 16:9.');
	    }
	    this.aspectRatio_ = ratio;
	
	    // We're assuming if you set an aspect ratio you want fluid mode,
	    // because in fixed mode you could calculate width and height yourself.
	    this.fluid(true);
	
	    this.updateStyleEl_();
	  };
	
	  /**
	   * Update styles of the player element (height, width and aspect ratio)
	   *
	   * @method updateStyleEl_
	   */
	
	  Player.prototype.updateStyleEl_ = function updateStyleEl_() {
	    if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE === true) {
	      var _width = typeof this.width_ === 'number' ? this.width_ : this.options_.width;
	      var _height = typeof this.height_ === 'number' ? this.height_ : this.options_.height;
	      var techEl = this.tech_ && this.tech_.el();
	
	      if (techEl) {
	        if (_width >= 0) {
	          techEl.width = _width;
	        }
	        if (_height >= 0) {
	          techEl.height = _height;
	        }
	      }
	
	      return;
	    }
	
	    var width = undefined;
	    var height = undefined;
	    var aspectRatio = undefined;
	    var idClass = undefined;
	
	    // The aspect ratio is either used directly or to calculate width and height.
	    if (this.aspectRatio_ !== undefined && this.aspectRatio_ !== 'auto') {
	      // Use any aspectRatio that's been specifically set
	      aspectRatio = this.aspectRatio_;
	    } else if (this.videoWidth()) {
	      // Otherwise try to get the aspect ratio from the video metadata
	      aspectRatio = this.videoWidth() + ':' + this.videoHeight();
	    } else {
	      // Or use a default. The video element's is 2:1, but 16:9 is more common.
	      aspectRatio = '16:9';
	    }
	
	    // Get the ratio as a decimal we can use to calculate dimensions
	    var ratioParts = aspectRatio.split(':');
	    var ratioMultiplier = ratioParts[1] / ratioParts[0];
	
	    if (this.width_ !== undefined) {
	      // Use any width that's been specifically set
	      width = this.width_;
	    } else if (this.height_ !== undefined) {
	      // Or calulate the width from the aspect ratio if a height has been set
	      width = this.height_ / ratioMultiplier;
	    } else {
	      // Or use the video's metadata, or use the video el's default of 300
	      width = this.videoWidth() || 300;
	    }
	
	    if (this.height_ !== undefined) {
	      // Use any height that's been specifically set
	      height = this.height_;
	    } else {
	      // Otherwise calculate the height from the ratio and the width
	      height = width * ratioMultiplier;
	    }
	
	    // Ensure the CSS class is valid by starting with an alpha character
	    if (/^[^a-zA-Z]/.test(this.id())) {
	      idClass = 'dimensions-' + this.id();
	    } else {
	      idClass = this.id() + '-dimensions';
	    }
	
	    // Ensure the right class is still on the player for the style element
	    this.addClass(idClass);
	
	    stylesheet.setTextContent(this.styleEl_, '\n      .' + idClass + ' {\n        width: ' + width + 'px;\n        height: ' + height + 'px;\n      }\n\n      .' + idClass + '.vjs-fluid {\n        padding-top: ' + ratioMultiplier * 100 + '%;\n      }\n    ');
	  };
	
	  /**
	   * Load the Media Playback Technology (tech)
	   * Load/Create an instance of playback technology including element and API methods
	   * And append playback element in player div.
	   *
	   * @param {String} techName Name of the playback technology
	   * @param {String} source Video source
	   * @method loadTech_
	   * @private
	   */
	
	  Player.prototype.loadTech_ = function loadTech_(techName, source) {
	
	    // Pause and remove current playback technology
	    if (this.tech_) {
	      this.unloadTech_();
	    }
	
	    // get rid of the HTML5 video tag as soon as we are using another tech
	    if (techName !== 'Html5' && this.tag) {
	      _techTechJs2['default'].getTech('Html5').disposeMediaElement(this.tag);
	      this.tag.player = null;
	      this.tag = null;
	    }
	
	    this.techName_ = techName;
	
	    // Turn off API access because we're loading a new tech that might load asynchronously
	    this.isReady_ = false;
	
	    // Grab tech-specific options from player options and add source and parent element to use.
	    var techOptions = _objectAssign2['default']({
	      'nativeControlsForTouch': this.options_.nativeControlsForTouch,
	      'source': source,
	      'playerId': this.id(),
	      'techId': this.id() + '_' + techName + '_api',
	      'videoTracks': this.videoTracks_,
	      'textTracks': this.textTracks_,
	      'audioTracks': this.audioTracks_,
	      'autoplay': this.options_.autoplay,
	      'preload': this.options_.preload,
	      'loop': this.options_.loop,
	      'muted': this.options_.muted,
	      'poster': this.poster(),
	      'language': this.language(),
	      'vtt.js': this.options_['vtt.js']
	    }, this.options_[techName.toLowerCase()]);
	
	    if (this.tag) {
	      techOptions.tag = this.tag;
	    }
	
	    if (source) {
	      this.currentType_ = source.type;
	      if (source.src === this.cache_.src && this.cache_.currentTime > 0) {
	        techOptions.startTime = this.cache_.currentTime;
	      }
	
	      this.cache_.src = source.src;
	    }
	
	    // Initialize tech instance
	    var techComponent = _techTechJs2['default'].getTech(techName);
	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!techComponent) {
	      techComponent = _componentJs2['default'].getComponent(techName);
	    }
	    this.tech_ = new techComponent(techOptions);
	
	    // player.triggerReady is always async, so don't need this to be async
	    this.tech_.ready(Fn.bind(this, this.handleTechReady_), true);
	
	    _tracksTextTrackListConverterJs2['default'].jsonToTextTracks(this.textTracksJson_ || [], this.tech_);
	
	    // Listen to all HTML5-defined events and trigger them on the player
	    this.on(this.tech_, 'loadstart', this.handleTechLoadStart_);
	    this.on(this.tech_, 'waiting', this.handleTechWaiting_);
	    this.on(this.tech_, 'canplay', this.handleTechCanPlay_);
	    this.on(this.tech_, 'canplaythrough', this.handleTechCanPlayThrough_);
	    this.on(this.tech_, 'playing', this.handleTechPlaying_);
	    this.on(this.tech_, 'ended', this.handleTechEnded_);
	    this.on(this.tech_, 'seeking', this.handleTechSeeking_);
	    this.on(this.tech_, 'seeked', this.handleTechSeeked_);
	    this.on(this.tech_, 'play', this.handleTechPlay_);
	    this.on(this.tech_, 'firstplay', this.handleTechFirstPlay_);
	    this.on(this.tech_, 'pause', this.handleTechPause_);
	    this.on(this.tech_, 'progress', this.handleTechProgress_);
	    this.on(this.tech_, 'durationchange', this.handleTechDurationChange_);
	    this.on(this.tech_, 'fullscreenchange', this.handleTechFullscreenChange_);
	    this.on(this.tech_, 'error', this.handleTechError_);
	    this.on(this.tech_, 'suspend', this.handleTechSuspend_);
	    this.on(this.tech_, 'abort', this.handleTechAbort_);
	    this.on(this.tech_, 'emptied', this.handleTechEmptied_);
	    this.on(this.tech_, 'stalled', this.handleTechStalled_);
	    this.on(this.tech_, 'loadedmetadata', this.handleTechLoadedMetaData_);
	    this.on(this.tech_, 'loadeddata', this.handleTechLoadedData_);
	    this.on(this.tech_, 'timeupdate', this.handleTechTimeUpdate_);
	    this.on(this.tech_, 'ratechange', this.handleTechRateChange_);
	    this.on(this.tech_, 'volumechange', this.handleTechVolumeChange_);
	    this.on(this.tech_, 'texttrackchange', this.handleTechTextTrackChange_);
	    this.on(this.tech_, 'loadedmetadata', this.updateStyleEl_);
	    this.on(this.tech_, 'posterchange', this.handleTechPosterChange_);
	    this.on(this.tech_, 'textdata', this.handleTechTextData_);
	
	    this.usingNativeControls(this.techGet_('controls'));
	
	    if (this.controls() && !this.usingNativeControls()) {
	      this.addTechControlsListeners_();
	    }
	
	    // Add the tech element in the DOM if it was not already there
	    // Make sure to not insert the original video element if using Html5
	    if (this.tech_.el().parentNode !== this.el() && (techName !== 'Html5' || !this.tag)) {
	      Dom.insertElFirst(this.tech_.el(), this.el());
	    }
	
	    // Get rid of the original video tag reference after the first tech is loaded
	    if (this.tag) {
	      this.tag.player = null;
	      this.tag = null;
	    }
	  };
	
	  /**
	   * Unload playback technology
	   *
	   * @method unloadTech_
	   * @private
	   */
	
	  Player.prototype.unloadTech_ = function unloadTech_() {
	    // Save the current text tracks so that we can reuse the same text tracks with the next tech
	    this.videoTracks_ = this.videoTracks();
	    this.textTracks_ = this.textTracks();
	    this.audioTracks_ = this.audioTracks();
	    this.textTracksJson_ = _tracksTextTrackListConverterJs2['default'].textTracksToJson(this.tech_);
	
	    this.isReady_ = false;
	
	    this.tech_.dispose();
	
	    this.tech_ = false;
	  };
	
	  /**
	   * Return a reference to the current tech.
	   * It will only return a reference to the tech if given an object with the
	   * `IWillNotUseThisInPlugins` property on it. This is try and prevent misuse
	   * of techs by plugins.
	   *
	   * @param {Object}
	   * @return {Object} The Tech
	   * @method tech
	   */
	
	  Player.prototype.tech = function tech(safety) {
	    if (safety && safety.IWillNotUseThisInPlugins) {
	      return this.tech_;
	    }
	    var errorText = '\n      Please make sure that you are not using this inside of a plugin.\n      To disable this alert and error, please pass in an object with\n      `IWillNotUseThisInPlugins` to the `tech` method. See\n      https://github.com/videojs/video.js/issues/2617 for more info.\n    ';
	    _globalWindow2['default'].alert(errorText);
	    throw new Error(errorText);
	  };
	
	  /**
	   * Set up click and touch listeners for the playback element
	   *
	   * On desktops, a click on the video itself will toggle playback,
	   * on a mobile device a click on the video toggles controls.
	   * (toggling controls is done by toggling the user state between active and
	   * inactive)
	   * A tap can signal that a user has become active, or has become inactive
	   * e.g. a quick tap on an iPhone movie should reveal the controls. Another
	   * quick tap should hide them again (signaling the user is in an inactive
	   * viewing state)
	   * In addition to this, we still want the user to be considered inactive after
	   * a few seconds of inactivity.
	   * Note: the only part of iOS interaction we can't mimic with this setup
	   * is a touch and hold on the video element counting as activity in order to
	   * keep the controls showing, but that shouldn't be an issue. A touch and hold
	   * on any controls will still keep the user active
	   *
	   * @private
	   * @method addTechControlsListeners_
	   */
	
	  Player.prototype.addTechControlsListeners_ = function addTechControlsListeners_() {
	    // Make sure to remove all the previous listeners in case we are called multiple times.
	    this.removeTechControlsListeners_();
	
	    // Some browsers (Chrome & IE) don't trigger a click on a flash swf, but do
	    // trigger mousedown/up.
	    // http://stackoverflow.com/questions/1444562/javascript-onclick-event-over-flash-object
	    // Any touch events are set to block the mousedown event from happening
	    this.on(this.tech_, 'mousedown', this.handleTechClick_);
	
	    // If the controls were hidden we don't want that to change without a tap event
	    // so we'll check if the controls were already showing before reporting user
	    // activity
	    this.on(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.on(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.on(this.tech_, 'touchend', this.handleTechTouchEnd_);
	
	    // The tap listener needs to come after the touchend listener because the tap
	    // listener cancels out any reportedUserActivity when setting userActive(false)
	    this.on(this.tech_, 'tap', this.handleTechTap_);
	  };
	
	  /**
	   * Remove the listeners used for click and tap controls. This is needed for
	   * toggling to controls disabled, where a tap/touch should do nothing.
	   *
	   * @method removeTechControlsListeners_
	   * @private
	   */
	
	  Player.prototype.removeTechControlsListeners_ = function removeTechControlsListeners_() {
	    // We don't want to just use `this.off()` because there might be other needed
	    // listeners added by techs that extend this.
	    this.off(this.tech_, 'tap', this.handleTechTap_);
	    this.off(this.tech_, 'touchstart', this.handleTechTouchStart_);
	    this.off(this.tech_, 'touchmove', this.handleTechTouchMove_);
	    this.off(this.tech_, 'touchend', this.handleTechTouchEnd_);
	    this.off(this.tech_, 'mousedown', this.handleTechClick_);
	  };
	
	  /**
	   * Player waits for the tech to be ready
	   *
	   * @method handleTechReady_
	   * @private
	   */
	
	  Player.prototype.handleTechReady_ = function handleTechReady_() {
	    this.triggerReady();
	
	    // Keep the same volume as before
	    if (this.cache_.volume) {
	      this.techCall_('setVolume', this.cache_.volume);
	    }
	
	    // Look if the tech found a higher resolution poster while loading
	    this.handleTechPosterChange_();
	
	    // Update the duration if available
	    this.handleTechDurationChange_();
	
	    // Chrome and Safari both have issues with autoplay.
	    // In Safari (5.1.1), when we move the video element into the container div, autoplay doesn't work.
	    // In Chrome (15), if you have autoplay + a poster + no controls, the video gets hidden (but audio plays)
	    // This fixes both issues. Need to wait for API, so it updates displays correctly
	    if ((this.src() || this.currentSrc()) && this.tag && this.options_.autoplay && this.paused()) {
	      try {
	        delete this.tag.poster; // Chrome Fix. Fixed in Chrome v16.
	      } catch (e) {
	        _utilsLogJs2['default']('deleting tag.poster throws in some browsers', e);
	      }
	      this.play();
	    }
	  };
	
	  /**
	   * Fired when the user agent begins looking for media data
	   *
	   * @private
	   * @method handleTechLoadStart_
	   */
	
	  Player.prototype.handleTechLoadStart_ = function handleTechLoadStart_() {
	    // TODO: Update to use `emptied` event instead. See #1277.
	
	    this.removeClass('vjs-ended');
	
	    // reset the error state
	    this.error(null);
	
	    // If it's already playing we want to trigger a firstplay event now.
	    // The firstplay event relies on both the play and loadstart events
	    // which can happen in any order for a new source
	    if (!this.paused()) {
	      this.trigger('loadstart');
	      this.trigger('firstplay');
	    } else {
	      // reset the hasStarted state
	      this.hasStarted(false);
	      this.trigger('loadstart');
	    }
	  };
	
	  /**
	   * Add/remove the vjs-has-started class
	   *
	   * @param {Boolean} hasStarted The value of true adds the class the value of false remove the class
	   * @return {Boolean} Boolean value if has started
	   * @private
	   * @method hasStarted
	   */
	
	  Player.prototype.hasStarted = function hasStarted(_hasStarted) {
	    if (_hasStarted !== undefined) {
	      // only update if this is a new value
	      if (this.hasStarted_ !== _hasStarted) {
	        this.hasStarted_ = _hasStarted;
	        if (_hasStarted) {
	          this.addClass('vjs-has-started');
	          // trigger the firstplay event if this newly has played
	          this.trigger('firstplay');
	        } else {
	          this.removeClass('vjs-has-started');
	        }
	      }
	      return this;
	    }
	    return !!this.hasStarted_;
	  };
	
	  /**
	   * Fired whenever the media begins or resumes playback
	   *
	   * @private
	   * @method handleTechPlay_
	   */
	
	  Player.prototype.handleTechPlay_ = function handleTechPlay_() {
	    this.removeClass('vjs-ended');
	    this.removeClass('vjs-paused');
	    this.addClass('vjs-playing');
	
	    // hide the poster when the user hits play
	    // https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-play
	    this.hasStarted(true);
	
	    this.trigger('play');
	  };
	
	  /**
	   * Fired whenever the media begins waiting
	   *
	   * @private
	   * @method handleTechWaiting_
	   */
	
	  Player.prototype.handleTechWaiting_ = function handleTechWaiting_() {
	    var _this2 = this;
	
	    this.addClass('vjs-waiting');
	    this.trigger('waiting');
	    this.one('timeupdate', function () {
	      return _this2.removeClass('vjs-waiting');
	    });
	  };
	
	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechCanPlay_
	   */
	
	  Player.prototype.handleTechCanPlay_ = function handleTechCanPlay_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('canplay');
	  };
	
	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechCanPlayThrough_
	   */
	
	  Player.prototype.handleTechCanPlayThrough_ = function handleTechCanPlayThrough_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('canplaythrough');
	  };
	
	  /**
	   * A handler for events that signal that waiting has ended
	   * which is not consistent between browsers. See #1351
	   *
	   * @private
	   * @method handleTechPlaying_
	   */
	
	  Player.prototype.handleTechPlaying_ = function handleTechPlaying_() {
	    this.removeClass('vjs-waiting');
	    this.trigger('playing');
	  };
	
	  /**
	   * Fired whenever the player is jumping to a new time
	   *
	   * @private
	   * @method handleTechSeeking_
	   */
	
	  Player.prototype.handleTechSeeking_ = function handleTechSeeking_() {
	    this.addClass('vjs-seeking');
	    this.trigger('seeking');
	  };
	
	  /**
	   * Fired when the player has finished jumping to a new time
	   *
	   * @private
	   * @method handleTechSeeked_
	   */
	
	  Player.prototype.handleTechSeeked_ = function handleTechSeeked_() {
	    this.removeClass('vjs-seeking');
	    this.trigger('seeked');
	  };
	
	  /**
	   * Fired the first time a video is played
	   * Not part of the HLS spec, and we're not sure if this is the best
	   * implementation yet, so use sparingly. If you don't have a reason to
	   * prevent playback, use `myPlayer.one('play');` instead.
	   *
	   * @private
	   * @method handleTechFirstPlay_
	   */
	
	  Player.prototype.handleTechFirstPlay_ = function handleTechFirstPlay_() {
	    //If the first starttime attribute is specified
	    //then we will start at the given offset in seconds
	    if (this.options_.starttime) {
	      this.currentTime(this.options_.starttime);
	    }
	
	    this.addClass('vjs-has-started');
	    this.trigger('firstplay');
	  };
	
	  /**
	   * Fired whenever the media has been paused
	   *
	   * @private
	   * @method handleTechPause_
	   */
	
	  Player.prototype.handleTechPause_ = function handleTechPause_() {
	    this.removeClass('vjs-playing');
	    this.addClass('vjs-paused');
	    this.trigger('pause');
	  };
	
	  /**
	   * Fired while the user agent is downloading media data
	   *
	   * @private
	   * @method handleTechProgress_
	   */
	
	  Player.prototype.handleTechProgress_ = function handleTechProgress_() {
	    this.trigger('progress');
	  };
	
	  /**
	   * Fired when the end of the media resource is reached (currentTime == duration)
	   *
	   * @private
	   * @method handleTechEnded_
	   */
	
	  Player.prototype.handleTechEnded_ = function handleTechEnded_() {
	    this.addClass('vjs-ended');
	    if (this.options_.loop) {
	      this.currentTime(0);
	      this.play();
	    } else if (!this.paused()) {
	      this.pause();
	    }
	
	    this.trigger('ended');
	  };
	
	  /**
	   * Fired when the duration of the media resource is first known or changed
	   *
	   * @private
	   * @method handleTechDurationChange_
	   */
	
	  Player.prototype.handleTechDurationChange_ = function handleTechDurationChange_() {
	    this.duration(this.techGet_('duration'));
	  };
	
	  /**
	   * Handle a click on the media element to play/pause
	   *
	   * @param {Object=} event Event object
	   * @private
	   * @method handleTechClick_
	   */
	
	  Player.prototype.handleTechClick_ = function handleTechClick_(event) {
	    // We're using mousedown to detect clicks thanks to Flash, but mousedown
	    // will also be triggered with right-clicks, so we need to prevent that
	    if (event.button !== 0) return;
	
	    // When controls are disabled a click should not toggle playback because
	    // the click is considered a control
	    if (this.controls()) {
	      if (this.paused()) {
	        this.play();
	      } else {
	        this.pause();
	      }
	    }
	  };
	
	  /**
	   * Handle a tap on the media element. It will toggle the user
	   * activity state, which hides and shows the controls.
	   *
	   * @private
	   * @method handleTechTap_
	   */
	
	  Player.prototype.handleTechTap_ = function handleTechTap_() {
	    this.userActive(!this.userActive());
	  };
	
	  /**
	   * Handle touch to start
	   *
	   * @private
	   * @method handleTechTouchStart_
	   */
	
	  Player.prototype.handleTechTouchStart_ = function handleTechTouchStart_() {
	    this.userWasActive = this.userActive();
	  };
	
	  /**
	   * Handle touch to move
	   *
	   * @private
	   * @method handleTechTouchMove_
	   */
	
	  Player.prototype.handleTechTouchMove_ = function handleTechTouchMove_() {
	    if (this.userWasActive) {
	      this.reportUserActivity();
	    }
	  };
	
	  /**
	   * Handle touch to end
	   *
	   * @private
	   * @method handleTechTouchEnd_
	   */
	
	  Player.prototype.handleTechTouchEnd_ = function handleTechTouchEnd_(event) {
	    // Stop the mouse events from also happening
	    event.preventDefault();
	  };
	
	  /**
	   * Fired when the player switches in or out of fullscreen mode
	   *
	   * @private
	   * @method handleFullscreenChange_
	   */
	
	  Player.prototype.handleFullscreenChange_ = function handleFullscreenChange_() {
	    if (this.isFullscreen()) {
	      this.addClass('vjs-fullscreen');
	    } else {
	      this.removeClass('vjs-fullscreen');
	    }
	  };
	
	  /**
	   * native click events on the SWF aren't triggered on IE11, Win8.1RT
	   * use stageclick events triggered from inside the SWF instead
	   *
	   * @private
	   * @method handleStageClick_
	   */
	
	  Player.prototype.handleStageClick_ = function handleStageClick_() {
	    this.reportUserActivity();
	  };
	
	  /**
	   * Handle Tech Fullscreen Change
	   *
	   * @private
	   * @method handleTechFullscreenChange_
	   */
	
	  Player.prototype.handleTechFullscreenChange_ = function handleTechFullscreenChange_(event, data) {
	    if (data) {
	      this.isFullscreen(data.isFullscreen);
	    }
	    this.trigger('fullscreenchange');
	  };
	
	  /**
	   * Fires when an error occurred during the loading of an audio/video
	   *
	   * @private
	   * @method handleTechError_
	   */
	
	  Player.prototype.handleTechError_ = function handleTechError_() {
	    var error = this.tech_.error();
	    this.error(error);
	  };
	
	  /**
	   * Fires when the browser is intentionally not getting media data
	   *
	   * @private
	   * @method handleTechSuspend_
	   */
	
	  Player.prototype.handleTechSuspend_ = function handleTechSuspend_() {
	    this.trigger('suspend');
	  };
	
	  /**
	   * Fires when the loading of an audio/video is aborted
	   *
	   * @private
	   * @method handleTechAbort_
	   */
	
	  Player.prototype.handleTechAbort_ = function handleTechAbort_() {
	    this.trigger('abort');
	  };
	
	  /**
	   * Fires when the current playlist is empty
	   *
	   * @private
	   * @method handleTechEmptied_
	   */
	
	  Player.prototype.handleTechEmptied_ = function handleTechEmptied_() {
	    this.trigger('emptied');
	  };
	
	  /**
	   * Fires when the browser is trying to get media data, but data is not available
	   *
	   * @private
	   * @method handleTechStalled_
	   */
	
	  Player.prototype.handleTechStalled_ = function handleTechStalled_() {
	    this.trigger('stalled');
	  };
	
	  /**
	   * Fires when the browser has loaded meta data for the audio/video
	   *
	   * @private
	   * @method handleTechLoadedMetaData_
	   */
	
	  Player.prototype.handleTechLoadedMetaData_ = function handleTechLoadedMetaData_() {
	    this.trigger('loadedmetadata');
	  };
	
	  Player.prototype.handleTechTextData_ = function handleTechTextData_() {
	    var data = null;
	    if (arguments.length > 1) {
	      data = arguments[1];
	    }
	    this.trigger('textdata', data);
	  };
	
	  /**
	   * Fires when the browser has loaded the current frame of the audio/video
	   *
	   * @private
	   * @method handleTechLoadedData_
	   */
	
	  Player.prototype.handleTechLoadedData_ = function handleTechLoadedData_() {
	    this.trigger('loadeddata');
	  };
	
	  /**
	   * Fires when the current playback position has changed
	   *
	   * @private
	   * @method handleTechTimeUpdate_
	   */
	
	  Player.prototype.handleTechTimeUpdate_ = function handleTechTimeUpdate_() {
	    this.trigger('timeupdate');
	  };
	
	  /**
	   * Fires when the playing speed of the audio/video is changed
	   *
	   * @private
	   * @method handleTechRateChange_
	   */
	
	  Player.prototype.handleTechRateChange_ = function handleTechRateChange_() {
	    this.trigger('ratechange');
	  };
	
	  /**
	   * Fires when the volume has been changed
	   *
	   * @private
	   * @method handleTechVolumeChange_
	   */
	
	  Player.prototype.handleTechVolumeChange_ = function handleTechVolumeChange_() {
	    this.trigger('volumechange');
	  };
	
	  /**
	   * Fires when the text track has been changed
	   *
	   * @private
	   * @method handleTechTextTrackChange_
	   */
	
	  Player.prototype.handleTechTextTrackChange_ = function handleTechTextTrackChange_() {
	    this.trigger('texttrackchange');
	  };
	
	  /**
	   * Get object for cached values.
	   *
	   * @return {Object}
	   * @method getCache
	   */
	
	  Player.prototype.getCache = function getCache() {
	    return this.cache_;
	  };
	
	  /**
	   * Pass values to the playback tech
	   *
	   * @param {String=} method Method
	   * @param {Object=} arg Argument
	   * @private
	   * @method techCall_
	   */
	
	  Player.prototype.techCall_ = function techCall_(method, arg) {
	    // If it's not ready yet, call method when it is
	    if (this.tech_ && !this.tech_.isReady_) {
	      this.tech_.ready(function () {
	        this[method](arg);
	      }, true);
	
	      // Otherwise call method now
	    } else {
	        try {
	          this.tech_ && this.tech_[method](arg);
	        } catch (e) {
	          _utilsLogJs2['default'](e);
	          throw e;
	        }
	      }
	  };
	
	  /**
	   * Get calls can't wait for the tech, and sometimes don't need to.
	   *
	   * @param {String} method Tech method
	   * @return {Method}
	   * @private
	   * @method techGet_
	   */
	
	  Player.prototype.techGet_ = function techGet_(method) {
	    if (this.tech_ && this.tech_.isReady_) {
	
	      // Flash likes to die and reload when you hide or reposition it.
	      // In these cases the object methods go away and we get errors.
	      // When that happens we'll catch the errors and inform tech that it's not ready any more.
	      try {
	        return this.tech_[method]();
	      } catch (e) {
	        // When building additional tech libs, an expected method may not be defined yet
	        if (this.tech_[method] === undefined) {
	          _utilsLogJs2['default']('Video.js: ' + method + ' method not defined for ' + this.techName_ + ' playback technology.', e);
	        } else {
	          // When a method isn't available on the object it throws a TypeError
	          if (e.name === 'TypeError') {
	            _utilsLogJs2['default']('Video.js: ' + method + ' unavailable on ' + this.techName_ + ' playback technology element.', e);
	            this.tech_.isReady_ = false;
	          } else {
	            _utilsLogJs2['default'](e);
	          }
	        }
	        throw e;
	      }
	    }
	
	    return;
	  };
	
	  /**
	   * start media playback
	   * ```js
	   *     myPlayer.play();
	   * ```
	   *
	   * @return {Player} self
	   * @method play
	   */
	
	  Player.prototype.play = function play() {
	    // Only calls the tech's play if we already have a src loaded
	    if (this.src() || this.currentSrc()) {
	      this.techCall_('play');
	    } else {
	      this.tech_.one('loadstart', function () {
	        this.play();
	      });
	    }
	
	    return this;
	  };
	
	  /**
	   * Pause the video playback
	   * ```js
	   *     myPlayer.pause();
	   * ```
	   *
	   * @return {Player} self
	   * @method pause
	   */
	
	  Player.prototype.pause = function pause() {
	    this.techCall_('pause');
	    return this;
	  };
	
	  /**
	   * Check if the player is paused
	   * ```js
	   *     var isPaused = myPlayer.paused();
	   *     var isPlaying = !myPlayer.paused();
	   * ```
	   *
	   * @return {Boolean} false if the media is currently playing, or true otherwise
	   * @method paused
	   */
	
	  Player.prototype.paused = function paused() {
	    // The initial state of paused should be true (in Safari it's actually false)
	    return this.techGet_('paused') === false ? false : true;
	  };
	
	  /**
	   * Returns whether or not the user is "scrubbing". Scrubbing is when the user
	   * has clicked the progress bar handle and is dragging it along the progress bar.
	   *
	   * @param  {Boolean} isScrubbing   True/false the user is scrubbing
	   * @return {Boolean}               The scrubbing status when getting
	   * @return {Object}                The player when setting
	   * @method scrubbing
	   */
	
	  Player.prototype.scrubbing = function scrubbing(isScrubbing) {
	    if (isScrubbing !== undefined) {
	      this.scrubbing_ = !!isScrubbing;
	
	      if (isScrubbing) {
	        this.addClass('vjs-scrubbing');
	      } else {
	        this.removeClass('vjs-scrubbing');
	      }
	
	      return this;
	    }
	
	    return this.scrubbing_;
	  };
	
	  /**
	   * Get or set the current time (in seconds)
	   * ```js
	   *     // get
	   *     var whereYouAt = myPlayer.currentTime();
	   *     // set
	   *     myPlayer.currentTime(120); // 2 minutes into the video
	   * ```
	   *
	   * @param  {Number|String=} seconds The time to seek to
	   * @return {Number}        The time in seconds, when not setting
	   * @return {Player}    self, when the current time is set
	   * @method currentTime
	   */
	
	  Player.prototype.currentTime = function currentTime(seconds) {
	    if (seconds !== undefined) {
	
	      this.techCall_('setCurrentTime', seconds);
	
	      return this;
	    }
	
	    // cache last currentTime and return. default to 0 seconds
	    //
	    // Caching the currentTime is meant to prevent a massive amount of reads on the tech's
	    // currentTime when scrubbing, but may not provide much performance benefit afterall.
	    // Should be tested. Also something has to read the actual current time or the cache will
	    // never get updated.
	    return this.cache_.currentTime = this.techGet_('currentTime') || 0;
	  };
	
	  /**
	   * Normally gets the length in time of the video in seconds;
	   * in all but the rarest use cases an argument will NOT be passed to the method
	   * ```js
	   *     var lengthOfVideo = myPlayer.duration();
	   * ```
	   * **NOTE**: The video must have started loading before the duration can be
	   * known, and in the case of Flash, may not be known until the video starts
	   * playing.
	   *
	   * @param {Number} seconds Duration when setting
	   * @return {Number} The duration of the video in seconds when getting
	   * @method duration
	   */
	
	  Player.prototype.duration = function duration(seconds) {
	    if (seconds === undefined) {
	      return this.cache_.duration || 0;
	    }
	
	    seconds = parseFloat(seconds) || 0;
	
	    // Standardize on Inifity for signaling video is live
	    if (seconds < 0) {
	      seconds = Infinity;
	    }
	
	    if (seconds !== this.cache_.duration) {
	      // Cache the last set value for optimized scrubbing (esp. Flash)
	      this.cache_.duration = seconds;
	
	      if (seconds === Infinity) {
	        this.addClass('vjs-live');
	      } else {
	        this.removeClass('vjs-live');
	      }
	
	      this.trigger('durationchange');
	    }
	
	    return this;
	  };
	
	  /**
	   * Calculates how much time is left.
	   * ```js
	   *     var timeLeft = myPlayer.remainingTime();
	   * ```
	   * Not a native video element function, but useful
	   *
	   * @return {Number} The time remaining in seconds
	   * @method remainingTime
	   */
	
	  Player.prototype.remainingTime = function remainingTime() {
	    return this.duration() - this.currentTime();
	  };
	
	  // http://dev.w3.org/html5/spec/video.html#dom-media-buffered
	  // Buffered returns a timerange object.
	  // Kind of like an array of portions of the video that have been downloaded.
	
	  /**
	   * Get a TimeRange object with the times of the video that have been downloaded
	   * If you just want the percent of the video that's been downloaded,
	   * use bufferedPercent.
	   * ```js
	   *     // Number of different ranges of time have been buffered. Usually 1.
	   *     numberOfRanges = bufferedTimeRange.length,
	   *     // Time in seconds when the first range starts. Usually 0.
	   *     firstRangeStart = bufferedTimeRange.start(0),
	   *     // Time in seconds when the first range ends
	   *     firstRangeEnd = bufferedTimeRange.end(0),
	   *     // Length in seconds of the first time range
	   *     firstRangeLength = firstRangeEnd - firstRangeStart;
	   * ```
	   *
	   * @return {Object} A mock TimeRange object (following HTML spec)
	   * @method buffered
	   */
	
	  Player.prototype.buffered = function buffered() {
	    var buffered = this.techGet_('buffered');
	
	    if (!buffered || !buffered.length) {
	      buffered = _utilsTimeRangesJs.createTimeRange(0, 0);
	    }
	
	    return buffered;
	  };
	
	  /**
	   * Get the percent (as a decimal) of the video that's been downloaded
	   * ```js
	   *     var howMuchIsDownloaded = myPlayer.bufferedPercent();
	   * ```
	   * 0 means none, 1 means all.
	   * (This method isn't in the HTML5 spec, but it's very convenient)
	   *
	   * @return {Number} A decimal between 0 and 1 representing the percent
	   * @method bufferedPercent
	   */
	
	  Player.prototype.bufferedPercent = function bufferedPercent() {
	    return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration());
	  };
	
	  /**
	   * Get the ending time of the last buffered time range
	   * This is used in the progress bar to encapsulate all time ranges.
	   *
	   * @return {Number} The end of the last buffered time range
	   * @method bufferedEnd
	   */
	
	  Player.prototype.bufferedEnd = function bufferedEnd() {
	    var buffered = this.buffered(),
	        duration = this.duration(),
	        end = buffered.end(buffered.length - 1);
	
	    if (end > duration) {
	      end = duration;
	    }
	
	    return end;
	  };
	
	  /**
	   * Get or set the current volume of the media
	   * ```js
	   *     // get
	   *     var howLoudIsIt = myPlayer.volume();
	   *     // set
	   *     myPlayer.volume(0.5); // Set volume to half
	   * ```
	   * 0 is off (muted), 1.0 is all the way up, 0.5 is half way.
	   *
	   * @param  {Number} percentAsDecimal The new volume as a decimal percent
	   * @return {Number}              The current volume when getting
	   * @return {Player}              self when setting
	   * @method volume
	   */
	
	  Player.prototype.volume = function volume(percentAsDecimal) {
	    var vol = undefined;
	
	    if (percentAsDecimal !== undefined) {
	      vol = Math.max(0, Math.min(1, parseFloat(percentAsDecimal))); // Force value to between 0 and 1
	      this.cache_.volume = vol;
	      this.techCall_('setVolume', vol);
	
	      return this;
	    }
	
	    // Default to 1 when returning current volume.
	    vol = parseFloat(this.techGet_('volume'));
	    return isNaN(vol) ? 1 : vol;
	  };
	
	  /**
	   * Get the current muted state, or turn mute on or off
	   * ```js
	   *     // get
	   *     var isVolumeMuted = myPlayer.muted();
	   *     // set
	   *     myPlayer.muted(true); // mute the volume
	   * ```
	   *
	   * @param  {Boolean=} muted True to mute, false to unmute
	   * @return {Boolean} True if mute is on, false if not when getting
	   * @return {Player} self when setting mute
	   * @method muted
	   */
	
	  Player.prototype.muted = function muted(_muted) {
	    if (_muted !== undefined) {
	      this.techCall_('setMuted', _muted);
	      return this;
	    }
	    return this.techGet_('muted') || false; // Default to false
	  };
	
	  // Check if current tech can support native fullscreen
	  // (e.g. with built in controls like iOS, so not our flash swf)
	  /**
	   * Check to see if fullscreen is supported
	   *
	   * @return {Boolean}
	   * @method supportsFullScreen
	   */
	
	  Player.prototype.supportsFullScreen = function supportsFullScreen() {
	    return this.techGet_('supportsFullScreen') || false;
	  };
	
	  /**
	   * Check if the player is in fullscreen mode
	   * ```js
	   *     // get
	   *     var fullscreenOrNot = myPlayer.isFullscreen();
	   *     // set
	   *     myPlayer.isFullscreen(true); // tell the player it's in fullscreen
	   * ```
	   * NOTE: As of the latest HTML5 spec, isFullscreen is no longer an official
	   * property and instead document.fullscreenElement is used. But isFullscreen is
	   * still a valuable property for internal player workings.
	   *
	   * @param  {Boolean=} isFS Update the player's fullscreen state
	   * @return {Boolean} true if fullscreen false if not when getting
	   * @return {Player} self when setting
	   * @method isFullscreen
	   */
	
	  Player.prototype.isFullscreen = function isFullscreen(isFS) {
	    if (isFS !== undefined) {
	      this.isFullscreen_ = !!isFS;
	      return this;
	    }
	    return !!this.isFullscreen_;
	  };
	
	  /**
	   * Increase the size of the video to full screen
	   * ```js
	   *     myPlayer.requestFullscreen();
	   * ```
	   * In some browsers, full screen is not supported natively, so it enters
	   * "full window mode", where the video fills the browser window.
	   * In browsers and devices that support native full screen, sometimes the
	   * browser's default controls will be shown, and not the Video.js custom skin.
	   * This includes most mobile devices (iOS, Android) and older versions of
	   * Safari.
	   *
	   * @return {Player} self
	   * @method requestFullscreen
	   */
	
	  Player.prototype.requestFullscreen = function requestFullscreen() {
	    var fsApi = _fullscreenApiJs2['default'];
	
	    this.isFullscreen(true);
	
	    if (fsApi.requestFullscreen) {
	      // the browser supports going fullscreen at the element level so we can
	      // take the controls fullscreen as well as the video
	
	      // Trigger fullscreenchange event after change
	      // We have to specifically add this each time, and remove
	      // when canceling fullscreen. Otherwise if there's multiple
	      // players on a page, they would all be reacting to the same fullscreen
	      // events
	      Events.on(_globalDocument2['default'], fsApi.fullscreenchange, Fn.bind(this, function documentFullscreenChange(e) {
	        this.isFullscreen(_globalDocument2['default'][fsApi.fullscreenElement]);
	
	        // If cancelling fullscreen, remove event listener.
	        if (this.isFullscreen() === false) {
	          Events.off(_globalDocument2['default'], fsApi.fullscreenchange, documentFullscreenChange);
	        }
	
	        this.trigger('fullscreenchange');
	      }));
	
	      this.el_[fsApi.requestFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      // we can't take the video.js controls fullscreen but we can go fullscreen
	      // with native controls
	      this.techCall_('enterFullScreen');
	    } else {
	      // fullscreen isn't supported so we'll just stretch the video element to
	      // fill the viewport
	      this.enterFullWindow();
	      this.trigger('fullscreenchange');
	    }
	
	    return this;
	  };
	
	  /**
	   * Return the video to its normal size after having been in full screen mode
	   * ```js
	   *     myPlayer.exitFullscreen();
	   * ```
	   *
	   * @return {Player} self
	   * @method exitFullscreen
	   */
	
	  Player.prototype.exitFullscreen = function exitFullscreen() {
	    var fsApi = _fullscreenApiJs2['default'];
	    this.isFullscreen(false);
	
	    // Check for browser element fullscreen support
	    if (fsApi.requestFullscreen) {
	      _globalDocument2['default'][fsApi.exitFullscreen]();
	    } else if (this.tech_.supportsFullScreen()) {
	      this.techCall_('exitFullScreen');
	    } else {
	      this.exitFullWindow();
	      this.trigger('fullscreenchange');
	    }
	
	    return this;
	  };
	
	  /**
	   * When fullscreen isn't supported we can stretch the video container to as wide as the browser will let us.
	   *
	   * @method enterFullWindow
	   */
	
	  Player.prototype.enterFullWindow = function enterFullWindow() {
	    this.isFullWindow = true;
	
	    // Storing original doc overflow value to return to when fullscreen is off
	    this.docOrigOverflow = _globalDocument2['default'].documentElement.style.overflow;
	
	    // Add listener for esc key to exit fullscreen
	    Events.on(_globalDocument2['default'], 'keydown', Fn.bind(this, this.fullWindowOnEscKey));
	
	    // Hide any scroll bars
	    _globalDocument2['default'].documentElement.style.overflow = 'hidden';
	
	    // Apply fullscreen styles
	    Dom.addElClass(_globalDocument2['default'].body, 'vjs-full-window');
	
	    this.trigger('enterFullWindow');
	  };
	
	  /**
	   * Check for call to either exit full window or full screen on ESC key
	   *
	   * @param {String} event Event to check for key press
	   * @method fullWindowOnEscKey
	   */
	
	  Player.prototype.fullWindowOnEscKey = function fullWindowOnEscKey(event) {
	    if (event.keyCode === 27) {
	      if (this.isFullscreen() === true) {
	        this.exitFullscreen();
	      } else {
	        this.exitFullWindow();
	      }
	    }
	  };
	
	  /**
	   * Exit full window
	   *
	   * @method exitFullWindow
	   */
	
	  Player.prototype.exitFullWindow = function exitFullWindow() {
	    this.isFullWindow = false;
	    Events.off(_globalDocument2['default'], 'keydown', this.fullWindowOnEscKey);
	
	    // Unhide scroll bars.
	    _globalDocument2['default'].documentElement.style.overflow = this.docOrigOverflow;
	
	    // Remove fullscreen styles
	    Dom.removeElClass(_globalDocument2['default'].body, 'vjs-full-window');
	
	    // Resize the box, controller, and poster to original sizes
	    // this.positionAll();
	    this.trigger('exitFullWindow');
	  };
	
	  /**
	   * Check whether the player can play a given mimetype
	   *
	   * @param {String} type The mimetype to check
	   * @return {String} 'probably', 'maybe', or '' (empty string)
	   * @method canPlayType
	   */
	
	  Player.prototype.canPlayType = function canPlayType(type) {
	    var can = undefined;
	
	    // Loop through each playback technology in the options order
	    for (var i = 0, j = this.options_.techOrder; i < j.length; i++) {
	      var techName = _utilsToTitleCaseJs2['default'](j[i]);
	      var tech = _techTechJs2['default'].getTech(techName);
	
	      // Support old behavior of techs being registered as components.
	      // Remove once that deprecated behavior is removed.
	      if (!tech) {
	        tech = _componentJs2['default'].getComponent(techName);
	      }
	
	      // Check if the current tech is defined before continuing
	      if (!tech) {
	        _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	        continue;
	      }
	
	      // Check if the browser supports this technology
	      if (tech.isSupported()) {
	        can = tech.canPlayType(type);
	
	        if (can) {
	          return can;
	        }
	      }
	    }
	
	    return '';
	  };
	
	  /**
	   * Select source based on tech-order or source-order
	   * Uses source-order selection if `options.sourceOrder` is truthy. Otherwise,
	   * defaults to tech-order selection
	   *
	   * @param {Array} sources The sources for a media asset
	   * @return {Object|Boolean} Object of source and tech order, otherwise false
	   * @method selectSource
	   */
	
	  Player.prototype.selectSource = function selectSource(sources) {
	    var _this3 = this;
	
	    // Get only the techs specified in `techOrder` that exist and are supported by the
	    // current platform
	    var techs = this.options_.techOrder.map(_utilsToTitleCaseJs2['default']).map(function (techName) {
	      // `Component.getComponent(...)` is for support of old behavior of techs
	      // being registered as components.
	      // Remove once that deprecated behavior is removed.
	      return [techName, _techTechJs2['default'].getTech(techName) || _componentJs2['default'].getComponent(techName)];
	    }).filter(function (_ref) {
	      var techName = _ref[0];
	      var tech = _ref[1];
	
	      // Check if the current tech is defined before continuing
	      if (tech) {
	        // Check if the browser supports this technology
	        return tech.isSupported();
	      }
	
	      _utilsLogJs2['default'].error('The "' + techName + '" tech is undefined. Skipped browser support check for that tech.');
	      return false;
	    });
	
	    // Iterate over each `innerArray` element once per `outerArray` element and execute
	    // `tester` with both. If `tester` returns a non-falsy value, exit early and return
	    // that value.
	    var findFirstPassingTechSourcePair = function findFirstPassingTechSourcePair(outerArray, innerArray, tester) {
	      var found = undefined;
	
	      outerArray.some(function (outerChoice) {
	        return innerArray.some(function (innerChoice) {
	          found = tester(outerChoice, innerChoice);
	
	          if (found) {
	            return true;
	          }
	        });
	      });
	
	      return found;
	    };
	
	    var foundSourceAndTech = undefined;
	    var flip = function flip(fn) {
	      return function (a, b) {
	        return fn(b, a);
	      };
	    };
	    var finder = function finder(_ref2, source) {
	      var techName = _ref2[0];
	      var tech = _ref2[1];
	
	      if (tech.canPlaySource(source, _this3.options_[techName.toLowerCase()])) {
	        return { source: source, tech: techName };
	      }
	    };
	
	    // Depending on the truthiness of `options.sourceOrder`, we swap the order of techs and sources
	    // to select from them based on their priority.
	    if (this.options_.sourceOrder) {
	      // Source-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(sources, techs, flip(finder));
	    } else {
	      // Tech-first ordering
	      foundSourceAndTech = findFirstPassingTechSourcePair(techs, sources, finder);
	    }
	
	    return foundSourceAndTech || false;
	  };
	
	  /**
	   * The source function updates the video source
	   * There are three types of variables you can pass as the argument.
	   * **URL String**: A URL to the the video file. Use this method if you are sure
	   * the current playback technology (HTML5/Flash) can support the source you
	   * provide. Currently only MP4 files can be used in both HTML5 and Flash.
	   * ```js
	   *     myPlayer.src("http://www.example.com/path/to/video.mp4");
	   * ```
	   * **Source Object (or element):* * A javascript object containing information
	   * about the source file. Use this method if you want the player to determine if
	   * it can support the file using the type information.
	   * ```js
	   *     myPlayer.src({ type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" });
	   * ```
	   * **Array of Source Objects:* * To provide multiple versions of the source so
	   * that it can be played using HTML5 across browsers you can use an array of
	   * source objects. Video.js will detect which version is supported and load that
	   * file.
	   * ```js
	   *     myPlayer.src([
	   *       { type: "video/mp4", src: "http://www.example.com/path/to/video.mp4" },
	   *       { type: "video/webm", src: "http://www.example.com/path/to/video.webm" },
	   *       { type: "video/ogg", src: "http://www.example.com/path/to/video.ogv" }
	   *     ]);
	   * ```
	   *
	   * @param  {String|Object|Array=} source The source URL, object, or array of sources
	   * @return {String} The current video source when getting
	   * @return {String} The player when setting
	   * @method src
	   */
	
	  Player.prototype.src = function src(source) {
	    if (source === undefined) {
	      return this.techGet_('src');
	    }
	
	    var currentTech = _techTechJs2['default'].getTech(this.techName_);
	    // Support old behavior of techs being registered as components.
	    // Remove once that deprecated behavior is removed.
	    if (!currentTech) {
	      currentTech = _componentJs2['default'].getComponent(this.techName_);
	    }
	
	    // case: Array of source objects to choose from and pick the best to play
	    if (Array.isArray(source)) {
	      this.sourceList_(source);
	
	      // case: URL String (http://myvideo...)
	    } else if (typeof source === 'string') {
	        // create a source object from the string
	        this.src({ src: source });
	
	        // case: Source object { src: '', type: '' ... }
	      } else if (source instanceof Object) {
	          // check if the source has a type and the loaded tech cannot play the source
	          // if there's no type we'll just try the current tech
	          if (source.type && !currentTech.canPlaySource(source, this.options_[this.techName_.toLowerCase()])) {
	            // create a source list with the current source and send through
	            // the tech loop to check for a compatible technology
	            this.sourceList_([source]);
	          } else {
	            this.cache_.src = source.src;
	            this.currentType_ = source.type || '';
	
	            // wait until the tech is ready to set the source
	            this.ready(function () {
	
	              // The setSource tech method was added with source handlers
	              // so older techs won't support it
	              // We need to check the direct prototype for the case where subclasses
	              // of the tech do not support source handlers
	              if (currentTech.prototype.hasOwnProperty('setSource')) {
	                this.techCall_('setSource', source);
	              } else {
	                this.techCall_('src', source.src);
	              }
	
	              if (this.options_.preload === 'auto') {
	                this.load();
	              }
	
	              if (this.options_.autoplay) {
	                this.play();
	              }
	
	              // Set the source synchronously if possible (#2326)
	            }, true);
	          }
	        }
	
	    return this;
	  };
	
	  /**
	   * Handle an array of source objects
	   *
	   * @param  {Array} sources Array of source objects
	   * @private
	   * @method sourceList_
	   */
	
	  Player.prototype.sourceList_ = function sourceList_(sources) {
	    var sourceTech = this.selectSource(sources);
	
	    if (sourceTech) {
	      if (sourceTech.tech === this.techName_) {
	        // if this technology is already loaded, set the source
	        this.src(sourceTech.source);
	      } else {
	        // load this technology with the chosen source
	        this.loadTech_(sourceTech.tech, sourceTech.source);
	      }
	    } else {
	      // We need to wrap this in a timeout to give folks a chance to add error event handlers
	      this.setTimeout(function () {
	        this.error({ code: 4, message: this.localize(this.options_.notSupportedMessage) });
	      }, 0);
	
	      // we could not find an appropriate tech, but let's still notify the delegate that this is it
	      // this needs a better comment about why this is needed
	      this.triggerReady();
	    }
	  };
	
	  /**
	   * Begin loading the src data.
	   *
	   * @return {Player} Returns the player
	   * @method load
	   */
	
	  Player.prototype.load = function load() {
	    this.techCall_('load');
	    return this;
	  };
	
	  /**
	   * Reset the player. Loads the first tech in the techOrder,
	   * and calls `reset` on the tech`.
	   *
	   * @return {Player} Returns the player
	   * @method reset
	   */
	
	  Player.prototype.reset = function reset() {
	    this.loadTech_(_utilsToTitleCaseJs2['default'](this.options_.techOrder[0]), null);
	    this.techCall_('reset');
	    return this;
	  };
	
	  /**
	   * Returns the fully qualified URL of the current source value e.g. http://mysite.com/video.mp4
	   * Can be used in conjuction with `currentType` to assist in rebuilding the current source object.
	   *
	   * @return {String} The current source
	   * @method currentSrc
	   */
	
	  Player.prototype.currentSrc = function currentSrc() {
	    return this.techGet_('currentSrc') || this.cache_.src || '';
	  };
	
	  /**
	   * Get the current source type e.g. video/mp4
	   * This can allow you rebuild the current source object so that you could load the same
	   * source and tech later
	   *
	   * @return {String} The source MIME type
	   * @method currentType
	   */
	
	  Player.prototype.currentType = function currentType() {
	    return this.currentType_ || '';
	  };
	
	  /**
	   * Get or set the preload attribute
	   *
	   * @param {Boolean} value Boolean to determine if preload should be used
	   * @return {String} The preload attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method preload
	   */
	
	  Player.prototype.preload = function preload(value) {
	    if (value !== undefined) {
	      this.techCall_('setPreload', value);
	      this.options_.preload = value;
	      return this;
	    }
	    return this.techGet_('preload');
	  };
	
	  /**
	   * Get or set the autoplay attribute.
	   *
	   * @param {Boolean} value Boolean to determine if video should autoplay
	   * @return {String} The autoplay attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method autoplay
	   */
	
	  Player.prototype.autoplay = function autoplay(value) {
	    if (value !== undefined) {
	      this.techCall_('setAutoplay', value);
	      this.options_.autoplay = value;
	      return this;
	    }
	    return this.techGet_('autoplay', value);
	  };
	
	  /**
	   * Get or set the loop attribute on the video element.
	   *
	   * @param {Boolean} value Boolean to determine if video should loop
	   * @return {String} The loop attribute value when getting
	   * @return {Player} Returns the player when setting
	   * @method loop
	   */
	
	  Player.prototype.loop = function loop(value) {
	    if (value !== undefined) {
	      this.techCall_('setLoop', value);
	      this.options_['loop'] = value;
	      return this;
	    }
	    return this.techGet_('loop');
	  };
	
	  /**
	   * Get or set the poster image source url
	   *
	   * ##### EXAMPLE:
	   * ```js
	   *     // get
	   *     var currentPoster = myPlayer.poster();
	   *     // set
	   *     myPlayer.poster('http://example.com/myImage.jpg');
	   * ```
	   *
	   * @param  {String=} src Poster image source URL
	   * @return {String} poster URL when getting
	   * @return {Player} self when setting
	   * @method poster
	   */
	
	  Player.prototype.poster = function poster(src) {
	    if (src === undefined) {
	      return this.poster_;
	    }
	
	    // The correct way to remove a poster is to set as an empty string
	    // other falsey values will throw errors
	    if (!src) {
	      src = '';
	    }
	
	    // update the internal poster variable
	    this.poster_ = src;
	
	    // update the tech's poster
	    this.techCall_('setPoster', src);
	
	    // alert components that the poster has been set
	    this.trigger('posterchange');
	
	    return this;
	  };
	
	  /**
	   * Some techs (e.g. YouTube) can provide a poster source in an
	   * asynchronous way. We want the poster component to use this
	   * poster source so that it covers up the tech's controls.
	   * (YouTube's play button). However we only want to use this
	   * soruce if the player user hasn't set a poster through
	   * the normal APIs.
	   *
	   * @private
	   * @method handleTechPosterChange_
	   */
	
	  Player.prototype.handleTechPosterChange_ = function handleTechPosterChange_() {
	    if (!this.poster_ && this.tech_ && this.tech_.poster) {
	      this.poster_ = this.tech_.poster() || '';
	
	      // Let components know the poster has changed
	      this.trigger('posterchange');
	    }
	  };
	
	  /**
	   * Get or set whether or not the controls are showing.
	   *
	   * @param  {Boolean} bool Set controls to showing or not
	   * @return {Boolean}    Controls are showing
	   * @method controls
	   */
	
	  Player.prototype.controls = function controls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool; // force boolean
	      // Don't trigger a change event unless it actually changed
	      if (this.controls_ !== bool) {
	        this.controls_ = bool;
	
	        if (this.usingNativeControls()) {
	          this.techCall_('setControls', bool);
	        }
	
	        if (bool) {
	          this.removeClass('vjs-controls-disabled');
	          this.addClass('vjs-controls-enabled');
	          this.trigger('controlsenabled');
	
	          if (!this.usingNativeControls()) {
	            this.addTechControlsListeners_();
	          }
	        } else {
	          this.removeClass('vjs-controls-enabled');
	          this.addClass('vjs-controls-disabled');
	          this.trigger('controlsdisabled');
	
	          if (!this.usingNativeControls()) {
	            this.removeTechControlsListeners_();
	          }
	        }
	      }
	      return this;
	    }
	    return !!this.controls_;
	  };
	
	  /**
	   * Toggle native controls on/off. Native controls are the controls built into
	   * devices (e.g. default iPhone controls), Flash, or other techs
	   * (e.g. Vimeo Controls)
	   * **This should only be set by the current tech, because only the tech knows
	   * if it can support native controls**
	   *
	   * @param  {Boolean} bool    True signals that native controls are on
	   * @return {Player}      Returns the player
	   * @private
	   * @method usingNativeControls
	   */
	
	  Player.prototype.usingNativeControls = function usingNativeControls(bool) {
	    if (bool !== undefined) {
	      bool = !!bool; // force boolean
	      // Don't trigger a change event unless it actually changed
	      if (this.usingNativeControls_ !== bool) {
	        this.usingNativeControls_ = bool;
	        if (bool) {
	          this.addClass('vjs-using-native-controls');
	
	          /**
	            * player is using the native device controls
	           *
	            * @event usingnativecontrols
	            * @memberof Player
	            * @instance
	            * @private
	            */
	          this.trigger('usingnativecontrols');
	        } else {
	          this.removeClass('vjs-using-native-controls');
	
	          /**
	            * player is using the custom HTML controls
	           *
	            * @event usingcustomcontrols
	            * @memberof Player
	            * @instance
	            * @private
	            */
	          this.trigger('usingcustomcontrols');
	        }
	      }
	      return this;
	    }
	    return !!this.usingNativeControls_;
	  };
	
	  /**
	   * Set or get the current MediaError
	   *
	   * @param  {*} err A MediaError or a String/Number to be turned into a MediaError
	   * @return {MediaError|null}     when getting
	   * @return {Player}              when setting
	   * @method error
	   */
	
	  Player.prototype.error = function error(err) {
	    if (err === undefined) {
	      return this.error_ || null;
	    }
	
	    // restoring to default
	    if (err === null) {
	      this.error_ = err;
	      this.removeClass('vjs-error');
	      if (this.errorDisplay) {
	        this.errorDisplay.close();
	      }
	      return this;
	    }
	
	    this.error_ = new _mediaErrorJs2['default'](err);
	
	    // add the vjs-error classname to the player
	    this.addClass('vjs-error');
	
	    // log the name of the error type and any message
	    // ie8 just logs "[object object]" if you just log the error object
	    _utilsLogJs2['default'].error('(CODE:' + this.error_.code + ' ' + _mediaErrorJs2['default'].errorTypes[this.error_.code] + ')', this.error_.message, this.error_);
	
	    // fire an error event on the player
	    this.trigger('error');
	
	    return this;
	  };
	
	  /**
	   * Returns whether or not the player is in the "ended" state.
	   *
	   * @return {Boolean} True if the player is in the ended state, false if not.
	   * @method ended
	   */
	
	  Player.prototype.ended = function ended() {
	    return this.techGet_('ended');
	  };
	
	  /**
	   * Returns whether or not the player is in the "seeking" state.
	   *
	   * @return {Boolean} True if the player is in the seeking state, false if not.
	   * @method seeking
	   */
	
	  Player.prototype.seeking = function seeking() {
	    return this.techGet_('seeking');
	  };
	
	  /**
	   * Returns the TimeRanges of the media that are currently available
	   * for seeking to.
	   *
	   * @return {TimeRanges} the seekable intervals of the media timeline
	   * @method seekable
	   */
	
	  Player.prototype.seekable = function seekable() {
	    return this.techGet_('seekable');
	  };
	
	  /**
	   * Report user activity
	   *
	   * @param {Object} event Event object
	   * @method reportUserActivity
	   */
	
	  Player.prototype.reportUserActivity = function reportUserActivity(event) {
	    this.userActivity_ = true;
	  };
	
	  /**
	   * Get/set if user is active
	   *
	   * @param {Boolean} bool Value when setting
	   * @return {Boolean} Value if user is active user when getting
	   * @method userActive
	   */
	
	  Player.prototype.userActive = function userActive(bool) {
	    if (bool !== undefined) {
	      bool = !!bool;
	      if (bool !== this.userActive_) {
	        this.userActive_ = bool;
	        if (bool) {
	          // If the user was inactive and is now active we want to reset the
	          // inactivity timer
	          this.userActivity_ = true;
	          this.removeClass('vjs-user-inactive');
	          this.addClass('vjs-user-active');
	          this.trigger('useractive');
	        } else {
	          // We're switching the state to inactive manually, so erase any other
	          // activity
	          this.userActivity_ = false;
	
	          // Chrome/Safari/IE have bugs where when you change the cursor it can
	          // trigger a mousemove event. This causes an issue when you're hiding
	          // the cursor when the user is inactive, and a mousemove signals user
	          // activity. Making it impossible to go into inactive mode. Specifically
	          // this happens in fullscreen when we really need to hide the cursor.
	          //
	          // When this gets resolved in ALL browsers it can be removed
	          // https://code.google.com/p/chromium/issues/detail?id=103041
	          if (this.tech_) {
	            this.tech_.one('mousemove', function (e) {
	              e.stopPropagation();
	              e.preventDefault();
	            });
	          }
	
	          this.removeClass('vjs-user-active');
	          this.addClass('vjs-user-inactive');
	          this.trigger('userinactive');
	        }
	      }
	      return this;
	    }
	    return this.userActive_;
	  };
	
	  /**
	   * Listen for user activity based on timeout value
	   *
	   * @private
	   * @method listenForUserActivity_
	   */
	
	  Player.prototype.listenForUserActivity_ = function listenForUserActivity_() {
	    var mouseInProgress = undefined,
	        lastMoveX = undefined,
	        lastMoveY = undefined;
	
	    var handleActivity = Fn.bind(this, this.reportUserActivity);
	
	    var handleMouseMove = function handleMouseMove(e) {
	      // #1068 - Prevent mousemove spamming
	      // Chrome Bug: https://code.google.com/p/chromium/issues/detail?id=366970
	      if (e.screenX !== lastMoveX || e.screenY !== lastMoveY) {
	        lastMoveX = e.screenX;
	        lastMoveY = e.screenY;
	        handleActivity();
	      }
	    };
	
	    var handleMouseDown = function handleMouseDown() {
	      handleActivity();
	      // For as long as the they are touching the device or have their mouse down,
	      // we consider them active even if they're not moving their finger or mouse.
	      // So we want to continue to update that they are active
	      this.clearInterval(mouseInProgress);
	      // Setting userActivity=true now and setting the interval to the same time
	      // as the activityCheck interval (250) should ensure we never miss the
	      // next activityCheck
	      mouseInProgress = this.setInterval(handleActivity, 250);
	    };
	
	    var handleMouseUp = function handleMouseUp(event) {
	      handleActivity();
	      // Stop the interval that maintains activity if the mouse/touch is down
	      this.clearInterval(mouseInProgress);
	    };
	
	    // Any mouse movement will be considered user activity
	    this.on('mousedown', handleMouseDown);
	    this.on('mousemove', handleMouseMove);
	    this.on('mouseup', handleMouseUp);
	
	    // Listen for keyboard navigation
	    // Shouldn't need to use inProgress interval because of key repeat
	    this.on('keydown', handleActivity);
	    this.on('keyup', handleActivity);
	
	    // Run an interval every 250 milliseconds instead of stuffing everything into
	    // the mousemove/touchmove function itself, to prevent performance degradation.
	    // `this.reportUserActivity` simply sets this.userActivity_ to true, which
	    // then gets picked up by this loop
	    // http://ejohn.org/blog/learning-from-twitter/
	    var inactivityTimeout = undefined;
	    var activityCheck = this.setInterval(function () {
	      // Check to see if mouse/touch activity has happened
	      if (this.userActivity_) {
	        // Reset the activity tracker
	        this.userActivity_ = false;
	
	        // If the user state was inactive, set the state to active
	        this.userActive(true);
	
	        // Clear any existing inactivity timeout to start the timer over
	        this.clearTimeout(inactivityTimeout);
	
	        var timeout = this.options_['inactivityTimeout'];
	        if (timeout > 0) {
	          // In <timeout> milliseconds, if no more activity has occurred the
	          // user will be considered inactive
	          inactivityTimeout = this.setTimeout(function () {
	            // Protect against the case where the inactivityTimeout can trigger just
	            // before the next user activity is picked up by the activityCheck loop
	            // causing a flicker
	            if (!this.userActivity_) {
	              this.userActive(false);
	            }
	          }, timeout);
	        }
	      }
	    }, 250);
	  };
	
	  /**
	   * Gets or sets the current playback rate.  A playback rate of
	   * 1.0 represents normal speed and 0.5 would indicate half-speed
	   * playback, for instance.
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-playbackrate
	   *
	   * @param  {Number} rate    New playback rate to set.
	   * @return {Number}         Returns the new playback rate when setting
	   * @return {Number}         Returns the current playback rate when getting
	   * @method playbackRate
	   */
	
	  Player.prototype.playbackRate = function playbackRate(rate) {
	    if (rate !== undefined) {
	      this.techCall_('setPlaybackRate', rate);
	      return this;
	    }
	
	    if (this.tech_ && this.tech_['featuresPlaybackRate']) {
	      return this.techGet_('playbackRate');
	    } else {
	      return 1.0;
	    }
	  };
	
	  /**
	   * Gets or sets the audio flag
	   *
	   * @param  {Boolean} bool    True signals that this is an audio player.
	   * @return {Boolean}         Returns true if player is audio, false if not when getting
	   * @return {Player}      Returns the player if setting
	   * @private
	   * @method isAudio
	   */
	
	  Player.prototype.isAudio = function isAudio(bool) {
	    if (bool !== undefined) {
	      this.isAudio_ = !!bool;
	      return this;
	    }
	
	    return !!this.isAudio_;
	  };
	
	  /**
	   * Returns the current state of network activity for the element, from
	   * the codes in the list below.
	   * - NETWORK_EMPTY (numeric value 0)
	   *   The element has not yet been initialised. All attributes are in
	   *   their initial states.
	   * - NETWORK_IDLE (numeric value 1)
	   *   The element's resource selection algorithm is active and has
	   *   selected a resource, but it is not actually using the network at
	   *   this time.
	   * - NETWORK_LOADING (numeric value 2)
	   *   The user agent is actively trying to download data.
	   * - NETWORK_NO_SOURCE (numeric value 3)
	   *   The element's resource selection algorithm is active, but it has
	   *   not yet found a resource to use.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#network-states
	   * @return {Number} the current network activity state
	   * @method networkState
	   */
	
	  Player.prototype.networkState = function networkState() {
	    return this.techGet_('networkState');
	  };
	
	  /**
	   * Returns a value that expresses the current state of the element
	   * with respect to rendering the current playback position, from the
	   * codes in the list below.
	   * - HAVE_NOTHING (numeric value 0)
	   *   No information regarding the media resource is available.
	   * - HAVE_METADATA (numeric value 1)
	   *   Enough of the resource has been obtained that the duration of the
	   *   resource is available.
	   * - HAVE_CURRENT_DATA (numeric value 2)
	   *   Data for the immediate current playback position is available.
	   * - HAVE_FUTURE_DATA (numeric value 3)
	   *   Data for the immediate current playback position is available, as
	   *   well as enough data for the user agent to advance the current
	   *   playback position in the direction of playback.
	   * - HAVE_ENOUGH_DATA (numeric value 4)
	   *   The user agent estimates that enough data is available for
	   *   playback to proceed uninterrupted.
	   *
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-readystate
	   * @return {Number} the current playback rendering state
	   * @method readyState
	   */
	
	  Player.prototype.readyState = function readyState() {
	    return this.techGet_('readyState');
	  };
	
	  /**
	   * Get a video track list
	   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	   *
	   * @return {VideoTrackList} thes current video track list
	   * @method videoTracks
	   */
	
	  Player.prototype.videoTracks = function videoTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackListJs2['default']();
	      return this.videoTracks_;
	    }
	
	    return this.tech_.videoTracks();
	  };
	
	  /**
	   * Get an audio track list
	   * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	   *
	   * @return {AudioTrackList} thes current audio track list
	   * @method audioTracks
	   */
	
	  Player.prototype.audioTracks = function audioTracks() {
	    // if we have not yet loadTech_, we create videoTracks_
	    // these will be passed to the tech during loading
	    if (!this.tech_) {
	      this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackListJs2['default']();
	      return this.audioTracks_;
	    }
	
	    return this.tech_.audioTracks();
	  };
	
	  /*
	    * Text tracks are tracks of timed text events.
	    * Captions - text displayed over the video for the hearing impaired
	    * Subtitles - text displayed over the video for those who don't understand language in the video
	    * Chapters - text displayed in a menu allowing the user to jump to particular points (chapters) in the video
	    * Descriptions (not supported yet) - audio descriptions that are read back to the user by a screen reading device
	    */
	
	  /**
	   * Get an array of associated text tracks. captions, subtitles, chapters, descriptions
	   * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-texttracks
	   *
	   * @return {Array}           Array of track objects
	   * @method textTracks
	   */
	
	  Player.prototype.textTracks = function textTracks() {
	    // cannot use techGet_ directly because it checks to see whether the tech is ready.
	    // Flash is unlikely to be ready in time but textTracks should still work.
	    return this.tech_ && this.tech_['textTracks']();
	  };
	
	  /**
	   * Get an array of remote text tracks
	   *
	   * @return {Array}
	   * @method remoteTextTracks
	   */
	
	  Player.prototype.remoteTextTracks = function remoteTextTracks() {
	    return this.tech_ && this.tech_['remoteTextTracks']();
	  };
	
	  /**
	   * Get an array of remote html track elements
	   *
	   * @return {HTMLTrackElement[]}
	   * @method remoteTextTrackEls
	   */
	
	  Player.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    return this.tech_ && this.tech_['remoteTextTrackEls']();
	  };
	
	  /**
	   * Add a text track
	   * In addition to the W3C settings we allow adding additional info through options.
	   * http://www.w3.org/html/wg/drafts/html/master/embedded-content-0.html#dom-media-addtexttrack
	   *
	   * @param {String}  kind        Captions, subtitles, chapters, descriptions, or metadata
	   * @param {String=} label       Optional label
	   * @param {String=} language    Optional language
	   * @method addTextTrack
	   */
	
	  Player.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    return this.tech_ && this.tech_['addTextTrack'](kind, label, language);
	  };
	
	  /**
	   * Add a remote text track
	   *
	   * @param {Object} options    Options for remote text track
	   * @method addRemoteTextTrack
	   */
	
	  Player.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
	    return this.tech_ && this.tech_['addRemoteTextTrack'](options);
	  };
	
	  /**
	   * Remove a remote text track
	   *
	   * @param {Object} track    Remote text track to remove
	   * @method removeRemoteTextTrack
	   */
	  // destructure the input into an object with a track argument, defaulting to arguments[0]
	  // default the whole argument to an empty object if nothing was passed in
	
	  Player.prototype.removeRemoteTextTrack = function removeRemoteTextTrack() {
	    var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    var _ref3$track = _ref3.track;
	    var track = _ref3$track === undefined ? arguments[0] : _ref3$track;
	    // jshint ignore:line
	    this.tech_ && this.tech_['removeRemoteTextTrack'](track);
	  };
	
	  /**
	   * Get video width
	   *
	   * @return {Number} Video width
	   * @method videoWidth
	   */
	
	  Player.prototype.videoWidth = function videoWidth() {
	    return this.tech_ && this.tech_.videoWidth && this.tech_.videoWidth() || 0;
	  };
	
	  /**
	   * Get video height
	   *
	   * @return {Number} Video height
	   * @method videoHeight
	   */
	
	  Player.prototype.videoHeight = function videoHeight() {
	    return this.tech_ && this.tech_.videoHeight && this.tech_.videoHeight() || 0;
	  };
	
	  // Methods to add support for
	  // initialTime: function(){ return this.techCall_('initialTime'); },
	  // startOffsetTime: function(){ return this.techCall_('startOffsetTime'); },
	  // played: function(){ return this.techCall_('played'); },
	  // defaultPlaybackRate: function(){ return this.techCall_('defaultPlaybackRate'); },
	  // defaultMuted: function(){ return this.techCall_('defaultMuted'); }
	
	  /**
	   * The player's language code
	   * NOTE: The language should be set in the player options if you want the
	   * the controls to be built with a specific language. Changing the lanugage
	   * later will not update controls text.
	   *
	   * @param {String} code  The locale string
	   * @return {String}      The locale string when getting
	   * @return {Player}      self when setting
	   * @method language
	   */
	
	  Player.prototype.language = function language(code) {
	    if (code === undefined) {
	      return this.language_;
	    }
	
	    this.language_ = ('' + code).toLowerCase();
	    return this;
	  };
	
	  /**
	   * Get the player's language dictionary
	   * Merge every time, because a newly added plugin might call videojs.addLanguage() at any time
	   * Languages specified directly in the player options have precedence
	   *
	   * @return {Array} Array of languages
	   * @method languages
	   */
	
	  Player.prototype.languages = function languages() {
	    return _utilsMergeOptionsJs2['default'](Player.prototype.options_.languages, this.languages_);
	  };
	
	  /**
	   * Converts track info to JSON
	   *
	   * @return {Object} JSON object of options
	   * @method toJSON
	   */
	
	  Player.prototype.toJSON = function toJSON() {
	    var options = _utilsMergeOptionsJs2['default'](this.options_);
	    var tracks = options.tracks;
	
	    options.tracks = [];
	
	    for (var i = 0; i < tracks.length; i++) {
	      var track = tracks[i];
	
	      // deep merge tracks and null out player so no circular references
	      track = _utilsMergeOptionsJs2['default'](track);
	      track.player = undefined;
	      options.tracks[i] = track;
	    }
	
	    return options;
	  };
	
	  /**
	   * Creates a simple modal dialog (an instance of the `ModalDialog`
	   * component) that immediately overlays the player with arbitrary
	   * content and removes itself when closed.
	   *
	   * @param {String|Function|Element|Array|Null} content
	   *        Same as `ModalDialog#content`'s param of the same name.
	   *
	   *        The most straight-forward usage is to provide a string or DOM
	   *        element.
	   *
	   * @param {Object} [options]
	   *        Extra options which will be passed on to the `ModalDialog`.
	   *
	   * @return {ModalDialog}
	   */
	
	  Player.prototype.createModal = function createModal(content, options) {
	    var player = this;
	
	    options = options || {};
	    options.content = content || '';
	
	    var modal = new _modalDialog2['default'](player, options);
	
	    player.addChild(modal);
	    modal.on('dispose', function () {
	      player.removeChild(modal);
	    });
	
	    return modal.open();
	  };
	
	  /**
	   * Gets tag settings
	   *
	   * @param {Element} tag The player tag
	   * @return {Array} An array of sources and track objects
	   * @static
	   * @method getTagSettings
	   */
	
	  Player.getTagSettings = function getTagSettings(tag) {
	    var baseOptions = {
	      'sources': [],
	      'tracks': []
	    };
	
	    var tagOptions = Dom.getElAttributes(tag);
	    var dataSetup = tagOptions['data-setup'];
	
	    // Check if data-setup attr exists.
	    if (dataSetup !== null) {
	      // Parse options JSON
	
	      var _safeParseTuple = _safeJsonParseTuple2['default'](dataSetup || '{}');
	
	      var err = _safeParseTuple[0];
	      var data = _safeParseTuple[1];
	
	      if (err) {
	        _utilsLogJs2['default'].error(err);
	      }
	      _objectAssign2['default'](tagOptions, data);
	    }
	
	    _objectAssign2['default'](baseOptions, tagOptions);
	
	    // Get tag children settings
	    if (tag.hasChildNodes()) {
	      var children = tag.childNodes;
	
	      for (var i = 0, j = children.length; i < j; i++) {
	        var child = children[i];
	        // Change case needed: http://ejohn.org/blog/nodename-case-sensitivity/
	        var childName = child.nodeName.toLowerCase();
	        if (childName === 'source') {
	          baseOptions.sources.push(Dom.getElAttributes(child));
	        } else if (childName === 'track') {
	          baseOptions.tracks.push(Dom.getElAttributes(child));
	        }
	      }
	    }
	
	    return baseOptions;
	  };
	
	  return Player;
	})(_componentJs2['default']);
	
	Player.players = {};
	
	var navigator = _globalWindow2['default'].navigator;
	/*
	 * Player instance options, surfaced using options
	 * options = Player.prototype.options_
	 * Make changes in options, not here.
	 *
	 * @type {Object}
	 * @private
	 */
	Player.prototype.options_ = {
	  // Default order of fallback technology
	  techOrder: ['html5', 'flash'],
	  // techOrder: ['flash','html5'],
	
	  html5: {},
	  flash: {},
	
	  // defaultVolume: 0.85,
	  defaultVolume: 0.00, // The freakin seaguls are driving me crazy!
	
	  // default inactivity timeout
	  inactivityTimeout: 2000,
	
	  // default playback rates
	  playbackRates: [],
	  // Add playback rate selection by adding rates
	  // 'playbackRates': [0.5, 1, 1.5, 2],
	
	  // Included control sets
	  children: ['mediaLoader', 'posterImage', 'textTrackDisplay', 'loadingSpinner', 'bigPlayButton', 'controlBar', 'errorDisplay', 'textTrackSettings'],
	
	  language: navigator.languages && navigator.languages[0] || navigator.userLanguage || navigator.language || 'en',
	
	  // locales and their language translations
	  languages: {},
	
	  // Default message to show when a video cannot be played.
	  notSupportedMessage: 'No compatible source was found for this media.'
	};
	
	/**
	 * Fired when the user agent begins looking for media data
	 *
	 * @event loadstart
	 */
	Player.prototype.handleTechLoadStart_;
	
	/**
	 * Fired when the player has initial duration and dimension information
	 *
	 * @event loadedmetadata
	 */
	Player.prototype.handleLoadedMetaData_;
	
	/**
	 * Fired when the player receives text data
	 *
	 * @event textdata
	 */
	Player.prototype.handleTextData_;
	
	/**
	 * Fired when the player has downloaded data at the current playback position
	 *
	 * @event loadeddata
	 */
	Player.prototype.handleLoadedData_;
	
	/**
	 * Fired when the user is active, e.g. moves the mouse over the player
	 *
	 * @event useractive
	 */
	Player.prototype.handleUserActive_;
	
	/**
	 * Fired when the user is inactive, e.g. a short delay after the last mouse move or control interaction
	 *
	 * @event userinactive
	 */
	Player.prototype.handleUserInactive_;
	
	/**
	 * Fired when the current playback position has changed *
	 * During playback this is fired every 15-250 milliseconds, depending on the
	 * playback technology in use.
	 *
	 * @event timeupdate
	 */
	Player.prototype.handleTimeUpdate_;
	
	/**
	 * Fired when video playback ends
	 *
	 * @event ended
	 */
	Player.prototype.handleTechEnded_;
	
	/**
	 * Fired when the volume changes
	 *
	 * @event volumechange
	 */
	Player.prototype.handleVolumeChange_;
	
	/**
	 * Fired when an error occurs
	 *
	 * @event error
	 */
	Player.prototype.handleError_;
	
	Player.prototype.flexNotSupported_ = function () {
	  var elem = _globalDocument2['default'].createElement('i');
	
	  // Note: We don't actually use flexBasis (or flexOrder), but it's one of the more
	  // common flex features that we can rely on when checking for flex support.
	  return !('flexBasis' in elem.style || 'webkitFlexBasis' in elem.style || 'mozFlexBasis' in elem.style || 'msFlexBasis' in elem.style || 'msFlexOrder' in elem.style) /* IE10-specific (2012 flex spec)  */;
	};
	
	_componentJs2['default'].registerComponent('Player', Player);
	exports['default'] = Player;
	module.exports = exports['default'];
	// If empty string, make it a parsable json object.
	
	},{"./big-play-button.js":63,"./component.js":67,"./control-bar/control-bar.js":70,"./error-display.js":103,"./fullscreen-api.js":106,"./loading-spinner.js":107,"./media-error.js":108,"./modal-dialog":112,"./poster-image.js":117,"./tech/html5.js":122,"./tech/loader.js":123,"./tech/tech.js":124,"./tracks/audio-track-list.js":125,"./tracks/text-track-display.js":130,"./tracks/text-track-list-converter.js":131,"./tracks/text-track-settings.js":133,"./tracks/video-track-list.js":138,"./utils/browser.js":140,"./utils/buffer.js":141,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/guid.js":146,"./utils/log.js":147,"./utils/merge-options.js":148,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/to-title-case.js":151,"global/document":1,"global/window":2,"object.assign":45,"safe-json-parse/tuple":54}],114:[function(_dereq_,module,exports){
	/**
	 * @file plugins.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _playerJs = _dereq_('./player.js');
	
	var _playerJs2 = _interopRequireDefault(_playerJs);
	
	/**
	 * The method for registering a video.js plugin
	 *
	 * @param  {String} name The name of the plugin
	 * @param  {Function} init The function that is run when the player inits
	 * @method plugin
	 */
	var plugin = function plugin(name, init) {
	  _playerJs2['default'].prototype[name] = init;
	};
	
	exports['default'] = plugin;
	module.exports = exports['default'];
	
	},{"./player.js":113}],115:[function(_dereq_,module,exports){
	/**
	 * @file popup-button.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _clickableComponentJs = _dereq_('../clickable-component.js');
	
	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _popupJs = _dereq_('./popup.js');
	
	var _popupJs2 = _interopRequireDefault(_popupJs);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	/**
	 * A button class with a popup control
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends ClickableComponent
	 * @class PopupButton
	 */
	
	var PopupButton = (function (_ClickableComponent) {
	  _inherits(PopupButton, _ClickableComponent);
	
	  function PopupButton(player) {
	    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    _classCallCheck(this, PopupButton);
	
	    _ClickableComponent.call(this, player, options);
	
	    this.update();
	  }
	
	  /**
	   * Update popup
	   *
	   * @method update
	   */
	
	  PopupButton.prototype.update = function update() {
	    var popup = this.createPopup();
	
	    if (this.popup) {
	      this.removeChild(this.popup);
	    }
	
	    this.popup = popup;
	    this.addChild(popup);
	
	    if (this.items && this.items.length === 0) {
	      this.hide();
	    } else if (this.items && this.items.length > 1) {
	      this.show();
	    }
	  };
	
	  /**
	   * Create popup - Override with specific functionality for component
	   *
	   * @return {Popup} The constructed popup
	   * @method createPopup
	   */
	
	  PopupButton.prototype.createPopup = function createPopup() {};
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  PopupButton.prototype.createEl = function createEl() {
	    return _ClickableComponent.prototype.createEl.call(this, 'div', {
	      className: this.buildCSSClass()
	    });
	  };
	
	  /**
	   * Allow sub components to stack CSS class names
	   *
	   * @return {String} The constructed class name
	   * @method buildCSSClass
	   */
	
	  PopupButton.prototype.buildCSSClass = function buildCSSClass() {
	    var menuButtonClass = 'vjs-menu-button';
	
	    // If the inline option is passed, we want to use different styles altogether.
	    if (this.options_.inline === true) {
	      menuButtonClass += '-inline';
	    } else {
	      menuButtonClass += '-popup';
	    }
	
	    return 'vjs-menu-button ' + menuButtonClass + ' ' + _ClickableComponent.prototype.buildCSSClass.call(this);
	  };
	
	  return PopupButton;
	})(_clickableComponentJs2['default']);
	
	_componentJs2['default'].registerComponent('PopupButton', PopupButton);
	exports['default'] = PopupButton;
	module.exports = exports['default'];
	
	},{"../clickable-component.js":65,"../component.js":67,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/to-title-case.js":151,"./popup.js":116}],116:[function(_dereq_,module,exports){
	/**
	 * @file popup.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsEventsJs = _dereq_('../utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	/**
	 * The Popup component is used to build pop up controls.
	 *
	 * @extends Component
	 * @class Popup
	 */
	
	var Popup = (function (_Component) {
	  _inherits(Popup, _Component);
	
	  function Popup() {
	    _classCallCheck(this, Popup);
	
	    _Component.apply(this, arguments);
	  }
	
	  /**
	   * Add a popup item to the popup
	   *
	   * @param {Object|String} component Component or component type to add
	   * @method addItem
	   */
	
	  Popup.prototype.addItem = function addItem(component) {
	    this.addChild(component);
	    component.on('click', Fn.bind(this, function () {
	      this.unlockShowing();
	    }));
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Popup.prototype.createEl = function createEl() {
	    var contentElType = this.options_.contentElType || 'ul';
	    this.contentEl_ = Dom.createEl(contentElType, {
	      className: 'vjs-menu-content'
	    });
	    var el = _Component.prototype.createEl.call(this, 'div', {
	      append: this.contentEl_,
	      className: 'vjs-menu'
	    });
	    el.appendChild(this.contentEl_);
	
	    // Prevent clicks from bubbling up. Needed for Popup Buttons,
	    // where a click on the parent is significant
	    Events.on(el, 'click', function (event) {
	      event.preventDefault();
	      event.stopImmediatePropagation();
	    });
	
	    return el;
	  };
	
	  return Popup;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('Popup', Popup);
	exports['default'] = Popup;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../utils/dom.js":142,"../utils/events.js":143,"../utils/fn.js":144}],117:[function(_dereq_,module,exports){
	/**
	 * @file poster-image.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _clickableComponentJs = _dereq_('./clickable-component.js');
	
	var _clickableComponentJs2 = _interopRequireDefault(_clickableComponentJs);
	
	var _componentJs = _dereq_('./component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsDomJs = _dereq_('./utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsBrowserJs = _dereq_('./utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	/**
	 * The component that handles showing the poster image.
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Button
	 * @class PosterImage
	 */
	
	var PosterImage = (function (_ClickableComponent) {
	  _inherits(PosterImage, _ClickableComponent);
	
	  function PosterImage(player, options) {
	    _classCallCheck(this, PosterImage);
	
	    _ClickableComponent.call(this, player, options);
	
	    this.update();
	    player.on('posterchange', Fn.bind(this, this.update));
	  }
	
	  /**
	   * Clean up the poster image
	   *
	   * @method dispose
	   */
	
	  PosterImage.prototype.dispose = function dispose() {
	    this.player().off('posterchange', this.update);
	    _ClickableComponent.prototype.dispose.call(this);
	  };
	
	  /**
	   * Create the poster's image element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  PosterImage.prototype.createEl = function createEl() {
	    var el = Dom.createEl('div', {
	      className: 'vjs-poster',
	
	      // Don't want poster to be tabbable.
	      tabIndex: -1
	    });
	
	    // To ensure the poster image resizes while maintaining its original aspect
	    // ratio, use a div with `background-size` when available. For browsers that
	    // do not support `background-size` (e.g. IE8), fall back on using a regular
	    // img element.
	    if (!browser.BACKGROUND_SIZE_SUPPORTED) {
	      this.fallbackImg_ = Dom.createEl('img');
	      el.appendChild(this.fallbackImg_);
	    }
	
	    return el;
	  };
	
	  /**
	   * Event handler for updates to the player's poster source
	   *
	   * @method update
	   */
	
	  PosterImage.prototype.update = function update() {
	    var url = this.player().poster();
	
	    this.setSrc(url);
	
	    // If there's no poster source we should display:none on this component
	    // so it's not still clickable or right-clickable
	    if (url) {
	      this.show();
	    } else {
	      this.hide();
	    }
	  };
	
	  /**
	   * Set the poster source depending on the display method
	   *
	   * @param {String} url The URL to the poster source
	   * @method setSrc
	   */
	
	  PosterImage.prototype.setSrc = function setSrc(url) {
	    if (this.fallbackImg_) {
	      this.fallbackImg_.src = url;
	    } else {
	      var backgroundImage = '';
	      // Any falsey values should stay as an empty string, otherwise
	      // this will throw an extra error
	      if (url) {
	        backgroundImage = 'url("' + url + '")';
	      }
	
	      this.el_.style.backgroundImage = backgroundImage;
	    }
	  };
	
	  /**
	   * Event handler for clicks on the poster image
	   *
	   * @method handleClick
	   */
	
	  PosterImage.prototype.handleClick = function handleClick() {
	    // We don't want a click to trigger playback when controls are disabled
	    // but CSS should be hiding the poster to prevent that from happening
	    if (this.player_.paused()) {
	      this.player_.play();
	    } else {
	      this.player_.pause();
	    }
	  };
	
	  return PosterImage;
	})(_clickableComponentJs2['default']);
	
	_componentJs2['default'].registerComponent('PosterImage', PosterImage);
	exports['default'] = PosterImage;
	module.exports = exports['default'];
	
	},{"./clickable-component.js":65,"./component.js":67,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/fn.js":144}],118:[function(_dereq_,module,exports){
	/**
	 * @file setup.js
	 *
	 * Functions for automatically setting up a player
	 * based on the data-setup attribute of the video tag
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _windowLoaded = false;
	var videojs = undefined;
	
	// Automatically set up any tags that have a data-setup attribute
	var autoSetup = function autoSetup() {
	  // One day, when we stop supporting IE8, go back to this, but in the meantime...*hack hack hack*
	  // var vids = Array.prototype.slice.call(document.getElementsByTagName('video'));
	  // var audios = Array.prototype.slice.call(document.getElementsByTagName('audio'));
	  // var mediaEls = vids.concat(audios);
	
	  // Because IE8 doesn't support calling slice on a node list, we need to loop through each list of elements
	  // to build up a new, combined list of elements.
	  var vids = _globalDocument2['default'].getElementsByTagName('video');
	  var audios = _globalDocument2['default'].getElementsByTagName('audio');
	  var mediaEls = [];
	  if (vids && vids.length > 0) {
	    for (var i = 0, e = vids.length; i < e; i++) {
	      mediaEls.push(vids[i]);
	    }
	  }
	  if (audios && audios.length > 0) {
	    for (var i = 0, e = audios.length; i < e; i++) {
	      mediaEls.push(audios[i]);
	    }
	  }
	
	  // Check if any media elements exist
	  if (mediaEls && mediaEls.length > 0) {
	
	    for (var i = 0, e = mediaEls.length; i < e; i++) {
	      var mediaEl = mediaEls[i];
	
	      // Check if element exists, has getAttribute func.
	      // IE seems to consider typeof el.getAttribute == 'object' instead of 'function' like expected, at least when loading the player immediately.
	      if (mediaEl && mediaEl.getAttribute) {
	
	        // Make sure this player hasn't already been set up.
	        if (mediaEl['player'] === undefined) {
	          var options = mediaEl.getAttribute('data-setup');
	
	          // Check if data-setup attr exists.
	          // We only auto-setup if they've added the data-setup attr.
	          if (options !== null) {
	            // Create new video.js instance.
	            var player = videojs(mediaEl);
	          }
	        }
	
	        // If getAttribute isn't defined, we need to wait for the DOM.
	      } else {
	          autoSetupTimeout(1);
	          break;
	        }
	    }
	
	    // No videos were found, so keep looping unless page is finished loading.
	  } else if (!_windowLoaded) {
	      autoSetupTimeout(1);
	    }
	};
	
	// Pause to let the DOM keep processing
	var autoSetupTimeout = function autoSetupTimeout(wait, vjs) {
	  if (vjs) {
	    videojs = vjs;
	  }
	
	  setTimeout(autoSetup, wait);
	};
	
	if (_globalDocument2['default'].readyState === 'complete') {
	  _windowLoaded = true;
	} else {
	  Events.one(_globalWindow2['default'], 'load', function () {
	    _windowLoaded = true;
	  });
	}
	
	var hasLoaded = function hasLoaded() {
	  return _windowLoaded;
	};
	
	exports.autoSetup = autoSetup;
	exports.autoSetupTimeout = autoSetupTimeout;
	exports.hasLoaded = hasLoaded;
	
	},{"./utils/events.js":143,"global/document":1,"global/window":2}],119:[function(_dereq_,module,exports){
	/**
	 * @file slider.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	/**
	 * The base functionality for sliders like the volume bar and seek bar
	 *
	 * @param {Player|Object} player
	 * @param {Object=} options
	 * @extends Component
	 * @class Slider
	 */
	
	var Slider = (function (_Component) {
	  _inherits(Slider, _Component);
	
	  function Slider(player, options) {
	    _classCallCheck(this, Slider);
	
	    _Component.call(this, player, options);
	
	    // Set property names to bar to match with the child Slider class is looking for
	    this.bar = this.getChild(this.options_.barName);
	
	    // Set a horizontal or vertical class on the slider depending on the slider type
	    this.vertical(!!this.options_.vertical);
	
	    this.on('mousedown', this.handleMouseDown);
	    this.on('touchstart', this.handleMouseDown);
	    this.on('focus', this.handleFocus);
	    this.on('blur', this.handleBlur);
	    this.on('click', this.handleClick);
	
	    this.on(player, 'controlsvisible', this.update);
	    this.on(player, this.playerEvent, this.update);
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @param {String} type Type of element to create
	   * @param {Object=} props List of properties in Object form
	   * @return {Element}
	   * @method createEl
	   */
	
	  Slider.prototype.createEl = function createEl(type) {
	    var props = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	    var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	    // Add the slider element class to all sub classes
	    props.className = props.className + ' vjs-slider';
	    props = _objectAssign2['default']({
	      tabIndex: 0
	    }, props);
	
	    attributes = _objectAssign2['default']({
	      'role': 'slider',
	      'aria-valuenow': 0,
	      'aria-valuemin': 0,
	      'aria-valuemax': 100,
	      tabIndex: 0
	    }, attributes);
	
	    return _Component.prototype.createEl.call(this, type, props, attributes);
	  };
	
	  /**
	   * Handle mouse down on slider
	   *
	   * @param {Object} event Mouse down event object
	   * @method handleMouseDown
	   */
	
	  Slider.prototype.handleMouseDown = function handleMouseDown(event) {
	    var doc = this.bar.el_.ownerDocument;
	
	    event.preventDefault();
	    Dom.blockTextSelection();
	
	    this.addClass('vjs-sliding');
	    this.trigger('slideractive');
	
	    this.on(doc, 'mousemove', this.handleMouseMove);
	    this.on(doc, 'mouseup', this.handleMouseUp);
	    this.on(doc, 'touchmove', this.handleMouseMove);
	    this.on(doc, 'touchend', this.handleMouseUp);
	
	    this.handleMouseMove(event);
	  };
	
	  /**
	   * To be overridden by a subclass
	   *
	   * @method handleMouseMove
	   */
	
	  Slider.prototype.handleMouseMove = function handleMouseMove() {};
	
	  /**
	   * Handle mouse up on Slider
	   *
	   * @method handleMouseUp
	   */
	
	  Slider.prototype.handleMouseUp = function handleMouseUp() {
	    var doc = this.bar.el_.ownerDocument;
	
	    Dom.unblockTextSelection();
	
	    this.removeClass('vjs-sliding');
	    this.trigger('sliderinactive');
	
	    this.off(doc, 'mousemove', this.handleMouseMove);
	    this.off(doc, 'mouseup', this.handleMouseUp);
	    this.off(doc, 'touchmove', this.handleMouseMove);
	    this.off(doc, 'touchend', this.handleMouseUp);
	
	    this.update();
	  };
	
	  /**
	   * Update slider
	   *
	   * @method update
	   */
	
	  Slider.prototype.update = function update() {
	    // In VolumeBar init we have a setTimeout for update that pops and update to the end of the
	    // execution stack. The player is destroyed before then update will cause an error
	    if (!this.el_) return;
	
	    // If scrubbing, we could use a cached value to make the handle keep up with the user's mouse.
	    // On HTML5 browsers scrubbing is really smooth, but some flash players are slow, so we might want to utilize this later.
	    // var progress =  (this.player_.scrubbing()) ? this.player_.getCache().currentTime / this.player_.duration() : this.player_.currentTime() / this.player_.duration();
	    var progress = this.getPercent();
	    var bar = this.bar;
	
	    // If there's no bar...
	    if (!bar) return;
	
	    // Protect against no duration and other division issues
	    if (typeof progress !== 'number' || progress !== progress || progress < 0 || progress === Infinity) {
	      progress = 0;
	    }
	
	    // Convert to a percentage for setting
	    var percentage = (progress * 100).toFixed(2) + '%';
	
	    // Set the new bar width or height
	    if (this.vertical()) {
	      bar.el().style.height = percentage;
	    } else {
	      bar.el().style.width = percentage;
	    }
	  };
	
	  /**
	   * Calculate distance for slider
	   *
	   * @param {Object} event Event object
	   * @method calculateDistance
	   */
	
	  Slider.prototype.calculateDistance = function calculateDistance(event) {
	    var position = Dom.getPointerPosition(this.el_, event);
	    if (this.vertical()) {
	      return position.y;
	    }
	    return position.x;
	  };
	
	  /**
	   * Handle on focus for slider
	   *
	   * @method handleFocus
	   */
	
	  Slider.prototype.handleFocus = function handleFocus() {
	    this.on(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };
	
	  /**
	   * Handle key press for slider
	   *
	   * @param {Object} event Event object
	   * @method handleKeyPress
	   */
	
	  Slider.prototype.handleKeyPress = function handleKeyPress(event) {
	    if (event.which === 37 || event.which === 40) {
	      // Left and Down Arrows
	      event.preventDefault();
	      this.stepBack();
	    } else if (event.which === 38 || event.which === 39) {
	      // Up and Right Arrows
	      event.preventDefault();
	      this.stepForward();
	    }
	  };
	
	  /**
	   * Handle on blur for slider
	   *
	   * @method handleBlur
	   */
	
	  Slider.prototype.handleBlur = function handleBlur() {
	    this.off(this.bar.el_.ownerDocument, 'keydown', this.handleKeyPress);
	  };
	
	  /**
	   * Listener for click events on slider, used to prevent clicks
	   *   from bubbling up to parent elements like button menus.
	   *
	   * @param {Object} event Event object
	   * @method handleClick
	   */
	
	  Slider.prototype.handleClick = function handleClick(event) {
	    event.stopImmediatePropagation();
	    event.preventDefault();
	  };
	
	  /**
	   * Get/set if slider is horizontal for vertical
	   *
	   * @param {Boolean} bool True if slider is vertical, false is horizontal
	   * @return {Boolean} True if slider is vertical, false is horizontal
	   * @method vertical
	   */
	
	  Slider.prototype.vertical = function vertical(bool) {
	    if (bool === undefined) {
	      return this.vertical_ || false;
	    }
	
	    this.vertical_ = !!bool;
	
	    if (this.vertical_) {
	      this.addClass('vjs-slider-vertical');
	    } else {
	      this.addClass('vjs-slider-horizontal');
	    }
	
	    return this;
	  };
	
	  return Slider;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('Slider', Slider);
	exports['default'] = Slider;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../utils/dom.js":142,"object.assign":45}],120:[function(_dereq_,module,exports){
	/**
	 * @file flash-rtmp.js
	 */
	'use strict';
	
	exports.__esModule = true;
	function FlashRtmpDecorator(Flash) {
	  Flash.streamingFormats = {
	    'rtmp/mp4': 'MP4',
	    'rtmp/flv': 'FLV'
	  };
	
	  Flash.streamFromParts = function (connection, stream) {
	    return connection + '&' + stream;
	  };
	
	  Flash.streamToParts = function (src) {
	    var parts = {
	      connection: '',
	      stream: ''
	    };
	
	    if (!src) return parts;
	
	    // Look for the normal URL separator we expect, '&'.
	    // If found, we split the URL into two pieces around the
	    // first '&'.
	    var connEnd = src.search(/&(?!\w+=)/);
	    var streamBegin = undefined;
	    if (connEnd !== -1) {
	      streamBegin = connEnd + 1;
	    } else {
	      // If there's not a '&', we use the last '/' as the delimiter.
	      connEnd = streamBegin = src.lastIndexOf('/') + 1;
	      if (connEnd === 0) {
	        // really, there's not a '/'?
	        connEnd = streamBegin = src.length;
	      }
	    }
	    parts.connection = src.substring(0, connEnd);
	    parts.stream = src.substring(streamBegin, src.length);
	
	    return parts;
	  };
	
	  Flash.isStreamingType = function (srcType) {
	    return srcType in Flash.streamingFormats;
	  };
	
	  // RTMP has four variations, any string starting
	  // with one of these protocols should be valid
	  Flash.RTMP_RE = /^rtmp[set]?:\/\//i;
	
	  Flash.isStreamingSrc = function (src) {
	    return Flash.RTMP_RE.test(src);
	  };
	
	  /**
	   * A source handler for RTMP urls
	   * @type {Object}
	   */
	  Flash.rtmpSourceHandler = {};
	
	  /**
	   * Check if Flash can play the given videotype
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canPlayType = function (type) {
	    if (Flash.isStreamingType(type)) {
	      return 'maybe';
	    }
	
	    return '';
	  };
	
	  /**
	   * Check if Flash can handle the source natively
	   * @param  {Object} source  The source object
	   * @param  {Object} options The options passed to the tech
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  Flash.rtmpSourceHandler.canHandleSource = function (source, options) {
	    var can = Flash.rtmpSourceHandler.canPlayType(source.type);
	
	    if (can) {
	      return can;
	    }
	
	    if (Flash.isStreamingSrc(source.src)) {
	      return 'maybe';
	    }
	
	    return '';
	  };
	
	  /**
	   * Pass the source to the flash object
	   * Adaptive source handlers will have more complicated workflows before passing
	   * video data to the video element
	   * @param  {Object} source   The source object
	   * @param  {Flash}  tech     The instance of the Flash tech
	   * @param  {Object} options  The options to pass to the source
	   */
	  Flash.rtmpSourceHandler.handleSource = function (source, tech, options) {
	    var srcParts = Flash.streamToParts(source.src);
	
	    tech['setRtmpConnection'](srcParts.connection);
	    tech['setRtmpStream'](srcParts.stream);
	  };
	
	  // Register the native source handler
	  Flash.registerSourceHandler(Flash.rtmpSourceHandler);
	
	  return Flash;
	}
	
	exports['default'] = FlashRtmpDecorator;
	module.exports = exports['default'];
	
	},{}],121:[function(_dereq_,module,exports){
	/**
	 * @file flash.js
	 * VideoJS-SWF - Custom Flash Player with HTML5-ish API
	 * https://github.com/zencoder/video-js-swf
	 * Not using setupTriggers. Using global onEvent func to distribute events
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _tech = _dereq_('./tech');
	
	var _tech2 = _interopRequireDefault(_tech);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsUrlJs = _dereq_('../utils/url.js');
	
	var Url = _interopRequireWildcard(_utilsUrlJs);
	
	var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');
	
	var _flashRtmp = _dereq_('./flash-rtmp');
	
	var _flashRtmp2 = _interopRequireDefault(_flashRtmp);
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var navigator = _globalWindow2['default'].navigator;
	/**
	 * Flash Media Controller - Wrapper for fallback SWF API
	 *
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready Ready callback function
	 * @extends Tech
	 * @class Flash
	 */
	
	var Flash = (function (_Tech) {
	  _inherits(Flash, _Tech);
	
	  function Flash(options, ready) {
	    _classCallCheck(this, Flash);
	
	    _Tech.call(this, options, ready);
	
	    // Set the source when ready
	    if (options.source) {
	      this.ready(function () {
	        this.setSource(options.source);
	      }, true);
	    }
	
	    // Having issues with Flash reloading on certain page actions (hide/resize/fullscreen) in certain browsers
	    // This allows resetting the playhead when we catch the reload
	    if (options.startTime) {
	      this.ready(function () {
	        this.load();
	        this.play();
	        this.currentTime(options.startTime);
	      }, true);
	    }
	
	    // Add global window functions that the swf expects
	    // A 4.x workflow we weren't able to solve for in 5.0
	    // because of the need to hard code these functions
	    // into the swf for security reasons
	    _globalWindow2['default'].videojs = _globalWindow2['default'].videojs || {};
	    _globalWindow2['default'].videojs.Flash = _globalWindow2['default'].videojs.Flash || {};
	    _globalWindow2['default'].videojs.Flash.onReady = Flash.onReady;
	    _globalWindow2['default'].videojs.Flash.onEvent = Flash.onEvent;
	    _globalWindow2['default'].videojs.Flash.onError = Flash.onError;
	
	    this.on('seeked', function () {
	      this.lastSeekTarget_ = undefined;
	    });
	  }
	
	  // Create setters and getters for attributes
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Flash.prototype.createEl = function createEl() {
	    var options = this.options_;
	
	    // If video.js is hosted locally you should also set the location
	    // for the hosted swf, which should be relative to the page (not video.js)
	    // Otherwise this adds a CDN url.
	    // The CDN also auto-adds a swf URL for that specific version.
	    if (!options.swf) {
	      options.swf = '//vjs.zencdn.net/swf/5.1.0/video-js.swf';
	    }
	
	    // Generate ID for swf object
	    var objId = options.techId;
	
	    // Merge default flashvars with ones passed in to init
	    var flashVars = _objectAssign2['default']({
	
	      // SWF Callback Functions
	      'readyFunction': 'videojs.Flash.onReady',
	      'eventProxyFunction': 'videojs.Flash.onEvent',
	      'errorEventProxyFunction': 'videojs.Flash.onError',
	
	      // Player Settings
	      'autoplay': options.autoplay,
	      'preload': options.preload,
	      'loop': options.loop,
	      'muted': options.muted
	
	    }, options.flashVars);
	
	    // Merge default parames with ones passed in
	    var params = _objectAssign2['default']({
	      'wmode': 'opaque', // Opaque is needed to overlay controls, but can affect playback performance
	      'bgcolor': '#000000' // Using bgcolor prevents a white flash when the object is loading
	    }, options.params);
	
	    // Merge default attributes with ones passed in
	    var attributes = _objectAssign2['default']({
	      'id': objId,
	      'name': objId, // Both ID and Name needed or swf to identify itself
	      'class': 'vjs-tech'
	    }, options.attributes);
	
	    this.el_ = Flash.embed(options.swf, flashVars, params, attributes);
	    this.el_.tech = this;
	
	    return this.el_;
	  };
	
	  /**
	   * Play for flash tech
	   *
	   * @method play
	   */
	
	  Flash.prototype.play = function play() {
	    if (this.ended()) {
	      this.setCurrentTime(0);
	    }
	    this.el_.vjs_play();
	  };
	
	  /**
	   * Pause for flash tech
	   *
	   * @method pause
	   */
	
	  Flash.prototype.pause = function pause() {
	    this.el_.vjs_pause();
	  };
	
	  /**
	   * Get/set video
	   *
	   * @param {Object=} src Source object
	   * @return {Object}
	   * @method src
	   */
	
	  Flash.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.currentSrc();
	    }
	
	    // Setting src through `src` not `setSrc` will be deprecated
	    return this.setSrc(_src);
	  };
	
	  /**
	   * Set video
	   *
	   * @param {Object=} src Source object
	   * @deprecated
	   * @method setSrc
	   */
	
	  Flash.prototype.setSrc = function setSrc(src) {
	    // Make sure source URL is absolute.
	    src = Url.getAbsoluteURL(src);
	    this.el_.vjs_src(src);
	
	    // Currently the SWF doesn't autoplay if you load a source later.
	    // e.g. Load player w/ no source, wait 2s, set src.
	    if (this.autoplay()) {
	      var tech = this;
	      this.setTimeout(function () {
	        tech.play();
	      }, 0);
	    }
	  };
	
	  /**
	   * Returns true if the tech is currently seeking.
	   * @return {boolean} true if seeking
	   */
	
	  Flash.prototype.seeking = function seeking() {
	    return this.lastSeekTarget_ !== undefined;
	  };
	
	  /**
	   * Set current time
	   *
	   * @param {Number} time Current time of video
	   * @method setCurrentTime
	   */
	
	  Flash.prototype.setCurrentTime = function setCurrentTime(time) {
	    var seekable = this.seekable();
	    if (seekable.length) {
	      // clamp to the current seekable range
	      time = time > seekable.start(0) ? time : seekable.start(0);
	      time = time < seekable.end(seekable.length - 1) ? time : seekable.end(seekable.length - 1);
	
	      this.lastSeekTarget_ = time;
	      this.trigger('seeking');
	      this.el_.vjs_setProperty('currentTime', time);
	      _Tech.prototype.setCurrentTime.call(this);
	    }
	  };
	
	  /**
	   * Get current time
	   *
	   * @param {Number=} time Current time of video
	   * @return {Number} Current time
	   * @method currentTime
	   */
	
	  Flash.prototype.currentTime = function currentTime(time) {
	    // when seeking make the reported time keep up with the requested time
	    // by reading the time we're seeking to
	    if (this.seeking()) {
	      return this.lastSeekTarget_ || 0;
	    }
	    return this.el_.vjs_getProperty('currentTime');
	  };
	
	  /**
	   * Get current source
	   *
	   * @method currentSrc
	   */
	
	  Flash.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    } else {
	      return this.el_.vjs_getProperty('currentSrc');
	    }
	  };
	
	  /**
	   * Get media duration
	   *
	   * @returns {Number} Media duration
	   */
	
	  Flash.prototype.duration = function duration() {
	    if (this.readyState() === 0) {
	      return NaN;
	    } else {
	      var duration = this.el_.vjs_getProperty('duration');
	      return duration >= 0 ? duration : Infinity;
	    }
	  };
	
	  /**
	   * Load media into player
	   *
	   * @method load
	   */
	
	  Flash.prototype.load = function load() {
	    this.el_.vjs_load();
	  };
	
	  /**
	   * Get poster
	   *
	   * @method poster
	   */
	
	  Flash.prototype.poster = function poster() {
	    this.el_.vjs_getProperty('poster');
	  };
	
	  /**
	   * Poster images are not handled by the Flash tech so make this a no-op
	   *
	   * @method setPoster
	   */
	
	  Flash.prototype.setPoster = function setPoster() {};
	
	  /**
	   * Determine if can seek in media
	   *
	   * @return {TimeRangeObject}
	   * @method seekable
	   */
	
	  Flash.prototype.seekable = function seekable() {
	    var duration = this.duration();
	    if (duration === 0) {
	      return _utilsTimeRangesJs.createTimeRange();
	    }
	    return _utilsTimeRangesJs.createTimeRange(0, duration);
	  };
	
	  /**
	   * Get buffered time range
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */
	
	  Flash.prototype.buffered = function buffered() {
	    var ranges = this.el_.vjs_getProperty('buffered');
	    if (ranges.length === 0) {
	      return _utilsTimeRangesJs.createTimeRange();
	    }
	    return _utilsTimeRangesJs.createTimeRange(ranges[0][0], ranges[0][1]);
	  };
	
	  /**
	   * Get fullscreen support -
	   * Flash does not allow fullscreen through javascript
	   * so always returns false
	   *
	   * @return {Boolean} false
	   * @method supportsFullScreen
	   */
	
	  Flash.prototype.supportsFullScreen = function supportsFullScreen() {
	    return false; // Flash does not allow fullscreen through javascript
	  };
	
	  /**
	   * Request to enter fullscreen
	   * Flash does not allow fullscreen through javascript
	   * so always returns false
	   *
	   * @return {Boolean} false
	   * @method enterFullScreen
	   */
	
	  Flash.prototype.enterFullScreen = function enterFullScreen() {
	    return false;
	  };
	
	  return Flash;
	})(_tech2['default']);
	
	var _api = Flash.prototype;
	var _readWrite = 'rtmpConnection,rtmpStream,preload,defaultPlaybackRate,playbackRate,autoplay,loop,mediaGroup,controller,controls,volume,muted,defaultMuted'.split(',');
	var _readOnly = 'networkState,readyState,initialTime,startOffsetTime,paused,ended,videoWidth,videoHeight'.split(',');
	
	function _createSetter(attr) {
	  var attrUpper = attr.charAt(0).toUpperCase() + attr.slice(1);
	  _api['set' + attrUpper] = function (val) {
	    return this.el_.vjs_setProperty(attr, val);
	  };
	}
	function _createGetter(attr) {
	  _api[attr] = function () {
	    return this.el_.vjs_getProperty(attr);
	  };
	}
	
	// Create getter and setters for all read/write attributes
	for (var i = 0; i < _readWrite.length; i++) {
	  _createGetter(_readWrite[i]);
	  _createSetter(_readWrite[i]);
	}
	
	// Create getters for read-only attributes
	for (var i = 0; i < _readOnly.length; i++) {
	  _createGetter(_readOnly[i]);
	}
	
	/* Flash Support Testing -------------------------------------------------------- */
	
	Flash.isSupported = function () {
	  return Flash.version()[0] >= 10;
	  // return swfobject.hasFlashPlayerVersion('10');
	};
	
	// Add Source Handler pattern functions to this tech
	_tech2['default'].withSourceHandlers(Flash);
	
	/*
	 * The default native source handler.
	 * This simply passes the source to the video element. Nothing fancy.
	 *
	 * @param  {Object} source   The source object
	 * @param  {Flash} tech  The instance of the Flash tech
	 */
	Flash.nativeSourceHandler = {};
	
	/**
	 * Check if Flash can play the given videotype
	 * @param  {String} type    The mimetype to check
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canPlayType = function (type) {
	  if (type in Flash.formats) {
	    return 'maybe';
	  }
	
	  return '';
	};
	
	/*
	 * Check Flash can handle the source natively
	 *
	 * @param  {Object} source  The source object
	 * @param  {Object} options The options passed to the tech
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Flash.nativeSourceHandler.canHandleSource = function (source, options) {
	  var type;
	
	  function guessMimeType(src) {
	    var ext = Url.getFileExtension(src);
	    if (ext) {
	      return 'video/' + ext;
	    }
	    return '';
	  }
	
	  if (!source.type) {
	    type = guessMimeType(source.src);
	  } else {
	    // Strip code information from the type because we don't get that specific
	    type = source.type.replace(/;.*/, '').toLowerCase();
	  }
	
	  return Flash.nativeSourceHandler.canPlayType(type);
	};
	
	/*
	 * Pass the source to the flash object
	 * Adaptive source handlers will have more complicated workflows before passing
	 * video data to the video element
	 *
	 * @param  {Object} source   The source object
	 * @param  {Flash}  tech     The instance of the Flash tech
	 * @param  {Object} options  The options to pass to the source
	 */
	Flash.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};
	
	/*
	 * Clean up the source handler when disposing the player or switching sources..
	 * (no cleanup is needed when supporting the format natively)
	 */
	Flash.nativeSourceHandler.dispose = function () {};
	
	// Register the native source handler
	Flash.registerSourceHandler(Flash.nativeSourceHandler);
	
	Flash.formats = {
	  'video/flv': 'FLV',
	  'video/x-flv': 'FLV',
	  'video/mp4': 'MP4',
	  'video/m4v': 'MP4'
	};
	
	Flash.onReady = function (currSwf) {
	  var el = Dom.getEl(currSwf);
	  var tech = el && el.tech;
	
	  // if there is no el then the tech has been disposed
	  // and the tech element was removed from the player div
	  if (tech && tech.el()) {
	    // check that the flash object is really ready
	    Flash.checkReady(tech);
	  }
	};
	
	// The SWF isn't always ready when it says it is. Sometimes the API functions still need to be added to the object.
	// If it's not ready, we set a timeout to check again shortly.
	Flash.checkReady = function (tech) {
	  // stop worrying if the tech has been disposed
	  if (!tech.el()) {
	    return;
	  }
	
	  // check if API property exists
	  if (tech.el().vjs_getProperty) {
	    // tell tech it's ready
	    tech.triggerReady();
	  } else {
	    // wait longer
	    this.setTimeout(function () {
	      Flash['checkReady'](tech);
	    }, 50);
	  }
	};
	
	// Trigger events from the swf on the player
	Flash.onEvent = function (swfID, eventName) {
	  var tech = Dom.getEl(swfID).tech;
	  tech.trigger(eventName, Array.prototype.slice.call(arguments, 2));
	};
	
	// Log errors from the swf
	Flash.onError = function (swfID, err) {
	  var tech = Dom.getEl(swfID).tech;
	
	  // trigger MEDIA_ERR_SRC_NOT_SUPPORTED
	  if (err === 'srcnotfound') {
	    return tech.error(4);
	  }
	
	  // trigger a custom error
	  tech.error('FLASH: ' + err);
	};
	
	// Flash Version Check
	Flash.version = function () {
	  var version = '0,0,0';
	
	  // IE
	  try {
	    version = new _globalWindow2['default'].ActiveXObject('ShockwaveFlash.ShockwaveFlash').GetVariable('$version').replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	
	    // other browsers
	  } catch (e) {
	    try {
	      if (navigator.mimeTypes['application/x-shockwave-flash'].enabledPlugin) {
	        version = (navigator.plugins['Shockwave Flash 2.0'] || navigator.plugins['Shockwave Flash']).description.replace(/\D+/g, ',').match(/^,?(.+),?$/)[1];
	      }
	    } catch (err) {}
	  }
	  return version.split(',');
	};
	
	// Flash embedding method. Only used in non-iframe mode
	Flash.embed = function (swf, flashVars, params, attributes) {
	  var code = Flash.getEmbedCode(swf, flashVars, params, attributes);
	
	  // Get element by embedding code and retrieving created element
	  var obj = Dom.createEl('div', { innerHTML: code }).childNodes[0];
	
	  return obj;
	};
	
	Flash.getEmbedCode = function (swf, flashVars, params, attributes) {
	  var objTag = '<object type="application/x-shockwave-flash" ';
	  var flashVarsString = '';
	  var paramsString = '';
	  var attrsString = '';
	
	  // Convert flash vars to string
	  if (flashVars) {
	    Object.getOwnPropertyNames(flashVars).forEach(function (key) {
	      flashVarsString += key + '=' + flashVars[key] + '&amp;';
	    });
	  }
	
	  // Add swf, flashVars, and other default params
	  params = _objectAssign2['default']({
	    'movie': swf,
	    'flashvars': flashVarsString,
	    'allowScriptAccess': 'always', // Required to talk to swf
	    'allowNetworking': 'all' // All should be default, but having security issues.
	  }, params);
	
	  // Create param tags string
	  Object.getOwnPropertyNames(params).forEach(function (key) {
	    paramsString += '<param name="' + key + '" value="' + params[key] + '" />';
	  });
	
	  attributes = _objectAssign2['default']({
	    // Add swf to attributes (need both for IE and Others to work)
	    'data': swf,
	
	    // Default to 100% width/height
	    'width': '100%',
	    'height': '100%'
	
	  }, attributes);
	
	  // Create Attributes string
	  Object.getOwnPropertyNames(attributes).forEach(function (key) {
	    attrsString += key + '="' + attributes[key] + '" ';
	  });
	
	  return '' + objTag + attrsString + '>' + paramsString + '</object>';
	};
	
	// Run Flash through the RTMP decorator
	_flashRtmp2['default'](Flash);
	
	_component2['default'].registerComponent('Flash', Flash);
	_tech2['default'].registerTech('Flash', Flash);
	exports['default'] = Flash;
	module.exports = exports['default'];
	
	},{"../component":67,"../utils/dom.js":142,"../utils/time-ranges.js":150,"../utils/url.js":152,"./flash-rtmp":120,"./tech":124,"global/window":2,"object.assign":45}],122:[function(_dereq_,module,exports){
	/**
	 * @file html5.js
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	var _templateObject = _taggedTemplateLiteralLoose(['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.'], ['Text Tracks are being loaded from another origin but the crossorigin attribute isn\'t used. \n            This may prevent text tracks from loading.']);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }
	
	var _techJs = _dereq_('./tech.js');
	
	var _techJs2 = _interopRequireDefault(_techJs);
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsDomJs = _dereq_('../utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsUrlJs = _dereq_('../utils/url.js');
	
	var Url = _interopRequireWildcard(_utilsUrlJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsLogJs = _dereq_('../utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _tsml = _dereq_('tsml');
	
	var _tsml2 = _interopRequireDefault(_tsml);
	
	var _srcJsTracksTextTrackJs = _dereq_('../../../src/js/tracks/text-track.js');
	
	var _srcJsTracksTextTrackJs2 = _interopRequireDefault(_srcJsTracksTextTrackJs);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _objectAssign = _dereq_('object.assign');
	
	var _objectAssign2 = _interopRequireDefault(_objectAssign);
	
	var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');
	
	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);
	
	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	/**
	 * HTML5 Media Controller - Wrapper for HTML5 Media API
	 *
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready Ready callback function
	 * @extends Tech
	 * @class Html5
	 */
	
	var Html5 = (function (_Tech) {
	  _inherits(Html5, _Tech);
	
	  function Html5(options, ready) {
	    var _this = this;
	
	    _classCallCheck(this, Html5);
	
	    _Tech.call(this, options, ready);
	
	    var source = options.source;
	    var crossoriginTracks = false;
	
	    // Set the source if one is provided
	    // 1) Check if the source is new (if not, we want to keep the original so playback isn't interrupted)
	    // 2) Check to see if the network state of the tag was failed at init, and if so, reset the source
	    // anyway so the error gets fired.
	    if (source && (this.el_.currentSrc !== source.src || options.tag && options.tag.initNetworkState_ === 3)) {
	      this.setSource(source);
	    } else {
	      this.handleLateInit_(this.el_);
	    }
	
	    if (this.el_.hasChildNodes()) {
	
	      var nodes = this.el_.childNodes;
	      var nodesLength = nodes.length;
	      var removeNodes = [];
	
	      while (nodesLength--) {
	        var node = nodes[nodesLength];
	        var nodeName = node.nodeName.toLowerCase();
	
	        if (nodeName === 'track') {
	          if (!this.featuresNativeTextTracks) {
	            // Empty video tag tracks so the built-in player doesn't use them also.
	            // This may not be fast enough to stop HTML5 browsers from reading the tags
	            // so we'll need to turn off any default tracks if we're manually doing
	            // captions and subtitles. videoElement.textTracks
	            removeNodes.push(node);
	          } else {
	            // store HTMLTrackElement and TextTrack to remote list
	            this.remoteTextTrackEls().addTrackElement_(node);
	            this.remoteTextTracks().addTrack_(node.track);
	            if (!crossoriginTracks && !this.el_.hasAttribute('crossorigin') && Url.isCrossOrigin(node.src)) {
	              crossoriginTracks = true;
	            }
	          }
	        }
	      }
	
	      for (var i = 0; i < removeNodes.length; i++) {
	        this.el_.removeChild(removeNodes[i]);
	      }
	    }
	
	    var trackTypes = ['audio', 'video'];
	
	    // ProxyNativeTextTracks
	    trackTypes.forEach(function (type) {
	      var capitalType = _utilsToTitleCaseJs2['default'](type);
	
	      if (!_this['featuresNative' + capitalType + 'Tracks']) {
	        return;
	      }
	      var tl = _this.el()[type + 'Tracks'];
	
	      if (tl && tl.addEventListener) {
	        tl.addEventListener('change', Fn.bind(_this, _this['handle' + capitalType + 'TrackChange_']));
	        tl.addEventListener('addtrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackAdd_']));
	        tl.addEventListener('removetrack', Fn.bind(_this, _this['handle' + capitalType + 'TrackRemove_']));
	
	        // Remove (native) trackts that are not used anymore
	        _this.on('loadstart', _this['removeOld' + capitalType + 'Tracks_']);
	      }
	    });
	
	    if (this.featuresNativeTextTracks) {
	      if (crossoriginTracks) {
	        _utilsLogJs2['default'].warn(_tsml2['default'](_templateObject));
	      }
	
	      this.handleTextTrackChange_ = Fn.bind(this, this.handleTextTrackChange);
	      this.handleTextTrackAdd_ = Fn.bind(this, this.handleTextTrackAdd);
	      this.handleTextTrackRemove_ = Fn.bind(this, this.handleTextTrackRemove);
	      this.proxyNativeTextTracks_();
	    }
	
	    // Determine if native controls should be used
	    // Our goal should be to get the custom controls on mobile solid everywhere
	    // so we can remove this all together. Right now this will block custom
	    // controls on touch enabled laptops like the Chrome Pixel
	    if ((browser.TOUCH_ENABLED || browser.IS_IPHONE || browser.IS_NATIVE_ANDROID) && options.nativeControlsForTouch === true) {
	      this.setControls(true);
	    }
	
	    this.triggerReady();
	  }
	
	  /* HTML5 Support Testing ---------------------------------------------------- */
	
	  /*
	  * Element for testing browser HTML5 video capabilities
	  *
	  * @type {Element}
	  * @constant
	  * @private
	  */
	
	  /**
	   * Dispose of html5 media element
	   *
	   * @method dispose
	   */
	
	  Html5.prototype.dispose = function dispose() {
	    var _this2 = this;
	
	    // Un-ProxyNativeTracks
	    ['audio', 'video', 'text'].forEach(function (type) {
	      var capitalType = _utilsToTitleCaseJs2['default'](type);
	      var tl = _this2.el_[type + 'Tracks'];
	
	      if (tl && tl.removeEventListener) {
	        tl.removeEventListener('change', _this2['handle' + capitalType + 'TrackChange_']);
	        tl.removeEventListener('addtrack', _this2['handle' + capitalType + 'TrackAdd_']);
	        tl.removeEventListener('removetrack', _this2['handle' + capitalType + 'TrackRemove_']);
	      }
	
	      // Stop removing old text tracks
	      if (tl) {
	        _this2.off('loadstart', _this2['removeOld' + capitalType + 'Tracks_']);
	      }
	    });
	
	    Html5.disposeMediaElement(this.el_);
	    // tech will handle clearing of the emulated track list
	    _Tech.prototype.dispose.call(this);
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  Html5.prototype.createEl = function createEl() {
	    var el = this.options_.tag;
	
	    // Check if this browser supports moving the element into the box.
	    // On the iPhone video will break if you move the element,
	    // So we have to create a brand new element.
	    if (!el || this['movingMediaElementInDOM'] === false) {
	
	      // If the original tag is still there, clone and remove it.
	      if (el) {
	        var clone = el.cloneNode(true);
	        el.parentNode.insertBefore(clone, el);
	        Html5.disposeMediaElement(el);
	        el = clone;
	      } else {
	        el = _globalDocument2['default'].createElement('video');
	
	        // determine if native controls should be used
	        var tagAttributes = this.options_.tag && Dom.getElAttributes(this.options_.tag);
	        var attributes = _utilsMergeOptionsJs2['default']({}, tagAttributes);
	        if (!browser.TOUCH_ENABLED || this.options_.nativeControlsForTouch !== true) {
	          delete attributes.controls;
	        }
	
	        Dom.setElAttributes(el, _objectAssign2['default'](attributes, {
	          id: this.options_.techId,
	          'class': 'vjs-tech'
	        }));
	      }
	
	      el.playerId = this.options_.playerId;
	    }
	
	    // Update specific tag settings, in case they were overridden
	    var settingsAttrs = ['autoplay', 'preload', 'loop', 'muted'];
	    for (var i = settingsAttrs.length - 1; i >= 0; i--) {
	      var attr = settingsAttrs[i];
	      var overwriteAttrs = {};
	      if (typeof this.options_[attr] !== 'undefined') {
	        overwriteAttrs[attr] = this.options_[attr];
	      }
	      Dom.setElAttributes(el, overwriteAttrs);
	    }
	
	    return el;
	    // jenniisawesome = true;
	  };
	
	  // If we're loading the playback object after it has started loading
	  // or playing the video (often with autoplay on) then the loadstart event
	  // has already fired and we need to fire it manually because many things
	  // rely on it.
	
	  Html5.prototype.handleLateInit_ = function handleLateInit_(el) {
	    var _this3 = this;
	
	    if (el.networkState === 0 || el.networkState === 3) {
	      // The video element hasn't started loading the source yet
	      // or didn't find a source
	      return;
	    }
	
	    if (el.readyState === 0) {
	      var _ret = (function () {
	        // NetworkState is set synchronously BUT loadstart is fired at the
	        // end of the current stack, usually before setInterval(fn, 0).
	        // So at this point we know loadstart may have already fired or is
	        // about to fire, and either way the player hasn't seen it yet.
	        // We don't want to fire loadstart prematurely here and cause a
	        // double loadstart so we'll wait and see if it happens between now
	        // and the next loop, and fire it if not.
	        // HOWEVER, we also want to make sure it fires before loadedmetadata
	        // which could also happen between now and the next loop, so we'll
	        // watch for that also.
	        var loadstartFired = false;
	        var setLoadstartFired = function setLoadstartFired() {
	          loadstartFired = true;
	        };
	        _this3.on('loadstart', setLoadstartFired);
	
	        var triggerLoadstart = function triggerLoadstart() {
	          // We did miss the original loadstart. Make sure the player
	          // sees loadstart before loadedmetadata
	          if (!loadstartFired) {
	            this.trigger('loadstart');
	          }
	        };
	        _this3.on('loadedmetadata', triggerLoadstart);
	
	        _this3.ready(function () {
	          this.off('loadstart', setLoadstartFired);
	          this.off('loadedmetadata', triggerLoadstart);
	
	          if (!loadstartFired) {
	            // We did miss the original native loadstart. Fire it now.
	            this.trigger('loadstart');
	          }
	        });
	
	        return {
	          v: undefined
	        };
	      })();
	
	      if (typeof _ret === 'object') return _ret.v;
	    }
	
	    // From here on we know that loadstart already fired and we missed it.
	    // The other readyState events aren't as much of a problem if we double
	    // them, so not going to go to as much trouble as loadstart to prevent
	    // that unless we find reason to.
	    var eventsToTrigger = ['loadstart'];
	
	    // loadedmetadata: newly equal to HAVE_METADATA (1) or greater
	    eventsToTrigger.push('loadedmetadata');
	
	    // loadeddata: newly increased to HAVE_CURRENT_DATA (2) or greater
	    if (el.readyState >= 2) {
	      eventsToTrigger.push('loadeddata');
	    }
	
	    // canplay: newly increased to HAVE_FUTURE_DATA (3) or greater
	    if (el.readyState >= 3) {
	      eventsToTrigger.push('canplay');
	    }
	
	    // canplaythrough: newly equal to HAVE_ENOUGH_DATA (4)
	    if (el.readyState >= 4) {
	      eventsToTrigger.push('canplaythrough');
	    }
	
	    // We still need to give the player time to add event listeners
	    this.ready(function () {
	      eventsToTrigger.forEach(function (type) {
	        this.trigger(type);
	      }, this);
	    });
	  };
	
	  Html5.prototype.proxyNativeTextTracks_ = function proxyNativeTextTracks_() {
	    var tt = this.el().textTracks;
	
	    if (tt) {
	      // Add tracks - if player is initialised after DOM loaded, textTracks
	      // will not trigger addtrack
	      for (var i = 0; i < tt.length; i++) {
	        this.textTracks().addTrack_(tt[i]);
	      }
	
	      if (tt.addEventListener) {
	        tt.addEventListener('change', this.handleTextTrackChange_);
	        tt.addEventListener('addtrack', this.handleTextTrackAdd_);
	        tt.addEventListener('removetrack', this.handleTextTrackRemove_);
	      }
	
	      // Remove (native) texttracks that are not used anymore
	      this.on('loadstart', this.removeOldTextTracks_);
	    }
	  };
	
	  Html5.prototype.handleTextTrackChange = function handleTextTrackChange(e) {
	    var tt = this.textTracks();
	    this.textTracks().trigger({
	      type: 'change',
	      target: tt,
	      currentTarget: tt,
	      srcElement: tt
	    });
	  };
	
	  Html5.prototype.handleTextTrackAdd = function handleTextTrackAdd(e) {
	    this.textTracks().addTrack_(e.track);
	  };
	
	  Html5.prototype.handleTextTrackRemove = function handleTextTrackRemove(e) {
	    this.textTracks().removeTrack_(e.track);
	  };
	
	  Html5.prototype.handleVideoTrackChange_ = function handleVideoTrackChange_(e) {
	    var vt = this.videoTracks();
	    this.videoTracks().trigger({
	      type: 'change',
	      target: vt,
	      currentTarget: vt,
	      srcElement: vt
	    });
	  };
	
	  Html5.prototype.handleVideoTrackAdd_ = function handleVideoTrackAdd_(e) {
	    this.videoTracks().addTrack_(e.track);
	  };
	
	  Html5.prototype.handleVideoTrackRemove_ = function handleVideoTrackRemove_(e) {
	    this.videoTracks().removeTrack_(e.track);
	  };
	
	  Html5.prototype.handleAudioTrackChange_ = function handleAudioTrackChange_(e) {
	    var audioTrackList = this.audioTracks();
	    this.audioTracks().trigger({
	      type: 'change',
	      target: audioTrackList,
	      currentTarget: audioTrackList,
	      srcElement: audioTrackList
	    });
	  };
	
	  Html5.prototype.handleAudioTrackAdd_ = function handleAudioTrackAdd_(e) {
	    this.audioTracks().addTrack_(e.track);
	  };
	
	  Html5.prototype.handleAudioTrackRemove_ = function handleAudioTrackRemove_(e) {
	    this.audioTracks().removeTrack_(e.track);
	  };
	
	  /**
	   * This is a helper function that is used in removeOldTextTracks_, removeOldAudioTracks_ and
	   * removeOldVideoTracks_
	   * @param {Track[]} techTracks Tracks for this tech
	   * @param {Track[]} elTracks Tracks for the HTML5 video element
	   * @private
	   */
	
	  Html5.prototype.removeOldTracks_ = function removeOldTracks_(techTracks, elTracks) {
	    // This will loop over the techTracks and check if they are still used by the HTML5 video element
	    // If not, they will be removed from the emulated list
	    var removeTracks = [];
	    if (!elTracks) {
	      return;
	    }
	
	    for (var i = 0; i < techTracks.length; i++) {
	      var techTrack = techTracks[i];
	
	      var found = false;
	      for (var j = 0; j < elTracks.length; j++) {
	        if (elTracks[j] === techTrack) {
	          found = true;
	          break;
	        }
	      }
	
	      if (!found) {
	        removeTracks.push(techTrack);
	      }
	    }
	
	    for (var i = 0; i < removeTracks.length; i++) {
	      var _track = removeTracks[i];
	      techTracks.removeTrack_(_track);
	    }
	  };
	
	  Html5.prototype.removeOldTextTracks_ = function removeOldTextTracks_() {
	    var techTracks = this.textTracks();
	    var elTracks = this.el().textTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };
	
	  Html5.prototype.removeOldAudioTracks_ = function removeOldAudioTracks_() {
	    var techTracks = this.audioTracks();
	    var elTracks = this.el().audioTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };
	
	  Html5.prototype.removeOldVideoTracks_ = function removeOldVideoTracks_() {
	    var techTracks = this.videoTracks();
	    var elTracks = this.el().videoTracks;
	    this.removeOldTracks_(techTracks, elTracks);
	  };
	
	  /**
	   * Play for html5 tech
	   *
	   * @method play
	   */
	
	  Html5.prototype.play = function play() {
	    var playPromise = this.el_.play();
	
	    // Catch/silence error when a pause interrupts a play request
	    // on browsers which return a promise
	    if (playPromise !== undefined && typeof playPromise.then === 'function') {
	      playPromise.then(null, function (e) {});
	    }
	  };
	
	  /**
	   * Pause for html5 tech
	   *
	   * @method pause
	   */
	
	  Html5.prototype.pause = function pause() {
	    this.el_.pause();
	  };
	
	  /**
	   * Paused for html5 tech
	   *
	   * @return {Boolean}
	   * @method paused
	   */
	
	  Html5.prototype.paused = function paused() {
	    return this.el_.paused;
	  };
	
	  /**
	   * Get current time
	   *
	   * @return {Number}
	   * @method currentTime
	   */
	
	  Html5.prototype.currentTime = function currentTime() {
	    return this.el_.currentTime;
	  };
	
	  /**
	   * Set current time
	   *
	   * @param {Number} seconds Current time of video
	   * @method setCurrentTime
	   */
	
	  Html5.prototype.setCurrentTime = function setCurrentTime(seconds) {
	    try {
	      this.el_.currentTime = seconds;
	    } catch (e) {
	      _utilsLogJs2['default'](e, 'Video is not ready. (Video.js)');
	      // this.warning(VideoJS.warnings.videoNotReady);
	    }
	  };
	
	  /**
	   * Get duration
	   *
	   * @return {Number}
	   * @method duration
	   */
	
	  Html5.prototype.duration = function duration() {
	    return this.el_.duration || 0;
	  };
	
	  /**
	   * Get a TimeRange object that represents the intersection
	   * of the time ranges for which the user agent has all
	   * relevant media
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */
	
	  Html5.prototype.buffered = function buffered() {
	    return this.el_.buffered;
	  };
	
	  /**
	   * Get volume level
	   *
	   * @return {Number}
	   * @method volume
	   */
	
	  Html5.prototype.volume = function volume() {
	    return this.el_.volume;
	  };
	
	  /**
	   * Set volume level
	   *
	   * @param {Number} percentAsDecimal Volume percent as a decimal
	   * @method setVolume
	   */
	
	  Html5.prototype.setVolume = function setVolume(percentAsDecimal) {
	    this.el_.volume = percentAsDecimal;
	  };
	
	  /**
	   * Get if muted
	   *
	   * @return {Boolean}
	   * @method muted
	   */
	
	  Html5.prototype.muted = function muted() {
	    return this.el_.muted;
	  };
	
	  /**
	   * Set muted
	   *
	   * @param {Boolean} If player is to be muted or note
	   * @method setMuted
	   */
	
	  Html5.prototype.setMuted = function setMuted(muted) {
	    this.el_.muted = muted;
	  };
	
	  /**
	   * Get player width
	   *
	   * @return {Number}
	   * @method width
	   */
	
	  Html5.prototype.width = function width() {
	    return this.el_.offsetWidth;
	  };
	
	  /**
	   * Get player height
	   *
	   * @return {Number}
	   * @method height
	   */
	
	  Html5.prototype.height = function height() {
	    return this.el_.offsetHeight;
	  };
	
	  /**
	   * Get if there is fullscreen support
	   *
	   * @return {Boolean}
	   * @method supportsFullScreen
	   */
	
	  Html5.prototype.supportsFullScreen = function supportsFullScreen() {
	    if (typeof this.el_.webkitEnterFullScreen === 'function') {
	      var userAgent = _globalWindow2['default'].navigator.userAgent;
	      // Seems to be broken in Chromium/Chrome && Safari in Leopard
	      if (/Android/.test(userAgent) || !/Chrome|Mac OS X 10.5/.test(userAgent)) {
	        return true;
	      }
	    }
	    return false;
	  };
	
	  /**
	   * Request to enter fullscreen
	   *
	   * @method enterFullScreen
	   */
	
	  Html5.prototype.enterFullScreen = function enterFullScreen() {
	    var video = this.el_;
	
	    if ('webkitDisplayingFullscreen' in video) {
	      this.one('webkitbeginfullscreen', function () {
	        this.one('webkitendfullscreen', function () {
	          this.trigger('fullscreenchange', { isFullscreen: false });
	        });
	
	        this.trigger('fullscreenchange', { isFullscreen: true });
	      });
	    }
	
	    if (video.paused && video.networkState <= video.HAVE_METADATA) {
	      // attempt to prime the video element for programmatic access
	      // this isn't necessary on the desktop but shouldn't hurt
	      this.el_.play();
	
	      // playing and pausing synchronously during the transition to fullscreen
	      // can get iOS ~6.1 devices into a play/pause loop
	      this.setTimeout(function () {
	        video.pause();
	        video.webkitEnterFullScreen();
	      }, 0);
	    } else {
	      video.webkitEnterFullScreen();
	    }
	  };
	
	  /**
	   * Request to exit fullscreen
	   *
	   * @method exitFullScreen
	   */
	
	  Html5.prototype.exitFullScreen = function exitFullScreen() {
	    this.el_.webkitExitFullScreen();
	  };
	
	  /**
	   * Get/set video
	   *
	   * @param {Object=} src Source object
	   * @return {Object}
	   * @method src
	   */
	
	  Html5.prototype.src = function src(_src) {
	    if (_src === undefined) {
	      return this.el_.src;
	    } else {
	      // Setting src through `src` instead of `setSrc` will be deprecated
	      this.setSrc(_src);
	    }
	  };
	
	  /**
	   * Set video
	   *
	   * @param {Object} src Source object
	   * @deprecated
	   * @method setSrc
	   */
	
	  Html5.prototype.setSrc = function setSrc(src) {
	    this.el_.src = src;
	  };
	
	  /**
	   * Load media into player
	   *
	   * @method load
	   */
	
	  Html5.prototype.load = function load() {
	    this.el_.load();
	  };
	
	  /**
	   * Reset the tech. Removes all sources and calls `load`.
	   *
	   * @method reset
	   */
	
	  Html5.prototype.reset = function reset() {
	    Html5.resetMediaElement(this.el_);
	  };
	
	  /**
	   * Get current source
	   *
	   * @return {Object}
	   * @method currentSrc
	   */
	
	  Html5.prototype.currentSrc = function currentSrc() {
	    if (this.currentSource_) {
	      return this.currentSource_.src;
	    } else {
	      return this.el_.currentSrc;
	    }
	  };
	
	  /**
	   * Get poster
	   *
	   * @return {String}
	   * @method poster
	   */
	
	  Html5.prototype.poster = function poster() {
	    return this.el_.poster;
	  };
	
	  /**
	   * Set poster
	   *
	   * @param {String} val URL to poster image
	   * @method
	   */
	
	  Html5.prototype.setPoster = function setPoster(val) {
	    this.el_.poster = val;
	  };
	
	  /**
	   * Get preload attribute
	   *
	   * @return {String}
	   * @method preload
	   */
	
	  Html5.prototype.preload = function preload() {
	    return this.el_.preload;
	  };
	
	  /**
	   * Set preload attribute
	   *
	   * @param {String} val Value for preload attribute
	   * @method setPreload
	   */
	
	  Html5.prototype.setPreload = function setPreload(val) {
	    this.el_.preload = val;
	  };
	
	  /**
	   * Get autoplay attribute
	   *
	   * @return {String}
	   * @method autoplay
	   */
	
	  Html5.prototype.autoplay = function autoplay() {
	    return this.el_.autoplay;
	  };
	
	  /**
	   * Set autoplay attribute
	   *
	   * @param {String} val Value for preload attribute
	   * @method setAutoplay
	   */
	
	  Html5.prototype.setAutoplay = function setAutoplay(val) {
	    this.el_.autoplay = val;
	  };
	
	  /**
	   * Get controls attribute
	   *
	   * @return {String}
	   * @method controls
	   */
	
	  Html5.prototype.controls = function controls() {
	    return this.el_.controls;
	  };
	
	  /**
	   * Set controls attribute
	   *
	   * @param {String} val Value for controls attribute
	   * @method setControls
	   */
	
	  Html5.prototype.setControls = function setControls(val) {
	    this.el_.controls = !!val;
	  };
	
	  /**
	   * Get loop attribute
	   *
	   * @return {String}
	   * @method loop
	   */
	
	  Html5.prototype.loop = function loop() {
	    return this.el_.loop;
	  };
	
	  /**
	   * Set loop attribute
	   *
	   * @param {String} val Value for loop attribute
	   * @method setLoop
	   */
	
	  Html5.prototype.setLoop = function setLoop(val) {
	    this.el_.loop = val;
	  };
	
	  /**
	   * Get error value
	   *
	   * @return {String}
	   * @method error
	   */
	
	  Html5.prototype.error = function error() {
	    return this.el_.error;
	  };
	
	  /**
	   * Get whether or not the player is in the "seeking" state
	   *
	   * @return {Boolean}
	   * @method seeking
	   */
	
	  Html5.prototype.seeking = function seeking() {
	    return this.el_.seeking;
	  };
	
	  /**
	   * Get a TimeRanges object that represents the
	   * ranges of the media resource to which it is possible
	   * for the user agent to seek.
	   *
	   * @return {TimeRangeObject}
	   * @method seekable
	   */
	
	  Html5.prototype.seekable = function seekable() {
	    return this.el_.seekable;
	  };
	
	  /**
	   * Get if video ended
	   *
	   * @return {Boolean}
	   * @method ended
	   */
	
	  Html5.prototype.ended = function ended() {
	    return this.el_.ended;
	  };
	
	  /**
	   * Get the value of the muted content attribute
	   * This attribute has no dynamic effect, it only
	   * controls the default state of the element
	   *
	   * @return {Boolean}
	   * @method defaultMuted
	   */
	
	  Html5.prototype.defaultMuted = function defaultMuted() {
	    return this.el_.defaultMuted;
	  };
	
	  /**
	   * Get desired speed at which the media resource is to play
	   *
	   * @return {Number}
	   * @method playbackRate
	   */
	
	  Html5.prototype.playbackRate = function playbackRate() {
	    return this.el_.playbackRate;
	  };
	
	  /**
	   * Returns a TimeRanges object that represents the ranges of the
	   * media resource that the user agent has played.
	   * @return {TimeRangeObject} the range of points on the media
	   * timeline that has been reached through normal playback
	   * @see https://html.spec.whatwg.org/multipage/embedded-content.html#dom-media-played
	   */
	
	  Html5.prototype.played = function played() {
	    return this.el_.played;
	  };
	
	  /**
	   * Set desired speed at which the media resource is to play
	   *
	   * @param {Number} val Speed at which the media resource is to play
	   * @method setPlaybackRate
	   */
	
	  Html5.prototype.setPlaybackRate = function setPlaybackRate(val) {
	    this.el_.playbackRate = val;
	  };
	
	  /**
	   * Get the current state of network activity for the element, from
	   * the list below
	   * NETWORK_EMPTY (numeric value 0)
	   * NETWORK_IDLE (numeric value 1)
	   * NETWORK_LOADING (numeric value 2)
	   * NETWORK_NO_SOURCE (numeric value 3)
	   *
	   * @return {Number}
	   * @method networkState
	   */
	
	  Html5.prototype.networkState = function networkState() {
	    return this.el_.networkState;
	  };
	
	  /**
	   * Get a value that expresses the current state of the element
	   * with respect to rendering the current playback position, from
	   * the codes in the list below
	   * HAVE_NOTHING (numeric value 0)
	   * HAVE_METADATA (numeric value 1)
	   * HAVE_CURRENT_DATA (numeric value 2)
	   * HAVE_FUTURE_DATA (numeric value 3)
	   * HAVE_ENOUGH_DATA (numeric value 4)
	   *
	   * @return {Number}
	   * @method readyState
	   */
	
	  Html5.prototype.readyState = function readyState() {
	    return this.el_.readyState;
	  };
	
	  /**
	   * Get width of video
	   *
	   * @return {Number}
	   * @method videoWidth
	   */
	
	  Html5.prototype.videoWidth = function videoWidth() {
	    return this.el_.videoWidth;
	  };
	
	  /**
	   * Get height of video
	   *
	   * @return {Number}
	   * @method videoHeight
	   */
	
	  Html5.prototype.videoHeight = function videoHeight() {
	    return this.el_.videoHeight;
	  };
	
	  /**
	   * Get text tracks
	   *
	   * @return {TextTrackList}
	   * @method textTracks
	   */
	
	  Html5.prototype.textTracks = function textTracks() {
	    return _Tech.prototype.textTracks.call(this);
	  };
	
	  /**
	   * Creates and returns a text track object
	   *
	   * @param {String} kind Text track kind (subtitles, captions, descriptions
	   *                                       chapters and metadata)
	   * @param {String=} label Label to identify the text track
	   * @param {String=} language Two letter language abbreviation
	   * @return {TextTrackObject}
	   * @method addTextTrack
	   */
	
	  Html5.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.addTextTrack.call(this, kind, label, language);
	    }
	
	    return this.el_.addTextTrack(kind, label, language);
	  };
	
	  /**
	   * Creates a remote text track object and returns a html track element
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label and src (location of the WebVTT file)
	   * @return {HTMLTrackElement}
	   * @method addRemoteTextTrack
	   */
	
	  Html5.prototype.addRemoteTextTrack = function addRemoteTextTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.addRemoteTextTrack.call(this, options);
	    }
	
	    var htmlTrackElement = _globalDocument2['default'].createElement('track');
	
	    if (options.kind) {
	      htmlTrackElement.kind = options.kind;
	    }
	    if (options.label) {
	      htmlTrackElement.label = options.label;
	    }
	    if (options.language || options.srclang) {
	      htmlTrackElement.srclang = options.language || options.srclang;
	    }
	    if (options['default']) {
	      htmlTrackElement['default'] = options['default'];
	    }
	    if (options.id) {
	      htmlTrackElement.id = options.id;
	    }
	    if (options.src) {
	      htmlTrackElement.src = options.src;
	    }
	
	    this.el().appendChild(htmlTrackElement);
	
	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);
	
	    return htmlTrackElement;
	  };
	
	  /**
	   * Remove remote text track from TextTrackList object
	   *
	   * @param {TextTrackObject} track Texttrack object to remove
	   * @method removeRemoteTextTrack
	   */
	
	  Html5.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    if (!this['featuresNativeTextTracks']) {
	      return _Tech.prototype.removeRemoteTextTrack.call(this, track);
	    }
	
	    var tracks = undefined,
	        i = undefined;
	
	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
	
	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);
	
	    tracks = this.$$('track');
	
	    i = tracks.length;
	    while (i--) {
	      if (track === tracks[i] || track === tracks[i].track) {
	        this.el().removeChild(tracks[i]);
	      }
	    }
	  };
	
	  return Html5;
	})(_techJs2['default']);
	
	Html5.TEST_VID = _globalDocument2['default'].createElement('video');
	var track = _globalDocument2['default'].createElement('track');
	track.kind = 'captions';
	track.srclang = 'en';
	track.label = 'English';
	Html5.TEST_VID.appendChild(track);
	
	/*
	 * Check if HTML5 video is supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.isSupported = function () {
	  // IE9 with no Media Player is a LIAR! (#984)
	  try {
	    Html5.TEST_VID['volume'] = 0.5;
	  } catch (e) {
	    return false;
	  }
	
	  return !!Html5.TEST_VID.canPlayType;
	};
	
	// Add Source Handler pattern functions to this tech
	_techJs2['default'].withSourceHandlers(Html5);
	
	/*
	 * The default native source handler.
	 * This simply passes the source to the video element. Nothing fancy.
	 *
	 * @param  {Object} source   The source object
	 * @param  {Html5} tech  The instance of the HTML5 tech
	 */
	Html5.nativeSourceHandler = {};
	
	/*
	 * Check if the video element can play the given videotype
	 *
	 * @param  {String} type    The mimetype to check
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canPlayType = function (type) {
	  // IE9 on Windows 7 without MediaPlayer throws an error here
	  // https://github.com/videojs/video.js/issues/519
	  try {
	    return Html5.TEST_VID.canPlayType(type);
	  } catch (e) {
	    return '';
	  }
	};
	
	/*
	 * Check if the video element can handle the source natively
	 *
	 * @param  {Object} source  The source object
	 * @param  {Object} options The options passed to the tech
	 * @return {String}         'probably', 'maybe', or '' (empty string)
	 */
	Html5.nativeSourceHandler.canHandleSource = function (source, options) {
	  var match, ext;
	
	  // If a type was provided we should rely on that
	  if (source.type) {
	    return Html5.nativeSourceHandler.canPlayType(source.type);
	  } else if (source.src) {
	    // If no type, fall back to checking 'video/[EXTENSION]'
	    ext = Url.getFileExtension(source.src);
	
	    return Html5.nativeSourceHandler.canPlayType('video/' + ext);
	  }
	
	  return '';
	};
	
	/*
	 * Pass the source to the video element
	 * Adaptive source handlers will have more complicated workflows before passing
	 * video data to the video element
	 *
	 * @param  {Object} source   The source object
	 * @param  {Html5}  tech     The instance of the Html5 tech
	 * @param  {Object} options  The options to pass to the source
	 */
	Html5.nativeSourceHandler.handleSource = function (source, tech, options) {
	  tech.setSrc(source.src);
	};
	
	/*
	* Clean up the source handler when disposing the player or switching sources..
	* (no cleanup is needed when supporting the format natively)
	*/
	Html5.nativeSourceHandler.dispose = function () {};
	
	// Register the native source handler
	Html5.registerSourceHandler(Html5.nativeSourceHandler);
	
	/*
	 * Check if the volume can be changed in this browser/device.
	 * Volume cannot be changed in a lot of mobile devices.
	 * Specifically, it can't be changed from 1 on iOS.
	 *
	 * @return {Boolean}
	 */
	Html5.canControlVolume = function () {
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var volume = Html5.TEST_VID.volume;
	    Html5.TEST_VID.volume = volume / 2 + 0.1;
	    return volume !== Html5.TEST_VID.volume;
	  } catch (e) {
	    return false;
	  }
	};
	
	/*
	 * Check if playbackRate is supported in this browser/device.
	 *
	 * @return {Boolean}
	 */
	Html5.canControlPlaybackRate = function () {
	  // Playback rate API is implemented in Android Chrome, but doesn't do anything
	  // https://github.com/videojs/video.js/issues/3180
	  if (browser.IS_ANDROID && browser.IS_CHROME) {
	    return false;
	  }
	  // IE will error if Windows Media Player not installed #3315
	  try {
	    var playbackRate = Html5.TEST_VID.playbackRate;
	    Html5.TEST_VID.playbackRate = playbackRate / 2 + 0.1;
	    return playbackRate !== Html5.TEST_VID.playbackRate;
	  } catch (e) {
	    return false;
	  }
	};
	
	/*
	 * Check to see if native text tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeTextTracks = function () {
	  var supportsTextTracks;
	
	  // Figure out native text track support
	  // If mode is a number, we cannot change it because it'll disappear from view.
	  // Browsers with numeric modes include IE10 and older (<=2013) samsung android models.
	  // Firefox isn't playing nice either with modifying the mode
	  // TODO: Investigate firefox: https://github.com/videojs/video.js/issues/1862
	  supportsTextTracks = !!Html5.TEST_VID.textTracks;
	  if (supportsTextTracks && Html5.TEST_VID.textTracks.length > 0) {
	    supportsTextTracks = typeof Html5.TEST_VID.textTracks[0]['mode'] !== 'number';
	  }
	  if (supportsTextTracks && browser.IS_FIREFOX) {
	    supportsTextTracks = false;
	  }
	  if (supportsTextTracks && !('onremovetrack' in Html5.TEST_VID.textTracks)) {
	    supportsTextTracks = false;
	  }
	
	  return supportsTextTracks;
	};
	
	/*
	 * Check to see if native video tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeVideoTracks = function () {
	  var supportsVideoTracks = !!Html5.TEST_VID.videoTracks;
	  return supportsVideoTracks;
	};
	
	/*
	 * Check to see if native audio tracks are supported by this browser/device
	 *
	 * @return {Boolean}
	 */
	Html5.supportsNativeAudioTracks = function () {
	  var supportsAudioTracks = !!Html5.TEST_VID.audioTracks;
	  return supportsAudioTracks;
	};
	
	/**
	 * An array of events available on the Html5 tech.
	 *
	 * @private
	 * @type {Array}
	 */
	Html5.Events = ['loadstart', 'suspend', 'abort', 'error', 'emptied', 'stalled', 'loadedmetadata', 'loadeddata', 'canplay', 'canplaythrough', 'playing', 'waiting', 'seeking', 'seeked', 'ended', 'durationchange', 'timeupdate', 'progress', 'play', 'pause', 'ratechange', 'volumechange'];
	
	/*
	 * Set the tech's volume control support status
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresVolumeControl'] = Html5.canControlVolume();
	
	/*
	 * Set the tech's playbackRate support status
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresPlaybackRate'] = Html5.canControlPlaybackRate();
	
	/*
	 * Set the tech's status on moving the video element.
	 * In iOS, if you move a video element in the DOM, it breaks video playback.
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['movingMediaElementInDOM'] = !browser.IS_IOS;
	
	/*
	 * Set the the tech's fullscreen resize support status.
	 * HTML video is able to automatically resize when going to fullscreen.
	 * (No longer appears to be used. Can probably be removed.)
	 */
	Html5.prototype['featuresFullscreenResize'] = true;
	
	/*
	 * Set the tech's progress event support status
	 * (this disables the manual progress events of the Tech)
	 */
	Html5.prototype['featuresProgressEvents'] = true;
	
	/*
	 * Sets the tech's status on native text track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeTextTracks'] = Html5.supportsNativeTextTracks();
	
	/**
	 * Sets the tech's status on native text track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeVideoTracks'] = Html5.supportsNativeVideoTracks();
	
	/**
	 * Sets the tech's status on native audio track support
	 *
	 * @type {Boolean}
	 */
	Html5.prototype['featuresNativeAudioTracks'] = Html5.supportsNativeAudioTracks();
	
	// HTML5 Feature detection and Device Fixes --------------------------------- //
	var canPlayType = undefined;
	var mpegurlRE = /^application\/(?:x-|vnd\.apple\.)mpegurl/i;
	var mp4RE = /^video\/mp4/i;
	
	Html5.patchCanPlayType = function () {
	  // Android 4.0 and above can play HLS to some extent but it reports being unable to do so
	  if (browser.ANDROID_VERSION >= 4.0) {
	    if (!canPlayType) {
	      canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
	    }
	
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mpegurlRE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	
	  // Override Android 2.2 and less canPlayType method which is broken
	  if (browser.IS_OLD_ANDROID) {
	    if (!canPlayType) {
	      canPlayType = Html5.TEST_VID.constructor.prototype.canPlayType;
	    }
	
	    Html5.TEST_VID.constructor.prototype.canPlayType = function (type) {
	      if (type && mp4RE.test(type)) {
	        return 'maybe';
	      }
	      return canPlayType.call(this, type);
	    };
	  }
	};
	
	Html5.unpatchCanPlayType = function () {
	  var r = Html5.TEST_VID.constructor.prototype.canPlayType;
	  Html5.TEST_VID.constructor.prototype.canPlayType = canPlayType;
	  canPlayType = null;
	  return r;
	};
	
	// by default, patch the video element
	Html5.patchCanPlayType();
	
	Html5.disposeMediaElement = function (el) {
	  if (!el) {
	    return;
	  }
	
	  if (el.parentNode) {
	    el.parentNode.removeChild(el);
	  }
	
	  // remove any child track or source nodes to prevent their loading
	  while (el.hasChildNodes()) {
	    el.removeChild(el.firstChild);
	  }
	
	  // remove any src reference. not setting `src=''` because that causes a warning
	  // in firefox
	  el.removeAttribute('src');
	
	  // force the media element to update its loading state by calling load()
	  // however IE on Windows 7N has a bug that throws an error so need a try/catch (#793)
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {
	        // not supported
	      }
	    })();
	  }
	};
	
	Html5.resetMediaElement = function (el) {
	  if (!el) {
	    return;
	  }
	
	  var sources = el.querySelectorAll('source');
	  var i = sources.length;
	  while (i--) {
	    el.removeChild(sources[i]);
	  }
	
	  // remove any src reference.
	  // not setting `src=''` because that throws an error
	  el.removeAttribute('src');
	
	  if (typeof el.load === 'function') {
	    // wrapping in an iife so it's not deoptimized (#1060#discussion_r10324473)
	    (function () {
	      try {
	        el.load();
	      } catch (e) {}
	    })();
	  }
	};
	
	_component2['default'].registerComponent('Html5', Html5);
	_techJs2['default'].registerTech('Html5', Html5);
	exports['default'] = Html5;
	module.exports = exports['default'];
	
	},{"../../../src/js/tracks/text-track.js":134,"../component":67,"../utils/browser.js":140,"../utils/dom.js":142,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/to-title-case.js":151,"../utils/url.js":152,"./tech.js":124,"global/document":1,"global/window":2,"object.assign":45,"tsml":55}],123:[function(_dereq_,module,exports){
	/**
	 * @file loader.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _componentJs = _dereq_('../component.js');
	
	var _componentJs2 = _interopRequireDefault(_componentJs);
	
	var _techJs = _dereq_('./tech.js');
	
	var _techJs2 = _interopRequireDefault(_techJs);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _utilsToTitleCaseJs = _dereq_('../utils/to-title-case.js');
	
	var _utilsToTitleCaseJs2 = _interopRequireDefault(_utilsToTitleCaseJs);
	
	/**
	 * The Media Loader is the component that decides which playback technology to load
	 * when the player is initialized.
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class MediaLoader
	 */
	
	var MediaLoader = (function (_Component) {
	  _inherits(MediaLoader, _Component);
	
	  function MediaLoader(player, options, ready) {
	    _classCallCheck(this, MediaLoader);
	
	    _Component.call(this, player, options, ready);
	
	    // If there are no sources when the player is initialized,
	    // load the first supported playback technology.
	
	    if (!options.playerOptions['sources'] || options.playerOptions['sources'].length === 0) {
	      for (var i = 0, j = options.playerOptions['techOrder']; i < j.length; i++) {
	        var techName = _utilsToTitleCaseJs2['default'](j[i]);
	        var tech = _techJs2['default'].getTech(techName);
	        // Support old behavior of techs being registered as components.
	        // Remove once that deprecated behavior is removed.
	        if (!techName) {
	          tech = _componentJs2['default'].getComponent(techName);
	        }
	
	        // Check if the browser supports this technology
	        if (tech && tech.isSupported()) {
	          player.loadTech_(techName);
	          break;
	        }
	      }
	    } else {
	      // // Loop through playback technologies (HTML5, Flash) and check for support.
	      // // Then load the best source.
	      // // A few assumptions here:
	      // //   All playback technologies respect preload false.
	      player.src(options.playerOptions['sources']);
	    }
	  }
	
	  return MediaLoader;
	})(_componentJs2['default']);
	
	_componentJs2['default'].registerComponent('MediaLoader', MediaLoader);
	exports['default'] = MediaLoader;
	module.exports = exports['default'];
	
	},{"../component.js":67,"../utils/to-title-case.js":151,"./tech.js":124,"global/window":2}],124:[function(_dereq_,module,exports){
	/**
	 * @file tech.js
	 * Media Technology Controller - Base class for media playback
	 * technology controllers like Flash and HTML5
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _tracksHtmlTrackElement = _dereq_('../tracks/html-track-element');
	
	var _tracksHtmlTrackElement2 = _interopRequireDefault(_tracksHtmlTrackElement);
	
	var _tracksHtmlTrackElementList = _dereq_('../tracks/html-track-element-list');
	
	var _tracksHtmlTrackElementList2 = _interopRequireDefault(_tracksHtmlTrackElementList);
	
	var _utilsMergeOptionsJs = _dereq_('../utils/merge-options.js');
	
	var _utilsMergeOptionsJs2 = _interopRequireDefault(_utilsMergeOptionsJs);
	
	var _tracksTextTrack = _dereq_('../tracks/text-track');
	
	var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);
	
	var _tracksTextTrackList = _dereq_('../tracks/text-track-list');
	
	var _tracksTextTrackList2 = _interopRequireDefault(_tracksTextTrackList);
	
	var _tracksVideoTrack = _dereq_('../tracks/video-track');
	
	var _tracksVideoTrack2 = _interopRequireDefault(_tracksVideoTrack);
	
	var _tracksVideoTrackList = _dereq_('../tracks/video-track-list');
	
	var _tracksVideoTrackList2 = _interopRequireDefault(_tracksVideoTrackList);
	
	var _tracksAudioTrackList = _dereq_('../tracks/audio-track-list');
	
	var _tracksAudioTrackList2 = _interopRequireDefault(_tracksAudioTrackList);
	
	var _tracksAudioTrack = _dereq_('../tracks/audio-track');
	
	var _tracksAudioTrack2 = _interopRequireDefault(_tracksAudioTrack);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsLogJs = _dereq_('../utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _utilsTimeRangesJs = _dereq_('../utils/time-ranges.js');
	
	var _utilsBufferJs = _dereq_('../utils/buffer.js');
	
	var _mediaErrorJs = _dereq_('../media-error.js');
	
	var _mediaErrorJs2 = _interopRequireDefault(_mediaErrorJs);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * Base class for media (HTML5 Video, Flash) controllers
	 *
	 * @param {Object=} options Options object
	 * @param {Function=} ready Ready callback function
	 * @extends Component
	 * @class Tech
	 */
	
	var Tech = (function (_Component) {
	  _inherits(Tech, _Component);
	
	  function Tech() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	    var ready = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];
	
	    _classCallCheck(this, Tech);
	
	    // we don't want the tech to report user activity automatically.
	    // This is done manually in addControlsListeners
	    options.reportTouchActivity = false;
	    _Component.call(this, null, options, ready);
	
	    // keep track of whether the current source has played at all to
	    // implement a very limited played()
	    this.hasStarted_ = false;
	    this.on('playing', function () {
	      this.hasStarted_ = true;
	    });
	    this.on('loadstart', function () {
	      this.hasStarted_ = false;
	    });
	
	    this.textTracks_ = options.textTracks;
	    this.videoTracks_ = options.videoTracks;
	    this.audioTracks_ = options.audioTracks;
	
	    // Manually track progress in cases where the browser/flash player doesn't report it.
	    if (!this.featuresProgressEvents) {
	      this.manualProgressOn();
	    }
	
	    // Manually track timeupdates in cases where the browser/flash player doesn't report it.
	    if (!this.featuresTimeupdateEvents) {
	      this.manualTimeUpdatesOn();
	    }
	
	    if (options.nativeCaptions === false || options.nativeTextTracks === false) {
	      this.featuresNativeTextTracks = false;
	    }
	
	    if (!this.featuresNativeTextTracks) {
	      this.on('ready', this.emulateTextTracks);
	    }
	
	    this.initTextTrackListeners();
	    this.initTrackListeners();
	
	    // Turn on component tap events
	    this.emitTapEvents();
	  }
	
	  /**
	   * List of associated text tracks
	   *
	   * @type {TextTrackList}
	   * @private
	   */
	
	  /* Fallbacks for unsupported event types
	  ================================================================================ */
	  // Manually trigger progress events based on changes to the buffered amount
	  // Many flash players and older HTML5 browsers don't send progress or progress-like events
	  /**
	   * Turn on progress events
	   *
	   * @method manualProgressOn
	   */
	
	  Tech.prototype.manualProgressOn = function manualProgressOn() {
	    this.on('durationchange', this.onDurationChange);
	
	    this.manualProgress = true;
	
	    // Trigger progress watching when a source begins loading
	    this.one('ready', this.trackProgress);
	  };
	
	  /**
	   * Turn off progress events
	   *
	   * @method manualProgressOff
	   */
	
	  Tech.prototype.manualProgressOff = function manualProgressOff() {
	    this.manualProgress = false;
	    this.stopTrackingProgress();
	
	    this.off('durationchange', this.onDurationChange);
	  };
	
	  /**
	   * Track progress
	   *
	   * @method trackProgress
	   */
	
	  Tech.prototype.trackProgress = function trackProgress() {
	    this.stopTrackingProgress();
	    this.progressInterval = this.setInterval(Fn.bind(this, function () {
	      // Don't trigger unless buffered amount is greater than last time
	
	      var numBufferedPercent = this.bufferedPercent();
	
	      if (this.bufferedPercent_ !== numBufferedPercent) {
	        this.trigger('progress');
	      }
	
	      this.bufferedPercent_ = numBufferedPercent;
	
	      if (numBufferedPercent === 1) {
	        this.stopTrackingProgress();
	      }
	    }), 500);
	  };
	
	  /**
	   * Update duration
	   *
	   * @method onDurationChange
	   */
	
	  Tech.prototype.onDurationChange = function onDurationChange() {
	    this.duration_ = this.duration();
	  };
	
	  /**
	   * Create and get TimeRange object for buffering
	   *
	   * @return {TimeRangeObject}
	   * @method buffered
	   */
	
	  Tech.prototype.buffered = function buffered() {
	    return _utilsTimeRangesJs.createTimeRange(0, 0);
	  };
	
	  /**
	   * Get buffered percent
	   *
	   * @return {Number}
	   * @method bufferedPercent
	   */
	
	  Tech.prototype.bufferedPercent = function bufferedPercent() {
	    return _utilsBufferJs.bufferedPercent(this.buffered(), this.duration_);
	  };
	
	  /**
	   * Stops tracking progress by clearing progress interval
	   *
	   * @method stopTrackingProgress
	   */
	
	  Tech.prototype.stopTrackingProgress = function stopTrackingProgress() {
	    this.clearInterval(this.progressInterval);
	  };
	
	  /*! Time Tracking -------------------------------------------------------------- */
	  /**
	   * Set event listeners for on play and pause and tracking current time
	   *
	   * @method manualTimeUpdatesOn
	   */
	
	  Tech.prototype.manualTimeUpdatesOn = function manualTimeUpdatesOn() {
	    this.manualTimeUpdates = true;
	
	    this.on('play', this.trackCurrentTime);
	    this.on('pause', this.stopTrackingCurrentTime);
	  };
	
	  /**
	   * Remove event listeners for on play and pause and tracking current time
	   *
	   * @method manualTimeUpdatesOff
	   */
	
	  Tech.prototype.manualTimeUpdatesOff = function manualTimeUpdatesOff() {
	    this.manualTimeUpdates = false;
	    this.stopTrackingCurrentTime();
	    this.off('play', this.trackCurrentTime);
	    this.off('pause', this.stopTrackingCurrentTime);
	  };
	
	  /**
	   * Tracks current time
	   *
	   * @method trackCurrentTime
	   */
	
	  Tech.prototype.trackCurrentTime = function trackCurrentTime() {
	    if (this.currentTimeInterval) {
	      this.stopTrackingCurrentTime();
	    }
	    this.currentTimeInterval = this.setInterval(function () {
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }, 250); // 42 = 24 fps // 250 is what Webkit uses // FF uses 15
	  };
	
	  /**
	   * Turn off play progress tracking (when paused or dragging)
	   *
	   * @method stopTrackingCurrentTime
	   */
	
	  Tech.prototype.stopTrackingCurrentTime = function stopTrackingCurrentTime() {
	    this.clearInterval(this.currentTimeInterval);
	
	    // #1002 - if the video ends right before the next timeupdate would happen,
	    // the progress bar won't make it all the way to the end
	    this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	  };
	
	  /**
	   * Turn off any manual progress or timeupdate tracking
	   *
	   * @method dispose
	   */
	
	  Tech.prototype.dispose = function dispose() {
	
	    // clear out all tracks because we can't reuse them between techs
	    this.clearTracks(['audio', 'video', 'text']);
	
	    // Turn off any manual progress or timeupdate tracking
	    if (this.manualProgress) {
	      this.manualProgressOff();
	    }
	
	    if (this.manualTimeUpdates) {
	      this.manualTimeUpdatesOff();
	    }
	
	    _Component.prototype.dispose.call(this);
	  };
	
	  /**
	   * clear out a track list, or multiple track lists
	   *
	   * Note: Techs without source handlers should call this between
	   * sources for video & audio tracks, as usually you don't want
	   * to use them between tracks and we have no automatic way to do
	   * it for you
	   *
	   * @method clearTracks
	   * @param {Array|String} types type(s) of track lists to empty
	   */
	
	  Tech.prototype.clearTracks = function clearTracks(types) {
	    var _this = this;
	
	    types = [].concat(types);
	    // clear out all tracks because we can't reuse them between techs
	    types.forEach(function (type) {
	      var list = _this[type + 'Tracks']() || [];
	      var i = list.length;
	      while (i--) {
	        var track = list[i];
	        if (type === 'text') {
	          _this.removeRemoteTextTrack(track);
	        }
	        list.removeTrack_(track);
	      }
	    });
	  };
	
	  /**
	   * Reset the tech. Removes all sources and resets readyState.
	   *
	   * @method reset
	   */
	
	  Tech.prototype.reset = function reset() {};
	
	  /**
	   * When invoked without an argument, returns a MediaError object
	   * representing the current error state of the player or null if
	   * there is no error. When invoked with an argument, set the current
	   * error state of the player.
	   * @param {MediaError=} err    Optional an error object
	   * @return {MediaError}        the current error object or null
	   * @method error
	   */
	
	  Tech.prototype.error = function error(err) {
	    if (err !== undefined) {
	      this.error_ = new _mediaErrorJs2['default'](err);
	      this.trigger('error');
	    }
	    return this.error_;
	  };
	
	  /**
	   * Return the time ranges that have been played through for the
	   * current source. This implementation is incomplete. It does not
	   * track the played time ranges, only whether the source has played
	   * at all or not.
	   * @return {TimeRangeObject} a single time range if this video has
	   * played or an empty set of ranges if not.
	   * @method played
	   */
	
	  Tech.prototype.played = function played() {
	    if (this.hasStarted_) {
	      return _utilsTimeRangesJs.createTimeRange(0, 0);
	    }
	    return _utilsTimeRangesJs.createTimeRange();
	  };
	
	  /**
	   * Set current time
	   *
	   * @method setCurrentTime
	   */
	
	  Tech.prototype.setCurrentTime = function setCurrentTime() {
	    // improve the accuracy of manual timeupdates
	    if (this.manualTimeUpdates) {
	      this.trigger({ type: 'timeupdate', target: this, manuallyTriggered: true });
	    }
	  };
	
	  /**
	   * Initialize texttrack listeners
	   *
	   * @method initTextTrackListeners
	   */
	
	  Tech.prototype.initTextTrackListeners = function initTextTrackListeners() {
	    var textTrackListChanges = Fn.bind(this, function () {
	      this.trigger('texttrackchange');
	    });
	
	    var tracks = this.textTracks();
	
	    if (!tracks) return;
	
	    tracks.addEventListener('removetrack', textTrackListChanges);
	    tracks.addEventListener('addtrack', textTrackListChanges);
	
	    this.on('dispose', Fn.bind(this, function () {
	      tracks.removeEventListener('removetrack', textTrackListChanges);
	      tracks.removeEventListener('addtrack', textTrackListChanges);
	    }));
	  };
	
	  /**
	   * Initialize audio and video track listeners
	   *
	   * @method initTrackListeners
	   */
	
	  Tech.prototype.initTrackListeners = function initTrackListeners() {
	    var _this2 = this;
	
	    var trackTypes = ['video', 'audio'];
	
	    trackTypes.forEach(function (type) {
	      var trackListChanges = function trackListChanges() {
	        _this2.trigger(type + 'trackchange');
	      };
	
	      var tracks = _this2[type + 'Tracks']();
	
	      tracks.addEventListener('removetrack', trackListChanges);
	      tracks.addEventListener('addtrack', trackListChanges);
	
	      _this2.on('dispose', function () {
	        tracks.removeEventListener('removetrack', trackListChanges);
	        tracks.removeEventListener('addtrack', trackListChanges);
	      });
	    });
	  };
	
	  /**
	   * Emulate texttracks
	   *
	   * @method emulateTextTracks
	   */
	
	  Tech.prototype.emulateTextTracks = function emulateTextTracks() {
	    var _this3 = this;
	
	    var tracks = this.textTracks();
	    if (!tracks) {
	      return;
	    }
	
	    if (!_globalWindow2['default']['WebVTT'] && this.el().parentNode != null) {
	      (function () {
	        var script = _globalDocument2['default'].createElement('script');
	        script.src = _this3.options_['vtt.js'] || 'https://cdn.rawgit.com/gkatsev/vtt.js/vjs-v0.12.1/dist/vtt.min.js';
	        script.onload = function () {
	          _this3.trigger('vttjsloaded');
	        };
	        script.onerror = function () {
	          _this3.trigger('vttjserror');
	        };
	        _this3.on('dispose', function () {
	          script.onload = null;
	          script.onerror = null;
	        });
	        // but have not loaded yet and we set it to true before the inject so that
	        // we don't overwrite the injected window.WebVTT if it loads right away
	        _globalWindow2['default']['WebVTT'] = true;
	        _this3.el().parentNode.appendChild(script);
	      })();
	    }
	
	    var updateDisplay = function updateDisplay() {
	      return _this3.trigger('texttrackchange');
	    };
	    var textTracksChanges = function textTracksChanges() {
	      updateDisplay();
	
	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];
	        track.removeEventListener('cuechange', updateDisplay);
	        if (track.mode === 'showing') {
	          track.addEventListener('cuechange', updateDisplay);
	        }
	      }
	    };
	
	    textTracksChanges();
	    tracks.addEventListener('change', textTracksChanges);
	
	    this.on('dispose', function () {
	      tracks.removeEventListener('change', textTracksChanges);
	    });
	  };
	
	  /**
	   * Get videotracks
	   *
	   * @returns {VideoTrackList}
	   * @method videoTracks
	   */
	
	  Tech.prototype.videoTracks = function videoTracks() {
	    this.videoTracks_ = this.videoTracks_ || new _tracksVideoTrackList2['default']();
	    return this.videoTracks_;
	  };
	
	  /**
	   * Get audiotracklist
	   *
	   * @returns {AudioTrackList}
	   * @method audioTracks
	   */
	
	  Tech.prototype.audioTracks = function audioTracks() {
	    this.audioTracks_ = this.audioTracks_ || new _tracksAudioTrackList2['default']();
	    return this.audioTracks_;
	  };
	
	  /*
	   * Provide default methods for text tracks.
	   *
	   * Html5 tech overrides these.
	   */
	
	  /**
	   * Get texttracks
	   *
	   * @returns {TextTrackList}
	   * @method textTracks
	   */
	
	  Tech.prototype.textTracks = function textTracks() {
	    this.textTracks_ = this.textTracks_ || new _tracksTextTrackList2['default']();
	    return this.textTracks_;
	  };
	
	  /**
	   * Get remote texttracks
	   *
	   * @returns {TextTrackList}
	   * @method remoteTextTracks
	   */
	
	  Tech.prototype.remoteTextTracks = function remoteTextTracks() {
	    this.remoteTextTracks_ = this.remoteTextTracks_ || new _tracksTextTrackList2['default']();
	    return this.remoteTextTracks_;
	  };
	
	  /**
	   * Get remote htmltrackelements
	   *
	   * @returns {HTMLTrackElementList}
	   * @method remoteTextTrackEls
	   */
	
	  Tech.prototype.remoteTextTrackEls = function remoteTextTrackEls() {
	    this.remoteTextTrackEls_ = this.remoteTextTrackEls_ || new _tracksHtmlTrackElementList2['default']();
	    return this.remoteTextTrackEls_;
	  };
	
	  /**
	   * Creates and returns a remote text track object
	   *
	   * @param {String} kind Text track kind (subtitles, captions, descriptions
	   *                                       chapters and metadata)
	   * @param {String=} label Label to identify the text track
	   * @param {String=} language Two letter language abbreviation
	   * @return {TextTrackObject}
	   * @method addTextTrack
	   */
	
	  Tech.prototype.addTextTrack = function addTextTrack(kind, label, language) {
	    if (!kind) {
	      throw new Error('TextTrack kind is required but was not provided');
	    }
	
	    return createTrackHelper(this, kind, label, language);
	  };
	
	  /**
	   * Creates a remote text track object and returns a emulated html track element
	   *
	   * @param {Object} options The object should contain values for
	   * kind, language, label and src (location of the WebVTT file)
	   * @return {HTMLTrackElement}
	   * @method addRemoteTextTrack
	   */
	
	  Tech.prototype.addRemoteTextTrack = function addRemoteTextTrack(options) {
	    var track = _utilsMergeOptionsJs2['default'](options, {
	      tech: this
	    });
	
	    var htmlTrackElement = new _tracksHtmlTrackElement2['default'](track);
	
	    // store HTMLTrackElement and TextTrack to remote list
	    this.remoteTextTrackEls().addTrackElement_(htmlTrackElement);
	    this.remoteTextTracks().addTrack_(htmlTrackElement.track);
	
	    // must come after remoteTextTracks()
	    this.textTracks().addTrack_(htmlTrackElement.track);
	
	    return htmlTrackElement;
	  };
	
	  /**
	   * Remove remote texttrack
	   *
	   * @param {TextTrackObject} track Texttrack to remove
	   * @method removeRemoteTextTrack
	   */
	
	  Tech.prototype.removeRemoteTextTrack = function removeRemoteTextTrack(track) {
	    this.textTracks().removeTrack_(track);
	
	    var trackElement = this.remoteTextTrackEls().getTrackElementByTrack_(track);
	
	    // remove HTMLTrackElement and TextTrack from remote list
	    this.remoteTextTrackEls().removeTrackElement_(trackElement);
	    this.remoteTextTracks().removeTrack_(track);
	  };
	
	  /**
	   * Provide a default setPoster method for techs
	   * Poster support for techs should be optional, so we don't want techs to
	   * break if they don't have a way to set a poster.
	   *
	   * @method setPoster
	   */
	
	  Tech.prototype.setPoster = function setPoster() {};
	
	  /*
	   * Check if the tech can support the given type
	   *
	   * The base tech does not support any type, but source handlers might
	   * overwrite this.
	   *
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	
	  Tech.prototype.canPlayType = function canPlayType() {
	    return '';
	  };
	
	  /*
	   * Return whether the argument is a Tech or not.
	   * Can be passed either a Class like `Html5` or a instance like `player.tech_`
	   *
	   * @param {Object} component An item to check
	   * @return {Boolean}         Whether it is a tech or not
	   */
	
	  Tech.isTech = function isTech(component) {
	    return component.prototype instanceof Tech || component instanceof Tech || component === Tech;
	  };
	
	  /**
	   * Registers a Tech
	   *
	   * @param {String} name Name of the Tech to register
	   * @param {Object} tech The tech to register
	   * @static
	   * @method registerComponent
	   */
	
	  Tech.registerTech = function registerTech(name, tech) {
	    if (!Tech.techs_) {
	      Tech.techs_ = {};
	    }
	
	    if (!Tech.isTech(tech)) {
	      throw new Error('Tech ' + name + ' must be a Tech');
	    }
	
	    Tech.techs_[name] = tech;
	    return tech;
	  };
	
	  /**
	   * Gets a component by name
	   *
	   * @param {String} name Name of the component to get
	   * @return {Component}
	   * @static
	   * @method getComponent
	   */
	
	  Tech.getTech = function getTech(name) {
	    if (Tech.techs_ && Tech.techs_[name]) {
	      return Tech.techs_[name];
	    }
	
	    if (_globalWindow2['default'] && _globalWindow2['default'].videojs && _globalWindow2['default'].videojs[name]) {
	      _utilsLogJs2['default'].warn('The ' + name + ' tech was added to the videojs object when it should be registered using videojs.registerTech(name, tech)');
	      return _globalWindow2['default'].videojs[name];
	    }
	  };
	
	  return Tech;
	})(_component2['default']);
	
	Tech.prototype.textTracks_;
	
	/**
	 * List of associated audio tracks
	 *
	 * @type {AudioTrackList}
	 * @private
	 */
	Tech.prototype.audioTracks_;
	
	/**
	 * List of associated video tracks
	 *
	 * @type {VideoTrackList}
	 * @private
	 */
	Tech.prototype.videoTracks_;
	
	var createTrackHelper = function createTrackHelper(self, kind, label, language) {
	  var options = arguments.length <= 4 || arguments[4] === undefined ? {} : arguments[4];
	
	  var tracks = self.textTracks();
	
	  options.kind = kind;
	
	  if (label) {
	    options.label = label;
	  }
	  if (language) {
	    options.language = language;
	  }
	  options.tech = self;
	
	  var track = new _tracksTextTrack2['default'](options);
	  tracks.addTrack_(track);
	
	  return track;
	};
	
	Tech.prototype.featuresVolumeControl = true;
	
	// Resizing plugins using request fullscreen reloads the plugin
	Tech.prototype.featuresFullscreenResize = false;
	Tech.prototype.featuresPlaybackRate = false;
	
	// Optional events that we can manually mimic with timers
	// currently not triggered by video-js-swf
	Tech.prototype.featuresProgressEvents = false;
	Tech.prototype.featuresTimeupdateEvents = false;
	
	Tech.prototype.featuresNativeTextTracks = false;
	
	/*
	 * A functional mixin for techs that want to use the Source Handler pattern.
	 *
	 * ##### EXAMPLE:
	 *
	 *   Tech.withSourceHandlers.call(MyTech);
	 *
	 */
	Tech.withSourceHandlers = function (_Tech) {
	  /*
	   * Register a source handler
	   * Source handlers are scripts for handling specific formats.
	   * The source handler pattern is used for adaptive formats (HLS, DASH) that
	   * manually load video data and feed it into a Source Buffer (Media Source Extensions)
	   * @param  {Function} handler  The source handler
	   * @param  {Boolean}  first    Register it before any existing handlers
	   */
	  _Tech.registerSourceHandler = function (handler, index) {
	    var handlers = _Tech.sourceHandlers;
	
	    if (!handlers) {
	      handlers = _Tech.sourceHandlers = [];
	    }
	
	    if (index === undefined) {
	      // add to the end of the list
	      index = handlers.length;
	    }
	
	    handlers.splice(index, 0, handler);
	  };
	
	  /*
	   * Check if the tech can support the given type
	   * @param  {String} type    The mimetype to check
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlayType = function (type) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = undefined;
	
	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canPlayType(type);
	
	      if (can) {
	        return can;
	      }
	    }
	
	    return '';
	  };
	
	  /*
	   * Return the first source handler that supports the source
	   * TODO: Answer question: should 'probably' be prioritized over 'maybe'
	   * @param  {Object} source  The source object
	   * @param  {Object} options The options passed to the tech
	   * @returns {Object}       The first source handler that supports the source
	   * @returns {null}         Null if no source handler is found
	   */
	  _Tech.selectSourceHandler = function (source, options) {
	    var handlers = _Tech.sourceHandlers || [];
	    var can = undefined;
	
	    for (var i = 0; i < handlers.length; i++) {
	      can = handlers[i].canHandleSource(source, options);
	
	      if (can) {
	        return handlers[i];
	      }
	    }
	
	    return null;
	  };
	
	  /*
	   * Check if the tech can support the given source
	   * @param  {Object} srcObj  The source object
	   * @param  {Object} options The options passed to the tech
	   * @return {String}         'probably', 'maybe', or '' (empty string)
	   */
	  _Tech.canPlaySource = function (srcObj, options) {
	    var sh = _Tech.selectSourceHandler(srcObj, options);
	
	    if (sh) {
	      return sh.canHandleSource(srcObj, options);
	    }
	
	    return '';
	  };
	
	  /*
	   * When using a source handler, prefer its implementation of
	   * any function normally provided by the tech.
	   */
	  var deferrable = ['seekable', 'duration'];
	
	  deferrable.forEach(function (fnName) {
	    var originalFn = this[fnName];
	
	    if (typeof originalFn !== 'function') {
	      return;
	    }
	
	    this[fnName] = function () {
	      if (this.sourceHandler_ && this.sourceHandler_[fnName]) {
	        return this.sourceHandler_[fnName].apply(this.sourceHandler_, arguments);
	      }
	      return originalFn.apply(this, arguments);
	    };
	  }, _Tech.prototype);
	
	  /*
	   * Create a function for setting the source using a source object
	   * and source handlers.
	   * Should never be called unless a source handler was found.
	   * @param {Object} source  A source object with src and type keys
	   * @return {Tech} self
	   */
	  _Tech.prototype.setSource = function (source) {
	    var sh = _Tech.selectSourceHandler(source, this.options_);
	
	    if (!sh) {
	      // Fall back to a native source hander when unsupported sources are
	      // deliberately set
	      if (_Tech.nativeSourceHandler) {
	        sh = _Tech.nativeSourceHandler;
	      } else {
	        _utilsLogJs2['default'].error('No source hander found for the current source.');
	      }
	    }
	
	    // Dispose any existing source handler
	    this.disposeSourceHandler();
	    this.off('dispose', this.disposeSourceHandler);
	
	    // if we have a source and get another one
	    // then we are loading something new
	    // than clear all of our current tracks
	    if (this.currentSource_) {
	      this.clearTracks(['audio', 'video']);
	
	      this.currentSource_ = null;
	    }
	
	    if (sh !== _Tech.nativeSourceHandler) {
	
	      this.currentSource_ = source;
	
	      // Catch if someone replaced the src without calling setSource.
	      // If they do, set currentSource_ to null and dispose our source handler.
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.one(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	    }
	
	    this.sourceHandler_ = sh.handleSource(source, this, this.options_);
	    this.on('dispose', this.disposeSourceHandler);
	
	    return this;
	  };
	
	  // On the first loadstart after setSource
	  _Tech.prototype.firstLoadStartListener_ = function () {
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };
	
	  // On successive loadstarts when setSource has not been called again
	  _Tech.prototype.successiveLoadStartListener_ = function () {
	    this.currentSource_ = null;
	    this.disposeSourceHandler();
	    this.one(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	  };
	
	  /*
	   * Clean up any existing source handler
	   */
	  _Tech.prototype.disposeSourceHandler = function () {
	    if (this.sourceHandler_ && this.sourceHandler_.dispose) {
	      this.off(this.el_, 'loadstart', _Tech.prototype.firstLoadStartListener_);
	      this.off(this.el_, 'loadstart', _Tech.prototype.successiveLoadStartListener_);
	      this.sourceHandler_.dispose();
	      this.sourceHandler_ = null;
	    }
	  };
	};
	
	_component2['default'].registerComponent('Tech', Tech);
	// Old name for Tech
	_component2['default'].registerComponent('MediaTechController', Tech);
	Tech.registerTech('Tech', Tech);
	exports['default'] = Tech;
	module.exports = exports['default'];
	
	},{"../component":67,"../media-error.js":108,"../tracks/audio-track":126,"../tracks/audio-track-list":125,"../tracks/html-track-element":128,"../tracks/html-track-element-list":127,"../tracks/text-track":134,"../tracks/text-track-list":132,"../tracks/video-track":139,"../tracks/video-track-list":138,"../utils/buffer.js":141,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options.js":148,"../utils/time-ranges.js":150,"global/document":1,"global/window":2}],125:[function(_dereq_,module,exports){
	/**
	 * @file audio-track-list.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackList = _dereq_('./track-list');
	
	var _trackList2 = _interopRequireDefault(_trackList);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * anywhere we call this function we diverge from the spec
	 * as we only support one enabled audiotrack at a time
	 *
	 * @param {Array|AudioTrackList} list list to work on
	 * @param {AudioTrack} track the track to skip
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].enabled = false;
	  }
	};
	/**
	 * A list of possible audio tracks. All functionality is in the
	 * base class Tracklist and the spec for AudioTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotracklist
	 *
	 * interface AudioTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter AudioTrack (unsigned long index);
	 *   AudioTrack? getTrackById(DOMString id);
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {AudioTrack[]} tracks a list of audio tracks to instantiate the list with
	 * @extends TrackList
	 * @class AudioTrackList
	 */
	
	var AudioTrackList = (function (_TrackList) {
	  _inherits(AudioTrackList, _TrackList);
	
	  function AudioTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    _classCallCheck(this, AudioTrackList);
	
	    var list = undefined;
	
	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].enabled) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }
	
	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in AudioTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = AudioTrackList.prototype[prop];
	        }
	      }
	    }
	
	    list = _TrackList.call(this, tracks, list);
	    list.changing_ = false;
	
	    return list;
	  }
	
	  AudioTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this = this;
	
	    if (track.enabled) {
	      disableOthers(this, track);
	    }
	
	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }
	
	    track.addEventListener('enabledchange', function () {
	      // when we are disabling other tracks (since we don't support
	      // more than one track at a time) we will set changing_
	      // to true so that we don't trigger additional change events
	      if (_this.changing_) {
	        return;
	      }
	      _this.changing_ = true;
	      disableOthers(_this, track);
	      _this.changing_ = false;
	      _this.trigger('change');
	    });
	  };
	
	  AudioTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };
	
	  AudioTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };
	
	  return AudioTrackList;
	})(_trackList2['default']);
	
	exports['default'] = AudioTrackList;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],126:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackEnums = _dereq_('./track-enums');
	
	var _track = _dereq_('./track');
	
	var _track2 = _interopRequireDefault(_track);
	
	var _utilsMergeOptions = _dereq_('../utils/merge-options');
	
	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	/**
	 * A single audio text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#audiotrack
	 *
	 * interface AudioTrack {
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *   attribute boolean enabled;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @class AudioTrack
	 */
	
	var AudioTrack = (function (_Track) {
	  _inherits(AudioTrack, _Track);
	
	  function AudioTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, AudioTrack);
	
	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.AudioTrackKind[options.kind] || ''
	    });
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = _Track.call(this, settings);
	    var enabled = false;
	
	    if (browser.IS_IE8) {
	      for (var prop in AudioTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = AudioTrack.prototype[prop];
	        }
	      }
	    }
	
	    Object.defineProperty(track, 'enabled', {
	      get: function get() {
	        return enabled;
	      },
	      set: function set(newEnabled) {
	        // an invalid or unchanged value
	        if (typeof newEnabled !== 'boolean' || newEnabled === enabled) {
	          return;
	        }
	        enabled = newEnabled;
	        this.trigger('enabledchange');
	      }
	    });
	
	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.enabled) {
	      track.enabled = settings.enabled;
	    }
	    track.loaded_ = true;
	
	    return track;
	  }
	
	  return AudioTrack;
	})(_track2['default']);
	
	exports['default'] = AudioTrack;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],127:[function(_dereq_,module,exports){
	/**
	 * @file html-track-element-list.js
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var HtmlTrackElementList = (function () {
	  function HtmlTrackElementList() {
	    var trackElements = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    _classCallCheck(this, HtmlTrackElementList);
	
	    var list = this;
	
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	
	      for (var prop in HtmlTrackElementList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = HtmlTrackElementList.prototype[prop];
	        }
	      }
	    }
	
	    list.trackElements_ = [];
	
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.trackElements_.length;
	      }
	    });
	
	    for (var i = 0, _length = trackElements.length; i < _length; i++) {
	      list.addTrackElement_(trackElements[i]);
	    }
	
	    if (browser.IS_IE8) {
	      return list;
	    }
	  }
	
	  HtmlTrackElementList.prototype.addTrackElement_ = function addTrackElement_(trackElement) {
	    this.trackElements_.push(trackElement);
	  };
	
	  HtmlTrackElementList.prototype.getTrackElementByTrack_ = function getTrackElementByTrack_(track) {
	    var trackElement_ = undefined;
	
	    for (var i = 0, _length2 = this.trackElements_.length; i < _length2; i++) {
	      if (track === this.trackElements_[i].track) {
	        trackElement_ = this.trackElements_[i];
	
	        break;
	      }
	    }
	
	    return trackElement_;
	  };
	
	  HtmlTrackElementList.prototype.removeTrackElement_ = function removeTrackElement_(trackElement) {
	    for (var i = 0, _length3 = this.trackElements_.length; i < _length3; i++) {
	      if (trackElement === this.trackElements_[i]) {
	        this.trackElements_.splice(i, 1);
	
	        break;
	      }
	    }
	  };
	
	  return HtmlTrackElementList;
	})();
	
	exports['default'] = HtmlTrackElementList;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"global/document":1}],128:[function(_dereq_,module,exports){
	/**
	 * @file html-track-element.js
	 */
	
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _eventTarget = _dereq_('../event-target');
	
	var _eventTarget2 = _interopRequireDefault(_eventTarget);
	
	var _tracksTextTrack = _dereq_('../tracks/text-track');
	
	var _tracksTextTrack2 = _interopRequireDefault(_tracksTextTrack);
	
	var NONE = 0;
	var LOADING = 1;
	var LOADED = 2;
	var ERROR = 3;
	
	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#htmltrackelement
	 *
	 * interface HTMLTrackElement : HTMLElement {
	 *   attribute DOMString kind;
	 *   attribute DOMString src;
	 *   attribute DOMString srclang;
	 *   attribute DOMString label;
	 *   attribute boolean default;
	 *
	 *   const unsigned short NONE = 0;
	 *   const unsigned short LOADING = 1;
	 *   const unsigned short LOADED = 2;
	 *   const unsigned short ERROR = 3;
	 *   readonly attribute unsigned short readyState;
	 *
	 *   readonly attribute TextTrack track;
	 * };
	 *
	 * @param {Object} options TextTrack configuration
	 * @class HTMLTrackElement
	 */
	
	var HTMLTrackElement = (function (_EventTarget) {
	  _inherits(HTMLTrackElement, _EventTarget);
	
	  function HTMLTrackElement() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, HTMLTrackElement);
	
	    _EventTarget.call(this);
	
	    var readyState = undefined,
	        trackElement = this;
	
	    if (browser.IS_IE8) {
	      trackElement = _globalDocument2['default'].createElement('custom');
	
	      for (var prop in HTMLTrackElement.prototype) {
	        if (prop !== 'constructor') {
	          trackElement[prop] = HTMLTrackElement.prototype[prop];
	        }
	      }
	    }
	
	    var track = new _tracksTextTrack2['default'](options);
	
	    trackElement.kind = track.kind;
	    trackElement.src = track.src;
	    trackElement.srclang = track.language;
	    trackElement.label = track.label;
	    trackElement['default'] = track['default'];
	
	    Object.defineProperty(trackElement, 'readyState', {
	      get: function get() {
	        return readyState;
	      }
	    });
	
	    Object.defineProperty(trackElement, 'track', {
	      get: function get() {
	        return track;
	      }
	    });
	
	    readyState = NONE;
	
	    track.addEventListener('loadeddata', function () {
	      readyState = LOADED;
	
	      trackElement.trigger({
	        type: 'load',
	        target: trackElement
	      });
	    });
	
	    if (browser.IS_IE8) {
	      return trackElement;
	    }
	  }
	
	  return HTMLTrackElement;
	})(_eventTarget2['default']);
	
	HTMLTrackElement.prototype.allowedEvents_ = {
	  load: 'load'
	};
	
	HTMLTrackElement.NONE = NONE;
	HTMLTrackElement.LOADING = LOADING;
	HTMLTrackElement.LOADED = LOADED;
	HTMLTrackElement.ERROR = ERROR;
	
	exports['default'] = HTMLTrackElement;
	module.exports = exports['default'];
	
	},{"../event-target":104,"../tracks/text-track":134,"../utils/browser.js":140,"global/document":1}],129:[function(_dereq_,module,exports){
	/**
	 * @file text-track-cue-list.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * A List of text track cues as defined in:
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackcuelist
	 *
	 * interface TextTrackCueList {
	 *   readonly attribute unsigned long length;
	 *   getter TextTrackCue (unsigned long index);
	 *   TextTrackCue? getCueById(DOMString id);
	 * };
	 *
	 * @param {Array} cues A list of cues to be initialized with
	 * @class TextTrackCueList
	 */
	
	var TextTrackCueList = (function () {
	  function TextTrackCueList(cues) {
	    _classCallCheck(this, TextTrackCueList);
	
	    var list = this;
	
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	
	      for (var prop in TextTrackCueList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackCueList.prototype[prop];
	        }
	      }
	    }
	
	    TextTrackCueList.prototype.setCues_.call(list, cues);
	
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.length_;
	      }
	    });
	
	    if (browser.IS_IE8) {
	      return list;
	    }
	  }
	
	  /**
	   * A setter for cues in this list
	   *
	   * @param {Array} cues an array of cues
	   * @method setCues_
	   * @private
	   */
	
	  TextTrackCueList.prototype.setCues_ = function setCues_(cues) {
	    var oldLength = this.length || 0;
	    var i = 0;
	    var l = cues.length;
	
	    this.cues_ = cues;
	    this.length_ = cues.length;
	
	    var defineProp = function defineProp(index) {
	      if (!('' + index in this)) {
	        Object.defineProperty(this, '' + index, {
	          get: function get() {
	            return this.cues_[index];
	          }
	        });
	      }
	    };
	
	    if (oldLength < l) {
	      i = oldLength;
	
	      for (; i < l; i++) {
	        defineProp.call(this, i);
	      }
	    }
	  };
	
	  /**
	   * Get a cue that is currently in the Cue list by id
	   *
	   * @param {String} id
	   * @method getCueById
	   * @return {Object} a single cue
	   */
	
	  TextTrackCueList.prototype.getCueById = function getCueById(id) {
	    var result = null;
	
	    for (var i = 0, l = this.length; i < l; i++) {
	      var cue = this[i];
	
	      if (cue.id === id) {
	        result = cue;
	        break;
	      }
	    }
	
	    return result;
	  };
	
	  return TextTrackCueList;
	})();
	
	exports['default'] = TextTrackCueList;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"global/document":1}],130:[function(_dereq_,module,exports){
	/**
	 * @file text-track-display.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _menuMenuJs = _dereq_('../menu/menu.js');
	
	var _menuMenuJs2 = _interopRequireDefault(_menuMenuJs);
	
	var _menuMenuItemJs = _dereq_('../menu/menu-item.js');
	
	var _menuMenuItemJs2 = _interopRequireDefault(_menuMenuItemJs);
	
	var _menuMenuButtonJs = _dereq_('../menu/menu-button.js');
	
	var _menuMenuButtonJs2 = _interopRequireDefault(_menuMenuButtonJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var darkGray = '#222';
	var lightGray = '#ccc';
	var fontMap = {
	  monospace: 'monospace',
	  sansSerif: 'sans-serif',
	  serif: 'serif',
	  monospaceSansSerif: '"Andale Mono", "Lucida Console", monospace',
	  monospaceSerif: '"Courier New", monospace',
	  proportionalSansSerif: 'sans-serif',
	  proportionalSerif: 'serif',
	  casual: '"Comic Sans MS", Impact, fantasy',
	  script: '"Monotype Corsiva", cursive',
	  smallcaps: '"Andale Mono", "Lucida Console", monospace, sans-serif'
	};
	
	/**
	 * The component for displaying text track cues
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @param {Function=} ready    Ready callback function
	 * @extends Component
	 * @class TextTrackDisplay
	 */
	
	var TextTrackDisplay = (function (_Component) {
	  _inherits(TextTrackDisplay, _Component);
	
	  function TextTrackDisplay(player, options, ready) {
	    _classCallCheck(this, TextTrackDisplay);
	
	    _Component.call(this, player, options, ready);
	
	    player.on('loadstart', Fn.bind(this, this.toggleDisplay));
	    player.on('texttrackchange', Fn.bind(this, this.updateDisplay));
	
	    // This used to be called during player init, but was causing an error
	    // if a track should show by default and the display hadn't loaded yet.
	    // Should probably be moved to an external track loader when we support
	    // tracks that don't need a display.
	    player.ready(Fn.bind(this, function () {
	      if (player.tech_ && player.tech_['featuresNativeTextTracks']) {
	        this.hide();
	        return;
	      }
	
	      player.on('fullscreenchange', Fn.bind(this, this.updateDisplay));
	
	      var tracks = this.options_.playerOptions['tracks'] || [];
	      for (var i = 0; i < tracks.length; i++) {
	        var track = tracks[i];
	        this.player_.addRemoteTextTrack(track);
	      }
	
	      var modes = { 'captions': 1, 'subtitles': 1 };
	      var trackList = this.player_.textTracks();
	      var firstDesc = undefined;
	      var firstCaptions = undefined;
	
	      if (trackList) {
	        for (var i = 0; i < trackList.length; i++) {
	          var track = trackList[i];
	          if (track['default']) {
	            if (track.kind === 'descriptions' && !firstDesc) {
	              firstDesc = track;
	            } else if (track.kind in modes && !firstCaptions) {
	              firstCaptions = track;
	            }
	          }
	        }
	
	        // We want to show the first default track but captions and subtitles
	        // take precedence over descriptions.
	        // So, display the first default captions or subtitles track
	        // and otherwise the first default descriptions track.
	        if (firstCaptions) {
	          firstCaptions.mode = 'showing';
	        } else if (firstDesc) {
	          firstDesc.mode = 'showing';
	        }
	      }
	    }));
	  }
	
	  /**
	  * Add cue HTML to display
	  *
	  * @param {Number} color Hex number for color, like #f0e
	  * @param {Number} opacity Value for opacity,0.0 - 1.0
	  * @return {RGBAColor} In the form 'rgba(255, 0, 0, 0.3)'
	  * @method constructColor
	  */
	
	  /**
	   * Toggle display texttracks
	   *
	   * @method toggleDisplay
	   */
	
	  TextTrackDisplay.prototype.toggleDisplay = function toggleDisplay() {
	    if (this.player_.tech_ && this.player_.tech_['featuresNativeTextTracks']) {
	      this.hide();
	    } else {
	      this.show();
	    }
	  };
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  TextTrackDisplay.prototype.createEl = function createEl() {
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-text-track-display'
	    }, {
	      'aria-live': 'assertive',
	      'aria-atomic': 'true'
	    });
	  };
	
	  /**
	   * Clear display texttracks
	   *
	   * @method clearDisplay
	   */
	
	  TextTrackDisplay.prototype.clearDisplay = function clearDisplay() {
	    if (typeof _globalWindow2['default']['WebVTT'] === 'function') {
	      _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], [], this.el_);
	    }
	  };
	
	  /**
	   * Update display texttracks
	   *
	   * @method updateDisplay
	   */
	
	  TextTrackDisplay.prototype.updateDisplay = function updateDisplay() {
	    var tracks = this.player_.textTracks();
	
	    this.clearDisplay();
	
	    if (!tracks) {
	      return;
	    }
	
	    // Track display prioritization model: if multiple tracks are 'showing',
	    //  display the first 'subtitles' or 'captions' track which is 'showing',
	    //  otherwise display the first 'descriptions' track which is 'showing'
	
	    var descriptionsTrack = null;
	    var captionsSubtitlesTrack = null;
	
	    var i = tracks.length;
	    while (i--) {
	      var track = tracks[i];
	      if (track['mode'] === 'showing') {
	        if (track['kind'] === 'descriptions') {
	          descriptionsTrack = track;
	        } else {
	          captionsSubtitlesTrack = track;
	        }
	      }
	    }
	
	    if (captionsSubtitlesTrack) {
	      this.updateForTrack(captionsSubtitlesTrack);
	    } else if (descriptionsTrack) {
	      this.updateForTrack(descriptionsTrack);
	    }
	  };
	
	  /**
	   * Add texttrack to texttrack list
	   *
	   * @param {TextTrackObject} track Texttrack object to be added to list
	   * @method updateForTrack
	   */
	
	  TextTrackDisplay.prototype.updateForTrack = function updateForTrack(track) {
	    if (typeof _globalWindow2['default']['WebVTT'] !== 'function' || !track['activeCues']) {
	      return;
	    }
	
	    var overrides = this.player_['textTrackSettings'].getValues();
	
	    var cues = [];
	    for (var _i = 0; _i < track['activeCues'].length; _i++) {
	      cues.push(track['activeCues'][_i]);
	    }
	
	    _globalWindow2['default']['WebVTT']['processCues'](_globalWindow2['default'], cues, this.el_);
	
	    var i = cues.length;
	    while (i--) {
	      var cue = cues[i];
	      if (!cue) {
	        continue;
	      }
	
	      var cueDiv = cue.displayState;
	      if (overrides.color) {
	        cueDiv.firstChild.style.color = overrides.color;
	      }
	      if (overrides.textOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'color', constructColor(overrides.color || '#fff', overrides.textOpacity));
	      }
	      if (overrides.backgroundColor) {
	        cueDiv.firstChild.style.backgroundColor = overrides.backgroundColor;
	      }
	      if (overrides.backgroundOpacity) {
	        tryUpdateStyle(cueDiv.firstChild, 'backgroundColor', constructColor(overrides.backgroundColor || '#000', overrides.backgroundOpacity));
	      }
	      if (overrides.windowColor) {
	        if (overrides.windowOpacity) {
	          tryUpdateStyle(cueDiv, 'backgroundColor', constructColor(overrides.windowColor, overrides.windowOpacity));
	        } else {
	          cueDiv.style.backgroundColor = overrides.windowColor;
	        }
	      }
	      if (overrides.edgeStyle) {
	        if (overrides.edgeStyle === 'dropshadow') {
	          cueDiv.firstChild.style.textShadow = '2px 2px 3px ' + darkGray + ', 2px 2px 4px ' + darkGray + ', 2px 2px 5px ' + darkGray;
	        } else if (overrides.edgeStyle === 'raised') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + darkGray + ', 2px 2px ' + darkGray + ', 3px 3px ' + darkGray;
	        } else if (overrides.edgeStyle === 'depressed') {
	          cueDiv.firstChild.style.textShadow = '1px 1px ' + lightGray + ', 0 1px ' + lightGray + ', -1px -1px ' + darkGray + ', 0 -1px ' + darkGray;
	        } else if (overrides.edgeStyle === 'uniform') {
	          cueDiv.firstChild.style.textShadow = '0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray + ', 0 0 4px ' + darkGray;
	        }
	      }
	      if (overrides.fontPercent && overrides.fontPercent !== 1) {
	        var fontSize = _globalWindow2['default'].parseFloat(cueDiv.style.fontSize);
	        cueDiv.style.fontSize = fontSize * overrides.fontPercent + 'px';
	        cueDiv.style.height = 'auto';
	        cueDiv.style.top = 'auto';
	        cueDiv.style.bottom = '2px';
	      }
	      if (overrides.fontFamily && overrides.fontFamily !== 'default') {
	        if (overrides.fontFamily === 'small-caps') {
	          cueDiv.firstChild.style.fontVariant = 'small-caps';
	        } else {
	          cueDiv.firstChild.style.fontFamily = fontMap[overrides.fontFamily];
	        }
	      }
	    }
	  };
	
	  return TextTrackDisplay;
	})(_component2['default']);
	
	function constructColor(color, opacity) {
	  return 'rgba(' +
	  // color looks like "#f0e"
	  parseInt(color[1] + color[1], 16) + ',' + parseInt(color[2] + color[2], 16) + ',' + parseInt(color[3] + color[3], 16) + ',' + opacity + ')';
	}
	
	/**
	 * Try to update style
	 * Some style changes will throw an error, particularly in IE8. Those should be noops.
	 *
	 * @param {Element} el The element to be styles
	 * @param {CSSProperty} style The CSS property to be styled
	 * @param {CSSStyle} rule The actual style to be applied to the property
	 * @method tryUpdateStyle
	 */
	function tryUpdateStyle(el, style, rule) {
	  //
	  try {
	    el.style[style] = rule;
	  } catch (e) {}
	}
	
	_component2['default'].registerComponent('TextTrackDisplay', TextTrackDisplay);
	exports['default'] = TextTrackDisplay;
	module.exports = exports['default'];
	
	},{"../component":67,"../menu/menu-button.js":109,"../menu/menu-item.js":110,"../menu/menu.js":111,"../utils/fn.js":144,"global/document":1,"global/window":2}],131:[function(_dereq_,module,exports){
	/**
	 * Utilities for capturing text track state and re-creating tracks
	 * based on a capture.
	 *
	 * @file text-track-list-converter.js
	 */
	
	/**
	 * Examine a single text track and return a JSON-compatible javascript
	 * object that represents the text track's state.
	 * @param track {TextTrackObject} the text track to query
	 * @return {Object} a serializable javascript representation of the
	 * @private
	 */
	'use strict';
	
	exports.__esModule = true;
	var trackToJson_ = function trackToJson_(track) {
	  var ret = ['kind', 'label', 'language', 'id', 'inBandMetadataTrackDispatchType', 'mode', 'src'].reduce(function (acc, prop, i) {
	    if (track[prop]) {
	      acc[prop] = track[prop];
	    }
	
	    return acc;
	  }, {
	    cues: track.cues && Array.prototype.map.call(track.cues, function (cue) {
	      return {
	        startTime: cue.startTime,
	        endTime: cue.endTime,
	        text: cue.text,
	        id: cue.id
	      };
	    })
	  });
	
	  return ret;
	};
	
	/**
	 * Examine a tech and return a JSON-compatible javascript array that
	 * represents the state of all text tracks currently configured. The
	 * return array is compatible with `jsonToTextTracks`.
	 * @param tech {tech} the tech object to query
	 * @return {Array} a serializable javascript representation of the
	 * @function textTracksToJson
	 */
	var textTracksToJson = function textTracksToJson(tech) {
	
	  var trackEls = tech.$$('track');
	
	  var trackObjs = Array.prototype.map.call(trackEls, function (t) {
	    return t.track;
	  });
	  var tracks = Array.prototype.map.call(trackEls, function (trackEl) {
	    var json = trackToJson_(trackEl.track);
	    if (trackEl.src) {
	      json.src = trackEl.src;
	    }
	    return json;
	  });
	
	  return tracks.concat(Array.prototype.filter.call(tech.textTracks(), function (track) {
	    return trackObjs.indexOf(track) === -1;
	  }).map(trackToJson_));
	};
	
	/**
	 * Creates a set of remote text tracks on a tech based on an array of
	 * javascript text track representations.
	 * @param json {Array} an array of text track representation objects,
	 * like those that would be produced by `textTracksToJson`
	 * @param tech {tech} the tech to create text tracks on
	 * @function jsonToTextTracks
	 */
	var jsonToTextTracks = function jsonToTextTracks(json, tech) {
	  json.forEach(function (track) {
	    var addedTrack = tech.addRemoteTextTrack(track).track;
	    if (!track.src && track.cues) {
	      track.cues.forEach(function (cue) {
	        return addedTrack.addCue(cue);
	      });
	    }
	  });
	
	  return tech.textTracks();
	};
	
	exports['default'] = { textTracksToJson: textTracksToJson, jsonToTextTracks: jsonToTextTracks, trackToJson_: trackToJson_ };
	module.exports = exports['default'];
	
	},{}],132:[function(_dereq_,module,exports){
	/**
	 * @file text-track-list.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackList = _dereq_('./track-list');
	
	var _trackList2 = _interopRequireDefault(_trackList);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * A list of possible text tracks. All functionality is in the
	 * base class TrackList. The spec for TextTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttracklist
	 *
	 * interface TextTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter TextTrack (unsigned long index);
	 *   TextTrack? getTrackById(DOMString id);
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {TextTrack[]} tracks A list of tracks to initialize the list with
	 * @extends TrackList
	 * @class TextTrackList
	 */
	
	var TextTrackList = (function (_TrackList) {
	  _inherits(TextTrackList, _TrackList);
	
	  function TextTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    _classCallCheck(this, TextTrackList);
	
	    var list = undefined;
	
	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in TextTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = TextTrackList.prototype[prop];
	        }
	      }
	    }
	
	    list = _TrackList.call(this, tracks, list);
	    return list;
	  }
	
	  TextTrackList.prototype.addTrack_ = function addTrack_(track) {
	    _TrackList.prototype.addTrack_.call(this, track);
	    track.addEventListener('modechange', Fn.bind(this, function () {
	      this.trigger('change');
	    }));
	  };
	
	  /**
	   * Remove TextTrack from TextTrackList
	   * NOTE: Be mindful of what is passed in as it may be a HTMLTrackElement
	   *
	   * @param {TextTrack} rtrack
	   * @method removeTrack_
	   * @private
	   */
	
	  TextTrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = undefined;
	
	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }
	
	        this.tracks_.splice(i, 1);
	
	        break;
	      }
	    }
	
	    if (!track) {
	      return;
	    }
	
	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };
	
	  /**
	   * Get a TextTrack from TextTrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {TextTrack}
	   * @private
	   */
	
	  TextTrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;
	
	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];
	
	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }
	
	    return result;
	  };
	
	  return TextTrackList;
	})(_trackList2['default']);
	
	exports['default'] = TextTrackList;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"../utils/fn.js":144,"./track-list":136,"global/document":1}],133:[function(_dereq_,module,exports){
	/**
	 * @file text-track-settings.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _component = _dereq_('../component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _utilsEventsJs = _dereq_('../utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsLogJs = _dereq_('../utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _safeJsonParseTuple = _dereq_('safe-json-parse/tuple');
	
	var _safeJsonParseTuple2 = _interopRequireDefault(_safeJsonParseTuple);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	/**
	 * Manipulate settings of texttracks
	 *
	 * @param {Object} player  Main Player
	 * @param {Object=} options Object of option names and values
	 * @extends Component
	 * @class TextTrackSettings
	 */
	
	var TextTrackSettings = (function (_Component) {
	  _inherits(TextTrackSettings, _Component);
	
	  function TextTrackSettings(player, options) {
	    _classCallCheck(this, TextTrackSettings);
	
	    _Component.call(this, player, options);
	    this.hide();
	
	    // Grab `persistTextTrackSettings` from the player options if not passed in child options
	    if (options.persistTextTrackSettings === undefined) {
	      this.options_.persistTextTrackSettings = this.options_.playerOptions.persistTextTrackSettings;
	    }
	
	    Events.on(this.$('.vjs-done-button'), 'click', Fn.bind(this, function () {
	      this.saveSettings();
	      this.hide();
	    }));
	
	    Events.on(this.$('.vjs-default-button'), 'click', Fn.bind(this, function () {
	      this.$('.vjs-fg-color > select').selectedIndex = 0;
	      this.$('.vjs-bg-color > select').selectedIndex = 0;
	      this.$('.window-color > select').selectedIndex = 0;
	      this.$('.vjs-text-opacity > select').selectedIndex = 0;
	      this.$('.vjs-bg-opacity > select').selectedIndex = 0;
	      this.$('.vjs-window-opacity > select').selectedIndex = 0;
	      this.$('.vjs-edge-style select').selectedIndex = 0;
	      this.$('.vjs-font-family select').selectedIndex = 0;
	      this.$('.vjs-font-percent select').selectedIndex = 2;
	      this.updateDisplay();
	    }));
	
	    Events.on(this.$('.vjs-fg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-bg-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.window-color > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-text-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-bg-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-window-opacity > select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-font-percent select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-edge-style select'), 'change', Fn.bind(this, this.updateDisplay));
	    Events.on(this.$('.vjs-font-family select'), 'change', Fn.bind(this, this.updateDisplay));
	
	    if (this.options_.persistTextTrackSettings) {
	      this.restoreSettings();
	    }
	  }
	
	  /**
	   * Create the component's DOM element
	   *
	   * @return {Element}
	   * @method createEl
	   */
	
	  TextTrackSettings.prototype.createEl = function createEl() {
	    var uniqueId = this.id_;
	    var dialogLabelId = 'TTsettingsDialogLabel-' + uniqueId;
	    var dialogDescriptionId = 'TTsettingsDialogDescription-' + uniqueId;
	
	    return _Component.prototype.createEl.call(this, 'div', {
	      className: 'vjs-caption-settings vjs-modal-overlay',
	      innerHTML: captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId),
	      tabIndex: -1
	    }, {
	      role: 'dialog',
	      'aria-labelledby': dialogLabelId,
	      'aria-describedby': dialogDescriptionId
	    });
	  };
	
	  /**
	   * Get texttrack settings
	   * Settings are
	   * .vjs-edge-style
	   * .vjs-font-family
	   * .vjs-fg-color
	   * .vjs-text-opacity
	   * .vjs-bg-color
	   * .vjs-bg-opacity
	   * .window-color
	   * .vjs-window-opacity
	   *
	   * @return {Object}
	   * @method getValues
	   */
	
	  TextTrackSettings.prototype.getValues = function getValues() {
	    var textEdge = getSelectedOptionValue(this.$('.vjs-edge-style select'));
	    var fontFamily = getSelectedOptionValue(this.$('.vjs-font-family select'));
	    var fgColor = getSelectedOptionValue(this.$('.vjs-fg-color > select'));
	    var textOpacity = getSelectedOptionValue(this.$('.vjs-text-opacity > select'));
	    var bgColor = getSelectedOptionValue(this.$('.vjs-bg-color > select'));
	    var bgOpacity = getSelectedOptionValue(this.$('.vjs-bg-opacity > select'));
	    var windowColor = getSelectedOptionValue(this.$('.window-color > select'));
	    var windowOpacity = getSelectedOptionValue(this.$('.vjs-window-opacity > select'));
	    var fontPercent = _globalWindow2['default']['parseFloat'](getSelectedOptionValue(this.$('.vjs-font-percent > select')));
	
	    var result = {
	      'backgroundOpacity': bgOpacity,
	      'textOpacity': textOpacity,
	      'windowOpacity': windowOpacity,
	      'edgeStyle': textEdge,
	      'fontFamily': fontFamily,
	      'color': fgColor,
	      'backgroundColor': bgColor,
	      'windowColor': windowColor,
	      'fontPercent': fontPercent
	    };
	    for (var _name in result) {
	      if (result[_name] === '' || result[_name] === 'none' || _name === 'fontPercent' && result[_name] === 1.00) {
	        delete result[_name];
	      }
	    }
	    return result;
	  };
	
	  /**
	   * Set texttrack settings
	   * Settings are
	   * .vjs-edge-style
	   * .vjs-font-family
	   * .vjs-fg-color
	   * .vjs-text-opacity
	   * .vjs-bg-color
	   * .vjs-bg-opacity
	   * .window-color
	   * .vjs-window-opacity
	   *
	   * @param {Object} values Object with texttrack setting values
	   * @method setValues
	   */
	
	  TextTrackSettings.prototype.setValues = function setValues(values) {
	    setSelectedOption(this.$('.vjs-edge-style select'), values.edgeStyle);
	    setSelectedOption(this.$('.vjs-font-family select'), values.fontFamily);
	    setSelectedOption(this.$('.vjs-fg-color > select'), values.color);
	    setSelectedOption(this.$('.vjs-text-opacity > select'), values.textOpacity);
	    setSelectedOption(this.$('.vjs-bg-color > select'), values.backgroundColor);
	    setSelectedOption(this.$('.vjs-bg-opacity > select'), values.backgroundOpacity);
	    setSelectedOption(this.$('.window-color > select'), values.windowColor);
	    setSelectedOption(this.$('.vjs-window-opacity > select'), values.windowOpacity);
	
	    var fontPercent = values.fontPercent;
	
	    if (fontPercent) {
	      fontPercent = fontPercent.toFixed(2);
	    }
	
	    setSelectedOption(this.$('.vjs-font-percent > select'), fontPercent);
	  };
	
	  /**
	   * Restore texttrack settings
	   *
	   * @method restoreSettings
	   */
	
	  TextTrackSettings.prototype.restoreSettings = function restoreSettings() {
	    var err = undefined,
	        values = undefined;
	
	    try {
	      var _safeParseTuple = _safeJsonParseTuple2['default'](_globalWindow2['default'].localStorage.getItem('vjs-text-track-settings'));
	
	      err = _safeParseTuple[0];
	      values = _safeParseTuple[1];
	
	      if (err) {
	        _utilsLogJs2['default'].error(err);
	      }
	    } catch (e) {
	      _utilsLogJs2['default'].warn(e);
	    }
	
	    if (values) {
	      this.setValues(values);
	    }
	  };
	
	  /**
	   * Save texttrack settings to local storage
	   *
	   * @method saveSettings
	   */
	
	  TextTrackSettings.prototype.saveSettings = function saveSettings() {
	    if (!this.options_.persistTextTrackSettings) {
	      return;
	    }
	
	    var values = this.getValues();
	    try {
	      if (Object.getOwnPropertyNames(values).length > 0) {
	        _globalWindow2['default'].localStorage.setItem('vjs-text-track-settings', JSON.stringify(values));
	      } else {
	        _globalWindow2['default'].localStorage.removeItem('vjs-text-track-settings');
	      }
	    } catch (e) {
	      _utilsLogJs2['default'].warn(e);
	    }
	  };
	
	  /**
	   * Update display of texttrack settings
	   *
	   * @method updateDisplay
	   */
	
	  TextTrackSettings.prototype.updateDisplay = function updateDisplay() {
	    var ttDisplay = this.player_.getChild('textTrackDisplay');
	    if (ttDisplay) {
	      ttDisplay.updateDisplay();
	    }
	  };
	
	  return TextTrackSettings;
	})(_component2['default']);
	
	_component2['default'].registerComponent('TextTrackSettings', TextTrackSettings);
	
	function getSelectedOptionValue(target) {
	  var selectedOption = undefined;
	  // not all browsers support selectedOptions, so, fallback to options
	  if (target.selectedOptions) {
	    selectedOption = target.selectedOptions[0];
	  } else if (target.options) {
	    selectedOption = target.options[target.options.selectedIndex];
	  }
	
	  return selectedOption.value;
	}
	
	function setSelectedOption(target, value) {
	  if (!value) {
	    return;
	  }
	
	  var i = undefined;
	  for (i = 0; i < target.options.length; i++) {
	    var option = target.options[i];
	    if (option.value === value) {
	      break;
	    }
	  }
	
	  target.selectedIndex = i;
	}
	
	function captionOptionsMenuTemplate(uniqueId, dialogLabelId, dialogDescriptionId) {
	
	  var template = '\n    <div role="document">\n      <div role="heading" aria-level="1" id="' + dialogLabelId + '" class="vjs-control-text">Captions Settings Dialog</div>\n      <div id="' + dialogDescriptionId + '" class="vjs-control-text">Beginning of dialog window. Escape will cancel and close the window.</div>\n      <div class="vjs-tracksettings">\n        <div class="vjs-tracksettings-colors">\n          <fieldset class="vjs-fg-color vjs-tracksetting">\n            <legend>Text</legend>\n            <label class="vjs-label" for="captions-foreground-color-' + uniqueId + '">Color</label>\n            <select id="captions-foreground-color-' + uniqueId + '">\n              <option value="#FFF" selected>White</option>\n              <option value="#000">Black</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-text-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-foreground-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-foreground-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="vjs-bg-color vjs-tracksetting">\n            <legend>Background</legend>\n            <label class="vjs-label" for="captions-background-color-' + uniqueId + '">Color</label>\n            <select id="captions-background-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-bg-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-background-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-background-opacity-' + uniqueId + '">\n                <option value="1" selected>Opaque</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="0">Transparent</option>\n              </select>\n            </span>\n          </fieldset>\n          <fieldset class="window-color vjs-tracksetting">\n            <legend>Window</legend>\n            <label class="vjs-label" for="captions-window-color-' + uniqueId + '">Color</label>\n            <select id="captions-window-color-' + uniqueId + '">\n              <option value="#000" selected>Black</option>\n              <option value="#FFF">White</option>\n              <option value="#F00">Red</option>\n              <option value="#0F0">Green</option>\n              <option value="#00F">Blue</option>\n              <option value="#FF0">Yellow</option>\n              <option value="#F0F">Magenta</option>\n              <option value="#0FF">Cyan</option>\n            </select>\n            <span class="vjs-window-opacity vjs-opacity">\n              <label class="vjs-label" for="captions-window-opacity-' + uniqueId + '">Transparency</label>\n              <select id="captions-window-opacity-' + uniqueId + '">\n                <option value="0" selected>Transparent</option>\n                <option value="0.5">Semi-Transparent</option>\n                <option value="1">Opaque</option>\n              </select>\n            </span>\n          </fieldset>\n        </div> <!-- vjs-tracksettings-colors -->\n        <div class="vjs-tracksettings-font">\n          <div class="vjs-font-percent vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-size-' + uniqueId + '">Font Size</label>\n            <select id="captions-font-size-' + uniqueId + '">\n              <option value="0.50">50%</option>\n              <option value="0.75">75%</option>\n              <option value="1.00" selected>100%</option>\n              <option value="1.25">125%</option>\n              <option value="1.50">150%</option>\n              <option value="1.75">175%</option>\n              <option value="2.00">200%</option>\n              <option value="3.00">300%</option>\n              <option value="4.00">400%</option>\n            </select>\n          </div>\n          <div class="vjs-edge-style vjs-tracksetting">\n            <label class="vjs-label" for="captions-edge-style-' + uniqueId + '">Text Edge Style</label>\n            <select id="captions-edge-style-' + uniqueId + '">\n              <option value="none" selected>None</option>\n              <option value="raised">Raised</option>\n              <option value="depressed">Depressed</option>\n              <option value="uniform">Uniform</option>\n              <option value="dropshadow">Dropshadow</option>\n            </select>\n          </div>\n          <div class="vjs-font-family vjs-tracksetting">\n            <label class="vjs-label" for="captions-font-family-' + uniqueId + '">Font Family</label>\n            <select id="captions-font-family-' + uniqueId + '">\n              <option value="proportionalSansSerif" selected>Proportional Sans-Serif</option>\n              <option value="monospaceSansSerif">Monospace Sans-Serif</option>\n              <option value="proportionalSerif">Proportional Serif</option>\n              <option value="monospaceSerif">Monospace Serif</option>\n              <option value="casual">Casual</option>\n              <option value="script">Script</option>\n              <option value="small-caps">Small Caps</option>\n            </select>\n          </div>\n        </div> <!-- vjs-tracksettings-font -->\n        <div class="vjs-tracksettings-controls">\n          <button class="vjs-default-button">Defaults</button>\n          <button class="vjs-done-button">Done</button>\n        </div>\n      </div> <!-- vjs-tracksettings -->\n    </div> <!--  role="document" -->';
	
	  return template;
	}
	
	exports['default'] = TextTrackSettings;
	module.exports = exports['default'];
	
	},{"../component":67,"../utils/events.js":143,"../utils/fn.js":144,"../utils/log.js":147,"global/window":2,"safe-json-parse/tuple":54}],134:[function(_dereq_,module,exports){
	/**
	 * @file text-track.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _textTrackCueList = _dereq_('./text-track-cue-list');
	
	var _textTrackCueList2 = _interopRequireDefault(_textTrackCueList);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _trackEnums = _dereq_('./track-enums');
	
	var _utilsLogJs = _dereq_('../utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _trackJs = _dereq_('./track.js');
	
	var _trackJs2 = _interopRequireDefault(_trackJs);
	
	var _utilsUrlJs = _dereq_('../utils/url.js');
	
	var _xhr = _dereq_('xhr');
	
	var _xhr2 = _interopRequireDefault(_xhr);
	
	var _utilsMergeOptions = _dereq_('../utils/merge-options');
	
	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	/**
	 * takes a webvtt file contents and parses it into cues
	 *
	 * @param {String} srcContent webVTT file contents
	 * @param {Track} track track to addcues to
	 */
	var parseCues = function parseCues(srcContent, track) {
	  var parser = new _globalWindow2['default'].WebVTT.Parser(_globalWindow2['default'], _globalWindow2['default'].vttjs, _globalWindow2['default'].WebVTT.StringDecoder());
	  var errors = [];
	
	  parser.oncue = function (cue) {
	    track.addCue(cue);
	  };
	
	  parser.onparsingerror = function (error) {
	    errors.push(error);
	  };
	
	  parser.onflush = function () {
	    track.trigger({
	      type: 'loadeddata',
	      target: track
	    });
	  };
	
	  parser.parse(srcContent);
	  if (errors.length > 0) {
	    if (console.groupCollapsed) {
	      console.groupCollapsed('Text Track parsing errors for ' + track.src);
	    }
	    errors.forEach(function (error) {
	      return _utilsLogJs2['default'].error(error);
	    });
	    if (console.groupEnd) {
	      console.groupEnd();
	    }
	  }
	
	  parser.flush();
	};
	
	/**
	 * load a track from a  specifed url
	 *
	 * @param {String} src url to load track from
	 * @param {Track} track track to addcues to
	 */
	var loadTrack = function loadTrack(src, track) {
	  var opts = {
	    uri: src
	  };
	  var crossOrigin = _utilsUrlJs.isCrossOrigin(src);
	
	  if (crossOrigin) {
	    opts.cors = crossOrigin;
	  }
	
	  _xhr2['default'](opts, Fn.bind(this, function (err, response, responseBody) {
	    if (err) {
	      return _utilsLogJs2['default'].error(err, response);
	    }
	
	    track.loaded_ = true;
	
	    // Make sure that vttjs has loaded, otherwise, wait till it finished loading
	    // NOTE: this is only used for the alt/video.novtt.js build
	    if (typeof _globalWindow2['default'].WebVTT !== 'function') {
	      if (track.tech_) {
	        (function () {
	          var loadHandler = function loadHandler() {
	            return parseCues(responseBody, track);
	          };
	          track.tech_.on('vttjsloaded', loadHandler);
	          track.tech_.on('vttjserror', function () {
	            _utilsLogJs2['default'].error('vttjs failed to load, stopping trying to process ' + track.src);
	            track.tech_.off('vttjsloaded', loadHandler);
	          });
	        })();
	      }
	    } else {
	      parseCues(responseBody, track);
	    }
	  }));
	};
	
	/**
	 * A single text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#texttrack
	 *
	 * interface TextTrack : EventTarget {
	 *   readonly attribute TextTrackKind kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString inBandMetadataTrackDispatchType;
	 *
	 *   attribute TextTrackMode mode;
	 *
	 *   readonly attribute TextTrackCueList? cues;
	 *   readonly attribute TextTrackCueList? activeCues;
	 *
	 *   void addCue(TextTrackCue cue);
	 *   void removeCue(TextTrackCue cue);
	 *
	 *   attribute EventHandler oncuechange;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @extends Track
	 * @class TextTrack
	 */
	
	var TextTrack = (function (_Track) {
	  _inherits(TextTrack, _Track);
	
	  function TextTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, TextTrack);
	
	    if (!options.tech) {
	      throw new Error('A tech was not provided.');
	    }
	
	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.TextTrackKind[options.kind] || 'subtitles',
	      language: options.language || options.srclang || ''
	    });
	    var mode = _trackEnums.TextTrackMode[settings.mode] || 'disabled';
	    var default_ = settings['default'];
	
	    if (settings.kind === 'metadata' || settings.kind === 'chapters') {
	      mode = 'hidden';
	    }
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var tt = _Track.call(this, settings);
	    tt.tech_ = settings.tech;
	
	    if (browser.IS_IE8) {
	      for (var prop in TextTrack.prototype) {
	        if (prop !== 'constructor') {
	          tt[prop] = TextTrack.prototype[prop];
	        }
	      }
	    }
	
	    tt.cues_ = [];
	    tt.activeCues_ = [];
	
	    var cues = new _textTrackCueList2['default'](tt.cues_);
	    var activeCues = new _textTrackCueList2['default'](tt.activeCues_);
	    var changed = false;
	    var timeupdateHandler = Fn.bind(tt, function () {
	      this.activeCues;
	      if (changed) {
	        this.trigger('cuechange');
	        changed = false;
	      }
	    });
	
	    if (mode !== 'disabled') {
	      tt.tech_.on('timeupdate', timeupdateHandler);
	    }
	
	    Object.defineProperty(tt, 'default', {
	      get: function get() {
	        return default_;
	      },
	      set: function set() {}
	    });
	
	    Object.defineProperty(tt, 'mode', {
	      get: function get() {
	        return mode;
	      },
	      set: function set(newMode) {
	        if (!_trackEnums.TextTrackMode[newMode]) {
	          return;
	        }
	        mode = newMode;
	        if (mode === 'showing') {
	          this.tech_.on('timeupdate', timeupdateHandler);
	        }
	        this.trigger('modechange');
	      }
	    });
	
	    Object.defineProperty(tt, 'cues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }
	
	        return cues;
	      },
	      set: function set() {}
	    });
	
	    Object.defineProperty(tt, 'activeCues', {
	      get: function get() {
	        if (!this.loaded_) {
	          return null;
	        }
	
	        // nothing to do
	        if (this.cues.length === 0) {
	          return activeCues;
	        }
	
	        var ct = this.tech_.currentTime();
	        var active = [];
	
	        for (var i = 0, l = this.cues.length; i < l; i++) {
	          var cue = this.cues[i];
	
	          if (cue.startTime <= ct && cue.endTime >= ct) {
	            active.push(cue);
	          } else if (cue.startTime === cue.endTime && cue.startTime <= ct && cue.startTime + 0.5 >= ct) {
	            active.push(cue);
	          }
	        }
	
	        changed = false;
	
	        if (active.length !== this.activeCues_.length) {
	          changed = true;
	        } else {
	          for (var i = 0; i < active.length; i++) {
	            if (this.activeCues_.indexOf(active[i]) === -1) {
	              changed = true;
	            }
	          }
	        }
	
	        this.activeCues_ = active;
	        activeCues.setCues_(this.activeCues_);
	
	        return activeCues;
	      },
	      set: function set() {}
	    });
	
	    if (settings.src) {
	      tt.src = settings.src;
	      loadTrack(settings.src, tt);
	    } else {
	      tt.loaded_ = true;
	    }
	
	    return tt;
	  }
	
	  /**
	   * cuechange - One or more cues in the track have become active or stopped being active.
	   */
	
	  /**
	   * add a cue to the internal list of cues
	   *
	   * @param {Object} cue the cue to add to our internal list
	   * @method addCue
	   */
	
	  TextTrack.prototype.addCue = function addCue(cue) {
	    var tracks = this.tech_.textTracks();
	
	    if (tracks) {
	      for (var i = 0; i < tracks.length; i++) {
	        if (tracks[i] !== this) {
	          tracks[i].removeCue(cue);
	        }
	      }
	    }
	
	    this.cues_.push(cue);
	    this.cues.setCues_(this.cues_);
	  };
	
	  /**
	   * remvoe a cue from our internal list
	   *
	   * @param {Object} removeCue the cue to remove from our internal list
	   * @method removeCue
	   */
	
	  TextTrack.prototype.removeCue = function removeCue(_removeCue) {
	    var removed = false;
	
	    for (var i = 0, l = this.cues_.length; i < l; i++) {
	      var cue = this.cues_[i];
	
	      if (cue === _removeCue) {
	        this.cues_.splice(i, 1);
	        removed = true;
	      }
	    }
	
	    if (removed) {
	      this.cues.setCues_(this.cues_);
	    }
	  };
	
	  return TextTrack;
	})(_trackJs2['default']);
	
	TextTrack.prototype.allowedEvents_ = {
	  cuechange: 'cuechange'
	};
	
	exports['default'] = TextTrack;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"../utils/fn.js":144,"../utils/log.js":147,"../utils/merge-options":148,"../utils/url.js":152,"./text-track-cue-list":129,"./track-enums":135,"./track.js":137,"global/document":1,"global/window":2,"xhr":56}],135:[function(_dereq_,module,exports){
	/**
	 * @file track-kinds.js
	 */
	
	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-videotrack-kind
	 *
	 * enum VideoTrackKind {
	 *   "alternative",
	 *   "captions",
	 *   "main",
	 *   "sign",
	 *   "subtitles",
	 *   "commentary",
	 *   "",
	 * };
	 */
	'use strict';
	
	exports.__esModule = true;
	var VideoTrackKind = {
	  alternative: 'alternative',
	  captions: 'captions',
	  main: 'main',
	  sign: 'sign',
	  subtitles: 'subtitles',
	  commentary: 'commentary'
	};
	
	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#dom-audiotrack-kind
	 *
	 * enum AudioTrackKind {
	 *   "alternative",
	 *   "descriptions",
	 *   "main",
	 *   "main-desc",
	 *   "translation",
	 *   "commentary",
	 *   "",
	 * };
	 */
	var AudioTrackKind = {
	  alternative: 'alternative',
	  descriptions: 'descriptions',
	  main: 'main',
	  'main-desc': 'main-desc',
	  translation: 'translation',
	  commentary: 'commentary'
	};
	
	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackkind
	 *
	 * enum TextTrackKind {
	 *   "subtitles",
	 *   "captions",
	 *   "descriptions",
	 *   "chapters",
	 *   "metadata"
	 * };
	 */
	var TextTrackKind = {
	  subtitles: 'subtitles',
	  captions: 'captions',
	  descriptions: 'descriptions',
	  chapters: 'chapters',
	  metadata: 'metadata'
	};
	
	/**
	 * https://html.spec.whatwg.org/multipage/embedded-content.html#texttrackmode
	 *
	 * enum TextTrackMode { "disabled",  "hidden",  "showing" };
	 */
	var TextTrackMode = {
	  disabled: 'disabled',
	  hidden: 'hidden',
	  showing: 'showing'
	};
	
	/* jshint ignore:start */
	// we ignore jshint here because it does not see
	// AudioTrackKind as defined here
	exports['default'] = { VideoTrackKind: VideoTrackKind, AudioTrackKind: AudioTrackKind, TextTrackKind: TextTrackKind, TextTrackMode: TextTrackMode };
	
	/* jshint ignore:end */
	module.exports = exports['default'];
	
	},{}],136:[function(_dereq_,module,exports){
	/**
	 * @file track-list.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _eventTarget = _dereq_('../event-target');
	
	var _eventTarget2 = _interopRequireDefault(_eventTarget);
	
	var _utilsFnJs = _dereq_('../utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * Common functionaliy between Text, Audio, and Video TrackLists
	 * Interfaces defined in the following spec:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html
	 *
	 * @param {Track[]} tracks A list of tracks to initialize the list with
	 * @param {Object} list the child object with inheritance done manually for ie8
	 * @extends EventTarget
	 * @class TrackList
	 */
	
	var TrackList = (function (_EventTarget) {
	  _inherits(TrackList, _EventTarget);
	
	  function TrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	    var list = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	
	    _classCallCheck(this, TrackList);
	
	    _EventTarget.call(this);
	    if (!list) {
	      list = this;
	      if (browser.IS_IE8) {
	        list = _globalDocument2['default'].createElement('custom');
	        for (var prop in TrackList.prototype) {
	          if (prop !== 'constructor') {
	            list[prop] = TrackList.prototype[prop];
	          }
	        }
	      }
	    }
	
	    list.tracks_ = [];
	    Object.defineProperty(list, 'length', {
	      get: function get() {
	        return this.tracks_.length;
	      }
	    });
	
	    for (var i = 0; i < tracks.length; i++) {
	      list.addTrack_(tracks[i]);
	    }
	
	    return list;
	  }
	
	  /**
	   * change - One or more tracks in the track list have been enabled or disabled.
	   * addtrack - A track has been added to the track list.
	   * removetrack - A track has been removed from the track list.
	   */
	
	  /**
	   * Add a Track from TrackList
	   *
	   * @param {Mixed} track
	   * @method addTrack_
	   * @private
	   */
	
	  TrackList.prototype.addTrack_ = function addTrack_(track) {
	    var index = this.tracks_.length;
	
	    if (!('' + index in this)) {
	      Object.defineProperty(this, index, {
	        get: function get() {
	          return this.tracks_[index];
	        }
	      });
	    }
	
	    // Do not add duplicate tracks
	    if (this.tracks_.indexOf(track) === -1) {
	      this.tracks_.push(track);
	      this.trigger({
	        track: track,
	        type: 'addtrack'
	      });
	    }
	  };
	
	  /**
	   * Remove a Track from TrackList
	   *
	   * @param {Track} rtrack track to be removed
	   * @method removeTrack_
	   * @private
	   */
	
	  TrackList.prototype.removeTrack_ = function removeTrack_(rtrack) {
	    var track = undefined;
	
	    for (var i = 0, l = this.length; i < l; i++) {
	      if (this[i] === rtrack) {
	        track = this[i];
	        if (track.off) {
	          track.off();
	        }
	
	        this.tracks_.splice(i, 1);
	
	        break;
	      }
	    }
	
	    if (!track) {
	      return;
	    }
	
	    this.trigger({
	      track: track,
	      type: 'removetrack'
	    });
	  };
	
	  /**
	   * Get a Track from the TrackList by a tracks id
	   *
	   * @param {String} id - the id of the track to get
	   * @method getTrackById
	   * @return {Track}
	   * @private
	   */
	
	  TrackList.prototype.getTrackById = function getTrackById(id) {
	    var result = null;
	
	    for (var i = 0, l = this.length; i < l; i++) {
	      var track = this[i];
	      if (track.id === id) {
	        result = track;
	        break;
	      }
	    }
	
	    return result;
	  };
	
	  return TrackList;
	})(_eventTarget2['default']);
	
	TrackList.prototype.allowedEvents_ = {
	  change: 'change',
	  addtrack: 'addtrack',
	  removetrack: 'removetrack'
	};
	
	// emulate attribute EventHandler support to allow for feature detection
	for (var _event in TrackList.prototype.allowedEvents_) {
	  TrackList.prototype['on' + _event] = null;
	}
	
	exports['default'] = TrackList;
	module.exports = exports['default'];
	
	},{"../event-target":104,"../utils/browser.js":140,"../utils/fn.js":144,"global/document":1}],137:[function(_dereq_,module,exports){
	/**
	 * @file track.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _utilsGuidJs = _dereq_('../utils/guid.js');
	
	var Guid = _interopRequireWildcard(_utilsGuidJs);
	
	var _eventTarget = _dereq_('../event-target');
	
	var _eventTarget2 = _interopRequireDefault(_eventTarget);
	
	/**
	 * setup the common parts of an audio, video, or text track
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html
	 *
	 * @param {String} type The type of track we are dealing with audio|video|text
	 * @param {Object=} options Object of option names and values
	 * @extends EventTarget
	 * @class Track
	 */
	
	var Track = (function (_EventTarget) {
	  _inherits(Track, _EventTarget);
	
	  function Track() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, Track);
	
	    _EventTarget.call(this);
	
	    var track = this;
	    if (browser.IS_IE8) {
	      track = _globalDocument2['default'].createElement('custom');
	      for (var prop in Track.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = Track.prototype[prop];
	        }
	      }
	    }
	
	    var trackProps = {
	      id: options.id || 'vjs_track_' + Guid.newGUID(),
	      kind: options.kind || '',
	      label: options.label || '',
	      language: options.language || ''
	    };
	
	    var _loop = function (key) {
	      Object.defineProperty(track, key, {
	        get: function get() {
	          return trackProps[key];
	        },
	        set: function set() {}
	      });
	    };
	
	    for (var key in trackProps) {
	      _loop(key);
	    }
	
	    return track;
	  }
	
	  return Track;
	})(_eventTarget2['default']);
	
	exports['default'] = Track;
	module.exports = exports['default'];
	
	},{"../event-target":104,"../utils/browser.js":140,"../utils/guid.js":146,"global/document":1}],138:[function(_dereq_,module,exports){
	/**
	 * @file video-track-list.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackList = _dereq_('./track-list');
	
	var _trackList2 = _interopRequireDefault(_trackList);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * disable other video tracks before selecting the new one
	 *
	 * @param {Array|VideoTrackList} list list to work on
	 * @param {VideoTrack} track the track to skip
	 */
	var disableOthers = function disableOthers(list, track) {
	  for (var i = 0; i < list.length; i++) {
	    if (track.id === list[i].id) {
	      continue;
	    }
	    // another audio track is enabled, disable it
	    list[i].selected = false;
	  }
	};
	
	/**
	* A list of possiblee video tracks. Most functionality is in the
	 * base class Tracklist and the spec for VideoTrackList is located at:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotracklist
	 *
	 * interface VideoTrackList : EventTarget {
	 *   readonly attribute unsigned long length;
	 *   getter VideoTrack (unsigned long index);
	 *   VideoTrack? getTrackById(DOMString id);
	 *   readonly attribute long selectedIndex;
	 *
	 *   attribute EventHandler onchange;
	 *   attribute EventHandler onaddtrack;
	 *   attribute EventHandler onremovetrack;
	 * };
	 *
	 * @param {VideoTrack[]} tracks a list of video tracks to instantiate the list with
	 # @extends TrackList
	 * @class VideoTrackList
	 */
	
	var VideoTrackList = (function (_TrackList) {
	  _inherits(VideoTrackList, _TrackList);
	
	  function VideoTrackList() {
	    var tracks = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	    _classCallCheck(this, VideoTrackList);
	
	    var list = undefined;
	
	    // make sure only 1 track is enabled
	    // sorted from last index to first index
	    for (var i = tracks.length - 1; i >= 0; i--) {
	      if (tracks[i].selected) {
	        disableOthers(tracks, tracks[i]);
	        break;
	      }
	    }
	
	    // IE8 forces us to implement inheritance ourselves
	    // as it does not support Object.defineProperty properly
	    if (browser.IS_IE8) {
	      list = _globalDocument2['default'].createElement('custom');
	      for (var prop in _trackList2['default'].prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = _trackList2['default'].prototype[prop];
	        }
	      }
	      for (var prop in VideoTrackList.prototype) {
	        if (prop !== 'constructor') {
	          list[prop] = VideoTrackList.prototype[prop];
	        }
	      }
	    }
	
	    list = _TrackList.call(this, tracks, list);
	    list.changing_ = false;
	
	    Object.defineProperty(list, 'selectedIndex', {
	      get: function get() {
	        for (var i = 0; i < this.length; i++) {
	          if (this[i].selected) {
	            return i;
	          }
	        }
	        return -1;
	      },
	      set: function set() {}
	    });
	
	    return list;
	  }
	
	  VideoTrackList.prototype.addTrack_ = function addTrack_(track) {
	    var _this = this;
	
	    if (track.selected) {
	      disableOthers(this, track);
	    }
	
	    _TrackList.prototype.addTrack_.call(this, track);
	    // native tracks don't have this
	    if (!track.addEventListener) {
	      return;
	    }
	    track.addEventListener('selectedchange', function () {
	      if (_this.changing_) {
	        return;
	      }
	      _this.changing_ = true;
	      disableOthers(_this, track);
	      _this.changing_ = false;
	      _this.trigger('change');
	    });
	  };
	
	  VideoTrackList.prototype.addTrack = function addTrack(track) {
	    this.addTrack_(track);
	  };
	
	  VideoTrackList.prototype.removeTrack = function removeTrack(track) {
	    _TrackList.prototype.removeTrack_.call(this, track);
	  };
	
	  return VideoTrackList;
	})(_trackList2['default']);
	
	exports['default'] = VideoTrackList;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"./track-list":136,"global/document":1}],139:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var _trackEnums = _dereq_('./track-enums');
	
	var _track = _dereq_('./track');
	
	var _track2 = _interopRequireDefault(_track);
	
	var _utilsMergeOptions = _dereq_('../utils/merge-options');
	
	var _utilsMergeOptions2 = _interopRequireDefault(_utilsMergeOptions);
	
	var _utilsBrowserJs = _dereq_('../utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	/**
	 * A single video text track as defined in:
	 * @link https://html.spec.whatwg.org/multipage/embedded-content.html#videotrack
	 *
	 * interface VideoTrack {
	 *   readonly attribute DOMString id;
	 *   readonly attribute DOMString kind;
	 *   readonly attribute DOMString label;
	 *   readonly attribute DOMString language;
	 *   attribute boolean selected;
	 * };
	 *
	 * @param {Object=} options Object of option names and values
	 * @class VideoTrack
	 */
	
	var VideoTrack = (function (_Track) {
	  _inherits(VideoTrack, _Track);
	
	  function VideoTrack() {
	    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	    _classCallCheck(this, VideoTrack);
	
	    var settings = _utilsMergeOptions2['default'](options, {
	      kind: _trackEnums.VideoTrackKind[options.kind] || ''
	    });
	
	    // on IE8 this will be a document element
	    // for every other browser this will be a normal object
	    var track = _Track.call(this, settings);
	    var selected = false;
	
	    if (browser.IS_IE8) {
	      for (var prop in VideoTrack.prototype) {
	        if (prop !== 'constructor') {
	          track[prop] = VideoTrack.prototype[prop];
	        }
	      }
	    }
	
	    Object.defineProperty(track, 'selected', {
	      get: function get() {
	        return selected;
	      },
	      set: function set(newSelected) {
	        // an invalid or unchanged value
	        if (typeof newSelected !== 'boolean' || newSelected === selected) {
	          return;
	        }
	        selected = newSelected;
	        this.trigger('selectedchange');
	      }
	    });
	
	    // if the user sets this track to selected then
	    // set selected to that true value otherwise
	    // we keep it false
	    if (settings.selected) {
	      track.selected = settings.selected;
	    }
	
	    return track;
	  }
	
	  return VideoTrack;
	})(_track2['default']);
	
	exports['default'] = VideoTrack;
	module.exports = exports['default'];
	
	},{"../utils/browser.js":140,"../utils/merge-options":148,"./track":137,"./track-enums":135}],140:[function(_dereq_,module,exports){
	/**
	 * @file browser.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var USER_AGENT = _globalWindow2['default'].navigator.userAgent;
	var webkitVersionMap = /AppleWebKit\/([\d.]+)/i.exec(USER_AGENT);
	var appleWebkitVersion = webkitVersionMap ? parseFloat(webkitVersionMap.pop()) : null;
	
	/*
	 * Device is an iPhone
	 *
	 * @type {Boolean}
	 * @constant
	 * @private
	 */
	var IS_IPAD = /iPad/i.test(USER_AGENT);
	
	exports.IS_IPAD = IS_IPAD;
	// The Facebook app's UIWebView identifies as both an iPhone and iPad, so
	// to identify iPhones, we need to exclude iPads.
	// http://artsy.github.io/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/
	var IS_IPHONE = /iPhone/i.test(USER_AGENT) && !IS_IPAD;
	exports.IS_IPHONE = IS_IPHONE;
	var IS_IPOD = /iPod/i.test(USER_AGENT);
	exports.IS_IPOD = IS_IPOD;
	var IS_IOS = IS_IPHONE || IS_IPAD || IS_IPOD;
	
	exports.IS_IOS = IS_IOS;
	var IOS_VERSION = (function () {
	  var match = USER_AGENT.match(/OS (\d+)_/i);
	  if (match && match[1]) {
	    return match[1];
	  }
	})();
	
	exports.IOS_VERSION = IOS_VERSION;
	var IS_ANDROID = /Android/i.test(USER_AGENT);
	exports.IS_ANDROID = IS_ANDROID;
	var ANDROID_VERSION = (function () {
	  // This matches Android Major.Minor.Patch versions
	  // ANDROID_VERSION is Major.Minor as a Number, if Minor isn't available, then only Major is returned
	  var match = USER_AGENT.match(/Android (\d+)(?:\.(\d+))?(?:\.(\d+))*/i),
	      major,
	      minor;
	
	  if (!match) {
	    return null;
	  }
	
	  major = match[1] && parseFloat(match[1]);
	  minor = match[2] && parseFloat(match[2]);
	
	  if (major && minor) {
	    return parseFloat(match[1] + '.' + match[2]);
	  } else if (major) {
	    return major;
	  } else {
	    return null;
	  }
	})();
	exports.ANDROID_VERSION = ANDROID_VERSION;
	// Old Android is defined as Version older than 2.3, and requiring a webkit version of the android browser
	var IS_OLD_ANDROID = IS_ANDROID && /webkit/i.test(USER_AGENT) && ANDROID_VERSION < 2.3;
	exports.IS_OLD_ANDROID = IS_OLD_ANDROID;
	var IS_NATIVE_ANDROID = IS_ANDROID && ANDROID_VERSION < 5 && appleWebkitVersion < 537;
	
	exports.IS_NATIVE_ANDROID = IS_NATIVE_ANDROID;
	var IS_FIREFOX = /Firefox/i.test(USER_AGENT);
	exports.IS_FIREFOX = IS_FIREFOX;
	var IS_EDGE = /Edge/i.test(USER_AGENT);
	exports.IS_EDGE = IS_EDGE;
	var IS_CHROME = !IS_EDGE && /Chrome/i.test(USER_AGENT);
	exports.IS_CHROME = IS_CHROME;
	var IS_IE8 = /MSIE\s8\.0/.test(USER_AGENT);
	exports.IS_IE8 = IS_IE8;
	var IE_VERSION = (function (result) {
	  return result && parseFloat(result[1]);
	})(/MSIE\s(\d+)\.\d/.exec(USER_AGENT));
	
	exports.IE_VERSION = IE_VERSION;
	var TOUCH_ENABLED = !!('ontouchstart' in _globalWindow2['default'] || _globalWindow2['default'].DocumentTouch && _globalDocument2['default'] instanceof _globalWindow2['default'].DocumentTouch);
	exports.TOUCH_ENABLED = TOUCH_ENABLED;
	var BACKGROUND_SIZE_SUPPORTED = ('backgroundSize' in _globalDocument2['default'].createElement('video').style);
	exports.BACKGROUND_SIZE_SUPPORTED = BACKGROUND_SIZE_SUPPORTED;
	
	},{"global/document":1,"global/window":2}],141:[function(_dereq_,module,exports){
	/**
	 * @file buffer.js
	 */
	'use strict';
	
	exports.__esModule = true;
	exports.bufferedPercent = bufferedPercent;
	
	var _timeRangesJs = _dereq_('./time-ranges.js');
	
	/**
	 * Compute how much your video has been buffered
	 *
	 * @param  {Object} Buffered object
	 * @param  {Number} Total duration
	 * @return {Number} Percent buffered of the total duration
	 * @private
	 * @function bufferedPercent
	 */
	
	function bufferedPercent(buffered, duration) {
	  var bufferedDuration = 0,
	      start,
	      end;
	
	  if (!duration) {
	    return 0;
	  }
	
	  if (!buffered || !buffered.length) {
	    buffered = _timeRangesJs.createTimeRange(0, 0);
	  }
	
	  for (var i = 0; i < buffered.length; i++) {
	    start = buffered.start(i);
	    end = buffered.end(i);
	
	    // buffered end can be bigger than duration by a very small fraction
	    if (end > duration) {
	      end = duration;
	    }
	
	    bufferedDuration += end - start;
	  }
	
	  return bufferedDuration / duration;
	}
	
	},{"./time-ranges.js":150}],142:[function(_dereq_,module,exports){
	/**
	 * @file dom.js
	 */
	'use strict';
	
	exports.__esModule = true;
	exports.getEl = getEl;
	exports.createEl = createEl;
	exports.textContent = textContent;
	exports.insertElFirst = insertElFirst;
	exports.getElData = getElData;
	exports.hasElData = hasElData;
	exports.removeElData = removeElData;
	exports.hasElClass = hasElClass;
	exports.addElClass = addElClass;
	exports.removeElClass = removeElClass;
	exports.toggleElClass = toggleElClass;
	exports.setElAttributes = setElAttributes;
	exports.getElAttributes = getElAttributes;
	exports.blockTextSelection = blockTextSelection;
	exports.unblockTextSelection = unblockTextSelection;
	exports.findElPosition = findElPosition;
	exports.getPointerPosition = getPointerPosition;
	exports.isEl = isEl;
	exports.isTextNode = isTextNode;
	exports.emptyEl = emptyEl;
	exports.normalizeContent = normalizeContent;
	exports.appendContent = appendContent;
	exports.insertContent = insertContent;
	
	var _templateObject = _taggedTemplateLiteralLoose(['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.'], ['Setting attributes in the second argument of createEl()\n                has been deprecated. Use the third argument instead.\n                createEl(type, properties, attributes). Attempting to set ', ' to ', '.']);
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _taggedTemplateLiteralLoose(strings, raw) { strings.raw = raw; return strings; }
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _guidJs = _dereq_('./guid.js');
	
	var Guid = _interopRequireWildcard(_guidJs);
	
	var _logJs = _dereq_('./log.js');
	
	var _logJs2 = _interopRequireDefault(_logJs);
	
	var _tsml = _dereq_('tsml');
	
	var _tsml2 = _interopRequireDefault(_tsml);
	
	/**
	 * Detect if a value is a string with any non-whitespace characters.
	 *
	 * @param  {String} str
	 * @return {Boolean}
	 */
	function isNonBlankString(str) {
	  return typeof str === 'string' && /\S/.test(str);
	}
	
	/**
	 * Throws an error if the passed string has whitespace. This is used by
	 * class methods to be relatively consistent with the classList API.
	 *
	 * @param  {String} str
	 * @return {Boolean}
	 */
	function throwIfWhitespace(str) {
	  if (/\s/.test(str)) {
	    throw new Error('class has illegal whitespace characters');
	  }
	}
	
	/**
	 * Produce a regular expression for matching a class name.
	 *
	 * @param  {String} className
	 * @return {RegExp}
	 */
	function classRegExp(className) {
	  return new RegExp('(^|\\s)' + className + '($|\\s)');
	}
	
	/**
	 * Creates functions to query the DOM using a given method.
	 *
	 * @function createQuerier
	 * @private
	 * @param  {String} method
	 * @return {Function}
	 */
	function createQuerier(method) {
	  return function (selector, context) {
	    if (!isNonBlankString(selector)) {
	      return _globalDocument2['default'][method](null);
	    }
	    if (isNonBlankString(context)) {
	      context = _globalDocument2['default'].querySelector(context);
	    }
	    return (isEl(context) ? context : _globalDocument2['default'])[method](selector);
	  };
	}
	
	/**
	 * Shorthand for document.getElementById()
	 * Also allows for CSS (jQuery) ID syntax. But nothing other than IDs.
	 *
	 * @param  {String} id  Element ID
	 * @return {Element}    Element with supplied ID
	 * @function getEl
	 */
	
	function getEl(id) {
	  if (id.indexOf('#') === 0) {
	    id = id.slice(1);
	  }
	
	  return _globalDocument2['default'].getElementById(id);
	}
	
	/**
	 * Creates an element and applies properties.
	 *
	 * @param  {String} [tagName='div'] Name of tag to be created.
	 * @param  {Object} [properties={}] Element properties to be applied.
	 * @param  {Object} [attributes={}] Element attributes to be applied.
	 * @return {Element}
	 * @function createEl
	 */
	
	function createEl() {
	  var tagName = arguments.length <= 0 || arguments[0] === undefined ? 'div' : arguments[0];
	  var properties = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	  var attributes = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	  var el = _globalDocument2['default'].createElement(tagName);
	
	  Object.getOwnPropertyNames(properties).forEach(function (propName) {
	    var val = properties[propName];
	
	    // See #2176
	    // We originally were accepting both properties and attributes in the
	    // same object, but that doesn't work so well.
	    if (propName.indexOf('aria-') !== -1 || propName === 'role' || propName === 'type') {
	      _logJs2['default'].warn(_tsml2['default'](_templateObject, propName, val));
	      el.setAttribute(propName, val);
	    } else {
	      el[propName] = val;
	    }
	  });
	
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var val = attributes[attrName];
	    el.setAttribute(attrName, attributes[attrName]);
	  });
	
	  return el;
	}
	
	/**
	 * Injects text into an element, replacing any existing contents entirely.
	 *
	 * @param  {Element} el
	 * @param  {String} text
	 * @return {Element}
	 * @function textContent
	 */
	
	function textContent(el, text) {
	  if (typeof el.textContent === 'undefined') {
	    el.innerText = text;
	  } else {
	    el.textContent = text;
	  }
	}
	
	/**
	 * Insert an element as the first child node of another
	 *
	 * @param  {Element} child   Element to insert
	 * @param  {Element} parent Element to insert child into
	 * @private
	 * @function insertElFirst
	 */
	
	function insertElFirst(child, parent) {
	  if (parent.firstChild) {
	    parent.insertBefore(child, parent.firstChild);
	  } else {
	    parent.appendChild(child);
	  }
	}
	
	/**
	 * Element Data Store. Allows for binding data to an element without putting it directly on the element.
	 * Ex. Event listeners are stored here.
	 * (also from jsninja.com, slightly modified and updated for closure compiler)
	 *
	 * @type {Object}
	 * @private
	 */
	var elData = {};
	
	/*
	 * Unique attribute name to store an element's guid in
	 *
	 * @type {String}
	 * @constant
	 * @private
	 */
	var elIdAttr = 'vdata' + new Date().getTime();
	
	/**
	 * Returns the cache object where data for an element is stored
	 *
	 * @param  {Element} el Element to store data for.
	 * @return {Object}
	 * @function getElData
	 */
	
	function getElData(el) {
	  var id = el[elIdAttr];
	
	  if (!id) {
	    id = el[elIdAttr] = Guid.newGUID();
	  }
	
	  if (!elData[id]) {
	    elData[id] = {};
	  }
	
	  return elData[id];
	}
	
	/**
	 * Returns whether or not an element has cached data
	 *
	 * @param  {Element} el A dom element
	 * @return {Boolean}
	 * @private
	 * @function hasElData
	 */
	
	function hasElData(el) {
	  var id = el[elIdAttr];
	
	  if (!id) {
	    return false;
	  }
	
	  return !!Object.getOwnPropertyNames(elData[id]).length;
	}
	
	/**
	 * Delete data for the element from the cache and the guid attr from getElementById
	 *
	 * @param  {Element} el Remove data for an element
	 * @private
	 * @function removeElData
	 */
	
	function removeElData(el) {
	  var id = el[elIdAttr];
	
	  if (!id) {
	    return;
	  }
	
	  // Remove all stored data
	  delete elData[id];
	
	  // Remove the elIdAttr property from the DOM node
	  try {
	    delete el[elIdAttr];
	  } catch (e) {
	    if (el.removeAttribute) {
	      el.removeAttribute(elIdAttr);
	    } else {
	      // IE doesn't appear to support removeAttribute on the document element
	      el[elIdAttr] = null;
	    }
	  }
	}
	
	/**
	 * Check if an element has a CSS class
	 *
	 * @function hasElClass
	 * @param {Element} element Element to check
	 * @param {String} classToCheck Classname to check
	 */
	
	function hasElClass(element, classToCheck) {
	  throwIfWhitespace(classToCheck);
	  if (element.classList) {
	    return element.classList.contains(classToCheck);
	  } else {
	    return classRegExp(classToCheck).test(element.className);
	  }
	}
	
	/**
	 * Add a CSS class name to an element
	 *
	 * @function addElClass
	 * @param {Element} element    Element to add class name to
	 * @param {String} classToAdd Classname to add
	 */
	
	function addElClass(element, classToAdd) {
	  if (element.classList) {
	    element.classList.add(classToAdd);
	
	    // Don't need to `throwIfWhitespace` here because `hasElClass` will do it
	    // in the case of classList not being supported.
	  } else if (!hasElClass(element, classToAdd)) {
	      element.className = (element.className + ' ' + classToAdd).trim();
	    }
	
	  return element;
	}
	
	/**
	 * Remove a CSS class name from an element
	 *
	 * @function removeElClass
	 * @param {Element} element    Element to remove from class name
	 * @param {String} classToRemove Classname to remove
	 */
	
	function removeElClass(element, classToRemove) {
	  if (element.classList) {
	    element.classList.remove(classToRemove);
	  } else {
	    throwIfWhitespace(classToRemove);
	    element.className = element.className.split(/\s+/).filter(function (c) {
	      return c !== classToRemove;
	    }).join(' ');
	  }
	
	  return element;
	}
	
	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @function toggleElClass
	 * @param    {Element} element
	 * @param    {String} classToToggle
	 * @param    {Boolean|Function} [predicate]
	 *           Can be a function that returns a Boolean. If `true`, the class
	 *           will be added; if `false`, the class will be removed. If not
	 *           given, the class will be added if not present and vice versa.
	 */
	
	function toggleElClass(element, classToToggle, predicate) {
	
	  // This CANNOT use `classList` internally because IE does not support the
	  // second parameter to the `classList.toggle()` method! Which is fine because
	  // `classList` will be used by the add/remove functions.
	  var has = hasElClass(element, classToToggle);
	
	  if (typeof predicate === 'function') {
	    predicate = predicate(element, classToToggle);
	  }
	
	  if (typeof predicate !== 'boolean') {
	    predicate = !has;
	  }
	
	  // If the necessary class operation matches the current state of the
	  // element, no action is required.
	  if (predicate === has) {
	    return;
	  }
	
	  if (predicate) {
	    addElClass(element, classToToggle);
	  } else {
	    removeElClass(element, classToToggle);
	  }
	
	  return element;
	}
	
	/**
	 * Apply attributes to an HTML element.
	 *
	 * @param  {Element} el         Target element.
	 * @param  {Object=} attributes Element attributes to be applied.
	 * @private
	 * @function setElAttributes
	 */
	
	function setElAttributes(el, attributes) {
	  Object.getOwnPropertyNames(attributes).forEach(function (attrName) {
	    var attrValue = attributes[attrName];
	
	    if (attrValue === null || typeof attrValue === 'undefined' || attrValue === false) {
	      el.removeAttribute(attrName);
	    } else {
	      el.setAttribute(attrName, attrValue === true ? '' : attrValue);
	    }
	  });
	}
	
	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @param  {Element} tag Element from which to get tag attributes
	 * @return {Object}
	 * @private
	 * @function getElAttributes
	 */
	
	function getElAttributes(tag) {
	  var obj, knownBooleans, attrs, attrName, attrVal;
	
	  obj = {};
	
	  // known boolean attributes
	  // we can check for matching boolean properties, but older browsers
	  // won't know about HTML5 boolean attributes that we still read from
	  knownBooleans = ',' + 'autoplay,controls,loop,muted,default' + ',';
	
	  if (tag && tag.attributes && tag.attributes.length > 0) {
	    attrs = tag.attributes;
	
	    for (var i = attrs.length - 1; i >= 0; i--) {
	      attrName = attrs[i].name;
	      attrVal = attrs[i].value;
	
	      // check for known booleans
	      // the matching element property will return a value for typeof
	      if (typeof tag[attrName] === 'boolean' || knownBooleans.indexOf(',' + attrName + ',') !== -1) {
	        // the value of an included boolean attribute is typically an empty
	        // string ('') which would equal false if we just check for a false value.
	        // we also don't want support bad code like autoplay='false'
	        attrVal = attrVal !== null ? true : false;
	      }
	
	      obj[attrName] = attrVal;
	    }
	  }
	
	  return obj;
	}
	
	/**
	 * Attempt to block the ability to select text while dragging controls
	 *
	 * @return {Boolean}
	 * @function blockTextSelection
	 */
	
	function blockTextSelection() {
	  _globalDocument2['default'].body.focus();
	  _globalDocument2['default'].onselectstart = function () {
	    return false;
	  };
	}
	
	/**
	 * Turn off text selection blocking
	 *
	 * @return {Boolean}
	 * @function unblockTextSelection
	 */
	
	function unblockTextSelection() {
	  _globalDocument2['default'].onselectstart = function () {
	    return true;
	  };
	}
	
	/**
	 * Offset Left
	 * getBoundingClientRect technique from
	 * John Resig http://ejohn.org/blog/getboundingclientrect-is-awesome/
	 *
	 * @function findElPosition
	 * @param {Element} el Element from which to get offset
	 * @return {Object}
	 */
	
	function findElPosition(el) {
	  var box = undefined;
	
	  if (el.getBoundingClientRect && el.parentNode) {
	    box = el.getBoundingClientRect();
	  }
	
	  if (!box) {
	    return {
	      left: 0,
	      top: 0
	    };
	  }
	
	  var docEl = _globalDocument2['default'].documentElement;
	  var body = _globalDocument2['default'].body;
	
	  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
	  var scrollLeft = _globalWindow2['default'].pageXOffset || body.scrollLeft;
	  var left = box.left + scrollLeft - clientLeft;
	
	  var clientTop = docEl.clientTop || body.clientTop || 0;
	  var scrollTop = _globalWindow2['default'].pageYOffset || body.scrollTop;
	  var top = box.top + scrollTop - clientTop;
	
	  // Android sometimes returns slightly off decimal values, so need to round
	  return {
	    left: Math.round(left),
	    top: Math.round(top)
	  };
	}
	
	/**
	 * Get pointer position in element
	 * Returns an object with x and y coordinates.
	 * The base on the coordinates are the bottom left of the element.
	 *
	 * @function getPointerPosition
	 * @param {Element} el Element on which to get the pointer position on
	 * @param {Event} event Event object
	 * @return {Object} This object will have x and y coordinates corresponding to the mouse position
	 */
	
	function getPointerPosition(el, event) {
	  var position = {};
	  var box = findElPosition(el);
	  var boxW = el.offsetWidth;
	  var boxH = el.offsetHeight;
	
	  var boxY = box.top;
	  var boxX = box.left;
	  var pageY = event.pageY;
	  var pageX = event.pageX;
	
	  if (event.changedTouches) {
	    pageX = event.changedTouches[0].pageX;
	    pageY = event.changedTouches[0].pageY;
	  }
	
	  position.y = Math.max(0, Math.min(1, (boxY - pageY + boxH) / boxH));
	  position.x = Math.max(0, Math.min(1, (pageX - boxX) / boxW));
	
	  return position;
	}
	
	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @function isEl
	 * @param    {Mixed} value
	 * @return   {Boolean}
	 */
	
	function isEl(value) {
	  return !!value && typeof value === 'object' && value.nodeType === 1;
	}
	
	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */
	
	function isTextNode(value) {
	  return !!value && typeof value === 'object' && value.nodeType === 3;
	}
	
	/**
	 * Empties the contents of an element.
	 *
	 * @function emptyEl
	 * @param    {Element} el
	 * @return   {Element}
	 */
	
	function emptyEl(el) {
	  while (el.firstChild) {
	    el.removeChild(el.firstChild);
	  }
	  return el;
	}
	
	/**
	 * Normalizes content for eventual insertion into the DOM.
	 *
	 * This allows a wide range of content definition methods, but protects
	 * from falling into the trap of simply writing to `innerHTML`, which is
	 * an XSS concern.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @function normalizeContent
	 * @param    {String|Element|TextNode|Array|Function} content
	 * @return   {Array}
	 */
	
	function normalizeContent(content) {
	
	  // First, invoke content if it is a function. If it produces an array,
	  // that needs to happen before normalization.
	  if (typeof content === 'function') {
	    content = content();
	  }
	
	  // Next up, normalize to an array, so one or many items can be normalized,
	  // filtered, and returned.
	  return (Array.isArray(content) ? content : [content]).map(function (value) {
	
	    // First, invoke value if it is a function to produce a new value,
	    // which will be subsequently normalized to a Node of some kind.
	    if (typeof value === 'function') {
	      value = value();
	    }
	
	    if (isEl(value) || isTextNode(value)) {
	      return value;
	    }
	
	    if (typeof value === 'string' && /\S/.test(value)) {
	      return _globalDocument2['default'].createTextNode(value);
	    }
	  }).filter(function (value) {
	    return value;
	  });
	}
	
	/**
	 * Normalizes and appends content to an element.
	 *
	 * @function appendContent
	 * @param    {Element} el
	 * @param    {String|Element|TextNode|Array|Function} content
	 *           See: `normalizeContent`
	 * @return   {Element}
	 */
	
	function appendContent(el, content) {
	  normalizeContent(content).forEach(function (node) {
	    return el.appendChild(node);
	  });
	  return el;
	}
	
	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * @function insertContent
	 * @param    {Element} el
	 * @param    {String|Element|TextNode|Array|Function} content
	 *           See: `normalizeContent`
	 * @return   {Element}
	 */
	
	function insertContent(el, content) {
	  return appendContent(emptyEl(el), content);
	}
	
	/**
	 * Finds a single DOM element matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @function $
	 * @param    {String} selector
	 *           A valid CSS selector, which will be passed to `querySelector`.
	 *
	 * @param    {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return   {Element|null}
	 */
	var $ = createQuerier('querySelector');
	
	exports.$ = $;
	/**
	 * Finds a all DOM elements matching `selector` within the optional
	 * `context` of another DOM element (defaulting to `document`).
	 *
	 * @function $$
	 * @param    {String} selector
	 *           A valid CSS selector, which will be passed to `querySelectorAll`.
	 *
	 * @param    {Element|String} [context=document]
	 *           A DOM element within which to query. Can also be a selector
	 *           string in which case the first matching element will be used
	 *           as context. If missing (or no element matches selector), falls
	 *           back to `document`.
	 *
	 * @return   {NodeList}
	 */
	var $$ = createQuerier('querySelectorAll');
	exports.$$ = $$;
	
	},{"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2,"tsml":55}],143:[function(_dereq_,module,exports){
	/**
	 * @file events.js
	 *
	 * Event System (John Resig - Secrets of a JS Ninja http://jsninja.com/)
	 * (Original book version wasn't completely usable, so fixed some things and made Closure Compiler compatible)
	 * This should work very similarly to jQuery's events, however it's based off the book version which isn't as
	 * robust as jquery's, so there's probably some differences.
	 */
	
	'use strict';
	
	exports.__esModule = true;
	exports.on = on;
	exports.off = off;
	exports.trigger = trigger;
	exports.one = one;
	exports.fixEvent = fixEvent;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	var _domJs = _dereq_('./dom.js');
	
	var Dom = _interopRequireWildcard(_domJs);
	
	var _guidJs = _dereq_('./guid.js');
	
	var Guid = _interopRequireWildcard(_guidJs);
	
	var _logJs = _dereq_('./log.js');
	
	var _logJs2 = _interopRequireDefault(_logJs);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param  {Element|Object}   elem Element or object to bind listeners to
	 * @param  {String|Array}   type Type of event to bind to.
	 * @param  {Function} fn   Event listener.
	 * @method on
	 */
	
	function on(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(on, elem, type, fn);
	  }
	
	  var data = Dom.getElData(elem);
	
	  // We need a place to store all our handler data
	  if (!data.handlers) data.handlers = {};
	
	  if (!data.handlers[type]) data.handlers[type] = [];
	
	  if (!fn.guid) fn.guid = Guid.newGUID();
	
	  data.handlers[type].push(fn);
	
	  if (!data.dispatcher) {
	    data.disabled = false;
	
	    data.dispatcher = function (event, hash) {
	
	      if (data.disabled) return;
	      event = fixEvent(event);
	
	      var handlers = data.handlers[event.type];
	
	      if (handlers) {
	        // Copy handlers so if handlers are added/removed during the process it doesn't throw everything off.
	        var handlersCopy = handlers.slice(0);
	
	        for (var m = 0, n = handlersCopy.length; m < n; m++) {
	          if (event.isImmediatePropagationStopped()) {
	            break;
	          } else {
	            try {
	              handlersCopy[m].call(elem, event, hash);
	            } catch (e) {
	              _logJs2['default'].error(e);
	            }
	          }
	        }
	      }
	    };
	  }
	
	  if (data.handlers[type].length === 1) {
	    if (elem.addEventListener) {
	      elem.addEventListener(type, data.dispatcher, false);
	    } else if (elem.attachEvent) {
	      elem.attachEvent('on' + type, data.dispatcher);
	    }
	  }
	}
	
	/**
	 * Removes event listeners from an element
	 *
	 * @param  {Element|Object}   elem Object to remove listeners from
	 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
	 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
	 * @method off
	 */
	
	function off(elem, type, fn) {
	  // Don't want to add a cache object through getElData if not needed
	  if (!Dom.hasElData(elem)) return;
	
	  var data = Dom.getElData(elem);
	
	  // If no events exist, nothing to unbind
	  if (!data.handlers) {
	    return;
	  }
	
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(off, elem, type, fn);
	  }
	
	  // Utility function
	  var removeType = function removeType(t) {
	    data.handlers[t] = [];
	    _cleanUpEvents(elem, t);
	  };
	
	  // Are we removing all bound events?
	  if (!type) {
	    for (var t in data.handlers) {
	      removeType(t);
	    }return;
	  }
	
	  var handlers = data.handlers[type];
	
	  // If no handlers exist, nothing to unbind
	  if (!handlers) return;
	
	  // If no listener was provided, remove all listeners for type
	  if (!fn) {
	    removeType(type);
	    return;
	  }
	
	  // We're only removing a single handler
	  if (fn.guid) {
	    for (var n = 0; n < handlers.length; n++) {
	      if (handlers[n].guid === fn.guid) {
	        handlers.splice(n--, 1);
	      }
	    }
	  }
	
	  _cleanUpEvents(elem, type);
	}
	
	/**
	 * Trigger an event for an element
	 *
	 * @param  {Element|Object}      elem  Element to trigger an event on
	 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
	 * @param  {Object} [hash] data hash to pass along with the event
	 * @return {Boolean=} Returned only if default was prevented
	 * @method trigger
	 */
	
	function trigger(elem, event, hash) {
	  // Fetches element data and a reference to the parent (for bubbling).
	  // Don't want to add a data object to cache for every parent,
	  // so checking hasElData first.
	  var elemData = Dom.hasElData(elem) ? Dom.getElData(elem) : {};
	  var parent = elem.parentNode || elem.ownerDocument;
	  // type = event.type || event,
	  // handler;
	
	  // If an event name was passed as a string, creates an event out of it
	  if (typeof event === 'string') {
	    event = { type: event, target: elem };
	  }
	  // Normalizes the event properties.
	  event = fixEvent(event);
	
	  // If the passed element has a dispatcher, executes the established handlers.
	  if (elemData.dispatcher) {
	    elemData.dispatcher.call(elem, event, hash);
	  }
	
	  // Unless explicitly stopped or the event does not bubble (e.g. media events)
	  // recursively calls this function to bubble the event up the DOM.
	  if (parent && !event.isPropagationStopped() && event.bubbles === true) {
	    trigger.call(null, parent, event, hash);
	
	    // If at the top of the DOM, triggers the default action unless disabled.
	  } else if (!parent && !event.defaultPrevented) {
	      var targetData = Dom.getElData(event.target);
	
	      // Checks if the target has a default action for this event.
	      if (event.target[event.type]) {
	        // Temporarily disables event dispatching on the target as we have already executed the handler.
	        targetData.disabled = true;
	        // Executes the default action.
	        if (typeof event.target[event.type] === 'function') {
	          event.target[event.type]();
	        }
	        // Re-enables event dispatching.
	        targetData.disabled = false;
	      }
	    }
	
	  // Inform the triggerer if the default was prevented by returning false
	  return !event.defaultPrevented;
	}
	
	/**
	 * Trigger a listener only once for an event
	 *
	 * @param  {Element|Object}   elem Element or object to
	 * @param  {String|Array}   type Name/type of event
	 * @param  {Function} fn Event handler function
	 * @method one
	 */
	
	function one(elem, type, fn) {
	  if (Array.isArray(type)) {
	    return _handleMultipleEvents(one, elem, type, fn);
	  }
	  var func = function func() {
	    off(elem, type, func);
	    fn.apply(this, arguments);
	  };
	  // copy the guid to the new function so it can removed using the original function's ID
	  func.guid = fn.guid = fn.guid || Guid.newGUID();
	  on(elem, type, func);
	}
	
	/**
	 * Fix a native event to have standard property values
	 *
	 * @param  {Object} event Event object to fix
	 * @return {Object}
	 * @private
	 * @method fixEvent
	 */
	
	function fixEvent(event) {
	
	  function returnTrue() {
	    return true;
	  }
	  function returnFalse() {
	    return false;
	  }
	
	  // Test if fixing up is needed
	  // Used to check if !event.stopPropagation instead of isPropagationStopped
	  // But native events return true for stopPropagation, but don't have
	  // other expected methods like isPropagationStopped. Seems to be a problem
	  // with the Javascript Ninja code. So we're just overriding all events now.
	  if (!event || !event.isPropagationStopped) {
	    var old = event || _globalWindow2['default'].event;
	
	    event = {};
	    // Clone the old object so that we can modify the values event = {};
	    // IE8 Doesn't like when you mess with native event properties
	    // Firefox returns false for event.hasOwnProperty('type') and other props
	    //  which makes copying more difficult.
	    // TODO: Probably best to create a whitelist of event props
	    for (var key in old) {
	      // Safari 6.0.3 warns you if you try to copy deprecated layerX/Y
	      // Chrome warns you if you try to copy deprecated keyboardEvent.keyLocation
	      // and webkitMovementX/Y
	      if (key !== 'layerX' && key !== 'layerY' && key !== 'keyLocation' && key !== 'webkitMovementX' && key !== 'webkitMovementY') {
	        // Chrome 32+ warns if you try to copy deprecated returnValue, but
	        // we still want to if preventDefault isn't supported (IE8).
	        if (!(key === 'returnValue' && old.preventDefault)) {
	          event[key] = old[key];
	        }
	      }
	    }
	
	    // The event occurred on this element
	    if (!event.target) {
	      event.target = event.srcElement || _globalDocument2['default'];
	    }
	
	    // Handle which other element the event is related to
	    if (!event.relatedTarget) {
	      event.relatedTarget = event.fromElement === event.target ? event.toElement : event.fromElement;
	    }
	
	    // Stop the default browser action
	    event.preventDefault = function () {
	      if (old.preventDefault) {
	        old.preventDefault();
	      }
	      event.returnValue = false;
	      old.returnValue = false;
	      event.defaultPrevented = true;
	    };
	
	    event.defaultPrevented = false;
	
	    // Stop the event from bubbling
	    event.stopPropagation = function () {
	      if (old.stopPropagation) {
	        old.stopPropagation();
	      }
	      event.cancelBubble = true;
	      old.cancelBubble = true;
	      event.isPropagationStopped = returnTrue;
	    };
	
	    event.isPropagationStopped = returnFalse;
	
	    // Stop the event from bubbling and executing other handlers
	    event.stopImmediatePropagation = function () {
	      if (old.stopImmediatePropagation) {
	        old.stopImmediatePropagation();
	      }
	      event.isImmediatePropagationStopped = returnTrue;
	      event.stopPropagation();
	    };
	
	    event.isImmediatePropagationStopped = returnFalse;
	
	    // Handle mouse position
	    if (event.clientX != null) {
	      var doc = _globalDocument2['default'].documentElement,
	          body = _globalDocument2['default'].body;
	
	      event.pageX = event.clientX + (doc && doc.scrollLeft || body && body.scrollLeft || 0) - (doc && doc.clientLeft || body && body.clientLeft || 0);
	      event.pageY = event.clientY + (doc && doc.scrollTop || body && body.scrollTop || 0) - (doc && doc.clientTop || body && body.clientTop || 0);
	    }
	
	    // Handle key presses
	    event.which = event.charCode || event.keyCode;
	
	    // Fix button for mouse clicks:
	    // 0 == left; 1 == middle; 2 == right
	    if (event.button != null) {
	      event.button = event.button & 1 ? 0 : event.button & 4 ? 1 : event.button & 2 ? 2 : 0;
	    }
	  }
	
	  // Returns fixed-up instance
	  return event;
	}
	
	/**
	 * Clean up the listener cache and dispatchers
	*
	 * @param  {Element|Object} elem Element to clean up
	 * @param  {String} type Type of event to clean up
	 * @private
	 * @method _cleanUpEvents
	 */
	function _cleanUpEvents(elem, type) {
	  var data = Dom.getElData(elem);
	
	  // Remove the events of a particular type if there are none left
	  if (data.handlers[type].length === 0) {
	    delete data.handlers[type];
	    // data.handlers[type] = null;
	    // Setting to null was causing an error with data.handlers
	
	    // Remove the meta-handler from the element
	    if (elem.removeEventListener) {
	      elem.removeEventListener(type, data.dispatcher, false);
	    } else if (elem.detachEvent) {
	      elem.detachEvent('on' + type, data.dispatcher);
	    }
	  }
	
	  // Remove the events object if there are no types left
	  if (Object.getOwnPropertyNames(data.handlers).length <= 0) {
	    delete data.handlers;
	    delete data.dispatcher;
	    delete data.disabled;
	  }
	
	  // Finally remove the element data if there is no data left
	  if (Object.getOwnPropertyNames(data).length === 0) {
	    Dom.removeElData(elem);
	  }
	}
	
	/**
	 * Loops through an array of event types and calls the requested method for each type.
	 *
	 * @param  {Function} fn   The event method we want to use.
	 * @param  {Element|Object} elem Element or object to bind listeners to
	 * @param  {String}   type Type of event to bind to.
	 * @param  {Function} callback   Event listener.
	 * @private
	 * @function _handleMultipleEvents
	 */
	function _handleMultipleEvents(fn, elem, types, callback) {
	  types.forEach(function (type) {
	    //Call the event method for each one of the types
	    fn(elem, type, callback);
	  });
	}
	
	},{"./dom.js":142,"./guid.js":146,"./log.js":147,"global/document":1,"global/window":2}],144:[function(_dereq_,module,exports){
	/**
	 * @file fn.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	var _guidJs = _dereq_('./guid.js');
	
	/**
	 * Bind (a.k.a proxy or Context). A simple method for changing the context of a function
	 * It also stores a unique id on the function so it can be easily removed from events
	 *
	 * @param  {*}   context The object to bind as scope
	 * @param  {Function} fn      The function to be bound to a scope
	 * @param  {Number=}   uid     An optional unique ID for the function to be set
	 * @return {Function}
	 * @private
	 * @method bind
	 */
	var bind = function bind(context, fn, uid) {
	  // Make sure the function has a unique ID
	  if (!fn.guid) {
	    fn.guid = _guidJs.newGUID();
	  }
	
	  // Create the new function that changes the context
	  var ret = function ret() {
	    return fn.apply(context, arguments);
	  };
	
	  // Allow for the ability to individualize this function
	  // Needed in the case where multiple objects might share the same prototype
	  // IF both items add an event listener with the same function, then you try to remove just one
	  // it will remove both because they both have the same guid.
	  // when using this, you need to use the bind method when you remove the listener as well.
	  // currently used in text tracks
	  ret.guid = uid ? uid + '_' + fn.guid : fn.guid;
	
	  return ret;
	};
	exports.bind = bind;
	
	},{"./guid.js":146}],145:[function(_dereq_,module,exports){
	/**
	 * @file format-time.js
	 *
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @param  {Number} seconds Number of seconds to be turned into a string
	 * @param  {Number} guide   Number (in seconds) to model the string after
	 * @return {String}         Time formatted as H:MM:SS or M:SS
	 * @private
	 * @function formatTime
	 */
	'use strict';
	
	exports.__esModule = true;
	function formatTime(seconds) {
	  var guide = arguments.length <= 1 || arguments[1] === undefined ? seconds : arguments[1];
	  return (function () {
	    seconds = seconds < 0 ? 0 : seconds;
	    var s = Math.floor(seconds % 60);
	    var m = Math.floor(seconds / 60 % 60);
	    var h = Math.floor(seconds / 3600);
	    var gm = Math.floor(guide / 60 % 60);
	    var gh = Math.floor(guide / 3600);
	
	    // handle invalid times
	    if (isNaN(seconds) || seconds === Infinity) {
	      // '-' is false for all relational operators (e.g. <, >=) so this setting
	      // will add the minimum number of fields specified by the guide
	      h = m = s = '-';
	    }
	
	    // Check if we need to show hours
	    h = h > 0 || gh > 0 ? h + ':' : '';
	
	    // If hours are showing, we may need to add a leading zero.
	    // Always show at least one digit of minutes.
	    m = ((h || gm >= 10) && m < 10 ? '0' + m : m) + ':';
	
	    // Check if leading zero is need for seconds
	    s = s < 10 ? '0' + s : s;
	
	    return h + m + s;
	  })();
	}
	
	exports['default'] = formatTime;
	module.exports = exports['default'];
	
	},{}],146:[function(_dereq_,module,exports){
	/**
	 * @file guid.js
	 *
	 * Unique ID for an element or function
	 * @type {Number}
	 * @private
	 */
	"use strict";
	
	exports.__esModule = true;
	exports.newGUID = newGUID;
	var _guid = 1;
	
	/**
	 * Get the next unique ID
	 *
	 * @return {String} 
	 * @function newGUID
	 */
	
	function newGUID() {
	  return _guid++;
	}
	
	},{}],147:[function(_dereq_,module,exports){
	/**
	 * @file log.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _browser = _dereq_('./browser');
	
	/**
	 * Log messages to the console and history based on the type of message
	 *
	 * @param  {String} type
	 *         The name of the console method to use.
	 * @param  {Array} args
	 *         The arguments to be passed to the matching console method.
	 * @param  {Boolean} [stringify]
	 *         By default, only old IEs should get console argument stringification,
	 *         but this is exposed as a parameter to facilitate testing.
	 */
	var logByType = function logByType(type, args) {
	  var stringify = arguments.length <= 2 || arguments[2] === undefined ? !!_browser.IE_VERSION && _browser.IE_VERSION < 11 : arguments[2];
	
	  var console = _globalWindow2['default'].console;
	
	  // If there's no console then don't try to output messages, but they will
	  // still be stored in `log.history`.
	  //
	  // Was setting these once outside of this function, but containing them
	  // in the function makes it easier to test cases where console doesn't exist
	  // when the module is executed.
	  var fn = console && console[type] || function () {};
	
	  if (type !== 'log') {
	
	    // add the type to the front of the message when it's not "log"
	    args.unshift(type.toUpperCase() + ':');
	  }
	
	  // add to history
	  log.history.push(args);
	
	  // add console prefix after adding to history
	  args.unshift('VIDEOJS:');
	
	  // IEs previous to 11 log objects uselessly as "[object Object]"; so, JSONify
	  // objects and arrays for those less-capable browsers.
	  if (stringify) {
	    args = args.map(function (a) {
	      if (a && typeof a === 'object' || Array.isArray(a)) {
	        try {
	          return JSON.stringify(a);
	        } catch (x) {}
	      }
	
	      // Cast to string before joining, so we get null and undefined explicitly
	      // included in output (as we would in a modern console).
	      return String(a);
	    }).join(' ');
	  }
	
	  // Old IE versions do not allow .apply() for console methods (they are
	  // reported as objects rather than functions).
	  if (!fn.apply) {
	    fn(args);
	  } else {
	    fn[Array.isArray(args) ? 'apply' : 'call'](console, args);
	  }
	};
	
	exports.logByType = logByType;
	/**
	 * Log plain debug messages
	 *
	 * @function log
	 */
	function log() {
	  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	    args[_key] = arguments[_key];
	  }
	
	  logByType('log', args);
	}
	
	/**
	 * Keep a history of log messages
	 *
	 * @type {Array}
	 */
	log.history = [];
	
	/**
	 * Log error messages
	 *
	 * @method error
	 */
	log.error = function () {
	  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    args[_key2] = arguments[_key2];
	  }
	
	  return logByType('error', args);
	};
	
	/**
	 * Log warning messages
	 *
	 * @method warn
	 */
	log.warn = function () {
	  for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    args[_key3] = arguments[_key3];
	  }
	
	  return logByType('warn', args);
	};
	
	exports['default'] = log;
	
	},{"./browser":140,"global/window":2}],148:[function(_dereq_,module,exports){
	/**
	 * @file merge-options.js
	 */
	'use strict';
	
	exports.__esModule = true;
	exports['default'] = mergeOptions;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');
	
	var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);
	
	function isPlain(obj) {
	  return !!obj && typeof obj === 'object' && obj.toString() === '[object Object]' && obj.constructor === Object;
	}
	
	/**
	 * Merge customizer. video.js simply overwrites non-simple objects
	 * (like arrays) instead of attempting to overlay them.
	 * @see https://lodash.com/docs#merge
	 */
	var customizer = function customizer(destination, source) {
	  // If we're not working with a plain object, copy the value as is
	  // If source is an array, for instance, it will replace destination
	  if (!isPlain(source)) {
	    return source;
	  }
	
	  // If the new value is a plain object but the first object value is not
	  // we need to create a new object for the first object to merge with.
	  // This makes it consistent with how merge() works by default
	  // and also protects from later changes the to first object affecting
	  // the second object's values.
	  if (!isPlain(destination)) {
	    return mergeOptions(source);
	  }
	};
	
	/**
	 * Merge one or more options objects, recursively merging **only**
	 * plain object properties.  Previously `deepMerge`.
	 *
	 * @param  {...Object} source One or more objects to merge
	 * @returns {Object}          a new object that is the union of all
	 * provided objects
	 * @function mergeOptions
	 */
	
	function mergeOptions() {
	  // contruct the call dynamically to handle the variable number of
	  // objects to merge
	  var args = Array.prototype.slice.call(arguments);
	
	  // unshift an empty object into the front of the call as the target
	  // of the merge
	  args.unshift({});
	
	  // customize conflict resolution to match our historical merge behavior
	  args.push(customizer);
	
	  _lodashCompatObjectMerge2['default'].apply(null, args);
	
	  // return the mutated result object
	  return args[0];
	}
	
	module.exports = exports['default'];
	
	},{"lodash-compat/object/merge":40}],149:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var createStyleElement = function createStyleElement(className) {
	  var style = _globalDocument2['default'].createElement('style');
	  style.className = className;
	
	  return style;
	};
	
	exports.createStyleElement = createStyleElement;
	var setTextContent = function setTextContent(el, content) {
	  if (el.styleSheet) {
	    el.styleSheet.cssText = content;
	  } else {
	    el.textContent = content;
	  }
	};
	exports.setTextContent = setTextContent;
	
	},{"global/document":1}],150:[function(_dereq_,module,exports){
	'use strict';
	
	exports.__esModule = true;
	exports.createTimeRanges = createTimeRanges;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _logJs = _dereq_('./log.js');
	
	var _logJs2 = _interopRequireDefault(_logJs);
	
	/**
	 * @file time-ranges.js
	 *
	 * Should create a fake TimeRange object
	 * Mimics an HTML5 time range instance, which has functions that
	 * return the start and end times for a range
	 * TimeRanges are returned by the buffered() method
	 *
	 * @param  {(Number|Array)} Start of a single range or an array of ranges
	 * @param  {Number} End of a single range
	 * @private
	 * @method createTimeRanges
	 */
	
	function createTimeRanges(start, end) {
	  if (Array.isArray(start)) {
	    return createTimeRangesObj(start);
	  } else if (start === undefined || end === undefined) {
	    return createTimeRangesObj();
	  }
	  return createTimeRangesObj([[start, end]]);
	}
	
	exports.createTimeRange = createTimeRanges;
	
	function createTimeRangesObj(ranges) {
	  if (ranges === undefined || ranges.length === 0) {
	    return {
	      length: 0,
	      start: function start() {
	        throw new Error('This TimeRanges object is empty');
	      },
	      end: function end() {
	        throw new Error('This TimeRanges object is empty');
	      }
	    };
	  }
	  return {
	    length: ranges.length,
	    start: getRange.bind(null, 'start', 0, ranges),
	    end: getRange.bind(null, 'end', 1, ranges)
	  };
	}
	
	function getRange(fnName, valueIndex, ranges, rangeIndex) {
	  if (rangeIndex === undefined) {
	    _logJs2['default'].warn('DEPRECATED: Function \'' + fnName + '\' on \'TimeRanges\' called without an index argument.');
	    rangeIndex = 0;
	  }
	  rangeCheck(fnName, rangeIndex, ranges.length - 1);
	  return ranges[rangeIndex][valueIndex];
	}
	
	function rangeCheck(fnName, index, maxIndex) {
	  if (index < 0 || index > maxIndex) {
	    throw new Error('Failed to execute \'' + fnName + '\' on \'TimeRanges\': The index provided (' + index + ') is greater than or equal to the maximum bound (' + maxIndex + ').');
	  }
	}
	
	},{"./log.js":147}],151:[function(_dereq_,module,exports){
	/**
	 * @file to-title-case.js
	 *
	 * Uppercase the first letter of a string
	 *
	 * @param  {String} string String to be uppercased
	 * @return {String}
	 * @private
	 * @method toTitleCase
	 */
	"use strict";
	
	exports.__esModule = true;
	function toTitleCase(string) {
	  return string.charAt(0).toUpperCase() + string.slice(1);
	}
	
	exports["default"] = toTitleCase;
	module.exports = exports["default"];
	
	},{}],152:[function(_dereq_,module,exports){
	/**
	 * @file url.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @param  {String} url The url to parse
	 * @return {Object}     An object of url details
	 * @method parseUrl
	 */
	var parseUrl = function parseUrl(url) {
	  var props = ['protocol', 'hostname', 'port', 'pathname', 'search', 'hash', 'host'];
	
	  // add the url to an anchor and let the browser parse the URL
	  var a = _globalDocument2['default'].createElement('a');
	  a.href = url;
	
	  // IE8 (and 9?) Fix
	  // ie8 doesn't parse the URL correctly until the anchor is actually
	  // added to the body, and an innerHTML is needed to trigger the parsing
	  var addToBody = a.host === '' && a.protocol !== 'file:';
	  var div = undefined;
	  if (addToBody) {
	    div = _globalDocument2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '"></a>';
	    a = div.firstChild;
	    // prevent the div from affecting layout
	    div.setAttribute('style', 'display:none; position:absolute;');
	    _globalDocument2['default'].body.appendChild(div);
	  }
	
	  // Copy the specific URL properties to a new object
	  // This is also needed for IE8 because the anchor loses its
	  // properties when it's removed from the dom
	  var details = {};
	  for (var i = 0; i < props.length; i++) {
	    details[props[i]] = a[props[i]];
	  }
	
	  // IE9 adds the port to the host property unlike everyone else. If
	  // a port identifier is added for standard ports, strip it.
	  if (details.protocol === 'http:') {
	    details.host = details.host.replace(/:80$/, '');
	  }
	  if (details.protocol === 'https:') {
	    details.host = details.host.replace(/:443$/, '');
	  }
	
	  if (addToBody) {
	    _globalDocument2['default'].body.removeChild(div);
	  }
	
	  return details;
	};
	
	exports.parseUrl = parseUrl;
	/**
	 * Get absolute version of relative URL. Used to tell flash correct URL.
	 * http://stackoverflow.com/questions/470832/getting-an-absolute-url-from-a-relative-one-ie6-issue
	 *
	 * @param  {String} url URL to make absolute
	 * @return {String}     Absolute URL
	 * @private
	 * @method getAbsoluteURL
	 */
	var getAbsoluteURL = function getAbsoluteURL(url) {
	  // Check if absolute URL
	  if (!url.match(/^https?:\/\//)) {
	    // Convert to absolute URL. Flash hosted off-site needs an absolute URL.
	    var div = _globalDocument2['default'].createElement('div');
	    div.innerHTML = '<a href="' + url + '">x</a>';
	    url = div.firstChild.href;
	  }
	
	  return url;
	};
	
	exports.getAbsoluteURL = getAbsoluteURL;
	/**
	 * Returns the extension of the passed file name. It will return an empty string if you pass an invalid path
	 *
	 * @param {String}    path    The fileName path like '/path/to/file.mp4'
	 * @returns {String}          The extension in lower case or an empty string if no extension could be found.
	 * @method getFileExtension
	 */
	var getFileExtension = function getFileExtension(path) {
	  if (typeof path === 'string') {
	    var splitPathRe = /^(\/?)([\s\S]*?)((?:\.{1,2}|[^\/]+?)(\.([^\.\/\?]+)))(?:[\/]*|[\?].*)$/i;
	    var pathParts = splitPathRe.exec(path);
	
	    if (pathParts) {
	      return pathParts.pop().toLowerCase();
	    }
	  }
	
	  return '';
	};
	
	exports.getFileExtension = getFileExtension;
	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {String} url The url to check
	 * @return {Boolean}   Whether it is a cross domain request or not
	 * @method isCrossOrigin
	 */
	var isCrossOrigin = function isCrossOrigin(url) {
	  var winLoc = _globalWindow2['default'].location;
	  var urlInfo = parseUrl(url);
	
	  // IE8 protocol relative urls will return ':' for protocol
	  var srcProtocol = urlInfo.protocol === ':' ? winLoc.protocol : urlInfo.protocol;
	
	  // Check if url is for another domain/origin
	  // IE8 doesn't know location.origin, so we won't rely on it here
	  var crossOrigin = srcProtocol + urlInfo.host !== winLoc.protocol + winLoc.host;
	
	  return crossOrigin;
	};
	exports.isCrossOrigin = isCrossOrigin;
	
	},{"global/document":1,"global/window":2}],153:[function(_dereq_,module,exports){
	/**
	 * @file video.js
	 */
	'use strict';
	
	exports.__esModule = true;
	
	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }
	
	var _globalWindow = _dereq_('global/window');
	
	var _globalWindow2 = _interopRequireDefault(_globalWindow);
	
	var _globalDocument = _dereq_('global/document');
	
	var _globalDocument2 = _interopRequireDefault(_globalDocument);
	
	var _setup = _dereq_('./setup');
	
	var setup = _interopRequireWildcard(_setup);
	
	var _utilsStylesheetJs = _dereq_('./utils/stylesheet.js');
	
	var stylesheet = _interopRequireWildcard(_utilsStylesheetJs);
	
	var _component = _dereq_('./component');
	
	var _component2 = _interopRequireDefault(_component);
	
	var _eventTarget = _dereq_('./event-target');
	
	var _eventTarget2 = _interopRequireDefault(_eventTarget);
	
	var _utilsEventsJs = _dereq_('./utils/events.js');
	
	var Events = _interopRequireWildcard(_utilsEventsJs);
	
	var _player = _dereq_('./player');
	
	var _player2 = _interopRequireDefault(_player);
	
	var _pluginsJs = _dereq_('./plugins.js');
	
	var _pluginsJs2 = _interopRequireDefault(_pluginsJs);
	
	var _srcJsUtilsMergeOptionsJs = _dereq_('../../src/js/utils/merge-options.js');
	
	var _srcJsUtilsMergeOptionsJs2 = _interopRequireDefault(_srcJsUtilsMergeOptionsJs);
	
	var _utilsFnJs = _dereq_('./utils/fn.js');
	
	var Fn = _interopRequireWildcard(_utilsFnJs);
	
	var _tracksTextTrackJs = _dereq_('./tracks/text-track.js');
	
	var _tracksTextTrackJs2 = _interopRequireDefault(_tracksTextTrackJs);
	
	var _tracksAudioTrackJs = _dereq_('./tracks/audio-track.js');
	
	var _tracksAudioTrackJs2 = _interopRequireDefault(_tracksAudioTrackJs);
	
	var _tracksVideoTrackJs = _dereq_('./tracks/video-track.js');
	
	var _tracksVideoTrackJs2 = _interopRequireDefault(_tracksVideoTrackJs);
	
	var _utilsTimeRangesJs = _dereq_('./utils/time-ranges.js');
	
	var _utilsFormatTimeJs = _dereq_('./utils/format-time.js');
	
	var _utilsFormatTimeJs2 = _interopRequireDefault(_utilsFormatTimeJs);
	
	var _utilsLogJs = _dereq_('./utils/log.js');
	
	var _utilsLogJs2 = _interopRequireDefault(_utilsLogJs);
	
	var _utilsDomJs = _dereq_('./utils/dom.js');
	
	var Dom = _interopRequireWildcard(_utilsDomJs);
	
	var _utilsBrowserJs = _dereq_('./utils/browser.js');
	
	var browser = _interopRequireWildcard(_utilsBrowserJs);
	
	var _utilsUrlJs = _dereq_('./utils/url.js');
	
	var Url = _interopRequireWildcard(_utilsUrlJs);
	
	var _extendJs = _dereq_('./extend.js');
	
	var _extendJs2 = _interopRequireDefault(_extendJs);
	
	var _lodashCompatObjectMerge = _dereq_('lodash-compat/object/merge');
	
	var _lodashCompatObjectMerge2 = _interopRequireDefault(_lodashCompatObjectMerge);
	
	var _xhr = _dereq_('xhr');
	
	var _xhr2 = _interopRequireDefault(_xhr);
	
	// Include the built-in techs
	
	var _techTechJs = _dereq_('./tech/tech.js');
	
	var _techTechJs2 = _interopRequireDefault(_techTechJs);
	
	var _techHtml5Js = _dereq_('./tech/html5.js');
	
	var _techHtml5Js2 = _interopRequireDefault(_techHtml5Js);
	
	var _techFlashJs = _dereq_('./tech/flash.js');
	
	var _techFlashJs2 = _interopRequireDefault(_techFlashJs);
	
	// HTML5 Element Shim for IE8
	if (typeof HTMLVideoElement === 'undefined') {
	  _globalDocument2['default'].createElement('video');
	  _globalDocument2['default'].createElement('audio');
	  _globalDocument2['default'].createElement('track');
	}
	
	/**
	 * Doubles as the main function for users to create a player instance and also
	 * the main library object.
	 * The `videojs` function can be used to initialize or retrieve a player.
	 * ```js
	 *     var myPlayer = videojs('my_video_id');
	 * ```
	 *
	 * @param  {String|Element} id      Video element or video element ID
	 * @param  {Object=} options        Optional options object for config/settings
	 * @param  {Function=} ready        Optional ready callback
	 * @return {Player}                 A player instance
	 * @mixes videojs
	 * @method videojs
	 */
	function videojs(id, options, ready) {
	  var tag = undefined; // Element of ID
	
	  // Allow for element or ID to be passed in
	  // String ID
	  if (typeof id === 'string') {
	
	    // Adjust for jQuery ID syntax
	    if (id.indexOf('#') === 0) {
	      id = id.slice(1);
	    }
	
	    // If a player instance has already been created for this ID return it.
	    if (videojs.getPlayers()[id]) {
	
	      // If options or ready funtion are passed, warn
	      if (options) {
	        _utilsLogJs2['default'].warn('Player "' + id + '" is already initialised. Options will not be applied.');
	      }
	
	      if (ready) {
	        videojs.getPlayers()[id].ready(ready);
	      }
	
	      return videojs.getPlayers()[id];
	
	      // Otherwise get element for ID
	    } else {
	        tag = Dom.getEl(id);
	      }
	
	    // ID is a media element
	  } else {
	      tag = id;
	    }
	
	  // Check for a useable element
	  if (!tag || !tag.nodeName) {
	    // re: nodeName, could be a box div also
	    throw new TypeError('The element or ID supplied is not valid. (videojs)'); // Returns
	  }
	
	  // Element may have a player attr referring to an already created player instance.
	  // If not, set up a new player and return the instance.
	  return tag['player'] || _player2['default'].players[tag.playerId] || new _player2['default'](tag, options, ready);
	}
	
	// Add default styles
	if (_globalWindow2['default'].VIDEOJS_NO_DYNAMIC_STYLE !== true) {
	  var style = Dom.$('.vjs-styles-defaults');
	
	  if (!style) {
	    style = stylesheet.createStyleElement('vjs-styles-defaults');
	    var head = Dom.$('head');
	    head.insertBefore(style, head.firstChild);
	    stylesheet.setTextContent(style, '\n      .video-js {\n        width: 300px;\n        height: 150px;\n      }\n\n      .vjs-fluid {\n        padding-top: 56.25%\n      }\n    ');
	  }
	}
	
	// Run Auto-load players
	// You have to wait at least once in case this script is loaded after your video in the DOM (weird behavior only with minified version)
	setup.autoSetupTimeout(1, videojs);
	
	/*
	 * Current software version (semver)
	 *
	 * @type {String}
	 */
	videojs.VERSION = '5.11.7';
	
	/**
	 * The global options object. These are the settings that take effect
	 * if no overrides are specified when the player is created.
	 *
	 * ```js
	 *     videojs.options.autoplay = true
	 *     // -> all players will autoplay by default
	 * ```
	 *
	 * @type {Object}
	 */
	videojs.options = _player2['default'].prototype.options_;
	
	/**
	 * Get an object with the currently created players, keyed by player ID
	 *
	 * @return {Object} The created players
	 * @mixes videojs
	 * @method getPlayers
	 */
	videojs.getPlayers = function () {
	  return _player2['default'].players;
	};
	
	/**
	 * Expose players object.
	 *
	 * @memberOf videojs
	 * @property {Object} players
	 */
	videojs.players = _player2['default'].players;
	
	/**
	 * Get a component class object by name
	 * ```js
	 *     var VjsButton = videojs.getComponent('Button');
	 *     // Create a new instance of the component
	 *     var myButton = new VjsButton(myPlayer);
	 * ```
	 *
	 * @return {Component} Component identified by name
	 * @mixes videojs
	 * @method getComponent
	 */
	videojs.getComponent = _component2['default'].getComponent;
	
	/**
	 * Register a component so it can referred to by name
	 * Used when adding to other
	 * components, either through addChild
	 * `component.addChild('myComponent')`
	 * or through default children options
	 * `{ children: ['myComponent'] }`.
	 * ```js
	 *     // Get a component to subclass
	 *     var VjsButton = videojs.getComponent('Button');
	 *     // Subclass the component (see 'extend' doc for more info)
	 *     var MySpecialButton = videojs.extend(VjsButton, {});
	 *     // Register the new component
	 *     VjsButton.registerComponent('MySepcialButton', MySepcialButton);
	 *     // (optionally) add the new component as a default player child
	 *     myPlayer.addChild('MySepcialButton');
	 * ```
	 * NOTE: You could also just initialize the component before adding.
	 * `component.addChild(new MyComponent());`
	 *
	 * @param {String} The class name of the component
	 * @param {Component} The component class
	 * @return {Component} The newly registered component
	 * @mixes videojs
	 * @method registerComponent
	 */
	videojs.registerComponent = function (name, comp) {
	  if (_techTechJs2['default'].isTech(comp)) {
	    _utilsLogJs2['default'].warn('The ' + name + ' tech was registered as a component. It should instead be registered using videojs.registerTech(name, tech)');
	  }
	
	  _component2['default'].registerComponent.call(_component2['default'], name, comp);
	};
	
	/**
	 * Get a Tech class object by name
	 * ```js
	 *     var Html5 = videojs.getTech('Html5');
	 *     // Create a new instance of the component
	 *     var html5 = new Html5(options);
	 * ```
	 *
	 * @return {Tech} Tech identified by name
	 * @mixes videojs
	 * @method getComponent
	 */
	videojs.getTech = _techTechJs2['default'].getTech;
	
	/**
	 * Register a Tech so it can referred to by name.
	 * This is used in the tech order for the player.
	 *
	 * ```js
	 *     // get the Html5 Tech
	 *     var Html5 = videojs.getTech('Html5');
	 *     var MyTech = videojs.extend(Html5, {});
	 *     // Register the new Tech
	 *     VjsButton.registerTech('Tech', MyTech);
	 *     var player = videojs('myplayer', {
	 *       techOrder: ['myTech', 'html5']
	 *     });
	 * ```
	 *
	 * @param {String} The class name of the tech
	 * @param {Tech} The tech class
	 * @return {Tech} The newly registered Tech
	 * @mixes videojs
	 * @method registerTech
	 */
	videojs.registerTech = _techTechJs2['default'].registerTech;
	
	/**
	 * A suite of browser and device tests
	 *
	 * @type {Object}
	 * @private
	 */
	videojs.browser = browser;
	
	/**
	 * Whether or not the browser supports touch events. Included for backward
	 * compatibility with 4.x, but deprecated. Use `videojs.browser.TOUCH_ENABLED`
	 * instead going forward.
	 *
	 * @deprecated
	 * @type {Boolean}
	 */
	videojs.TOUCH_ENABLED = browser.TOUCH_ENABLED;
	
	/**
	 * Subclass an existing class
	 * Mimics ES6 subclassing with the `extend` keyword
	 * ```js
	 *     // Create a basic javascript 'class'
	 *     function MyClass(name){
	 *       // Set a property at initialization
	 *       this.myName = name;
	 *     }
	 *     // Create an instance method
	 *     MyClass.prototype.sayMyName = function(){
	 *       alert(this.myName);
	 *     };
	 *     // Subclass the exisitng class and change the name
	 *     // when initializing
	 *     var MySubClass = videojs.extend(MyClass, {
	 *       constructor: function(name) {
	 *         // Call the super class constructor for the subclass
	 *         MyClass.call(this, name)
	 *       }
	 *     });
	 *     // Create an instance of the new sub class
	 *     var myInstance = new MySubClass('John');
	 *     myInstance.sayMyName(); // -> should alert "John"
	 * ```
	 *
	 * @param {Function} The Class to subclass
	 * @param {Object} An object including instace methods for the new class
	 *                   Optionally including a `constructor` function
	 * @return {Function} The newly created subclass
	 * @mixes videojs
	 * @method extend
	 */
	videojs.extend = _extendJs2['default'];
	
	/**
	 * Merge two options objects recursively
	 * Performs a deep merge like lodash.merge but **only merges plain objects**
	 * (not arrays, elements, anything else)
	 * Other values will be copied directly from the second object.
	 * ```js
	 *     var defaultOptions = {
	 *       foo: true,
	 *       bar: {
	 *         a: true,
	 *         b: [1,2,3]
	 *       }
	 *     };
	 *     var newOptions = {
	 *       foo: false,
	 *       bar: {
	 *         b: [4,5,6]
	 *       }
	 *     };
	 *     var result = videojs.mergeOptions(defaultOptions, newOptions);
	 *     // result.foo = false;
	 *     // result.bar.a = true;
	 *     // result.bar.b = [4,5,6];
	 * ```
	 *
	 * @param {Object} defaults  The options object whose values will be overriden
	 * @param {Object} overrides The options object with values to override the first
	 * @param {Object} etc       Any number of additional options objects
	 *
	 * @return {Object} a new object with the merged values
	 * @mixes videojs
	 * @method mergeOptions
	 */
	videojs.mergeOptions = _srcJsUtilsMergeOptionsJs2['default'];
	
	/**
	 * Change the context (this) of a function
	 *
	 *     videojs.bind(newContext, function(){
	 *       this === newContext
	 *     });
	 *
	 * NOTE: as of v5.0 we require an ES5 shim, so you should use the native
	 * `function(){}.bind(newContext);` instead of this.
	 *
	 * @param  {*}        context The object to bind as scope
	 * @param  {Function} fn      The function to be bound to a scope
	 * @param  {Number=}  uid     An optional unique ID for the function to be set
	 * @return {Function}
	 */
	videojs.bind = Fn.bind;
	
	/**
	 * Create a Video.js player plugin
	 * Plugins are only initialized when options for the plugin are included
	 * in the player options, or the plugin function on the player instance is
	 * called.
	 * **See the plugin guide in the docs for a more detailed example**
	 * ```js
	 *     // Make a plugin that alerts when the player plays
	 *     videojs.plugin('myPlugin', function(myPluginOptions) {
	 *       myPluginOptions = myPluginOptions || {};
	 *
	 *       var player = this;
	 *       var alertText = myPluginOptions.text || 'Player is playing!'
	 *
	 *       player.on('play', function(){
	 *         alert(alertText);
	 *       });
	 *     });
	 *     // USAGE EXAMPLES
	 *     // EXAMPLE 1: New player with plugin options, call plugin immediately
	 *     var player1 = videojs('idOne', {
	 *       myPlugin: {
	 *         text: 'Custom text!'
	 *       }
	 *     });
	 *     // Click play
	 *     // --> Should alert 'Custom text!'
	 *     // EXAMPLE 3: New player, initialize plugin later
	 *     var player3 = videojs('idThree');
	 *     // Click play
	 *     // --> NO ALERT
	 *     // Click pause
	 *     // Initialize plugin using the plugin function on the player instance
	 *     player3.myPlugin({
	 *       text: 'Plugin added later!'
	 *     });
	 *     // Click play
	 *     // --> Should alert 'Plugin added later!'
	 * ```
	 *
	 * @param {String} name The plugin name
	 * @param {Function} fn The plugin function that will be called with options
	 * @mixes videojs
	 * @method plugin
	 */
	videojs.plugin = _pluginsJs2['default'];
	
	/**
	 * Adding languages so that they're available to all players.
	 * ```js
	 *     videojs.addLanguage('es', { 'Hello': 'Hola' });
	 * ```
	 *
	 * @param  {String} code The language code or dictionary property
	 * @param  {Object} data The data values to be translated
	 * @return {Object} The resulting language dictionary object
	 * @mixes videojs
	 * @method addLanguage
	 */
	videojs.addLanguage = function (code, data) {
	  var _merge;
	
	  code = ('' + code).toLowerCase();
	  return _lodashCompatObjectMerge2['default'](videojs.options.languages, (_merge = {}, _merge[code] = data, _merge))[code];
	};
	
	/**
	 * Log debug messages.
	 *
	 * @param {...Object} messages One or more messages to log
	 */
	videojs.log = _utilsLogJs2['default'];
	
	/**
	 * Creates an emulated TimeRange object.
	 *
	 * @param  {Number|Array} start Start time in seconds or an array of ranges
	 * @param  {Number} end   End time in seconds
	 * @return {Object}       Fake TimeRange object
	 * @method createTimeRange
	 */
	videojs.createTimeRange = videojs.createTimeRanges = _utilsTimeRangesJs.createTimeRanges;
	
	/**
	 * Format seconds as a time string, H:MM:SS or M:SS
	 * Supplying a guide (in seconds) will force a number of leading zeros
	 * to cover the length of the guide
	 *
	 * @param  {Number} seconds Number of seconds to be turned into a string
	 * @param  {Number} guide   Number (in seconds) to model the string after
	 * @return {String}         Time formatted as H:MM:SS or M:SS
	 * @method formatTime
	 */
	videojs.formatTime = _utilsFormatTimeJs2['default'];
	
	/**
	 * Resolve and parse the elements of a URL
	 *
	 * @param  {String} url The url to parse
	 * @return {Object}     An object of url details
	 * @method parseUrl
	 */
	videojs.parseUrl = Url.parseUrl;
	
	/**
	 * Returns whether the url passed is a cross domain request or not.
	 *
	 * @param {String} url The url to check
	 * @return {Boolean}   Whether it is a cross domain request or not
	 * @method isCrossOrigin
	 */
	videojs.isCrossOrigin = Url.isCrossOrigin;
	
	/**
	 * Event target class.
	 *
	 * @type {Function}
	 */
	videojs.EventTarget = _eventTarget2['default'];
	
	/**
	 * Add an event listener to element
	 * It stores the handler function in a separate cache object
	 * and adds a generic handler to the element's event,
	 * along with a unique id (guid) to the element.
	 *
	 * @param  {Element|Object}   elem Element or object to bind listeners to
	 * @param  {String|Array}   type Type of event to bind to.
	 * @param  {Function} fn   Event listener.
	 * @method on
	 */
	videojs.on = Events.on;
	
	/**
	 * Trigger a listener only once for an event
	 *
	 * @param  {Element|Object}   elem Element or object to
	 * @param  {String|Array}   type Name/type of event
	 * @param  {Function} fn Event handler function
	 * @method one
	 */
	videojs.one = Events.one;
	
	/**
	 * Removes event listeners from an element
	 *
	 * @param  {Element|Object}   elem Object to remove listeners from
	 * @param  {String|Array=}   type Type of listener to remove. Don't include to remove all events from element.
	 * @param  {Function} fn   Specific listener to remove. Don't include to remove listeners for an event type.
	 * @method off
	 */
	videojs.off = Events.off;
	
	/**
	 * Trigger an event for an element
	 *
	 * @param  {Element|Object}      elem  Element to trigger an event on
	 * @param  {Event|Object|String} event A string (the type) or an event object with a type attribute
	 * @param  {Object} [hash] data hash to pass along with the event
	 * @return {Boolean=} Returned only if default was prevented
	 * @method trigger
	 */
	videojs.trigger = Events.trigger;
	
	/**
	 * A cross-browser XMLHttpRequest wrapper. Here's a simple example:
	 *
	 *     videojs.xhr({
	 *       body: someJSONString,
	 *       uri: "/foo",
	 *       headers: {
	 *         "Content-Type": "application/json"
	 *       }
	 *     }, function (err, resp, body) {
	 *       // check resp.statusCode
	 *     });
	 *
	 * Check out the [full
	 * documentation](https://github.com/Raynos/xhr/blob/v2.1.0/README.md)
	 * for more options.
	 *
	 * @param {Object} options settings for the request.
	 * @return {XMLHttpRequest|XDomainRequest} the request object.
	 * @see https://github.com/Raynos/xhr
	 */
	videojs.xhr = _xhr2['default'];
	
	/**
	 * TextTrack class
	 *
	 * @type {Function}
	 */
	videojs.TextTrack = _tracksTextTrackJs2['default'];
	
	/**
	 * export the AudioTrack class so that source handlers can create
	 * AudioTracks and then add them to the players AudioTrackList
	 *
	 * @type {Function}
	 */
	videojs.AudioTrack = _tracksAudioTrackJs2['default'];
	
	/**
	 * export the VideoTrack class so that source handlers can create
	 * VideoTracks and then add them to the players VideoTrackList
	 *
	 * @type {Function}
	 */
	videojs.VideoTrack = _tracksVideoTrackJs2['default'];
	
	/**
	 * Determines, via duck typing, whether or not a value is a DOM element.
	 *
	 * @method isEl
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */
	videojs.isEl = Dom.isEl;
	
	/**
	 * Determines, via duck typing, whether or not a value is a text node.
	 *
	 * @method isTextNode
	 * @param  {Mixed} value
	 * @return {Boolean}
	 */
	videojs.isTextNode = Dom.isTextNode;
	
	/**
	 * Creates an element and applies properties.
	 *
	 * @method createEl
	 * @param  {String} [tagName='div'] Name of tag to be created.
	 * @param  {Object} [properties={}] Element properties to be applied.
	 * @param  {Object} [attributes={}] Element attributes to be applied.
	 * @return {Element}
	 */
	videojs.createEl = Dom.createEl;
	
	/**
	 * Check if an element has a CSS class
	 *
	 * @method hasClass
	 * @param {Element} element Element to check
	 * @param {String} classToCheck Classname to check
	 */
	videojs.hasClass = Dom.hasElClass;
	
	/**
	 * Add a CSS class name to an element
	 *
	 * @method addClass
	 * @param {Element} element    Element to add class name to
	 * @param {String} classToAdd Classname to add
	 */
	videojs.addClass = Dom.addElClass;
	
	/**
	 * Remove a CSS class name from an element
	 *
	 * @method removeClass
	 * @param {Element} element    Element to remove from class name
	 * @param {String} classToRemove Classname to remove
	 */
	videojs.removeClass = Dom.removeElClass;
	
	/**
	 * Adds or removes a CSS class name on an element depending on an optional
	 * condition or the presence/absence of the class name.
	 *
	 * @method toggleElClass
	 * @param  {Element} element
	 * @param  {String} classToToggle
	 * @param  {Boolean|Function} [predicate]
	 *         Can be a function that returns a Boolean. If `true`, the class
	 *         will be added; if `false`, the class will be removed. If not
	 *         given, the class will be added if not present and vice versa.
	 */
	videojs.toggleClass = Dom.toggleElClass;
	
	/**
	 * Apply attributes to an HTML element.
	 *
	 * @method setAttributes
	 * @param  {Element} el         Target element.
	 * @param  {Object=} attributes Element attributes to be applied.
	 */
	videojs.setAttributes = Dom.setElAttributes;
	
	/**
	 * Get an element's attribute values, as defined on the HTML tag
	 * Attributes are not the same as properties. They're defined on the tag
	 * or with setAttribute (which shouldn't be used with HTML)
	 * This will return true or false for boolean attributes.
	 *
	 * @method getAttributes
	 * @param  {Element} tag Element from which to get tag attributes
	 * @return {Object}
	 */
	videojs.getAttributes = Dom.getElAttributes;
	
	/**
	 * Empties the contents of an element.
	 *
	 * @method emptyEl
	 * @param  {Element} el
	 * @return {Element}
	 */
	videojs.emptyEl = Dom.emptyEl;
	
	/**
	 * Normalizes and appends content to an element.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @method appendContent
	 * @param  {Element} el
	 * @param  {String|Element|TextNode|Array|Function} content
	 * @return {Element}
	 */
	videojs.appendContent = Dom.appendContent;
	
	/**
	 * Normalizes and inserts content into an element; this is identical to
	 * `appendContent()`, except it empties the element first.
	 *
	 * The content for an element can be passed in multiple types and
	 * combinations, whose behavior is as follows:
	 *
	 * - String
	 *   Normalized into a text node.
	 *
	 * - Element, TextNode
	 *   Passed through.
	 *
	 * - Array
	 *   A one-dimensional array of strings, elements, nodes, or functions (which
	 *   return single strings, elements, or nodes).
	 *
	 * - Function
	 *   If the sole argument, is expected to produce a string, element,
	 *   node, or array.
	 *
	 * @method insertContent
	 * @param  {Element} el
	 * @param  {String|Element|TextNode|Array|Function} content
	 * @return {Element}
	 */
	videojs.insertContent = Dom.insertContent;
	
	/*
	 * Custom Universal Module Definition (UMD)
	 *
	 * Video.js will never be a non-browser lib so we can simplify UMD a bunch and
	 * still support requirejs and browserify. This also needs to be closure
	 * compiler compatible, so string keys are used.
	 */
	if (typeof define === 'function' && define['amd']) {
	  define('videojs', [], function () {
	    return videojs;
	  });
	
	  // checking that module is an object too because of umdjs/umd#35
	} else if (typeof exports === 'object' && typeof module === 'object') {
	    module['exports'] = videojs;
	  }
	
	exports['default'] = videojs;
	module.exports = exports['default'];
	
	},{"../../src/js/utils/merge-options.js":148,"./component":67,"./event-target":104,"./extend.js":105,"./player":113,"./plugins.js":114,"./setup":118,"./tech/flash.js":121,"./tech/html5.js":122,"./tech/tech.js":124,"./tracks/audio-track.js":126,"./tracks/text-track.js":134,"./tracks/video-track.js":139,"./utils/browser.js":140,"./utils/dom.js":142,"./utils/events.js":143,"./utils/fn.js":144,"./utils/format-time.js":145,"./utils/log.js":147,"./utils/stylesheet.js":149,"./utils/time-ranges.js":150,"./utils/url.js":152,"global/document":1,"global/window":2,"lodash-compat/object/merge":40,"xhr":56}]},{},[153])(153)
	});
	
	
	//# sourceMappingURL=video.js.map
	/* vtt.js - v0.12.1 (https://github.com/mozilla/vtt.js) built on 08-07-2015 */
	
	(function(root) {
	  var vttjs = root.vttjs = {};
	  var cueShim = vttjs.VTTCue;
	  var regionShim = vttjs.VTTRegion;
	  var oldVTTCue = root.VTTCue;
	  var oldVTTRegion = root.VTTRegion;
	
	  vttjs.shim = function() {
	    vttjs.VTTCue = cueShim;
	    vttjs.VTTRegion = regionShim;
	  };
	
	  vttjs.restore = function() {
	    vttjs.VTTCue = oldVTTCue;
	    vttjs.VTTRegion = oldVTTRegion;
	  };
	}(this));
	
	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	(function(root, vttjs) {
	
	  var autoKeyword = "auto";
	  var directionSetting = {
	    "": true,
	    "lr": true,
	    "rl": true
	  };
	  var alignSetting = {
	    "start": true,
	    "middle": true,
	    "end": true,
	    "left": true,
	    "right": true
	  };
	
	  function findDirectionSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var dir = directionSetting[value.toLowerCase()];
	    return dir ? value.toLowerCase() : false;
	  }
	
	  function findAlignSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var align = alignSetting[value.toLowerCase()];
	    return align ? value.toLowerCase() : false;
	  }
	
	  function extend(obj) {
	    var i = 1;
	    for (; i < arguments.length; i++) {
	      var cobj = arguments[i];
	      for (var p in cobj) {
	        obj[p] = cobj[p];
	      }
	    }
	
	    return obj;
	  }
	
	  function VTTCue(startTime, endTime, text) {
	    var cue = this;
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var baseObj = {};
	
	    if (isIE8) {
	      cue = document.createElement('custom');
	    } else {
	      baseObj.enumerable = true;
	    }
	
	    /**
	     * Shim implementation specific properties. These properties are not in
	     * the spec.
	     */
	
	    // Lets us know when the VTTCue's data has changed in such a way that we need
	    // to recompute its display state. This lets us compute its display state
	    // lazily.
	    cue.hasBeenReset = false;
	
	    /**
	     * VTTCue and TextTrackCue properties
	     * http://dev.w3.org/html5/webvtt/#vttcue-interface
	     */
	
	    var _id = "";
	    var _pauseOnExit = false;
	    var _startTime = startTime;
	    var _endTime = endTime;
	    var _text = text;
	    var _region = null;
	    var _vertical = "";
	    var _snapToLines = true;
	    var _line = "auto";
	    var _lineAlign = "start";
	    var _position = 50;
	    var _positionAlign = "middle";
	    var _size = 50;
	    var _align = "middle";
	
	    Object.defineProperty(cue,
	      "id", extend({}, baseObj, {
	        get: function() {
	          return _id;
	        },
	        set: function(value) {
	          _id = "" + value;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "pauseOnExit", extend({}, baseObj, {
	        get: function() {
	          return _pauseOnExit;
	        },
	        set: function(value) {
	          _pauseOnExit = !!value;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "startTime", extend({}, baseObj, {
	        get: function() {
	          return _startTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Start time must be set to a number.");
	          }
	          _startTime = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "endTime", extend({}, baseObj, {
	        get: function() {
	          return _endTime;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("End time must be set to a number.");
	          }
	          _endTime = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "text", extend({}, baseObj, {
	        get: function() {
	          return _text;
	        },
	        set: function(value) {
	          _text = "" + value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "region", extend({}, baseObj, {
	        get: function() {
	          return _region;
	        },
	        set: function(value) {
	          _region = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "vertical", extend({}, baseObj, {
	        get: function() {
	          return _vertical;
	        },
	        set: function(value) {
	          var setting = findDirectionSetting(value);
	          // Have to check for false because the setting an be an empty string.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _vertical = setting;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "snapToLines", extend({}, baseObj, {
	        get: function() {
	          return _snapToLines;
	        },
	        set: function(value) {
	          _snapToLines = !!value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "line", extend({}, baseObj, {
	        get: function() {
	          return _line;
	        },
	        set: function(value) {
	          if (typeof value !== "number" && value !== autoKeyword) {
	            throw new SyntaxError("An invalid number or illegal string was specified.");
	          }
	          _line = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "lineAlign", extend({}, baseObj, {
	        get: function() {
	          return _lineAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _lineAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "position", extend({}, baseObj, {
	        get: function() {
	          return _position;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Position must be between 0 and 100.");
	          }
	          _position = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "positionAlign", extend({}, baseObj, {
	        get: function() {
	          return _positionAlign;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _positionAlign = setting;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "size", extend({}, baseObj, {
	        get: function() {
	          return _size;
	        },
	        set: function(value) {
	          if (value < 0 || value > 100) {
	            throw new Error("Size must be between 0 and 100.");
	          }
	          _size = value;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    Object.defineProperty(cue,
	      "align", extend({}, baseObj, {
	        get: function() {
	          return _align;
	        },
	        set: function(value) {
	          var setting = findAlignSetting(value);
	          if (!setting) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _align = setting;
	          this.hasBeenReset = true;
	        }
	      }));
	
	    /**
	     * Other <track> spec defined properties
	     */
	
	    // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#text-track-cue-display-state
	    cue.displayState = undefined;
	
	    if (isIE8) {
	      return cue;
	    }
	  }
	
	  /**
	   * VTTCue methods
	   */
	
	  VTTCue.prototype.getCueAsHTML = function() {
	    // Assume WebVTT.convertCueToDOMTree is on the global.
	    return WebVTT.convertCueToDOMTree(window, this.text);
	  };
	
	  root.VTTCue = root.VTTCue || VTTCue;
	  vttjs.VTTCue = VTTCue;
	}(this, (this.vttjs || {})));
	
	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	(function(root, vttjs) {
	
	  var scrollSetting = {
	    "": true,
	    "up": true
	  };
	
	  function findScrollSetting(value) {
	    if (typeof value !== "string") {
	      return false;
	    }
	    var scroll = scrollSetting[value.toLowerCase()];
	    return scroll ? value.toLowerCase() : false;
	  }
	
	  function isValidPercentValue(value) {
	    return typeof value === "number" && (value >= 0 && value <= 100);
	  }
	
	  // VTTRegion shim http://dev.w3.org/html5/webvtt/#vttregion-interface
	  function VTTRegion() {
	    var _width = 100;
	    var _lines = 3;
	    var _regionAnchorX = 0;
	    var _regionAnchorY = 100;
	    var _viewportAnchorX = 0;
	    var _viewportAnchorY = 100;
	    var _scroll = "";
	
	    Object.defineProperties(this, {
	      "width": {
	        enumerable: true,
	        get: function() {
	          return _width;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("Width must be between 0 and 100.");
	          }
	          _width = value;
	        }
	      },
	      "lines": {
	        enumerable: true,
	        get: function() {
	          return _lines;
	        },
	        set: function(value) {
	          if (typeof value !== "number") {
	            throw new TypeError("Lines must be set to a number.");
	          }
	          _lines = value;
	        }
	      },
	      "regionAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorX must be between 0 and 100.");
	          }
	          _regionAnchorY = value;
	        }
	      },
	      "regionAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _regionAnchorX;
	        },
	        set: function(value) {
	          if(!isValidPercentValue(value)) {
	            throw new Error("RegionAnchorY must be between 0 and 100.");
	          }
	          _regionAnchorX = value;
	        }
	      },
	      "viewportAnchorY": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorY;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorY must be between 0 and 100.");
	          }
	          _viewportAnchorY = value;
	        }
	      },
	      "viewportAnchorX": {
	        enumerable: true,
	        get: function() {
	          return _viewportAnchorX;
	        },
	        set: function(value) {
	          if (!isValidPercentValue(value)) {
	            throw new Error("ViewportAnchorX must be between 0 and 100.");
	          }
	          _viewportAnchorX = value;
	        }
	      },
	      "scroll": {
	        enumerable: true,
	        get: function() {
	          return _scroll;
	        },
	        set: function(value) {
	          var setting = findScrollSetting(value);
	          // Have to check for false as an empty string is a legal value.
	          if (setting === false) {
	            throw new SyntaxError("An invalid or illegal string was specified.");
	          }
	          _scroll = setting;
	        }
	      }
	    });
	  }
	
	  root.VTTRegion = root.VTTRegion || VTTRegion;
	  vttjs.VTTRegion = VTTRegion;
	}(this, (this.vttjs || {})));
	
	/**
	 * Copyright 2013 vtt.js Contributors
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 *   http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 */
	
	/* -*- Mode: Java; tab-width: 2; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
	/* vim: set shiftwidth=2 tabstop=2 autoindent cindent expandtab: */
	
	(function(global) {
	
	  var _objCreate = Object.create || (function() {
	    function F() {}
	    return function(o) {
	      if (arguments.length !== 1) {
	        throw new Error('Object.create shim only accepts one parameter.');
	      }
	      F.prototype = o;
	      return new F();
	    };
	  })();
	
	  // Creates a new ParserError object from an errorData object. The errorData
	  // object should have default code and message properties. The default message
	  // property can be overriden by passing in a message parameter.
	  // See ParsingError.Errors below for acceptable errors.
	  function ParsingError(errorData, message) {
	    this.name = "ParsingError";
	    this.code = errorData.code;
	    this.message = message || errorData.message;
	  }
	  ParsingError.prototype = _objCreate(Error.prototype);
	  ParsingError.prototype.constructor = ParsingError;
	
	  // ParsingError metadata for acceptable ParsingErrors.
	  ParsingError.Errors = {
	    BadSignature: {
	      code: 0,
	      message: "Malformed WebVTT signature."
	    },
	    BadTimeStamp: {
	      code: 1,
	      message: "Malformed time stamp."
	    }
	  };
	
	  // Try to parse input as a time stamp.
	  function parseTimeStamp(input) {
	
	    function computeSeconds(h, m, s, f) {
	      return (h | 0) * 3600 + (m | 0) * 60 + (s | 0) + (f | 0) / 1000;
	    }
	
	    var m = input.match(/^(\d+):(\d{2})(:\d{2})?\.(\d{3})/);
	    if (!m) {
	      return null;
	    }
	
	    if (m[3]) {
	      // Timestamp takes the form of [hours]:[minutes]:[seconds].[milliseconds]
	      return computeSeconds(m[1], m[2], m[3].replace(":", ""), m[4]);
	    } else if (m[1] > 59) {
	      // Timestamp takes the form of [hours]:[minutes].[milliseconds]
	      // First position is hours as it's over 59.
	      return computeSeconds(m[1], m[2], 0,  m[4]);
	    } else {
	      // Timestamp takes the form of [minutes]:[seconds].[milliseconds]
	      return computeSeconds(0, m[1], m[2], m[4]);
	    }
	  }
	
	  // A settings object holds key/value pairs and will ignore anything but the first
	  // assignment to a specific key.
	  function Settings() {
	    this.values = _objCreate(null);
	  }
	
	  Settings.prototype = {
	    // Only accept the first assignment to any key.
	    set: function(k, v) {
	      if (!this.get(k) && v !== "") {
	        this.values[k] = v;
	      }
	    },
	    // Return the value for a key, or a default value.
	    // If 'defaultKey' is passed then 'dflt' is assumed to be an object with
	    // a number of possible default values as properties where 'defaultKey' is
	    // the key of the property that will be chosen; otherwise it's assumed to be
	    // a single value.
	    get: function(k, dflt, defaultKey) {
	      if (defaultKey) {
	        return this.has(k) ? this.values[k] : dflt[defaultKey];
	      }
	      return this.has(k) ? this.values[k] : dflt;
	    },
	    // Check whether we have a value for a key.
	    has: function(k) {
	      return k in this.values;
	    },
	    // Accept a setting if its one of the given alternatives.
	    alt: function(k, v, a) {
	      for (var n = 0; n < a.length; ++n) {
	        if (v === a[n]) {
	          this.set(k, v);
	          break;
	        }
	      }
	    },
	    // Accept a setting if its a valid (signed) integer.
	    integer: function(k, v) {
	      if (/^-?\d+$/.test(v)) { // integer
	        this.set(k, parseInt(v, 10));
	      }
	    },
	    // Accept a setting if its a valid percentage.
	    percent: function(k, v) {
	      var m;
	      if ((m = v.match(/^([\d]{1,3})(\.[\d]*)?%$/))) {
	        v = parseFloat(v);
	        if (v >= 0 && v <= 100) {
	          this.set(k, v);
	          return true;
	        }
	      }
	      return false;
	    }
	  };
	
	  // Helper function to parse input into groups separated by 'groupDelim', and
	  // interprete each group as a key/value pair separated by 'keyValueDelim'.
	  function parseOptions(input, callback, keyValueDelim, groupDelim) {
	    var groups = groupDelim ? input.split(groupDelim) : [input];
	    for (var i in groups) {
	      if (typeof groups[i] !== "string") {
	        continue;
	      }
	      var kv = groups[i].split(keyValueDelim);
	      if (kv.length !== 2) {
	        continue;
	      }
	      var k = kv[0];
	      var v = kv[1];
	      callback(k, v);
	    }
	  }
	
	  function parseCue(input, cue, regionList) {
	    // Remember the original input if we need to throw an error.
	    var oInput = input;
	    // 4.1 WebVTT timestamp
	    function consumeTimeStamp() {
	      var ts = parseTimeStamp(input);
	      if (ts === null) {
	        throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                              "Malformed timestamp: " + oInput);
	      }
	      // Remove time stamp from input.
	      input = input.replace(/^[^\sa-zA-Z-]+/, "");
	      return ts;
	    }
	
	    // 4.4.2 WebVTT cue settings
	    function consumeCueSettings(input, cue) {
	      var settings = new Settings();
	
	      parseOptions(input, function (k, v) {
	        switch (k) {
	        case "region":
	          // Find the last region we parsed with the same region id.
	          for (var i = regionList.length - 1; i >= 0; i--) {
	            if (regionList[i].id === v) {
	              settings.set(k, regionList[i].region);
	              break;
	            }
	          }
	          break;
	        case "vertical":
	          settings.alt(k, v, ["rl", "lr"]);
	          break;
	        case "line":
	          var vals = v.split(","),
	              vals0 = vals[0];
	          settings.integer(k, vals0);
	          settings.percent(k, vals0) ? settings.set("snapToLines", false) : null;
	          settings.alt(k, vals0, ["auto"]);
	          if (vals.length === 2) {
	            settings.alt("lineAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "position":
	          vals = v.split(",");
	          settings.percent(k, vals[0]);
	          if (vals.length === 2) {
	            settings.alt("positionAlign", vals[1], ["start", "middle", "end"]);
	          }
	          break;
	        case "size":
	          settings.percent(k, v);
	          break;
	        case "align":
	          settings.alt(k, v, ["start", "middle", "end", "left", "right"]);
	          break;
	        }
	      }, /:/, /\s/);
	
	      // Apply default values for any missing fields.
	      cue.region = settings.get("region", null);
	      cue.vertical = settings.get("vertical", "");
	      cue.line = settings.get("line", "auto");
	      cue.lineAlign = settings.get("lineAlign", "start");
	      cue.snapToLines = settings.get("snapToLines", true);
	      cue.size = settings.get("size", 100);
	      cue.align = settings.get("align", "middle");
	      cue.position = settings.get("position", {
	        start: 0,
	        left: 0,
	        middle: 50,
	        end: 100,
	        right: 100
	      }, cue.align);
	      cue.positionAlign = settings.get("positionAlign", {
	        start: "start",
	        left: "start",
	        middle: "middle",
	        end: "end",
	        right: "end"
	      }, cue.align);
	    }
	
	    function skipWhitespace() {
	      input = input.replace(/^\s+/, "");
	    }
	
	    // 4.1 WebVTT cue timings.
	    skipWhitespace();
	    cue.startTime = consumeTimeStamp();   // (1) collect cue start time
	    skipWhitespace();
	    if (input.substr(0, 3) !== "-->") {     // (3) next characters must match "-->"
	      throw new ParsingError(ParsingError.Errors.BadTimeStamp,
	                             "Malformed time stamp (time stamps must be separated by '-->'): " +
	                             oInput);
	    }
	    input = input.substr(3);
	    skipWhitespace();
	    cue.endTime = consumeTimeStamp();     // (5) collect cue end time
	
	    // 4.1 WebVTT cue settings list.
	    skipWhitespace();
	    consumeCueSettings(input, cue);
	  }
	
	  var ESCAPE = {
	    "&amp;": "&",
	    "&lt;": "<",
	    "&gt;": ">",
	    "&lrm;": "\u200e",
	    "&rlm;": "\u200f",
	    "&nbsp;": "\u00a0"
	  };
	
	  var TAG_NAME = {
	    c: "span",
	    i: "i",
	    b: "b",
	    u: "u",
	    ruby: "ruby",
	    rt: "rt",
	    v: "span",
	    lang: "span"
	  };
	
	  var TAG_ANNOTATION = {
	    v: "title",
	    lang: "lang"
	  };
	
	  var NEEDS_PARENT = {
	    rt: "ruby"
	  };
	
	  // Parse content into a document fragment.
	  function parseContent(window, input) {
	    function nextToken() {
	      // Check for end-of-string.
	      if (!input) {
	        return null;
	      }
	
	      // Consume 'n' characters from the input.
	      function consume(result) {
	        input = input.substr(result.length);
	        return result;
	      }
	
	      var m = input.match(/^([^<]*)(<[^>]+>?)?/);
	      // If there is some text before the next tag, return it, otherwise return
	      // the tag.
	      return consume(m[1] ? m[1] : m[2]);
	    }
	
	    // Unescape a string 's'.
	    function unescape1(e) {
	      return ESCAPE[e];
	    }
	    function unescape(s) {
	      while ((m = s.match(/&(amp|lt|gt|lrm|rlm|nbsp);/))) {
	        s = s.replace(m[0], unescape1);
	      }
	      return s;
	    }
	
	    function shouldAdd(current, element) {
	      return !NEEDS_PARENT[element.localName] ||
	             NEEDS_PARENT[element.localName] === current.localName;
	    }
	
	    // Create an element for this tag.
	    function createElement(type, annotation) {
	      var tagName = TAG_NAME[type];
	      if (!tagName) {
	        return null;
	      }
	      var element = window.document.createElement(tagName);
	      element.localName = tagName;
	      var name = TAG_ANNOTATION[type];
	      if (name && annotation) {
	        element[name] = annotation.trim();
	      }
	      return element;
	    }
	
	    var rootDiv = window.document.createElement("div"),
	        current = rootDiv,
	        t,
	        tagStack = [];
	
	    while ((t = nextToken()) !== null) {
	      if (t[0] === '<') {
	        if (t[1] === "/") {
	          // If the closing tag matches, move back up to the parent node.
	          if (tagStack.length &&
	              tagStack[tagStack.length - 1] === t.substr(2).replace(">", "")) {
	            tagStack.pop();
	            current = current.parentNode;
	          }
	          // Otherwise just ignore the end tag.
	          continue;
	        }
	        var ts = parseTimeStamp(t.substr(1, t.length - 2));
	        var node;
	        if (ts) {
	          // Timestamps are lead nodes as well.
	          node = window.document.createProcessingInstruction("timestamp", ts);
	          current.appendChild(node);
	          continue;
	        }
	        var m = t.match(/^<([^.\s/0-9>]+)(\.[^\s\\>]+)?([^>\\]+)?(\\?)>?$/);
	        // If we can't parse the tag, skip to the next tag.
	        if (!m) {
	          continue;
	        }
	        // Try to construct an element, and ignore the tag if we couldn't.
	        node = createElement(m[1], m[3]);
	        if (!node) {
	          continue;
	        }
	        // Determine if the tag should be added based on the context of where it
	        // is placed in the cuetext.
	        if (!shouldAdd(current, node)) {
	          continue;
	        }
	        // Set the class list (as a list of classes, separated by space).
	        if (m[2]) {
	          node.className = m[2].substr(1).replace('.', ' ');
	        }
	        // Append the node to the current node, and enter the scope of the new
	        // node.
	        tagStack.push(m[1]);
	        current.appendChild(node);
	        current = node;
	        continue;
	      }
	
	      // Text nodes are leaf nodes.
	      current.appendChild(window.document.createTextNode(unescape(t)));
	    }
	
	    return rootDiv;
	  }
	
	  // This is a list of all the Unicode characters that have a strong
	  // right-to-left category. What this means is that these characters are
	  // written right-to-left for sure. It was generated by pulling all the strong
	  // right-to-left characters out of the Unicode data table. That table can
	  // found at: http://www.unicode.org/Public/UNIDATA/UnicodeData.txt
	  var strongRTLChars = [0x05BE, 0x05C0, 0x05C3, 0x05C6, 0x05D0, 0x05D1,
	      0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7, 0x05D8, 0x05D9, 0x05DA,
	      0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF, 0x05E0, 0x05E1, 0x05E2, 0x05E3,
	      0x05E4, 0x05E5, 0x05E6, 0x05E7, 0x05E8, 0x05E9, 0x05EA, 0x05F0, 0x05F1,
	      0x05F2, 0x05F3, 0x05F4, 0x0608, 0x060B, 0x060D, 0x061B, 0x061E, 0x061F,
	      0x0620, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627, 0x0628,
	      0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F, 0x0630, 0x0631,
	      0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x0637, 0x0638, 0x0639, 0x063A,
	      0x063B, 0x063C, 0x063D, 0x063E, 0x063F, 0x0640, 0x0641, 0x0642, 0x0643,
	      0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A, 0x066D, 0x066E,
	      0x066F, 0x0671, 0x0672, 0x0673, 0x0674, 0x0675, 0x0676, 0x0677, 0x0678,
	      0x0679, 0x067A, 0x067B, 0x067C, 0x067D, 0x067E, 0x067F, 0x0680, 0x0681,
	      0x0682, 0x0683, 0x0684, 0x0685, 0x0686, 0x0687, 0x0688, 0x0689, 0x068A,
	      0x068B, 0x068C, 0x068D, 0x068E, 0x068F, 0x0690, 0x0691, 0x0692, 0x0693,
	      0x0694, 0x0695, 0x0696, 0x0697, 0x0698, 0x0699, 0x069A, 0x069B, 0x069C,
	      0x069D, 0x069E, 0x069F, 0x06A0, 0x06A1, 0x06A2, 0x06A3, 0x06A4, 0x06A5,
	      0x06A6, 0x06A7, 0x06A8, 0x06A9, 0x06AA, 0x06AB, 0x06AC, 0x06AD, 0x06AE,
	      0x06AF, 0x06B0, 0x06B1, 0x06B2, 0x06B3, 0x06B4, 0x06B5, 0x06B6, 0x06B7,
	      0x06B8, 0x06B9, 0x06BA, 0x06BB, 0x06BC, 0x06BD, 0x06BE, 0x06BF, 0x06C0,
	      0x06C1, 0x06C2, 0x06C3, 0x06C4, 0x06C5, 0x06C6, 0x06C7, 0x06C8, 0x06C9,
	      0x06CA, 0x06CB, 0x06CC, 0x06CD, 0x06CE, 0x06CF, 0x06D0, 0x06D1, 0x06D2,
	      0x06D3, 0x06D4, 0x06D5, 0x06E5, 0x06E6, 0x06EE, 0x06EF, 0x06FA, 0x06FB,
	      0x06FC, 0x06FD, 0x06FE, 0x06FF, 0x0700, 0x0701, 0x0702, 0x0703, 0x0704,
	      0x0705, 0x0706, 0x0707, 0x0708, 0x0709, 0x070A, 0x070B, 0x070C, 0x070D,
	      0x070F, 0x0710, 0x0712, 0x0713, 0x0714, 0x0715, 0x0716, 0x0717, 0x0718,
	      0x0719, 0x071A, 0x071B, 0x071C, 0x071D, 0x071E, 0x071F, 0x0720, 0x0721,
	      0x0722, 0x0723, 0x0724, 0x0725, 0x0726, 0x0727, 0x0728, 0x0729, 0x072A,
	      0x072B, 0x072C, 0x072D, 0x072E, 0x072F, 0x074D, 0x074E, 0x074F, 0x0750,
	      0x0751, 0x0752, 0x0753, 0x0754, 0x0755, 0x0756, 0x0757, 0x0758, 0x0759,
	      0x075A, 0x075B, 0x075C, 0x075D, 0x075E, 0x075F, 0x0760, 0x0761, 0x0762,
	      0x0763, 0x0764, 0x0765, 0x0766, 0x0767, 0x0768, 0x0769, 0x076A, 0x076B,
	      0x076C, 0x076D, 0x076E, 0x076F, 0x0770, 0x0771, 0x0772, 0x0773, 0x0774,
	      0x0775, 0x0776, 0x0777, 0x0778, 0x0779, 0x077A, 0x077B, 0x077C, 0x077D,
	      0x077E, 0x077F, 0x0780, 0x0781, 0x0782, 0x0783, 0x0784, 0x0785, 0x0786,
	      0x0787, 0x0788, 0x0789, 0x078A, 0x078B, 0x078C, 0x078D, 0x078E, 0x078F,
	      0x0790, 0x0791, 0x0792, 0x0793, 0x0794, 0x0795, 0x0796, 0x0797, 0x0798,
	      0x0799, 0x079A, 0x079B, 0x079C, 0x079D, 0x079E, 0x079F, 0x07A0, 0x07A1,
	      0x07A2, 0x07A3, 0x07A4, 0x07A5, 0x07B1, 0x07C0, 0x07C1, 0x07C2, 0x07C3,
	      0x07C4, 0x07C5, 0x07C6, 0x07C7, 0x07C8, 0x07C9, 0x07CA, 0x07CB, 0x07CC,
	      0x07CD, 0x07CE, 0x07CF, 0x07D0, 0x07D1, 0x07D2, 0x07D3, 0x07D4, 0x07D5,
	      0x07D6, 0x07D7, 0x07D8, 0x07D9, 0x07DA, 0x07DB, 0x07DC, 0x07DD, 0x07DE,
	      0x07DF, 0x07E0, 0x07E1, 0x07E2, 0x07E3, 0x07E4, 0x07E5, 0x07E6, 0x07E7,
	      0x07E8, 0x07E9, 0x07EA, 0x07F4, 0x07F5, 0x07FA, 0x0800, 0x0801, 0x0802,
	      0x0803, 0x0804, 0x0805, 0x0806, 0x0807, 0x0808, 0x0809, 0x080A, 0x080B,
	      0x080C, 0x080D, 0x080E, 0x080F, 0x0810, 0x0811, 0x0812, 0x0813, 0x0814,
	      0x0815, 0x081A, 0x0824, 0x0828, 0x0830, 0x0831, 0x0832, 0x0833, 0x0834,
	      0x0835, 0x0836, 0x0837, 0x0838, 0x0839, 0x083A, 0x083B, 0x083C, 0x083D,
	      0x083E, 0x0840, 0x0841, 0x0842, 0x0843, 0x0844, 0x0845, 0x0846, 0x0847,
	      0x0848, 0x0849, 0x084A, 0x084B, 0x084C, 0x084D, 0x084E, 0x084F, 0x0850,
	      0x0851, 0x0852, 0x0853, 0x0854, 0x0855, 0x0856, 0x0857, 0x0858, 0x085E,
	      0x08A0, 0x08A2, 0x08A3, 0x08A4, 0x08A5, 0x08A6, 0x08A7, 0x08A8, 0x08A9,
	      0x08AA, 0x08AB, 0x08AC, 0x200F, 0xFB1D, 0xFB1F, 0xFB20, 0xFB21, 0xFB22,
	      0xFB23, 0xFB24, 0xFB25, 0xFB26, 0xFB27, 0xFB28, 0xFB2A, 0xFB2B, 0xFB2C,
	      0xFB2D, 0xFB2E, 0xFB2F, 0xFB30, 0xFB31, 0xFB32, 0xFB33, 0xFB34, 0xFB35,
	      0xFB36, 0xFB38, 0xFB39, 0xFB3A, 0xFB3B, 0xFB3C, 0xFB3E, 0xFB40, 0xFB41,
	      0xFB43, 0xFB44, 0xFB46, 0xFB47, 0xFB48, 0xFB49, 0xFB4A, 0xFB4B, 0xFB4C,
	      0xFB4D, 0xFB4E, 0xFB4F, 0xFB50, 0xFB51, 0xFB52, 0xFB53, 0xFB54, 0xFB55,
	      0xFB56, 0xFB57, 0xFB58, 0xFB59, 0xFB5A, 0xFB5B, 0xFB5C, 0xFB5D, 0xFB5E,
	      0xFB5F, 0xFB60, 0xFB61, 0xFB62, 0xFB63, 0xFB64, 0xFB65, 0xFB66, 0xFB67,
	      0xFB68, 0xFB69, 0xFB6A, 0xFB6B, 0xFB6C, 0xFB6D, 0xFB6E, 0xFB6F, 0xFB70,
	      0xFB71, 0xFB72, 0xFB73, 0xFB74, 0xFB75, 0xFB76, 0xFB77, 0xFB78, 0xFB79,
	      0xFB7A, 0xFB7B, 0xFB7C, 0xFB7D, 0xFB7E, 0xFB7F, 0xFB80, 0xFB81, 0xFB82,
	      0xFB83, 0xFB84, 0xFB85, 0xFB86, 0xFB87, 0xFB88, 0xFB89, 0xFB8A, 0xFB8B,
	      0xFB8C, 0xFB8D, 0xFB8E, 0xFB8F, 0xFB90, 0xFB91, 0xFB92, 0xFB93, 0xFB94,
	      0xFB95, 0xFB96, 0xFB97, 0xFB98, 0xFB99, 0xFB9A, 0xFB9B, 0xFB9C, 0xFB9D,
	      0xFB9E, 0xFB9F, 0xFBA0, 0xFBA1, 0xFBA2, 0xFBA3, 0xFBA4, 0xFBA5, 0xFBA6,
	      0xFBA7, 0xFBA8, 0xFBA9, 0xFBAA, 0xFBAB, 0xFBAC, 0xFBAD, 0xFBAE, 0xFBAF,
	      0xFBB0, 0xFBB1, 0xFBB2, 0xFBB3, 0xFBB4, 0xFBB5, 0xFBB6, 0xFBB7, 0xFBB8,
	      0xFBB9, 0xFBBA, 0xFBBB, 0xFBBC, 0xFBBD, 0xFBBE, 0xFBBF, 0xFBC0, 0xFBC1,
	      0xFBD3, 0xFBD4, 0xFBD5, 0xFBD6, 0xFBD7, 0xFBD8, 0xFBD9, 0xFBDA, 0xFBDB,
	      0xFBDC, 0xFBDD, 0xFBDE, 0xFBDF, 0xFBE0, 0xFBE1, 0xFBE2, 0xFBE3, 0xFBE4,
	      0xFBE5, 0xFBE6, 0xFBE7, 0xFBE8, 0xFBE9, 0xFBEA, 0xFBEB, 0xFBEC, 0xFBED,
	      0xFBEE, 0xFBEF, 0xFBF0, 0xFBF1, 0xFBF2, 0xFBF3, 0xFBF4, 0xFBF5, 0xFBF6,
	      0xFBF7, 0xFBF8, 0xFBF9, 0xFBFA, 0xFBFB, 0xFBFC, 0xFBFD, 0xFBFE, 0xFBFF,
	      0xFC00, 0xFC01, 0xFC02, 0xFC03, 0xFC04, 0xFC05, 0xFC06, 0xFC07, 0xFC08,
	      0xFC09, 0xFC0A, 0xFC0B, 0xFC0C, 0xFC0D, 0xFC0E, 0xFC0F, 0xFC10, 0xFC11,
	      0xFC12, 0xFC13, 0xFC14, 0xFC15, 0xFC16, 0xFC17, 0xFC18, 0xFC19, 0xFC1A,
	      0xFC1B, 0xFC1C, 0xFC1D, 0xFC1E, 0xFC1F, 0xFC20, 0xFC21, 0xFC22, 0xFC23,
	      0xFC24, 0xFC25, 0xFC26, 0xFC27, 0xFC28, 0xFC29, 0xFC2A, 0xFC2B, 0xFC2C,
	      0xFC2D, 0xFC2E, 0xFC2F, 0xFC30, 0xFC31, 0xFC32, 0xFC33, 0xFC34, 0xFC35,
	      0xFC36, 0xFC37, 0xFC38, 0xFC39, 0xFC3A, 0xFC3B, 0xFC3C, 0xFC3D, 0xFC3E,
	      0xFC3F, 0xFC40, 0xFC41, 0xFC42, 0xFC43, 0xFC44, 0xFC45, 0xFC46, 0xFC47,
	      0xFC48, 0xFC49, 0xFC4A, 0xFC4B, 0xFC4C, 0xFC4D, 0xFC4E, 0xFC4F, 0xFC50,
	      0xFC51, 0xFC52, 0xFC53, 0xFC54, 0xFC55, 0xFC56, 0xFC57, 0xFC58, 0xFC59,
	      0xFC5A, 0xFC5B, 0xFC5C, 0xFC5D, 0xFC5E, 0xFC5F, 0xFC60, 0xFC61, 0xFC62,
	      0xFC63, 0xFC64, 0xFC65, 0xFC66, 0xFC67, 0xFC68, 0xFC69, 0xFC6A, 0xFC6B,
	      0xFC6C, 0xFC6D, 0xFC6E, 0xFC6F, 0xFC70, 0xFC71, 0xFC72, 0xFC73, 0xFC74,
	      0xFC75, 0xFC76, 0xFC77, 0xFC78, 0xFC79, 0xFC7A, 0xFC7B, 0xFC7C, 0xFC7D,
	      0xFC7E, 0xFC7F, 0xFC80, 0xFC81, 0xFC82, 0xFC83, 0xFC84, 0xFC85, 0xFC86,
	      0xFC87, 0xFC88, 0xFC89, 0xFC8A, 0xFC8B, 0xFC8C, 0xFC8D, 0xFC8E, 0xFC8F,
	      0xFC90, 0xFC91, 0xFC92, 0xFC93, 0xFC94, 0xFC95, 0xFC96, 0xFC97, 0xFC98,
	      0xFC99, 0xFC9A, 0xFC9B, 0xFC9C, 0xFC9D, 0xFC9E, 0xFC9F, 0xFCA0, 0xFCA1,
	      0xFCA2, 0xFCA3, 0xFCA4, 0xFCA5, 0xFCA6, 0xFCA7, 0xFCA8, 0xFCA9, 0xFCAA,
	      0xFCAB, 0xFCAC, 0xFCAD, 0xFCAE, 0xFCAF, 0xFCB0, 0xFCB1, 0xFCB2, 0xFCB3,
	      0xFCB4, 0xFCB5, 0xFCB6, 0xFCB7, 0xFCB8, 0xFCB9, 0xFCBA, 0xFCBB, 0xFCBC,
	      0xFCBD, 0xFCBE, 0xFCBF, 0xFCC0, 0xFCC1, 0xFCC2, 0xFCC3, 0xFCC4, 0xFCC5,
	      0xFCC6, 0xFCC7, 0xFCC8, 0xFCC9, 0xFCCA, 0xFCCB, 0xFCCC, 0xFCCD, 0xFCCE,
	      0xFCCF, 0xFCD0, 0xFCD1, 0xFCD2, 0xFCD3, 0xFCD4, 0xFCD5, 0xFCD6, 0xFCD7,
	      0xFCD8, 0xFCD9, 0xFCDA, 0xFCDB, 0xFCDC, 0xFCDD, 0xFCDE, 0xFCDF, 0xFCE0,
	      0xFCE1, 0xFCE2, 0xFCE3, 0xFCE4, 0xFCE5, 0xFCE6, 0xFCE7, 0xFCE8, 0xFCE9,
	      0xFCEA, 0xFCEB, 0xFCEC, 0xFCED, 0xFCEE, 0xFCEF, 0xFCF0, 0xFCF1, 0xFCF2,
	      0xFCF3, 0xFCF4, 0xFCF5, 0xFCF6, 0xFCF7, 0xFCF8, 0xFCF9, 0xFCFA, 0xFCFB,
	      0xFCFC, 0xFCFD, 0xFCFE, 0xFCFF, 0xFD00, 0xFD01, 0xFD02, 0xFD03, 0xFD04,
	      0xFD05, 0xFD06, 0xFD07, 0xFD08, 0xFD09, 0xFD0A, 0xFD0B, 0xFD0C, 0xFD0D,
	      0xFD0E, 0xFD0F, 0xFD10, 0xFD11, 0xFD12, 0xFD13, 0xFD14, 0xFD15, 0xFD16,
	      0xFD17, 0xFD18, 0xFD19, 0xFD1A, 0xFD1B, 0xFD1C, 0xFD1D, 0xFD1E, 0xFD1F,
	      0xFD20, 0xFD21, 0xFD22, 0xFD23, 0xFD24, 0xFD25, 0xFD26, 0xFD27, 0xFD28,
	      0xFD29, 0xFD2A, 0xFD2B, 0xFD2C, 0xFD2D, 0xFD2E, 0xFD2F, 0xFD30, 0xFD31,
	      0xFD32, 0xFD33, 0xFD34, 0xFD35, 0xFD36, 0xFD37, 0xFD38, 0xFD39, 0xFD3A,
	      0xFD3B, 0xFD3C, 0xFD3D, 0xFD50, 0xFD51, 0xFD52, 0xFD53, 0xFD54, 0xFD55,
	      0xFD56, 0xFD57, 0xFD58, 0xFD59, 0xFD5A, 0xFD5B, 0xFD5C, 0xFD5D, 0xFD5E,
	      0xFD5F, 0xFD60, 0xFD61, 0xFD62, 0xFD63, 0xFD64, 0xFD65, 0xFD66, 0xFD67,
	      0xFD68, 0xFD69, 0xFD6A, 0xFD6B, 0xFD6C, 0xFD6D, 0xFD6E, 0xFD6F, 0xFD70,
	      0xFD71, 0xFD72, 0xFD73, 0xFD74, 0xFD75, 0xFD76, 0xFD77, 0xFD78, 0xFD79,
	      0xFD7A, 0xFD7B, 0xFD7C, 0xFD7D, 0xFD7E, 0xFD7F, 0xFD80, 0xFD81, 0xFD82,
	      0xFD83, 0xFD84, 0xFD85, 0xFD86, 0xFD87, 0xFD88, 0xFD89, 0xFD8A, 0xFD8B,
	      0xFD8C, 0xFD8D, 0xFD8E, 0xFD8F, 0xFD92, 0xFD93, 0xFD94, 0xFD95, 0xFD96,
	      0xFD97, 0xFD98, 0xFD99, 0xFD9A, 0xFD9B, 0xFD9C, 0xFD9D, 0xFD9E, 0xFD9F,
	      0xFDA0, 0xFDA1, 0xFDA2, 0xFDA3, 0xFDA4, 0xFDA5, 0xFDA6, 0xFDA7, 0xFDA8,
	      0xFDA9, 0xFDAA, 0xFDAB, 0xFDAC, 0xFDAD, 0xFDAE, 0xFDAF, 0xFDB0, 0xFDB1,
	      0xFDB2, 0xFDB3, 0xFDB4, 0xFDB5, 0xFDB6, 0xFDB7, 0xFDB8, 0xFDB9, 0xFDBA,
	      0xFDBB, 0xFDBC, 0xFDBD, 0xFDBE, 0xFDBF, 0xFDC0, 0xFDC1, 0xFDC2, 0xFDC3,
	      0xFDC4, 0xFDC5, 0xFDC6, 0xFDC7, 0xFDF0, 0xFDF1, 0xFDF2, 0xFDF3, 0xFDF4,
	      0xFDF5, 0xFDF6, 0xFDF7, 0xFDF8, 0xFDF9, 0xFDFA, 0xFDFB, 0xFDFC, 0xFE70,
	      0xFE71, 0xFE72, 0xFE73, 0xFE74, 0xFE76, 0xFE77, 0xFE78, 0xFE79, 0xFE7A,
	      0xFE7B, 0xFE7C, 0xFE7D, 0xFE7E, 0xFE7F, 0xFE80, 0xFE81, 0xFE82, 0xFE83,
	      0xFE84, 0xFE85, 0xFE86, 0xFE87, 0xFE88, 0xFE89, 0xFE8A, 0xFE8B, 0xFE8C,
	      0xFE8D, 0xFE8E, 0xFE8F, 0xFE90, 0xFE91, 0xFE92, 0xFE93, 0xFE94, 0xFE95,
	      0xFE96, 0xFE97, 0xFE98, 0xFE99, 0xFE9A, 0xFE9B, 0xFE9C, 0xFE9D, 0xFE9E,
	      0xFE9F, 0xFEA0, 0xFEA1, 0xFEA2, 0xFEA3, 0xFEA4, 0xFEA5, 0xFEA6, 0xFEA7,
	      0xFEA8, 0xFEA9, 0xFEAA, 0xFEAB, 0xFEAC, 0xFEAD, 0xFEAE, 0xFEAF, 0xFEB0,
	      0xFEB1, 0xFEB2, 0xFEB3, 0xFEB4, 0xFEB5, 0xFEB6, 0xFEB7, 0xFEB8, 0xFEB9,
	      0xFEBA, 0xFEBB, 0xFEBC, 0xFEBD, 0xFEBE, 0xFEBF, 0xFEC0, 0xFEC1, 0xFEC2,
	      0xFEC3, 0xFEC4, 0xFEC5, 0xFEC6, 0xFEC7, 0xFEC8, 0xFEC9, 0xFECA, 0xFECB,
	      0xFECC, 0xFECD, 0xFECE, 0xFECF, 0xFED0, 0xFED1, 0xFED2, 0xFED3, 0xFED4,
	      0xFED5, 0xFED6, 0xFED7, 0xFED8, 0xFED9, 0xFEDA, 0xFEDB, 0xFEDC, 0xFEDD,
	      0xFEDE, 0xFEDF, 0xFEE0, 0xFEE1, 0xFEE2, 0xFEE3, 0xFEE4, 0xFEE5, 0xFEE6,
	      0xFEE7, 0xFEE8, 0xFEE9, 0xFEEA, 0xFEEB, 0xFEEC, 0xFEED, 0xFEEE, 0xFEEF,
	      0xFEF0, 0xFEF1, 0xFEF2, 0xFEF3, 0xFEF4, 0xFEF5, 0xFEF6, 0xFEF7, 0xFEF8,
	      0xFEF9, 0xFEFA, 0xFEFB, 0xFEFC, 0x10800, 0x10801, 0x10802, 0x10803,
	      0x10804, 0x10805, 0x10808, 0x1080A, 0x1080B, 0x1080C, 0x1080D, 0x1080E,
	      0x1080F, 0x10810, 0x10811, 0x10812, 0x10813, 0x10814, 0x10815, 0x10816,
	      0x10817, 0x10818, 0x10819, 0x1081A, 0x1081B, 0x1081C, 0x1081D, 0x1081E,
	      0x1081F, 0x10820, 0x10821, 0x10822, 0x10823, 0x10824, 0x10825, 0x10826,
	      0x10827, 0x10828, 0x10829, 0x1082A, 0x1082B, 0x1082C, 0x1082D, 0x1082E,
	      0x1082F, 0x10830, 0x10831, 0x10832, 0x10833, 0x10834, 0x10835, 0x10837,
	      0x10838, 0x1083C, 0x1083F, 0x10840, 0x10841, 0x10842, 0x10843, 0x10844,
	      0x10845, 0x10846, 0x10847, 0x10848, 0x10849, 0x1084A, 0x1084B, 0x1084C,
	      0x1084D, 0x1084E, 0x1084F, 0x10850, 0x10851, 0x10852, 0x10853, 0x10854,
	      0x10855, 0x10857, 0x10858, 0x10859, 0x1085A, 0x1085B, 0x1085C, 0x1085D,
	      0x1085E, 0x1085F, 0x10900, 0x10901, 0x10902, 0x10903, 0x10904, 0x10905,
	      0x10906, 0x10907, 0x10908, 0x10909, 0x1090A, 0x1090B, 0x1090C, 0x1090D,
	      0x1090E, 0x1090F, 0x10910, 0x10911, 0x10912, 0x10913, 0x10914, 0x10915,
	      0x10916, 0x10917, 0x10918, 0x10919, 0x1091A, 0x1091B, 0x10920, 0x10921,
	      0x10922, 0x10923, 0x10924, 0x10925, 0x10926, 0x10927, 0x10928, 0x10929,
	      0x1092A, 0x1092B, 0x1092C, 0x1092D, 0x1092E, 0x1092F, 0x10930, 0x10931,
	      0x10932, 0x10933, 0x10934, 0x10935, 0x10936, 0x10937, 0x10938, 0x10939,
	      0x1093F, 0x10980, 0x10981, 0x10982, 0x10983, 0x10984, 0x10985, 0x10986,
	      0x10987, 0x10988, 0x10989, 0x1098A, 0x1098B, 0x1098C, 0x1098D, 0x1098E,
	      0x1098F, 0x10990, 0x10991, 0x10992, 0x10993, 0x10994, 0x10995, 0x10996,
	      0x10997, 0x10998, 0x10999, 0x1099A, 0x1099B, 0x1099C, 0x1099D, 0x1099E,
	      0x1099F, 0x109A0, 0x109A1, 0x109A2, 0x109A3, 0x109A4, 0x109A5, 0x109A6,
	      0x109A7, 0x109A8, 0x109A9, 0x109AA, 0x109AB, 0x109AC, 0x109AD, 0x109AE,
	      0x109AF, 0x109B0, 0x109B1, 0x109B2, 0x109B3, 0x109B4, 0x109B5, 0x109B6,
	      0x109B7, 0x109BE, 0x109BF, 0x10A00, 0x10A10, 0x10A11, 0x10A12, 0x10A13,
	      0x10A15, 0x10A16, 0x10A17, 0x10A19, 0x10A1A, 0x10A1B, 0x10A1C, 0x10A1D,
	      0x10A1E, 0x10A1F, 0x10A20, 0x10A21, 0x10A22, 0x10A23, 0x10A24, 0x10A25,
	      0x10A26, 0x10A27, 0x10A28, 0x10A29, 0x10A2A, 0x10A2B, 0x10A2C, 0x10A2D,
	      0x10A2E, 0x10A2F, 0x10A30, 0x10A31, 0x10A32, 0x10A33, 0x10A40, 0x10A41,
	      0x10A42, 0x10A43, 0x10A44, 0x10A45, 0x10A46, 0x10A47, 0x10A50, 0x10A51,
	      0x10A52, 0x10A53, 0x10A54, 0x10A55, 0x10A56, 0x10A57, 0x10A58, 0x10A60,
	      0x10A61, 0x10A62, 0x10A63, 0x10A64, 0x10A65, 0x10A66, 0x10A67, 0x10A68,
	      0x10A69, 0x10A6A, 0x10A6B, 0x10A6C, 0x10A6D, 0x10A6E, 0x10A6F, 0x10A70,
	      0x10A71, 0x10A72, 0x10A73, 0x10A74, 0x10A75, 0x10A76, 0x10A77, 0x10A78,
	      0x10A79, 0x10A7A, 0x10A7B, 0x10A7C, 0x10A7D, 0x10A7E, 0x10A7F, 0x10B00,
	      0x10B01, 0x10B02, 0x10B03, 0x10B04, 0x10B05, 0x10B06, 0x10B07, 0x10B08,
	      0x10B09, 0x10B0A, 0x10B0B, 0x10B0C, 0x10B0D, 0x10B0E, 0x10B0F, 0x10B10,
	      0x10B11, 0x10B12, 0x10B13, 0x10B14, 0x10B15, 0x10B16, 0x10B17, 0x10B18,
	      0x10B19, 0x10B1A, 0x10B1B, 0x10B1C, 0x10B1D, 0x10B1E, 0x10B1F, 0x10B20,
	      0x10B21, 0x10B22, 0x10B23, 0x10B24, 0x10B25, 0x10B26, 0x10B27, 0x10B28,
	      0x10B29, 0x10B2A, 0x10B2B, 0x10B2C, 0x10B2D, 0x10B2E, 0x10B2F, 0x10B30,
	      0x10B31, 0x10B32, 0x10B33, 0x10B34, 0x10B35, 0x10B40, 0x10B41, 0x10B42,
	      0x10B43, 0x10B44, 0x10B45, 0x10B46, 0x10B47, 0x10B48, 0x10B49, 0x10B4A,
	      0x10B4B, 0x10B4C, 0x10B4D, 0x10B4E, 0x10B4F, 0x10B50, 0x10B51, 0x10B52,
	      0x10B53, 0x10B54, 0x10B55, 0x10B58, 0x10B59, 0x10B5A, 0x10B5B, 0x10B5C,
	      0x10B5D, 0x10B5E, 0x10B5F, 0x10B60, 0x10B61, 0x10B62, 0x10B63, 0x10B64,
	      0x10B65, 0x10B66, 0x10B67, 0x10B68, 0x10B69, 0x10B6A, 0x10B6B, 0x10B6C,
	      0x10B6D, 0x10B6E, 0x10B6F, 0x10B70, 0x10B71, 0x10B72, 0x10B78, 0x10B79,
	      0x10B7A, 0x10B7B, 0x10B7C, 0x10B7D, 0x10B7E, 0x10B7F, 0x10C00, 0x10C01,
	      0x10C02, 0x10C03, 0x10C04, 0x10C05, 0x10C06, 0x10C07, 0x10C08, 0x10C09,
	      0x10C0A, 0x10C0B, 0x10C0C, 0x10C0D, 0x10C0E, 0x10C0F, 0x10C10, 0x10C11,
	      0x10C12, 0x10C13, 0x10C14, 0x10C15, 0x10C16, 0x10C17, 0x10C18, 0x10C19,
	      0x10C1A, 0x10C1B, 0x10C1C, 0x10C1D, 0x10C1E, 0x10C1F, 0x10C20, 0x10C21,
	      0x10C22, 0x10C23, 0x10C24, 0x10C25, 0x10C26, 0x10C27, 0x10C28, 0x10C29,
	      0x10C2A, 0x10C2B, 0x10C2C, 0x10C2D, 0x10C2E, 0x10C2F, 0x10C30, 0x10C31,
	      0x10C32, 0x10C33, 0x10C34, 0x10C35, 0x10C36, 0x10C37, 0x10C38, 0x10C39,
	      0x10C3A, 0x10C3B, 0x10C3C, 0x10C3D, 0x10C3E, 0x10C3F, 0x10C40, 0x10C41,
	      0x10C42, 0x10C43, 0x10C44, 0x10C45, 0x10C46, 0x10C47, 0x10C48, 0x1EE00,
	      0x1EE01, 0x1EE02, 0x1EE03, 0x1EE05, 0x1EE06, 0x1EE07, 0x1EE08, 0x1EE09,
	      0x1EE0A, 0x1EE0B, 0x1EE0C, 0x1EE0D, 0x1EE0E, 0x1EE0F, 0x1EE10, 0x1EE11,
	      0x1EE12, 0x1EE13, 0x1EE14, 0x1EE15, 0x1EE16, 0x1EE17, 0x1EE18, 0x1EE19,
	      0x1EE1A, 0x1EE1B, 0x1EE1C, 0x1EE1D, 0x1EE1E, 0x1EE1F, 0x1EE21, 0x1EE22,
	      0x1EE24, 0x1EE27, 0x1EE29, 0x1EE2A, 0x1EE2B, 0x1EE2C, 0x1EE2D, 0x1EE2E,
	      0x1EE2F, 0x1EE30, 0x1EE31, 0x1EE32, 0x1EE34, 0x1EE35, 0x1EE36, 0x1EE37,
	      0x1EE39, 0x1EE3B, 0x1EE42, 0x1EE47, 0x1EE49, 0x1EE4B, 0x1EE4D, 0x1EE4E,
	      0x1EE4F, 0x1EE51, 0x1EE52, 0x1EE54, 0x1EE57, 0x1EE59, 0x1EE5B, 0x1EE5D,
	      0x1EE5F, 0x1EE61, 0x1EE62, 0x1EE64, 0x1EE67, 0x1EE68, 0x1EE69, 0x1EE6A,
	      0x1EE6C, 0x1EE6D, 0x1EE6E, 0x1EE6F, 0x1EE70, 0x1EE71, 0x1EE72, 0x1EE74,
	      0x1EE75, 0x1EE76, 0x1EE77, 0x1EE79, 0x1EE7A, 0x1EE7B, 0x1EE7C, 0x1EE7E,
	      0x1EE80, 0x1EE81, 0x1EE82, 0x1EE83, 0x1EE84, 0x1EE85, 0x1EE86, 0x1EE87,
	      0x1EE88, 0x1EE89, 0x1EE8B, 0x1EE8C, 0x1EE8D, 0x1EE8E, 0x1EE8F, 0x1EE90,
	      0x1EE91, 0x1EE92, 0x1EE93, 0x1EE94, 0x1EE95, 0x1EE96, 0x1EE97, 0x1EE98,
	      0x1EE99, 0x1EE9A, 0x1EE9B, 0x1EEA1, 0x1EEA2, 0x1EEA3, 0x1EEA5, 0x1EEA6,
	      0x1EEA7, 0x1EEA8, 0x1EEA9, 0x1EEAB, 0x1EEAC, 0x1EEAD, 0x1EEAE, 0x1EEAF,
	      0x1EEB0, 0x1EEB1, 0x1EEB2, 0x1EEB3, 0x1EEB4, 0x1EEB5, 0x1EEB6, 0x1EEB7,
	      0x1EEB8, 0x1EEB9, 0x1EEBA, 0x1EEBB, 0x10FFFD];
	
	  function determineBidi(cueDiv) {
	    var nodeStack = [],
	        text = "",
	        charCode;
	
	    if (!cueDiv || !cueDiv.childNodes) {
	      return "ltr";
	    }
	
	    function pushNodes(nodeStack, node) {
	      for (var i = node.childNodes.length - 1; i >= 0; i--) {
	        nodeStack.push(node.childNodes[i]);
	      }
	    }
	
	    function nextTextNode(nodeStack) {
	      if (!nodeStack || !nodeStack.length) {
	        return null;
	      }
	
	      var node = nodeStack.pop(),
	          text = node.textContent || node.innerText;
	      if (text) {
	        // TODO: This should match all unicode type B characters (paragraph
	        // separator characters). See issue #115.
	        var m = text.match(/^.*(\n|\r)/);
	        if (m) {
	          nodeStack.length = 0;
	          return m[0];
	        }
	        return text;
	      }
	      if (node.tagName === "ruby") {
	        return nextTextNode(nodeStack);
	      }
	      if (node.childNodes) {
	        pushNodes(nodeStack, node);
	        return nextTextNode(nodeStack);
	      }
	    }
	
	    pushNodes(nodeStack, cueDiv);
	    while ((text = nextTextNode(nodeStack))) {
	      for (var i = 0; i < text.length; i++) {
	        charCode = text.charCodeAt(i);
	        for (var j = 0; j < strongRTLChars.length; j++) {
	          if (strongRTLChars[j] === charCode) {
	            return "rtl";
	          }
	        }
	      }
	    }
	    return "ltr";
	  }
	
	  function computeLinePos(cue) {
	    if (typeof cue.line === "number" &&
	        (cue.snapToLines || (cue.line >= 0 && cue.line <= 100))) {
	      return cue.line;
	    }
	    if (!cue.track || !cue.track.textTrackList ||
	        !cue.track.textTrackList.mediaElement) {
	      return -1;
	    }
	    var track = cue.track,
	        trackList = track.textTrackList,
	        count = 0;
	    for (var i = 0; i < trackList.length && trackList[i] !== track; i++) {
	      if (trackList[i].mode === "showing") {
	        count++;
	      }
	    }
	    return ++count * -1;
	  }
	
	  function StyleBox() {
	  }
	
	  // Apply styles to a div. If there is no div passed then it defaults to the
	  // div on 'this'.
	  StyleBox.prototype.applyStyles = function(styles, div) {
	    div = div || this.div;
	    for (var prop in styles) {
	      if (styles.hasOwnProperty(prop)) {
	        div.style[prop] = styles[prop];
	      }
	    }
	  };
	
	  StyleBox.prototype.formatStyle = function(val, unit) {
	    return val === 0 ? 0 : val + unit;
	  };
	
	  // Constructs the computed display state of the cue (a div). Places the div
	  // into the overlay which should be a block level element (usually a div).
	  function CueStyleBox(window, cue, styleOptions) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	    var color = "rgba(255, 255, 255, 1)";
	    var backgroundColor = "rgba(0, 0, 0, 0.8)";
	
	    if (isIE8) {
	      color = "rgb(255, 255, 255)";
	      backgroundColor = "rgb(0, 0, 0)";
	    }
	
	    StyleBox.call(this);
	    this.cue = cue;
	
	    // Parse our cue's text into a DOM tree rooted at 'cueDiv'. This div will
	    // have inline positioning and will function as the cue background box.
	    this.cueDiv = parseContent(window, cue.text);
	    var styles = {
	      color: color,
	      backgroundColor: backgroundColor,
	      position: "relative",
	      left: 0,
	      right: 0,
	      top: 0,
	      bottom: 0,
	      display: "inline"
	    };
	
	    if (!isIE8) {
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl";
	      styles.unicodeBidi = "plaintext";
	    }
	    this.applyStyles(styles, this.cueDiv);
	
	    // Create an absolutely positioned div that will be used to position the cue
	    // div. Note, all WebVTT cue-setting alignments are equivalent to the CSS
	    // mirrors of them except "middle" which is "center" in CSS.
	    this.div = window.document.createElement("div");
	    styles = {
	      textAlign: cue.align === "middle" ? "center" : cue.align,
	      font: styleOptions.font,
	      whiteSpace: "pre-line",
	      position: "absolute"
	    };
	
	    if (!isIE8) {
	      styles.direction = determineBidi(this.cueDiv);
	      styles.writingMode = cue.vertical === "" ? "horizontal-tb"
	                                               : cue.vertical === "lr" ? "vertical-lr"
	                                                                       : "vertical-rl".
	      stylesunicodeBidi =  "plaintext";
	    }
	
	    this.applyStyles(styles);
	
	    this.div.appendChild(this.cueDiv);
	
	    // Calculate the distance from the reference edge of the viewport to the text
	    // position of the cue box. The reference edge will be resolved later when
	    // the box orientation styles are applied.
	    var textPos = 0;
	    switch (cue.positionAlign) {
	    case "start":
	      textPos = cue.position;
	      break;
	    case "middle":
	      textPos = cue.position - (cue.size / 2);
	      break;
	    case "end":
	      textPos = cue.position - cue.size;
	      break;
	    }
	
	    // Horizontal box orientation; textPos is the distance from the left edge of the
	    // area to the left edge of the box and cue.size is the distance extending to
	    // the right from there.
	    if (cue.vertical === "") {
	      this.applyStyles({
	        left:  this.formatStyle(textPos, "%"),
	        width: this.formatStyle(cue.size, "%")
	      });
	    // Vertical box orientation; textPos is the distance from the top edge of the
	    // area to the top edge of the box and cue.size is the height extending
	    // downwards from there.
	    } else {
	      this.applyStyles({
	        top: this.formatStyle(textPos, "%"),
	        height: this.formatStyle(cue.size, "%")
	      });
	    }
	
	    this.move = function(box) {
	      this.applyStyles({
	        top: this.formatStyle(box.top, "px"),
	        bottom: this.formatStyle(box.bottom, "px"),
	        left: this.formatStyle(box.left, "px"),
	        right: this.formatStyle(box.right, "px"),
	        height: this.formatStyle(box.height, "px"),
	        width: this.formatStyle(box.width, "px")
	      });
	    };
	  }
	  CueStyleBox.prototype = _objCreate(StyleBox.prototype);
	  CueStyleBox.prototype.constructor = CueStyleBox;
	
	  // Represents the co-ordinates of an Element in a way that we can easily
	  // compute things with such as if it overlaps or intersects with another Element.
	  // Can initialize it with either a StyleBox or another BoxPosition.
	  function BoxPosition(obj) {
	    var isIE8 = (/MSIE\s8\.0/).test(navigator.userAgent);
	
	    // Either a BoxPosition was passed in and we need to copy it, or a StyleBox
	    // was passed in and we need to copy the results of 'getBoundingClientRect'
	    // as the object returned is readonly. All co-ordinate values are in reference
	    // to the viewport origin (top left).
	    var lh, height, width, top;
	    if (obj.div) {
	      height = obj.div.offsetHeight;
	      width = obj.div.offsetWidth;
	      top = obj.div.offsetTop;
	
	      var rects = (rects = obj.div.childNodes) && (rects = rects[0]) &&
	                  rects.getClientRects && rects.getClientRects();
	      obj = obj.div.getBoundingClientRect();
	      // In certain cases the outter div will be slightly larger then the sum of
	      // the inner div's lines. This could be due to bold text, etc, on some platforms.
	      // In this case we should get the average line height and use that. This will
	      // result in the desired behaviour.
	      lh = rects ? Math.max((rects[0] && rects[0].height) || 0, obj.height / rects.length)
	                 : 0;
	
	    }
	    this.left = obj.left;
	    this.right = obj.right;
	    this.top = obj.top || top;
	    this.height = obj.height || height;
	    this.bottom = obj.bottom || (top + (obj.height || height));
	    this.width = obj.width || width;
	    this.lineHeight = lh !== undefined ? lh : obj.lineHeight;
	
	    if (isIE8 && !this.lineHeight) {
	      this.lineHeight = 13;
	    }
	  }
	
	  // Move the box along a particular axis. Optionally pass in an amount to move
	  // the box. If no amount is passed then the default is the line height of the
	  // box.
	  BoxPosition.prototype.move = function(axis, toMove) {
	    toMove = toMove !== undefined ? toMove : this.lineHeight;
	    switch (axis) {
	    case "+x":
	      this.left += toMove;
	      this.right += toMove;
	      break;
	    case "-x":
	      this.left -= toMove;
	      this.right -= toMove;
	      break;
	    case "+y":
	      this.top += toMove;
	      this.bottom += toMove;
	      break;
	    case "-y":
	      this.top -= toMove;
	      this.bottom -= toMove;
	      break;
	    }
	  };
	
	  // Check if this box overlaps another box, b2.
	  BoxPosition.prototype.overlaps = function(b2) {
	    return this.left < b2.right &&
	           this.right > b2.left &&
	           this.top < b2.bottom &&
	           this.bottom > b2.top;
	  };
	
	  // Check if this box overlaps any other boxes in boxes.
	  BoxPosition.prototype.overlapsAny = function(boxes) {
	    for (var i = 0; i < boxes.length; i++) {
	      if (this.overlaps(boxes[i])) {
	        return true;
	      }
	    }
	    return false;
	  };
	
	  // Check if this box is within another box.
	  BoxPosition.prototype.within = function(container) {
	    return this.top >= container.top &&
	           this.bottom <= container.bottom &&
	           this.left >= container.left &&
	           this.right <= container.right;
	  };
	
	  // Check if this box is entirely within the container or it is overlapping
	  // on the edge opposite of the axis direction passed. For example, if "+x" is
	  // passed and the box is overlapping on the left edge of the container, then
	  // return true.
	  BoxPosition.prototype.overlapsOppositeAxis = function(container, axis) {
	    switch (axis) {
	    case "+x":
	      return this.left < container.left;
	    case "-x":
	      return this.right > container.right;
	    case "+y":
	      return this.top < container.top;
	    case "-y":
	      return this.bottom > container.bottom;
	    }
	  };
	
	  // Find the percentage of the area that this box is overlapping with another
	  // box.
	  BoxPosition.prototype.intersectPercentage = function(b2) {
	    var x = Math.max(0, Math.min(this.right, b2.right) - Math.max(this.left, b2.left)),
	        y = Math.max(0, Math.min(this.bottom, b2.bottom) - Math.max(this.top, b2.top)),
	        intersectArea = x * y;
	    return intersectArea / (this.height * this.width);
	  };
	
	  // Convert the positions from this box to CSS compatible positions using
	  // the reference container's positions. This has to be done because this
	  // box's positions are in reference to the viewport origin, whereas, CSS
	  // values are in referecne to their respective edges.
	  BoxPosition.prototype.toCSSCompatValues = function(reference) {
	    return {
	      top: this.top - reference.top,
	      bottom: reference.bottom - this.bottom,
	      left: this.left - reference.left,
	      right: reference.right - this.right,
	      height: this.height,
	      width: this.width
	    };
	  };
	
	  // Get an object that represents the box's position without anything extra.
	  // Can pass a StyleBox, HTMLElement, or another BoxPositon.
	  BoxPosition.getSimpleBoxPosition = function(obj) {
	    var height = obj.div ? obj.div.offsetHeight : obj.tagName ? obj.offsetHeight : 0;
	    var width = obj.div ? obj.div.offsetWidth : obj.tagName ? obj.offsetWidth : 0;
	    var top = obj.div ? obj.div.offsetTop : obj.tagName ? obj.offsetTop : 0;
	
	    obj = obj.div ? obj.div.getBoundingClientRect() :
	                  obj.tagName ? obj.getBoundingClientRect() : obj;
	    var ret = {
	      left: obj.left,
	      right: obj.right,
	      top: obj.top || top,
	      height: obj.height || height,
	      bottom: obj.bottom || (top + (obj.height || height)),
	      width: obj.width || width
	    };
	    return ret;
	  };
	
	  // Move a StyleBox to its specified, or next best, position. The containerBox
	  // is the box that contains the StyleBox, such as a div. boxPositions are
	  // a list of other boxes that the styleBox can't overlap with.
	  function moveBoxToLinePosition(window, styleBox, containerBox, boxPositions) {
	
	    // Find the best position for a cue box, b, on the video. The axis parameter
	    // is a list of axis, the order of which, it will move the box along. For example:
	    // Passing ["+x", "-x"] will move the box first along the x axis in the positive
	    // direction. If it doesn't find a good position for it there it will then move
	    // it along the x axis in the negative direction.
	    function findBestPosition(b, axis) {
	      var bestPosition,
	          specifiedPosition = new BoxPosition(b),
	          percentage = 1; // Highest possible so the first thing we get is better.
	
	      for (var i = 0; i < axis.length; i++) {
	        while (b.overlapsOppositeAxis(containerBox, axis[i]) ||
	               (b.within(containerBox) && b.overlapsAny(boxPositions))) {
	          b.move(axis[i]);
	        }
	        // We found a spot where we aren't overlapping anything. This is our
	        // best position.
	        if (b.within(containerBox)) {
	          return b;
	        }
	        var p = b.intersectPercentage(containerBox);
	        // If we're outside the container box less then we were on our last try
	        // then remember this position as the best position.
	        if (percentage > p) {
	          bestPosition = new BoxPosition(b);
	          percentage = p;
	        }
	        // Reset the box position to the specified position.
	        b = new BoxPosition(specifiedPosition);
	      }
	      return bestPosition || specifiedPosition;
	    }
	
	    var boxPosition = new BoxPosition(styleBox),
	        cue = styleBox.cue,
	        linePos = computeLinePos(cue),
	        axis = [];
	
	    // If we have a line number to align the cue to.
	    if (cue.snapToLines) {
	      var size;
	      switch (cue.vertical) {
	      case "":
	        axis = [ "+y", "-y" ];
	        size = "height";
	        break;
	      case "rl":
	        axis = [ "+x", "-x" ];
	        size = "width";
	        break;
	      case "lr":
	        axis = [ "-x", "+x" ];
	        size = "width";
	        break;
	      }
	
	      var step = boxPosition.lineHeight,
	          position = step * Math.round(linePos),
	          maxPosition = containerBox[size] + step,
	          initialAxis = axis[0];
	
	      // If the specified intial position is greater then the max position then
	      // clamp the box to the amount of steps it would take for the box to
	      // reach the max position.
	      if (Math.abs(position) > maxPosition) {
	        position = position < 0 ? -1 : 1;
	        position *= Math.ceil(maxPosition / step) * step;
	      }
	
	      // If computed line position returns negative then line numbers are
	      // relative to the bottom of the video instead of the top. Therefore, we
	      // need to increase our initial position by the length or width of the
	      // video, depending on the writing direction, and reverse our axis directions.
	      if (linePos < 0) {
	        position += cue.vertical === "" ? containerBox.height : containerBox.width;
	        axis = axis.reverse();
	      }
	
	      // Move the box to the specified position. This may not be its best
	      // position.
	      boxPosition.move(initialAxis, position);
	
	    } else {
	      // If we have a percentage line value for the cue.
	      var calculatedPercentage = (boxPosition.lineHeight / containerBox.height) * 100;
	
	      switch (cue.lineAlign) {
	      case "middle":
	        linePos -= (calculatedPercentage / 2);
	        break;
	      case "end":
	        linePos -= calculatedPercentage;
	        break;
	      }
	
	      // Apply initial line position to the cue box.
	      switch (cue.vertical) {
	      case "":
	        styleBox.applyStyles({
	          top: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "rl":
	        styleBox.applyStyles({
	          left: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      case "lr":
	        styleBox.applyStyles({
	          right: styleBox.formatStyle(linePos, "%")
	        });
	        break;
	      }
	
	      axis = [ "+y", "-x", "+x", "-y" ];
	
	      // Get the box position again after we've applied the specified positioning
	      // to it.
	      boxPosition = new BoxPosition(styleBox);
	    }
	
	    var bestPosition = findBestPosition(boxPosition, axis);
	    styleBox.move(bestPosition.toCSSCompatValues(containerBox));
	  }
	
	  function WebVTT() {
	    // Nothing
	  }
	
	  // Helper to allow strings to be decoded instead of the default binary utf8 data.
	  WebVTT.StringDecoder = function() {
	    return {
	      decode: function(data) {
	        if (!data) {
	          return "";
	        }
	        if (typeof data !== "string") {
	          throw new Error("Error - expected string data.");
	        }
	        return decodeURIComponent(encodeURIComponent(data));
	      }
	    };
	  };
	
	  WebVTT.convertCueToDOMTree = function(window, cuetext) {
	    if (!window || !cuetext) {
	      return null;
	    }
	    return parseContent(window, cuetext);
	  };
	
	  var FONT_SIZE_PERCENT = 0.05;
	  var FONT_STYLE = "sans-serif";
	  var CUE_BACKGROUND_PADDING = "1.5%";
	
	  // Runs the processing model over the cues and regions passed to it.
	  // @param overlay A block level element (usually a div) that the computed cues
	  //                and regions will be placed into.
	  WebVTT.processCues = function(window, cues, overlay) {
	    if (!window || !cues || !overlay) {
	      return null;
	    }
	
	    // Remove all previous children.
	    while (overlay.firstChild) {
	      overlay.removeChild(overlay.firstChild);
	    }
	
	    var paddedOverlay = window.document.createElement("div");
	    paddedOverlay.style.position = "absolute";
	    paddedOverlay.style.left = "0";
	    paddedOverlay.style.right = "0";
	    paddedOverlay.style.top = "0";
	    paddedOverlay.style.bottom = "0";
	    paddedOverlay.style.margin = CUE_BACKGROUND_PADDING;
	    overlay.appendChild(paddedOverlay);
	
	    // Determine if we need to compute the display states of the cues. This could
	    // be the case if a cue's state has been changed since the last computation or
	    // if it has not been computed yet.
	    function shouldCompute(cues) {
	      for (var i = 0; i < cues.length; i++) {
	        if (cues[i].hasBeenReset || !cues[i].displayState) {
	          return true;
	        }
	      }
	      return false;
	    }
	
	    // We don't need to recompute the cues' display states. Just reuse them.
	    if (!shouldCompute(cues)) {
	      for (var i = 0; i < cues.length; i++) {
	        paddedOverlay.appendChild(cues[i].displayState);
	      }
	      return;
	    }
	
	    var boxPositions = [],
	        containerBox = BoxPosition.getSimpleBoxPosition(paddedOverlay),
	        fontSize = Math.round(containerBox.height * FONT_SIZE_PERCENT * 100) / 100;
	    var styleOptions = {
	      font: fontSize + "px " + FONT_STYLE
	    };
	
	    (function() {
	      var styleBox, cue;
	
	      for (var i = 0; i < cues.length; i++) {
	        cue = cues[i];
	
	        // Compute the intial position and styles of the cue div.
	        styleBox = new CueStyleBox(window, cue, styleOptions);
	        paddedOverlay.appendChild(styleBox.div);
	
	        // Move the cue div to it's correct line position.
	        moveBoxToLinePosition(window, styleBox, containerBox, boxPositions);
	
	        // Remember the computed div so that we don't have to recompute it later
	        // if we don't have too.
	        cue.displayState = styleBox.div;
	
	        boxPositions.push(BoxPosition.getSimpleBoxPosition(styleBox));
	      }
	    })();
	  };
	
	  WebVTT.Parser = function(window, vttjs, decoder) {
	    if (!decoder) {
	      decoder = vttjs;
	      vttjs = {};
	    }
	    if (!vttjs) {
	      vttjs = {};
	    }
	
	    this.window = window;
	    this.vttjs = vttjs;
	    this.state = "INITIAL";
	    this.buffer = "";
	    this.decoder = decoder || new TextDecoder("utf8");
	    this.regionList = [];
	  };
	
	  WebVTT.Parser.prototype = {
	    // If the error is a ParsingError then report it to the consumer if
	    // possible. If it's not a ParsingError then throw it like normal.
	    reportOrThrowError: function(e) {
	      if (e instanceof ParsingError) {
	        this.onparsingerror && this.onparsingerror(e);
	      } else {
	        throw e;
	      }
	    },
	    parse: function (data) {
	      var self = this;
	
	      // If there is no data then we won't decode it, but will just try to parse
	      // whatever is in buffer already. This may occur in circumstances, for
	      // example when flush() is called.
	      if (data) {
	        // Try to decode the data that we received.
	        self.buffer += self.decoder.decode(data, {stream: true});
	      }
	
	      function collectNextLine() {
	        var buffer = self.buffer;
	        var pos = 0;
	        while (pos < buffer.length && buffer[pos] !== '\r' && buffer[pos] !== '\n') {
	          ++pos;
	        }
	        var line = buffer.substr(0, pos);
	        // Advance the buffer early in case we fail below.
	        if (buffer[pos] === '\r') {
	          ++pos;
	        }
	        if (buffer[pos] === '\n') {
	          ++pos;
	        }
	        self.buffer = buffer.substr(pos);
	        return line;
	      }
	
	      // 3.4 WebVTT region and WebVTT region settings syntax
	      function parseRegion(input) {
	        var settings = new Settings();
	
	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "id":
	            settings.set(k, v);
	            break;
	          case "width":
	            settings.percent(k, v);
	            break;
	          case "lines":
	            settings.integer(k, v);
	            break;
	          case "regionanchor":
	          case "viewportanchor":
	            var xy = v.split(',');
	            if (xy.length !== 2) {
	              break;
	            }
	            // We have to make sure both x and y parse, so use a temporary
	            // settings object here.
	            var anchor = new Settings();
	            anchor.percent("x", xy[0]);
	            anchor.percent("y", xy[1]);
	            if (!anchor.has("x") || !anchor.has("y")) {
	              break;
	            }
	            settings.set(k + "X", anchor.get("x"));
	            settings.set(k + "Y", anchor.get("y"));
	            break;
	          case "scroll":
	            settings.alt(k, v, ["up"]);
	            break;
	          }
	        }, /=/, /\s/);
	
	        // Create the region, using default values for any values that were not
	        // specified.
	        if (settings.has("id")) {
	          var region = new (self.vttjs.VTTRegion || self.window.VTTRegion)();
	          region.width = settings.get("width", 100);
	          region.lines = settings.get("lines", 3);
	          region.regionAnchorX = settings.get("regionanchorX", 0);
	          region.regionAnchorY = settings.get("regionanchorY", 100);
	          region.viewportAnchorX = settings.get("viewportanchorX", 0);
	          region.viewportAnchorY = settings.get("viewportanchorY", 100);
	          region.scroll = settings.get("scroll", "");
	          // Register the region.
	          self.onregion && self.onregion(region);
	          // Remember the VTTRegion for later in case we parse any VTTCues that
	          // reference it.
	          self.regionList.push({
	            id: settings.get("id"),
	            region: region
	          });
	        }
	      }
	
	      // 3.2 WebVTT metadata header syntax
	      function parseHeader(input) {
	        parseOptions(input, function (k, v) {
	          switch (k) {
	          case "Region":
	            // 3.3 WebVTT region metadata header syntax
	            parseRegion(v);
	            break;
	          }
	        }, /:/);
	      }
	
	      // 5.1 WebVTT file parsing.
	      try {
	        var line;
	        if (self.state === "INITIAL") {
	          // We can't start parsing until we have the first line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }
	
	          line = collectNextLine();
	
	          var m = line.match(/^WEBVTT([ \t].*)?$/);
	          if (!m || !m[0]) {
	            throw new ParsingError(ParsingError.Errors.BadSignature);
	          }
	
	          self.state = "HEADER";
	        }
	
	        var alreadyCollectedLine = false;
	        while (self.buffer) {
	          // We can't parse a line until we have the full line.
	          if (!/\r\n|\n/.test(self.buffer)) {
	            return this;
	          }
	
	          if (!alreadyCollectedLine) {
	            line = collectNextLine();
	          } else {
	            alreadyCollectedLine = false;
	          }
	
	          switch (self.state) {
	          case "HEADER":
	            // 13-18 - Allow a header (metadata) under the WEBVTT line.
	            if (/:/.test(line)) {
	              parseHeader(line);
	            } else if (!line) {
	              // An empty line terminates the header and starts the body (cues).
	              self.state = "ID";
	            }
	            continue;
	          case "NOTE":
	            // Ignore NOTE blocks.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          case "ID":
	            // Check for the start of NOTE blocks.
	            if (/^NOTE($|[ \t])/.test(line)) {
	              self.state = "NOTE";
	              break;
	            }
	            // 19-29 - Allow any number of line terminators, then initialize new cue values.
	            if (!line) {
	              continue;
	            }
	            self.cue = new (self.vttjs.VTTCue || self.window.VTTCue)(0, 0, "");
	            self.state = "CUE";
	            // 30-39 - Check if self line contains an optional identifier or timing data.
	            if (line.indexOf("-->") === -1) {
	              self.cue.id = line;
	              continue;
	            }
	            // Process line as start of a cue.
	            /*falls through*/
	          case "CUE":
	            // 40 - Collect cue timings and settings.
	            try {
	              parseCue(line, self.cue, self.regionList);
	            } catch (e) {
	              self.reportOrThrowError(e);
	              // In case of an error ignore rest of the cue.
	              self.cue = null;
	              self.state = "BADCUE";
	              continue;
	            }
	            self.state = "CUETEXT";
	            continue;
	          case "CUETEXT":
	            var hasSubstring = line.indexOf("-->") !== -1;
	            // 34 - If we have an empty line then report the cue.
	            // 35 - If we have the special substring '-->' then report the cue,
	            // but do not collect the line as we need to process the current
	            // one as a new cue.
	            if (!line || hasSubstring && (alreadyCollectedLine = true)) {
	              // We are done parsing self cue.
	              self.oncue && self.oncue(self.cue);
	              self.cue = null;
	              self.state = "ID";
	              continue;
	            }
	            if (self.cue.text) {
	              self.cue.text += "\n";
	            }
	            self.cue.text += line;
	            continue;
	          case "BADCUE": // BADCUE
	            // 54-62 - Collect and discard the remaining cue.
	            if (!line) {
	              self.state = "ID";
	            }
	            continue;
	          }
	        }
	      } catch (e) {
	        self.reportOrThrowError(e);
	
	        // If we are currently parsing a cue, report what we have.
	        if (self.state === "CUETEXT" && self.cue && self.oncue) {
	          self.oncue(self.cue);
	        }
	        self.cue = null;
	        // Enter BADWEBVTT state if header was not parsed correctly otherwise
	        // another exception occurred so enter BADCUE state.
	        self.state = self.state === "INITIAL" ? "BADWEBVTT" : "BADCUE";
	      }
	      return this;
	    },
	    flush: function () {
	      var self = this;
	      try {
	        // Finish decoding the stream.
	        self.buffer += self.decoder.decode();
	        // Synthesize the end of the current cue or region.
	        if (self.cue || self.state === "HEADER") {
	          self.buffer += "\n\n";
	          self.parse();
	        }
	        // If we've flushed, parsed, and we're still on the INITIAL state then
	        // that means we don't have enough of the stream to parse the first
	        // line.
	        if (self.state === "INITIAL") {
	          throw new ParsingError(ParsingError.Errors.BadSignature);
	        }
	      } catch(e) {
	        self.reportOrThrowError(e);
	      }
	      self.onflush && self.onflush();
	      return this;
	    }
	  };
	
	  global.WebVTT = WebVTT;
	
	}(this, (this.vttjs || {})));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;!function() {
	  var d3 = {
	    version: "3.5.17"
	  };
	  var d3_arraySlice = [].slice, d3_array = function(list) {
	    return d3_arraySlice.call(list);
	  };
	  var d3_document = this.document;
	  function d3_documentElement(node) {
	    return node && (node.ownerDocument || node.document || node).documentElement;
	  }
	  function d3_window(node) {
	    return node && (node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView);
	  }
	  if (d3_document) {
	    try {
	      d3_array(d3_document.documentElement.childNodes)[0].nodeType;
	    } catch (e) {
	      d3_array = function(list) {
	        var i = list.length, array = new Array(i);
	        while (i--) array[i] = list[i];
	        return array;
	      };
	    }
	  }
	  if (!Date.now) Date.now = function() {
	    return +new Date();
	  };
	  if (d3_document) {
	    try {
	      d3_document.createElement("DIV").style.setProperty("opacity", 0, "");
	    } catch (error) {
	      var d3_element_prototype = this.Element.prototype, d3_element_setAttribute = d3_element_prototype.setAttribute, d3_element_setAttributeNS = d3_element_prototype.setAttributeNS, d3_style_prototype = this.CSSStyleDeclaration.prototype, d3_style_setProperty = d3_style_prototype.setProperty;
	      d3_element_prototype.setAttribute = function(name, value) {
	        d3_element_setAttribute.call(this, name, value + "");
	      };
	      d3_element_prototype.setAttributeNS = function(space, local, value) {
	        d3_element_setAttributeNS.call(this, space, local, value + "");
	      };
	      d3_style_prototype.setProperty = function(name, value, priority) {
	        d3_style_setProperty.call(this, name, value + "", priority);
	      };
	    }
	  }
	  d3.ascending = d3_ascending;
	  function d3_ascending(a, b) {
	    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	  }
	  d3.descending = function(a, b) {
	    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	  };
	  d3.min = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && a > b) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && a > b) a = b;
	    }
	    return a;
	  };
	  d3.max = function(array, f) {
	    var i = -1, n = array.length, a, b;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null && b > a) a = b;
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b > a) a = b;
	    }
	    return a;
	  };
	  d3.extent = function(array, f) {
	    var i = -1, n = array.length, a, b, c;
	    if (arguments.length === 1) {
	      while (++i < n) if ((b = array[i]) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = array[i]) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    } else {
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null && b >= b) {
	        a = c = b;
	        break;
	      }
	      while (++i < n) if ((b = f.call(array, array[i], i)) != null) {
	        if (a > b) a = b;
	        if (c < b) c = b;
	      }
	    }
	    return [ a, c ];
	  };
	  function d3_number(x) {
	    return x === null ? NaN : +x;
	  }
	  function d3_numeric(x) {
	    return !isNaN(x);
	  }
	  d3.sum = function(array, f) {
	    var s = 0, n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = +array[i])) s += a;
	    } else {
	      while (++i < n) if (d3_numeric(a = +f.call(array, array[i], i))) s += a;
	    }
	    return s;
	  };
	  d3.mean = function(array, f) {
	    var s = 0, n = array.length, a, i = -1, j = n;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) s += a; else --j;
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) s += a; else --j;
	    }
	    if (j) return s / j;
	  };
	  d3.quantile = function(values, p) {
	    var H = (values.length - 1) * p + 1, h = Math.floor(H), v = +values[h - 1], e = H - h;
	    return e ? v + e * (values[h] - v) : v;
	  };
	  d3.median = function(array, f) {
	    var numbers = [], n = array.length, a, i = -1;
	    if (arguments.length === 1) {
	      while (++i < n) if (d3_numeric(a = d3_number(array[i]))) numbers.push(a);
	    } else {
	      while (++i < n) if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) numbers.push(a);
	    }
	    if (numbers.length) return d3.quantile(numbers.sort(d3_ascending), .5);
	  };
	  d3.variance = function(array, f) {
	    var n = array.length, m = 0, a, d, s = 0, i = -1, j = 0;
	    if (arguments.length === 1) {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(array[i]))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    } else {
	      while (++i < n) {
	        if (d3_numeric(a = d3_number(f.call(array, array[i], i)))) {
	          d = a - m;
	          m += d / ++j;
	          s += d * (a - m);
	        }
	      }
	    }
	    if (j > 1) return s / (j - 1);
	  };
	  d3.deviation = function() {
	    var v = d3.variance.apply(this, arguments);
	    return v ? Math.sqrt(v) : v;
	  };
	  function d3_bisector(compare) {
	    return {
	      left: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) < 0) lo = mid + 1; else hi = mid;
	        }
	        return lo;
	      },
	      right: function(a, x, lo, hi) {
	        if (arguments.length < 3) lo = 0;
	        if (arguments.length < 4) hi = a.length;
	        while (lo < hi) {
	          var mid = lo + hi >>> 1;
	          if (compare(a[mid], x) > 0) hi = mid; else lo = mid + 1;
	        }
	        return lo;
	      }
	    };
	  }
	  var d3_bisect = d3_bisector(d3_ascending);
	  d3.bisectLeft = d3_bisect.left;
	  d3.bisect = d3.bisectRight = d3_bisect.right;
	  d3.bisector = function(f) {
	    return d3_bisector(f.length === 1 ? function(d, x) {
	      return d3_ascending(f(d), x);
	    } : f);
	  };
	  d3.shuffle = function(array, i0, i1) {
	    if ((m = arguments.length) < 3) {
	      i1 = array.length;
	      if (m < 2) i0 = 0;
	    }
	    var m = i1 - i0, t, i;
	    while (m) {
	      i = Math.random() * m-- | 0;
	      t = array[m + i0], array[m + i0] = array[i + i0], array[i + i0] = t;
	    }
	    return array;
	  };
	  d3.permute = function(array, indexes) {
	    var i = indexes.length, permutes = new Array(i);
	    while (i--) permutes[i] = array[indexes[i]];
	    return permutes;
	  };
	  d3.pairs = function(array) {
	    var i = 0, n = array.length - 1, p0, p1 = array[0], pairs = new Array(n < 0 ? 0 : n);
	    while (i < n) pairs[i] = [ p0 = p1, p1 = array[++i] ];
	    return pairs;
	  };
	  d3.transpose = function(matrix) {
	    if (!(n = matrix.length)) return [];
	    for (var i = -1, m = d3.min(matrix, d3_transposeLength), transpose = new Array(m); ++i < m; ) {
	      for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n; ) {
	        row[j] = matrix[j][i];
	      }
	    }
	    return transpose;
	  };
	  function d3_transposeLength(d) {
	    return d.length;
	  }
	  d3.zip = function() {
	    return d3.transpose(arguments);
	  };
	  d3.keys = function(map) {
	    var keys = [];
	    for (var key in map) keys.push(key);
	    return keys;
	  };
	  d3.values = function(map) {
	    var values = [];
	    for (var key in map) values.push(map[key]);
	    return values;
	  };
	  d3.entries = function(map) {
	    var entries = [];
	    for (var key in map) entries.push({
	      key: key,
	      value: map[key]
	    });
	    return entries;
	  };
	  d3.merge = function(arrays) {
	    var n = arrays.length, m, i = -1, j = 0, merged, array;
	    while (++i < n) j += arrays[i].length;
	    merged = new Array(j);
	    while (--n >= 0) {
	      array = arrays[n];
	      m = array.length;
	      while (--m >= 0) {
	        merged[--j] = array[m];
	      }
	    }
	    return merged;
	  };
	  var abs = Math.abs;
	  d3.range = function(start, stop, step) {
	    if (arguments.length < 3) {
	      step = 1;
	      if (arguments.length < 2) {
	        stop = start;
	        start = 0;
	      }
	    }
	    if ((stop - start) / step === Infinity) throw new Error("infinite range");
	    var range = [], k = d3_range_integerScale(abs(step)), i = -1, j;
	    start *= k, stop *= k, step *= k;
	    if (step < 0) while ((j = start + step * ++i) > stop) range.push(j / k); else while ((j = start + step * ++i) < stop) range.push(j / k);
	    return range;
	  };
	  function d3_range_integerScale(x) {
	    var k = 1;
	    while (x * k % 1) k *= 10;
	    return k;
	  }
	  function d3_class(ctor, properties) {
	    for (var key in properties) {
	      Object.defineProperty(ctor.prototype, key, {
	        value: properties[key],
	        enumerable: false
	      });
	    }
	  }
	  d3.map = function(object, f) {
	    var map = new d3_Map();
	    if (object instanceof d3_Map) {
	      object.forEach(function(key, value) {
	        map.set(key, value);
	      });
	    } else if (Array.isArray(object)) {
	      var i = -1, n = object.length, o;
	      if (arguments.length === 1) while (++i < n) map.set(i, object[i]); else while (++i < n) map.set(f.call(object, o = object[i], i), o);
	    } else {
	      for (var key in object) map.set(key, object[key]);
	    }
	    return map;
	  };
	  function d3_Map() {
	    this._ = Object.create(null);
	  }
	  var d3_map_proto = "__proto__", d3_map_zero = "\x00";
	  d3_class(d3_Map, {
	    has: d3_map_has,
	    get: function(key) {
	      return this._[d3_map_escape(key)];
	    },
	    set: function(key, value) {
	      return this._[d3_map_escape(key)] = value;
	    },
	    remove: d3_map_remove,
	    keys: d3_map_keys,
	    values: function() {
	      var values = [];
	      for (var key in this._) values.push(this._[key]);
	      return values;
	    },
	    entries: function() {
	      var entries = [];
	      for (var key in this._) entries.push({
	        key: d3_map_unescape(key),
	        value: this._[key]
	      });
	      return entries;
	    },
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key), this._[key]);
	    }
	  });
	  function d3_map_escape(key) {
	    return (key += "") === d3_map_proto || key[0] === d3_map_zero ? d3_map_zero + key : key;
	  }
	  function d3_map_unescape(key) {
	    return (key += "")[0] === d3_map_zero ? key.slice(1) : key;
	  }
	  function d3_map_has(key) {
	    return d3_map_escape(key) in this._;
	  }
	  function d3_map_remove(key) {
	    return (key = d3_map_escape(key)) in this._ && delete this._[key];
	  }
	  function d3_map_keys() {
	    var keys = [];
	    for (var key in this._) keys.push(d3_map_unescape(key));
	    return keys;
	  }
	  function d3_map_size() {
	    var size = 0;
	    for (var key in this._) ++size;
	    return size;
	  }
	  function d3_map_empty() {
	    for (var key in this._) return false;
	    return true;
	  }
	  d3.nest = function() {
	    var nest = {}, keys = [], sortKeys = [], sortValues, rollup;
	    function map(mapType, array, depth) {
	      if (depth >= keys.length) return rollup ? rollup.call(nest, array) : sortValues ? array.sort(sortValues) : array;
	      var i = -1, n = array.length, key = keys[depth++], keyValue, object, setter, valuesByKey = new d3_Map(), values;
	      while (++i < n) {
	        if (values = valuesByKey.get(keyValue = key(object = array[i]))) {
	          values.push(object);
	        } else {
	          valuesByKey.set(keyValue, [ object ]);
	        }
	      }
	      if (mapType) {
	        object = mapType();
	        setter = function(keyValue, values) {
	          object.set(keyValue, map(mapType, values, depth));
	        };
	      } else {
	        object = {};
	        setter = function(keyValue, values) {
	          object[keyValue] = map(mapType, values, depth);
	        };
	      }
	      valuesByKey.forEach(setter);
	      return object;
	    }
	    function entries(map, depth) {
	      if (depth >= keys.length) return map;
	      var array = [], sortKey = sortKeys[depth++];
	      map.forEach(function(key, keyMap) {
	        array.push({
	          key: key,
	          values: entries(keyMap, depth)
	        });
	      });
	      return sortKey ? array.sort(function(a, b) {
	        return sortKey(a.key, b.key);
	      }) : array;
	    }
	    nest.map = function(array, mapType) {
	      return map(mapType, array, 0);
	    };
	    nest.entries = function(array) {
	      return entries(map(d3.map, array, 0), 0);
	    };
	    nest.key = function(d) {
	      keys.push(d);
	      return nest;
	    };
	    nest.sortKeys = function(order) {
	      sortKeys[keys.length - 1] = order;
	      return nest;
	    };
	    nest.sortValues = function(order) {
	      sortValues = order;
	      return nest;
	    };
	    nest.rollup = function(f) {
	      rollup = f;
	      return nest;
	    };
	    return nest;
	  };
	  d3.set = function(array) {
	    var set = new d3_Set();
	    if (array) for (var i = 0, n = array.length; i < n; ++i) set.add(array[i]);
	    return set;
	  };
	  function d3_Set() {
	    this._ = Object.create(null);
	  }
	  d3_class(d3_Set, {
	    has: d3_map_has,
	    add: function(key) {
	      this._[d3_map_escape(key += "")] = true;
	      return key;
	    },
	    remove: d3_map_remove,
	    values: d3_map_keys,
	    size: d3_map_size,
	    empty: d3_map_empty,
	    forEach: function(f) {
	      for (var key in this._) f.call(this, d3_map_unescape(key));
	    }
	  });
	  d3.behavior = {};
	  function d3_identity(d) {
	    return d;
	  }
	  d3.rebind = function(target, source) {
	    var i = 1, n = arguments.length, method;
	    while (++i < n) target[method = arguments[i]] = d3_rebind(target, source, source[method]);
	    return target;
	  };
	  function d3_rebind(target, source, method) {
	    return function() {
	      var value = method.apply(source, arguments);
	      return value === source ? target : value;
	    };
	  }
	  function d3_vendorSymbol(object, name) {
	    if (name in object) return name;
	    name = name.charAt(0).toUpperCase() + name.slice(1);
	    for (var i = 0, n = d3_vendorPrefixes.length; i < n; ++i) {
	      var prefixName = d3_vendorPrefixes[i] + name;
	      if (prefixName in object) return prefixName;
	    }
	  }
	  var d3_vendorPrefixes = [ "webkit", "ms", "moz", "Moz", "o", "O" ];
	  function d3_noop() {}
	  d3.dispatch = function() {
	    var dispatch = new d3_dispatch(), i = -1, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    return dispatch;
	  };
	  function d3_dispatch() {}
	  d3_dispatch.prototype.on = function(type, listener) {
	    var i = type.indexOf("."), name = "";
	    if (i >= 0) {
	      name = type.slice(i + 1);
	      type = type.slice(0, i);
	    }
	    if (type) return arguments.length < 2 ? this[type].on(name) : this[type].on(name, listener);
	    if (arguments.length === 2) {
	      if (listener == null) for (type in this) {
	        if (this.hasOwnProperty(type)) this[type].on(name, null);
	      }
	      return this;
	    }
	  };
	  function d3_dispatch_event(dispatch) {
	    var listeners = [], listenerByName = new d3_Map();
	    function event() {
	      var z = listeners, i = -1, n = z.length, l;
	      while (++i < n) if (l = z[i].on) l.apply(this, arguments);
	      return dispatch;
	    }
	    event.on = function(name, listener) {
	      var l = listenerByName.get(name), i;
	      if (arguments.length < 2) return l && l.on;
	      if (l) {
	        l.on = null;
	        listeners = listeners.slice(0, i = listeners.indexOf(l)).concat(listeners.slice(i + 1));
	        listenerByName.remove(name);
	      }
	      if (listener) listeners.push(listenerByName.set(name, {
	        on: listener
	      }));
	      return dispatch;
	    };
	    return event;
	  }
	  d3.event = null;
	  function d3_eventPreventDefault() {
	    d3.event.preventDefault();
	  }
	  function d3_eventSource() {
	    var e = d3.event, s;
	    while (s = e.sourceEvent) e = s;
	    return e;
	  }
	  function d3_eventDispatch(target) {
	    var dispatch = new d3_dispatch(), i = 0, n = arguments.length;
	    while (++i < n) dispatch[arguments[i]] = d3_dispatch_event(dispatch);
	    dispatch.of = function(thiz, argumentz) {
	      return function(e1) {
	        try {
	          var e0 = e1.sourceEvent = d3.event;
	          e1.target = target;
	          d3.event = e1;
	          dispatch[e1.type].apply(thiz, argumentz);
	        } finally {
	          d3.event = e0;
	        }
	      };
	    };
	    return dispatch;
	  }
	  d3.requote = function(s) {
	    return s.replace(d3_requote_re, "\\$&");
	  };
	  var d3_requote_re = /[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;
	  var d3_subclass = {}.__proto__ ? function(object, prototype) {
	    object.__proto__ = prototype;
	  } : function(object, prototype) {
	    for (var property in prototype) object[property] = prototype[property];
	  };
	  function d3_selection(groups) {
	    d3_subclass(groups, d3_selectionPrototype);
	    return groups;
	  }
	  var d3_select = function(s, n) {
	    return n.querySelector(s);
	  }, d3_selectAll = function(s, n) {
	    return n.querySelectorAll(s);
	  }, d3_selectMatches = function(n, s) {
	    var d3_selectMatcher = n.matches || n[d3_vendorSymbol(n, "matchesSelector")];
	    d3_selectMatches = function(n, s) {
	      return d3_selectMatcher.call(n, s);
	    };
	    return d3_selectMatches(n, s);
	  };
	  if (typeof Sizzle === "function") {
	    d3_select = function(s, n) {
	      return Sizzle(s, n)[0] || null;
	    };
	    d3_selectAll = Sizzle;
	    d3_selectMatches = Sizzle.matchesSelector;
	  }
	  d3.selection = function() {
	    return d3.select(d3_document.documentElement);
	  };
	  var d3_selectionPrototype = d3.selection.prototype = [];
	  d3_selectionPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, group, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(subnode = selector.call(node, node.__data__, i, j));
	          if (subnode && "__data__" in node) subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selector(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_select(selector, this);
	    };
	  }
	  d3_selectionPrototype.selectAll = function(selector) {
	    var subgroups = [], subgroup, node;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroups.push(subgroup = d3_array(selector.call(node, node.__data__, i, j)));
	          subgroup.parentNode = node;
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_selectorAll(selector) {
	    return typeof selector === "function" ? selector : function() {
	      return d3_selectAll(selector, this);
	    };
	  }
	  var d3_nsXhtml = "http://www.w3.org/1999/xhtml";
	  var d3_nsPrefix = {
	    svg: "http://www.w3.org/2000/svg",
	    xhtml: d3_nsXhtml,
	    xlink: "http://www.w3.org/1999/xlink",
	    xml: "http://www.w3.org/XML/1998/namespace",
	    xmlns: "http://www.w3.org/2000/xmlns/"
	  };
	  d3.ns = {
	    prefix: d3_nsPrefix,
	    qualify: function(name) {
	      var i = name.indexOf(":"), prefix = name;
	      if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	      return d3_nsPrefix.hasOwnProperty(prefix) ? {
	        space: d3_nsPrefix[prefix],
	        local: name
	      } : name;
	    }
	  };
	  d3_selectionPrototype.attr = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node();
	        name = d3.ns.qualify(name);
	        return name.local ? node.getAttributeNS(name.space, name.local) : node.getAttribute(name);
	      }
	      for (value in name) this.each(d3_selection_attr(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_attr(name, value));
	  };
	  function d3_selection_attr(name, value) {
	    name = d3.ns.qualify(name);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrConstant() {
	      this.setAttribute(name, value);
	    }
	    function attrConstantNS() {
	      this.setAttributeNS(name.space, name.local, value);
	    }
	    function attrFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttribute(name); else this.setAttribute(name, x);
	    }
	    function attrFunctionNS() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.removeAttributeNS(name.space, name.local); else this.setAttributeNS(name.space, name.local, x);
	    }
	    return value == null ? name.local ? attrNullNS : attrNull : typeof value === "function" ? name.local ? attrFunctionNS : attrFunction : name.local ? attrConstantNS : attrConstant;
	  }
	  function d3_collapse(s) {
	    return s.trim().replace(/\s+/g, " ");
	  }
	  d3_selectionPrototype.classed = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") {
	        var node = this.node(), n = (name = d3_selection_classes(name)).length, i = -1;
	        if (value = node.classList) {
	          while (++i < n) if (!value.contains(name[i])) return false;
	        } else {
	          value = node.getAttribute("class");
	          while (++i < n) if (!d3_selection_classedRe(name[i]).test(value)) return false;
	        }
	        return true;
	      }
	      for (value in name) this.each(d3_selection_classed(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_classed(name, value));
	  };
	  function d3_selection_classedRe(name) {
	    return new RegExp("(?:^|\\s+)" + d3.requote(name) + "(?:\\s+|$)", "g");
	  }
	  function d3_selection_classes(name) {
	    return (name + "").trim().split(/^|\s+/);
	  }
	  function d3_selection_classed(name, value) {
	    name = d3_selection_classes(name).map(d3_selection_classedName);
	    var n = name.length;
	    function classedConstant() {
	      var i = -1;
	      while (++i < n) name[i](this, value);
	    }
	    function classedFunction() {
	      var i = -1, x = value.apply(this, arguments);
	      while (++i < n) name[i](this, x);
	    }
	    return typeof value === "function" ? classedFunction : classedConstant;
	  }
	  function d3_selection_classedName(name) {
	    var re = d3_selection_classedRe(name);
	    return function(node, value) {
	      if (c = node.classList) return value ? c.add(name) : c.remove(name);
	      var c = node.getAttribute("class") || "";
	      if (value) {
	        re.lastIndex = 0;
	        if (!re.test(c)) node.setAttribute("class", d3_collapse(c + " " + name));
	      } else {
	        node.setAttribute("class", d3_collapse(c.replace(re, " ")));
	      }
	    };
	  }
	  d3_selectionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.each(d3_selection_style(priority, name[priority], value));
	        return this;
	      }
	      if (n < 2) {
	        var node = this.node();
	        return d3_window(node).getComputedStyle(node, null).getPropertyValue(name);
	      }
	      priority = "";
	    }
	    return this.each(d3_selection_style(name, value, priority));
	  };
	  function d3_selection_style(name, value, priority) {
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleConstant() {
	      this.style.setProperty(name, value, priority);
	    }
	    function styleFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) this.style.removeProperty(name); else this.style.setProperty(name, x, priority);
	    }
	    return value == null ? styleNull : typeof value === "function" ? styleFunction : styleConstant;
	  }
	  d3_selectionPrototype.property = function(name, value) {
	    if (arguments.length < 2) {
	      if (typeof name === "string") return this.node()[name];
	      for (value in name) this.each(d3_selection_property(value, name[value]));
	      return this;
	    }
	    return this.each(d3_selection_property(name, value));
	  };
	  function d3_selection_property(name, value) {
	    function propertyNull() {
	      delete this[name];
	    }
	    function propertyConstant() {
	      this[name] = value;
	    }
	    function propertyFunction() {
	      var x = value.apply(this, arguments);
	      if (x == null) delete this[name]; else this[name] = x;
	    }
	    return value == null ? propertyNull : typeof value === "function" ? propertyFunction : propertyConstant;
	  }
	  d3_selectionPrototype.text = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.textContent = v == null ? "" : v;
	    } : value == null ? function() {
	      this.textContent = "";
	    } : function() {
	      this.textContent = value;
	    }) : this.node().textContent;
	  };
	  d3_selectionPrototype.html = function(value) {
	    return arguments.length ? this.each(typeof value === "function" ? function() {
	      var v = value.apply(this, arguments);
	      this.innerHTML = v == null ? "" : v;
	    } : value == null ? function() {
	      this.innerHTML = "";
	    } : function() {
	      this.innerHTML = value;
	    }) : this.node().innerHTML;
	  };
	  d3_selectionPrototype.append = function(name) {
	    name = d3_selection_creator(name);
	    return this.select(function() {
	      return this.appendChild(name.apply(this, arguments));
	    });
	  };
	  function d3_selection_creator(name) {
	    function create() {
	      var document = this.ownerDocument, namespace = this.namespaceURI;
	      return namespace === d3_nsXhtml && document.documentElement.namespaceURI === d3_nsXhtml ? document.createElement(name) : document.createElementNS(namespace, name);
	    }
	    function createNS() {
	      return this.ownerDocument.createElementNS(name.space, name.local);
	    }
	    return typeof name === "function" ? name : (name = d3.ns.qualify(name)).local ? createNS : create;
	  }
	  d3_selectionPrototype.insert = function(name, before) {
	    name = d3_selection_creator(name);
	    before = d3_selection_selector(before);
	    return this.select(function() {
	      return this.insertBefore(name.apply(this, arguments), before.apply(this, arguments) || null);
	    });
	  };
	  d3_selectionPrototype.remove = function() {
	    return this.each(d3_selectionRemove);
	  };
	  function d3_selectionRemove() {
	    var parent = this.parentNode;
	    if (parent) parent.removeChild(this);
	  }
	  d3_selectionPrototype.data = function(value, key) {
	    var i = -1, n = this.length, group, node;
	    if (!arguments.length) {
	      value = new Array(n = (group = this[0]).length);
	      while (++i < n) {
	        if (node = group[i]) {
	          value[i] = node.__data__;
	        }
	      }
	      return value;
	    }
	    function bind(group, groupData) {
	      var i, n = group.length, m = groupData.length, n0 = Math.min(n, m), updateNodes = new Array(m), enterNodes = new Array(m), exitNodes = new Array(n), node, nodeData;
	      if (key) {
	        var nodeByKeyValue = new d3_Map(), keyValues = new Array(n), keyValue;
	        for (i = -1; ++i < n; ) {
	          if (node = group[i]) {
	            if (nodeByKeyValue.has(keyValue = key.call(node, node.__data__, i))) {
	              exitNodes[i] = node;
	            } else {
	              nodeByKeyValue.set(keyValue, node);
	            }
	            keyValues[i] = keyValue;
	          }
	        }
	        for (i = -1; ++i < m; ) {
	          if (!(node = nodeByKeyValue.get(keyValue = key.call(groupData, nodeData = groupData[i], i)))) {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          } else if (node !== true) {
	            updateNodes[i] = node;
	            node.__data__ = nodeData;
	          }
	          nodeByKeyValue.set(keyValue, true);
	        }
	        for (i = -1; ++i < n; ) {
	          if (i in keyValues && nodeByKeyValue.get(keyValues[i]) !== true) {
	            exitNodes[i] = group[i];
	          }
	        }
	      } else {
	        for (i = -1; ++i < n0; ) {
	          node = group[i];
	          nodeData = groupData[i];
	          if (node) {
	            node.__data__ = nodeData;
	            updateNodes[i] = node;
	          } else {
	            enterNodes[i] = d3_selection_dataNode(nodeData);
	          }
	        }
	        for (;i < m; ++i) {
	          enterNodes[i] = d3_selection_dataNode(groupData[i]);
	        }
	        for (;i < n; ++i) {
	          exitNodes[i] = group[i];
	        }
	      }
	      enterNodes.update = updateNodes;
	      enterNodes.parentNode = updateNodes.parentNode = exitNodes.parentNode = group.parentNode;
	      enter.push(enterNodes);
	      update.push(updateNodes);
	      exit.push(exitNodes);
	    }
	    var enter = d3_selection_enter([]), update = d3_selection([]), exit = d3_selection([]);
	    if (typeof value === "function") {
	      while (++i < n) {
	        bind(group = this[i], value.call(group, group.parentNode.__data__, i));
	      }
	    } else {
	      while (++i < n) {
	        bind(group = this[i], value);
	      }
	    }
	    update.enter = function() {
	      return enter;
	    };
	    update.exit = function() {
	      return exit;
	    };
	    return update;
	  };
	  function d3_selection_dataNode(data) {
	    return {
	      __data__: data
	    };
	  }
	  d3_selectionPrototype.datum = function(value) {
	    return arguments.length ? this.property("__data__", value) : this.property("__data__");
	  };
	  d3_selectionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = (group = this[j]).parentNode;
	      for (var i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  function d3_selection_filter(selector) {
	    return function() {
	      return d3_selectMatches(this, selector);
	    };
	  }
	  d3_selectionPrototype.order = function() {
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
	        if (node = group[i]) {
	          if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	          next = node;
	        }
	      }
	    }
	    return this;
	  };
	  d3_selectionPrototype.sort = function(comparator) {
	    comparator = d3_selection_sortComparator.apply(this, arguments);
	    for (var j = -1, m = this.length; ++j < m; ) this[j].sort(comparator);
	    return this.order();
	  };
	  function d3_selection_sortComparator(comparator) {
	    if (!arguments.length) comparator = d3_ascending;
	    return function(a, b) {
	      return a && b ? comparator(a.__data__, b.__data__) : !a - !b;
	    };
	  }
	  d3_selectionPrototype.each = function(callback) {
	    return d3_selection_each(this, function(node, i, j) {
	      callback.call(node, node.__data__, i, j);
	    });
	  };
	  function d3_selection_each(groups, callback) {
	    for (var j = 0, m = groups.length; j < m; j++) {
	      for (var group = groups[j], i = 0, n = group.length, node; i < n; i++) {
	        if (node = group[i]) callback(node, i, j);
	      }
	    }
	    return groups;
	  }
	  d3_selectionPrototype.call = function(callback) {
	    var args = d3_array(arguments);
	    callback.apply(args[0] = this, args);
	    return this;
	  };
	  d3_selectionPrototype.empty = function() {
	    return !this.node();
	  };
	  d3_selectionPrototype.node = function() {
	    for (var j = 0, m = this.length; j < m; j++) {
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        var node = group[i];
	        if (node) return node;
	      }
	    }
	    return null;
	  };
	  d3_selectionPrototype.size = function() {
	    var n = 0;
	    d3_selection_each(this, function() {
	      ++n;
	    });
	    return n;
	  };
	  function d3_selection_enter(selection) {
	    d3_subclass(selection, d3_selection_enterPrototype);
	    return selection;
	  }
	  var d3_selection_enterPrototype = [];
	  d3.selection.enter = d3_selection_enter;
	  d3.selection.enter.prototype = d3_selection_enterPrototype;
	  d3_selection_enterPrototype.append = d3_selectionPrototype.append;
	  d3_selection_enterPrototype.empty = d3_selectionPrototype.empty;
	  d3_selection_enterPrototype.node = d3_selectionPrototype.node;
	  d3_selection_enterPrototype.call = d3_selectionPrototype.call;
	  d3_selection_enterPrototype.size = d3_selectionPrototype.size;
	  d3_selection_enterPrototype.select = function(selector) {
	    var subgroups = [], subgroup, subnode, upgroup, group, node;
	    for (var j = -1, m = this.length; ++j < m; ) {
	      upgroup = (group = this[j]).update;
	      subgroups.push(subgroup = []);
	      subgroup.parentNode = group.parentNode;
	      for (var i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          subgroup.push(upgroup[i] = subnode = selector.call(group.parentNode, node.__data__, i, j));
	          subnode.__data__ = node.__data__;
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_selection(subgroups);
	  };
	  d3_selection_enterPrototype.insert = function(name, before) {
	    if (arguments.length < 2) before = d3_selection_enterInsertBefore(this);
	    return d3_selectionPrototype.insert.call(this, name, before);
	  };
	  function d3_selection_enterInsertBefore(enter) {
	    var i0, j0;
	    return function(d, i, j) {
	      var group = enter[j].update, n = group.length, node;
	      if (j != j0) j0 = j, i0 = 0;
	      if (i >= i0) i0 = i + 1;
	      while (!(node = group[i0]) && ++i0 < n) ;
	      return node;
	    };
	  }
	  d3.select = function(node) {
	    var group;
	    if (typeof node === "string") {
	      group = [ d3_select(node, d3_document) ];
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = [ node ];
	      group.parentNode = d3_documentElement(node);
	    }
	    return d3_selection([ group ]);
	  };
	  d3.selectAll = function(nodes) {
	    var group;
	    if (typeof nodes === "string") {
	      group = d3_array(d3_selectAll(nodes, d3_document));
	      group.parentNode = d3_document.documentElement;
	    } else {
	      group = d3_array(nodes);
	      group.parentNode = null;
	    }
	    return d3_selection([ group ]);
	  };
	  d3_selectionPrototype.on = function(type, listener, capture) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof type !== "string") {
	        if (n < 2) listener = false;
	        for (capture in type) this.each(d3_selection_on(capture, type[capture], listener));
	        return this;
	      }
	      if (n < 2) return (n = this.node()["__on" + type]) && n._;
	      capture = false;
	    }
	    return this.each(d3_selection_on(type, listener, capture));
	  };
	  function d3_selection_on(type, listener, capture) {
	    var name = "__on" + type, i = type.indexOf("."), wrap = d3_selection_onListener;
	    if (i > 0) type = type.slice(0, i);
	    var filter = d3_selection_onFilters.get(type);
	    if (filter) type = filter, wrap = d3_selection_onFilter;
	    function onRemove() {
	      var l = this[name];
	      if (l) {
	        this.removeEventListener(type, l, l.$);
	        delete this[name];
	      }
	    }
	    function onAdd() {
	      var l = wrap(listener, d3_array(arguments));
	      onRemove.call(this);
	      this.addEventListener(type, this[name] = l, l.$ = capture);
	      l._ = listener;
	    }
	    function removeAll() {
	      var re = new RegExp("^__on([^.]+)" + d3.requote(type) + "$"), match;
	      for (var name in this) {
	        if (match = name.match(re)) {
	          var l = this[name];
	          this.removeEventListener(match[1], l, l.$);
	          delete this[name];
	        }
	      }
	    }
	    return i ? listener ? onAdd : onRemove : listener ? d3_noop : removeAll;
	  }
	  var d3_selection_onFilters = d3.map({
	    mouseenter: "mouseover",
	    mouseleave: "mouseout"
	  });
	  if (d3_document) {
	    d3_selection_onFilters.forEach(function(k) {
	      if ("on" + k in d3_document) d3_selection_onFilters.remove(k);
	    });
	  }
	  function d3_selection_onListener(listener, argumentz) {
	    return function(e) {
	      var o = d3.event;
	      d3.event = e;
	      argumentz[0] = this.__data__;
	      try {
	        listener.apply(this, argumentz);
	      } finally {
	        d3.event = o;
	      }
	    };
	  }
	  function d3_selection_onFilter(listener, argumentz) {
	    var l = d3_selection_onListener(listener, argumentz);
	    return function(e) {
	      var target = this, related = e.relatedTarget;
	      if (!related || related !== target && !(related.compareDocumentPosition(target) & 8)) {
	        l.call(target, e);
	      }
	    };
	  }
	  var d3_event_dragSelect, d3_event_dragId = 0;
	  function d3_event_dragSuppress(node) {
	    var name = ".dragsuppress-" + ++d3_event_dragId, click = "click" + name, w = d3.select(d3_window(node)).on("touchmove" + name, d3_eventPreventDefault).on("dragstart" + name, d3_eventPreventDefault).on("selectstart" + name, d3_eventPreventDefault);
	    if (d3_event_dragSelect == null) {
	      d3_event_dragSelect = "onselectstart" in node ? false : d3_vendorSymbol(node.style, "userSelect");
	    }
	    if (d3_event_dragSelect) {
	      var style = d3_documentElement(node).style, select = style[d3_event_dragSelect];
	      style[d3_event_dragSelect] = "none";
	    }
	    return function(suppressClick) {
	      w.on(name, null);
	      if (d3_event_dragSelect) style[d3_event_dragSelect] = select;
	      if (suppressClick) {
	        var off = function() {
	          w.on(click, null);
	        };
	        w.on(click, function() {
	          d3_eventPreventDefault();
	          off();
	        }, true);
	        setTimeout(off, 0);
	      }
	    };
	  }
	  d3.mouse = function(container) {
	    return d3_mousePoint(container, d3_eventSource());
	  };
	  var d3_mouse_bug44083 = this.navigator && /WebKit/.test(this.navigator.userAgent) ? -1 : 0;
	  function d3_mousePoint(container, e) {
	    if (e.changedTouches) e = e.changedTouches[0];
	    var svg = container.ownerSVGElement || container;
	    if (svg.createSVGPoint) {
	      var point = svg.createSVGPoint();
	      if (d3_mouse_bug44083 < 0) {
	        var window = d3_window(container);
	        if (window.scrollX || window.scrollY) {
	          svg = d3.select("body").append("svg").style({
	            position: "absolute",
	            top: 0,
	            left: 0,
	            margin: 0,
	            padding: 0,
	            border: "none"
	          }, "important");
	          var ctm = svg[0][0].getScreenCTM();
	          d3_mouse_bug44083 = !(ctm.f || ctm.e);
	          svg.remove();
	        }
	      }
	      if (d3_mouse_bug44083) point.x = e.pageX, point.y = e.pageY; else point.x = e.clientX, 
	      point.y = e.clientY;
	      point = point.matrixTransform(container.getScreenCTM().inverse());
	      return [ point.x, point.y ];
	    }
	    var rect = container.getBoundingClientRect();
	    return [ e.clientX - rect.left - container.clientLeft, e.clientY - rect.top - container.clientTop ];
	  }
	  d3.touch = function(container, touches, identifier) {
	    if (arguments.length < 3) identifier = touches, touches = d3_eventSource().changedTouches;
	    if (touches) for (var i = 0, n = touches.length, touch; i < n; ++i) {
	      if ((touch = touches[i]).identifier === identifier) {
	        return d3_mousePoint(container, touch);
	      }
	    }
	  };
	  d3.behavior.drag = function() {
	    var event = d3_eventDispatch(drag, "drag", "dragstart", "dragend"), origin = null, mousedown = dragstart(d3_noop, d3.mouse, d3_window, "mousemove", "mouseup"), touchstart = dragstart(d3_behavior_dragTouchId, d3.touch, d3_identity, "touchmove", "touchend");
	    function drag() {
	      this.on("mousedown.drag", mousedown).on("touchstart.drag", touchstart);
	    }
	    function dragstart(id, position, subject, move, end) {
	      return function() {
	        var that = this, target = d3.event.target.correspondingElement || d3.event.target, parent = that.parentNode, dispatch = event.of(that, arguments), dragged = 0, dragId = id(), dragName = ".drag" + (dragId == null ? "" : "-" + dragId), dragOffset, dragSubject = d3.select(subject(target)).on(move + dragName, moved).on(end + dragName, ended), dragRestore = d3_event_dragSuppress(target), position0 = position(parent, dragId);
	        if (origin) {
	          dragOffset = origin.apply(that, arguments);
	          dragOffset = [ dragOffset.x - position0[0], dragOffset.y - position0[1] ];
	        } else {
	          dragOffset = [ 0, 0 ];
	        }
	        dispatch({
	          type: "dragstart"
	        });
	        function moved() {
	          var position1 = position(parent, dragId), dx, dy;
	          if (!position1) return;
	          dx = position1[0] - position0[0];
	          dy = position1[1] - position0[1];
	          dragged |= dx | dy;
	          position0 = position1;
	          dispatch({
	            type: "drag",
	            x: position1[0] + dragOffset[0],
	            y: position1[1] + dragOffset[1],
	            dx: dx,
	            dy: dy
	          });
	        }
	        function ended() {
	          if (!position(parent, dragId)) return;
	          dragSubject.on(move + dragName, null).on(end + dragName, null);
	          dragRestore(dragged);
	          dispatch({
	            type: "dragend"
	          });
	        }
	      };
	    }
	    drag.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return drag;
	    };
	    return d3.rebind(drag, event, "on");
	  };
	  function d3_behavior_dragTouchId() {
	    return d3.event.changedTouches[0].identifier;
	  }
	  d3.touches = function(container, touches) {
	    if (arguments.length < 2) touches = d3_eventSource().touches;
	    return touches ? d3_array(touches).map(function(touch) {
	      var point = d3_mousePoint(container, touch);
	      point.identifier = touch.identifier;
	      return point;
	    }) : [];
	  };
	  var ε = 1e-6, ε2 = ε * ε, π = Math.PI, τ = 2 * π, τε = τ - ε, halfπ = π / 2, d3_radians = π / 180, d3_degrees = 180 / π;
	  function d3_sgn(x) {
	    return x > 0 ? 1 : x < 0 ? -1 : 0;
	  }
	  function d3_cross2d(a, b, c) {
	    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	  }
	  function d3_acos(x) {
	    return x > 1 ? 0 : x < -1 ? π : Math.acos(x);
	  }
	  function d3_asin(x) {
	    return x > 1 ? halfπ : x < -1 ? -halfπ : Math.asin(x);
	  }
	  function d3_sinh(x) {
	    return ((x = Math.exp(x)) - 1 / x) / 2;
	  }
	  function d3_cosh(x) {
	    return ((x = Math.exp(x)) + 1 / x) / 2;
	  }
	  function d3_tanh(x) {
	    return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	  }
	  function d3_haversin(x) {
	    return (x = Math.sin(x / 2)) * x;
	  }
	  var ρ = Math.SQRT2, ρ2 = 2, ρ4 = 4;
	  d3.interpolateZoom = function(p0, p1) {
	    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i, S;
	    if (d2 < ε2) {
	      S = Math.log(w1 / w0) / ρ;
	      i = function(t) {
	        return [ ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(ρ * t * S) ];
	      };
	    } else {
	      var d1 = Math.sqrt(d2), b0 = (w1 * w1 - w0 * w0 + ρ4 * d2) / (2 * w0 * ρ2 * d1), b1 = (w1 * w1 - w0 * w0 - ρ4 * d2) / (2 * w1 * ρ2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / ρ;
	      i = function(t) {
	        var s = t * S, coshr0 = d3_cosh(r0), u = w0 / (ρ2 * d1) * (coshr0 * d3_tanh(ρ * s + r0) - d3_sinh(r0));
	        return [ ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / d3_cosh(ρ * s + r0) ];
	      };
	    }
	    i.duration = S * 1e3;
	    return i;
	  };
	  d3.behavior.zoom = function() {
	    var view = {
	      x: 0,
	      y: 0,
	      k: 1
	    }, translate0, center0, center, size = [ 960, 500 ], scaleExtent = d3_behavior_zoomInfinity, duration = 250, zooming = 0, mousedown = "mousedown.zoom", mousemove = "mousemove.zoom", mouseup = "mouseup.zoom", mousewheelTimer, touchstart = "touchstart.zoom", touchtime, event = d3_eventDispatch(zoom, "zoomstart", "zoom", "zoomend"), x0, x1, y0, y1;
	    if (!d3_behavior_zoomWheel) {
	      d3_behavior_zoomWheel = "onwheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return -d3.event.deltaY * (d3.event.deltaMode ? 120 : 1);
	      }, "wheel") : "onmousewheel" in d3_document ? (d3_behavior_zoomDelta = function() {
	        return d3.event.wheelDelta;
	      }, "mousewheel") : (d3_behavior_zoomDelta = function() {
	        return -d3.event.detail;
	      }, "MozMousePixelScroll");
	    }
	    function zoom(g) {
	      g.on(mousedown, mousedowned).on(d3_behavior_zoomWheel + ".zoom", mousewheeled).on("dblclick.zoom", dblclicked).on(touchstart, touchstarted);
	    }
	    zoom.event = function(g) {
	      g.each(function() {
	        var dispatch = event.of(this, arguments), view1 = view;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.zoom", function() {
	            view = this.__chart__ || {
	              x: 0,
	              y: 0,
	              k: 1
	            };
	            zoomstarted(dispatch);
	          }).tween("zoom:zoom", function() {
	            var dx = size[0], dy = size[1], cx = center0 ? center0[0] : dx / 2, cy = center0 ? center0[1] : dy / 2, i = d3.interpolateZoom([ (cx - view.x) / view.k, (cy - view.y) / view.k, dx / view.k ], [ (cx - view1.x) / view1.k, (cy - view1.y) / view1.k, dx / view1.k ]);
	            return function(t) {
	              var l = i(t), k = dx / l[2];
	              this.__chart__ = view = {
	                x: cx - l[0] * k,
	                y: cy - l[1] * k,
	                k: k
	              };
	              zoomed(dispatch);
	            };
	          }).each("interrupt.zoom", function() {
	            zoomended(dispatch);
	          }).each("end.zoom", function() {
	            zoomended(dispatch);
	          });
	        } else {
	          this.__chart__ = view;
	          zoomstarted(dispatch);
	          zoomed(dispatch);
	          zoomended(dispatch);
	        }
	      });
	    };
	    zoom.translate = function(_) {
	      if (!arguments.length) return [ view.x, view.y ];
	      view = {
	        x: +_[0],
	        y: +_[1],
	        k: view.k
	      };
	      rescale();
	      return zoom;
	    };
	    zoom.scale = function(_) {
	      if (!arguments.length) return view.k;
	      view = {
	        x: view.x,
	        y: view.y,
	        k: null
	      };
	      scaleTo(+_);
	      rescale();
	      return zoom;
	    };
	    zoom.scaleExtent = function(_) {
	      if (!arguments.length) return scaleExtent;
	      scaleExtent = _ == null ? d3_behavior_zoomInfinity : [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.center = function(_) {
	      if (!arguments.length) return center;
	      center = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.size = function(_) {
	      if (!arguments.length) return size;
	      size = _ && [ +_[0], +_[1] ];
	      return zoom;
	    };
	    zoom.duration = function(_) {
	      if (!arguments.length) return duration;
	      duration = +_;
	      return zoom;
	    };
	    zoom.x = function(z) {
	      if (!arguments.length) return x1;
	      x1 = z;
	      x0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    zoom.y = function(z) {
	      if (!arguments.length) return y1;
	      y1 = z;
	      y0 = z.copy();
	      view = {
	        x: 0,
	        y: 0,
	        k: 1
	      };
	      return zoom;
	    };
	    function location(p) {
	      return [ (p[0] - view.x) / view.k, (p[1] - view.y) / view.k ];
	    }
	    function point(l) {
	      return [ l[0] * view.k + view.x, l[1] * view.k + view.y ];
	    }
	    function scaleTo(s) {
	      view.k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], s));
	    }
	    function translateTo(p, l) {
	      l = point(l);
	      view.x += p[0] - l[0];
	      view.y += p[1] - l[1];
	    }
	    function zoomTo(that, p, l, k) {
	      that.__chart__ = {
	        x: view.x,
	        y: view.y,
	        k: view.k
	      };
	      scaleTo(Math.pow(2, k));
	      translateTo(center0 = p, l);
	      that = d3.select(that);
	      if (duration > 0) that = that.transition().duration(duration);
	      that.call(zoom.event);
	    }
	    function rescale() {
	      if (x1) x1.domain(x0.range().map(function(x) {
	        return (x - view.x) / view.k;
	      }).map(x0.invert));
	      if (y1) y1.domain(y0.range().map(function(y) {
	        return (y - view.y) / view.k;
	      }).map(y0.invert));
	    }
	    function zoomstarted(dispatch) {
	      if (!zooming++) dispatch({
	        type: "zoomstart"
	      });
	    }
	    function zoomed(dispatch) {
	      rescale();
	      dispatch({
	        type: "zoom",
	        scale: view.k,
	        translate: [ view.x, view.y ]
	      });
	    }
	    function zoomended(dispatch) {
	      if (!--zooming) dispatch({
	        type: "zoomend"
	      }), center0 = null;
	    }
	    function mousedowned() {
	      var that = this, dispatch = event.of(that, arguments), dragged = 0, subject = d3.select(d3_window(that)).on(mousemove, moved).on(mouseup, ended), location0 = location(d3.mouse(that)), dragRestore = d3_event_dragSuppress(that);
	      d3_selection_interrupt.call(that);
	      zoomstarted(dispatch);
	      function moved() {
	        dragged = 1;
	        translateTo(d3.mouse(that), location0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        subject.on(mousemove, null).on(mouseup, null);
	        dragRestore(dragged);
	        zoomended(dispatch);
	      }
	    }
	    function touchstarted() {
	      var that = this, dispatch = event.of(that, arguments), locations0 = {}, distance0 = 0, scale0, zoomName = ".zoom-" + d3.event.changedTouches[0].identifier, touchmove = "touchmove" + zoomName, touchend = "touchend" + zoomName, targets = [], subject = d3.select(that), dragRestore = d3_event_dragSuppress(that);
	      started();
	      zoomstarted(dispatch);
	      subject.on(mousedown, null).on(touchstart, started);
	      function relocate() {
	        var touches = d3.touches(that);
	        scale0 = view.k;
	        touches.forEach(function(t) {
	          if (t.identifier in locations0) locations0[t.identifier] = location(t);
	        });
	        return touches;
	      }
	      function started() {
	        var target = d3.event.target;
	        d3.select(target).on(touchmove, moved).on(touchend, ended);
	        targets.push(target);
	        var changed = d3.event.changedTouches;
	        for (var i = 0, n = changed.length; i < n; ++i) {
	          locations0[changed[i].identifier] = null;
	        }
	        var touches = relocate(), now = Date.now();
	        if (touches.length === 1) {
	          if (now - touchtime < 500) {
	            var p = touches[0];
	            zoomTo(that, p, locations0[p.identifier], Math.floor(Math.log(view.k) / Math.LN2) + 1);
	            d3_eventPreventDefault();
	          }
	          touchtime = now;
	        } else if (touches.length > 1) {
	          var p = touches[0], q = touches[1], dx = p[0] - q[0], dy = p[1] - q[1];
	          distance0 = dx * dx + dy * dy;
	        }
	      }
	      function moved() {
	        var touches = d3.touches(that), p0, l0, p1, l1;
	        d3_selection_interrupt.call(that);
	        for (var i = 0, n = touches.length; i < n; ++i, l1 = null) {
	          p1 = touches[i];
	          if (l1 = locations0[p1.identifier]) {
	            if (l0) break;
	            p0 = p1, l0 = l1;
	          }
	        }
	        if (l1) {
	          var distance1 = (distance1 = p1[0] - p0[0]) * distance1 + (distance1 = p1[1] - p0[1]) * distance1, scale1 = distance0 && Math.sqrt(distance1 / distance0);
	          p0 = [ (p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2 ];
	          l0 = [ (l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2 ];
	          scaleTo(scale1 * scale0);
	        }
	        touchtime = null;
	        translateTo(p0, l0);
	        zoomed(dispatch);
	      }
	      function ended() {
	        if (d3.event.touches.length) {
	          var changed = d3.event.changedTouches;
	          for (var i = 0, n = changed.length; i < n; ++i) {
	            delete locations0[changed[i].identifier];
	          }
	          for (var identifier in locations0) {
	            return void relocate();
	          }
	        }
	        d3.selectAll(targets).on(zoomName, null);
	        subject.on(mousedown, mousedowned).on(touchstart, touchstarted);
	        dragRestore();
	        zoomended(dispatch);
	      }
	    }
	    function mousewheeled() {
	      var dispatch = event.of(this, arguments);
	      if (mousewheelTimer) clearTimeout(mousewheelTimer); else d3_selection_interrupt.call(this), 
	      translate0 = location(center0 = center || d3.mouse(this)), zoomstarted(dispatch);
	      mousewheelTimer = setTimeout(function() {
	        mousewheelTimer = null;
	        zoomended(dispatch);
	      }, 50);
	      d3_eventPreventDefault();
	      scaleTo(Math.pow(2, d3_behavior_zoomDelta() * .002) * view.k);
	      translateTo(center0, translate0);
	      zoomed(dispatch);
	    }
	    function dblclicked() {
	      var p = d3.mouse(this), k = Math.log(view.k) / Math.LN2;
	      zoomTo(this, p, location(p), d3.event.shiftKey ? Math.ceil(k) - 1 : Math.floor(k) + 1);
	    }
	    return d3.rebind(zoom, event, "on");
	  };
	  var d3_behavior_zoomInfinity = [ 0, Infinity ], d3_behavior_zoomDelta, d3_behavior_zoomWheel;
	  d3.color = d3_color;
	  function d3_color() {}
	  d3_color.prototype.toString = function() {
	    return this.rgb() + "";
	  };
	  d3.hsl = d3_hsl;
	  function d3_hsl(h, s, l) {
	    return this instanceof d3_hsl ? void (this.h = +h, this.s = +s, this.l = +l) : arguments.length < 2 ? h instanceof d3_hsl ? new d3_hsl(h.h, h.s, h.l) : d3_rgb_parse("" + h, d3_rgb_hsl, d3_hsl) : new d3_hsl(h, s, l);
	  }
	  var d3_hslPrototype = d3_hsl.prototype = new d3_color();
	  d3_hslPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, this.l / k);
	  };
	  d3_hslPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_hsl(this.h, this.s, k * this.l);
	  };
	  d3_hslPrototype.rgb = function() {
	    return d3_hsl_rgb(this.h, this.s, this.l);
	  };
	  function d3_hsl_rgb(h, s, l) {
	    var m1, m2;
	    h = isNaN(h) ? 0 : (h %= 360) < 0 ? h + 360 : h;
	    s = isNaN(s) ? 0 : s < 0 ? 0 : s > 1 ? 1 : s;
	    l = l < 0 ? 0 : l > 1 ? 1 : l;
	    m2 = l <= .5 ? l * (1 + s) : l + s - l * s;
	    m1 = 2 * l - m2;
	    function v(h) {
	      if (h > 360) h -= 360; else if (h < 0) h += 360;
	      if (h < 60) return m1 + (m2 - m1) * h / 60;
	      if (h < 180) return m2;
	      if (h < 240) return m1 + (m2 - m1) * (240 - h) / 60;
	      return m1;
	    }
	    function vv(h) {
	      return Math.round(v(h) * 255);
	    }
	    return new d3_rgb(vv(h + 120), vv(h), vv(h - 120));
	  }
	  d3.hcl = d3_hcl;
	  function d3_hcl(h, c, l) {
	    return this instanceof d3_hcl ? void (this.h = +h, this.c = +c, this.l = +l) : arguments.length < 2 ? h instanceof d3_hcl ? new d3_hcl(h.h, h.c, h.l) : h instanceof d3_lab ? d3_lab_hcl(h.l, h.a, h.b) : d3_lab_hcl((h = d3_rgb_lab((h = d3.rgb(h)).r, h.g, h.b)).l, h.a, h.b) : new d3_hcl(h, c, l);
	  }
	  var d3_hclPrototype = d3_hcl.prototype = new d3_color();
	  d3_hclPrototype.brighter = function(k) {
	    return new d3_hcl(this.h, this.c, Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.darker = function(k) {
	    return new d3_hcl(this.h, this.c, Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)));
	  };
	  d3_hclPrototype.rgb = function() {
	    return d3_hcl_lab(this.h, this.c, this.l).rgb();
	  };
	  function d3_hcl_lab(h, c, l) {
	    if (isNaN(h)) h = 0;
	    if (isNaN(c)) c = 0;
	    return new d3_lab(l, Math.cos(h *= d3_radians) * c, Math.sin(h) * c);
	  }
	  d3.lab = d3_lab;
	  function d3_lab(l, a, b) {
	    return this instanceof d3_lab ? void (this.l = +l, this.a = +a, this.b = +b) : arguments.length < 2 ? l instanceof d3_lab ? new d3_lab(l.l, l.a, l.b) : l instanceof d3_hcl ? d3_hcl_lab(l.h, l.c, l.l) : d3_rgb_lab((l = d3_rgb(l)).r, l.g, l.b) : new d3_lab(l, a, b);
	  }
	  var d3_lab_K = 18;
	  var d3_lab_X = .95047, d3_lab_Y = 1, d3_lab_Z = 1.08883;
	  var d3_labPrototype = d3_lab.prototype = new d3_color();
	  d3_labPrototype.brighter = function(k) {
	    return new d3_lab(Math.min(100, this.l + d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.darker = function(k) {
	    return new d3_lab(Math.max(0, this.l - d3_lab_K * (arguments.length ? k : 1)), this.a, this.b);
	  };
	  d3_labPrototype.rgb = function() {
	    return d3_lab_rgb(this.l, this.a, this.b);
	  };
	  function d3_lab_rgb(l, a, b) {
	    var y = (l + 16) / 116, x = y + a / 500, z = y - b / 200;
	    x = d3_lab_xyz(x) * d3_lab_X;
	    y = d3_lab_xyz(y) * d3_lab_Y;
	    z = d3_lab_xyz(z) * d3_lab_Z;
	    return new d3_rgb(d3_xyz_rgb(3.2404542 * x - 1.5371385 * y - .4985314 * z), d3_xyz_rgb(-.969266 * x + 1.8760108 * y + .041556 * z), d3_xyz_rgb(.0556434 * x - .2040259 * y + 1.0572252 * z));
	  }
	  function d3_lab_hcl(l, a, b) {
	    return l > 0 ? new d3_hcl(Math.atan2(b, a) * d3_degrees, Math.sqrt(a * a + b * b), l) : new d3_hcl(NaN, NaN, l);
	  }
	  function d3_lab_xyz(x) {
	    return x > .206893034 ? x * x * x : (x - 4 / 29) / 7.787037;
	  }
	  function d3_xyz_lab(x) {
	    return x > .008856 ? Math.pow(x, 1 / 3) : 7.787037 * x + 4 / 29;
	  }
	  function d3_xyz_rgb(r) {
	    return Math.round(255 * (r <= .00304 ? 12.92 * r : 1.055 * Math.pow(r, 1 / 2.4) - .055));
	  }
	  d3.rgb = d3_rgb;
	  function d3_rgb(r, g, b) {
	    return this instanceof d3_rgb ? void (this.r = ~~r, this.g = ~~g, this.b = ~~b) : arguments.length < 2 ? r instanceof d3_rgb ? new d3_rgb(r.r, r.g, r.b) : d3_rgb_parse("" + r, d3_rgb, d3_hsl_rgb) : new d3_rgb(r, g, b);
	  }
	  function d3_rgbNumber(value) {
	    return new d3_rgb(value >> 16, value >> 8 & 255, value & 255);
	  }
	  function d3_rgbString(value) {
	    return d3_rgbNumber(value) + "";
	  }
	  var d3_rgbPrototype = d3_rgb.prototype = new d3_color();
	  d3_rgbPrototype.brighter = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    var r = this.r, g = this.g, b = this.b, i = 30;
	    if (!r && !g && !b) return new d3_rgb(i, i, i);
	    if (r && r < i) r = i;
	    if (g && g < i) g = i;
	    if (b && b < i) b = i;
	    return new d3_rgb(Math.min(255, r / k), Math.min(255, g / k), Math.min(255, b / k));
	  };
	  d3_rgbPrototype.darker = function(k) {
	    k = Math.pow(.7, arguments.length ? k : 1);
	    return new d3_rgb(k * this.r, k * this.g, k * this.b);
	  };
	  d3_rgbPrototype.hsl = function() {
	    return d3_rgb_hsl(this.r, this.g, this.b);
	  };
	  d3_rgbPrototype.toString = function() {
	    return "#" + d3_rgb_hex(this.r) + d3_rgb_hex(this.g) + d3_rgb_hex(this.b);
	  };
	  function d3_rgb_hex(v) {
	    return v < 16 ? "0" + Math.max(0, v).toString(16) : Math.min(255, v).toString(16);
	  }
	  function d3_rgb_parse(format, rgb, hsl) {
	    var r = 0, g = 0, b = 0, m1, m2, color;
	    m1 = /([a-z]+)\((.*)\)/.exec(format = format.toLowerCase());
	    if (m1) {
	      m2 = m1[2].split(",");
	      switch (m1[1]) {
	       case "hsl":
	        {
	          return hsl(parseFloat(m2[0]), parseFloat(m2[1]) / 100, parseFloat(m2[2]) / 100);
	        }
	
	       case "rgb":
	        {
	          return rgb(d3_rgb_parseNumber(m2[0]), d3_rgb_parseNumber(m2[1]), d3_rgb_parseNumber(m2[2]));
	        }
	      }
	    }
	    if (color = d3_rgb_names.get(format)) {
	      return rgb(color.r, color.g, color.b);
	    }
	    if (format != null && format.charAt(0) === "#" && !isNaN(color = parseInt(format.slice(1), 16))) {
	      if (format.length === 4) {
	        r = (color & 3840) >> 4;
	        r = r >> 4 | r;
	        g = color & 240;
	        g = g >> 4 | g;
	        b = color & 15;
	        b = b << 4 | b;
	      } else if (format.length === 7) {
	        r = (color & 16711680) >> 16;
	        g = (color & 65280) >> 8;
	        b = color & 255;
	      }
	    }
	    return rgb(r, g, b);
	  }
	  function d3_rgb_hsl(r, g, b) {
	    var min = Math.min(r /= 255, g /= 255, b /= 255), max = Math.max(r, g, b), d = max - min, h, s, l = (max + min) / 2;
	    if (d) {
	      s = l < .5 ? d / (max + min) : d / (2 - max - min);
	      if (r == max) h = (g - b) / d + (g < b ? 6 : 0); else if (g == max) h = (b - r) / d + 2; else h = (r - g) / d + 4;
	      h *= 60;
	    } else {
	      h = NaN;
	      s = l > 0 && l < 1 ? 0 : h;
	    }
	    return new d3_hsl(h, s, l);
	  }
	  function d3_rgb_lab(r, g, b) {
	    r = d3_rgb_xyz(r);
	    g = d3_rgb_xyz(g);
	    b = d3_rgb_xyz(b);
	    var x = d3_xyz_lab((.4124564 * r + .3575761 * g + .1804375 * b) / d3_lab_X), y = d3_xyz_lab((.2126729 * r + .7151522 * g + .072175 * b) / d3_lab_Y), z = d3_xyz_lab((.0193339 * r + .119192 * g + .9503041 * b) / d3_lab_Z);
	    return d3_lab(116 * y - 16, 500 * (x - y), 200 * (y - z));
	  }
	  function d3_rgb_xyz(r) {
	    return (r /= 255) <= .04045 ? r / 12.92 : Math.pow((r + .055) / 1.055, 2.4);
	  }
	  function d3_rgb_parseNumber(c) {
	    var f = parseFloat(c);
	    return c.charAt(c.length - 1) === "%" ? Math.round(f * 2.55) : f;
	  }
	  var d3_rgb_names = d3.map({
	    aliceblue: 15792383,
	    antiquewhite: 16444375,
	    aqua: 65535,
	    aquamarine: 8388564,
	    azure: 15794175,
	    beige: 16119260,
	    bisque: 16770244,
	    black: 0,
	    blanchedalmond: 16772045,
	    blue: 255,
	    blueviolet: 9055202,
	    brown: 10824234,
	    burlywood: 14596231,
	    cadetblue: 6266528,
	    chartreuse: 8388352,
	    chocolate: 13789470,
	    coral: 16744272,
	    cornflowerblue: 6591981,
	    cornsilk: 16775388,
	    crimson: 14423100,
	    cyan: 65535,
	    darkblue: 139,
	    darkcyan: 35723,
	    darkgoldenrod: 12092939,
	    darkgray: 11119017,
	    darkgreen: 25600,
	    darkgrey: 11119017,
	    darkkhaki: 12433259,
	    darkmagenta: 9109643,
	    darkolivegreen: 5597999,
	    darkorange: 16747520,
	    darkorchid: 10040012,
	    darkred: 9109504,
	    darksalmon: 15308410,
	    darkseagreen: 9419919,
	    darkslateblue: 4734347,
	    darkslategray: 3100495,
	    darkslategrey: 3100495,
	    darkturquoise: 52945,
	    darkviolet: 9699539,
	    deeppink: 16716947,
	    deepskyblue: 49151,
	    dimgray: 6908265,
	    dimgrey: 6908265,
	    dodgerblue: 2003199,
	    firebrick: 11674146,
	    floralwhite: 16775920,
	    forestgreen: 2263842,
	    fuchsia: 16711935,
	    gainsboro: 14474460,
	    ghostwhite: 16316671,
	    gold: 16766720,
	    goldenrod: 14329120,
	    gray: 8421504,
	    green: 32768,
	    greenyellow: 11403055,
	    grey: 8421504,
	    honeydew: 15794160,
	    hotpink: 16738740,
	    indianred: 13458524,
	    indigo: 4915330,
	    ivory: 16777200,
	    khaki: 15787660,
	    lavender: 15132410,
	    lavenderblush: 16773365,
	    lawngreen: 8190976,
	    lemonchiffon: 16775885,
	    lightblue: 11393254,
	    lightcoral: 15761536,
	    lightcyan: 14745599,
	    lightgoldenrodyellow: 16448210,
	    lightgray: 13882323,
	    lightgreen: 9498256,
	    lightgrey: 13882323,
	    lightpink: 16758465,
	    lightsalmon: 16752762,
	    lightseagreen: 2142890,
	    lightskyblue: 8900346,
	    lightslategray: 7833753,
	    lightslategrey: 7833753,
	    lightsteelblue: 11584734,
	    lightyellow: 16777184,
	    lime: 65280,
	    limegreen: 3329330,
	    linen: 16445670,
	    magenta: 16711935,
	    maroon: 8388608,
	    mediumaquamarine: 6737322,
	    mediumblue: 205,
	    mediumorchid: 12211667,
	    mediumpurple: 9662683,
	    mediumseagreen: 3978097,
	    mediumslateblue: 8087790,
	    mediumspringgreen: 64154,
	    mediumturquoise: 4772300,
	    mediumvioletred: 13047173,
	    midnightblue: 1644912,
	    mintcream: 16121850,
	    mistyrose: 16770273,
	    moccasin: 16770229,
	    navajowhite: 16768685,
	    navy: 128,
	    oldlace: 16643558,
	    olive: 8421376,
	    olivedrab: 7048739,
	    orange: 16753920,
	    orangered: 16729344,
	    orchid: 14315734,
	    palegoldenrod: 15657130,
	    palegreen: 10025880,
	    paleturquoise: 11529966,
	    palevioletred: 14381203,
	    papayawhip: 16773077,
	    peachpuff: 16767673,
	    peru: 13468991,
	    pink: 16761035,
	    plum: 14524637,
	    powderblue: 11591910,
	    purple: 8388736,
	    rebeccapurple: 6697881,
	    red: 16711680,
	    rosybrown: 12357519,
	    royalblue: 4286945,
	    saddlebrown: 9127187,
	    salmon: 16416882,
	    sandybrown: 16032864,
	    seagreen: 3050327,
	    seashell: 16774638,
	    sienna: 10506797,
	    silver: 12632256,
	    skyblue: 8900331,
	    slateblue: 6970061,
	    slategray: 7372944,
	    slategrey: 7372944,
	    snow: 16775930,
	    springgreen: 65407,
	    steelblue: 4620980,
	    tan: 13808780,
	    teal: 32896,
	    thistle: 14204888,
	    tomato: 16737095,
	    turquoise: 4251856,
	    violet: 15631086,
	    wheat: 16113331,
	    white: 16777215,
	    whitesmoke: 16119285,
	    yellow: 16776960,
	    yellowgreen: 10145074
	  });
	  d3_rgb_names.forEach(function(key, value) {
	    d3_rgb_names.set(key, d3_rgbNumber(value));
	  });
	  function d3_functor(v) {
	    return typeof v === "function" ? v : function() {
	      return v;
	    };
	  }
	  d3.functor = d3_functor;
	  d3.xhr = d3_xhrType(d3_identity);
	  function d3_xhrType(response) {
	    return function(url, mimeType, callback) {
	      if (arguments.length === 2 && typeof mimeType === "function") callback = mimeType, 
	      mimeType = null;
	      return d3_xhr(url, mimeType, response, callback);
	    };
	  }
	  function d3_xhr(url, mimeType, response, callback) {
	    var xhr = {}, dispatch = d3.dispatch("beforesend", "progress", "load", "error"), headers = {}, request = new XMLHttpRequest(), responseType = null;
	    if (this.XDomainRequest && !("withCredentials" in request) && /^(http(s)?:)?\/\//.test(url)) request = new XDomainRequest();
	    "onload" in request ? request.onload = request.onerror = respond : request.onreadystatechange = function() {
	      request.readyState > 3 && respond();
	    };
	    function respond() {
	      var status = request.status, result;
	      if (!status && d3_xhrHasResponse(request) || status >= 200 && status < 300 || status === 304) {
	        try {
	          result = response.call(xhr, request);
	        } catch (e) {
	          dispatch.error.call(xhr, e);
	          return;
	        }
	        dispatch.load.call(xhr, result);
	      } else {
	        dispatch.error.call(xhr, request);
	      }
	    }
	    request.onprogress = function(event) {
	      var o = d3.event;
	      d3.event = event;
	      try {
	        dispatch.progress.call(xhr, request);
	      } finally {
	        d3.event = o;
	      }
	    };
	    xhr.header = function(name, value) {
	      name = (name + "").toLowerCase();
	      if (arguments.length < 2) return headers[name];
	      if (value == null) delete headers[name]; else headers[name] = value + "";
	      return xhr;
	    };
	    xhr.mimeType = function(value) {
	      if (!arguments.length) return mimeType;
	      mimeType = value == null ? null : value + "";
	      return xhr;
	    };
	    xhr.responseType = function(value) {
	      if (!arguments.length) return responseType;
	      responseType = value;
	      return xhr;
	    };
	    xhr.response = function(value) {
	      response = value;
	      return xhr;
	    };
	    [ "get", "post" ].forEach(function(method) {
	      xhr[method] = function() {
	        return xhr.send.apply(xhr, [ method ].concat(d3_array(arguments)));
	      };
	    });
	    xhr.send = function(method, data, callback) {
	      if (arguments.length === 2 && typeof data === "function") callback = data, data = null;
	      request.open(method, url, true);
	      if (mimeType != null && !("accept" in headers)) headers["accept"] = mimeType + ",*/*";
	      if (request.setRequestHeader) for (var name in headers) request.setRequestHeader(name, headers[name]);
	      if (mimeType != null && request.overrideMimeType) request.overrideMimeType(mimeType);
	      if (responseType != null) request.responseType = responseType;
	      if (callback != null) xhr.on("error", callback).on("load", function(request) {
	        callback(null, request);
	      });
	      dispatch.beforesend.call(xhr, request);
	      request.send(data == null ? null : data);
	      return xhr;
	    };
	    xhr.abort = function() {
	      request.abort();
	      return xhr;
	    };
	    d3.rebind(xhr, dispatch, "on");
	    return callback == null ? xhr : xhr.get(d3_xhr_fixCallback(callback));
	  }
	  function d3_xhr_fixCallback(callback) {
	    return callback.length === 1 ? function(error, request) {
	      callback(error == null ? request : null);
	    } : callback;
	  }
	  function d3_xhrHasResponse(request) {
	    var type = request.responseType;
	    return type && type !== "text" ? request.response : request.responseText;
	  }
	  d3.dsv = function(delimiter, mimeType) {
	    var reFormat = new RegExp('["' + delimiter + "\n]"), delimiterCode = delimiter.charCodeAt(0);
	    function dsv(url, row, callback) {
	      if (arguments.length < 3) callback = row, row = null;
	      var xhr = d3_xhr(url, mimeType, row == null ? response : typedResponse(row), callback);
	      xhr.row = function(_) {
	        return arguments.length ? xhr.response((row = _) == null ? response : typedResponse(_)) : row;
	      };
	      return xhr;
	    }
	    function response(request) {
	      return dsv.parse(request.responseText);
	    }
	    function typedResponse(f) {
	      return function(request) {
	        return dsv.parse(request.responseText, f);
	      };
	    }
	    dsv.parse = function(text, f) {
	      var o;
	      return dsv.parseRows(text, function(row, i) {
	        if (o) return o(row, i - 1);
	        var a = new Function("d", "return {" + row.map(function(name, i) {
	          return JSON.stringify(name) + ": d[" + i + "]";
	        }).join(",") + "}");
	        o = f ? function(row, i) {
	          return f(a(row), i);
	        } : a;
	      });
	    };
	    dsv.parseRows = function(text, f) {
	      var EOL = {}, EOF = {}, rows = [], N = text.length, I = 0, n = 0, t, eol;
	      function token() {
	        if (I >= N) return EOF;
	        if (eol) return eol = false, EOL;
	        var j = I;
	        if (text.charCodeAt(j) === 34) {
	          var i = j;
	          while (i++ < N) {
	            if (text.charCodeAt(i) === 34) {
	              if (text.charCodeAt(i + 1) !== 34) break;
	              ++i;
	            }
	          }
	          I = i + 2;
	          var c = text.charCodeAt(i + 1);
	          if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(i + 2) === 10) ++I;
	          } else if (c === 10) {
	            eol = true;
	          }
	          return text.slice(j + 1, i).replace(/""/g, '"');
	        }
	        while (I < N) {
	          var c = text.charCodeAt(I++), k = 1;
	          if (c === 10) eol = true; else if (c === 13) {
	            eol = true;
	            if (text.charCodeAt(I) === 10) ++I, ++k;
	          } else if (c !== delimiterCode) continue;
	          return text.slice(j, I - k);
	        }
	        return text.slice(j);
	      }
	      while ((t = token()) !== EOF) {
	        var a = [];
	        while (t !== EOL && t !== EOF) {
	          a.push(t);
	          t = token();
	        }
	        if (f && (a = f(a, n++)) == null) continue;
	        rows.push(a);
	      }
	      return rows;
	    };
	    dsv.format = function(rows) {
	      if (Array.isArray(rows[0])) return dsv.formatRows(rows);
	      var fieldSet = new d3_Set(), fields = [];
	      rows.forEach(function(row) {
	        for (var field in row) {
	          if (!fieldSet.has(field)) {
	            fields.push(fieldSet.add(field));
	          }
	        }
	      });
	      return [ fields.map(formatValue).join(delimiter) ].concat(rows.map(function(row) {
	        return fields.map(function(field) {
	          return formatValue(row[field]);
	        }).join(delimiter);
	      })).join("\n");
	    };
	    dsv.formatRows = function(rows) {
	      return rows.map(formatRow).join("\n");
	    };
	    function formatRow(row) {
	      return row.map(formatValue).join(delimiter);
	    }
	    function formatValue(text) {
	      return reFormat.test(text) ? '"' + text.replace(/\"/g, '""') + '"' : text;
	    }
	    return dsv;
	  };
	  d3.csv = d3.dsv(",", "text/csv");
	  d3.tsv = d3.dsv("	", "text/tab-separated-values");
	  var d3_timer_queueHead, d3_timer_queueTail, d3_timer_interval, d3_timer_timeout, d3_timer_frame = this[d3_vendorSymbol(this, "requestAnimationFrame")] || function(callback) {
	    setTimeout(callback, 17);
	  };
	  d3.timer = function() {
	    d3_timer.apply(this, arguments);
	  };
	  function d3_timer(callback, delay, then) {
	    var n = arguments.length;
	    if (n < 2) delay = 0;
	    if (n < 3) then = Date.now();
	    var time = then + delay, timer = {
	      c: callback,
	      t: time,
	      n: null
	    };
	    if (d3_timer_queueTail) d3_timer_queueTail.n = timer; else d3_timer_queueHead = timer;
	    d3_timer_queueTail = timer;
	    if (!d3_timer_interval) {
	      d3_timer_timeout = clearTimeout(d3_timer_timeout);
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	    return timer;
	  }
	  function d3_timer_step() {
	    var now = d3_timer_mark(), delay = d3_timer_sweep() - now;
	    if (delay > 24) {
	      if (isFinite(delay)) {
	        clearTimeout(d3_timer_timeout);
	        d3_timer_timeout = setTimeout(d3_timer_step, delay);
	      }
	      d3_timer_interval = 0;
	    } else {
	      d3_timer_interval = 1;
	      d3_timer_frame(d3_timer_step);
	    }
	  }
	  d3.timer.flush = function() {
	    d3_timer_mark();
	    d3_timer_sweep();
	  };
	  function d3_timer_mark() {
	    var now = Date.now(), timer = d3_timer_queueHead;
	    while (timer) {
	      if (now >= timer.t && timer.c(now - timer.t)) timer.c = null;
	      timer = timer.n;
	    }
	    return now;
	  }
	  function d3_timer_sweep() {
	    var t0, t1 = d3_timer_queueHead, time = Infinity;
	    while (t1) {
	      if (t1.c) {
	        if (t1.t < time) time = t1.t;
	        t1 = (t0 = t1).n;
	      } else {
	        t1 = t0 ? t0.n = t1.n : d3_timer_queueHead = t1.n;
	      }
	    }
	    d3_timer_queueTail = t0;
	    return time;
	  }
	  function d3_format_precision(x, p) {
	    return p - (x ? Math.ceil(Math.log(x) / Math.LN10) : 1);
	  }
	  d3.round = function(x, n) {
	    return n ? Math.round(x * (n = Math.pow(10, n))) / n : Math.round(x);
	  };
	  var d3_formatPrefixes = [ "y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y" ].map(d3_formatPrefix);
	  d3.formatPrefix = function(value, precision) {
	    var i = 0;
	    if (value = +value) {
	      if (value < 0) value *= -1;
	      if (precision) value = d3.round(value, d3_format_precision(value, precision));
	      i = 1 + Math.floor(1e-12 + Math.log(value) / Math.LN10);
	      i = Math.max(-24, Math.min(24, Math.floor((i - 1) / 3) * 3));
	    }
	    return d3_formatPrefixes[8 + i / 3];
	  };
	  function d3_formatPrefix(d, i) {
	    var k = Math.pow(10, abs(8 - i) * 3);
	    return {
	      scale: i > 8 ? function(d) {
	        return d / k;
	      } : function(d) {
	        return d * k;
	      },
	      symbol: d
	    };
	  }
	  function d3_locale_numberFormat(locale) {
	    var locale_decimal = locale.decimal, locale_thousands = locale.thousands, locale_grouping = locale.grouping, locale_currency = locale.currency, formatGroup = locale_grouping && locale_thousands ? function(value, width) {
	      var i = value.length, t = [], j = 0, g = locale_grouping[0], length = 0;
	      while (i > 0 && g > 0) {
	        if (length + g + 1 > width) g = Math.max(1, width - length);
	        t.push(value.substring(i -= g, i + g));
	        if ((length += g + 1) > width) break;
	        g = locale_grouping[j = (j + 1) % locale_grouping.length];
	      }
	      return t.reverse().join(locale_thousands);
	    } : d3_identity;
	    return function(specifier) {
	      var match = d3_format_re.exec(specifier), fill = match[1] || " ", align = match[2] || ">", sign = match[3] || "-", symbol = match[4] || "", zfill = match[5], width = +match[6], comma = match[7], precision = match[8], type = match[9], scale = 1, prefix = "", suffix = "", integer = false, exponent = true;
	      if (precision) precision = +precision.substring(1);
	      if (zfill || fill === "0" && align === "=") {
	        zfill = fill = "0";
	        align = "=";
	      }
	      switch (type) {
	       case "n":
	        comma = true;
	        type = "g";
	        break;
	
	       case "%":
	        scale = 100;
	        suffix = "%";
	        type = "f";
	        break;
	
	       case "p":
	        scale = 100;
	        suffix = "%";
	        type = "r";
	        break;
	
	       case "b":
	       case "o":
	       case "x":
	       case "X":
	        if (symbol === "#") prefix = "0" + type.toLowerCase();
	
	       case "c":
	        exponent = false;
	
	       case "d":
	        integer = true;
	        precision = 0;
	        break;
	
	       case "s":
	        scale = -1;
	        type = "r";
	        break;
	      }
	      if (symbol === "$") prefix = locale_currency[0], suffix = locale_currency[1];
	      if (type == "r" && !precision) type = "g";
	      if (precision != null) {
	        if (type == "g") precision = Math.max(1, Math.min(21, precision)); else if (type == "e" || type == "f") precision = Math.max(0, Math.min(20, precision));
	      }
	      type = d3_format_types.get(type) || d3_format_typeDefault;
	      var zcomma = zfill && comma;
	      return function(value) {
	        var fullSuffix = suffix;
	        if (integer && value % 1) return "";
	        var negative = value < 0 || value === 0 && 1 / value < 0 ? (value = -value, "-") : sign === "-" ? "" : sign;
	        if (scale < 0) {
	          var unit = d3.formatPrefix(value, precision);
	          value = unit.scale(value);
	          fullSuffix = unit.symbol + suffix;
	        } else {
	          value *= scale;
	        }
	        value = type(value, precision);
	        var i = value.lastIndexOf("."), before, after;
	        if (i < 0) {
	          var j = exponent ? value.lastIndexOf("e") : -1;
	          if (j < 0) before = value, after = ""; else before = value.substring(0, j), after = value.substring(j);
	        } else {
	          before = value.substring(0, i);
	          after = locale_decimal + value.substring(i + 1);
	        }
	        if (!zfill && comma) before = formatGroup(before, Infinity);
	        var length = prefix.length + before.length + after.length + (zcomma ? 0 : negative.length), padding = length < width ? new Array(length = width - length + 1).join(fill) : "";
	        if (zcomma) before = formatGroup(padding + before, padding.length ? width - after.length : Infinity);
	        negative += prefix;
	        value = before + after;
	        return (align === "<" ? negative + value + padding : align === ">" ? padding + negative + value : align === "^" ? padding.substring(0, length >>= 1) + negative + value + padding.substring(length) : negative + (zcomma ? value : padding + value)) + fullSuffix;
	      };
	    };
	  }
	  var d3_format_re = /(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i;
	  var d3_format_types = d3.map({
	    b: function(x) {
	      return x.toString(2);
	    },
	    c: function(x) {
	      return String.fromCharCode(x);
	    },
	    o: function(x) {
	      return x.toString(8);
	    },
	    x: function(x) {
	      return x.toString(16);
	    },
	    X: function(x) {
	      return x.toString(16).toUpperCase();
	    },
	    g: function(x, p) {
	      return x.toPrecision(p);
	    },
	    e: function(x, p) {
	      return x.toExponential(p);
	    },
	    f: function(x, p) {
	      return x.toFixed(p);
	    },
	    r: function(x, p) {
	      return (x = d3.round(x, d3_format_precision(x, p))).toFixed(Math.max(0, Math.min(20, d3_format_precision(x * (1 + 1e-15), p))));
	    }
	  });
	  function d3_format_typeDefault(x) {
	    return x + "";
	  }
	  var d3_time = d3.time = {}, d3_date = Date;
	  function d3_date_utc() {
	    this._ = new Date(arguments.length > 1 ? Date.UTC.apply(this, arguments) : arguments[0]);
	  }
	  d3_date_utc.prototype = {
	    getDate: function() {
	      return this._.getUTCDate();
	    },
	    getDay: function() {
	      return this._.getUTCDay();
	    },
	    getFullYear: function() {
	      return this._.getUTCFullYear();
	    },
	    getHours: function() {
	      return this._.getUTCHours();
	    },
	    getMilliseconds: function() {
	      return this._.getUTCMilliseconds();
	    },
	    getMinutes: function() {
	      return this._.getUTCMinutes();
	    },
	    getMonth: function() {
	      return this._.getUTCMonth();
	    },
	    getSeconds: function() {
	      return this._.getUTCSeconds();
	    },
	    getTime: function() {
	      return this._.getTime();
	    },
	    getTimezoneOffset: function() {
	      return 0;
	    },
	    valueOf: function() {
	      return this._.valueOf();
	    },
	    setDate: function() {
	      d3_time_prototype.setUTCDate.apply(this._, arguments);
	    },
	    setDay: function() {
	      d3_time_prototype.setUTCDay.apply(this._, arguments);
	    },
	    setFullYear: function() {
	      d3_time_prototype.setUTCFullYear.apply(this._, arguments);
	    },
	    setHours: function() {
	      d3_time_prototype.setUTCHours.apply(this._, arguments);
	    },
	    setMilliseconds: function() {
	      d3_time_prototype.setUTCMilliseconds.apply(this._, arguments);
	    },
	    setMinutes: function() {
	      d3_time_prototype.setUTCMinutes.apply(this._, arguments);
	    },
	    setMonth: function() {
	      d3_time_prototype.setUTCMonth.apply(this._, arguments);
	    },
	    setSeconds: function() {
	      d3_time_prototype.setUTCSeconds.apply(this._, arguments);
	    },
	    setTime: function() {
	      d3_time_prototype.setTime.apply(this._, arguments);
	    }
	  };
	  var d3_time_prototype = Date.prototype;
	  function d3_time_interval(local, step, number) {
	    function round(date) {
	      var d0 = local(date), d1 = offset(d0, 1);
	      return date - d0 < d1 - date ? d0 : d1;
	    }
	    function ceil(date) {
	      step(date = local(new d3_date(date - 1)), 1);
	      return date;
	    }
	    function offset(date, k) {
	      step(date = new d3_date(+date), k);
	      return date;
	    }
	    function range(t0, t1, dt) {
	      var time = ceil(t0), times = [];
	      if (dt > 1) {
	        while (time < t1) {
	          if (!(number(time) % dt)) times.push(new Date(+time));
	          step(time, 1);
	        }
	      } else {
	        while (time < t1) times.push(new Date(+time)), step(time, 1);
	      }
	      return times;
	    }
	    function range_utc(t0, t1, dt) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = t0;
	        return range(utc, t1, dt);
	      } finally {
	        d3_date = Date;
	      }
	    }
	    local.floor = local;
	    local.round = round;
	    local.ceil = ceil;
	    local.offset = offset;
	    local.range = range;
	    var utc = local.utc = d3_time_interval_utc(local);
	    utc.floor = utc;
	    utc.round = d3_time_interval_utc(round);
	    utc.ceil = d3_time_interval_utc(ceil);
	    utc.offset = d3_time_interval_utc(offset);
	    utc.range = range_utc;
	    return local;
	  }
	  function d3_time_interval_utc(method) {
	    return function(date, k) {
	      try {
	        d3_date = d3_date_utc;
	        var utc = new d3_date_utc();
	        utc._ = date;
	        return method(utc, k)._;
	      } finally {
	        d3_date = Date;
	      }
	    };
	  }
	  d3_time.year = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setMonth(0, 1);
	    return date;
	  }, function(date, offset) {
	    date.setFullYear(date.getFullYear() + offset);
	  }, function(date) {
	    return date.getFullYear();
	  });
	  d3_time.years = d3_time.year.range;
	  d3_time.years.utc = d3_time.year.utc.range;
	  d3_time.day = d3_time_interval(function(date) {
	    var day = new d3_date(2e3, 0);
	    day.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
	    return day;
	  }, function(date, offset) {
	    date.setDate(date.getDate() + offset);
	  }, function(date) {
	    return date.getDate() - 1;
	  });
	  d3_time.days = d3_time.day.range;
	  d3_time.days.utc = d3_time.day.utc.range;
	  d3_time.dayOfYear = function(date) {
	    var year = d3_time.year(date);
	    return Math.floor((date - year - (date.getTimezoneOffset() - year.getTimezoneOffset()) * 6e4) / 864e5);
	  };
	  [ "sunday", "monday", "tuesday", "wednesday", "thursday", "friday", "saturday" ].forEach(function(day, i) {
	    i = 7 - i;
	    var interval = d3_time[day] = d3_time_interval(function(date) {
	      (date = d3_time.day(date)).setDate(date.getDate() - (date.getDay() + i) % 7);
	      return date;
	    }, function(date, offset) {
	      date.setDate(date.getDate() + Math.floor(offset) * 7);
	    }, function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7) - (day !== i);
	    });
	    d3_time[day + "s"] = interval.range;
	    d3_time[day + "s"].utc = interval.utc.range;
	    d3_time[day + "OfYear"] = function(date) {
	      var day = d3_time.year(date).getDay();
	      return Math.floor((d3_time.dayOfYear(date) + (day + i) % 7) / 7);
	    };
	  });
	  d3_time.week = d3_time.sunday;
	  d3_time.weeks = d3_time.sunday.range;
	  d3_time.weeks.utc = d3_time.sunday.utc.range;
	  d3_time.weekOfYear = d3_time.sundayOfYear;
	  function d3_locale_timeFormat(locale) {
	    var locale_dateTime = locale.dateTime, locale_date = locale.date, locale_time = locale.time, locale_periods = locale.periods, locale_days = locale.days, locale_shortDays = locale.shortDays, locale_months = locale.months, locale_shortMonths = locale.shortMonths;
	    function d3_time_format(template) {
	      var n = template.length;
	      function format(date) {
	        var string = [], i = -1, j = 0, c, p, f;
	        while (++i < n) {
	          if (template.charCodeAt(i) === 37) {
	            string.push(template.slice(j, i));
	            if ((p = d3_time_formatPads[c = template.charAt(++i)]) != null) c = template.charAt(++i);
	            if (f = d3_time_formats[c]) c = f(date, p == null ? c === "e" ? " " : "0" : p);
	            string.push(c);
	            j = i + 1;
	          }
	        }
	        string.push(template.slice(j, i));
	        return string.join("");
	      }
	      format.parse = function(string) {
	        var d = {
	          y: 1900,
	          m: 0,
	          d: 1,
	          H: 0,
	          M: 0,
	          S: 0,
	          L: 0,
	          Z: null
	        }, i = d3_time_parse(d, template, string, 0);
	        if (i != string.length) return null;
	        if ("p" in d) d.H = d.H % 12 + d.p * 12;
	        var localZ = d.Z != null && d3_date !== d3_date_utc, date = new (localZ ? d3_date_utc : d3_date)();
	        if ("j" in d) date.setFullYear(d.y, 0, d.j); else if ("W" in d || "U" in d) {
	          if (!("w" in d)) d.w = "W" in d ? 1 : 0;
	          date.setFullYear(d.y, 0, 1);
	          date.setFullYear(d.y, 0, "W" in d ? (d.w + 6) % 7 + d.W * 7 - (date.getDay() + 5) % 7 : d.w + d.U * 7 - (date.getDay() + 6) % 7);
	        } else date.setFullYear(d.y, d.m, d.d);
	        date.setHours(d.H + (d.Z / 100 | 0), d.M + d.Z % 100, d.S, d.L);
	        return localZ ? date._ : date;
	      };
	      format.toString = function() {
	        return template;
	      };
	      return format;
	    }
	    function d3_time_parse(date, template, string, j) {
	      var c, p, t, i = 0, n = template.length, m = string.length;
	      while (i < n) {
	        if (j >= m) return -1;
	        c = template.charCodeAt(i++);
	        if (c === 37) {
	          t = template.charAt(i++);
	          p = d3_time_parsers[t in d3_time_formatPads ? template.charAt(i++) : t];
	          if (!p || (j = p(date, string, j)) < 0) return -1;
	        } else if (c != string.charCodeAt(j++)) {
	          return -1;
	        }
	      }
	      return j;
	    }
	    d3_time_format.utc = function(template) {
	      var local = d3_time_format(template);
	      function format(date) {
	        try {
	          d3_date = d3_date_utc;
	          var utc = new d3_date();
	          utc._ = date;
	          return local(utc);
	        } finally {
	          d3_date = Date;
	        }
	      }
	      format.parse = function(string) {
	        try {
	          d3_date = d3_date_utc;
	          var date = local.parse(string);
	          return date && date._;
	        } finally {
	          d3_date = Date;
	        }
	      };
	      format.toString = local.toString;
	      return format;
	    };
	    d3_time_format.multi = d3_time_format.utc.multi = d3_time_formatMulti;
	    var d3_time_periodLookup = d3.map(), d3_time_dayRe = d3_time_formatRe(locale_days), d3_time_dayLookup = d3_time_formatLookup(locale_days), d3_time_dayAbbrevRe = d3_time_formatRe(locale_shortDays), d3_time_dayAbbrevLookup = d3_time_formatLookup(locale_shortDays), d3_time_monthRe = d3_time_formatRe(locale_months), d3_time_monthLookup = d3_time_formatLookup(locale_months), d3_time_monthAbbrevRe = d3_time_formatRe(locale_shortMonths), d3_time_monthAbbrevLookup = d3_time_formatLookup(locale_shortMonths);
	    locale_periods.forEach(function(p, i) {
	      d3_time_periodLookup.set(p.toLowerCase(), i);
	    });
	    var d3_time_formats = {
	      a: function(d) {
	        return locale_shortDays[d.getDay()];
	      },
	      A: function(d) {
	        return locale_days[d.getDay()];
	      },
	      b: function(d) {
	        return locale_shortMonths[d.getMonth()];
	      },
	      B: function(d) {
	        return locale_months[d.getMonth()];
	      },
	      c: d3_time_format(locale_dateTime),
	      d: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      e: function(d, p) {
	        return d3_time_formatPad(d.getDate(), p, 2);
	      },
	      H: function(d, p) {
	        return d3_time_formatPad(d.getHours(), p, 2);
	      },
	      I: function(d, p) {
	        return d3_time_formatPad(d.getHours() % 12 || 12, p, 2);
	      },
	      j: function(d, p) {
	        return d3_time_formatPad(1 + d3_time.dayOfYear(d), p, 3);
	      },
	      L: function(d, p) {
	        return d3_time_formatPad(d.getMilliseconds(), p, 3);
	      },
	      m: function(d, p) {
	        return d3_time_formatPad(d.getMonth() + 1, p, 2);
	      },
	      M: function(d, p) {
	        return d3_time_formatPad(d.getMinutes(), p, 2);
	      },
	      p: function(d) {
	        return locale_periods[+(d.getHours() >= 12)];
	      },
	      S: function(d, p) {
	        return d3_time_formatPad(d.getSeconds(), p, 2);
	      },
	      U: function(d, p) {
	        return d3_time_formatPad(d3_time.sundayOfYear(d), p, 2);
	      },
	      w: function(d) {
	        return d.getDay();
	      },
	      W: function(d, p) {
	        return d3_time_formatPad(d3_time.mondayOfYear(d), p, 2);
	      },
	      x: d3_time_format(locale_date),
	      X: d3_time_format(locale_time),
	      y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 100, p, 2);
	      },
	      Y: function(d, p) {
	        return d3_time_formatPad(d.getFullYear() % 1e4, p, 4);
	      },
	      Z: d3_time_zone,
	      "%": function() {
	        return "%";
	      }
	    };
	    var d3_time_parsers = {
	      a: d3_time_parseWeekdayAbbrev,
	      A: d3_time_parseWeekday,
	      b: d3_time_parseMonthAbbrev,
	      B: d3_time_parseMonth,
	      c: d3_time_parseLocaleFull,
	      d: d3_time_parseDay,
	      e: d3_time_parseDay,
	      H: d3_time_parseHour24,
	      I: d3_time_parseHour24,
	      j: d3_time_parseDayOfYear,
	      L: d3_time_parseMilliseconds,
	      m: d3_time_parseMonthNumber,
	      M: d3_time_parseMinutes,
	      p: d3_time_parseAmPm,
	      S: d3_time_parseSeconds,
	      U: d3_time_parseWeekNumberSunday,
	      w: d3_time_parseWeekdayNumber,
	      W: d3_time_parseWeekNumberMonday,
	      x: d3_time_parseLocaleDate,
	      X: d3_time_parseLocaleTime,
	      y: d3_time_parseYear,
	      Y: d3_time_parseFullYear,
	      Z: d3_time_parseZone,
	      "%": d3_time_parseLiteralPercent
	    };
	    function d3_time_parseWeekdayAbbrev(date, string, i) {
	      d3_time_dayAbbrevRe.lastIndex = 0;
	      var n = d3_time_dayAbbrevRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseWeekday(date, string, i) {
	      d3_time_dayRe.lastIndex = 0;
	      var n = d3_time_dayRe.exec(string.slice(i));
	      return n ? (date.w = d3_time_dayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonthAbbrev(date, string, i) {
	      d3_time_monthAbbrevRe.lastIndex = 0;
	      var n = d3_time_monthAbbrevRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthAbbrevLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseMonth(date, string, i) {
	      d3_time_monthRe.lastIndex = 0;
	      var n = d3_time_monthRe.exec(string.slice(i));
	      return n ? (date.m = d3_time_monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
	    }
	    function d3_time_parseLocaleFull(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.c.toString(), string, i);
	    }
	    function d3_time_parseLocaleDate(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.x.toString(), string, i);
	    }
	    function d3_time_parseLocaleTime(date, string, i) {
	      return d3_time_parse(date, d3_time_formats.X.toString(), string, i);
	    }
	    function d3_time_parseAmPm(date, string, i) {
	      var n = d3_time_periodLookup.get(string.slice(i, i += 2).toLowerCase());
	      return n == null ? -1 : (date.p = n, i);
	    }
	    return d3_time_format;
	  }
	  var d3_time_formatPads = {
	    "-": "",
	    _: " ",
	    "0": "0"
	  }, d3_time_numberRe = /^\s*\d+/, d3_time_percentRe = /^%/;
	  function d3_time_formatPad(value, fill, width) {
	    var sign = value < 0 ? "-" : "", string = (sign ? -value : value) + "", length = string.length;
	    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	  }
	  function d3_time_formatRe(names) {
	    return new RegExp("^(?:" + names.map(d3.requote).join("|") + ")", "i");
	  }
	  function d3_time_formatLookup(names) {
	    var map = new d3_Map(), i = -1, n = names.length;
	    while (++i < n) map.set(names[i].toLowerCase(), i);
	    return map;
	  }
	  function d3_time_parseWeekdayNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 1));
	    return n ? (date.w = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberSunday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.U = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseWeekNumberMonday(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i));
	    return n ? (date.W = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseFullYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 4));
	    return n ? (date.y = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.y = d3_time_expandYear(+n[0]), i + n[0].length) : -1;
	  }
	  function d3_time_parseZone(date, string, i) {
	    return /^[+-]\d{4}$/.test(string = string.slice(i, i + 5)) ? (date.Z = -string, 
	    i + 5) : -1;
	  }
	  function d3_time_expandYear(d) {
	    return d + (d > 68 ? 1900 : 2e3);
	  }
	  function d3_time_parseMonthNumber(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.m = n[0] - 1, i + n[0].length) : -1;
	  }
	  function d3_time_parseDay(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.d = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseDayOfYear(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.j = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseHour24(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.H = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMinutes(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.M = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseSeconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 2));
	    return n ? (date.S = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_parseMilliseconds(date, string, i) {
	    d3_time_numberRe.lastIndex = 0;
	    var n = d3_time_numberRe.exec(string.slice(i, i + 3));
	    return n ? (date.L = +n[0], i + n[0].length) : -1;
	  }
	  function d3_time_zone(d) {
	    var z = d.getTimezoneOffset(), zs = z > 0 ? "-" : "+", zh = abs(z) / 60 | 0, zm = abs(z) % 60;
	    return zs + d3_time_formatPad(zh, "0", 2) + d3_time_formatPad(zm, "0", 2);
	  }
	  function d3_time_parseLiteralPercent(date, string, i) {
	    d3_time_percentRe.lastIndex = 0;
	    var n = d3_time_percentRe.exec(string.slice(i, i + 1));
	    return n ? i + n[0].length : -1;
	  }
	  function d3_time_formatMulti(formats) {
	    var n = formats.length, i = -1;
	    while (++i < n) formats[i][0] = this(formats[i][0]);
	    return function(date) {
	      var i = 0, f = formats[i];
	      while (!f[1](date)) f = formats[++i];
	      return f[0](date);
	    };
	  }
	  d3.locale = function(locale) {
	    return {
	      numberFormat: d3_locale_numberFormat(locale),
	      timeFormat: d3_locale_timeFormat(locale)
	    };
	  };
	  var d3_locale_enUS = d3.locale({
	    decimal: ".",
	    thousands: ",",
	    grouping: [ 3 ],
	    currency: [ "$", "" ],
	    dateTime: "%a %b %e %X %Y",
	    date: "%m/%d/%Y",
	    time: "%H:%M:%S",
	    periods: [ "AM", "PM" ],
	    days: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
	    shortDays: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
	    months: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
	    shortMonths: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ]
	  });
	  d3.format = d3_locale_enUS.numberFormat;
	  d3.geo = {};
	  function d3_adder() {}
	  d3_adder.prototype = {
	    s: 0,
	    t: 0,
	    add: function(y) {
	      d3_adderSum(y, this.t, d3_adderTemp);
	      d3_adderSum(d3_adderTemp.s, this.s, this);
	      if (this.s) this.t += d3_adderTemp.t; else this.s = d3_adderTemp.t;
	    },
	    reset: function() {
	      this.s = this.t = 0;
	    },
	    valueOf: function() {
	      return this.s;
	    }
	  };
	  var d3_adderTemp = new d3_adder();
	  function d3_adderSum(a, b, o) {
	    var x = o.s = a + b, bv = x - a, av = x - bv;
	    o.t = a - av + (b - bv);
	  }
	  d3.geo.stream = function(object, listener) {
	    if (object && d3_geo_streamObjectType.hasOwnProperty(object.type)) {
	      d3_geo_streamObjectType[object.type](object, listener);
	    } else {
	      d3_geo_streamGeometry(object, listener);
	    }
	  };
	  function d3_geo_streamGeometry(geometry, listener) {
	    if (geometry && d3_geo_streamGeometryType.hasOwnProperty(geometry.type)) {
	      d3_geo_streamGeometryType[geometry.type](geometry, listener);
	    }
	  }
	  var d3_geo_streamObjectType = {
	    Feature: function(feature, listener) {
	      d3_geo_streamGeometry(feature.geometry, listener);
	    },
	    FeatureCollection: function(object, listener) {
	      var features = object.features, i = -1, n = features.length;
	      while (++i < n) d3_geo_streamGeometry(features[i].geometry, listener);
	    }
	  };
	  var d3_geo_streamGeometryType = {
	    Sphere: function(object, listener) {
	      listener.sphere();
	    },
	    Point: function(object, listener) {
	      object = object.coordinates;
	      listener.point(object[0], object[1], object[2]);
	    },
	    MultiPoint: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) object = coordinates[i], listener.point(object[0], object[1], object[2]);
	    },
	    LineString: function(object, listener) {
	      d3_geo_streamLine(object.coordinates, listener, 0);
	    },
	    MultiLineString: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamLine(coordinates[i], listener, 0);
	    },
	    Polygon: function(object, listener) {
	      d3_geo_streamPolygon(object.coordinates, listener);
	    },
	    MultiPolygon: function(object, listener) {
	      var coordinates = object.coordinates, i = -1, n = coordinates.length;
	      while (++i < n) d3_geo_streamPolygon(coordinates[i], listener);
	    },
	    GeometryCollection: function(object, listener) {
	      var geometries = object.geometries, i = -1, n = geometries.length;
	      while (++i < n) d3_geo_streamGeometry(geometries[i], listener);
	    }
	  };
	  function d3_geo_streamLine(coordinates, listener, closed) {
	    var i = -1, n = coordinates.length - closed, coordinate;
	    listener.lineStart();
	    while (++i < n) coordinate = coordinates[i], listener.point(coordinate[0], coordinate[1], coordinate[2]);
	    listener.lineEnd();
	  }
	  function d3_geo_streamPolygon(coordinates, listener) {
	    var i = -1, n = coordinates.length;
	    listener.polygonStart();
	    while (++i < n) d3_geo_streamLine(coordinates[i], listener, 1);
	    listener.polygonEnd();
	  }
	  d3.geo.area = function(object) {
	    d3_geo_areaSum = 0;
	    d3.geo.stream(object, d3_geo_area);
	    return d3_geo_areaSum;
	  };
	  var d3_geo_areaSum, d3_geo_areaRingSum = new d3_adder();
	  var d3_geo_area = {
	    sphere: function() {
	      d3_geo_areaSum += 4 * π;
	    },
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_areaRingSum.reset();
	      d3_geo_area.lineStart = d3_geo_areaRingStart;
	    },
	    polygonEnd: function() {
	      var area = 2 * d3_geo_areaRingSum;
	      d3_geo_areaSum += area < 0 ? 4 * π + area : area;
	      d3_geo_area.lineStart = d3_geo_area.lineEnd = d3_geo_area.point = d3_noop;
	    }
	  };
	  function d3_geo_areaRingStart() {
	    var λ00, φ00, λ0, cosφ0, sinφ0;
	    d3_geo_area.point = function(λ, φ) {
	      d3_geo_area.point = nextPoint;
	      λ0 = (λ00 = λ) * d3_radians, cosφ0 = Math.cos(φ = (φ00 = φ) * d3_radians / 2 + π / 4), 
	      sinφ0 = Math.sin(φ);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      φ = φ * d3_radians / 2 + π / 4;
	      var dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, cosφ = Math.cos(φ), sinφ = Math.sin(φ), k = sinφ0 * sinφ, u = cosφ0 * cosφ + k * Math.cos(adλ), v = k * sdλ * Math.sin(adλ);
	      d3_geo_areaRingSum.add(Math.atan2(v, u));
	      λ0 = λ, cosφ0 = cosφ, sinφ0 = sinφ;
	    }
	    d3_geo_area.lineEnd = function() {
	      nextPoint(λ00, φ00);
	    };
	  }
	  function d3_geo_cartesian(spherical) {
	    var λ = spherical[0], φ = spherical[1], cosφ = Math.cos(φ);
	    return [ cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ) ];
	  }
	  function d3_geo_cartesianDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	  }
	  function d3_geo_cartesianCross(a, b) {
	    return [ a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0] ];
	  }
	  function d3_geo_cartesianAdd(a, b) {
	    a[0] += b[0];
	    a[1] += b[1];
	    a[2] += b[2];
	  }
	  function d3_geo_cartesianScale(vector, k) {
	    return [ vector[0] * k, vector[1] * k, vector[2] * k ];
	  }
	  function d3_geo_cartesianNormalize(d) {
	    var l = Math.sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	    d[0] /= l;
	    d[1] /= l;
	    d[2] /= l;
	  }
	  function d3_geo_spherical(cartesian) {
	    return [ Math.atan2(cartesian[1], cartesian[0]), d3_asin(cartesian[2]) ];
	  }
	  function d3_geo_sphericalEqual(a, b) {
	    return abs(a[0] - b[0]) < ε && abs(a[1] - b[1]) < ε;
	  }
	  d3.geo.bounds = function() {
	    var λ0, φ0, λ1, φ1, λ_, λ__, φ__, p0, dλSum, ranges, range;
	    var bound = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        bound.point = ringPoint;
	        bound.lineStart = ringStart;
	        bound.lineEnd = ringEnd;
	        dλSum = 0;
	        d3_geo_area.polygonStart();
	      },
	      polygonEnd: function() {
	        d3_geo_area.polygonEnd();
	        bound.point = point;
	        bound.lineStart = lineStart;
	        bound.lineEnd = lineEnd;
	        if (d3_geo_areaRingSum < 0) λ0 = -(λ1 = 180), φ0 = -(φ1 = 90); else if (dλSum > ε) φ1 = 90; else if (dλSum < -ε) φ0 = -90;
	        range[0] = λ0, range[1] = λ1;
	      }
	    };
	    function point(λ, φ) {
	      ranges.push(range = [ λ0 = λ, λ1 = λ ]);
	      if (φ < φ0) φ0 = φ;
	      if (φ > φ1) φ1 = φ;
	    }
	    function linePoint(λ, φ) {
	      var p = d3_geo_cartesian([ λ * d3_radians, φ * d3_radians ]);
	      if (p0) {
	        var normal = d3_geo_cartesianCross(p0, p), equatorial = [ normal[1], -normal[0], 0 ], inflection = d3_geo_cartesianCross(equatorial, normal);
	        d3_geo_cartesianNormalize(inflection);
	        inflection = d3_geo_spherical(inflection);
	        var dλ = λ - λ_, s = dλ > 0 ? 1 : -1, λi = inflection[0] * d3_degrees * s, antimeridian = abs(dλ) > 180;
	        if (antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = inflection[1] * d3_degrees;
	          if (φi > φ1) φ1 = φi;
	        } else if (λi = (λi + 360) % 360 - 180, antimeridian ^ (s * λ_ < λi && λi < s * λ)) {
	          var φi = -inflection[1] * d3_degrees;
	          if (φi < φ0) φ0 = φi;
	        } else {
	          if (φ < φ0) φ0 = φ;
	          if (φ > φ1) φ1 = φ;
	        }
	        if (antimeridian) {
	          if (λ < λ_) {
	            if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	          } else {
	            if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	          }
	        } else {
	          if (λ1 >= λ0) {
	            if (λ < λ0) λ0 = λ;
	            if (λ > λ1) λ1 = λ;
	          } else {
	            if (λ > λ_) {
	              if (angle(λ0, λ) > angle(λ0, λ1)) λ1 = λ;
	            } else {
	              if (angle(λ, λ1) > angle(λ0, λ1)) λ0 = λ;
	            }
	          }
	        }
	      } else {
	        point(λ, φ);
	      }
	      p0 = p, λ_ = λ;
	    }
	    function lineStart() {
	      bound.point = linePoint;
	    }
	    function lineEnd() {
	      range[0] = λ0, range[1] = λ1;
	      bound.point = point;
	      p0 = null;
	    }
	    function ringPoint(λ, φ) {
	      if (p0) {
	        var dλ = λ - λ_;
	        dλSum += abs(dλ) > 180 ? dλ + (dλ > 0 ? 360 : -360) : dλ;
	      } else λ__ = λ, φ__ = φ;
	      d3_geo_area.point(λ, φ);
	      linePoint(λ, φ);
	    }
	    function ringStart() {
	      d3_geo_area.lineStart();
	    }
	    function ringEnd() {
	      ringPoint(λ__, φ__);
	      d3_geo_area.lineEnd();
	      if (abs(dλSum) > ε) λ0 = -(λ1 = 180);
	      range[0] = λ0, range[1] = λ1;
	      p0 = null;
	    }
	    function angle(λ0, λ1) {
	      return (λ1 -= λ0) < 0 ? λ1 + 360 : λ1;
	    }
	    function compareRanges(a, b) {
	      return a[0] - b[0];
	    }
	    function withinRange(x, range) {
	      return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
	    }
	    return function(feature) {
	      φ1 = λ1 = -(λ0 = φ0 = Infinity);
	      ranges = [];
	      d3.geo.stream(feature, bound);
	      var n = ranges.length;
	      if (n) {
	        ranges.sort(compareRanges);
	        for (var i = 1, a = ranges[0], b, merged = [ a ]; i < n; ++i) {
	          b = ranges[i];
	          if (withinRange(b[0], a) || withinRange(b[1], a)) {
	            if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	            if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	          } else {
	            merged.push(a = b);
	          }
	        }
	        var best = -Infinity, dλ;
	        for (var n = merged.length - 1, i = 0, a = merged[n], b; i <= n; a = b, ++i) {
	          b = merged[i];
	          if ((dλ = angle(a[1], b[0])) > best) best = dλ, λ0 = b[0], λ1 = a[1];
	        }
	      }
	      ranges = range = null;
	      return λ0 === Infinity || φ0 === Infinity ? [ [ NaN, NaN ], [ NaN, NaN ] ] : [ [ λ0, φ0 ], [ λ1, φ1 ] ];
	    };
	  }();
	  d3.geo.centroid = function(object) {
	    d3_geo_centroidW0 = d3_geo_centroidW1 = d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	    d3.geo.stream(object, d3_geo_centroid);
	    var x = d3_geo_centroidX2, y = d3_geo_centroidY2, z = d3_geo_centroidZ2, m = x * x + y * y + z * z;
	    if (m < ε2) {
	      x = d3_geo_centroidX1, y = d3_geo_centroidY1, z = d3_geo_centroidZ1;
	      if (d3_geo_centroidW1 < ε) x = d3_geo_centroidX0, y = d3_geo_centroidY0, z = d3_geo_centroidZ0;
	      m = x * x + y * y + z * z;
	      if (m < ε2) return [ NaN, NaN ];
	    }
	    return [ Math.atan2(y, x) * d3_degrees, d3_asin(z / Math.sqrt(m)) * d3_degrees ];
	  };
	  var d3_geo_centroidW0, d3_geo_centroidW1, d3_geo_centroidX0, d3_geo_centroidY0, d3_geo_centroidZ0, d3_geo_centroidX1, d3_geo_centroidY1, d3_geo_centroidZ1, d3_geo_centroidX2, d3_geo_centroidY2, d3_geo_centroidZ2;
	  var d3_geo_centroid = {
	    sphere: d3_noop,
	    point: d3_geo_centroidPoint,
	    lineStart: d3_geo_centroidLineStart,
	    lineEnd: d3_geo_centroidLineEnd,
	    polygonStart: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_centroid.lineStart = d3_geo_centroidLineStart;
	    }
	  };
	  function d3_geo_centroidPoint(λ, φ) {
	    λ *= d3_radians;
	    var cosφ = Math.cos(φ *= d3_radians);
	    d3_geo_centroidPointXYZ(cosφ * Math.cos(λ), cosφ * Math.sin(λ), Math.sin(φ));
	  }
	  function d3_geo_centroidPointXYZ(x, y, z) {
	    ++d3_geo_centroidW0;
	    d3_geo_centroidX0 += (x - d3_geo_centroidX0) / d3_geo_centroidW0;
	    d3_geo_centroidY0 += (y - d3_geo_centroidY0) / d3_geo_centroidW0;
	    d3_geo_centroidZ0 += (z - d3_geo_centroidZ0) / d3_geo_centroidW0;
	  }
	  function d3_geo_centroidLineStart() {
	    var x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroid.point = nextPoint;
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), w = Math.atan2(Math.sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_centroidLineEnd() {
	    d3_geo_centroid.point = d3_geo_centroidPoint;
	  }
	  function d3_geo_centroidRingStart() {
	    var λ00, φ00, x0, y0, z0;
	    d3_geo_centroid.point = function(λ, φ) {
	      λ00 = λ, φ00 = φ;
	      d3_geo_centroid.point = nextPoint;
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians);
	      x0 = cosφ * Math.cos(λ);
	      y0 = cosφ * Math.sin(λ);
	      z0 = Math.sin(φ);
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    };
	    d3_geo_centroid.lineEnd = function() {
	      nextPoint(λ00, φ00);
	      d3_geo_centroid.lineEnd = d3_geo_centroidLineEnd;
	      d3_geo_centroid.point = d3_geo_centroidPoint;
	    };
	    function nextPoint(λ, φ) {
	      λ *= d3_radians;
	      var cosφ = Math.cos(φ *= d3_radians), x = cosφ * Math.cos(λ), y = cosφ * Math.sin(λ), z = Math.sin(φ), cx = y0 * z - z0 * y, cy = z0 * x - x0 * z, cz = x0 * y - y0 * x, m = Math.sqrt(cx * cx + cy * cy + cz * cz), u = x0 * x + y0 * y + z0 * z, v = m && -d3_acos(u) / m, w = Math.atan2(m, u);
	      d3_geo_centroidX2 += v * cx;
	      d3_geo_centroidY2 += v * cy;
	      d3_geo_centroidZ2 += v * cz;
	      d3_geo_centroidW1 += w;
	      d3_geo_centroidX1 += w * (x0 + (x0 = x));
	      d3_geo_centroidY1 += w * (y0 + (y0 = y));
	      d3_geo_centroidZ1 += w * (z0 + (z0 = z));
	      d3_geo_centroidPointXYZ(x0, y0, z0);
	    }
	  }
	  function d3_geo_compose(a, b) {
	    function compose(x, y) {
	      return x = a(x, y), b(x[0], x[1]);
	    }
	    if (a.invert && b.invert) compose.invert = function(x, y) {
	      return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	    };
	    return compose;
	  }
	  function d3_true() {
	    return true;
	  }
	  function d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener) {
	    var subject = [], clip = [];
	    segments.forEach(function(segment) {
	      if ((n = segment.length - 1) <= 0) return;
	      var n, p0 = segment[0], p1 = segment[n];
	      if (d3_geo_sphericalEqual(p0, p1)) {
	        listener.lineStart();
	        for (var i = 0; i < n; ++i) listener.point((p0 = segment[i])[0], p0[1]);
	        listener.lineEnd();
	        return;
	      }
	      var a = new d3_geo_clipPolygonIntersection(p0, segment, null, true), b = new d3_geo_clipPolygonIntersection(p0, null, a, false);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	      a = new d3_geo_clipPolygonIntersection(p1, segment, null, false);
	      b = new d3_geo_clipPolygonIntersection(p1, null, a, true);
	      a.o = b;
	      subject.push(a);
	      clip.push(b);
	    });
	    clip.sort(compare);
	    d3_geo_clipPolygonLinkCircular(subject);
	    d3_geo_clipPolygonLinkCircular(clip);
	    if (!subject.length) return;
	    for (var i = 0, entry = clipStartInside, n = clip.length; i < n; ++i) {
	      clip[i].e = entry = !entry;
	    }
	    var start = subject[0], points, point;
	    while (1) {
	      var current = start, isSubject = true;
	      while (current.v) if ((current = current.n) === start) return;
	      points = current.z;
	      listener.lineStart();
	      do {
	        current.v = current.o.v = true;
	        if (current.e) {
	          if (isSubject) {
	            for (var i = 0, n = points.length; i < n; ++i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.n.x, 1, listener);
	          }
	          current = current.n;
	        } else {
	          if (isSubject) {
	            points = current.p.z;
	            for (var i = points.length - 1; i >= 0; --i) listener.point((point = points[i])[0], point[1]);
	          } else {
	            interpolate(current.x, current.p.x, -1, listener);
	          }
	          current = current.p;
	        }
	        current = current.o;
	        points = current.z;
	        isSubject = !isSubject;
	      } while (!current.v);
	      listener.lineEnd();
	    }
	  }
	  function d3_geo_clipPolygonLinkCircular(array) {
	    if (!(n = array.length)) return;
	    var n, i = 0, a = array[0], b;
	    while (++i < n) {
	      a.n = b = array[i];
	      b.p = a;
	      a = b;
	    }
	    a.n = b = array[0];
	    b.p = a;
	  }
	  function d3_geo_clipPolygonIntersection(point, points, other, entry) {
	    this.x = point;
	    this.z = points;
	    this.o = other;
	    this.e = entry;
	    this.v = false;
	    this.n = this.p = null;
	  }
	  function d3_geo_clip(pointVisible, clipLine, interpolate, clipStart) {
	    return function(rotate, listener) {
	      var line = clipLine(listener), rotatedClipStart = rotate.invert(clipStart[0], clipStart[1]);
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          clip.point = pointRing;
	          clip.lineStart = ringStart;
	          clip.lineEnd = ringEnd;
	          segments = [];
	          polygon = [];
	        },
	        polygonEnd: function() {
	          clip.point = point;
	          clip.lineStart = lineStart;
	          clip.lineEnd = lineEnd;
	          segments = d3.merge(segments);
	          var clipStartInside = d3_geo_pointInPolygon(rotatedClipStart, polygon);
	          if (segments.length) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            d3_geo_clipPolygon(segments, d3_geo_clipSort, clipStartInside, interpolate, listener);
	          } else if (clipStartInside) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            interpolate(null, null, 1, listener);
	            listener.lineEnd();
	          }
	          if (polygonStarted) listener.polygonEnd(), polygonStarted = false;
	          segments = polygon = null;
	        },
	        sphere: function() {
	          listener.polygonStart();
	          listener.lineStart();
	          interpolate(null, null, 1, listener);
	          listener.lineEnd();
	          listener.polygonEnd();
	        }
	      };
	      function point(λ, φ) {
	        var point = rotate(λ, φ);
	        if (pointVisible(λ = point[0], φ = point[1])) listener.point(λ, φ);
	      }
	      function pointLine(λ, φ) {
	        var point = rotate(λ, φ);
	        line.point(point[0], point[1]);
	      }
	      function lineStart() {
	        clip.point = pointLine;
	        line.lineStart();
	      }
	      function lineEnd() {
	        clip.point = point;
	        line.lineEnd();
	      }
	      var segments;
	      var buffer = d3_geo_clipBufferListener(), ringListener = clipLine(buffer), polygonStarted = false, polygon, ring;
	      function pointRing(λ, φ) {
	        ring.push([ λ, φ ]);
	        var point = rotate(λ, φ);
	        ringListener.point(point[0], point[1]);
	      }
	      function ringStart() {
	        ringListener.lineStart();
	        ring = [];
	      }
	      function ringEnd() {
	        pointRing(ring[0][0], ring[0][1]);
	        ringListener.lineEnd();
	        var clean = ringListener.clean(), ringSegments = buffer.buffer(), segment, n = ringSegments.length;
	        ring.pop();
	        polygon.push(ring);
	        ring = null;
	        if (!n) return;
	        if (clean & 1) {
	          segment = ringSegments[0];
	          var n = segment.length - 1, i = -1, point;
	          if (n > 0) {
	            if (!polygonStarted) listener.polygonStart(), polygonStarted = true;
	            listener.lineStart();
	            while (++i < n) listener.point((point = segment[i])[0], point[1]);
	            listener.lineEnd();
	          }
	          return;
	        }
	        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
	        segments.push(ringSegments.filter(d3_geo_clipSegmentLength1));
	      }
	      return clip;
	    };
	  }
	  function d3_geo_clipSegmentLength1(segment) {
	    return segment.length > 1;
	  }
	  function d3_geo_clipBufferListener() {
	    var lines = [], line;
	    return {
	      lineStart: function() {
	        lines.push(line = []);
	      },
	      point: function(λ, φ) {
	        line.push([ λ, φ ]);
	      },
	      lineEnd: d3_noop,
	      buffer: function() {
	        var buffer = lines;
	        lines = [];
	        line = null;
	        return buffer;
	      },
	      rejoin: function() {
	        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	      }
	    };
	  }
	  function d3_geo_clipSort(a, b) {
	    return ((a = a.x)[0] < 0 ? a[1] - halfπ - ε : halfπ - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfπ - ε : halfπ - b[1]);
	  }
	  var d3_geo_clipAntimeridian = d3_geo_clip(d3_true, d3_geo_clipAntimeridianLine, d3_geo_clipAntimeridianInterpolate, [ -π, -π / 2 ]);
	  function d3_geo_clipAntimeridianLine(listener) {
	    var λ0 = NaN, φ0 = NaN, sλ0 = NaN, clean;
	    return {
	      lineStart: function() {
	        listener.lineStart();
	        clean = 1;
	      },
	      point: function(λ1, φ1) {
	        var sλ1 = λ1 > 0 ? π : -π, dλ = abs(λ1 - λ0);
	        if (abs(dλ - π) < ε) {
	          listener.point(λ0, φ0 = (φ0 + φ1) / 2 > 0 ? halfπ : -halfπ);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          listener.point(λ1, φ0);
	          clean = 0;
	        } else if (sλ0 !== sλ1 && dλ >= π) {
	          if (abs(λ0 - sλ0) < ε) λ0 -= sλ0 * ε;
	          if (abs(λ1 - sλ1) < ε) λ1 -= sλ1 * ε;
	          φ0 = d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1);
	          listener.point(sλ0, φ0);
	          listener.lineEnd();
	          listener.lineStart();
	          listener.point(sλ1, φ0);
	          clean = 0;
	        }
	        listener.point(λ0 = λ1, φ0 = φ1);
	        sλ0 = sλ1;
	      },
	      lineEnd: function() {
	        listener.lineEnd();
	        λ0 = φ0 = NaN;
	      },
	      clean: function() {
	        return 2 - clean;
	      }
	    };
	  }
	  function d3_geo_clipAntimeridianIntersect(λ0, φ0, λ1, φ1) {
	    var cosφ0, cosφ1, sinλ0_λ1 = Math.sin(λ0 - λ1);
	    return abs(sinλ0_λ1) > ε ? Math.atan((Math.sin(φ0) * (cosφ1 = Math.cos(φ1)) * Math.sin(λ1) - Math.sin(φ1) * (cosφ0 = Math.cos(φ0)) * Math.sin(λ0)) / (cosφ0 * cosφ1 * sinλ0_λ1)) : (φ0 + φ1) / 2;
	  }
	  function d3_geo_clipAntimeridianInterpolate(from, to, direction, listener) {
	    var φ;
	    if (from == null) {
	      φ = direction * halfπ;
	      listener.point(-π, φ);
	      listener.point(0, φ);
	      listener.point(π, φ);
	      listener.point(π, 0);
	      listener.point(π, -φ);
	      listener.point(0, -φ);
	      listener.point(-π, -φ);
	      listener.point(-π, 0);
	      listener.point(-π, φ);
	    } else if (abs(from[0] - to[0]) > ε) {
	      var s = from[0] < to[0] ? π : -π;
	      φ = direction * s / 2;
	      listener.point(-s, φ);
	      listener.point(0, φ);
	      listener.point(s, φ);
	    } else {
	      listener.point(to[0], to[1]);
	    }
	  }
	  function d3_geo_pointInPolygon(point, polygon) {
	    var meridian = point[0], parallel = point[1], meridianNormal = [ Math.sin(meridian), -Math.cos(meridian), 0 ], polarAngle = 0, winding = 0;
	    d3_geo_areaRingSum.reset();
	    for (var i = 0, n = polygon.length; i < n; ++i) {
	      var ring = polygon[i], m = ring.length;
	      if (!m) continue;
	      var point0 = ring[0], λ0 = point0[0], φ0 = point0[1] / 2 + π / 4, sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), j = 1;
	      while (true) {
	        if (j === m) j = 0;
	        point = ring[j];
	        var λ = point[0], φ = point[1] / 2 + π / 4, sinφ = Math.sin(φ), cosφ = Math.cos(φ), dλ = λ - λ0, sdλ = dλ >= 0 ? 1 : -1, adλ = sdλ * dλ, antimeridian = adλ > π, k = sinφ0 * sinφ;
	        d3_geo_areaRingSum.add(Math.atan2(k * sdλ * Math.sin(adλ), cosφ0 * cosφ + k * Math.cos(adλ)));
	        polarAngle += antimeridian ? dλ + sdλ * τ : dλ;
	        if (antimeridian ^ λ0 >= meridian ^ λ >= meridian) {
	          var arc = d3_geo_cartesianCross(d3_geo_cartesian(point0), d3_geo_cartesian(point));
	          d3_geo_cartesianNormalize(arc);
	          var intersection = d3_geo_cartesianCross(meridianNormal, arc);
	          d3_geo_cartesianNormalize(intersection);
	          var φarc = (antimeridian ^ dλ >= 0 ? -1 : 1) * d3_asin(intersection[2]);
	          if (parallel > φarc || parallel === φarc && (arc[0] || arc[1])) {
	            winding += antimeridian ^ dλ >= 0 ? 1 : -1;
	          }
	        }
	        if (!j++) break;
	        λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ, point0 = point;
	      }
	    }
	    return (polarAngle < -ε || polarAngle < ε && d3_geo_areaRingSum < -ε) ^ winding & 1;
	  }
	  function d3_geo_clipCircle(radius) {
	    var cr = Math.cos(radius), smallRadius = cr > 0, notHemisphere = abs(cr) > ε, interpolate = d3_geo_circleInterpolate(radius, 6 * d3_radians);
	    return d3_geo_clip(visible, clipLine, interpolate, smallRadius ? [ 0, -radius ] : [ -π, radius - π ]);
	    function visible(λ, φ) {
	      return Math.cos(λ) * Math.cos(φ) > cr;
	    }
	    function clipLine(listener) {
	      var point0, c0, v0, v00, clean;
	      return {
	        lineStart: function() {
	          v00 = v0 = false;
	          clean = 1;
	        },
	        point: function(λ, φ) {
	          var point1 = [ λ, φ ], point2, v = visible(λ, φ), c = smallRadius ? v ? 0 : code(λ, φ) : v ? code(λ + (λ < 0 ? π : -π), φ) : 0;
	          if (!point0 && (v00 = v0 = v)) listener.lineStart();
	          if (v !== v0) {
	            point2 = intersect(point0, point1);
	            if (d3_geo_sphericalEqual(point0, point2) || d3_geo_sphericalEqual(point1, point2)) {
	              point1[0] += ε;
	              point1[1] += ε;
	              v = visible(point1[0], point1[1]);
	            }
	          }
	          if (v !== v0) {
	            clean = 0;
	            if (v) {
	              listener.lineStart();
	              point2 = intersect(point1, point0);
	              listener.point(point2[0], point2[1]);
	            } else {
	              point2 = intersect(point0, point1);
	              listener.point(point2[0], point2[1]);
	              listener.lineEnd();
	            }
	            point0 = point2;
	          } else if (notHemisphere && point0 && smallRadius ^ v) {
	            var t;
	            if (!(c & c0) && (t = intersect(point1, point0, true))) {
	              clean = 0;
	              if (smallRadius) {
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	              } else {
	                listener.point(t[1][0], t[1][1]);
	                listener.lineEnd();
	                listener.lineStart();
	                listener.point(t[0][0], t[0][1]);
	              }
	            }
	          }
	          if (v && (!point0 || !d3_geo_sphericalEqual(point0, point1))) {
	            listener.point(point1[0], point1[1]);
	          }
	          point0 = point1, v0 = v, c0 = c;
	        },
	        lineEnd: function() {
	          if (v0) listener.lineEnd();
	          point0 = null;
	        },
	        clean: function() {
	          return clean | (v00 && v0) << 1;
	        }
	      };
	    }
	    function intersect(a, b, two) {
	      var pa = d3_geo_cartesian(a), pb = d3_geo_cartesian(b);
	      var n1 = [ 1, 0, 0 ], n2 = d3_geo_cartesianCross(pa, pb), n2n2 = d3_geo_cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
	      if (!determinant) return !two && a;
	      var c1 = cr * n2n2 / determinant, c2 = -cr * n1n2 / determinant, n1xn2 = d3_geo_cartesianCross(n1, n2), A = d3_geo_cartesianScale(n1, c1), B = d3_geo_cartesianScale(n2, c2);
	      d3_geo_cartesianAdd(A, B);
	      var u = n1xn2, w = d3_geo_cartesianDot(A, u), uu = d3_geo_cartesianDot(u, u), t2 = w * w - uu * (d3_geo_cartesianDot(A, A) - 1);
	      if (t2 < 0) return;
	      var t = Math.sqrt(t2), q = d3_geo_cartesianScale(u, (-w - t) / uu);
	      d3_geo_cartesianAdd(q, A);
	      q = d3_geo_spherical(q);
	      if (!two) return q;
	      var λ0 = a[0], λ1 = b[0], φ0 = a[1], φ1 = b[1], z;
	      if (λ1 < λ0) z = λ0, λ0 = λ1, λ1 = z;
	      var δλ = λ1 - λ0, polar = abs(δλ - π) < ε, meridian = polar || δλ < ε;
	      if (!polar && φ1 < φ0) z = φ0, φ0 = φ1, φ1 = z;
	      if (meridian ? polar ? φ0 + φ1 > 0 ^ q[1] < (abs(q[0] - λ0) < ε ? φ0 : φ1) : φ0 <= q[1] && q[1] <= φ1 : δλ > π ^ (λ0 <= q[0] && q[0] <= λ1)) {
	        var q1 = d3_geo_cartesianScale(u, (-w + t) / uu);
	        d3_geo_cartesianAdd(q1, A);
	        return [ q, d3_geo_spherical(q1) ];
	      }
	    }
	    function code(λ, φ) {
	      var r = smallRadius ? radius : π - radius, code = 0;
	      if (λ < -r) code |= 1; else if (λ > r) code |= 2;
	      if (φ < -r) code |= 4; else if (φ > r) code |= 8;
	      return code;
	    }
	  }
	  function d3_geom_clipLine(x0, y0, x1, y1) {
	    return function(line) {
	      var a = line.a, b = line.b, ax = a.x, ay = a.y, bx = b.x, by = b.y, t0 = 0, t1 = 1, dx = bx - ax, dy = by - ay, r;
	      r = x0 - ax;
	      if (!dx && r > 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dx > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = x1 - ax;
	      if (!dx && r < 0) return;
	      r /= dx;
	      if (dx < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dx > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      r = y0 - ay;
	      if (!dy && r > 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      } else if (dy > 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      }
	      r = y1 - ay;
	      if (!dy && r < 0) return;
	      r /= dy;
	      if (dy < 0) {
	        if (r > t1) return;
	        if (r > t0) t0 = r;
	      } else if (dy > 0) {
	        if (r < t0) return;
	        if (r < t1) t1 = r;
	      }
	      if (t0 > 0) line.a = {
	        x: ax + t0 * dx,
	        y: ay + t0 * dy
	      };
	      if (t1 < 1) line.b = {
	        x: ax + t1 * dx,
	        y: ay + t1 * dy
	      };
	      return line;
	    };
	  }
	  var d3_geo_clipExtentMAX = 1e9;
	  d3.geo.clipExtent = function() {
	    var x0, y0, x1, y1, stream, clip, clipExtent = {
	      stream: function(output) {
	        if (stream) stream.valid = false;
	        stream = clip(output);
	        stream.valid = true;
	        return stream;
	      },
	      extent: function(_) {
	        if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	        clip = d3_geo_clipExtent(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]);
	        if (stream) stream.valid = false, stream = null;
	        return clipExtent;
	      }
	    };
	    return clipExtent.extent([ [ 0, 0 ], [ 960, 500 ] ]);
	  };
	  function d3_geo_clipExtent(x0, y0, x1, y1) {
	    return function(listener) {
	      var listener_ = listener, bufferListener = d3_geo_clipBufferListener(), clipLine = d3_geom_clipLine(x0, y0, x1, y1), segments, polygon, ring;
	      var clip = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          listener = bufferListener;
	          segments = [];
	          polygon = [];
	          clean = true;
	        },
	        polygonEnd: function() {
	          listener = listener_;
	          segments = d3.merge(segments);
	          var clipStartInside = insidePolygon([ x0, y1 ]), inside = clean && clipStartInside, visible = segments.length;
	          if (inside || visible) {
	            listener.polygonStart();
	            if (inside) {
	              listener.lineStart();
	              interpolate(null, null, 1, listener);
	              listener.lineEnd();
	            }
	            if (visible) {
	              d3_geo_clipPolygon(segments, compare, clipStartInside, interpolate, listener);
	            }
	            listener.polygonEnd();
	          }
	          segments = polygon = ring = null;
	        }
	      };
	      function insidePolygon(p) {
	        var wn = 0, n = polygon.length, y = p[1];
	        for (var i = 0; i < n; ++i) {
	          for (var j = 1, v = polygon[i], m = v.length, a = v[0], b; j < m; ++j) {
	            b = v[j];
	            if (a[1] <= y) {
	              if (b[1] > y && d3_cross2d(a, b, p) > 0) ++wn;
	            } else {
	              if (b[1] <= y && d3_cross2d(a, b, p) < 0) --wn;
	            }
	            a = b;
	          }
	        }
	        return wn !== 0;
	      }
	      function interpolate(from, to, direction, listener) {
	        var a = 0, a1 = 0;
	        if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoints(from, to) < 0 ^ direction > 0) {
	          do {
	            listener.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	          } while ((a = (a + direction + 4) % 4) !== a1);
	        } else {
	          listener.point(to[0], to[1]);
	        }
	      }
	      function pointVisible(x, y) {
	        return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	      }
	      function point(x, y) {
	        if (pointVisible(x, y)) listener.point(x, y);
	      }
	      var x__, y__, v__, x_, y_, v_, first, clean;
	      function lineStart() {
	        clip.point = linePoint;
	        if (polygon) polygon.push(ring = []);
	        first = true;
	        v_ = false;
	        x_ = y_ = NaN;
	      }
	      function lineEnd() {
	        if (segments) {
	          linePoint(x__, y__);
	          if (v__ && v_) bufferListener.rejoin();
	          segments.push(bufferListener.buffer());
	        }
	        clip.point = point;
	        if (v_) listener.lineEnd();
	      }
	      function linePoint(x, y) {
	        x = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, x));
	        y = Math.max(-d3_geo_clipExtentMAX, Math.min(d3_geo_clipExtentMAX, y));
	        var v = pointVisible(x, y);
	        if (polygon) ring.push([ x, y ]);
	        if (first) {
	          x__ = x, y__ = y, v__ = v;
	          first = false;
	          if (v) {
	            listener.lineStart();
	            listener.point(x, y);
	          }
	        } else {
	          if (v && v_) listener.point(x, y); else {
	            var l = {
	              a: {
	                x: x_,
	                y: y_
	              },
	              b: {
	                x: x,
	                y: y
	              }
	            };
	            if (clipLine(l)) {
	              if (!v_) {
	                listener.lineStart();
	                listener.point(l.a.x, l.a.y);
	              }
	              listener.point(l.b.x, l.b.y);
	              if (!v) listener.lineEnd();
	              clean = false;
	            } else if (v) {
	              listener.lineStart();
	              listener.point(x, y);
	              clean = false;
	            }
	          }
	        }
	        x_ = x, y_ = y, v_ = v;
	      }
	      return clip;
	    };
	    function corner(p, direction) {
	      return abs(p[0] - x0) < ε ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < ε ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < ε ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2;
	    }
	    function compare(a, b) {
	      return comparePoints(a.x, b.x);
	    }
	    function comparePoints(a, b) {
	      var ca = corner(a, 1), cb = corner(b, 1);
	      return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
	    }
	  }
	  function d3_geo_conic(projectAt) {
	    var φ0 = 0, φ1 = π / 3, m = d3_geo_projectionMutator(projectAt), p = m(φ0, φ1);
	    p.parallels = function(_) {
	      if (!arguments.length) return [ φ0 / π * 180, φ1 / π * 180 ];
	      return m(φ0 = _[0] * π / 180, φ1 = _[1] * π / 180);
	    };
	    return p;
	  }
	  function d3_geo_conicEqualArea(φ0, φ1) {
	    var sinφ0 = Math.sin(φ0), n = (sinφ0 + Math.sin(φ1)) / 2, C = 1 + sinφ0 * (2 * n - sinφ0), ρ0 = Math.sqrt(C) / n;
	    function forward(λ, φ) {
	      var ρ = Math.sqrt(C - 2 * n * Math.sin(φ)) / n;
	      return [ ρ * Math.sin(λ *= n), ρ0 - ρ * Math.cos(λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = ρ0 - y;
	      return [ Math.atan2(x, ρ0_y) / n, d3_asin((C - (x * x + ρ0_y * ρ0_y) * n * n) / (2 * n)) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEqualArea = function() {
	    return d3_geo_conic(d3_geo_conicEqualArea);
	  }).raw = d3_geo_conicEqualArea;
	  d3.geo.albers = function() {
	    return d3.geo.conicEqualArea().rotate([ 96, 0 ]).center([ -.6, 38.7 ]).parallels([ 29.5, 45.5 ]).scale(1070);
	  };
	  d3.geo.albersUsa = function() {
	    var lower48 = d3.geo.albers();
	    var alaska = d3.geo.conicEqualArea().rotate([ 154, 0 ]).center([ -2, 58.5 ]).parallels([ 55, 65 ]);
	    var hawaii = d3.geo.conicEqualArea().rotate([ 157, 0 ]).center([ -3, 19.9 ]).parallels([ 8, 18 ]);
	    var point, pointStream = {
	      point: function(x, y) {
	        point = [ x, y ];
	      }
	    }, lower48Point, alaskaPoint, hawaiiPoint;
	    function albersUsa(coordinates) {
	      var x = coordinates[0], y = coordinates[1];
	      point = null;
	      (lower48Point(x, y), point) || (alaskaPoint(x, y), point) || hawaiiPoint(x, y);
	      return point;
	    }
	    albersUsa.invert = function(coordinates) {
	      var k = lower48.scale(), t = lower48.translate(), x = (coordinates[0] - t[0]) / k, y = (coordinates[1] - t[1]) / k;
	      return (y >= .12 && y < .234 && x >= -.425 && x < -.214 ? alaska : y >= .166 && y < .234 && x >= -.214 && x < -.115 ? hawaii : lower48).invert(coordinates);
	    };
	    albersUsa.stream = function(stream) {
	      var lower48Stream = lower48.stream(stream), alaskaStream = alaska.stream(stream), hawaiiStream = hawaii.stream(stream);
	      return {
	        point: function(x, y) {
	          lower48Stream.point(x, y);
	          alaskaStream.point(x, y);
	          hawaiiStream.point(x, y);
	        },
	        sphere: function() {
	          lower48Stream.sphere();
	          alaskaStream.sphere();
	          hawaiiStream.sphere();
	        },
	        lineStart: function() {
	          lower48Stream.lineStart();
	          alaskaStream.lineStart();
	          hawaiiStream.lineStart();
	        },
	        lineEnd: function() {
	          lower48Stream.lineEnd();
	          alaskaStream.lineEnd();
	          hawaiiStream.lineEnd();
	        },
	        polygonStart: function() {
	          lower48Stream.polygonStart();
	          alaskaStream.polygonStart();
	          hawaiiStream.polygonStart();
	        },
	        polygonEnd: function() {
	          lower48Stream.polygonEnd();
	          alaskaStream.polygonEnd();
	          hawaiiStream.polygonEnd();
	        }
	      };
	    };
	    albersUsa.precision = function(_) {
	      if (!arguments.length) return lower48.precision();
	      lower48.precision(_);
	      alaska.precision(_);
	      hawaii.precision(_);
	      return albersUsa;
	    };
	    albersUsa.scale = function(_) {
	      if (!arguments.length) return lower48.scale();
	      lower48.scale(_);
	      alaska.scale(_ * .35);
	      hawaii.scale(_);
	      return albersUsa.translate(lower48.translate());
	    };
	    albersUsa.translate = function(_) {
	      if (!arguments.length) return lower48.translate();
	      var k = lower48.scale(), x = +_[0], y = +_[1];
	      lower48Point = lower48.translate(_).clipExtent([ [ x - .455 * k, y - .238 * k ], [ x + .455 * k, y + .238 * k ] ]).stream(pointStream).point;
	      alaskaPoint = alaska.translate([ x - .307 * k, y + .201 * k ]).clipExtent([ [ x - .425 * k + ε, y + .12 * k + ε ], [ x - .214 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      hawaiiPoint = hawaii.translate([ x - .205 * k, y + .212 * k ]).clipExtent([ [ x - .214 * k + ε, y + .166 * k + ε ], [ x - .115 * k - ε, y + .234 * k - ε ] ]).stream(pointStream).point;
	      return albersUsa;
	    };
	    return albersUsa.scale(1070);
	  };
	  var d3_geo_pathAreaSum, d3_geo_pathAreaPolygon, d3_geo_pathArea = {
	    point: d3_noop,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: function() {
	      d3_geo_pathAreaPolygon = 0;
	      d3_geo_pathArea.lineStart = d3_geo_pathAreaRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathArea.lineStart = d3_geo_pathArea.lineEnd = d3_geo_pathArea.point = d3_noop;
	      d3_geo_pathAreaSum += abs(d3_geo_pathAreaPolygon / 2);
	    }
	  };
	  function d3_geo_pathAreaRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathArea.point = function(x, y) {
	      d3_geo_pathArea.point = nextPoint;
	      x00 = x0 = x, y00 = y0 = y;
	    };
	    function nextPoint(x, y) {
	      d3_geo_pathAreaPolygon += y0 * x - x0 * y;
	      x0 = x, y0 = y;
	    }
	    d3_geo_pathArea.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  var d3_geo_pathBoundsX0, d3_geo_pathBoundsY0, d3_geo_pathBoundsX1, d3_geo_pathBoundsY1;
	  var d3_geo_pathBounds = {
	    point: d3_geo_pathBoundsPoint,
	    lineStart: d3_noop,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_pathBoundsPoint(x, y) {
	    if (x < d3_geo_pathBoundsX0) d3_geo_pathBoundsX0 = x;
	    if (x > d3_geo_pathBoundsX1) d3_geo_pathBoundsX1 = x;
	    if (y < d3_geo_pathBoundsY0) d3_geo_pathBoundsY0 = y;
	    if (y > d3_geo_pathBoundsY1) d3_geo_pathBoundsY1 = y;
	  }
	  function d3_geo_pathBuffer() {
	    var pointCircle = d3_geo_pathBufferCircle(4.5), buffer = [];
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointCircle = d3_geo_pathBufferCircle(_);
	        return stream;
	      },
	      result: function() {
	        if (buffer.length) {
	          var result = buffer.join("");
	          buffer = [];
	          return result;
	        }
	      }
	    };
	    function point(x, y) {
	      buffer.push("M", x, ",", y, pointCircle);
	    }
	    function pointLineStart(x, y) {
	      buffer.push("M", x, ",", y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      buffer.push("L", x, ",", y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      buffer.push("Z");
	    }
	    return stream;
	  }
	  function d3_geo_pathBufferCircle(radius) {
	    return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
	  }
	  var d3_geo_pathCentroid = {
	    point: d3_geo_pathCentroidPoint,
	    lineStart: d3_geo_pathCentroidLineStart,
	    lineEnd: d3_geo_pathCentroidLineEnd,
	    polygonStart: function() {
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidRingStart;
	    },
	    polygonEnd: function() {
	      d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	      d3_geo_pathCentroid.lineStart = d3_geo_pathCentroidLineStart;
	      d3_geo_pathCentroid.lineEnd = d3_geo_pathCentroidLineEnd;
	    }
	  };
	  function d3_geo_pathCentroidPoint(x, y) {
	    d3_geo_centroidX0 += x;
	    d3_geo_centroidY0 += y;
	    ++d3_geo_centroidZ0;
	  }
	  function d3_geo_pathCentroidLineStart() {
	    var x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	  }
	  function d3_geo_pathCentroidLineEnd() {
	    d3_geo_pathCentroid.point = d3_geo_pathCentroidPoint;
	  }
	  function d3_geo_pathCentroidRingStart() {
	    var x00, y00, x0, y0;
	    d3_geo_pathCentroid.point = function(x, y) {
	      d3_geo_pathCentroid.point = nextPoint;
	      d3_geo_pathCentroidPoint(x00 = x0 = x, y00 = y0 = y);
	    };
	    function nextPoint(x, y) {
	      var dx = x - x0, dy = y - y0, z = Math.sqrt(dx * dx + dy * dy);
	      d3_geo_centroidX1 += z * (x0 + x) / 2;
	      d3_geo_centroidY1 += z * (y0 + y) / 2;
	      d3_geo_centroidZ1 += z;
	      z = y0 * x - x0 * y;
	      d3_geo_centroidX2 += z * (x0 + x);
	      d3_geo_centroidY2 += z * (y0 + y);
	      d3_geo_centroidZ2 += z * 3;
	      d3_geo_pathCentroidPoint(x0 = x, y0 = y);
	    }
	    d3_geo_pathCentroid.lineEnd = function() {
	      nextPoint(x00, y00);
	    };
	  }
	  function d3_geo_pathContext(context) {
	    var pointRadius = 4.5;
	    var stream = {
	      point: point,
	      lineStart: function() {
	        stream.point = pointLineStart;
	      },
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        stream.lineEnd = lineEndPolygon;
	      },
	      polygonEnd: function() {
	        stream.lineEnd = lineEnd;
	        stream.point = point;
	      },
	      pointRadius: function(_) {
	        pointRadius = _;
	        return stream;
	      },
	      result: d3_noop
	    };
	    function point(x, y) {
	      context.moveTo(x + pointRadius, y);
	      context.arc(x, y, pointRadius, 0, τ);
	    }
	    function pointLineStart(x, y) {
	      context.moveTo(x, y);
	      stream.point = pointLine;
	    }
	    function pointLine(x, y) {
	      context.lineTo(x, y);
	    }
	    function lineEnd() {
	      stream.point = point;
	    }
	    function lineEndPolygon() {
	      context.closePath();
	    }
	    return stream;
	  }
	  function d3_geo_resample(project) {
	    var δ2 = .5, cosMinDistance = Math.cos(30 * d3_radians), maxDepth = 16;
	    function resample(stream) {
	      return (maxDepth ? resampleRecursive : resampleNone)(stream);
	    }
	    function resampleNone(stream) {
	      return d3_geo_transformPoint(stream, function(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      });
	    }
	    function resampleRecursive(stream) {
	      var λ00, φ00, x00, y00, a00, b00, c00, λ0, x0, y0, a0, b0, c0;
	      var resample = {
	        point: point,
	        lineStart: lineStart,
	        lineEnd: lineEnd,
	        polygonStart: function() {
	          stream.polygonStart();
	          resample.lineStart = ringStart;
	        },
	        polygonEnd: function() {
	          stream.polygonEnd();
	          resample.lineStart = lineStart;
	        }
	      };
	      function point(x, y) {
	        x = project(x, y);
	        stream.point(x[0], x[1]);
	      }
	      function lineStart() {
	        x0 = NaN;
	        resample.point = linePoint;
	        stream.lineStart();
	      }
	      function linePoint(λ, φ) {
	        var c = d3_geo_cartesian([ λ, φ ]), p = project(λ, φ);
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x0 = p[0], y0 = p[1], λ0 = λ, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	        stream.point(x0, y0);
	      }
	      function lineEnd() {
	        resample.point = point;
	        stream.lineEnd();
	      }
	      function ringStart() {
	        lineStart();
	        resample.point = ringPoint;
	        resample.lineEnd = ringEnd;
	      }
	      function ringPoint(λ, φ) {
	        linePoint(λ00 = λ, φ00 = φ), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	        resample.point = linePoint;
	      }
	      function ringEnd() {
	        resampleLineTo(x0, y0, λ0, a0, b0, c0, x00, y00, λ00, a00, b00, c00, maxDepth, stream);
	        resample.lineEnd = lineEnd;
	        lineEnd();
	      }
	      return resample;
	    }
	    function resampleLineTo(x0, y0, λ0, a0, b0, c0, x1, y1, λ1, a1, b1, c1, depth, stream) {
	      var dx = x1 - x0, dy = y1 - y0, d2 = dx * dx + dy * dy;
	      if (d2 > 4 * δ2 && depth--) {
	        var a = a0 + a1, b = b0 + b1, c = c0 + c1, m = Math.sqrt(a * a + b * b + c * c), φ2 = Math.asin(c /= m), λ2 = abs(abs(c) - 1) < ε || abs(λ0 - λ1) < ε ? (λ0 + λ1) / 2 : Math.atan2(b, a), p = project(λ2, φ2), x2 = p[0], y2 = p[1], dx2 = x2 - x0, dy2 = y2 - y0, dz = dy * dx2 - dx * dy2;
	        if (dz * dz / d2 > δ2 || abs((dx * dx2 + dy * dy2) / d2 - .5) > .3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
	          resampleLineTo(x0, y0, λ0, a0, b0, c0, x2, y2, λ2, a /= m, b /= m, c, depth, stream);
	          stream.point(x2, y2);
	          resampleLineTo(x2, y2, λ2, a, b, c, x1, y1, λ1, a1, b1, c1, depth, stream);
	        }
	      }
	    }
	    resample.precision = function(_) {
	      if (!arguments.length) return Math.sqrt(δ2);
	      maxDepth = (δ2 = _ * _) > 0 && 16;
	      return resample;
	    };
	    return resample;
	  }
	  d3.geo.path = function() {
	    var pointRadius = 4.5, projection, context, projectStream, contextStream, cacheStream;
	    function path(object) {
	      if (object) {
	        if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	        if (!cacheStream || !cacheStream.valid) cacheStream = projectStream(contextStream);
	        d3.geo.stream(object, cacheStream);
	      }
	      return contextStream.result();
	    }
	    path.area = function(object) {
	      d3_geo_pathAreaSum = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathArea));
	      return d3_geo_pathAreaSum;
	    };
	    path.centroid = function(object) {
	      d3_geo_centroidX0 = d3_geo_centroidY0 = d3_geo_centroidZ0 = d3_geo_centroidX1 = d3_geo_centroidY1 = d3_geo_centroidZ1 = d3_geo_centroidX2 = d3_geo_centroidY2 = d3_geo_centroidZ2 = 0;
	      d3.geo.stream(object, projectStream(d3_geo_pathCentroid));
	      return d3_geo_centroidZ2 ? [ d3_geo_centroidX2 / d3_geo_centroidZ2, d3_geo_centroidY2 / d3_geo_centroidZ2 ] : d3_geo_centroidZ1 ? [ d3_geo_centroidX1 / d3_geo_centroidZ1, d3_geo_centroidY1 / d3_geo_centroidZ1 ] : d3_geo_centroidZ0 ? [ d3_geo_centroidX0 / d3_geo_centroidZ0, d3_geo_centroidY0 / d3_geo_centroidZ0 ] : [ NaN, NaN ];
	    };
	    path.bounds = function(object) {
	      d3_geo_pathBoundsX1 = d3_geo_pathBoundsY1 = -(d3_geo_pathBoundsX0 = d3_geo_pathBoundsY0 = Infinity);
	      d3.geo.stream(object, projectStream(d3_geo_pathBounds));
	      return [ [ d3_geo_pathBoundsX0, d3_geo_pathBoundsY0 ], [ d3_geo_pathBoundsX1, d3_geo_pathBoundsY1 ] ];
	    };
	    path.projection = function(_) {
	      if (!arguments.length) return projection;
	      projectStream = (projection = _) ? _.stream || d3_geo_pathProjectStream(_) : d3_identity;
	      return reset();
	    };
	    path.context = function(_) {
	      if (!arguments.length) return context;
	      contextStream = (context = _) == null ? new d3_geo_pathBuffer() : new d3_geo_pathContext(_);
	      if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	      return reset();
	    };
	    path.pointRadius = function(_) {
	      if (!arguments.length) return pointRadius;
	      pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	      return path;
	    };
	    function reset() {
	      cacheStream = null;
	      return path;
	    }
	    return path.projection(d3.geo.albersUsa()).context(null);
	  };
	  function d3_geo_pathProjectStream(project) {
	    var resample = d3_geo_resample(function(x, y) {
	      return project([ x * d3_degrees, y * d3_degrees ]);
	    });
	    return function(stream) {
	      return d3_geo_projectionRadians(resample(stream));
	    };
	  }
	  d3.geo.transform = function(methods) {
	    return {
	      stream: function(stream) {
	        var transform = new d3_geo_transform(stream);
	        for (var k in methods) transform[k] = methods[k];
	        return transform;
	      }
	    };
	  };
	  function d3_geo_transform(stream) {
	    this.stream = stream;
	  }
	  d3_geo_transform.prototype = {
	    point: function(x, y) {
	      this.stream.point(x, y);
	    },
	    sphere: function() {
	      this.stream.sphere();
	    },
	    lineStart: function() {
	      this.stream.lineStart();
	    },
	    lineEnd: function() {
	      this.stream.lineEnd();
	    },
	    polygonStart: function() {
	      this.stream.polygonStart();
	    },
	    polygonEnd: function() {
	      this.stream.polygonEnd();
	    }
	  };
	  function d3_geo_transformPoint(stream, point) {
	    return {
	      point: point,
	      sphere: function() {
	        stream.sphere();
	      },
	      lineStart: function() {
	        stream.lineStart();
	      },
	      lineEnd: function() {
	        stream.lineEnd();
	      },
	      polygonStart: function() {
	        stream.polygonStart();
	      },
	      polygonEnd: function() {
	        stream.polygonEnd();
	      }
	    };
	  }
	  d3.geo.projection = d3_geo_projection;
	  d3.geo.projectionMutator = d3_geo_projectionMutator;
	  function d3_geo_projection(project) {
	    return d3_geo_projectionMutator(function() {
	      return project;
	    })();
	  }
	  function d3_geo_projectionMutator(projectAt) {
	    var project, rotate, projectRotate, projectResample = d3_geo_resample(function(x, y) {
	      x = project(x, y);
	      return [ x[0] * k + δx, δy - x[1] * k ];
	    }), k = 150, x = 480, y = 250, λ = 0, φ = 0, δλ = 0, δφ = 0, δγ = 0, δx, δy, preclip = d3_geo_clipAntimeridian, postclip = d3_identity, clipAngle = null, clipExtent = null, stream;
	    function projection(point) {
	      point = projectRotate(point[0] * d3_radians, point[1] * d3_radians);
	      return [ point[0] * k + δx, δy - point[1] * k ];
	    }
	    function invert(point) {
	      point = projectRotate.invert((point[0] - δx) / k, (δy - point[1]) / k);
	      return point && [ point[0] * d3_degrees, point[1] * d3_degrees ];
	    }
	    projection.stream = function(output) {
	      if (stream) stream.valid = false;
	      stream = d3_geo_projectionRadians(preclip(rotate, projectResample(postclip(output))));
	      stream.valid = true;
	      return stream;
	    };
	    projection.clipAngle = function(_) {
	      if (!arguments.length) return clipAngle;
	      preclip = _ == null ? (clipAngle = _, d3_geo_clipAntimeridian) : d3_geo_clipCircle((clipAngle = +_) * d3_radians);
	      return invalidate();
	    };
	    projection.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent;
	      clipExtent = _;
	      postclip = _ ? d3_geo_clipExtent(_[0][0], _[0][1], _[1][0], _[1][1]) : d3_identity;
	      return invalidate();
	    };
	    projection.scale = function(_) {
	      if (!arguments.length) return k;
	      k = +_;
	      return reset();
	    };
	    projection.translate = function(_) {
	      if (!arguments.length) return [ x, y ];
	      x = +_[0];
	      y = +_[1];
	      return reset();
	    };
	    projection.center = function(_) {
	      if (!arguments.length) return [ λ * d3_degrees, φ * d3_degrees ];
	      λ = _[0] % 360 * d3_radians;
	      φ = _[1] % 360 * d3_radians;
	      return reset();
	    };
	    projection.rotate = function(_) {
	      if (!arguments.length) return [ δλ * d3_degrees, δφ * d3_degrees, δγ * d3_degrees ];
	      δλ = _[0] % 360 * d3_radians;
	      δφ = _[1] % 360 * d3_radians;
	      δγ = _.length > 2 ? _[2] % 360 * d3_radians : 0;
	      return reset();
	    };
	    d3.rebind(projection, projectResample, "precision");
	    function reset() {
	      projectRotate = d3_geo_compose(rotate = d3_geo_rotation(δλ, δφ, δγ), project);
	      var center = project(λ, φ);
	      δx = x - center[0] * k;
	      δy = y + center[1] * k;
	      return invalidate();
	    }
	    function invalidate() {
	      if (stream) stream.valid = false, stream = null;
	      return projection;
	    }
	    return function() {
	      project = projectAt.apply(this, arguments);
	      projection.invert = project.invert && invert;
	      return reset();
	    };
	  }
	  function d3_geo_projectionRadians(stream) {
	    return d3_geo_transformPoint(stream, function(x, y) {
	      stream.point(x * d3_radians, y * d3_radians);
	    });
	  }
	  function d3_geo_equirectangular(λ, φ) {
	    return [ λ, φ ];
	  }
	  (d3.geo.equirectangular = function() {
	    return d3_geo_projection(d3_geo_equirectangular);
	  }).raw = d3_geo_equirectangular.invert = d3_geo_equirectangular;
	  d3.geo.rotation = function(rotate) {
	    rotate = d3_geo_rotation(rotate[0] % 360 * d3_radians, rotate[1] * d3_radians, rotate.length > 2 ? rotate[2] * d3_radians : 0);
	    function forward(coordinates) {
	      coordinates = rotate(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    }
	    forward.invert = function(coordinates) {
	      coordinates = rotate.invert(coordinates[0] * d3_radians, coordinates[1] * d3_radians);
	      return coordinates[0] *= d3_degrees, coordinates[1] *= d3_degrees, coordinates;
	    };
	    return forward;
	  };
	  function d3_geo_identityRotation(λ, φ) {
	    return [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	  }
	  d3_geo_identityRotation.invert = d3_geo_equirectangular;
	  function d3_geo_rotation(δλ, δφ, δγ) {
	    return δλ ? δφ || δγ ? d3_geo_compose(d3_geo_rotationλ(δλ), d3_geo_rotationφγ(δφ, δγ)) : d3_geo_rotationλ(δλ) : δφ || δγ ? d3_geo_rotationφγ(δφ, δγ) : d3_geo_identityRotation;
	  }
	  function d3_geo_forwardRotationλ(δλ) {
	    return function(λ, φ) {
	      return λ += δλ, [ λ > π ? λ - τ : λ < -π ? λ + τ : λ, φ ];
	    };
	  }
	  function d3_geo_rotationλ(δλ) {
	    var rotation = d3_geo_forwardRotationλ(δλ);
	    rotation.invert = d3_geo_forwardRotationλ(-δλ);
	    return rotation;
	  }
	  function d3_geo_rotationφγ(δφ, δγ) {
	    var cosδφ = Math.cos(δφ), sinδφ = Math.sin(δφ), cosδγ = Math.cos(δγ), sinδγ = Math.sin(δγ);
	    function rotation(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδφ + x * sinδφ;
	      return [ Math.atan2(y * cosδγ - k * sinδγ, x * cosδφ - z * sinδφ), d3_asin(k * cosδγ + y * sinδγ) ];
	    }
	    rotation.invert = function(λ, φ) {
	      var cosφ = Math.cos(φ), x = Math.cos(λ) * cosφ, y = Math.sin(λ) * cosφ, z = Math.sin(φ), k = z * cosδγ - y * sinδγ;
	      return [ Math.atan2(y * cosδγ + z * sinδγ, x * cosδφ + k * sinδφ), d3_asin(k * cosδφ - x * sinδφ) ];
	    };
	    return rotation;
	  }
	  d3.geo.circle = function() {
	    var origin = [ 0, 0 ], angle, precision = 6, interpolate;
	    function circle() {
	      var center = typeof origin === "function" ? origin.apply(this, arguments) : origin, rotate = d3_geo_rotation(-center[0] * d3_radians, -center[1] * d3_radians, 0).invert, ring = [];
	      interpolate(null, null, 1, {
	        point: function(x, y) {
	          ring.push(x = rotate(x, y));
	          x[0] *= d3_degrees, x[1] *= d3_degrees;
	        }
	      });
	      return {
	        type: "Polygon",
	        coordinates: [ ring ]
	      };
	    }
	    circle.origin = function(x) {
	      if (!arguments.length) return origin;
	      origin = x;
	      return circle;
	    };
	    circle.angle = function(x) {
	      if (!arguments.length) return angle;
	      interpolate = d3_geo_circleInterpolate((angle = +x) * d3_radians, precision * d3_radians);
	      return circle;
	    };
	    circle.precision = function(_) {
	      if (!arguments.length) return precision;
	      interpolate = d3_geo_circleInterpolate(angle * d3_radians, (precision = +_) * d3_radians);
	      return circle;
	    };
	    return circle.angle(90);
	  };
	  function d3_geo_circleInterpolate(radius, precision) {
	    var cr = Math.cos(radius), sr = Math.sin(radius);
	    return function(from, to, direction, listener) {
	      var step = direction * precision;
	      if (from != null) {
	        from = d3_geo_circleAngle(cr, from);
	        to = d3_geo_circleAngle(cr, to);
	        if (direction > 0 ? from < to : from > to) from += direction * τ;
	      } else {
	        from = radius + direction * τ;
	        to = radius - .5 * step;
	      }
	      for (var point, t = from; direction > 0 ? t > to : t < to; t -= step) {
	        listener.point((point = d3_geo_spherical([ cr, -sr * Math.cos(t), -sr * Math.sin(t) ]))[0], point[1]);
	      }
	    };
	  }
	  function d3_geo_circleAngle(cr, point) {
	    var a = d3_geo_cartesian(point);
	    a[0] -= cr;
	    d3_geo_cartesianNormalize(a);
	    var angle = d3_acos(-a[1]);
	    return ((-a[2] < 0 ? -angle : angle) + 2 * Math.PI - ε) % (2 * Math.PI);
	  }
	  d3.geo.distance = function(a, b) {
	    var Δλ = (b[0] - a[0]) * d3_radians, φ0 = a[1] * d3_radians, φ1 = b[1] * d3_radians, sinΔλ = Math.sin(Δλ), cosΔλ = Math.cos(Δλ), sinφ0 = Math.sin(φ0), cosφ0 = Math.cos(φ0), sinφ1 = Math.sin(φ1), cosφ1 = Math.cos(φ1), t;
	    return Math.atan2(Math.sqrt((t = cosφ1 * sinΔλ) * t + (t = cosφ0 * sinφ1 - sinφ0 * cosφ1 * cosΔλ) * t), sinφ0 * sinφ1 + cosφ0 * cosφ1 * cosΔλ);
	  };
	  d3.geo.graticule = function() {
	    var x1, x0, X1, X0, y1, y0, Y1, Y0, dx = 10, dy = dx, DX = 90, DY = 360, x, y, X, Y, precision = 2.5;
	    function graticule() {
	      return {
	        type: "MultiLineString",
	        coordinates: lines()
	      };
	    }
	    function lines() {
	      return d3.range(Math.ceil(X0 / DX) * DX, X1, DX).map(X).concat(d3.range(Math.ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(d3.range(Math.ceil(x0 / dx) * dx, x1, dx).filter(function(x) {
	        return abs(x % DX) > ε;
	      }).map(x)).concat(d3.range(Math.ceil(y0 / dy) * dy, y1, dy).filter(function(y) {
	        return abs(y % DY) > ε;
	      }).map(y));
	    }
	    graticule.lines = function() {
	      return lines().map(function(coordinates) {
	        return {
	          type: "LineString",
	          coordinates: coordinates
	        };
	      });
	    };
	    graticule.outline = function() {
	      return {
	        type: "Polygon",
	        coordinates: [ X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1)) ]
	      };
	    };
	    graticule.extent = function(_) {
	      if (!arguments.length) return graticule.minorExtent();
	      return graticule.majorExtent(_).minorExtent(_);
	    };
	    graticule.majorExtent = function(_) {
	      if (!arguments.length) return [ [ X0, Y0 ], [ X1, Y1 ] ];
	      X0 = +_[0][0], X1 = +_[1][0];
	      Y0 = +_[0][1], Y1 = +_[1][1];
	      if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	      if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.minorExtent = function(_) {
	      if (!arguments.length) return [ [ x0, y0 ], [ x1, y1 ] ];
	      x0 = +_[0][0], x1 = +_[1][0];
	      y0 = +_[0][1], y1 = +_[1][1];
	      if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	      if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	      return graticule.precision(precision);
	    };
	    graticule.step = function(_) {
	      if (!arguments.length) return graticule.minorStep();
	      return graticule.majorStep(_).minorStep(_);
	    };
	    graticule.majorStep = function(_) {
	      if (!arguments.length) return [ DX, DY ];
	      DX = +_[0], DY = +_[1];
	      return graticule;
	    };
	    graticule.minorStep = function(_) {
	      if (!arguments.length) return [ dx, dy ];
	      dx = +_[0], dy = +_[1];
	      return graticule;
	    };
	    graticule.precision = function(_) {
	      if (!arguments.length) return precision;
	      precision = +_;
	      x = d3_geo_graticuleX(y0, y1, 90);
	      y = d3_geo_graticuleY(x0, x1, precision);
	      X = d3_geo_graticuleX(Y0, Y1, 90);
	      Y = d3_geo_graticuleY(X0, X1, precision);
	      return graticule;
	    };
	    return graticule.majorExtent([ [ -180, -90 + ε ], [ 180, 90 - ε ] ]).minorExtent([ [ -180, -80 - ε ], [ 180, 80 + ε ] ]);
	  };
	  function d3_geo_graticuleX(y0, y1, dy) {
	    var y = d3.range(y0, y1 - ε, dy).concat(y1);
	    return function(x) {
	      return y.map(function(y) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_geo_graticuleY(x0, x1, dx) {
	    var x = d3.range(x0, x1 - ε, dx).concat(x1);
	    return function(y) {
	      return x.map(function(x) {
	        return [ x, y ];
	      });
	    };
	  }
	  function d3_source(d) {
	    return d.source;
	  }
	  function d3_target(d) {
	    return d.target;
	  }
	  d3.geo.greatArc = function() {
	    var source = d3_source, source_, target = d3_target, target_;
	    function greatArc() {
	      return {
	        type: "LineString",
	        coordinates: [ source_ || source.apply(this, arguments), target_ || target.apply(this, arguments) ]
	      };
	    }
	    greatArc.distance = function() {
	      return d3.geo.distance(source_ || source.apply(this, arguments), target_ || target.apply(this, arguments));
	    };
	    greatArc.source = function(_) {
	      if (!arguments.length) return source;
	      source = _, source_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.target = function(_) {
	      if (!arguments.length) return target;
	      target = _, target_ = typeof _ === "function" ? null : _;
	      return greatArc;
	    };
	    greatArc.precision = function() {
	      return arguments.length ? greatArc : 0;
	    };
	    return greatArc;
	  };
	  d3.geo.interpolate = function(source, target) {
	    return d3_geo_interpolate(source[0] * d3_radians, source[1] * d3_radians, target[0] * d3_radians, target[1] * d3_radians);
	  };
	  function d3_geo_interpolate(x0, y0, x1, y1) {
	    var cy0 = Math.cos(y0), sy0 = Math.sin(y0), cy1 = Math.cos(y1), sy1 = Math.sin(y1), kx0 = cy0 * Math.cos(x0), ky0 = cy0 * Math.sin(x0), kx1 = cy1 * Math.cos(x1), ky1 = cy1 * Math.sin(x1), d = 2 * Math.asin(Math.sqrt(d3_haversin(y1 - y0) + cy0 * cy1 * d3_haversin(x1 - x0))), k = 1 / Math.sin(d);
	    var interpolate = d ? function(t) {
	      var B = Math.sin(t *= d) * k, A = Math.sin(d - t) * k, x = A * kx0 + B * kx1, y = A * ky0 + B * ky1, z = A * sy0 + B * sy1;
	      return [ Math.atan2(y, x) * d3_degrees, Math.atan2(z, Math.sqrt(x * x + y * y)) * d3_degrees ];
	    } : function() {
	      return [ x0 * d3_degrees, y0 * d3_degrees ];
	    };
	    interpolate.distance = d;
	    return interpolate;
	  }
	  d3.geo.length = function(object) {
	    d3_geo_lengthSum = 0;
	    d3.geo.stream(object, d3_geo_length);
	    return d3_geo_lengthSum;
	  };
	  var d3_geo_lengthSum;
	  var d3_geo_length = {
	    sphere: d3_noop,
	    point: d3_noop,
	    lineStart: d3_geo_lengthLineStart,
	    lineEnd: d3_noop,
	    polygonStart: d3_noop,
	    polygonEnd: d3_noop
	  };
	  function d3_geo_lengthLineStart() {
	    var λ0, sinφ0, cosφ0;
	    d3_geo_length.point = function(λ, φ) {
	      λ0 = λ * d3_radians, sinφ0 = Math.sin(φ *= d3_radians), cosφ0 = Math.cos(φ);
	      d3_geo_length.point = nextPoint;
	    };
	    d3_geo_length.lineEnd = function() {
	      d3_geo_length.point = d3_geo_length.lineEnd = d3_noop;
	    };
	    function nextPoint(λ, φ) {
	      var sinφ = Math.sin(φ *= d3_radians), cosφ = Math.cos(φ), t = abs((λ *= d3_radians) - λ0), cosΔλ = Math.cos(t);
	      d3_geo_lengthSum += Math.atan2(Math.sqrt((t = cosφ * Math.sin(t)) * t + (t = cosφ0 * sinφ - sinφ0 * cosφ * cosΔλ) * t), sinφ0 * sinφ + cosφ0 * cosφ * cosΔλ);
	      λ0 = λ, sinφ0 = sinφ, cosφ0 = cosφ;
	    }
	  }
	  function d3_geo_azimuthal(scale, angle) {
	    function azimuthal(λ, φ) {
	      var cosλ = Math.cos(λ), cosφ = Math.cos(φ), k = scale(cosλ * cosφ);
	      return [ k * cosφ * Math.sin(λ), k * Math.sin(φ) ];
	    }
	    azimuthal.invert = function(x, y) {
	      var ρ = Math.sqrt(x * x + y * y), c = angle(ρ), sinc = Math.sin(c), cosc = Math.cos(c);
	      return [ Math.atan2(x * sinc, ρ * cosc), Math.asin(ρ && y * sinc / ρ) ];
	    };
	    return azimuthal;
	  }
	  var d3_geo_azimuthalEqualArea = d3_geo_azimuthal(function(cosλcosφ) {
	    return Math.sqrt(2 / (1 + cosλcosφ));
	  }, function(ρ) {
	    return 2 * Math.asin(ρ / 2);
	  });
	  (d3.geo.azimuthalEqualArea = function() {
	    return d3_geo_projection(d3_geo_azimuthalEqualArea);
	  }).raw = d3_geo_azimuthalEqualArea;
	  var d3_geo_azimuthalEquidistant = d3_geo_azimuthal(function(cosλcosφ) {
	    var c = Math.acos(cosλcosφ);
	    return c && c / Math.sin(c);
	  }, d3_identity);
	  (d3.geo.azimuthalEquidistant = function() {
	    return d3_geo_projection(d3_geo_azimuthalEquidistant);
	  }).raw = d3_geo_azimuthalEquidistant;
	  function d3_geo_conicConformal(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), t = function(φ) {
	      return Math.tan(π / 4 + φ / 2);
	    }, n = φ0 === φ1 ? Math.sin(φ0) : Math.log(cosφ0 / Math.cos(φ1)) / Math.log(t(φ1) / t(φ0)), F = cosφ0 * Math.pow(t(φ0), n) / n;
	    if (!n) return d3_geo_mercator;
	    function forward(λ, φ) {
	      if (F > 0) {
	        if (φ < -halfπ + ε) φ = -halfπ + ε;
	      } else {
	        if (φ > halfπ - ε) φ = halfπ - ε;
	      }
	      var ρ = F / Math.pow(t(φ), n);
	      return [ ρ * Math.sin(n * λ), F - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = F - y, ρ = d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y);
	      return [ Math.atan2(x, ρ0_y) / n, 2 * Math.atan(Math.pow(F / ρ, 1 / n)) - halfπ ];
	    };
	    return forward;
	  }
	  (d3.geo.conicConformal = function() {
	    return d3_geo_conic(d3_geo_conicConformal);
	  }).raw = d3_geo_conicConformal;
	  function d3_geo_conicEquidistant(φ0, φ1) {
	    var cosφ0 = Math.cos(φ0), n = φ0 === φ1 ? Math.sin(φ0) : (cosφ0 - Math.cos(φ1)) / (φ1 - φ0), G = cosφ0 / n + φ0;
	    if (abs(n) < ε) return d3_geo_equirectangular;
	    function forward(λ, φ) {
	      var ρ = G - φ;
	      return [ ρ * Math.sin(n * λ), G - ρ * Math.cos(n * λ) ];
	    }
	    forward.invert = function(x, y) {
	      var ρ0_y = G - y;
	      return [ Math.atan2(x, ρ0_y) / n, G - d3_sgn(n) * Math.sqrt(x * x + ρ0_y * ρ0_y) ];
	    };
	    return forward;
	  }
	  (d3.geo.conicEquidistant = function() {
	    return d3_geo_conic(d3_geo_conicEquidistant);
	  }).raw = d3_geo_conicEquidistant;
	  var d3_geo_gnomonic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / cosλcosφ;
	  }, Math.atan);
	  (d3.geo.gnomonic = function() {
	    return d3_geo_projection(d3_geo_gnomonic);
	  }).raw = d3_geo_gnomonic;
	  function d3_geo_mercator(λ, φ) {
	    return [ λ, Math.log(Math.tan(π / 4 + φ / 2)) ];
	  }
	  d3_geo_mercator.invert = function(x, y) {
	    return [ x, 2 * Math.atan(Math.exp(y)) - halfπ ];
	  };
	  function d3_geo_mercatorProjection(project) {
	    var m = d3_geo_projection(project), scale = m.scale, translate = m.translate, clipExtent = m.clipExtent, clipAuto;
	    m.scale = function() {
	      var v = scale.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.translate = function() {
	      var v = translate.apply(m, arguments);
	      return v === m ? clipAuto ? m.clipExtent(null) : m : v;
	    };
	    m.clipExtent = function(_) {
	      var v = clipExtent.apply(m, arguments);
	      if (v === m) {
	        if (clipAuto = _ == null) {
	          var k = π * scale(), t = translate();
	          clipExtent([ [ t[0] - k, t[1] - k ], [ t[0] + k, t[1] + k ] ]);
	        }
	      } else if (clipAuto) {
	        v = null;
	      }
	      return v;
	    };
	    return m.clipExtent(null);
	  }
	  (d3.geo.mercator = function() {
	    return d3_geo_mercatorProjection(d3_geo_mercator);
	  }).raw = d3_geo_mercator;
	  var d3_geo_orthographic = d3_geo_azimuthal(function() {
	    return 1;
	  }, Math.asin);
	  (d3.geo.orthographic = function() {
	    return d3_geo_projection(d3_geo_orthographic);
	  }).raw = d3_geo_orthographic;
	  var d3_geo_stereographic = d3_geo_azimuthal(function(cosλcosφ) {
	    return 1 / (1 + cosλcosφ);
	  }, function(ρ) {
	    return 2 * Math.atan(ρ);
	  });
	  (d3.geo.stereographic = function() {
	    return d3_geo_projection(d3_geo_stereographic);
	  }).raw = d3_geo_stereographic;
	  function d3_geo_transverseMercator(λ, φ) {
	    return [ Math.log(Math.tan(π / 4 + φ / 2)), -λ ];
	  }
	  d3_geo_transverseMercator.invert = function(x, y) {
	    return [ -y, 2 * Math.atan(Math.exp(x)) - halfπ ];
	  };
	  (d3.geo.transverseMercator = function() {
	    var projection = d3_geo_mercatorProjection(d3_geo_transverseMercator), center = projection.center, rotate = projection.rotate;
	    projection.center = function(_) {
	      return _ ? center([ -_[1], _[0] ]) : (_ = center(), [ _[1], -_[0] ]);
	    };
	    projection.rotate = function(_) {
	      return _ ? rotate([ _[0], _[1], _.length > 2 ? _[2] + 90 : 90 ]) : (_ = rotate(), 
	      [ _[0], _[1], _[2] - 90 ]);
	    };
	    return rotate([ 0, 0, 90 ]);
	  }).raw = d3_geo_transverseMercator;
	  d3.geom = {};
	  function d3_geom_pointX(d) {
	    return d[0];
	  }
	  function d3_geom_pointY(d) {
	    return d[1];
	  }
	  d3.geom.hull = function(vertices) {
	    var x = d3_geom_pointX, y = d3_geom_pointY;
	    if (arguments.length) return hull(vertices);
	    function hull(data) {
	      if (data.length < 3) return [];
	      var fx = d3_functor(x), fy = d3_functor(y), i, n = data.length, points = [], flippedPoints = [];
	      for (i = 0; i < n; i++) {
	        points.push([ +fx.call(this, data[i], i), +fy.call(this, data[i], i), i ]);
	      }
	      points.sort(d3_geom_hullOrder);
	      for (i = 0; i < n; i++) flippedPoints.push([ points[i][0], -points[i][1] ]);
	      var upper = d3_geom_hullUpper(points), lower = d3_geom_hullUpper(flippedPoints);
	      var skipLeft = lower[0] === upper[0], skipRight = lower[lower.length - 1] === upper[upper.length - 1], polygon = [];
	      for (i = upper.length - 1; i >= 0; --i) polygon.push(data[points[upper[i]][2]]);
	      for (i = +skipLeft; i < lower.length - skipRight; ++i) polygon.push(data[points[lower[i]][2]]);
	      return polygon;
	    }
	    hull.x = function(_) {
	      return arguments.length ? (x = _, hull) : x;
	    };
	    hull.y = function(_) {
	      return arguments.length ? (y = _, hull) : y;
	    };
	    return hull;
	  };
	  function d3_geom_hullUpper(points) {
	    var n = points.length, hull = [ 0, 1 ], hs = 2;
	    for (var i = 2; i < n; i++) {
	      while (hs > 1 && d3_cross2d(points[hull[hs - 2]], points[hull[hs - 1]], points[i]) <= 0) --hs;
	      hull[hs++] = i;
	    }
	    return hull.slice(0, hs);
	  }
	  function d3_geom_hullOrder(a, b) {
	    return a[0] - b[0] || a[1] - b[1];
	  }
	  d3.geom.polygon = function(coordinates) {
	    d3_subclass(coordinates, d3_geom_polygonPrototype);
	    return coordinates;
	  };
	  var d3_geom_polygonPrototype = d3.geom.polygon.prototype = [];
	  d3_geom_polygonPrototype.area = function() {
	    var i = -1, n = this.length, a, b = this[n - 1], area = 0;
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      area += a[1] * b[0] - a[0] * b[1];
	    }
	    return area * .5;
	  };
	  d3_geom_polygonPrototype.centroid = function(k) {
	    var i = -1, n = this.length, x = 0, y = 0, a, b = this[n - 1], c;
	    if (!arguments.length) k = -1 / (6 * this.area());
	    while (++i < n) {
	      a = b;
	      b = this[i];
	      c = a[0] * b[1] - b[0] * a[1];
	      x += (a[0] + b[0]) * c;
	      y += (a[1] + b[1]) * c;
	    }
	    return [ x * k, y * k ];
	  };
	  d3_geom_polygonPrototype.clip = function(subject) {
	    var input, closed = d3_geom_polygonClosed(subject), i = -1, n = this.length - d3_geom_polygonClosed(this), j, m, a = this[n - 1], b, c, d;
	    while (++i < n) {
	      input = subject.slice();
	      subject.length = 0;
	      b = this[i];
	      c = input[(m = input.length - closed) - 1];
	      j = -1;
	      while (++j < m) {
	        d = input[j];
	        if (d3_geom_polygonInside(d, a, b)) {
	          if (!d3_geom_polygonInside(c, a, b)) {
	            subject.push(d3_geom_polygonIntersect(c, d, a, b));
	          }
	          subject.push(d);
	        } else if (d3_geom_polygonInside(c, a, b)) {
	          subject.push(d3_geom_polygonIntersect(c, d, a, b));
	        }
	        c = d;
	      }
	      if (closed) subject.push(subject[0]);
	      a = b;
	    }
	    return subject;
	  };
	  function d3_geom_polygonInside(p, a, b) {
	    return (b[0] - a[0]) * (p[1] - a[1]) < (b[1] - a[1]) * (p[0] - a[0]);
	  }
	  function d3_geom_polygonIntersect(c, d, a, b) {
	    var x1 = c[0], x3 = a[0], x21 = d[0] - x1, x43 = b[0] - x3, y1 = c[1], y3 = a[1], y21 = d[1] - y1, y43 = b[1] - y3, ua = (x43 * (y1 - y3) - y43 * (x1 - x3)) / (y43 * x21 - x43 * y21);
	    return [ x1 + ua * x21, y1 + ua * y21 ];
	  }
	  function d3_geom_polygonClosed(coordinates) {
	    var a = coordinates[0], b = coordinates[coordinates.length - 1];
	    return !(a[0] - b[0] || a[1] - b[1]);
	  }
	  var d3_geom_voronoiEdges, d3_geom_voronoiCells, d3_geom_voronoiBeaches, d3_geom_voronoiBeachPool = [], d3_geom_voronoiFirstCircle, d3_geom_voronoiCircles, d3_geom_voronoiCirclePool = [];
	  function d3_geom_voronoiBeach() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.edge = this.site = this.circle = null;
	  }
	  function d3_geom_voronoiCreateBeach(site) {
	    var beach = d3_geom_voronoiBeachPool.pop() || new d3_geom_voronoiBeach();
	    beach.site = site;
	    return beach;
	  }
	  function d3_geom_voronoiDetachBeach(beach) {
	    d3_geom_voronoiDetachCircle(beach);
	    d3_geom_voronoiBeaches.remove(beach);
	    d3_geom_voronoiBeachPool.push(beach);
	    d3_geom_voronoiRedBlackNode(beach);
	  }
	  function d3_geom_voronoiRemoveBeach(beach) {
	    var circle = beach.circle, x = circle.x, y = circle.cy, vertex = {
	      x: x,
	      y: y
	    }, previous = beach.P, next = beach.N, disappearing = [ beach ];
	    d3_geom_voronoiDetachBeach(beach);
	    var lArc = previous;
	    while (lArc.circle && abs(x - lArc.circle.x) < ε && abs(y - lArc.circle.cy) < ε) {
	      previous = lArc.P;
	      disappearing.unshift(lArc);
	      d3_geom_voronoiDetachBeach(lArc);
	      lArc = previous;
	    }
	    disappearing.unshift(lArc);
	    d3_geom_voronoiDetachCircle(lArc);
	    var rArc = next;
	    while (rArc.circle && abs(x - rArc.circle.x) < ε && abs(y - rArc.circle.cy) < ε) {
	      next = rArc.N;
	      disappearing.push(rArc);
	      d3_geom_voronoiDetachBeach(rArc);
	      rArc = next;
	    }
	    disappearing.push(rArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var nArcs = disappearing.length, iArc;
	    for (iArc = 1; iArc < nArcs; ++iArc) {
	      rArc = disappearing[iArc];
	      lArc = disappearing[iArc - 1];
	      d3_geom_voronoiSetEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	    }
	    lArc = disappearing[0];
	    rArc = disappearing[nArcs - 1];
	    rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, rArc.site, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiAddBeach(site) {
	    var x = site.x, directrix = site.y, lArc, rArc, dxl, dxr, node = d3_geom_voronoiBeaches._;
	    while (node) {
	      dxl = d3_geom_voronoiLeftBreakPoint(node, directrix) - x;
	      if (dxl > ε) node = node.L; else {
	        dxr = x - d3_geom_voronoiRightBreakPoint(node, directrix);
	        if (dxr > ε) {
	          if (!node.R) {
	            lArc = node;
	            break;
	          }
	          node = node.R;
	        } else {
	          if (dxl > -ε) {
	            lArc = node.P;
	            rArc = node;
	          } else if (dxr > -ε) {
	            lArc = node;
	            rArc = node.N;
	          } else {
	            lArc = rArc = node;
	          }
	          break;
	        }
	      }
	    }
	    var newArc = d3_geom_voronoiCreateBeach(site);
	    d3_geom_voronoiBeaches.insert(lArc, newArc);
	    if (!lArc && !rArc) return;
	    if (lArc === rArc) {
	      d3_geom_voronoiDetachCircle(lArc);
	      rArc = d3_geom_voronoiCreateBeach(lArc.site);
	      d3_geom_voronoiBeaches.insert(newArc, rArc);
	      newArc.edge = rArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      d3_geom_voronoiAttachCircle(lArc);
	      d3_geom_voronoiAttachCircle(rArc);
	      return;
	    }
	    if (!rArc) {
	      newArc.edge = d3_geom_voronoiCreateEdge(lArc.site, newArc.site);
	      return;
	    }
	    d3_geom_voronoiDetachCircle(lArc);
	    d3_geom_voronoiDetachCircle(rArc);
	    var lSite = lArc.site, ax = lSite.x, ay = lSite.y, bx = site.x - ax, by = site.y - ay, rSite = rArc.site, cx = rSite.x - ax, cy = rSite.y - ay, d = 2 * (bx * cy - by * cx), hb = bx * bx + by * by, hc = cx * cx + cy * cy, vertex = {
	      x: (cy * hb - by * hc) / d + ax,
	      y: (bx * hc - cx * hb) / d + ay
	    };
	    d3_geom_voronoiSetEdgeEnd(rArc.edge, lSite, rSite, vertex);
	    newArc.edge = d3_geom_voronoiCreateEdge(lSite, site, null, vertex);
	    rArc.edge = d3_geom_voronoiCreateEdge(site, rSite, null, vertex);
	    d3_geom_voronoiAttachCircle(lArc);
	    d3_geom_voronoiAttachCircle(rArc);
	  }
	  function d3_geom_voronoiLeftBreakPoint(arc, directrix) {
	    var site = arc.site, rfocx = site.x, rfocy = site.y, pby2 = rfocy - directrix;
	    if (!pby2) return rfocx;
	    var lArc = arc.P;
	    if (!lArc) return -Infinity;
	    site = lArc.site;
	    var lfocx = site.x, lfocy = site.y, plby2 = lfocy - directrix;
	    if (!plby2) return lfocx;
	    var hl = lfocx - rfocx, aby2 = 1 / pby2 - 1 / plby2, b = hl / plby2;
	    if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;
	    return (rfocx + lfocx) / 2;
	  }
	  function d3_geom_voronoiRightBreakPoint(arc, directrix) {
	    var rArc = arc.N;
	    if (rArc) return d3_geom_voronoiLeftBreakPoint(rArc, directrix);
	    var site = arc.site;
	    return site.y === directrix ? site.x : Infinity;
	  }
	  function d3_geom_voronoiCell(site) {
	    this.site = site;
	    this.edges = [];
	  }
	  d3_geom_voronoiCell.prototype.prepare = function() {
	    var halfEdges = this.edges, iHalfEdge = halfEdges.length, edge;
	    while (iHalfEdge--) {
	      edge = halfEdges[iHalfEdge].edge;
	      if (!edge.b || !edge.a) halfEdges.splice(iHalfEdge, 1);
	    }
	    halfEdges.sort(d3_geom_voronoiHalfEdgeOrder);
	    return halfEdges.length;
	  };
	  function d3_geom_voronoiCloseCells(extent) {
	    var x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], x2, y2, x3, y3, cells = d3_geom_voronoiCells, iCell = cells.length, cell, iHalfEdge, halfEdges, nHalfEdges, start, end;
	    while (iCell--) {
	      cell = cells[iCell];
	      if (!cell || !cell.prepare()) continue;
	      halfEdges = cell.edges;
	      nHalfEdges = halfEdges.length;
	      iHalfEdge = 0;
	      while (iHalfEdge < nHalfEdges) {
	        end = halfEdges[iHalfEdge].end(), x3 = end.x, y3 = end.y;
	        start = halfEdges[++iHalfEdge % nHalfEdges].start(), x2 = start.x, y2 = start.y;
	        if (abs(x3 - x2) > ε || abs(y3 - y2) > ε) {
	          halfEdges.splice(iHalfEdge, 0, new d3_geom_voronoiHalfEdge(d3_geom_voronoiCreateBorderEdge(cell.site, end, abs(x3 - x0) < ε && y1 - y3 > ε ? {
	            x: x0,
	            y: abs(x2 - x0) < ε ? y2 : y1
	          } : abs(y3 - y1) < ε && x1 - x3 > ε ? {
	            x: abs(y2 - y1) < ε ? x2 : x1,
	            y: y1
	          } : abs(x3 - x1) < ε && y3 - y0 > ε ? {
	            x: x1,
	            y: abs(x2 - x1) < ε ? y2 : y0
	          } : abs(y3 - y0) < ε && x3 - x0 > ε ? {
	            x: abs(y2 - y0) < ε ? x2 : x0,
	            y: y0
	          } : null), cell.site, null));
	          ++nHalfEdges;
	        }
	      }
	    }
	  }
	  function d3_geom_voronoiHalfEdgeOrder(a, b) {
	    return b.angle - a.angle;
	  }
	  function d3_geom_voronoiCircle() {
	    d3_geom_voronoiRedBlackNode(this);
	    this.x = this.y = this.arc = this.site = this.cy = null;
	  }
	  function d3_geom_voronoiAttachCircle(arc) {
	    var lArc = arc.P, rArc = arc.N;
	    if (!lArc || !rArc) return;
	    var lSite = lArc.site, cSite = arc.site, rSite = rArc.site;
	    if (lSite === rSite) return;
	    var bx = cSite.x, by = cSite.y, ax = lSite.x - bx, ay = lSite.y - by, cx = rSite.x - bx, cy = rSite.y - by;
	    var d = 2 * (ax * cy - ay * cx);
	    if (d >= -ε2) return;
	    var ha = ax * ax + ay * ay, hc = cx * cx + cy * cy, x = (cy * ha - ay * hc) / d, y = (ax * hc - cx * ha) / d, cy = y + by;
	    var circle = d3_geom_voronoiCirclePool.pop() || new d3_geom_voronoiCircle();
	    circle.arc = arc;
	    circle.site = cSite;
	    circle.x = x + bx;
	    circle.y = cy + Math.sqrt(x * x + y * y);
	    circle.cy = cy;
	    arc.circle = circle;
	    var before = null, node = d3_geom_voronoiCircles._;
	    while (node) {
	      if (circle.y < node.y || circle.y === node.y && circle.x <= node.x) {
	        if (node.L) node = node.L; else {
	          before = node.P;
	          break;
	        }
	      } else {
	        if (node.R) node = node.R; else {
	          before = node;
	          break;
	        }
	      }
	    }
	    d3_geom_voronoiCircles.insert(before, circle);
	    if (!before) d3_geom_voronoiFirstCircle = circle;
	  }
	  function d3_geom_voronoiDetachCircle(arc) {
	    var circle = arc.circle;
	    if (circle) {
	      if (!circle.P) d3_geom_voronoiFirstCircle = circle.N;
	      d3_geom_voronoiCircles.remove(circle);
	      d3_geom_voronoiCirclePool.push(circle);
	      d3_geom_voronoiRedBlackNode(circle);
	      arc.circle = null;
	    }
	  }
	  function d3_geom_voronoiClipEdges(extent) {
	    var edges = d3_geom_voronoiEdges, clip = d3_geom_clipLine(extent[0][0], extent[0][1], extent[1][0], extent[1][1]), i = edges.length, e;
	    while (i--) {
	      e = edges[i];
	      if (!d3_geom_voronoiConnectEdge(e, extent) || !clip(e) || abs(e.a.x - e.b.x) < ε && abs(e.a.y - e.b.y) < ε) {
	        e.a = e.b = null;
	        edges.splice(i, 1);
	      }
	    }
	  }
	  function d3_geom_voronoiConnectEdge(edge, extent) {
	    var vb = edge.b;
	    if (vb) return true;
	    var va = edge.a, x0 = extent[0][0], x1 = extent[1][0], y0 = extent[0][1], y1 = extent[1][1], lSite = edge.l, rSite = edge.r, lx = lSite.x, ly = lSite.y, rx = rSite.x, ry = rSite.y, fx = (lx + rx) / 2, fy = (ly + ry) / 2, fm, fb;
	    if (ry === ly) {
	      if (fx < x0 || fx >= x1) return;
	      if (lx > rx) {
	        if (!va) va = {
	          x: fx,
	          y: y0
	        }; else if (va.y >= y1) return;
	        vb = {
	          x: fx,
	          y: y1
	        };
	      } else {
	        if (!va) va = {
	          x: fx,
	          y: y1
	        }; else if (va.y < y0) return;
	        vb = {
	          x: fx,
	          y: y0
	        };
	      }
	    } else {
	      fm = (lx - rx) / (ry - ly);
	      fb = fy - fm * fx;
	      if (fm < -1 || fm > 1) {
	        if (lx > rx) {
	          if (!va) va = {
	            x: (y0 - fb) / fm,
	            y: y0
	          }; else if (va.y >= y1) return;
	          vb = {
	            x: (y1 - fb) / fm,
	            y: y1
	          };
	        } else {
	          if (!va) va = {
	            x: (y1 - fb) / fm,
	            y: y1
	          }; else if (va.y < y0) return;
	          vb = {
	            x: (y0 - fb) / fm,
	            y: y0
	          };
	        }
	      } else {
	        if (ly < ry) {
	          if (!va) va = {
	            x: x0,
	            y: fm * x0 + fb
	          }; else if (va.x >= x1) return;
	          vb = {
	            x: x1,
	            y: fm * x1 + fb
	          };
	        } else {
	          if (!va) va = {
	            x: x1,
	            y: fm * x1 + fb
	          }; else if (va.x < x0) return;
	          vb = {
	            x: x0,
	            y: fm * x0 + fb
	          };
	        }
	      }
	    }
	    edge.a = va;
	    edge.b = vb;
	    return true;
	  }
	  function d3_geom_voronoiEdge(lSite, rSite) {
	    this.l = lSite;
	    this.r = rSite;
	    this.a = this.b = null;
	  }
	  function d3_geom_voronoiCreateEdge(lSite, rSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, rSite);
	    d3_geom_voronoiEdges.push(edge);
	    if (va) d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, va);
	    if (vb) d3_geom_voronoiSetEdgeEnd(edge, rSite, lSite, vb);
	    d3_geom_voronoiCells[lSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, lSite, rSite));
	    d3_geom_voronoiCells[rSite.i].edges.push(new d3_geom_voronoiHalfEdge(edge, rSite, lSite));
	    return edge;
	  }
	  function d3_geom_voronoiCreateBorderEdge(lSite, va, vb) {
	    var edge = new d3_geom_voronoiEdge(lSite, null);
	    edge.a = va;
	    edge.b = vb;
	    d3_geom_voronoiEdges.push(edge);
	    return edge;
	  }
	  function d3_geom_voronoiSetEdgeEnd(edge, lSite, rSite, vertex) {
	    if (!edge.a && !edge.b) {
	      edge.a = vertex;
	      edge.l = lSite;
	      edge.r = rSite;
	    } else if (edge.l === rSite) {
	      edge.b = vertex;
	    } else {
	      edge.a = vertex;
	    }
	  }
	  function d3_geom_voronoiHalfEdge(edge, lSite, rSite) {
	    var va = edge.a, vb = edge.b;
	    this.edge = edge;
	    this.site = lSite;
	    this.angle = rSite ? Math.atan2(rSite.y - lSite.y, rSite.x - lSite.x) : edge.l === lSite ? Math.atan2(vb.x - va.x, va.y - vb.y) : Math.atan2(va.x - vb.x, vb.y - va.y);
	  }
	  d3_geom_voronoiHalfEdge.prototype = {
	    start: function() {
	      return this.edge.l === this.site ? this.edge.a : this.edge.b;
	    },
	    end: function() {
	      return this.edge.l === this.site ? this.edge.b : this.edge.a;
	    }
	  };
	  function d3_geom_voronoiRedBlackTree() {
	    this._ = null;
	  }
	  function d3_geom_voronoiRedBlackNode(node) {
	    node.U = node.C = node.L = node.R = node.P = node.N = null;
	  }
	  d3_geom_voronoiRedBlackTree.prototype = {
	    insert: function(after, node) {
	      var parent, grandpa, uncle;
	      if (after) {
	        node.P = after;
	        node.N = after.N;
	        if (after.N) after.N.P = node;
	        after.N = node;
	        if (after.R) {
	          after = after.R;
	          while (after.L) after = after.L;
	          after.L = node;
	        } else {
	          after.R = node;
	        }
	        parent = after;
	      } else if (this._) {
	        after = d3_geom_voronoiRedBlackFirst(this._);
	        node.P = null;
	        node.N = after;
	        after.P = after.L = node;
	        parent = after;
	      } else {
	        node.P = node.N = null;
	        this._ = node;
	        parent = null;
	      }
	      node.L = node.R = null;
	      node.U = parent;
	      node.C = true;
	      after = node;
	      while (parent && parent.C) {
	        grandpa = parent.U;
	        if (parent === grandpa.L) {
	          uncle = grandpa.R;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.R) {
	              d3_geom_voronoiRedBlackRotateLeft(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, grandpa);
	          }
	        } else {
	          uncle = grandpa.L;
	          if (uncle && uncle.C) {
	            parent.C = uncle.C = false;
	            grandpa.C = true;
	            after = grandpa;
	          } else {
	            if (after === parent.L) {
	              d3_geom_voronoiRedBlackRotateRight(this, parent);
	              after = parent;
	              parent = after.U;
	            }
	            parent.C = false;
	            grandpa.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, grandpa);
	          }
	        }
	        parent = after.U;
	      }
	      this._.C = false;
	    },
	    remove: function(node) {
	      if (node.N) node.N.P = node.P;
	      if (node.P) node.P.N = node.N;
	      node.N = node.P = null;
	      var parent = node.U, sibling, left = node.L, right = node.R, next, red;
	      if (!left) next = right; else if (!right) next = left; else next = d3_geom_voronoiRedBlackFirst(right);
	      if (parent) {
	        if (parent.L === node) parent.L = next; else parent.R = next;
	      } else {
	        this._ = next;
	      }
	      if (left && right) {
	        red = next.C;
	        next.C = node.C;
	        next.L = left;
	        left.U = next;
	        if (next !== right) {
	          parent = next.U;
	          next.U = node.U;
	          node = next.R;
	          parent.L = node;
	          next.R = right;
	          right.U = next;
	        } else {
	          next.U = parent;
	          parent = next;
	          node = next.R;
	        }
	      } else {
	        red = node.C;
	        node = next;
	      }
	      if (node) node.U = parent;
	      if (red) return;
	      if (node && node.C) {
	        node.C = false;
	        return;
	      }
	      do {
	        if (node === this._) break;
	        if (node === parent.L) {
	          sibling = parent.R;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            sibling = parent.R;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.R || !sibling.R.C) {
	              sibling.L.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateRight(this, sibling);
	              sibling = parent.R;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.R.C = false;
	            d3_geom_voronoiRedBlackRotateLeft(this, parent);
	            node = this._;
	            break;
	          }
	        } else {
	          sibling = parent.L;
	          if (sibling.C) {
	            sibling.C = false;
	            parent.C = true;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            sibling = parent.L;
	          }
	          if (sibling.L && sibling.L.C || sibling.R && sibling.R.C) {
	            if (!sibling.L || !sibling.L.C) {
	              sibling.R.C = false;
	              sibling.C = true;
	              d3_geom_voronoiRedBlackRotateLeft(this, sibling);
	              sibling = parent.L;
	            }
	            sibling.C = parent.C;
	            parent.C = sibling.L.C = false;
	            d3_geom_voronoiRedBlackRotateRight(this, parent);
	            node = this._;
	            break;
	          }
	        }
	        sibling.C = true;
	        node = parent;
	        parent = parent.U;
	      } while (!node.C);
	      if (node) node.C = false;
	    }
	  };
	  function d3_geom_voronoiRedBlackRotateLeft(tree, node) {
	    var p = node, q = node.R, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.R = q.L;
	    if (p.R) p.R.U = p;
	    q.L = p;
	  }
	  function d3_geom_voronoiRedBlackRotateRight(tree, node) {
	    var p = node, q = node.L, parent = p.U;
	    if (parent) {
	      if (parent.L === p) parent.L = q; else parent.R = q;
	    } else {
	      tree._ = q;
	    }
	    q.U = parent;
	    p.U = q;
	    p.L = q.R;
	    if (p.L) p.L.U = p;
	    q.R = p;
	  }
	  function d3_geom_voronoiRedBlackFirst(node) {
	    while (node.L) node = node.L;
	    return node;
	  }
	  function d3_geom_voronoi(sites, bbox) {
	    var site = sites.sort(d3_geom_voronoiVertexOrder).pop(), x0, y0, circle;
	    d3_geom_voronoiEdges = [];
	    d3_geom_voronoiCells = new Array(sites.length);
	    d3_geom_voronoiBeaches = new d3_geom_voronoiRedBlackTree();
	    d3_geom_voronoiCircles = new d3_geom_voronoiRedBlackTree();
	    while (true) {
	      circle = d3_geom_voronoiFirstCircle;
	      if (site && (!circle || site.y < circle.y || site.y === circle.y && site.x < circle.x)) {
	        if (site.x !== x0 || site.y !== y0) {
	          d3_geom_voronoiCells[site.i] = new d3_geom_voronoiCell(site);
	          d3_geom_voronoiAddBeach(site);
	          x0 = site.x, y0 = site.y;
	        }
	        site = sites.pop();
	      } else if (circle) {
	        d3_geom_voronoiRemoveBeach(circle.arc);
	      } else {
	        break;
	      }
	    }
	    if (bbox) d3_geom_voronoiClipEdges(bbox), d3_geom_voronoiCloseCells(bbox);
	    var diagram = {
	      cells: d3_geom_voronoiCells,
	      edges: d3_geom_voronoiEdges
	    };
	    d3_geom_voronoiBeaches = d3_geom_voronoiCircles = d3_geom_voronoiEdges = d3_geom_voronoiCells = null;
	    return diagram;
	  }
	  function d3_geom_voronoiVertexOrder(a, b) {
	    return b.y - a.y || b.x - a.x;
	  }
	  d3.geom.voronoi = function(points) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, fx = x, fy = y, clipExtent = d3_geom_voronoiClipExtent;
	    if (points) return voronoi(points);
	    function voronoi(data) {
	      var polygons = new Array(data.length), x0 = clipExtent[0][0], y0 = clipExtent[0][1], x1 = clipExtent[1][0], y1 = clipExtent[1][1];
	      d3_geom_voronoi(sites(data), clipExtent).cells.forEach(function(cell, i) {
	        var edges = cell.edges, site = cell.site, polygon = polygons[i] = edges.length ? edges.map(function(e) {
	          var s = e.start();
	          return [ s.x, s.y ];
	        }) : site.x >= x0 && site.x <= x1 && site.y >= y0 && site.y <= y1 ? [ [ x0, y1 ], [ x1, y1 ], [ x1, y0 ], [ x0, y0 ] ] : [];
	        polygon.point = data[i];
	      });
	      return polygons;
	    }
	    function sites(data) {
	      return data.map(function(d, i) {
	        return {
	          x: Math.round(fx(d, i) / ε) * ε,
	          y: Math.round(fy(d, i) / ε) * ε,
	          i: i
	        };
	      });
	    }
	    voronoi.links = function(data) {
	      return d3_geom_voronoi(sites(data)).edges.filter(function(edge) {
	        return edge.l && edge.r;
	      }).map(function(edge) {
	        return {
	          source: data[edge.l.i],
	          target: data[edge.r.i]
	        };
	      });
	    };
	    voronoi.triangles = function(data) {
	      var triangles = [];
	      d3_geom_voronoi(sites(data)).cells.forEach(function(cell, i) {
	        var site = cell.site, edges = cell.edges.sort(d3_geom_voronoiHalfEdgeOrder), j = -1, m = edges.length, e0, s0, e1 = edges[m - 1].edge, s1 = e1.l === site ? e1.r : e1.l;
	        while (++j < m) {
	          e0 = e1;
	          s0 = s1;
	          e1 = edges[j].edge;
	          s1 = e1.l === site ? e1.r : e1.l;
	          if (i < s0.i && i < s1.i && d3_geom_voronoiTriangleArea(site, s0, s1) < 0) {
	            triangles.push([ data[i], data[s0.i], data[s1.i] ]);
	          }
	        }
	      });
	      return triangles;
	    };
	    voronoi.x = function(_) {
	      return arguments.length ? (fx = d3_functor(x = _), voronoi) : x;
	    };
	    voronoi.y = function(_) {
	      return arguments.length ? (fy = d3_functor(y = _), voronoi) : y;
	    };
	    voronoi.clipExtent = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent;
	      clipExtent = _ == null ? d3_geom_voronoiClipExtent : _;
	      return voronoi;
	    };
	    voronoi.size = function(_) {
	      if (!arguments.length) return clipExtent === d3_geom_voronoiClipExtent ? null : clipExtent && clipExtent[1];
	      return voronoi.clipExtent(_ && [ [ 0, 0 ], _ ]);
	    };
	    return voronoi;
	  };
	  var d3_geom_voronoiClipExtent = [ [ -1e6, -1e6 ], [ 1e6, 1e6 ] ];
	  function d3_geom_voronoiTriangleArea(a, b, c) {
	    return (a.x - c.x) * (b.y - a.y) - (a.x - b.x) * (c.y - a.y);
	  }
	  d3.geom.delaunay = function(vertices) {
	    return d3.geom.voronoi().triangles(vertices);
	  };
	  d3.geom.quadtree = function(points, x1, y1, x2, y2) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, compat;
	    if (compat = arguments.length) {
	      x = d3_geom_quadtreeCompatX;
	      y = d3_geom_quadtreeCompatY;
	      if (compat === 3) {
	        y2 = y1;
	        x2 = x1;
	        y1 = x1 = 0;
	      }
	      return quadtree(points);
	    }
	    function quadtree(data) {
	      var d, fx = d3_functor(x), fy = d3_functor(y), xs, ys, i, n, x1_, y1_, x2_, y2_;
	      if (x1 != null) {
	        x1_ = x1, y1_ = y1, x2_ = x2, y2_ = y2;
	      } else {
	        x2_ = y2_ = -(x1_ = y1_ = Infinity);
	        xs = [], ys = [];
	        n = data.length;
	        if (compat) for (i = 0; i < n; ++i) {
	          d = data[i];
	          if (d.x < x1_) x1_ = d.x;
	          if (d.y < y1_) y1_ = d.y;
	          if (d.x > x2_) x2_ = d.x;
	          if (d.y > y2_) y2_ = d.y;
	          xs.push(d.x);
	          ys.push(d.y);
	        } else for (i = 0; i < n; ++i) {
	          var x_ = +fx(d = data[i], i), y_ = +fy(d, i);
	          if (x_ < x1_) x1_ = x_;
	          if (y_ < y1_) y1_ = y_;
	          if (x_ > x2_) x2_ = x_;
	          if (y_ > y2_) y2_ = y_;
	          xs.push(x_);
	          ys.push(y_);
	        }
	      }
	      var dx = x2_ - x1_, dy = y2_ - y1_;
	      if (dx > dy) y2_ = y1_ + dx; else x2_ = x1_ + dy;
	      function insert(n, d, x, y, x1, y1, x2, y2) {
	        if (isNaN(x) || isNaN(y)) return;
	        if (n.leaf) {
	          var nx = n.x, ny = n.y;
	          if (nx != null) {
	            if (abs(nx - x) + abs(ny - y) < .01) {
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            } else {
	              var nPoint = n.point;
	              n.x = n.y = n.point = null;
	              insertChild(n, nPoint, nx, ny, x1, y1, x2, y2);
	              insertChild(n, d, x, y, x1, y1, x2, y2);
	            }
	          } else {
	            n.x = x, n.y = y, n.point = d;
	          }
	        } else {
	          insertChild(n, d, x, y, x1, y1, x2, y2);
	        }
	      }
	      function insertChild(n, d, x, y, x1, y1, x2, y2) {
	        var xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym, i = below << 1 | right;
	        n.leaf = false;
	        n = n.nodes[i] || (n.nodes[i] = d3_geom_quadtreeNode());
	        if (right) x1 = xm; else x2 = xm;
	        if (below) y1 = ym; else y2 = ym;
	        insert(n, d, x, y, x1, y1, x2, y2);
	      }
	      var root = d3_geom_quadtreeNode();
	      root.add = function(d) {
	        insert(root, d, +fx(d, ++i), +fy(d, i), x1_, y1_, x2_, y2_);
	      };
	      root.visit = function(f) {
	        d3_geom_quadtreeVisit(f, root, x1_, y1_, x2_, y2_);
	      };
	      root.find = function(point) {
	        return d3_geom_quadtreeFind(root, point[0], point[1], x1_, y1_, x2_, y2_);
	      };
	      i = -1;
	      if (x1 == null) {
	        while (++i < n) {
	          insert(root, data[i], xs[i], ys[i], x1_, y1_, x2_, y2_);
	        }
	        --i;
	      } else data.forEach(root.add);
	      xs = ys = data = d = null;
	      return root;
	    }
	    quadtree.x = function(_) {
	      return arguments.length ? (x = _, quadtree) : x;
	    };
	    quadtree.y = function(_) {
	      return arguments.length ? (y = _, quadtree) : y;
	    };
	    quadtree.extent = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ [ x1, y1 ], [ x2, y2 ] ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = +_[0][0], y1 = +_[0][1], x2 = +_[1][0], 
	      y2 = +_[1][1];
	      return quadtree;
	    };
	    quadtree.size = function(_) {
	      if (!arguments.length) return x1 == null ? null : [ x2 - x1, y2 - y1 ];
	      if (_ == null) x1 = y1 = x2 = y2 = null; else x1 = y1 = 0, x2 = +_[0], y2 = +_[1];
	      return quadtree;
	    };
	    return quadtree;
	  };
	  function d3_geom_quadtreeCompatX(d) {
	    return d.x;
	  }
	  function d3_geom_quadtreeCompatY(d) {
	    return d.y;
	  }
	  function d3_geom_quadtreeNode() {
	    return {
	      leaf: true,
	      nodes: [],
	      point: null,
	      x: null,
	      y: null
	    };
	  }
	  function d3_geom_quadtreeVisit(f, node, x1, y1, x2, y2) {
	    if (!f(node, x1, y1, x2, y2)) {
	      var sx = (x1 + x2) * .5, sy = (y1 + y2) * .5, children = node.nodes;
	      if (children[0]) d3_geom_quadtreeVisit(f, children[0], x1, y1, sx, sy);
	      if (children[1]) d3_geom_quadtreeVisit(f, children[1], sx, y1, x2, sy);
	      if (children[2]) d3_geom_quadtreeVisit(f, children[2], x1, sy, sx, y2);
	      if (children[3]) d3_geom_quadtreeVisit(f, children[3], sx, sy, x2, y2);
	    }
	  }
	  function d3_geom_quadtreeFind(root, x, y, x0, y0, x3, y3) {
	    var minDistance2 = Infinity, closestPoint;
	    (function find(node, x1, y1, x2, y2) {
	      if (x1 > x3 || y1 > y3 || x2 < x0 || y2 < y0) return;
	      if (point = node.point) {
	        var point, dx = x - node.x, dy = y - node.y, distance2 = dx * dx + dy * dy;
	        if (distance2 < minDistance2) {
	          var distance = Math.sqrt(minDistance2 = distance2);
	          x0 = x - distance, y0 = y - distance;
	          x3 = x + distance, y3 = y + distance;
	          closestPoint = point;
	        }
	      }
	      var children = node.nodes, xm = (x1 + x2) * .5, ym = (y1 + y2) * .5, right = x >= xm, below = y >= ym;
	      for (var i = below << 1 | right, j = i + 4; i < j; ++i) {
	        if (node = children[i & 3]) switch (i & 3) {
	         case 0:
	          find(node, x1, y1, xm, ym);
	          break;
	
	         case 1:
	          find(node, xm, y1, x2, ym);
	          break;
	
	         case 2:
	          find(node, x1, ym, xm, y2);
	          break;
	
	         case 3:
	          find(node, xm, ym, x2, y2);
	          break;
	        }
	      }
	    })(root, x0, y0, x3, y3);
	    return closestPoint;
	  }
	  d3.interpolateRgb = d3_interpolateRgb;
	  function d3_interpolateRgb(a, b) {
	    a = d3.rgb(a);
	    b = d3.rgb(b);
	    var ar = a.r, ag = a.g, ab = a.b, br = b.r - ar, bg = b.g - ag, bb = b.b - ab;
	    return function(t) {
	      return "#" + d3_rgb_hex(Math.round(ar + br * t)) + d3_rgb_hex(Math.round(ag + bg * t)) + d3_rgb_hex(Math.round(ab + bb * t));
	    };
	  }
	  d3.interpolateObject = d3_interpolateObject;
	  function d3_interpolateObject(a, b) {
	    var i = {}, c = {}, k;
	    for (k in a) {
	      if (k in b) {
	        i[k] = d3_interpolate(a[k], b[k]);
	      } else {
	        c[k] = a[k];
	      }
	    }
	    for (k in b) {
	      if (!(k in a)) {
	        c[k] = b[k];
	      }
	    }
	    return function(t) {
	      for (k in i) c[k] = i[k](t);
	      return c;
	    };
	  }
	  d3.interpolateNumber = d3_interpolateNumber;
	  function d3_interpolateNumber(a, b) {
	    a = +a, b = +b;
	    return function(t) {
	      return a * (1 - t) + b * t;
	    };
	  }
	  d3.interpolateString = d3_interpolateString;
	  function d3_interpolateString(a, b) {
	    var bi = d3_interpolate_numberA.lastIndex = d3_interpolate_numberB.lastIndex = 0, am, bm, bs, i = -1, s = [], q = [];
	    a = a + "", b = b + "";
	    while ((am = d3_interpolate_numberA.exec(a)) && (bm = d3_interpolate_numberB.exec(b))) {
	      if ((bs = bm.index) > bi) {
	        bs = b.slice(bi, bs);
	        if (s[i]) s[i] += bs; else s[++i] = bs;
	      }
	      if ((am = am[0]) === (bm = bm[0])) {
	        if (s[i]) s[i] += bm; else s[++i] = bm;
	      } else {
	        s[++i] = null;
	        q.push({
	          i: i,
	          x: d3_interpolateNumber(am, bm)
	        });
	      }
	      bi = d3_interpolate_numberB.lastIndex;
	    }
	    if (bi < b.length) {
	      bs = b.slice(bi);
	      if (s[i]) s[i] += bs; else s[++i] = bs;
	    }
	    return s.length < 2 ? q[0] ? (b = q[0].x, function(t) {
	      return b(t) + "";
	    }) : function() {
	      return b;
	    } : (b = q.length, function(t) {
	      for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    });
	  }
	  var d3_interpolate_numberA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, d3_interpolate_numberB = new RegExp(d3_interpolate_numberA.source, "g");
	  d3.interpolate = d3_interpolate;
	  function d3_interpolate(a, b) {
	    var i = d3.interpolators.length, f;
	    while (--i >= 0 && !(f = d3.interpolators[i](a, b))) ;
	    return f;
	  }
	  d3.interpolators = [ function(a, b) {
	    var t = typeof b;
	    return (t === "string" ? d3_rgb_names.has(b.toLowerCase()) || /^(#|rgb\(|hsl\()/i.test(b) ? d3_interpolateRgb : d3_interpolateString : b instanceof d3_color ? d3_interpolateRgb : Array.isArray(b) ? d3_interpolateArray : t === "object" && isNaN(b) ? d3_interpolateObject : d3_interpolateNumber)(a, b);
	  } ];
	  d3.interpolateArray = d3_interpolateArray;
	  function d3_interpolateArray(a, b) {
	    var x = [], c = [], na = a.length, nb = b.length, n0 = Math.min(a.length, b.length), i;
	    for (i = 0; i < n0; ++i) x.push(d3_interpolate(a[i], b[i]));
	    for (;i < na; ++i) c[i] = a[i];
	    for (;i < nb; ++i) c[i] = b[i];
	    return function(t) {
	      for (i = 0; i < n0; ++i) c[i] = x[i](t);
	      return c;
	    };
	  }
	  var d3_ease_default = function() {
	    return d3_identity;
	  };
	  var d3_ease = d3.map({
	    linear: d3_ease_default,
	    poly: d3_ease_poly,
	    quad: function() {
	      return d3_ease_quad;
	    },
	    cubic: function() {
	      return d3_ease_cubic;
	    },
	    sin: function() {
	      return d3_ease_sin;
	    },
	    exp: function() {
	      return d3_ease_exp;
	    },
	    circle: function() {
	      return d3_ease_circle;
	    },
	    elastic: d3_ease_elastic,
	    back: d3_ease_back,
	    bounce: function() {
	      return d3_ease_bounce;
	    }
	  });
	  var d3_ease_mode = d3.map({
	    "in": d3_identity,
	    out: d3_ease_reverse,
	    "in-out": d3_ease_reflect,
	    "out-in": function(f) {
	      return d3_ease_reflect(d3_ease_reverse(f));
	    }
	  });
	  d3.ease = function(name) {
	    var i = name.indexOf("-"), t = i >= 0 ? name.slice(0, i) : name, m = i >= 0 ? name.slice(i + 1) : "in";
	    t = d3_ease.get(t) || d3_ease_default;
	    m = d3_ease_mode.get(m) || d3_identity;
	    return d3_ease_clamp(m(t.apply(null, d3_arraySlice.call(arguments, 1))));
	  };
	  function d3_ease_clamp(f) {
	    return function(t) {
	      return t <= 0 ? 0 : t >= 1 ? 1 : f(t);
	    };
	  }
	  function d3_ease_reverse(f) {
	    return function(t) {
	      return 1 - f(1 - t);
	    };
	  }
	  function d3_ease_reflect(f) {
	    return function(t) {
	      return .5 * (t < .5 ? f(2 * t) : 2 - f(2 - 2 * t));
	    };
	  }
	  function d3_ease_quad(t) {
	    return t * t;
	  }
	  function d3_ease_cubic(t) {
	    return t * t * t;
	  }
	  function d3_ease_cubicInOut(t) {
	    if (t <= 0) return 0;
	    if (t >= 1) return 1;
	    var t2 = t * t, t3 = t2 * t;
	    return 4 * (t < .5 ? t3 : 3 * (t - t2) + t3 - .75);
	  }
	  function d3_ease_poly(e) {
	    return function(t) {
	      return Math.pow(t, e);
	    };
	  }
	  function d3_ease_sin(t) {
	    return 1 - Math.cos(t * halfπ);
	  }
	  function d3_ease_exp(t) {
	    return Math.pow(2, 10 * (t - 1));
	  }
	  function d3_ease_circle(t) {
	    return 1 - Math.sqrt(1 - t * t);
	  }
	  function d3_ease_elastic(a, p) {
	    var s;
	    if (arguments.length < 2) p = .45;
	    if (arguments.length) s = p / τ * Math.asin(1 / a); else a = 1, s = p / 4;
	    return function(t) {
	      return 1 + a * Math.pow(2, -10 * t) * Math.sin((t - s) * τ / p);
	    };
	  }
	  function d3_ease_back(s) {
	    if (!s) s = 1.70158;
	    return function(t) {
	      return t * t * ((s + 1) * t - s);
	    };
	  }
	  function d3_ease_bounce(t) {
	    return t < 1 / 2.75 ? 7.5625 * t * t : t < 2 / 2.75 ? 7.5625 * (t -= 1.5 / 2.75) * t + .75 : t < 2.5 / 2.75 ? 7.5625 * (t -= 2.25 / 2.75) * t + .9375 : 7.5625 * (t -= 2.625 / 2.75) * t + .984375;
	  }
	  d3.interpolateHcl = d3_interpolateHcl;
	  function d3_interpolateHcl(a, b) {
	    a = d3.hcl(a);
	    b = d3.hcl(b);
	    var ah = a.h, ac = a.c, al = a.l, bh = b.h - ah, bc = b.c - ac, bl = b.l - al;
	    if (isNaN(bc)) bc = 0, ac = isNaN(ac) ? b.c : ac;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hcl_lab(ah + bh * t, ac + bc * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateHsl = d3_interpolateHsl;
	  function d3_interpolateHsl(a, b) {
	    a = d3.hsl(a);
	    b = d3.hsl(b);
	    var ah = a.h, as = a.s, al = a.l, bh = b.h - ah, bs = b.s - as, bl = b.l - al;
	    if (isNaN(bs)) bs = 0, as = isNaN(as) ? b.s : as;
	    if (isNaN(bh)) bh = 0, ah = isNaN(ah) ? b.h : ah; else if (bh > 180) bh -= 360; else if (bh < -180) bh += 360;
	    return function(t) {
	      return d3_hsl_rgb(ah + bh * t, as + bs * t, al + bl * t) + "";
	    };
	  }
	  d3.interpolateLab = d3_interpolateLab;
	  function d3_interpolateLab(a, b) {
	    a = d3.lab(a);
	    b = d3.lab(b);
	    var al = a.l, aa = a.a, ab = a.b, bl = b.l - al, ba = b.a - aa, bb = b.b - ab;
	    return function(t) {
	      return d3_lab_rgb(al + bl * t, aa + ba * t, ab + bb * t) + "";
	    };
	  }
	  d3.interpolateRound = d3_interpolateRound;
	  function d3_interpolateRound(a, b) {
	    b -= a;
	    return function(t) {
	      return Math.round(a + b * t);
	    };
	  }
	  d3.transform = function(string) {
	    var g = d3_document.createElementNS(d3.ns.prefix.svg, "g");
	    return (d3.transform = function(string) {
	      if (string != null) {
	        g.setAttribute("transform", string);
	        var t = g.transform.baseVal.consolidate();
	      }
	      return new d3_transform(t ? t.matrix : d3_transformIdentity);
	    })(string);
	  };
	  function d3_transform(m) {
	    var r0 = [ m.a, m.b ], r1 = [ m.c, m.d ], kx = d3_transformNormalize(r0), kz = d3_transformDot(r0, r1), ky = d3_transformNormalize(d3_transformCombine(r1, r0, -kz)) || 0;
	    if (r0[0] * r1[1] < r1[0] * r0[1]) {
	      r0[0] *= -1;
	      r0[1] *= -1;
	      kx *= -1;
	      kz *= -1;
	    }
	    this.rotate = (kx ? Math.atan2(r0[1], r0[0]) : Math.atan2(-r1[0], r1[1])) * d3_degrees;
	    this.translate = [ m.e, m.f ];
	    this.scale = [ kx, ky ];
	    this.skew = ky ? Math.atan2(kz, ky) * d3_degrees : 0;
	  }
	  d3_transform.prototype.toString = function() {
	    return "translate(" + this.translate + ")rotate(" + this.rotate + ")skewX(" + this.skew + ")scale(" + this.scale + ")";
	  };
	  function d3_transformDot(a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	  }
	  function d3_transformNormalize(a) {
	    var k = Math.sqrt(d3_transformDot(a, a));
	    if (k) {
	      a[0] /= k;
	      a[1] /= k;
	    }
	    return k;
	  }
	  function d3_transformCombine(a, b, k) {
	    a[0] += k * b[0];
	    a[1] += k * b[1];
	    return a;
	  }
	  var d3_transformIdentity = {
	    a: 1,
	    b: 0,
	    c: 0,
	    d: 1,
	    e: 0,
	    f: 0
	  };
	  d3.interpolateTransform = d3_interpolateTransform;
	  function d3_interpolateTransformPop(s) {
	    return s.length ? s.pop() + "," : "";
	  }
	  function d3_interpolateTranslate(ta, tb, s, q) {
	    if (ta[0] !== tb[0] || ta[1] !== tb[1]) {
	      var i = s.push("translate(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ta[0], tb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ta[1], tb[1])
	      });
	    } else if (tb[0] || tb[1]) {
	      s.push("translate(" + tb + ")");
	    }
	  }
	  function d3_interpolateRotate(ra, rb, s, q) {
	    if (ra !== rb) {
	      if (ra - rb > 180) rb += 360; else if (rb - ra > 180) ra += 360;
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "rotate(", null, ")") - 2,
	        x: d3_interpolateNumber(ra, rb)
	      });
	    } else if (rb) {
	      s.push(d3_interpolateTransformPop(s) + "rotate(" + rb + ")");
	    }
	  }
	  function d3_interpolateSkew(wa, wb, s, q) {
	    if (wa !== wb) {
	      q.push({
	        i: s.push(d3_interpolateTransformPop(s) + "skewX(", null, ")") - 2,
	        x: d3_interpolateNumber(wa, wb)
	      });
	    } else if (wb) {
	      s.push(d3_interpolateTransformPop(s) + "skewX(" + wb + ")");
	    }
	  }
	  function d3_interpolateScale(ka, kb, s, q) {
	    if (ka[0] !== kb[0] || ka[1] !== kb[1]) {
	      var i = s.push(d3_interpolateTransformPop(s) + "scale(", null, ",", null, ")");
	      q.push({
	        i: i - 4,
	        x: d3_interpolateNumber(ka[0], kb[0])
	      }, {
	        i: i - 2,
	        x: d3_interpolateNumber(ka[1], kb[1])
	      });
	    } else if (kb[0] !== 1 || kb[1] !== 1) {
	      s.push(d3_interpolateTransformPop(s) + "scale(" + kb + ")");
	    }
	  }
	  function d3_interpolateTransform(a, b) {
	    var s = [], q = [];
	    a = d3.transform(a), b = d3.transform(b);
	    d3_interpolateTranslate(a.translate, b.translate, s, q);
	    d3_interpolateRotate(a.rotate, b.rotate, s, q);
	    d3_interpolateSkew(a.skew, b.skew, s, q);
	    d3_interpolateScale(a.scale, b.scale, s, q);
	    a = b = null;
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  }
	  function d3_uninterpolateNumber(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return (x - a) / b;
	    };
	  }
	  function d3_uninterpolateClamp(a, b) {
	    b = (b -= a = +a) || 1 / b;
	    return function(x) {
	      return Math.max(0, Math.min(1, (x - a) / b));
	    };
	  }
	  d3.layout = {};
	  d3.layout.bundle = function() {
	    return function(links) {
	      var paths = [], i = -1, n = links.length;
	      while (++i < n) paths.push(d3_layout_bundlePath(links[i]));
	      return paths;
	    };
	  };
	  function d3_layout_bundlePath(link) {
	    var start = link.source, end = link.target, lca = d3_layout_bundleLeastCommonAncestor(start, end), points = [ start ];
	    while (start !== lca) {
	      start = start.parent;
	      points.push(start);
	    }
	    var k = points.length;
	    while (end !== lca) {
	      points.splice(k, 0, end);
	      end = end.parent;
	    }
	    return points;
	  }
	  function d3_layout_bundleAncestors(node) {
	    var ancestors = [], parent = node.parent;
	    while (parent != null) {
	      ancestors.push(node);
	      node = parent;
	      parent = parent.parent;
	    }
	    ancestors.push(node);
	    return ancestors;
	  }
	  function d3_layout_bundleLeastCommonAncestor(a, b) {
	    if (a === b) return a;
	    var aNodes = d3_layout_bundleAncestors(a), bNodes = d3_layout_bundleAncestors(b), aNode = aNodes.pop(), bNode = bNodes.pop(), sharedNode = null;
	    while (aNode === bNode) {
	      sharedNode = aNode;
	      aNode = aNodes.pop();
	      bNode = bNodes.pop();
	    }
	    return sharedNode;
	  }
	  d3.layout.chord = function() {
	    var chord = {}, chords, groups, matrix, n, padding = 0, sortGroups, sortSubgroups, sortChords;
	    function relayout() {
	      var subgroups = {}, groupSums = [], groupIndex = d3.range(n), subgroupIndex = [], k, x, x0, i, j;
	      chords = [];
	      groups = [];
	      k = 0, i = -1;
	      while (++i < n) {
	        x = 0, j = -1;
	        while (++j < n) {
	          x += matrix[i][j];
	        }
	        groupSums.push(x);
	        subgroupIndex.push(d3.range(n));
	        k += x;
	      }
	      if (sortGroups) {
	        groupIndex.sort(function(a, b) {
	          return sortGroups(groupSums[a], groupSums[b]);
	        });
	      }
	      if (sortSubgroups) {
	        subgroupIndex.forEach(function(d, i) {
	          d.sort(function(a, b) {
	            return sortSubgroups(matrix[i][a], matrix[i][b]);
	          });
	        });
	      }
	      k = (τ - padding * n) / k;
	      x = 0, i = -1;
	      while (++i < n) {
	        x0 = x, j = -1;
	        while (++j < n) {
	          var di = groupIndex[i], dj = subgroupIndex[di][j], v = matrix[di][dj], a0 = x, a1 = x += v * k;
	          subgroups[di + "-" + dj] = {
	            index: di,
	            subindex: dj,
	            startAngle: a0,
	            endAngle: a1,
	            value: v
	          };
	        }
	        groups[di] = {
	          index: di,
	          startAngle: x0,
	          endAngle: x,
	          value: groupSums[di]
	        };
	        x += padding;
	      }
	      i = -1;
	      while (++i < n) {
	        j = i - 1;
	        while (++j < n) {
	          var source = subgroups[i + "-" + j], target = subgroups[j + "-" + i];
	          if (source.value || target.value) {
	            chords.push(source.value < target.value ? {
	              source: target,
	              target: source
	            } : {
	              source: source,
	              target: target
	            });
	          }
	        }
	      }
	      if (sortChords) resort();
	    }
	    function resort() {
	      chords.sort(function(a, b) {
	        return sortChords((a.source.value + a.target.value) / 2, (b.source.value + b.target.value) / 2);
	      });
	    }
	    chord.matrix = function(x) {
	      if (!arguments.length) return matrix;
	      n = (matrix = x) && matrix.length;
	      chords = groups = null;
	      return chord;
	    };
	    chord.padding = function(x) {
	      if (!arguments.length) return padding;
	      padding = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortGroups = function(x) {
	      if (!arguments.length) return sortGroups;
	      sortGroups = x;
	      chords = groups = null;
	      return chord;
	    };
	    chord.sortSubgroups = function(x) {
	      if (!arguments.length) return sortSubgroups;
	      sortSubgroups = x;
	      chords = null;
	      return chord;
	    };
	    chord.sortChords = function(x) {
	      if (!arguments.length) return sortChords;
	      sortChords = x;
	      if (chords) resort();
	      return chord;
	    };
	    chord.chords = function() {
	      if (!chords) relayout();
	      return chords;
	    };
	    chord.groups = function() {
	      if (!groups) relayout();
	      return groups;
	    };
	    return chord;
	  };
	  d3.layout.force = function() {
	    var force = {}, event = d3.dispatch("start", "tick", "end"), timer, size = [ 1, 1 ], drag, alpha, friction = .9, linkDistance = d3_layout_forceLinkDistance, linkStrength = d3_layout_forceLinkStrength, charge = -30, chargeDistance2 = d3_layout_forceChargeDistance2, gravity = .1, theta2 = .64, nodes = [], links = [], distances, strengths, charges;
	    function repulse(node) {
	      return function(quad, x1, _, x2) {
	        if (quad.point !== node) {
	          var dx = quad.cx - node.x, dy = quad.cy - node.y, dw = x2 - x1, dn = dx * dx + dy * dy;
	          if (dw * dw / theta2 < dn) {
	            if (dn < chargeDistance2) {
	              var k = quad.charge / dn;
	              node.px -= dx * k;
	              node.py -= dy * k;
	            }
	            return true;
	          }
	          if (quad.point && dn && dn < chargeDistance2) {
	            var k = quad.pointCharge / dn;
	            node.px -= dx * k;
	            node.py -= dy * k;
	          }
	        }
	        return !quad.charge;
	      };
	    }
	    force.tick = function() {
	      if ((alpha *= .99) < .005) {
	        timer = null;
	        event.end({
	          type: "end",
	          alpha: alpha = 0
	        });
	        return true;
	      }
	      var n = nodes.length, m = links.length, q, i, o, s, t, l, k, x, y;
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        s = o.source;
	        t = o.target;
	        x = t.x - s.x;
	        y = t.y - s.y;
	        if (l = x * x + y * y) {
	          l = alpha * strengths[i] * ((l = Math.sqrt(l)) - distances[i]) / l;
	          x *= l;
	          y *= l;
	          t.x -= x * (k = s.weight + t.weight ? s.weight / (s.weight + t.weight) : .5);
	          t.y -= y * k;
	          s.x += x * (k = 1 - k);
	          s.y += y * k;
	        }
	      }
	      if (k = alpha * gravity) {
	        x = size[0] / 2;
	        y = size[1] / 2;
	        i = -1;
	        if (k) while (++i < n) {
	          o = nodes[i];
	          o.x += (x - o.x) * k;
	          o.y += (y - o.y) * k;
	        }
	      }
	      if (charge) {
	        d3_layout_forceAccumulate(q = d3.geom.quadtree(nodes), alpha, charges);
	        i = -1;
	        while (++i < n) {
	          if (!(o = nodes[i]).fixed) {
	            q.visit(repulse(o));
	          }
	        }
	      }
	      i = -1;
	      while (++i < n) {
	        o = nodes[i];
	        if (o.fixed) {
	          o.x = o.px;
	          o.y = o.py;
	        } else {
	          o.x -= (o.px - (o.px = o.x)) * friction;
	          o.y -= (o.py - (o.py = o.y)) * friction;
	        }
	      }
	      event.tick({
	        type: "tick",
	        alpha: alpha
	      });
	    };
	    force.nodes = function(x) {
	      if (!arguments.length) return nodes;
	      nodes = x;
	      return force;
	    };
	    force.links = function(x) {
	      if (!arguments.length) return links;
	      links = x;
	      return force;
	    };
	    force.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return force;
	    };
	    force.linkDistance = function(x) {
	      if (!arguments.length) return linkDistance;
	      linkDistance = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.distance = force.linkDistance;
	    force.linkStrength = function(x) {
	      if (!arguments.length) return linkStrength;
	      linkStrength = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.friction = function(x) {
	      if (!arguments.length) return friction;
	      friction = +x;
	      return force;
	    };
	    force.charge = function(x) {
	      if (!arguments.length) return charge;
	      charge = typeof x === "function" ? x : +x;
	      return force;
	    };
	    force.chargeDistance = function(x) {
	      if (!arguments.length) return Math.sqrt(chargeDistance2);
	      chargeDistance2 = x * x;
	      return force;
	    };
	    force.gravity = function(x) {
	      if (!arguments.length) return gravity;
	      gravity = +x;
	      return force;
	    };
	    force.theta = function(x) {
	      if (!arguments.length) return Math.sqrt(theta2);
	      theta2 = x * x;
	      return force;
	    };
	    force.alpha = function(x) {
	      if (!arguments.length) return alpha;
	      x = +x;
	      if (alpha) {
	        if (x > 0) {
	          alpha = x;
	        } else {
	          timer.c = null, timer.t = NaN, timer = null;
	          event.end({
	            type: "end",
	            alpha: alpha = 0
	          });
	        }
	      } else if (x > 0) {
	        event.start({
	          type: "start",
	          alpha: alpha = x
	        });
	        timer = d3_timer(force.tick);
	      }
	      return force;
	    };
	    force.start = function() {
	      var i, n = nodes.length, m = links.length, w = size[0], h = size[1], neighbors, o;
	      for (i = 0; i < n; ++i) {
	        (o = nodes[i]).index = i;
	        o.weight = 0;
	      }
	      for (i = 0; i < m; ++i) {
	        o = links[i];
	        if (typeof o.source == "number") o.source = nodes[o.source];
	        if (typeof o.target == "number") o.target = nodes[o.target];
	        ++o.source.weight;
	        ++o.target.weight;
	      }
	      for (i = 0; i < n; ++i) {
	        o = nodes[i];
	        if (isNaN(o.x)) o.x = position("x", w);
	        if (isNaN(o.y)) o.y = position("y", h);
	        if (isNaN(o.px)) o.px = o.x;
	        if (isNaN(o.py)) o.py = o.y;
	      }
	      distances = [];
	      if (typeof linkDistance === "function") for (i = 0; i < m; ++i) distances[i] = +linkDistance.call(this, links[i], i); else for (i = 0; i < m; ++i) distances[i] = linkDistance;
	      strengths = [];
	      if (typeof linkStrength === "function") for (i = 0; i < m; ++i) strengths[i] = +linkStrength.call(this, links[i], i); else for (i = 0; i < m; ++i) strengths[i] = linkStrength;
	      charges = [];
	      if (typeof charge === "function") for (i = 0; i < n; ++i) charges[i] = +charge.call(this, nodes[i], i); else for (i = 0; i < n; ++i) charges[i] = charge;
	      function position(dimension, size) {
	        if (!neighbors) {
	          neighbors = new Array(n);
	          for (j = 0; j < n; ++j) {
	            neighbors[j] = [];
	          }
	          for (j = 0; j < m; ++j) {
	            var o = links[j];
	            neighbors[o.source.index].push(o.target);
	            neighbors[o.target.index].push(o.source);
	          }
	        }
	        var candidates = neighbors[i], j = -1, l = candidates.length, x;
	        while (++j < l) if (!isNaN(x = candidates[j][dimension])) return x;
	        return Math.random() * size;
	      }
	      return force.resume();
	    };
	    force.resume = function() {
	      return force.alpha(.1);
	    };
	    force.stop = function() {
	      return force.alpha(0);
	    };
	    force.drag = function() {
	      if (!drag) drag = d3.behavior.drag().origin(d3_identity).on("dragstart.force", d3_layout_forceDragstart).on("drag.force", dragmove).on("dragend.force", d3_layout_forceDragend);
	      if (!arguments.length) return drag;
	      this.on("mouseover.force", d3_layout_forceMouseover).on("mouseout.force", d3_layout_forceMouseout).call(drag);
	    };
	    function dragmove(d) {
	      d.px = d3.event.x, d.py = d3.event.y;
	      force.resume();
	    }
	    return d3.rebind(force, event, "on");
	  };
	  function d3_layout_forceDragstart(d) {
	    d.fixed |= 2;
	  }
	  function d3_layout_forceDragend(d) {
	    d.fixed &= ~6;
	  }
	  function d3_layout_forceMouseover(d) {
	    d.fixed |= 4;
	    d.px = d.x, d.py = d.y;
	  }
	  function d3_layout_forceMouseout(d) {
	    d.fixed &= ~4;
	  }
	  function d3_layout_forceAccumulate(quad, alpha, charges) {
	    var cx = 0, cy = 0;
	    quad.charge = 0;
	    if (!quad.leaf) {
	      var nodes = quad.nodes, n = nodes.length, i = -1, c;
	      while (++i < n) {
	        c = nodes[i];
	        if (c == null) continue;
	        d3_layout_forceAccumulate(c, alpha, charges);
	        quad.charge += c.charge;
	        cx += c.charge * c.cx;
	        cy += c.charge * c.cy;
	      }
	    }
	    if (quad.point) {
	      if (!quad.leaf) {
	        quad.point.x += Math.random() - .5;
	        quad.point.y += Math.random() - .5;
	      }
	      var k = alpha * charges[quad.point.index];
	      quad.charge += quad.pointCharge = k;
	      cx += k * quad.point.x;
	      cy += k * quad.point.y;
	    }
	    quad.cx = cx / quad.charge;
	    quad.cy = cy / quad.charge;
	  }
	  var d3_layout_forceLinkDistance = 20, d3_layout_forceLinkStrength = 1, d3_layout_forceChargeDistance2 = Infinity;
	  d3.layout.hierarchy = function() {
	    var sort = d3_layout_hierarchySort, children = d3_layout_hierarchyChildren, value = d3_layout_hierarchyValue;
	    function hierarchy(root) {
	      var stack = [ root ], nodes = [], node;
	      root.depth = 0;
	      while ((node = stack.pop()) != null) {
	        nodes.push(node);
	        if ((childs = children.call(hierarchy, node, node.depth)) && (n = childs.length)) {
	          var n, childs, child;
	          while (--n >= 0) {
	            stack.push(child = childs[n]);
	            child.parent = node;
	            child.depth = node.depth + 1;
	          }
	          if (value) node.value = 0;
	          node.children = childs;
	        } else {
	          if (value) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          delete node.children;
	        }
	      }
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var childs, parent;
	        if (sort && (childs = node.children)) childs.sort(sort);
	        if (value && (parent = node.parent)) parent.value += node.value;
	      });
	      return nodes;
	    }
	    hierarchy.sort = function(x) {
	      if (!arguments.length) return sort;
	      sort = x;
	      return hierarchy;
	    };
	    hierarchy.children = function(x) {
	      if (!arguments.length) return children;
	      children = x;
	      return hierarchy;
	    };
	    hierarchy.value = function(x) {
	      if (!arguments.length) return value;
	      value = x;
	      return hierarchy;
	    };
	    hierarchy.revalue = function(root) {
	      if (value) {
	        d3_layout_hierarchyVisitBefore(root, function(node) {
	          if (node.children) node.value = 0;
	        });
	        d3_layout_hierarchyVisitAfter(root, function(node) {
	          var parent;
	          if (!node.children) node.value = +value.call(hierarchy, node, node.depth) || 0;
	          if (parent = node.parent) parent.value += node.value;
	        });
	      }
	      return root;
	    };
	    return hierarchy;
	  };
	  function d3_layout_hierarchyRebind(object, hierarchy) {
	    d3.rebind(object, hierarchy, "sort", "children", "value");
	    object.nodes = object;
	    object.links = d3_layout_hierarchyLinks;
	    return object;
	  }
	  function d3_layout_hierarchyVisitBefore(node, callback) {
	    var nodes = [ node ];
	    while ((node = nodes.pop()) != null) {
	      callback(node);
	      if ((children = node.children) && (n = children.length)) {
	        var n, children;
	        while (--n >= 0) nodes.push(children[n]);
	      }
	    }
	  }
	  function d3_layout_hierarchyVisitAfter(node, callback) {
	    var nodes = [ node ], nodes2 = [];
	    while ((node = nodes.pop()) != null) {
	      nodes2.push(node);
	      if ((children = node.children) && (n = children.length)) {
	        var i = -1, n, children;
	        while (++i < n) nodes.push(children[i]);
	      }
	    }
	    while ((node = nodes2.pop()) != null) {
	      callback(node);
	    }
	  }
	  function d3_layout_hierarchyChildren(d) {
	    return d.children;
	  }
	  function d3_layout_hierarchyValue(d) {
	    return d.value;
	  }
	  function d3_layout_hierarchySort(a, b) {
	    return b.value - a.value;
	  }
	  function d3_layout_hierarchyLinks(nodes) {
	    return d3.merge(nodes.map(function(parent) {
	      return (parent.children || []).map(function(child) {
	        return {
	          source: parent,
	          target: child
	        };
	      });
	    }));
	  }
	  d3.layout.partition = function() {
	    var hierarchy = d3.layout.hierarchy(), size = [ 1, 1 ];
	    function position(node, x, dx, dy) {
	      var children = node.children;
	      node.x = x;
	      node.y = node.depth * dy;
	      node.dx = dx;
	      node.dy = dy;
	      if (children && (n = children.length)) {
	        var i = -1, n, c, d;
	        dx = node.value ? dx / node.value : 0;
	        while (++i < n) {
	          position(c = children[i], x, d = c.value * dx, dy);
	          x += d;
	        }
	      }
	    }
	    function depth(node) {
	      var children = node.children, d = 0;
	      if (children && (n = children.length)) {
	        var i = -1, n;
	        while (++i < n) d = Math.max(d, depth(children[i]));
	      }
	      return 1 + d;
	    }
	    function partition(d, i) {
	      var nodes = hierarchy.call(this, d, i);
	      position(nodes[0], 0, size[0], size[1] / depth(nodes[0]));
	      return nodes;
	    }
	    partition.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return partition;
	    };
	    return d3_layout_hierarchyRebind(partition, hierarchy);
	  };
	  d3.layout.pie = function() {
	    var value = Number, sort = d3_layout_pieSortByValue, startAngle = 0, endAngle = τ, padAngle = 0;
	    function pie(data) {
	      var n = data.length, values = data.map(function(d, i) {
	        return +value.call(pie, d, i);
	      }), a = +(typeof startAngle === "function" ? startAngle.apply(this, arguments) : startAngle), da = (typeof endAngle === "function" ? endAngle.apply(this, arguments) : endAngle) - a, p = Math.min(Math.abs(da) / n, +(typeof padAngle === "function" ? padAngle.apply(this, arguments) : padAngle)), pa = p * (da < 0 ? -1 : 1), sum = d3.sum(values), k = sum ? (da - n * pa) / sum : 0, index = d3.range(n), arcs = [], v;
	      if (sort != null) index.sort(sort === d3_layout_pieSortByValue ? function(i, j) {
	        return values[j] - values[i];
	      } : function(i, j) {
	        return sort(data[i], data[j]);
	      });
	      index.forEach(function(i) {
	        arcs[i] = {
	          data: data[i],
	          value: v = values[i],
	          startAngle: a,
	          endAngle: a += v * k + pa,
	          padAngle: p
	        };
	      });
	      return arcs;
	    }
	    pie.value = function(_) {
	      if (!arguments.length) return value;
	      value = _;
	      return pie;
	    };
	    pie.sort = function(_) {
	      if (!arguments.length) return sort;
	      sort = _;
	      return pie;
	    };
	    pie.startAngle = function(_) {
	      if (!arguments.length) return startAngle;
	      startAngle = _;
	      return pie;
	    };
	    pie.endAngle = function(_) {
	      if (!arguments.length) return endAngle;
	      endAngle = _;
	      return pie;
	    };
	    pie.padAngle = function(_) {
	      if (!arguments.length) return padAngle;
	      padAngle = _;
	      return pie;
	    };
	    return pie;
	  };
	  var d3_layout_pieSortByValue = {};
	  d3.layout.stack = function() {
	    var values = d3_identity, order = d3_layout_stackOrderDefault, offset = d3_layout_stackOffsetZero, out = d3_layout_stackOut, x = d3_layout_stackX, y = d3_layout_stackY;
	    function stack(data, index) {
	      if (!(n = data.length)) return data;
	      var series = data.map(function(d, i) {
	        return values.call(stack, d, i);
	      });
	      var points = series.map(function(d) {
	        return d.map(function(v, i) {
	          return [ x.call(stack, v, i), y.call(stack, v, i) ];
	        });
	      });
	      var orders = order.call(stack, points, index);
	      series = d3.permute(series, orders);
	      points = d3.permute(points, orders);
	      var offsets = offset.call(stack, points, index);
	      var m = series[0].length, n, i, j, o;
	      for (j = 0; j < m; ++j) {
	        out.call(stack, series[0][j], o = offsets[j], points[0][j][1]);
	        for (i = 1; i < n; ++i) {
	          out.call(stack, series[i][j], o += points[i - 1][j][1], points[i][j][1]);
	        }
	      }
	      return data;
	    }
	    stack.values = function(x) {
	      if (!arguments.length) return values;
	      values = x;
	      return stack;
	    };
	    stack.order = function(x) {
	      if (!arguments.length) return order;
	      order = typeof x === "function" ? x : d3_layout_stackOrders.get(x) || d3_layout_stackOrderDefault;
	      return stack;
	    };
	    stack.offset = function(x) {
	      if (!arguments.length) return offset;
	      offset = typeof x === "function" ? x : d3_layout_stackOffsets.get(x) || d3_layout_stackOffsetZero;
	      return stack;
	    };
	    stack.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      return stack;
	    };
	    stack.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      return stack;
	    };
	    stack.out = function(z) {
	      if (!arguments.length) return out;
	      out = z;
	      return stack;
	    };
	    return stack;
	  };
	  function d3_layout_stackX(d) {
	    return d.x;
	  }
	  function d3_layout_stackY(d) {
	    return d.y;
	  }
	  function d3_layout_stackOut(d, y0, y) {
	    d.y0 = y0;
	    d.y = y;
	  }
	  var d3_layout_stackOrders = d3.map({
	    "inside-out": function(data) {
	      var n = data.length, i, j, max = data.map(d3_layout_stackMaxIndex), sums = data.map(d3_layout_stackReduceSum), index = d3.range(n).sort(function(a, b) {
	        return max[a] - max[b];
	      }), top = 0, bottom = 0, tops = [], bottoms = [];
	      for (i = 0; i < n; ++i) {
	        j = index[i];
	        if (top < bottom) {
	          top += sums[j];
	          tops.push(j);
	        } else {
	          bottom += sums[j];
	          bottoms.push(j);
	        }
	      }
	      return bottoms.reverse().concat(tops);
	    },
	    reverse: function(data) {
	      return d3.range(data.length).reverse();
	    },
	    "default": d3_layout_stackOrderDefault
	  });
	  var d3_layout_stackOffsets = d3.map({
	    silhouette: function(data) {
	      var n = data.length, m = data[0].length, sums = [], max = 0, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o > max) max = o;
	        sums.push(o);
	      }
	      for (j = 0; j < m; ++j) {
	        y0[j] = (max - sums[j]) / 2;
	      }
	      return y0;
	    },
	    wiggle: function(data) {
	      var n = data.length, x = data[0], m = x.length, i, j, k, s1, s2, s3, dx, o, o0, y0 = [];
	      y0[0] = o = o0 = 0;
	      for (j = 1; j < m; ++j) {
	        for (i = 0, s1 = 0; i < n; ++i) s1 += data[i][j][1];
	        for (i = 0, s2 = 0, dx = x[j][0] - x[j - 1][0]; i < n; ++i) {
	          for (k = 0, s3 = (data[i][j][1] - data[i][j - 1][1]) / (2 * dx); k < i; ++k) {
	            s3 += (data[k][j][1] - data[k][j - 1][1]) / dx;
	          }
	          s2 += s3 * data[i][j][1];
	        }
	        y0[j] = o -= s1 ? s2 / s1 * dx : 0;
	        if (o < o0) o0 = o;
	      }
	      for (j = 0; j < m; ++j) y0[j] -= o0;
	      return y0;
	    },
	    expand: function(data) {
	      var n = data.length, m = data[0].length, k = 1 / n, i, j, o, y0 = [];
	      for (j = 0; j < m; ++j) {
	        for (i = 0, o = 0; i < n; i++) o += data[i][j][1];
	        if (o) for (i = 0; i < n; i++) data[i][j][1] /= o; else for (i = 0; i < n; i++) data[i][j][1] = k;
	      }
	      for (j = 0; j < m; ++j) y0[j] = 0;
	      return y0;
	    },
	    zero: d3_layout_stackOffsetZero
	  });
	  function d3_layout_stackOrderDefault(data) {
	    return d3.range(data.length);
	  }
	  function d3_layout_stackOffsetZero(data) {
	    var j = -1, m = data[0].length, y0 = [];
	    while (++j < m) y0[j] = 0;
	    return y0;
	  }
	  function d3_layout_stackMaxIndex(array) {
	    var i = 1, j = 0, v = array[0][1], k, n = array.length;
	    for (;i < n; ++i) {
	      if ((k = array[i][1]) > v) {
	        j = i;
	        v = k;
	      }
	    }
	    return j;
	  }
	  function d3_layout_stackReduceSum(d) {
	    return d.reduce(d3_layout_stackSum, 0);
	  }
	  function d3_layout_stackSum(p, d) {
	    return p + d[1];
	  }
	  d3.layout.histogram = function() {
	    var frequency = true, valuer = Number, ranger = d3_layout_histogramRange, binner = d3_layout_histogramBinSturges;
	    function histogram(data, i) {
	      var bins = [], values = data.map(valuer, this), range = ranger.call(this, values, i), thresholds = binner.call(this, range, values, i), bin, i = -1, n = values.length, m = thresholds.length - 1, k = frequency ? 1 : 1 / n, x;
	      while (++i < m) {
	        bin = bins[i] = [];
	        bin.dx = thresholds[i + 1] - (bin.x = thresholds[i]);
	        bin.y = 0;
	      }
	      if (m > 0) {
	        i = -1;
	        while (++i < n) {
	          x = values[i];
	          if (x >= range[0] && x <= range[1]) {
	            bin = bins[d3.bisect(thresholds, x, 1, m) - 1];
	            bin.y += k;
	            bin.push(data[i]);
	          }
	        }
	      }
	      return bins;
	    }
	    histogram.value = function(x) {
	      if (!arguments.length) return valuer;
	      valuer = x;
	      return histogram;
	    };
	    histogram.range = function(x) {
	      if (!arguments.length) return ranger;
	      ranger = d3_functor(x);
	      return histogram;
	    };
	    histogram.bins = function(x) {
	      if (!arguments.length) return binner;
	      binner = typeof x === "number" ? function(range) {
	        return d3_layout_histogramBinFixed(range, x);
	      } : d3_functor(x);
	      return histogram;
	    };
	    histogram.frequency = function(x) {
	      if (!arguments.length) return frequency;
	      frequency = !!x;
	      return histogram;
	    };
	    return histogram;
	  };
	  function d3_layout_histogramBinSturges(range, values) {
	    return d3_layout_histogramBinFixed(range, Math.ceil(Math.log(values.length) / Math.LN2 + 1));
	  }
	  function d3_layout_histogramBinFixed(range, n) {
	    var x = -1, b = +range[0], m = (range[1] - b) / n, f = [];
	    while (++x <= n) f[x] = m * x + b;
	    return f;
	  }
	  function d3_layout_histogramRange(values) {
	    return [ d3.min(values), d3.max(values) ];
	  }
	  d3.layout.pack = function() {
	    var hierarchy = d3.layout.hierarchy().sort(d3_layout_packSort), padding = 0, size = [ 1, 1 ], radius;
	    function pack(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], w = size[0], h = size[1], r = radius == null ? Math.sqrt : typeof radius === "function" ? radius : function() {
	        return radius;
	      };
	      root.x = root.y = 0;
	      d3_layout_hierarchyVisitAfter(root, function(d) {
	        d.r = +r(d.value);
	      });
	      d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	      if (padding) {
	        var dr = padding * (radius ? 1 : Math.max(2 * root.r / w, 2 * root.r / h)) / 2;
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r += dr;
	        });
	        d3_layout_hierarchyVisitAfter(root, d3_layout_packSiblings);
	        d3_layout_hierarchyVisitAfter(root, function(d) {
	          d.r -= dr;
	        });
	      }
	      d3_layout_packTransform(root, w / 2, h / 2, radius ? 1 : 1 / Math.max(2 * root.r / w, 2 * root.r / h));
	      return nodes;
	    }
	    pack.size = function(_) {
	      if (!arguments.length) return size;
	      size = _;
	      return pack;
	    };
	    pack.radius = function(_) {
	      if (!arguments.length) return radius;
	      radius = _ == null || typeof _ === "function" ? _ : +_;
	      return pack;
	    };
	    pack.padding = function(_) {
	      if (!arguments.length) return padding;
	      padding = +_;
	      return pack;
	    };
	    return d3_layout_hierarchyRebind(pack, hierarchy);
	  };
	  function d3_layout_packSort(a, b) {
	    return a.value - b.value;
	  }
	  function d3_layout_packInsert(a, b) {
	    var c = a._pack_next;
	    a._pack_next = b;
	    b._pack_prev = a;
	    b._pack_next = c;
	    c._pack_prev = b;
	  }
	  function d3_layout_packSplice(a, b) {
	    a._pack_next = b;
	    b._pack_prev = a;
	  }
	  function d3_layout_packIntersects(a, b) {
	    var dx = b.x - a.x, dy = b.y - a.y, dr = a.r + b.r;
	    return .999 * dr * dr > dx * dx + dy * dy;
	  }
	  function d3_layout_packSiblings(node) {
	    if (!(nodes = node.children) || !(n = nodes.length)) return;
	    var nodes, xMin = Infinity, xMax = -Infinity, yMin = Infinity, yMax = -Infinity, a, b, c, i, j, k, n;
	    function bound(node) {
	      xMin = Math.min(node.x - node.r, xMin);
	      xMax = Math.max(node.x + node.r, xMax);
	      yMin = Math.min(node.y - node.r, yMin);
	      yMax = Math.max(node.y + node.r, yMax);
	    }
	    nodes.forEach(d3_layout_packLink);
	    a = nodes[0];
	    a.x = -a.r;
	    a.y = 0;
	    bound(a);
	    if (n > 1) {
	      b = nodes[1];
	      b.x = b.r;
	      b.y = 0;
	      bound(b);
	      if (n > 2) {
	        c = nodes[2];
	        d3_layout_packPlace(a, b, c);
	        bound(c);
	        d3_layout_packInsert(a, c);
	        a._pack_prev = c;
	        d3_layout_packInsert(c, b);
	        b = a._pack_next;
	        for (i = 3; i < n; i++) {
	          d3_layout_packPlace(a, b, c = nodes[i]);
	          var isect = 0, s1 = 1, s2 = 1;
	          for (j = b._pack_next; j !== b; j = j._pack_next, s1++) {
	            if (d3_layout_packIntersects(j, c)) {
	              isect = 1;
	              break;
	            }
	          }
	          if (isect == 1) {
	            for (k = a._pack_prev; k !== j._pack_prev; k = k._pack_prev, s2++) {
	              if (d3_layout_packIntersects(k, c)) {
	                break;
	              }
	            }
	          }
	          if (isect) {
	            if (s1 < s2 || s1 == s2 && b.r < a.r) d3_layout_packSplice(a, b = j); else d3_layout_packSplice(a = k, b);
	            i--;
	          } else {
	            d3_layout_packInsert(a, c);
	            b = c;
	            bound(c);
	          }
	        }
	      }
	    }
	    var cx = (xMin + xMax) / 2, cy = (yMin + yMax) / 2, cr = 0;
	    for (i = 0; i < n; i++) {
	      c = nodes[i];
	      c.x -= cx;
	      c.y -= cy;
	      cr = Math.max(cr, c.r + Math.sqrt(c.x * c.x + c.y * c.y));
	    }
	    node.r = cr;
	    nodes.forEach(d3_layout_packUnlink);
	  }
	  function d3_layout_packLink(node) {
	    node._pack_next = node._pack_prev = node;
	  }
	  function d3_layout_packUnlink(node) {
	    delete node._pack_next;
	    delete node._pack_prev;
	  }
	  function d3_layout_packTransform(node, x, y, k) {
	    var children = node.children;
	    node.x = x += k * node.x;
	    node.y = y += k * node.y;
	    node.r *= k;
	    if (children) {
	      var i = -1, n = children.length;
	      while (++i < n) d3_layout_packTransform(children[i], x, y, k);
	    }
	  }
	  function d3_layout_packPlace(a, b, c) {
	    var db = a.r + c.r, dx = b.x - a.x, dy = b.y - a.y;
	    if (db && (dx || dy)) {
	      var da = b.r + c.r, dc = dx * dx + dy * dy;
	      da *= da;
	      db *= db;
	      var x = .5 + (db - da) / (2 * dc), y = Math.sqrt(Math.max(0, 2 * da * (db + dc) - (db -= dc) * db - da * da)) / (2 * dc);
	      c.x = a.x + x * dx + y * dy;
	      c.y = a.y + x * dy - y * dx;
	    } else {
	      c.x = a.x + db;
	      c.y = a.y;
	    }
	  }
	  d3.layout.tree = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = null;
	    function tree(d, i) {
	      var nodes = hierarchy.call(this, d, i), root0 = nodes[0], root1 = wrapTree(root0);
	      d3_layout_hierarchyVisitAfter(root1, firstWalk), root1.parent.m = -root1.z;
	      d3_layout_hierarchyVisitBefore(root1, secondWalk);
	      if (nodeSize) d3_layout_hierarchyVisitBefore(root0, sizeNode); else {
	        var left = root0, right = root0, bottom = root0;
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          if (node.x < left.x) left = node;
	          if (node.x > right.x) right = node;
	          if (node.depth > bottom.depth) bottom = node;
	        });
	        var tx = separation(left, right) / 2 - left.x, kx = size[0] / (right.x + separation(right, left) / 2 + tx), ky = size[1] / (bottom.depth || 1);
	        d3_layout_hierarchyVisitBefore(root0, function(node) {
	          node.x = (node.x + tx) * kx;
	          node.y = node.depth * ky;
	        });
	      }
	      return nodes;
	    }
	    function wrapTree(root0) {
	      var root1 = {
	        A: null,
	        children: [ root0 ]
	      }, queue = [ root1 ], node1;
	      while ((node1 = queue.pop()) != null) {
	        for (var children = node1.children, child, i = 0, n = children.length; i < n; ++i) {
	          queue.push((children[i] = child = {
	            _: children[i],
	            parent: node1,
	            children: (child = children[i].children) && child.slice() || [],
	            A: null,
	            a: null,
	            z: 0,
	            m: 0,
	            c: 0,
	            s: 0,
	            t: null,
	            i: i
	          }).a = child);
	        }
	      }
	      return root1.children[0];
	    }
	    function firstWalk(v) {
	      var children = v.children, siblings = v.parent.children, w = v.i ? siblings[v.i - 1] : null;
	      if (children.length) {
	        d3_layout_treeShift(v);
	        var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	        if (w) {
	          v.z = w.z + separation(v._, w._);
	          v.m = v.z - midpoint;
	        } else {
	          v.z = midpoint;
	        }
	      } else if (w) {
	        v.z = w.z + separation(v._, w._);
	      }
	      v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	    }
	    function secondWalk(v) {
	      v._.x = v.z + v.parent.m;
	      v.m += v.parent.m;
	    }
	    function apportion(v, w, ancestor) {
	      if (w) {
	        var vip = v, vop = v, vim = w, vom = vip.parent.children[0], sip = vip.m, sop = vop.m, sim = vim.m, som = vom.m, shift;
	        while (vim = d3_layout_treeRight(vim), vip = d3_layout_treeLeft(vip), vim && vip) {
	          vom = d3_layout_treeLeft(vom);
	          vop = d3_layout_treeRight(vop);
	          vop.a = v;
	          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	          if (shift > 0) {
	            d3_layout_treeMove(d3_layout_treeAncestor(vim, v, ancestor), v, shift);
	            sip += shift;
	            sop += shift;
	          }
	          sim += vim.m;
	          sip += vip.m;
	          som += vom.m;
	          sop += vop.m;
	        }
	        if (vim && !d3_layout_treeRight(vop)) {
	          vop.t = vim;
	          vop.m += sim - sop;
	        }
	        if (vip && !d3_layout_treeLeft(vom)) {
	          vom.t = vip;
	          vom.m += sip - som;
	          ancestor = v;
	        }
	      }
	      return ancestor;
	    }
	    function sizeNode(node) {
	      node.x *= size[0];
	      node.y = node.depth * size[1];
	    }
	    tree.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return tree;
	    };
	    tree.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null ? sizeNode : null;
	      return tree;
	    };
	    tree.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) == null ? null : sizeNode;
	      return tree;
	    };
	    return d3_layout_hierarchyRebind(tree, hierarchy);
	  };
	  function d3_layout_treeSeparation(a, b) {
	    return a.parent == b.parent ? 1 : 2;
	  }
	  function d3_layout_treeLeft(v) {
	    var children = v.children;
	    return children.length ? children[0] : v.t;
	  }
	  function d3_layout_treeRight(v) {
	    var children = v.children, n;
	    return (n = children.length) ? children[n - 1] : v.t;
	  }
	  function d3_layout_treeMove(wm, wp, shift) {
	    var change = shift / (wp.i - wm.i);
	    wp.c -= change;
	    wp.s += shift;
	    wm.c += change;
	    wp.z += shift;
	    wp.m += shift;
	  }
	  function d3_layout_treeShift(v) {
	    var shift = 0, change = 0, children = v.children, i = children.length, w;
	    while (--i >= 0) {
	      w = children[i];
	      w.z += shift;
	      w.m += shift;
	      shift += w.s + (change += w.c);
	    }
	  }
	  function d3_layout_treeAncestor(vim, v, ancestor) {
	    return vim.a.parent === v.parent ? vim.a : ancestor;
	  }
	  d3.layout.cluster = function() {
	    var hierarchy = d3.layout.hierarchy().sort(null).value(null), separation = d3_layout_treeSeparation, size = [ 1, 1 ], nodeSize = false;
	    function cluster(d, i) {
	      var nodes = hierarchy.call(this, d, i), root = nodes[0], previousNode, x = 0;
	      d3_layout_hierarchyVisitAfter(root, function(node) {
	        var children = node.children;
	        if (children && children.length) {
	          node.x = d3_layout_clusterX(children);
	          node.y = d3_layout_clusterY(children);
	        } else {
	          node.x = previousNode ? x += separation(node, previousNode) : 0;
	          node.y = 0;
	          previousNode = node;
	        }
	      });
	      var left = d3_layout_clusterLeft(root), right = d3_layout_clusterRight(root), x0 = left.x - separation(left, right) / 2, x1 = right.x + separation(right, left) / 2;
	      d3_layout_hierarchyVisitAfter(root, nodeSize ? function(node) {
	        node.x = (node.x - root.x) * size[0];
	        node.y = (root.y - node.y) * size[1];
	      } : function(node) {
	        node.x = (node.x - x0) / (x1 - x0) * size[0];
	        node.y = (1 - (root.y ? node.y / root.y : 1)) * size[1];
	      });
	      return nodes;
	    }
	    cluster.separation = function(x) {
	      if (!arguments.length) return separation;
	      separation = x;
	      return cluster;
	    };
	    cluster.size = function(x) {
	      if (!arguments.length) return nodeSize ? null : size;
	      nodeSize = (size = x) == null;
	      return cluster;
	    };
	    cluster.nodeSize = function(x) {
	      if (!arguments.length) return nodeSize ? size : null;
	      nodeSize = (size = x) != null;
	      return cluster;
	    };
	    return d3_layout_hierarchyRebind(cluster, hierarchy);
	  };
	  function d3_layout_clusterY(children) {
	    return 1 + d3.max(children, function(child) {
	      return child.y;
	    });
	  }
	  function d3_layout_clusterX(children) {
	    return children.reduce(function(x, child) {
	      return x + child.x;
	    }, 0) / children.length;
	  }
	  function d3_layout_clusterLeft(node) {
	    var children = node.children;
	    return children && children.length ? d3_layout_clusterLeft(children[0]) : node;
	  }
	  function d3_layout_clusterRight(node) {
	    var children = node.children, n;
	    return children && (n = children.length) ? d3_layout_clusterRight(children[n - 1]) : node;
	  }
	  d3.layout.treemap = function() {
	    var hierarchy = d3.layout.hierarchy(), round = Math.round, size = [ 1, 1 ], padding = null, pad = d3_layout_treemapPadNull, sticky = false, stickies, mode = "squarify", ratio = .5 * (1 + Math.sqrt(5));
	    function scale(children, k) {
	      var i = -1, n = children.length, child, area;
	      while (++i < n) {
	        area = (child = children[i]).value * (k < 0 ? 0 : k);
	        child.area = isNaN(area) || area <= 0 ? 0 : area;
	      }
	    }
	    function squarify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), row = [], remaining = children.slice(), child, best = Infinity, score, u = mode === "slice" ? rect.dx : mode === "dice" ? rect.dy : mode === "slice-dice" ? node.depth & 1 ? rect.dy : rect.dx : Math.min(rect.dx, rect.dy), n;
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while ((n = remaining.length) > 0) {
	          row.push(child = remaining[n - 1]);
	          row.area += child.area;
	          if (mode !== "squarify" || (score = worst(row, u)) <= best) {
	            remaining.pop();
	            best = score;
	          } else {
	            row.area -= row.pop().area;
	            position(row, u, rect, false);
	            u = Math.min(rect.dx, rect.dy);
	            row.length = row.area = 0;
	            best = Infinity;
	          }
	        }
	        if (row.length) {
	          position(row, u, rect, true);
	          row.length = row.area = 0;
	        }
	        children.forEach(squarify);
	      }
	    }
	    function stickify(node) {
	      var children = node.children;
	      if (children && children.length) {
	        var rect = pad(node), remaining = children.slice(), child, row = [];
	        scale(remaining, rect.dx * rect.dy / node.value);
	        row.area = 0;
	        while (child = remaining.pop()) {
	          row.push(child);
	          row.area += child.area;
	          if (child.z != null) {
	            position(row, child.z ? rect.dx : rect.dy, rect, !remaining.length);
	            row.length = row.area = 0;
	          }
	        }
	        children.forEach(stickify);
	      }
	    }
	    function worst(row, u) {
	      var s = row.area, r, rmax = 0, rmin = Infinity, i = -1, n = row.length;
	      while (++i < n) {
	        if (!(r = row[i].area)) continue;
	        if (r < rmin) rmin = r;
	        if (r > rmax) rmax = r;
	      }
	      s *= s;
	      u *= u;
	      return s ? Math.max(u * rmax * ratio / s, s / (u * rmin * ratio)) : Infinity;
	    }
	    function position(row, u, rect, flush) {
	      var i = -1, n = row.length, x = rect.x, y = rect.y, v = u ? round(row.area / u) : 0, o;
	      if (u == rect.dx) {
	        if (flush || v > rect.dy) v = rect.dy;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dy = v;
	          x += o.dx = Math.min(rect.x + rect.dx - x, v ? round(o.area / v) : 0);
	        }
	        o.z = true;
	        o.dx += rect.x + rect.dx - x;
	        rect.y += v;
	        rect.dy -= v;
	      } else {
	        if (flush || v > rect.dx) v = rect.dx;
	        while (++i < n) {
	          o = row[i];
	          o.x = x;
	          o.y = y;
	          o.dx = v;
	          y += o.dy = Math.min(rect.y + rect.dy - y, v ? round(o.area / v) : 0);
	        }
	        o.z = false;
	        o.dy += rect.y + rect.dy - y;
	        rect.x += v;
	        rect.dx -= v;
	      }
	    }
	    function treemap(d) {
	      var nodes = stickies || hierarchy(d), root = nodes[0];
	      root.x = root.y = 0;
	      if (root.value) root.dx = size[0], root.dy = size[1]; else root.dx = root.dy = 0;
	      if (stickies) hierarchy.revalue(root);
	      scale([ root ], root.dx * root.dy / root.value);
	      (stickies ? stickify : squarify)(root);
	      if (sticky) stickies = nodes;
	      return nodes;
	    }
	    treemap.size = function(x) {
	      if (!arguments.length) return size;
	      size = x;
	      return treemap;
	    };
	    treemap.padding = function(x) {
	      if (!arguments.length) return padding;
	      function padFunction(node) {
	        var p = x.call(treemap, node, node.depth);
	        return p == null ? d3_layout_treemapPadNull(node) : d3_layout_treemapPad(node, typeof p === "number" ? [ p, p, p, p ] : p);
	      }
	      function padConstant(node) {
	        return d3_layout_treemapPad(node, x);
	      }
	      var type;
	      pad = (padding = x) == null ? d3_layout_treemapPadNull : (type = typeof x) === "function" ? padFunction : type === "number" ? (x = [ x, x, x, x ], 
	      padConstant) : padConstant;
	      return treemap;
	    };
	    treemap.round = function(x) {
	      if (!arguments.length) return round != Number;
	      round = x ? Math.round : Number;
	      return treemap;
	    };
	    treemap.sticky = function(x) {
	      if (!arguments.length) return sticky;
	      sticky = x;
	      stickies = null;
	      return treemap;
	    };
	    treemap.ratio = function(x) {
	      if (!arguments.length) return ratio;
	      ratio = x;
	      return treemap;
	    };
	    treemap.mode = function(x) {
	      if (!arguments.length) return mode;
	      mode = x + "";
	      return treemap;
	    };
	    return d3_layout_hierarchyRebind(treemap, hierarchy);
	  };
	  function d3_layout_treemapPadNull(node) {
	    return {
	      x: node.x,
	      y: node.y,
	      dx: node.dx,
	      dy: node.dy
	    };
	  }
	  function d3_layout_treemapPad(node, padding) {
	    var x = node.x + padding[3], y = node.y + padding[0], dx = node.dx - padding[1] - padding[3], dy = node.dy - padding[0] - padding[2];
	    if (dx < 0) {
	      x += dx / 2;
	      dx = 0;
	    }
	    if (dy < 0) {
	      y += dy / 2;
	      dy = 0;
	    }
	    return {
	      x: x,
	      y: y,
	      dx: dx,
	      dy: dy
	    };
	  }
	  d3.random = {
	    normal: function(µ, σ) {
	      var n = arguments.length;
	      if (n < 2) σ = 1;
	      if (n < 1) µ = 0;
	      return function() {
	        var x, y, r;
	        do {
	          x = Math.random() * 2 - 1;
	          y = Math.random() * 2 - 1;
	          r = x * x + y * y;
	        } while (!r || r > 1);
	        return µ + σ * x * Math.sqrt(-2 * Math.log(r) / r);
	      };
	    },
	    logNormal: function() {
	      var random = d3.random.normal.apply(d3, arguments);
	      return function() {
	        return Math.exp(random());
	      };
	    },
	    bates: function(m) {
	      var random = d3.random.irwinHall(m);
	      return function() {
	        return random() / m;
	      };
	    },
	    irwinHall: function(m) {
	      return function() {
	        for (var s = 0, j = 0; j < m; j++) s += Math.random();
	        return s;
	      };
	    }
	  };
	  d3.scale = {};
	  function d3_scaleExtent(domain) {
	    var start = domain[0], stop = domain[domain.length - 1];
	    return start < stop ? [ start, stop ] : [ stop, start ];
	  }
	  function d3_scaleRange(scale) {
	    return scale.rangeExtent ? scale.rangeExtent() : d3_scaleExtent(scale.range());
	  }
	  function d3_scale_bilinear(domain, range, uninterpolate, interpolate) {
	    var u = uninterpolate(domain[0], domain[1]), i = interpolate(range[0], range[1]);
	    return function(x) {
	      return i(u(x));
	    };
	  }
	  function d3_scale_nice(domain, nice) {
	    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], dx;
	    if (x1 < x0) {
	      dx = i0, i0 = i1, i1 = dx;
	      dx = x0, x0 = x1, x1 = dx;
	    }
	    domain[i0] = nice.floor(x0);
	    domain[i1] = nice.ceil(x1);
	    return domain;
	  }
	  function d3_scale_niceStep(step) {
	    return step ? {
	      floor: function(x) {
	        return Math.floor(x / step) * step;
	      },
	      ceil: function(x) {
	        return Math.ceil(x / step) * step;
	      }
	    } : d3_scale_niceIdentity;
	  }
	  var d3_scale_niceIdentity = {
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  function d3_scale_polylinear(domain, range, uninterpolate, interpolate) {
	    var u = [], i = [], j = 0, k = Math.min(domain.length, range.length) - 1;
	    if (domain[k] < domain[0]) {
	      domain = domain.slice().reverse();
	      range = range.slice().reverse();
	    }
	    while (++j <= k) {
	      u.push(uninterpolate(domain[j - 1], domain[j]));
	      i.push(interpolate(range[j - 1], range[j]));
	    }
	    return function(x) {
	      var j = d3.bisect(domain, x, 1, k) - 1;
	      return i[j](u[j](x));
	    };
	  }
	  d3.scale.linear = function() {
	    return d3_scale_linear([ 0, 1 ], [ 0, 1 ], d3_interpolate, false);
	  };
	  function d3_scale_linear(domain, range, interpolate, clamp) {
	    var output, input;
	    function rescale() {
	      var linear = Math.min(domain.length, range.length) > 2 ? d3_scale_polylinear : d3_scale_bilinear, uninterpolate = clamp ? d3_uninterpolateClamp : d3_uninterpolateNumber;
	      output = linear(domain, range, uninterpolate, interpolate);
	      input = linear(range, domain, uninterpolate, d3_interpolate);
	      return scale;
	    }
	    function scale(x) {
	      return output(x);
	    }
	    scale.invert = function(y) {
	      return input(y);
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(Number);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.rangeRound = function(x) {
	      return scale.range(x).interpolate(d3_interpolateRound);
	    };
	    scale.clamp = function(x) {
	      if (!arguments.length) return clamp;
	      clamp = x;
	      return rescale();
	    };
	    scale.interpolate = function(x) {
	      if (!arguments.length) return interpolate;
	      interpolate = x;
	      return rescale();
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      d3_scale_linearNice(domain, m);
	      return rescale();
	    };
	    scale.copy = function() {
	      return d3_scale_linear(domain, range, interpolate, clamp);
	    };
	    return rescale();
	  }
	  function d3_scale_linearRebind(scale, linear) {
	    return d3.rebind(scale, linear, "range", "rangeRound", "interpolate", "clamp");
	  }
	  function d3_scale_linearNice(domain, m) {
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    d3_scale_nice(domain, d3_scale_niceStep(d3_scale_linearTickRange(domain, m)[2]));
	    return domain;
	  }
	  function d3_scale_linearTickRange(domain, m) {
	    if (m == null) m = 10;
	    var extent = d3_scaleExtent(domain), span = extent[1] - extent[0], step = Math.pow(10, Math.floor(Math.log(span / m) / Math.LN10)), err = m / span * step;
	    if (err <= .15) step *= 10; else if (err <= .35) step *= 5; else if (err <= .75) step *= 2;
	    extent[0] = Math.ceil(extent[0] / step) * step;
	    extent[1] = Math.floor(extent[1] / step) * step + step * .5;
	    extent[2] = step;
	    return extent;
	  }
	  function d3_scale_linearTicks(domain, m) {
	    return d3.range.apply(d3, d3_scale_linearTickRange(domain, m));
	  }
	  function d3_scale_linearTickFormat(domain, m, format) {
	    var range = d3_scale_linearTickRange(domain, m);
	    if (format) {
	      var match = d3_format_re.exec(format);
	      match.shift();
	      if (match[8] === "s") {
	        var prefix = d3.formatPrefix(Math.max(abs(range[0]), abs(range[1])));
	        if (!match[7]) match[7] = "." + d3_scale_linearPrecision(prefix.scale(range[2]));
	        match[8] = "f";
	        format = d3.format(match.join(""));
	        return function(d) {
	          return format(prefix.scale(d)) + prefix.symbol;
	        };
	      }
	      if (!match[7]) match[7] = "." + d3_scale_linearFormatPrecision(match[8], range);
	      format = match.join("");
	    } else {
	      format = ",." + d3_scale_linearPrecision(range[2]) + "f";
	    }
	    return d3.format(format);
	  }
	  var d3_scale_linearFormatSignificant = {
	    s: 1,
	    g: 1,
	    p: 1,
	    r: 1,
	    e: 1
	  };
	  function d3_scale_linearPrecision(value) {
	    return -Math.floor(Math.log(value) / Math.LN10 + .01);
	  }
	  function d3_scale_linearFormatPrecision(type, range) {
	    var p = d3_scale_linearPrecision(range[2]);
	    return type in d3_scale_linearFormatSignificant ? Math.abs(p - d3_scale_linearPrecision(Math.max(abs(range[0]), abs(range[1])))) + +(type !== "e") : p - (type === "%") * 2;
	  }
	  d3.scale.log = function() {
	    return d3_scale_log(d3.scale.linear().domain([ 0, 1 ]), 10, true, [ 1, 10 ]);
	  };
	  function d3_scale_log(linear, base, positive, domain) {
	    function log(x) {
	      return (positive ? Math.log(x < 0 ? 0 : x) : -Math.log(x > 0 ? 0 : -x)) / Math.log(base);
	    }
	    function pow(x) {
	      return positive ? Math.pow(base, x) : -Math.pow(base, -x);
	    }
	    function scale(x) {
	      return linear(log(x));
	    }
	    scale.invert = function(x) {
	      return pow(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      positive = x[0] >= 0;
	      linear.domain((domain = x.map(Number)).map(log));
	      return scale;
	    };
	    scale.base = function(_) {
	      if (!arguments.length) return base;
	      base = +_;
	      linear.domain(domain.map(log));
	      return scale;
	    };
	    scale.nice = function() {
	      var niced = d3_scale_nice(domain.map(log), positive ? Math : d3_scale_logNiceNegative);
	      linear.domain(niced);
	      domain = niced.map(pow);
	      return scale;
	    };
	    scale.ticks = function() {
	      var extent = d3_scaleExtent(domain), ticks = [], u = extent[0], v = extent[1], i = Math.floor(log(u)), j = Math.ceil(log(v)), n = base % 1 ? 2 : base;
	      if (isFinite(j - i)) {
	        if (positive) {
	          for (;i < j; i++) for (var k = 1; k < n; k++) ticks.push(pow(i) * k);
	          ticks.push(pow(i));
	        } else {
	          ticks.push(pow(i));
	          for (;i++ < j; ) for (var k = n - 1; k > 0; k--) ticks.push(pow(i) * k);
	        }
	        for (i = 0; ticks[i] < u; i++) {}
	        for (j = ticks.length; ticks[j - 1] > v; j--) {}
	        ticks = ticks.slice(i, j);
	      }
	      return ticks;
	    };
	    scale.tickFormat = function(n, format) {
	      if (!arguments.length) return d3_scale_logFormat;
	      if (arguments.length < 2) format = d3_scale_logFormat; else if (typeof format !== "function") format = d3.format(format);
	      var k = Math.max(1, base * n / scale.ticks().length);
	      return function(d) {
	        var i = d / pow(Math.round(log(d)));
	        if (i * base < base - .5) i *= base;
	        return i <= k ? format(d) : "";
	      };
	    };
	    scale.copy = function() {
	      return d3_scale_log(linear.copy(), base, positive, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  var d3_scale_logFormat = d3.format(".0e"), d3_scale_logNiceNegative = {
	    floor: function(x) {
	      return -Math.ceil(-x);
	    },
	    ceil: function(x) {
	      return -Math.floor(-x);
	    }
	  };
	  d3.scale.pow = function() {
	    return d3_scale_pow(d3.scale.linear(), 1, [ 0, 1 ]);
	  };
	  function d3_scale_pow(linear, exponent, domain) {
	    var powp = d3_scale_powPow(exponent), powb = d3_scale_powPow(1 / exponent);
	    function scale(x) {
	      return linear(powp(x));
	    }
	    scale.invert = function(x) {
	      return powb(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      linear.domain((domain = x.map(Number)).map(powp));
	      return scale;
	    };
	    scale.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    scale.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    scale.nice = function(m) {
	      return scale.domain(d3_scale_linearNice(domain, m));
	    };
	    scale.exponent = function(x) {
	      if (!arguments.length) return exponent;
	      powp = d3_scale_powPow(exponent = x);
	      powb = d3_scale_powPow(1 / exponent);
	      linear.domain(domain.map(powp));
	      return scale;
	    };
	    scale.copy = function() {
	      return d3_scale_pow(linear.copy(), exponent, domain);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_scale_powPow(e) {
	    return function(x) {
	      return x < 0 ? -Math.pow(-x, e) : Math.pow(x, e);
	    };
	  }
	  d3.scale.sqrt = function() {
	    return d3.scale.pow().exponent(.5);
	  };
	  d3.scale.ordinal = function() {
	    return d3_scale_ordinal([], {
	      t: "range",
	      a: [ [] ]
	    });
	  };
	  function d3_scale_ordinal(domain, ranger) {
	    var index, range, rangeBand;
	    function scale(x) {
	      return range[((index.get(x) || (ranger.t === "range" ? index.set(x, domain.push(x)) : NaN)) - 1) % range.length];
	    }
	    function steps(start, step) {
	      return d3.range(domain.length).map(function(i) {
	        return start + step * i;
	      });
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = [];
	      index = new d3_Map();
	      var i = -1, n = x.length, xi;
	      while (++i < n) if (!index.has(xi = x[i])) index.set(xi, domain.push(xi));
	      return scale[ranger.t].apply(scale, ranger.a);
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      rangeBand = 0;
	      ranger = {
	        t: "range",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangePoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = (start + stop) / 2, 
	      0) : (stop - start) / (domain.length - 1 + padding);
	      range = steps(start + step * padding / 2, step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangePoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundPoints = function(x, padding) {
	      if (arguments.length < 2) padding = 0;
	      var start = x[0], stop = x[1], step = domain.length < 2 ? (start = stop = Math.round((start + stop) / 2), 
	      0) : (stop - start) / (domain.length - 1 + padding) | 0;
	      range = steps(start + Math.round(step * padding / 2 + (stop - start - (domain.length - 1 + padding) * step) / 2), step);
	      rangeBand = 0;
	      ranger = {
	        t: "rangeRoundPoints",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = (stop - start) / (domain.length - padding + 2 * outerPadding);
	      range = steps(start + step * outerPadding, step);
	      if (reverse) range.reverse();
	      rangeBand = step * (1 - padding);
	      ranger = {
	        t: "rangeBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeRoundBands = function(x, padding, outerPadding) {
	      if (arguments.length < 2) padding = 0;
	      if (arguments.length < 3) outerPadding = padding;
	      var reverse = x[1] < x[0], start = x[reverse - 0], stop = x[1 - reverse], step = Math.floor((stop - start) / (domain.length - padding + 2 * outerPadding));
	      range = steps(start + Math.round((stop - start - (domain.length - padding) * step) / 2), step);
	      if (reverse) range.reverse();
	      rangeBand = Math.round(step * (1 - padding));
	      ranger = {
	        t: "rangeRoundBands",
	        a: arguments
	      };
	      return scale;
	    };
	    scale.rangeBand = function() {
	      return rangeBand;
	    };
	    scale.rangeExtent = function() {
	      return d3_scaleExtent(ranger.a[0]);
	    };
	    scale.copy = function() {
	      return d3_scale_ordinal(domain, ranger);
	    };
	    return scale.domain(domain);
	  }
	  d3.scale.category10 = function() {
	    return d3.scale.ordinal().range(d3_category10);
	  };
	  d3.scale.category20 = function() {
	    return d3.scale.ordinal().range(d3_category20);
	  };
	  d3.scale.category20b = function() {
	    return d3.scale.ordinal().range(d3_category20b);
	  };
	  d3.scale.category20c = function() {
	    return d3.scale.ordinal().range(d3_category20c);
	  };
	  var d3_category10 = [ 2062260, 16744206, 2924588, 14034728, 9725885, 9197131, 14907330, 8355711, 12369186, 1556175 ].map(d3_rgbString);
	  var d3_category20 = [ 2062260, 11454440, 16744206, 16759672, 2924588, 10018698, 14034728, 16750742, 9725885, 12955861, 9197131, 12885140, 14907330, 16234194, 8355711, 13092807, 12369186, 14408589, 1556175, 10410725 ].map(d3_rgbString);
	  var d3_category20b = [ 3750777, 5395619, 7040719, 10264286, 6519097, 9216594, 11915115, 13556636, 9202993, 12426809, 15186514, 15190932, 8666169, 11356490, 14049643, 15177372, 8077683, 10834324, 13528509, 14589654 ].map(d3_rgbString);
	  var d3_category20c = [ 3244733, 7057110, 10406625, 13032431, 15095053, 16616764, 16625259, 16634018, 3253076, 7652470, 10607003, 13101504, 7695281, 10394312, 12369372, 14342891, 6513507, 9868950, 12434877, 14277081 ].map(d3_rgbString);
	  d3.scale.quantile = function() {
	    return d3_scale_quantile([], []);
	  };
	  function d3_scale_quantile(domain, range) {
	    var thresholds;
	    function rescale() {
	      var k = 0, q = range.length;
	      thresholds = [];
	      while (++k < q) thresholds[k - 1] = d3.quantile(domain, k / q);
	      return scale;
	    }
	    function scale(x) {
	      if (!isNaN(x = +x)) return range[d3.bisect(thresholds, x)];
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(d3_number).filter(d3_numeric).sort(d3_ascending);
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.quantiles = function() {
	      return thresholds;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return y < 0 ? [ NaN, NaN ] : [ y > 0 ? thresholds[y - 1] : domain[0], y < thresholds.length ? thresholds[y] : domain[domain.length - 1] ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantile(domain, range);
	    };
	    return rescale();
	  }
	  d3.scale.quantize = function() {
	    return d3_scale_quantize(0, 1, [ 0, 1 ]);
	  };
	  function d3_scale_quantize(x0, x1, range) {
	    var kx, i;
	    function scale(x) {
	      return range[Math.max(0, Math.min(i, Math.floor(kx * (x - x0))))];
	    }
	    function rescale() {
	      kx = range.length / (x1 - x0);
	      i = range.length - 1;
	      return scale;
	    }
	    scale.domain = function(x) {
	      if (!arguments.length) return [ x0, x1 ];
	      x0 = +x[0];
	      x1 = +x[x.length - 1];
	      return rescale();
	    };
	    scale.range = function(x) {
	      if (!arguments.length) return range;
	      range = x;
	      return rescale();
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      y = y < 0 ? NaN : y / kx + x0;
	      return [ y, y + 1 / kx ];
	    };
	    scale.copy = function() {
	      return d3_scale_quantize(x0, x1, range);
	    };
	    return rescale();
	  }
	  d3.scale.threshold = function() {
	    return d3_scale_threshold([ .5 ], [ 0, 1 ]);
	  };
	  function d3_scale_threshold(domain, range) {
	    function scale(x) {
	      if (x <= x) return range[d3.bisect(domain, x)];
	    }
	    scale.domain = function(_) {
	      if (!arguments.length) return domain;
	      domain = _;
	      return scale;
	    };
	    scale.range = function(_) {
	      if (!arguments.length) return range;
	      range = _;
	      return scale;
	    };
	    scale.invertExtent = function(y) {
	      y = range.indexOf(y);
	      return [ domain[y - 1], domain[y] ];
	    };
	    scale.copy = function() {
	      return d3_scale_threshold(domain, range);
	    };
	    return scale;
	  }
	  d3.scale.identity = function() {
	    return d3_scale_identity([ 0, 1 ]);
	  };
	  function d3_scale_identity(domain) {
	    function identity(x) {
	      return +x;
	    }
	    identity.invert = identity;
	    identity.domain = identity.range = function(x) {
	      if (!arguments.length) return domain;
	      domain = x.map(identity);
	      return identity;
	    };
	    identity.ticks = function(m) {
	      return d3_scale_linearTicks(domain, m);
	    };
	    identity.tickFormat = function(m, format) {
	      return d3_scale_linearTickFormat(domain, m, format);
	    };
	    identity.copy = function() {
	      return d3_scale_identity(domain);
	    };
	    return identity;
	  }
	  d3.svg = {};
	  function d3_zero() {
	    return 0;
	  }
	  d3.svg.arc = function() {
	    var innerRadius = d3_svg_arcInnerRadius, outerRadius = d3_svg_arcOuterRadius, cornerRadius = d3_zero, padRadius = d3_svg_arcAuto, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle, padAngle = d3_svg_arcPadAngle;
	    function arc() {
	      var r0 = Math.max(0, +innerRadius.apply(this, arguments)), r1 = Math.max(0, +outerRadius.apply(this, arguments)), a0 = startAngle.apply(this, arguments) - halfπ, a1 = endAngle.apply(this, arguments) - halfπ, da = Math.abs(a1 - a0), cw = a0 > a1 ? 0 : 1;
	      if (r1 < r0) rc = r1, r1 = r0, r0 = rc;
	      if (da >= τε) return circleSegment(r1, cw) + (r0 ? circleSegment(r0, 1 - cw) : "") + "Z";
	      var rc, cr, rp, ap, p0 = 0, p1 = 0, x0, y0, x1, y1, x2, y2, x3, y3, path = [];
	      if (ap = (+padAngle.apply(this, arguments) || 0) / 2) {
	        rp = padRadius === d3_svg_arcAuto ? Math.sqrt(r0 * r0 + r1 * r1) : +padRadius.apply(this, arguments);
	        if (!cw) p1 *= -1;
	        if (r1) p1 = d3_asin(rp / r1 * Math.sin(ap));
	        if (r0) p0 = d3_asin(rp / r0 * Math.sin(ap));
	      }
	      if (r1) {
	        x0 = r1 * Math.cos(a0 + p1);
	        y0 = r1 * Math.sin(a0 + p1);
	        x1 = r1 * Math.cos(a1 - p1);
	        y1 = r1 * Math.sin(a1 - p1);
	        var l1 = Math.abs(a1 - a0 - 2 * p1) <= π ? 0 : 1;
	        if (p1 && d3_svg_arcSweep(x0, y0, x1, y1) === cw ^ l1) {
	          var h1 = (a0 + a1) / 2;
	          x0 = r1 * Math.cos(h1);
	          y0 = r1 * Math.sin(h1);
	          x1 = y1 = null;
	        }
	      } else {
	        x0 = y0 = 0;
	      }
	      if (r0) {
	        x2 = r0 * Math.cos(a1 - p0);
	        y2 = r0 * Math.sin(a1 - p0);
	        x3 = r0 * Math.cos(a0 + p0);
	        y3 = r0 * Math.sin(a0 + p0);
	        var l0 = Math.abs(a0 - a1 + 2 * p0) <= π ? 0 : 1;
	        if (p0 && d3_svg_arcSweep(x2, y2, x3, y3) === 1 - cw ^ l0) {
	          var h0 = (a0 + a1) / 2;
	          x2 = r0 * Math.cos(h0);
	          y2 = r0 * Math.sin(h0);
	          x3 = y3 = null;
	        }
	      } else {
	        x2 = y2 = 0;
	      }
	      if (da > ε && (rc = Math.min(Math.abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments))) > .001) {
	        cr = r0 < r1 ^ cw ? 0 : 1;
	        var rc1 = rc, rc0 = rc;
	        if (da < π) {
	          var oc = x3 == null ? [ x2, y2 ] : x1 == null ? [ x0, y0 ] : d3_geom_polygonIntersect([ x0, y0 ], [ x3, y3 ], [ x1, y1 ], [ x2, y2 ]), ax = x0 - oc[0], ay = y0 - oc[1], bx = x1 - oc[0], by = y1 - oc[1], kc = 1 / Math.sin(Math.acos((ax * bx + ay * by) / (Math.sqrt(ax * ax + ay * ay) * Math.sqrt(bx * bx + by * by))) / 2), lc = Math.sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = Math.min(rc, (r0 - lc) / (kc - 1));
	          rc1 = Math.min(rc, (r1 - lc) / (kc + 1));
	        }
	        if (x1 != null) {
	          var t30 = d3_svg_arcCornerTangents(x3 == null ? [ x2, y2 ] : [ x3, y3 ], [ x0, y0 ], r1, rc1, cw), t12 = d3_svg_arcCornerTangents([ x1, y1 ], [ x2, y2 ], r1, rc1, cw);
	          if (rc === rc1) {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 0,", cr, " ", t30[1], "A", r1, ",", r1, " 0 ", 1 - cw ^ d3_svg_arcSweep(t30[1][0], t30[1][1], t12[1][0], t12[1][1]), ",", cw, " ", t12[1], "A", rc1, ",", rc1, " 0 0,", cr, " ", t12[0]);
	          } else {
	            path.push("M", t30[0], "A", rc1, ",", rc1, " 0 1,", cr, " ", t12[0]);
	          }
	        } else {
	          path.push("M", x0, ",", y0);
	        }
	        if (x3 != null) {
	          var t03 = d3_svg_arcCornerTangents([ x0, y0 ], [ x3, y3 ], r0, -rc0, cw), t21 = d3_svg_arcCornerTangents([ x2, y2 ], x1 == null ? [ x0, y0 ] : [ x1, y1 ], r0, -rc0, cw);
	          if (rc === rc0) {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t21[1], "A", r0, ",", r0, " 0 ", cw ^ d3_svg_arcSweep(t21[1][0], t21[1][1], t03[1][0], t03[1][1]), ",", 1 - cw, " ", t03[1], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          } else {
	            path.push("L", t21[0], "A", rc0, ",", rc0, " 0 0,", cr, " ", t03[0]);
	          }
	        } else {
	          path.push("L", x2, ",", y2);
	        }
	      } else {
	        path.push("M", x0, ",", y0);
	        if (x1 != null) path.push("A", r1, ",", r1, " 0 ", l1, ",", cw, " ", x1, ",", y1);
	        path.push("L", x2, ",", y2);
	        if (x3 != null) path.push("A", r0, ",", r0, " 0 ", l0, ",", 1 - cw, " ", x3, ",", y3);
	      }
	      path.push("Z");
	      return path.join("");
	    }
	    function circleSegment(r1, cw) {
	      return "M0," + r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + -r1 + "A" + r1 + "," + r1 + " 0 1," + cw + " 0," + r1;
	    }
	    arc.innerRadius = function(v) {
	      if (!arguments.length) return innerRadius;
	      innerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.outerRadius = function(v) {
	      if (!arguments.length) return outerRadius;
	      outerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.cornerRadius = function(v) {
	      if (!arguments.length) return cornerRadius;
	      cornerRadius = d3_functor(v);
	      return arc;
	    };
	    arc.padRadius = function(v) {
	      if (!arguments.length) return padRadius;
	      padRadius = v == d3_svg_arcAuto ? d3_svg_arcAuto : d3_functor(v);
	      return arc;
	    };
	    arc.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return arc;
	    };
	    arc.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return arc;
	    };
	    arc.padAngle = function(v) {
	      if (!arguments.length) return padAngle;
	      padAngle = d3_functor(v);
	      return arc;
	    };
	    arc.centroid = function() {
	      var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2, a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - halfπ;
	      return [ Math.cos(a) * r, Math.sin(a) * r ];
	    };
	    return arc;
	  };
	  var d3_svg_arcAuto = "auto";
	  function d3_svg_arcInnerRadius(d) {
	    return d.innerRadius;
	  }
	  function d3_svg_arcOuterRadius(d) {
	    return d.outerRadius;
	  }
	  function d3_svg_arcStartAngle(d) {
	    return d.startAngle;
	  }
	  function d3_svg_arcEndAngle(d) {
	    return d.endAngle;
	  }
	  function d3_svg_arcPadAngle(d) {
	    return d && d.padAngle;
	  }
	  function d3_svg_arcSweep(x0, y0, x1, y1) {
	    return (x0 - x1) * y0 - (y0 - y1) * x0 > 0 ? 0 : 1;
	  }
	  function d3_svg_arcCornerTangents(p0, p1, r1, rc, cw) {
	    var x01 = p0[0] - p1[0], y01 = p0[1] - p1[1], lo = (cw ? rc : -rc) / Math.sqrt(x01 * x01 + y01 * y01), ox = lo * y01, oy = -lo * x01, x1 = p0[0] + ox, y1 = p0[1] + oy, x2 = p1[0] + ox, y2 = p1[1] + oy, x3 = (x1 + x2) / 2, y3 = (y1 + y2) / 2, dx = x2 - x1, dy = y2 - y1, d2 = dx * dx + dy * dy, r = r1 - rc, D = x1 * y2 - x2 * y1, d = (dy < 0 ? -1 : 1) * Math.sqrt(Math.max(0, r * r * d2 - D * D)), cx0 = (D * dy - dx * d) / d2, cy0 = (-D * dx - dy * d) / d2, cx1 = (D * dy + dx * d) / d2, cy1 = (-D * dx + dy * d) / d2, dx0 = cx0 - x3, dy0 = cy0 - y3, dx1 = cx1 - x3, dy1 = cy1 - y3;
	    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
	    return [ [ cx0 - ox, cy0 - oy ], [ cx0 * r1 / r, cy0 * r1 / r ] ];
	  }
	  function d3_svg_line(projection) {
	    var x = d3_geom_pointX, y = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, tension = .7;
	    function line(data) {
	      var segments = [], points = [], i = -1, n = data.length, d, fx = d3_functor(x), fy = d3_functor(y);
	      function segment() {
	        segments.push("M", interpolate(projection(points), tension));
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points.push([ +fx.call(this, d, i), +fy.call(this, d, i) ]);
	        } else if (points.length) {
	          segment();
	          points = [];
	        }
	      }
	      if (points.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    line.x = function(_) {
	      if (!arguments.length) return x;
	      x = _;
	      return line;
	    };
	    line.y = function(_) {
	      if (!arguments.length) return y;
	      y = _;
	      return line;
	    };
	    line.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return line;
	    };
	    line.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      return line;
	    };
	    line.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return line;
	    };
	    return line;
	  }
	  d3.svg.line = function() {
	    return d3_svg_line(d3_identity);
	  };
	  var d3_svg_lineInterpolators = d3.map({
	    linear: d3_svg_lineLinear,
	    "linear-closed": d3_svg_lineLinearClosed,
	    step: d3_svg_lineStep,
	    "step-before": d3_svg_lineStepBefore,
	    "step-after": d3_svg_lineStepAfter,
	    basis: d3_svg_lineBasis,
	    "basis-open": d3_svg_lineBasisOpen,
	    "basis-closed": d3_svg_lineBasisClosed,
	    bundle: d3_svg_lineBundle,
	    cardinal: d3_svg_lineCardinal,
	    "cardinal-open": d3_svg_lineCardinalOpen,
	    "cardinal-closed": d3_svg_lineCardinalClosed,
	    monotone: d3_svg_lineMonotone
	  });
	  d3_svg_lineInterpolators.forEach(function(key, value) {
	    value.key = key;
	    value.closed = /-closed$/.test(key);
	  });
	  function d3_svg_lineLinear(points) {
	    return points.length > 1 ? points.join("L") : points + "Z";
	  }
	  function d3_svg_lineLinearClosed(points) {
	    return points.join("L") + "Z";
	  }
	  function d3_svg_lineStep(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p[0] + (p = points[i])[0]) / 2, "V", p[1]);
	    if (n > 1) path.push("H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepBefore(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("V", (p = points[i])[1], "H", p[0]);
	    return path.join("");
	  }
	  function d3_svg_lineStepAfter(points) {
	    var i = 0, n = points.length, p = points[0], path = [ p[0], ",", p[1] ];
	    while (++i < n) path.push("H", (p = points[i])[0], "V", p[1]);
	    return path.join("");
	  }
	  function d3_svg_lineCardinalOpen(points, tension) {
	    return points.length < 4 ? d3_svg_lineLinear(points) : points[1] + d3_svg_lineHermite(points.slice(1, -1), d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineCardinalClosed(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinearClosed(points) : points[0] + d3_svg_lineHermite((points.push(points[0]), 
	    points), d3_svg_lineCardinalTangents([ points[points.length - 2] ].concat(points, [ points[1] ]), tension));
	  }
	  function d3_svg_lineCardinal(points, tension) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineCardinalTangents(points, tension));
	  }
	  function d3_svg_lineHermite(points, tangents) {
	    if (tangents.length < 1 || points.length != tangents.length && points.length != tangents.length + 2) {
	      return d3_svg_lineLinear(points);
	    }
	    var quad = points.length != tangents.length, path = "", p0 = points[0], p = points[1], t0 = tangents[0], t = t0, pi = 1;
	    if (quad) {
	      path += "Q" + (p[0] - t0[0] * 2 / 3) + "," + (p[1] - t0[1] * 2 / 3) + "," + p[0] + "," + p[1];
	      p0 = points[1];
	      pi = 2;
	    }
	    if (tangents.length > 1) {
	      t = tangents[1];
	      p = points[pi];
	      pi++;
	      path += "C" + (p0[0] + t0[0]) + "," + (p0[1] + t0[1]) + "," + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      for (var i = 2; i < tangents.length; i++, pi++) {
	        p = points[pi];
	        t = tangents[i];
	        path += "S" + (p[0] - t[0]) + "," + (p[1] - t[1]) + "," + p[0] + "," + p[1];
	      }
	    }
	    if (quad) {
	      var lp = points[pi];
	      path += "Q" + (p[0] + t[0] * 2 / 3) + "," + (p[1] + t[1] * 2 / 3) + "," + lp[0] + "," + lp[1];
	    }
	    return path;
	  }
	  function d3_svg_lineCardinalTangents(points, tension) {
	    var tangents = [], a = (1 - tension) / 2, p0, p1 = points[0], p2 = points[1], i = 1, n = points.length;
	    while (++i < n) {
	      p0 = p1;
	      p1 = p2;
	      p2 = points[i];
	      tangents.push([ a * (p2[0] - p0[0]), a * (p2[1] - p0[1]) ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineBasis(points) {
	    if (points.length < 3) return d3_svg_lineLinear(points);
	    var i = 1, n = points.length, pi = points[0], x0 = pi[0], y0 = pi[1], px = [ x0, x0, x0, (pi = points[1])[0] ], py = [ y0, y0, y0, pi[1] ], path = [ x0, ",", y0, "L", d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    points.push(points[n - 1]);
	    while (++i <= n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    points.pop();
	    path.push("L", pi);
	    return path.join("");
	  }
	  function d3_svg_lineBasisOpen(points) {
	    if (points.length < 4) return d3_svg_lineLinear(points);
	    var path = [], i = -1, n = points.length, pi, px = [ 0 ], py = [ 0 ];
	    while (++i < 3) {
	      pi = points[i];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path.push(d3_svg_lineDot4(d3_svg_lineBasisBezier3, px) + "," + d3_svg_lineDot4(d3_svg_lineBasisBezier3, py));
	    --i;
	    while (++i < n) {
	      pi = points[i];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBasisClosed(points) {
	    var path, i = -1, n = points.length, m = n + 4, pi, px = [], py = [];
	    while (++i < 4) {
	      pi = points[i % n];
	      px.push(pi[0]);
	      py.push(pi[1]);
	    }
	    path = [ d3_svg_lineDot4(d3_svg_lineBasisBezier3, px), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, py) ];
	    --i;
	    while (++i < m) {
	      pi = points[i % n];
	      px.shift();
	      px.push(pi[0]);
	      py.shift();
	      py.push(pi[1]);
	      d3_svg_lineBasisBezier(path, px, py);
	    }
	    return path.join("");
	  }
	  function d3_svg_lineBundle(points, tension) {
	    var n = points.length - 1;
	    if (n) {
	      var x0 = points[0][0], y0 = points[0][1], dx = points[n][0] - x0, dy = points[n][1] - y0, i = -1, p, t;
	      while (++i <= n) {
	        p = points[i];
	        t = i / n;
	        p[0] = tension * p[0] + (1 - tension) * (x0 + t * dx);
	        p[1] = tension * p[1] + (1 - tension) * (y0 + t * dy);
	      }
	    }
	    return d3_svg_lineBasis(points);
	  }
	  function d3_svg_lineDot4(a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	  }
	  var d3_svg_lineBasisBezier1 = [ 0, 2 / 3, 1 / 3, 0 ], d3_svg_lineBasisBezier2 = [ 0, 1 / 3, 2 / 3, 0 ], d3_svg_lineBasisBezier3 = [ 0, 1 / 6, 2 / 3, 1 / 6 ];
	  function d3_svg_lineBasisBezier(path, x, y) {
	    path.push("C", d3_svg_lineDot4(d3_svg_lineBasisBezier1, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier1, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier2, y), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, x), ",", d3_svg_lineDot4(d3_svg_lineBasisBezier3, y));
	  }
	  function d3_svg_lineSlope(p0, p1) {
	    return (p1[1] - p0[1]) / (p1[0] - p0[0]);
	  }
	  function d3_svg_lineFiniteDifferences(points) {
	    var i = 0, j = points.length - 1, m = [], p0 = points[0], p1 = points[1], d = m[0] = d3_svg_lineSlope(p0, p1);
	    while (++i < j) {
	      m[i] = (d + (d = d3_svg_lineSlope(p0 = p1, p1 = points[i + 1]))) / 2;
	    }
	    m[i] = d;
	    return m;
	  }
	  function d3_svg_lineMonotoneTangents(points) {
	    var tangents = [], d, a, b, s, m = d3_svg_lineFiniteDifferences(points), i = -1, j = points.length - 1;
	    while (++i < j) {
	      d = d3_svg_lineSlope(points[i], points[i + 1]);
	      if (abs(d) < ε) {
	        m[i] = m[i + 1] = 0;
	      } else {
	        a = m[i] / d;
	        b = m[i + 1] / d;
	        s = a * a + b * b;
	        if (s > 9) {
	          s = d * 3 / Math.sqrt(s);
	          m[i] = s * a;
	          m[i + 1] = s * b;
	        }
	      }
	    }
	    i = -1;
	    while (++i <= j) {
	      s = (points[Math.min(j, i + 1)][0] - points[Math.max(0, i - 1)][0]) / (6 * (1 + m[i] * m[i]));
	      tangents.push([ s || 0, m[i] * s || 0 ]);
	    }
	    return tangents;
	  }
	  function d3_svg_lineMonotone(points) {
	    return points.length < 3 ? d3_svg_lineLinear(points) : points[0] + d3_svg_lineHermite(points, d3_svg_lineMonotoneTangents(points));
	  }
	  d3.svg.line.radial = function() {
	    var line = d3_svg_line(d3_svg_lineRadial);
	    line.radius = line.x, delete line.x;
	    line.angle = line.y, delete line.y;
	    return line;
	  };
	  function d3_svg_lineRadial(points) {
	    var point, i = -1, n = points.length, r, a;
	    while (++i < n) {
	      point = points[i];
	      r = point[0];
	      a = point[1] - halfπ;
	      point[0] = r * Math.cos(a);
	      point[1] = r * Math.sin(a);
	    }
	    return points;
	  }
	  function d3_svg_area(projection) {
	    var x0 = d3_geom_pointX, x1 = d3_geom_pointX, y0 = 0, y1 = d3_geom_pointY, defined = d3_true, interpolate = d3_svg_lineLinear, interpolateKey = interpolate.key, interpolateReverse = interpolate, L = "L", tension = .7;
	    function area(data) {
	      var segments = [], points0 = [], points1 = [], i = -1, n = data.length, d, fx0 = d3_functor(x0), fy0 = d3_functor(y0), fx1 = x0 === x1 ? function() {
	        return x;
	      } : d3_functor(x1), fy1 = y0 === y1 ? function() {
	        return y;
	      } : d3_functor(y1), x, y;
	      function segment() {
	        segments.push("M", interpolate(projection(points1), tension), L, interpolateReverse(projection(points0.reverse()), tension), "Z");
	      }
	      while (++i < n) {
	        if (defined.call(this, d = data[i], i)) {
	          points0.push([ x = +fx0.call(this, d, i), y = +fy0.call(this, d, i) ]);
	          points1.push([ +fx1.call(this, d, i), +fy1.call(this, d, i) ]);
	        } else if (points0.length) {
	          segment();
	          points0 = [];
	          points1 = [];
	        }
	      }
	      if (points0.length) segment();
	      return segments.length ? segments.join("") : null;
	    }
	    area.x = function(_) {
	      if (!arguments.length) return x1;
	      x0 = x1 = _;
	      return area;
	    };
	    area.x0 = function(_) {
	      if (!arguments.length) return x0;
	      x0 = _;
	      return area;
	    };
	    area.x1 = function(_) {
	      if (!arguments.length) return x1;
	      x1 = _;
	      return area;
	    };
	    area.y = function(_) {
	      if (!arguments.length) return y1;
	      y0 = y1 = _;
	      return area;
	    };
	    area.y0 = function(_) {
	      if (!arguments.length) return y0;
	      y0 = _;
	      return area;
	    };
	    area.y1 = function(_) {
	      if (!arguments.length) return y1;
	      y1 = _;
	      return area;
	    };
	    area.defined = function(_) {
	      if (!arguments.length) return defined;
	      defined = _;
	      return area;
	    };
	    area.interpolate = function(_) {
	      if (!arguments.length) return interpolateKey;
	      if (typeof _ === "function") interpolateKey = interpolate = _; else interpolateKey = (interpolate = d3_svg_lineInterpolators.get(_) || d3_svg_lineLinear).key;
	      interpolateReverse = interpolate.reverse || interpolate;
	      L = interpolate.closed ? "M" : "L";
	      return area;
	    };
	    area.tension = function(_) {
	      if (!arguments.length) return tension;
	      tension = _;
	      return area;
	    };
	    return area;
	  }
	  d3_svg_lineStepBefore.reverse = d3_svg_lineStepAfter;
	  d3_svg_lineStepAfter.reverse = d3_svg_lineStepBefore;
	  d3.svg.area = function() {
	    return d3_svg_area(d3_identity);
	  };
	  d3.svg.area.radial = function() {
	    var area = d3_svg_area(d3_svg_lineRadial);
	    area.radius = area.x, delete area.x;
	    area.innerRadius = area.x0, delete area.x0;
	    area.outerRadius = area.x1, delete area.x1;
	    area.angle = area.y, delete area.y;
	    area.startAngle = area.y0, delete area.y0;
	    area.endAngle = area.y1, delete area.y1;
	    return area;
	  };
	  d3.svg.chord = function() {
	    var source = d3_source, target = d3_target, radius = d3_svg_chordRadius, startAngle = d3_svg_arcStartAngle, endAngle = d3_svg_arcEndAngle;
	    function chord(d, i) {
	      var s = subgroup(this, source, d, i), t = subgroup(this, target, d, i);
	      return "M" + s.p0 + arc(s.r, s.p1, s.a1 - s.a0) + (equals(s, t) ? curve(s.r, s.p1, s.r, s.p0) : curve(s.r, s.p1, t.r, t.p0) + arc(t.r, t.p1, t.a1 - t.a0) + curve(t.r, t.p1, s.r, s.p0)) + "Z";
	    }
	    function subgroup(self, f, d, i) {
	      var subgroup = f.call(self, d, i), r = radius.call(self, subgroup, i), a0 = startAngle.call(self, subgroup, i) - halfπ, a1 = endAngle.call(self, subgroup, i) - halfπ;
	      return {
	        r: r,
	        a0: a0,
	        a1: a1,
	        p0: [ r * Math.cos(a0), r * Math.sin(a0) ],
	        p1: [ r * Math.cos(a1), r * Math.sin(a1) ]
	      };
	    }
	    function equals(a, b) {
	      return a.a0 == b.a0 && a.a1 == b.a1;
	    }
	    function arc(r, p, a) {
	      return "A" + r + "," + r + " 0 " + +(a > π) + ",1 " + p;
	    }
	    function curve(r0, p0, r1, p1) {
	      return "Q 0,0 " + p1;
	    }
	    chord.radius = function(v) {
	      if (!arguments.length) return radius;
	      radius = d3_functor(v);
	      return chord;
	    };
	    chord.source = function(v) {
	      if (!arguments.length) return source;
	      source = d3_functor(v);
	      return chord;
	    };
	    chord.target = function(v) {
	      if (!arguments.length) return target;
	      target = d3_functor(v);
	      return chord;
	    };
	    chord.startAngle = function(v) {
	      if (!arguments.length) return startAngle;
	      startAngle = d3_functor(v);
	      return chord;
	    };
	    chord.endAngle = function(v) {
	      if (!arguments.length) return endAngle;
	      endAngle = d3_functor(v);
	      return chord;
	    };
	    return chord;
	  };
	  function d3_svg_chordRadius(d) {
	    return d.radius;
	  }
	  d3.svg.diagonal = function() {
	    var source = d3_source, target = d3_target, projection = d3_svg_diagonalProjection;
	    function diagonal(d, i) {
	      var p0 = source.call(this, d, i), p3 = target.call(this, d, i), m = (p0.y + p3.y) / 2, p = [ p0, {
	        x: p0.x,
	        y: m
	      }, {
	        x: p3.x,
	        y: m
	      }, p3 ];
	      p = p.map(projection);
	      return "M" + p[0] + "C" + p[1] + " " + p[2] + " " + p[3];
	    }
	    diagonal.source = function(x) {
	      if (!arguments.length) return source;
	      source = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.target = function(x) {
	      if (!arguments.length) return target;
	      target = d3_functor(x);
	      return diagonal;
	    };
	    diagonal.projection = function(x) {
	      if (!arguments.length) return projection;
	      projection = x;
	      return diagonal;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalProjection(d) {
	    return [ d.x, d.y ];
	  }
	  d3.svg.diagonal.radial = function() {
	    var diagonal = d3.svg.diagonal(), projection = d3_svg_diagonalProjection, projection_ = diagonal.projection;
	    diagonal.projection = function(x) {
	      return arguments.length ? projection_(d3_svg_diagonalRadialProjection(projection = x)) : projection;
	    };
	    return diagonal;
	  };
	  function d3_svg_diagonalRadialProjection(projection) {
	    return function() {
	      var d = projection.apply(this, arguments), r = d[0], a = d[1] - halfπ;
	      return [ r * Math.cos(a), r * Math.sin(a) ];
	    };
	  }
	  d3.svg.symbol = function() {
	    var type = d3_svg_symbolType, size = d3_svg_symbolSize;
	    function symbol(d, i) {
	      return (d3_svg_symbols.get(type.call(this, d, i)) || d3_svg_symbolCircle)(size.call(this, d, i));
	    }
	    symbol.type = function(x) {
	      if (!arguments.length) return type;
	      type = d3_functor(x);
	      return symbol;
	    };
	    symbol.size = function(x) {
	      if (!arguments.length) return size;
	      size = d3_functor(x);
	      return symbol;
	    };
	    return symbol;
	  };
	  function d3_svg_symbolSize() {
	    return 64;
	  }
	  function d3_svg_symbolType() {
	    return "circle";
	  }
	  function d3_svg_symbolCircle(size) {
	    var r = Math.sqrt(size / π);
	    return "M0," + r + "A" + r + "," + r + " 0 1,1 0," + -r + "A" + r + "," + r + " 0 1,1 0," + r + "Z";
	  }
	  var d3_svg_symbols = d3.map({
	    circle: d3_svg_symbolCircle,
	    cross: function(size) {
	      var r = Math.sqrt(size / 5) / 2;
	      return "M" + -3 * r + "," + -r + "H" + -r + "V" + -3 * r + "H" + r + "V" + -r + "H" + 3 * r + "V" + r + "H" + r + "V" + 3 * r + "H" + -r + "V" + r + "H" + -3 * r + "Z";
	    },
	    diamond: function(size) {
	      var ry = Math.sqrt(size / (2 * d3_svg_symbolTan30)), rx = ry * d3_svg_symbolTan30;
	      return "M0," + -ry + "L" + rx + ",0" + " 0," + ry + " " + -rx + ",0" + "Z";
	    },
	    square: function(size) {
	      var r = Math.sqrt(size) / 2;
	      return "M" + -r + "," + -r + "L" + r + "," + -r + " " + r + "," + r + " " + -r + "," + r + "Z";
	    },
	    "triangle-down": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + ry + "L" + rx + "," + -ry + " " + -rx + "," + -ry + "Z";
	    },
	    "triangle-up": function(size) {
	      var rx = Math.sqrt(size / d3_svg_symbolSqrt3), ry = rx * d3_svg_symbolSqrt3 / 2;
	      return "M0," + -ry + "L" + rx + "," + ry + " " + -rx + "," + ry + "Z";
	    }
	  });
	  d3.svg.symbolTypes = d3_svg_symbols.keys();
	  var d3_svg_symbolSqrt3 = Math.sqrt(3), d3_svg_symbolTan30 = Math.tan(30 * d3_radians);
	  d3_selectionPrototype.transition = function(name) {
	    var id = d3_transitionInheritId || ++d3_transitionId, ns = d3_transitionNamespace(name), subgroups = [], subgroup, node, transition = d3_transitionInherit || {
	      time: Date.now(),
	      ease: d3_ease_cubicInOut,
	      delay: 0,
	      duration: 250
	    };
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) d3_transitionNode(node, i, ns, id, transition);
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_selectionPrototype.interrupt = function(name) {
	    return this.each(name == null ? d3_selection_interrupt : d3_selection_interruptNS(d3_transitionNamespace(name)));
	  };
	  var d3_selection_interrupt = d3_selection_interruptNS(d3_transitionNamespace());
	  function d3_selection_interruptNS(ns) {
	    return function() {
	      var lock, activeId, active;
	      if ((lock = this[ns]) && (active = lock[activeId = lock.active])) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        if (--lock.count) delete lock[activeId]; else delete this[ns];
	        lock.active += .5;
	        active.event && active.event.interrupt.call(this, this.__data__, active.index);
	      }
	    };
	  }
	  function d3_transition(groups, ns, id) {
	    d3_subclass(groups, d3_transitionPrototype);
	    groups.namespace = ns;
	    groups.id = id;
	    return groups;
	  }
	  var d3_transitionPrototype = [], d3_transitionId = 0, d3_transitionInheritId, d3_transitionInherit;
	  d3_transitionPrototype.call = d3_selectionPrototype.call;
	  d3_transitionPrototype.empty = d3_selectionPrototype.empty;
	  d3_transitionPrototype.node = d3_selectionPrototype.node;
	  d3_transitionPrototype.size = d3_selectionPrototype.size;
	  d3.transition = function(selection, name) {
	    return selection && selection.transition ? d3_transitionInheritId ? selection.transition(name) : selection : d3.selection().transition(selection);
	  };
	  d3.transition.prototype = d3_transitionPrototype;
	  d3_transitionPrototype.select = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnode, node;
	    selector = d3_selection_selector(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if ((node = group[i]) && (subnode = selector.call(node, node.__data__, i, j))) {
	          if ("__data__" in node) subnode.__data__ = node.__data__;
	          d3_transitionNode(subnode, i, ns, id, node[ns][id]);
	          subgroup.push(subnode);
	        } else {
	          subgroup.push(null);
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.selectAll = function(selector) {
	    var id = this.id, ns = this.namespace, subgroups = [], subgroup, subnodes, node, subnode, transition;
	    selector = d3_selection_selectorAll(selector);
	    for (var j = -1, m = this.length; ++j < m; ) {
	      for (var group = this[j], i = -1, n = group.length; ++i < n; ) {
	        if (node = group[i]) {
	          transition = node[ns][id];
	          subnodes = selector.call(node, node.__data__, i, j);
	          subgroups.push(subgroup = []);
	          for (var k = -1, o = subnodes.length; ++k < o; ) {
	            if (subnode = subnodes[k]) d3_transitionNode(subnode, k, ns, id, transition);
	            subgroup.push(subnode);
	          }
	        }
	      }
	    }
	    return d3_transition(subgroups, ns, id);
	  };
	  d3_transitionPrototype.filter = function(filter) {
	    var subgroups = [], subgroup, group, node;
	    if (typeof filter !== "function") filter = d3_selection_filter(filter);
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if ((node = group[i]) && filter.call(node, node.__data__, i, j)) {
	          subgroup.push(node);
	        }
	      }
	    }
	    return d3_transition(subgroups, this.namespace, this.id);
	  };
	  d3_transitionPrototype.tween = function(name, tween) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) return this.node()[ns][id].tween.get(name);
	    return d3_selection_each(this, tween == null ? function(node) {
	      node[ns][id].tween.remove(name);
	    } : function(node) {
	      node[ns][id].tween.set(name, tween);
	    });
	  };
	  function d3_transition_tween(groups, name, value, tween) {
	    var id = groups.id, ns = groups.namespace;
	    return d3_selection_each(groups, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].tween.set(name, tween(value.call(node, node.__data__, i, j)));
	    } : (value = tween(value), function(node) {
	      node[ns][id].tween.set(name, value);
	    }));
	  }
	  d3_transitionPrototype.attr = function(nameNS, value) {
	    if (arguments.length < 2) {
	      for (value in nameNS) this.attr(value, nameNS[value]);
	      return this;
	    }
	    var interpolate = nameNS == "transform" ? d3_interpolateTransform : d3_interpolate, name = d3.ns.qualify(nameNS);
	    function attrNull() {
	      this.removeAttribute(name);
	    }
	    function attrNullNS() {
	      this.removeAttributeNS(name.space, name.local);
	    }
	    function attrTween(b) {
	      return b == null ? attrNull : (b += "", function() {
	        var a = this.getAttribute(name), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttribute(name, i(t));
	        });
	      });
	    }
	    function attrTweenNS(b) {
	      return b == null ? attrNullNS : (b += "", function() {
	        var a = this.getAttributeNS(name.space, name.local), i;
	        return a !== b && (i = interpolate(a, b), function(t) {
	          this.setAttributeNS(name.space, name.local, i(t));
	        });
	      });
	    }
	    return d3_transition_tween(this, "attr." + nameNS, value, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.attrTween = function(nameNS, tween) {
	    var name = d3.ns.qualify(nameNS);
	    function attrTween(d, i) {
	      var f = tween.call(this, d, i, this.getAttribute(name));
	      return f && function(t) {
	        this.setAttribute(name, f(t));
	      };
	    }
	    function attrTweenNS(d, i) {
	      var f = tween.call(this, d, i, this.getAttributeNS(name.space, name.local));
	      return f && function(t) {
	        this.setAttributeNS(name.space, name.local, f(t));
	      };
	    }
	    return this.tween("attr." + nameNS, name.local ? attrTweenNS : attrTween);
	  };
	  d3_transitionPrototype.style = function(name, value, priority) {
	    var n = arguments.length;
	    if (n < 3) {
	      if (typeof name !== "string") {
	        if (n < 2) value = "";
	        for (priority in name) this.style(priority, name[priority], value);
	        return this;
	      }
	      priority = "";
	    }
	    function styleNull() {
	      this.style.removeProperty(name);
	    }
	    function styleString(b) {
	      return b == null ? styleNull : (b += "", function() {
	        var a = d3_window(this).getComputedStyle(this, null).getPropertyValue(name), i;
	        return a !== b && (i = d3_interpolate(a, b), function(t) {
	          this.style.setProperty(name, i(t), priority);
	        });
	      });
	    }
	    return d3_transition_tween(this, "style." + name, value, styleString);
	  };
	  d3_transitionPrototype.styleTween = function(name, tween, priority) {
	    if (arguments.length < 3) priority = "";
	    function styleTween(d, i) {
	      var f = tween.call(this, d, i, d3_window(this).getComputedStyle(this, null).getPropertyValue(name));
	      return f && function(t) {
	        this.style.setProperty(name, f(t), priority);
	      };
	    }
	    return this.tween("style." + name, styleTween);
	  };
	  d3_transitionPrototype.text = function(value) {
	    return d3_transition_tween(this, "text", value, d3_transition_text);
	  };
	  function d3_transition_text(b) {
	    if (b == null) b = "";
	    return function() {
	      this.textContent = b;
	    };
	  }
	  d3_transitionPrototype.remove = function() {
	    var ns = this.namespace;
	    return this.each("end.transition", function() {
	      var p;
	      if (this[ns].count < 2 && (p = this.parentNode)) p.removeChild(this);
	    });
	  };
	  d3_transitionPrototype.ease = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].ease;
	    if (typeof value !== "function") value = d3.ease.apply(d3, arguments);
	    return d3_selection_each(this, function(node) {
	      node[ns][id].ease = value;
	    });
	  };
	  d3_transitionPrototype.delay = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].delay;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].delay = +value.call(node, node.__data__, i, j);
	    } : (value = +value, function(node) {
	      node[ns][id].delay = value;
	    }));
	  };
	  d3_transitionPrototype.duration = function(value) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 1) return this.node()[ns][id].duration;
	    return d3_selection_each(this, typeof value === "function" ? function(node, i, j) {
	      node[ns][id].duration = Math.max(1, value.call(node, node.__data__, i, j));
	    } : (value = Math.max(1, value), function(node) {
	      node[ns][id].duration = value;
	    }));
	  };
	  d3_transitionPrototype.each = function(type, listener) {
	    var id = this.id, ns = this.namespace;
	    if (arguments.length < 2) {
	      var inherit = d3_transitionInherit, inheritId = d3_transitionInheritId;
	      try {
	        d3_transitionInheritId = id;
	        d3_selection_each(this, function(node, i, j) {
	          d3_transitionInherit = node[ns][id];
	          type.call(node, node.__data__, i, j);
	        });
	      } finally {
	        d3_transitionInherit = inherit;
	        d3_transitionInheritId = inheritId;
	      }
	    } else {
	      d3_selection_each(this, function(node) {
	        var transition = node[ns][id];
	        (transition.event || (transition.event = d3.dispatch("start", "end", "interrupt"))).on(type, listener);
	      });
	    }
	    return this;
	  };
	  d3_transitionPrototype.transition = function() {
	    var id0 = this.id, id1 = ++d3_transitionId, ns = this.namespace, subgroups = [], subgroup, group, node, transition;
	    for (var j = 0, m = this.length; j < m; j++) {
	      subgroups.push(subgroup = []);
	      for (var group = this[j], i = 0, n = group.length; i < n; i++) {
	        if (node = group[i]) {
	          transition = node[ns][id0];
	          d3_transitionNode(node, i, ns, id1, {
	            time: transition.time,
	            ease: transition.ease,
	            delay: transition.delay + transition.duration,
	            duration: transition.duration
	          });
	        }
	        subgroup.push(node);
	      }
	    }
	    return d3_transition(subgroups, ns, id1);
	  };
	  function d3_transitionNamespace(name) {
	    return name == null ? "__transition__" : "__transition_" + name + "__";
	  }
	  function d3_transitionNode(node, i, ns, id, inherit) {
	    var lock = node[ns] || (node[ns] = {
	      active: 0,
	      count: 0
	    }), transition = lock[id], time, timer, duration, ease, tweens;
	    function schedule(elapsed) {
	      var delay = transition.delay;
	      timer.t = delay + time;
	      if (delay <= elapsed) return start(elapsed - delay);
	      timer.c = start;
	    }
	    function start(elapsed) {
	      var activeId = lock.active, active = lock[activeId];
	      if (active) {
	        active.timer.c = null;
	        active.timer.t = NaN;
	        --lock.count;
	        delete lock[activeId];
	        active.event && active.event.interrupt.call(node, node.__data__, active.index);
	      }
	      for (var cancelId in lock) {
	        if (+cancelId < id) {
	          var cancel = lock[cancelId];
	          cancel.timer.c = null;
	          cancel.timer.t = NaN;
	          --lock.count;
	          delete lock[cancelId];
	        }
	      }
	      timer.c = tick;
	      d3_timer(function() {
	        if (timer.c && tick(elapsed || 1)) {
	          timer.c = null;
	          timer.t = NaN;
	        }
	        return 1;
	      }, 0, time);
	      lock.active = id;
	      transition.event && transition.event.start.call(node, node.__data__, i);
	      tweens = [];
	      transition.tween.forEach(function(key, value) {
	        if (value = value.call(node, node.__data__, i)) {
	          tweens.push(value);
	        }
	      });
	      ease = transition.ease;
	      duration = transition.duration;
	    }
	    function tick(elapsed) {
	      var t = elapsed / duration, e = ease(t), n = tweens.length;
	      while (n > 0) {
	        tweens[--n].call(node, e);
	      }
	      if (t >= 1) {
	        transition.event && transition.event.end.call(node, node.__data__, i);
	        if (--lock.count) delete lock[id]; else delete node[ns];
	        return 1;
	      }
	    }
	    if (!transition) {
	      time = inherit.time;
	      timer = d3_timer(schedule, 0, time);
	      transition = lock[id] = {
	        tween: new d3_Map(),
	        time: time,
	        timer: timer,
	        delay: inherit.delay,
	        duration: inherit.duration,
	        ease: inherit.ease,
	        index: i
	      };
	      inherit = null;
	      ++lock.count;
	    }
	  }
	  d3.svg.axis = function() {
	    var scale = d3.scale.linear(), orient = d3_svg_axisDefaultOrient, innerTickSize = 6, outerTickSize = 6, tickPadding = 3, tickArguments_ = [ 10 ], tickValues = null, tickFormat_;
	    function axis(g) {
	      g.each(function() {
	        var g = d3.select(this);
	        var scale0 = this.__chart__ || scale, scale1 = this.__chart__ = scale.copy();
	        var ticks = tickValues == null ? scale1.ticks ? scale1.ticks.apply(scale1, tickArguments_) : scale1.domain() : tickValues, tickFormat = tickFormat_ == null ? scale1.tickFormat ? scale1.tickFormat.apply(scale1, tickArguments_) : d3_identity : tickFormat_, tick = g.selectAll(".tick").data(ticks, scale1), tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", ε), tickExit = d3.transition(tick.exit()).style("opacity", ε).remove(), tickUpdate = d3.transition(tick.order()).style("opacity", 1), tickSpacing = Math.max(innerTickSize, 0) + tickPadding, tickTransform;
	        var range = d3_scaleRange(scale1), path = g.selectAll(".domain").data([ 0 ]), pathUpdate = (path.enter().append("path").attr("class", "domain"), 
	        d3.transition(path));
	        tickEnter.append("line");
	        tickEnter.append("text");
	        var lineEnter = tickEnter.select("line"), lineUpdate = tickUpdate.select("line"), text = tick.select("text").text(tickFormat), textEnter = tickEnter.select("text"), textUpdate = tickUpdate.select("text"), sign = orient === "top" || orient === "left" ? -1 : 1, x1, x2, y1, y2;
	        if (orient === "bottom" || orient === "top") {
	          tickTransform = d3_svg_axisX, x1 = "x", y1 = "y", x2 = "x2", y2 = "y2";
	          text.attr("dy", sign < 0 ? "0em" : ".71em").style("text-anchor", "middle");
	          pathUpdate.attr("d", "M" + range[0] + "," + sign * outerTickSize + "V0H" + range[1] + "V" + sign * outerTickSize);
	        } else {
	          tickTransform = d3_svg_axisY, x1 = "y", y1 = "x", x2 = "y2", y2 = "x2";
	          text.attr("dy", ".32em").style("text-anchor", sign < 0 ? "end" : "start");
	          pathUpdate.attr("d", "M" + sign * outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + sign * outerTickSize);
	        }
	        lineEnter.attr(y2, sign * innerTickSize);
	        textEnter.attr(y1, sign * tickSpacing);
	        lineUpdate.attr(x2, 0).attr(y2, sign * innerTickSize);
	        textUpdate.attr(x1, 0).attr(y1, sign * tickSpacing);
	        if (scale1.rangeBand) {
	          var x = scale1, dx = x.rangeBand() / 2;
	          scale0 = scale1 = function(d) {
	            return x(d) + dx;
	          };
	        } else if (scale0.rangeBand) {
	          scale0 = scale1;
	        } else {
	          tickExit.call(tickTransform, scale1, scale0);
	        }
	        tickEnter.call(tickTransform, scale0, scale1);
	        tickUpdate.call(tickTransform, scale1, scale1);
	      });
	    }
	    axis.scale = function(x) {
	      if (!arguments.length) return scale;
	      scale = x;
	      return axis;
	    };
	    axis.orient = function(x) {
	      if (!arguments.length) return orient;
	      orient = x in d3_svg_axisOrients ? x + "" : d3_svg_axisDefaultOrient;
	      return axis;
	    };
	    axis.ticks = function() {
	      if (!arguments.length) return tickArguments_;
	      tickArguments_ = d3_array(arguments);
	      return axis;
	    };
	    axis.tickValues = function(x) {
	      if (!arguments.length) return tickValues;
	      tickValues = x;
	      return axis;
	    };
	    axis.tickFormat = function(x) {
	      if (!arguments.length) return tickFormat_;
	      tickFormat_ = x;
	      return axis;
	    };
	    axis.tickSize = function(x) {
	      var n = arguments.length;
	      if (!n) return innerTickSize;
	      innerTickSize = +x;
	      outerTickSize = +arguments[n - 1];
	      return axis;
	    };
	    axis.innerTickSize = function(x) {
	      if (!arguments.length) return innerTickSize;
	      innerTickSize = +x;
	      return axis;
	    };
	    axis.outerTickSize = function(x) {
	      if (!arguments.length) return outerTickSize;
	      outerTickSize = +x;
	      return axis;
	    };
	    axis.tickPadding = function(x) {
	      if (!arguments.length) return tickPadding;
	      tickPadding = +x;
	      return axis;
	    };
	    axis.tickSubdivide = function() {
	      return arguments.length && axis;
	    };
	    return axis;
	  };
	  var d3_svg_axisDefaultOrient = "bottom", d3_svg_axisOrients = {
	    top: 1,
	    right: 1,
	    bottom: 1,
	    left: 1
	  };
	  function d3_svg_axisX(selection, x0, x1) {
	    selection.attr("transform", function(d) {
	      var v0 = x0(d);
	      return "translate(" + (isFinite(v0) ? v0 : x1(d)) + ",0)";
	    });
	  }
	  function d3_svg_axisY(selection, y0, y1) {
	    selection.attr("transform", function(d) {
	      var v0 = y0(d);
	      return "translate(0," + (isFinite(v0) ? v0 : y1(d)) + ")";
	    });
	  }
	  d3.svg.brush = function() {
	    var event = d3_eventDispatch(brush, "brushstart", "brush", "brushend"), x = null, y = null, xExtent = [ 0, 0 ], yExtent = [ 0, 0 ], xExtentDomain, yExtentDomain, xClamp = true, yClamp = true, resizes = d3_svg_brushResizes[0];
	    function brush(g) {
	      g.each(function() {
	        var g = d3.select(this).style("pointer-events", "all").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)").on("mousedown.brush", brushstart).on("touchstart.brush", brushstart);
	        var background = g.selectAll(".background").data([ 0 ]);
	        background.enter().append("rect").attr("class", "background").style("visibility", "hidden").style("cursor", "crosshair");
	        g.selectAll(".extent").data([ 0 ]).enter().append("rect").attr("class", "extent").style("cursor", "move");
	        var resize = g.selectAll(".resize").data(resizes, d3_identity);
	        resize.exit().remove();
	        resize.enter().append("g").attr("class", function(d) {
	          return "resize " + d;
	        }).style("cursor", function(d) {
	          return d3_svg_brushCursor[d];
	        }).append("rect").attr("x", function(d) {
	          return /[ew]$/.test(d) ? -3 : null;
	        }).attr("y", function(d) {
	          return /^[ns]/.test(d) ? -3 : null;
	        }).attr("width", 6).attr("height", 6).style("visibility", "hidden");
	        resize.style("display", brush.empty() ? "none" : null);
	        var gUpdate = d3.transition(g), backgroundUpdate = d3.transition(background), range;
	        if (x) {
	          range = d3_scaleRange(x);
	          backgroundUpdate.attr("x", range[0]).attr("width", range[1] - range[0]);
	          redrawX(gUpdate);
	        }
	        if (y) {
	          range = d3_scaleRange(y);
	          backgroundUpdate.attr("y", range[0]).attr("height", range[1] - range[0]);
	          redrawY(gUpdate);
	        }
	        redraw(gUpdate);
	      });
	    }
	    brush.event = function(g) {
	      g.each(function() {
	        var event_ = event.of(this, arguments), extent1 = {
	          x: xExtent,
	          y: yExtent,
	          i: xExtentDomain,
	          j: yExtentDomain
	        }, extent0 = this.__chart__ || extent1;
	        this.__chart__ = extent1;
	        if (d3_transitionInheritId) {
	          d3.select(this).transition().each("start.brush", function() {
	            xExtentDomain = extent0.i;
	            yExtentDomain = extent0.j;
	            xExtent = extent0.x;
	            yExtent = extent0.y;
	            event_({
	              type: "brushstart"
	            });
	          }).tween("brush:brush", function() {
	            var xi = d3_interpolateArray(xExtent, extent1.x), yi = d3_interpolateArray(yExtent, extent1.y);
	            xExtentDomain = yExtentDomain = null;
	            return function(t) {
	              xExtent = extent1.x = xi(t);
	              yExtent = extent1.y = yi(t);
	              event_({
	                type: "brush",
	                mode: "resize"
	              });
	            };
	          }).each("end.brush", function() {
	            xExtentDomain = extent1.i;
	            yExtentDomain = extent1.j;
	            event_({
	              type: "brush",
	              mode: "resize"
	            });
	            event_({
	              type: "brushend"
	            });
	          });
	        } else {
	          event_({
	            type: "brushstart"
	          });
	          event_({
	            type: "brush",
	            mode: "resize"
	          });
	          event_({
	            type: "brushend"
	          });
	        }
	      });
	    };
	    function redraw(g) {
	      g.selectAll(".resize").attr("transform", function(d) {
	        return "translate(" + xExtent[+/e$/.test(d)] + "," + yExtent[+/^s/.test(d)] + ")";
	      });
	    }
	    function redrawX(g) {
	      g.select(".extent").attr("x", xExtent[0]);
	      g.selectAll(".extent,.n>rect,.s>rect").attr("width", xExtent[1] - xExtent[0]);
	    }
	    function redrawY(g) {
	      g.select(".extent").attr("y", yExtent[0]);
	      g.selectAll(".extent,.e>rect,.w>rect").attr("height", yExtent[1] - yExtent[0]);
	    }
	    function brushstart() {
	      var target = this, eventTarget = d3.select(d3.event.target), event_ = event.of(target, arguments), g = d3.select(target), resizing = eventTarget.datum(), resizingX = !/^(n|s)$/.test(resizing) && x, resizingY = !/^(e|w)$/.test(resizing) && y, dragging = eventTarget.classed("extent"), dragRestore = d3_event_dragSuppress(target), center, origin = d3.mouse(target), offset;
	      var w = d3.select(d3_window(target)).on("keydown.brush", keydown).on("keyup.brush", keyup);
	      if (d3.event.changedTouches) {
	        w.on("touchmove.brush", brushmove).on("touchend.brush", brushend);
	      } else {
	        w.on("mousemove.brush", brushmove).on("mouseup.brush", brushend);
	      }
	      g.interrupt().selectAll("*").interrupt();
	      if (dragging) {
	        origin[0] = xExtent[0] - origin[0];
	        origin[1] = yExtent[0] - origin[1];
	      } else if (resizing) {
	        var ex = +/w$/.test(resizing), ey = +/^n/.test(resizing);
	        offset = [ xExtent[1 - ex] - origin[0], yExtent[1 - ey] - origin[1] ];
	        origin[0] = xExtent[ex];
	        origin[1] = yExtent[ey];
	      } else if (d3.event.altKey) center = origin.slice();
	      g.style("pointer-events", "none").selectAll(".resize").style("display", null);
	      d3.select("body").style("cursor", eventTarget.style("cursor"));
	      event_({
	        type: "brushstart"
	      });
	      brushmove();
	      function keydown() {
	        if (d3.event.keyCode == 32) {
	          if (!dragging) {
	            center = null;
	            origin[0] -= xExtent[1];
	            origin[1] -= yExtent[1];
	            dragging = 2;
	          }
	          d3_eventPreventDefault();
	        }
	      }
	      function keyup() {
	        if (d3.event.keyCode == 32 && dragging == 2) {
	          origin[0] += xExtent[1];
	          origin[1] += yExtent[1];
	          dragging = 0;
	          d3_eventPreventDefault();
	        }
	      }
	      function brushmove() {
	        var point = d3.mouse(target), moved = false;
	        if (offset) {
	          point[0] += offset[0];
	          point[1] += offset[1];
	        }
	        if (!dragging) {
	          if (d3.event.altKey) {
	            if (!center) center = [ (xExtent[0] + xExtent[1]) / 2, (yExtent[0] + yExtent[1]) / 2 ];
	            origin[0] = xExtent[+(point[0] < center[0])];
	            origin[1] = yExtent[+(point[1] < center[1])];
	          } else center = null;
	        }
	        if (resizingX && move1(point, x, 0)) {
	          redrawX(g);
	          moved = true;
	        }
	        if (resizingY && move1(point, y, 1)) {
	          redrawY(g);
	          moved = true;
	        }
	        if (moved) {
	          redraw(g);
	          event_({
	            type: "brush",
	            mode: dragging ? "move" : "resize"
	          });
	        }
	      }
	      function move1(point, scale, i) {
	        var range = d3_scaleRange(scale), r0 = range[0], r1 = range[1], position = origin[i], extent = i ? yExtent : xExtent, size = extent[1] - extent[0], min, max;
	        if (dragging) {
	          r0 -= position;
	          r1 -= size + position;
	        }
	        min = (i ? yClamp : xClamp) ? Math.max(r0, Math.min(r1, point[i])) : point[i];
	        if (dragging) {
	          max = (min += position) + size;
	        } else {
	          if (center) position = Math.max(r0, Math.min(r1, 2 * center[i] - min));
	          if (position < min) {
	            max = min;
	            min = position;
	          } else {
	            max = position;
	          }
	        }
	        if (extent[0] != min || extent[1] != max) {
	          if (i) yExtentDomain = null; else xExtentDomain = null;
	          extent[0] = min;
	          extent[1] = max;
	          return true;
	        }
	      }
	      function brushend() {
	        brushmove();
	        g.style("pointer-events", "all").selectAll(".resize").style("display", brush.empty() ? "none" : null);
	        d3.select("body").style("cursor", null);
	        w.on("mousemove.brush", null).on("mouseup.brush", null).on("touchmove.brush", null).on("touchend.brush", null).on("keydown.brush", null).on("keyup.brush", null);
	        dragRestore();
	        event_({
	          type: "brushend"
	        });
	      }
	    }
	    brush.x = function(z) {
	      if (!arguments.length) return x;
	      x = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.y = function(z) {
	      if (!arguments.length) return y;
	      y = z;
	      resizes = d3_svg_brushResizes[!x << 1 | !y];
	      return brush;
	    };
	    brush.clamp = function(z) {
	      if (!arguments.length) return x && y ? [ xClamp, yClamp ] : x ? xClamp : y ? yClamp : null;
	      if (x && y) xClamp = !!z[0], yClamp = !!z[1]; else if (x) xClamp = !!z; else if (y) yClamp = !!z;
	      return brush;
	    };
	    brush.extent = function(z) {
	      var x0, x1, y0, y1, t;
	      if (!arguments.length) {
	        if (x) {
	          if (xExtentDomain) {
	            x0 = xExtentDomain[0], x1 = xExtentDomain[1];
	          } else {
	            x0 = xExtent[0], x1 = xExtent[1];
	            if (x.invert) x0 = x.invert(x0), x1 = x.invert(x1);
	            if (x1 < x0) t = x0, x0 = x1, x1 = t;
	          }
	        }
	        if (y) {
	          if (yExtentDomain) {
	            y0 = yExtentDomain[0], y1 = yExtentDomain[1];
	          } else {
	            y0 = yExtent[0], y1 = yExtent[1];
	            if (y.invert) y0 = y.invert(y0), y1 = y.invert(y1);
	            if (y1 < y0) t = y0, y0 = y1, y1 = t;
	          }
	        }
	        return x && y ? [ [ x0, y0 ], [ x1, y1 ] ] : x ? [ x0, x1 ] : y && [ y0, y1 ];
	      }
	      if (x) {
	        x0 = z[0], x1 = z[1];
	        if (y) x0 = x0[0], x1 = x1[0];
	        xExtentDomain = [ x0, x1 ];
	        if (x.invert) x0 = x(x0), x1 = x(x1);
	        if (x1 < x0) t = x0, x0 = x1, x1 = t;
	        if (x0 != xExtent[0] || x1 != xExtent[1]) xExtent = [ x0, x1 ];
	      }
	      if (y) {
	        y0 = z[0], y1 = z[1];
	        if (x) y0 = y0[1], y1 = y1[1];
	        yExtentDomain = [ y0, y1 ];
	        if (y.invert) y0 = y(y0), y1 = y(y1);
	        if (y1 < y0) t = y0, y0 = y1, y1 = t;
	        if (y0 != yExtent[0] || y1 != yExtent[1]) yExtent = [ y0, y1 ];
	      }
	      return brush;
	    };
	    brush.clear = function() {
	      if (!brush.empty()) {
	        xExtent = [ 0, 0 ], yExtent = [ 0, 0 ];
	        xExtentDomain = yExtentDomain = null;
	      }
	      return brush;
	    };
	    brush.empty = function() {
	      return !!x && xExtent[0] == xExtent[1] || !!y && yExtent[0] == yExtent[1];
	    };
	    return d3.rebind(brush, event, "on");
	  };
	  var d3_svg_brushCursor = {
	    n: "ns-resize",
	    e: "ew-resize",
	    s: "ns-resize",
	    w: "ew-resize",
	    nw: "nwse-resize",
	    ne: "nesw-resize",
	    se: "nwse-resize",
	    sw: "nesw-resize"
	  };
	  var d3_svg_brushResizes = [ [ "n", "e", "s", "w", "nw", "ne", "se", "sw" ], [ "e", "w" ], [ "n", "s" ], [] ];
	  var d3_time_format = d3_time.format = d3_locale_enUS.timeFormat;
	  var d3_time_formatUtc = d3_time_format.utc;
	  var d3_time_formatIso = d3_time_formatUtc("%Y-%m-%dT%H:%M:%S.%LZ");
	  d3_time_format.iso = Date.prototype.toISOString && +new Date("2000-01-01T00:00:00.000Z") ? d3_time_formatIsoNative : d3_time_formatIso;
	  function d3_time_formatIsoNative(date) {
	    return date.toISOString();
	  }
	  d3_time_formatIsoNative.parse = function(string) {
	    var date = new Date(string);
	    return isNaN(date) ? null : date;
	  };
	  d3_time_formatIsoNative.toString = d3_time_formatIso.toString;
	  d3_time.second = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 1e3) * 1e3);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 1e3);
	  }, function(date) {
	    return date.getSeconds();
	  });
	  d3_time.seconds = d3_time.second.range;
	  d3_time.seconds.utc = d3_time.second.utc.range;
	  d3_time.minute = d3_time_interval(function(date) {
	    return new d3_date(Math.floor(date / 6e4) * 6e4);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 6e4);
	  }, function(date) {
	    return date.getMinutes();
	  });
	  d3_time.minutes = d3_time.minute.range;
	  d3_time.minutes.utc = d3_time.minute.utc.range;
	  d3_time.hour = d3_time_interval(function(date) {
	    var timezone = date.getTimezoneOffset() / 60;
	    return new d3_date((Math.floor(date / 36e5 - timezone) + timezone) * 36e5);
	  }, function(date, offset) {
	    date.setTime(date.getTime() + Math.floor(offset) * 36e5);
	  }, function(date) {
	    return date.getHours();
	  });
	  d3_time.hours = d3_time.hour.range;
	  d3_time.hours.utc = d3_time.hour.utc.range;
	  d3_time.month = d3_time_interval(function(date) {
	    date = d3_time.day(date);
	    date.setDate(1);
	    return date;
	  }, function(date, offset) {
	    date.setMonth(date.getMonth() + offset);
	  }, function(date) {
	    return date.getMonth();
	  });
	  d3_time.months = d3_time.month.range;
	  d3_time.months.utc = d3_time.month.utc.range;
	  function d3_time_scale(linear, methods, format) {
	    function scale(x) {
	      return linear(x);
	    }
	    scale.invert = function(x) {
	      return d3_time_scaleDate(linear.invert(x));
	    };
	    scale.domain = function(x) {
	      if (!arguments.length) return linear.domain().map(d3_time_scaleDate);
	      linear.domain(x);
	      return scale;
	    };
	    function tickMethod(extent, count) {
	      var span = extent[1] - extent[0], target = span / count, i = d3.bisect(d3_time_scaleSteps, target);
	      return i == d3_time_scaleSteps.length ? [ methods.year, d3_scale_linearTickRange(extent.map(function(d) {
	        return d / 31536e6;
	      }), count)[2] ] : !i ? [ d3_time_scaleMilliseconds, d3_scale_linearTickRange(extent, count)[2] ] : methods[target / d3_time_scaleSteps[i - 1] < d3_time_scaleSteps[i] / target ? i - 1 : i];
	    }
	    scale.nice = function(interval, skip) {
	      var domain = scale.domain(), extent = d3_scaleExtent(domain), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" && tickMethod(extent, interval);
	      if (method) interval = method[0], skip = method[1];
	      function skipped(date) {
	        return !isNaN(date) && !interval.range(date, d3_time_scaleDate(+date + 1), skip).length;
	      }
	      return scale.domain(d3_scale_nice(domain, skip > 1 ? {
	        floor: function(date) {
	          while (skipped(date = interval.floor(date))) date = d3_time_scaleDate(date - 1);
	          return date;
	        },
	        ceil: function(date) {
	          while (skipped(date = interval.ceil(date))) date = d3_time_scaleDate(+date + 1);
	          return date;
	        }
	      } : interval));
	    };
	    scale.ticks = function(interval, skip) {
	      var extent = d3_scaleExtent(scale.domain()), method = interval == null ? tickMethod(extent, 10) : typeof interval === "number" ? tickMethod(extent, interval) : !interval.range && [ {
	        range: interval
	      }, skip ];
	      if (method) interval = method[0], skip = method[1];
	      return interval.range(extent[0], d3_time_scaleDate(+extent[1] + 1), skip < 1 ? 1 : skip);
	    };
	    scale.tickFormat = function() {
	      return format;
	    };
	    scale.copy = function() {
	      return d3_time_scale(linear.copy(), methods, format);
	    };
	    return d3_scale_linearRebind(scale, linear);
	  }
	  function d3_time_scaleDate(t) {
	    return new Date(t);
	  }
	  var d3_time_scaleSteps = [ 1e3, 5e3, 15e3, 3e4, 6e4, 3e5, 9e5, 18e5, 36e5, 108e5, 216e5, 432e5, 864e5, 1728e5, 6048e5, 2592e6, 7776e6, 31536e6 ];
	  var d3_time_scaleLocalMethods = [ [ d3_time.second, 1 ], [ d3_time.second, 5 ], [ d3_time.second, 15 ], [ d3_time.second, 30 ], [ d3_time.minute, 1 ], [ d3_time.minute, 5 ], [ d3_time.minute, 15 ], [ d3_time.minute, 30 ], [ d3_time.hour, 1 ], [ d3_time.hour, 3 ], [ d3_time.hour, 6 ], [ d3_time.hour, 12 ], [ d3_time.day, 1 ], [ d3_time.day, 2 ], [ d3_time.week, 1 ], [ d3_time.month, 1 ], [ d3_time.month, 3 ], [ d3_time.year, 1 ] ];
	  var d3_time_scaleLocalFormat = d3_time_format.multi([ [ ".%L", function(d) {
	    return d.getMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getHours();
	  } ], [ "%a %d", function(d) {
	    return d.getDay() && d.getDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getMonth();
	  } ], [ "%Y", d3_true ] ]);
	  var d3_time_scaleMilliseconds = {
	    range: function(start, stop, step) {
	      return d3.range(Math.ceil(start / step) * step, +stop, step).map(d3_time_scaleDate);
	    },
	    floor: d3_identity,
	    ceil: d3_identity
	  };
	  d3_time_scaleLocalMethods.year = d3_time.year;
	  d3_time.scale = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleLocalMethods, d3_time_scaleLocalFormat);
	  };
	  var d3_time_scaleUtcMethods = d3_time_scaleLocalMethods.map(function(m) {
	    return [ m[0].utc, m[1] ];
	  });
	  var d3_time_scaleUtcFormat = d3_time_formatUtc.multi([ [ ".%L", function(d) {
	    return d.getUTCMilliseconds();
	  } ], [ ":%S", function(d) {
	    return d.getUTCSeconds();
	  } ], [ "%I:%M", function(d) {
	    return d.getUTCMinutes();
	  } ], [ "%I %p", function(d) {
	    return d.getUTCHours();
	  } ], [ "%a %d", function(d) {
	    return d.getUTCDay() && d.getUTCDate() != 1;
	  } ], [ "%b %d", function(d) {
	    return d.getUTCDate() != 1;
	  } ], [ "%B", function(d) {
	    return d.getUTCMonth();
	  } ], [ "%Y", d3_true ] ]);
	  d3_time_scaleUtcMethods.year = d3_time.year.utc;
	  d3_time.scale.utc = function() {
	    return d3_time_scale(d3.scale.linear(), d3_time_scaleUtcMethods, d3_time_scaleUtcFormat);
	  };
	  d3.text = d3_xhrType(function(request) {
	    return request.responseText;
	  });
	  d3.json = function(url, callback) {
	    return d3_xhr(url, "application/json", d3_json, callback);
	  };
	  function d3_json(request) {
	    return JSON.parse(request.responseText);
	  }
	  d3.html = function(url, callback) {
	    return d3_xhr(url, "text/html", d3_html, callback);
	  };
	  function d3_html(request) {
	    var range = d3_document.createRange();
	    range.selectNode(d3_document.body);
	    return range.createContextualFragment(request.responseText);
	  }
	  d3.xml = d3_xhrType(function(request) {
	    return request.responseXML;
	  });
	  if (true) this.d3 = d3, !(__WEBPACK_AMD_DEFINE_FACTORY__ = (d3), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)); else if (typeof module === "object" && module.exports) module.exports = d3; else this.d3 = d3;
	}();

/***/ },
/* 239 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _three = __webpack_require__(240);
	
	var _three2 = _interopRequireDefault(_three);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    bind: function bind() {
	        this.renderer = null;
	        this.camera = null;
	        this.scene = null;
	        this.height = 0;
	        this.width = 0;
	        this.videoLength = 0;
	        var self = this;
	
	        this.initData = function (data) {
	
	            var toUse = {
	                forward: [],
	                backward: []
	            };
	            var toUseTemp = data;
	            for (var i = 0; i < toUseTemp.length; i++) {
	                var temp = toUseTemp[i];
	                if (temp.currentTime > temp.prevTime) {
	                    toUse.forward.push(temp);
	                } else {
	                    toUse.backward.push(temp);
	                }
	            }
	            return toUse;
	        };
	
	        this.drawAll = function (data) {
	            var toUse = self.initData(data);
	            self.clearCanvas("line");
	
	            for (var key in toUse) {
	                if (toUse.hasOwnProperty(key)) {
	                    if (toUse[key].length > 0) {
	                        self.drawLine(toUse[key]);
	                    }
	                }
	            }
	        };
	
	        this.clearCanvas = function (name) {
	            var count = self.scene.children.length;
	            for (var i = count - 1; i >= 0; i--) {
	                if (self.scene.children[i].name === name) self.scene.remove(self.scene.children[i]);
	            }
	            self.renderer.clear();
	        };
	
	        this.drawLine = function (dataToDraw) {
	
	            var lines = new _three2.default.Geometry();
	            for (var i = 0; i < dataToDraw.length; i++) {
	                var temp = dataToDraw[i];
	                var x1 = temp.prevTime / self.videoLength * self.width - self.width / 2;
	                var x2 = temp.currentTime / self.videoLength * self.width - self.width / 2;
	                var y1 = temp.prevTime > temp.currentTime ? 0 : self.height / 2;
	                var y2 = temp.prevTime > temp.currentTime ? -self.height / 2 : 0;
	                lines.vertices.push(new _three2.default.Vector3(x1, y1, 0));
	                lines.vertices.push(new _three2.default.Vector3(x2, y2, 0));
	            }
	
	            var line = new _three2.default.Line(lines, self.defineMaterial(dataToDraw[0]), _three2.default.LinePieces);
	            line.name = "line";
	            self.scene.add(line);
	            self.renderer.render(self.scene, self.camera);
	        };
	
	        this.defineMaterial = function (seek) {
	            var material;
	            if (seek.currentTime - seek.prevTime > 0) {
	                material = new _three2.default.LineBasicMaterial({
	                    color: 0xff7800,
	                    linewidth: 0.6,
	                    opacity: 0.1
	                });
	                material.transparent = true;
	            } else {
	
	                material = new _three2.default.LineBasicMaterial({
	                    color: 0x133cac,
	                    linewidth: 1,
	                    opacity: 0.1
	                });
	                material.transparent = true;
	            }
	            return material;
	        };
	    },
	    update: function update(newVal, oldVal) {
	        if (!newVal) return;
	        if (this.height === 0) {
	            this.height = this.el.offsetHeight;
	            this.width = this.el.offsetWidth;
	            this.renderer = new _three2.default.WebGLRenderer({ canvas: this.el, alpha: true, antialias: true });
	            this.renderer.setSize(this.width, this.height);
	            this.renderer.autoClear = true;
	            this.camera = new _three2.default.OrthographicCamera(this.width / -2, this.width / 2, this.height / 2, this.height / -2, 1, 1000);
	            this.camera.position.z = 10;
	            this.camera.lookAt(new _three2.default.Vector3(-0, -0, 0));
	            this.scene = new _three2.default.Scene();
	            this.clearCanvas();
	        }
	        var maxLength = 0;
	        newVal.forEach(function (d) {
	            if (d.prevTime > maxLength) maxLength = d.prevTime;
	        });
	        this.videoLength = maxLength;
	        // refresh: freshData,
	        this.drawAll(newVal);
	    }
	};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var self = self || {};// File:src/Three.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	var THREE = { REVISION: '73' };
	
	//
	
	if ( true ) {
	
			!(__WEBPACK_AMD_DEFINE_FACTORY__ = (THREE), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	} else if ( 'undefined' !== typeof exports && 'undefined' !== typeof module ) {
	
			module.exports = THREE;
	
	}
	
	
	// polyfills
	
	if ( self.requestAnimationFrame === undefined || self.cancelAnimationFrame === undefined ) {
	
		// Missing in Android stock browser.
	
		( function () {
	
			var lastTime = 0;
			var vendors = [ 'ms', 'moz', 'webkit', 'o' ];
	
			for ( var x = 0; x < vendors.length && ! self.requestAnimationFrame; ++ x ) {
	
				self.requestAnimationFrame = self[ vendors[ x ] + 'RequestAnimationFrame' ];
				self.cancelAnimationFrame = self[ vendors[ x ] + 'CancelAnimationFrame' ] || self[ vendors[ x ] + 'CancelRequestAnimationFrame' ];
	
			}
	
			if ( self.requestAnimationFrame === undefined && self.setTimeout !== undefined ) {
	
				self.requestAnimationFrame = function ( callback ) {
	
					var currTime = Date.now(), timeToCall = Math.max( 0, 16 - ( currTime - lastTime ) );
					var id = self.setTimeout( function () {
	
						callback( currTime + timeToCall );
	
					}, timeToCall );
					lastTime = currTime + timeToCall;
					return id;
	
				};
	
			}
	
			if ( self.cancelAnimationFrame === undefined && self.clearTimeout !== undefined ) {
	
				self.cancelAnimationFrame = function ( id ) {
	
					self.clearTimeout( id );
	
				};
	
			}
	
		} )();
	
	}
	
	//
	
	if ( self.performance === undefined ) {
	
		self.performance = {};
	
	}
	
	if ( self.performance.now === undefined ) {
	
		( function () {
	
			var start = Date.now();
	
			self.performance.now = function () {
	
				return Date.now() - start;
	
			}
	
		} )();
	
	}
	
	//
	
	if ( Number.EPSILON === undefined ) {
	
		Number.EPSILON = Math.pow( 2, -52 );
	
	}
	
	//
	
	if ( Math.sign === undefined ) {
	
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/sign
	
		Math.sign = function ( x ) {
	
			return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : + x;
	
		};
	
	}
	
	if ( Function.prototype.name === undefined && Object.defineProperty !== undefined ) {
	
		// Missing in IE9-11.
		// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name
	
		Object.defineProperty( Function.prototype, 'name', {
	
			get: function () {
	
				return this.toString().match( /^\s*function\s*(\S*)\s*\(/ )[ 1 ];
	
			}
	
		} );
	
	}
	
	// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button
	
	THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };
	
	// GL STATE CONSTANTS
	
	THREE.CullFaceNone = 0;
	THREE.CullFaceBack = 1;
	THREE.CullFaceFront = 2;
	THREE.CullFaceFrontBack = 3;
	
	THREE.FrontFaceDirectionCW = 0;
	THREE.FrontFaceDirectionCCW = 1;
	
	// SHADOWING TYPES
	
	THREE.BasicShadowMap = 0;
	THREE.PCFShadowMap = 1;
	THREE.PCFSoftShadowMap = 2;
	
	// MATERIAL CONSTANTS
	
	// side
	
	THREE.FrontSide = 0;
	THREE.BackSide = 1;
	THREE.DoubleSide = 2;
	
	// shading
	
	THREE.FlatShading = 1;
	THREE.SmoothShading = 2;
	
	// colors
	
	THREE.NoColors = 0;
	THREE.FaceColors = 1;
	THREE.VertexColors = 2;
	
	// blending modes
	
	THREE.NoBlending = 0;
	THREE.NormalBlending = 1;
	THREE.AdditiveBlending = 2;
	THREE.SubtractiveBlending = 3;
	THREE.MultiplyBlending = 4;
	THREE.CustomBlending = 5;
	
	// custom blending equations
	// (numbers start from 100 not to clash with other
	// mappings to OpenGL constants defined in Texture.js)
	
	THREE.AddEquation = 100;
	THREE.SubtractEquation = 101;
	THREE.ReverseSubtractEquation = 102;
	THREE.MinEquation = 103;
	THREE.MaxEquation = 104;
	
	// custom blending destination factors
	
	THREE.ZeroFactor = 200;
	THREE.OneFactor = 201;
	THREE.SrcColorFactor = 202;
	THREE.OneMinusSrcColorFactor = 203;
	THREE.SrcAlphaFactor = 204;
	THREE.OneMinusSrcAlphaFactor = 205;
	THREE.DstAlphaFactor = 206;
	THREE.OneMinusDstAlphaFactor = 207;
	
	// custom blending source factors
	
	//THREE.ZeroFactor = 200;
	//THREE.OneFactor = 201;
	//THREE.SrcAlphaFactor = 204;
	//THREE.OneMinusSrcAlphaFactor = 205;
	//THREE.DstAlphaFactor = 206;
	//THREE.OneMinusDstAlphaFactor = 207;
	THREE.DstColorFactor = 208;
	THREE.OneMinusDstColorFactor = 209;
	THREE.SrcAlphaSaturateFactor = 210;
	
	// depth modes
	
	THREE.NeverDepth = 0;
	THREE.AlwaysDepth = 1;
	THREE.LessDepth = 2;
	THREE.LessEqualDepth = 3;
	THREE.EqualDepth = 4;
	THREE.GreaterEqualDepth = 5;
	THREE.GreaterDepth = 6;
	THREE.NotEqualDepth = 7;
	
	
	// TEXTURE CONSTANTS
	
	THREE.MultiplyOperation = 0;
	THREE.MixOperation = 1;
	THREE.AddOperation = 2;
	
	// Mapping modes
	
	THREE.UVMapping = 300;
	
	THREE.CubeReflectionMapping = 301;
	THREE.CubeRefractionMapping = 302;
	
	THREE.EquirectangularReflectionMapping = 303;
	THREE.EquirectangularRefractionMapping = 304;
	
	THREE.SphericalReflectionMapping = 305;
	
	// Wrapping modes
	
	THREE.RepeatWrapping = 1000;
	THREE.ClampToEdgeWrapping = 1001;
	THREE.MirroredRepeatWrapping = 1002;
	
	// Filters
	
	THREE.NearestFilter = 1003;
	THREE.NearestMipMapNearestFilter = 1004;
	THREE.NearestMipMapLinearFilter = 1005;
	THREE.LinearFilter = 1006;
	THREE.LinearMipMapNearestFilter = 1007;
	THREE.LinearMipMapLinearFilter = 1008;
	
	// Data types
	
	THREE.UnsignedByteType = 1009;
	THREE.ByteType = 1010;
	THREE.ShortType = 1011;
	THREE.UnsignedShortType = 1012;
	THREE.IntType = 1013;
	THREE.UnsignedIntType = 1014;
	THREE.FloatType = 1015;
	THREE.HalfFloatType = 1025;
	
	// Pixel types
	
	//THREE.UnsignedByteType = 1009;
	THREE.UnsignedShort4444Type = 1016;
	THREE.UnsignedShort5551Type = 1017;
	THREE.UnsignedShort565Type = 1018;
	
	// Pixel formats
	
	THREE.AlphaFormat = 1019;
	THREE.RGBFormat = 1020;
	THREE.RGBAFormat = 1021;
	THREE.LuminanceFormat = 1022;
	THREE.LuminanceAlphaFormat = 1023;
	// THREE.RGBEFormat handled as THREE.RGBAFormat in shaders
	THREE.RGBEFormat = THREE.RGBAFormat; //1024;
	
	// DDS / ST3C Compressed texture formats
	
	THREE.RGB_S3TC_DXT1_Format = 2001;
	THREE.RGBA_S3TC_DXT1_Format = 2002;
	THREE.RGBA_S3TC_DXT3_Format = 2003;
	THREE.RGBA_S3TC_DXT5_Format = 2004;
	
	
	// PVRTC compressed texture formats
	
	THREE.RGB_PVRTC_4BPPV1_Format = 2100;
	THREE.RGB_PVRTC_2BPPV1_Format = 2101;
	THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
	THREE.RGBA_PVRTC_2BPPV1_Format = 2103;
	
	// Loop styles for AnimationAction
	
	THREE.LoopOnce = 2200;
	THREE.LoopRepeat = 2201;
	THREE.LoopPingPong = 2202;
	
	// DEPRECATED
	
	THREE.Projector = function () {
	
		console.error( 'THREE.Projector has been moved to /examples/js/renderers/Projector.js.' );
	
		this.projectVector = function ( vector, camera ) {
	
			console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
			vector.project( camera );
	
		};
	
		this.unprojectVector = function ( vector, camera ) {
	
			console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
			vector.unproject( camera );
	
		};
	
		this.pickingRay = function ( vector, camera ) {
	
			console.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );
	
		};
	
	};
	
	THREE.CanvasRenderer = function () {
	
		console.error( 'THREE.CanvasRenderer has been moved to /examples/js/renderers/CanvasRenderer.js' );
	
		this.domElement = document.createElement( 'canvas' );
		this.clear = function () {};
		this.render = function () {};
		this.setClearColor = function () {};
		this.setSize = function () {};
	
	};
	
	// File:src/math/Color.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Color = function ( color ) {
	
		if ( arguments.length === 3 ) {
	
			return this.fromArray( arguments );
	
		}
	
		return this.set( color );
	
	};
	
	THREE.Color.prototype = {
	
		constructor: THREE.Color,
	
		r: 1, g: 1, b: 1,
	
		set: function ( value ) {
	
			if ( value instanceof THREE.Color ) {
	
				this.copy( value );
	
			} else if ( typeof value === 'number' ) {
	
				this.setHex( value );
	
			} else if ( typeof value === 'string' ) {
	
				this.setStyle( value );
	
			}
	
			return this;
	
		},
	
		setHex: function ( hex ) {
	
			hex = Math.floor( hex );
	
			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;
	
			return this;
	
		},
	
		setRGB: function ( r, g, b ) {
	
			this.r = r;
			this.g = g;
			this.b = b;
	
			return this;
	
		},
	
		setHSL: function () {
	
			function hue2rgb( p, q, t ) {
	
				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;
	
			}
	
			return function ( h, s, l ) {
	
				// h,s,l ranges are in 0.0 - 1.0
				h = THREE.Math.euclideanModulo( h, 1 );
				s = THREE.Math.clamp( s, 0, 1 );
				l = THREE.Math.clamp( l, 0, 1 );
	
				if ( s === 0 ) {
	
					this.r = this.g = this.b = l;
	
				} else {
	
					var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
					var q = ( 2 * l ) - p;
	
					this.r = hue2rgb( q, p, h + 1 / 3 );
					this.g = hue2rgb( q, p, h );
					this.b = hue2rgb( q, p, h - 1 / 3 );
	
				}
	
				return this;
	
			};
	
		}(),
	
		setStyle: function ( style ) {
	
			function handleAlpha( string ) {
	
				if ( string === undefined ) return;
	
				if ( parseFloat( string ) < 1 ) {
	
					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );
	
				}
	
			}
	
	
			var m;
	
			if ( m = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec( style ) ) {
	
				// rgb / hsl
	
				var color;
				var name = m[ 1 ];
				var components = m[ 2 ];
	
				switch ( name ) {
	
					case 'rgb':
					case 'rgba':
	
						if ( color = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
							// rgb(255,0,0) rgba(255,0,0,0.5)
							this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
							this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
							this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;
	
							handleAlpha( color[ 5 ] );
	
							return this;
	
						}
	
						if ( color = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)
							this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
							this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
							this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;
	
							handleAlpha( color[ 5 ] );
	
							return this;
	
						}
	
						break;
	
					case 'hsl':
					case 'hsla':
	
						if ( color = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec( components ) ) {
	
							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)
							var h = parseFloat( color[ 1 ] ) / 360;
							var s = parseInt( color[ 2 ], 10 ) / 100;
							var l = parseInt( color[ 3 ], 10 ) / 100;
	
							handleAlpha( color[ 5 ] );
	
							return this.setHSL( h, s, l );
	
						}
	
						break;
	
				}
	
			} else if ( m = /^\#([A-Fa-f0-9]+)$/.exec( style ) ) {
	
				// hex color
	
				var hex = m[ 1 ];
				var size = hex.length;
	
				if ( size === 3 ) {
	
					// #ff0
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 0 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 1 ) + hex.charAt( 1 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 2 ) + hex.charAt( 2 ), 16 ) / 255;
	
					return this;
	
				} else if ( size === 6 ) {
	
					// #ff0000
					this.r = parseInt( hex.charAt( 0 ) + hex.charAt( 1 ), 16 ) / 255;
					this.g = parseInt( hex.charAt( 2 ) + hex.charAt( 3 ), 16 ) / 255;
					this.b = parseInt( hex.charAt( 4 ) + hex.charAt( 5 ), 16 ) / 255;
	
					return this;
	
				}
	
			}
	
			if ( style && style.length > 0 ) {
	
				// color keywords
				var hex = THREE.ColorKeywords[ style ];
	
				if ( hex !== undefined ) {
	
					// red
					this.setHex( hex );
	
				} else {
	
					// unknown color
					console.warn( 'THREE.Color: Unknown color ' + style );
	
				}
	
			}
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor( this.r, this.g, this.b );
	
		},
	
		copy: function ( color ) {
	
			this.r = color.r;
			this.g = color.g;
			this.b = color.b;
	
			return this;
	
		},
	
		copyGammaToLinear: function ( color, gammaFactor ) {
	
			if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
			this.r = Math.pow( color.r, gammaFactor );
			this.g = Math.pow( color.g, gammaFactor );
			this.b = Math.pow( color.b, gammaFactor );
	
			return this;
	
		},
	
		copyLinearToGamma: function ( color, gammaFactor ) {
	
			if ( gammaFactor === undefined ) gammaFactor = 2.0;
	
			var safeInverse = ( gammaFactor > 0 ) ? ( 1.0 / gammaFactor ) : 1.0;
	
			this.r = Math.pow( color.r, safeInverse );
			this.g = Math.pow( color.g, safeInverse );
			this.b = Math.pow( color.b, safeInverse );
	
			return this;
	
		},
	
		convertGammaToLinear: function () {
	
			var r = this.r, g = this.g, b = this.b;
	
			this.r = r * r;
			this.g = g * g;
			this.b = b * b;
	
			return this;
	
		},
	
		convertLinearToGamma: function () {
	
			this.r = Math.sqrt( this.r );
			this.g = Math.sqrt( this.g );
			this.b = Math.sqrt( this.b );
	
			return this;
	
		},
	
		getHex: function () {
	
			return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;
	
		},
	
		getHexString: function () {
	
			return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );
	
		},
	
		getHSL: function ( optionalTarget ) {
	
			// h,s,l ranges are in 0.0 - 1.0
	
			var hsl = optionalTarget || { h: 0, s: 0, l: 0 };
	
			var r = this.r, g = this.g, b = this.b;
	
			var max = Math.max( r, g, b );
			var min = Math.min( r, g, b );
	
			var hue, saturation;
			var lightness = ( min + max ) / 2.0;
	
			if ( min === max ) {
	
				hue = 0;
				saturation = 0;
	
			} else {
	
				var delta = max - min;
	
				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );
	
				switch ( max ) {
	
					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;
	
				}
	
				hue /= 6;
	
			}
	
			hsl.h = hue;
			hsl.s = saturation;
			hsl.l = lightness;
	
			return hsl;
	
		},
	
		getStyle: function () {
	
			return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';
	
		},
	
		offsetHSL: function ( h, s, l ) {
	
			var hsl = this.getHSL();
	
			hsl.h += h; hsl.s += s; hsl.l += l;
	
			this.setHSL( hsl.h, hsl.s, hsl.l );
	
			return this;
	
		},
	
		add: function ( color ) {
	
			this.r += color.r;
			this.g += color.g;
			this.b += color.b;
	
			return this;
	
		},
	
		addColors: function ( color1, color2 ) {
	
			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;
	
			return this;
	
		},
	
		addScalar: function ( s ) {
	
			this.r += s;
			this.g += s;
			this.b += s;
	
			return this;
	
		},
	
		multiply: function ( color ) {
	
			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;
	
			return this;
	
		},
	
		multiplyScalar: function ( s ) {
	
			this.r *= s;
			this.g *= s;
			this.b *= s;
	
			return this;
	
		},
	
		lerp: function ( color, alpha ) {
	
			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;
	
			return this;
	
		},
	
		equals: function ( c ) {
	
			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );
	
		},
	
		fromArray: function ( array, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;
	
			return array;
	
		}
	
	};
	
	THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
	'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
	'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
	'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
	'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
	'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
	'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
	'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
	'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
	'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
	'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
	'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
	'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
	'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
	'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
	'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
	'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
	'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
	'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
	'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
	'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
	'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
	'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
	'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };
	
	// File:src/math/Quaternion.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Quaternion = function ( x, y, z, w ) {
	
		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._w = ( w !== undefined ) ? w : 1;
	
	};
	
	THREE.Quaternion.prototype = {
	
		constructor: THREE.Quaternion,
	
		get x () {
	
			return this._x;
	
		},
	
		set x ( value ) {
	
			this._x = value;
			this.onChangeCallback();
	
		},
	
		get y () {
	
			return this._y;
	
		},
	
		set y ( value ) {
	
			this._y = value;
			this.onChangeCallback();
	
		},
	
		get z () {
	
			return this._z;
	
		},
	
		set z ( value ) {
	
			this._z = value;
			this.onChangeCallback();
	
		},
	
		get w () {
	
			return this._w;
	
		},
	
		set w ( value ) {
	
			this._w = value;
			this.onChangeCallback();
	
		},
	
		set: function ( x, y, z, w ) {
	
			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor( this._x, this._y, this._z, this._w );
	
		},
	
		copy: function ( quaternion ) {
	
			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		setFromEuler: function ( euler, update ) {
	
			if ( euler instanceof THREE.Euler === false ) {
	
				throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
			}
	
			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m
	
			var c1 = Math.cos( euler._x / 2 );
			var c2 = Math.cos( euler._y / 2 );
			var c3 = Math.cos( euler._z / 2 );
			var s1 = Math.sin( euler._x / 2 );
			var s2 = Math.sin( euler._y / 2 );
			var s3 = Math.sin( euler._z / 2 );
	
			var order = euler.order;
	
			if ( order === 'XYZ' ) {
	
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
			} else if ( order === 'YXZ' ) {
	
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
			} else if ( order === 'ZXY' ) {
	
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
			} else if ( order === 'ZYX' ) {
	
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
			} else if ( order === 'YZX' ) {
	
				this._x = s1 * c2 * c3 + c1 * s2 * s3;
				this._y = c1 * s2 * c3 + s1 * c2 * s3;
				this._z = c1 * c2 * s3 - s1 * s2 * c3;
				this._w = c1 * c2 * c3 - s1 * s2 * s3;
	
			} else if ( order === 'XZY' ) {
	
				this._x = s1 * c2 * c3 - c1 * s2 * s3;
				this._y = c1 * s2 * c3 - s1 * c2 * s3;
				this._z = c1 * c2 * s3 + s1 * s2 * c3;
				this._w = c1 * c2 * c3 + s1 * s2 * s3;
	
			}
	
			if ( update !== false ) this.onChangeCallback();
	
			return this;
	
		},
	
		setFromAxisAngle: function ( axis, angle ) {
	
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm
	
			// assumes axis is normalized
	
			var halfAngle = angle / 2, s = Math.sin( halfAngle );
	
			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		setFromRotationMatrix: function ( m ) {
	
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
	
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
			var te = m.elements,
	
				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],
	
				trace = m11 + m22 + m33,
				s;
	
			if ( trace > 0 ) {
	
				s = 0.5 / Math.sqrt( trace + 1.0 );
	
				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;
	
			} else if ( m11 > m22 && m11 > m33 ) {
	
				s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );
	
				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;
	
			} else if ( m22 > m33 ) {
	
				s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );
	
				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;
	
			} else {
	
				s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );
	
				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;
	
			}
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		setFromUnitVectors: function () {
	
			// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final
	
			// assumes direction vectors vFrom and vTo are normalized
	
			var v1, r;
	
			var EPS = 0.000001;
	
			return function ( vFrom, vTo ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
	
				r = vFrom.dot( vTo ) + 1;
	
				if ( r < EPS ) {
	
					r = 0;
	
					if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {
	
						v1.set( - vFrom.y, vFrom.x, 0 );
	
					} else {
	
						v1.set( 0, - vFrom.z, vFrom.y );
	
					}
	
				} else {
	
					v1.crossVectors( vFrom, vTo );
	
				}
	
				this._x = v1.x;
				this._y = v1.y;
				this._z = v1.z;
				this._w = r;
	
				this.normalize();
	
				return this;
	
			}
	
		}(),
	
		inverse: function () {
	
			this.conjugate().normalize();
	
			return this;
	
		},
	
		conjugate: function () {
	
			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		dot: function ( v ) {
	
			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;
	
		},
	
		lengthSq: function () {
	
			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
	
		},
	
		length: function () {
	
			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );
	
		},
	
		normalize: function () {
	
			var l = this.length();
	
			if ( l === 0 ) {
	
				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;
	
			} else {
	
				l = 1 / l;
	
				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;
	
			}
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		multiply: function ( q, p ) {
	
			if ( p !== undefined ) {
	
				console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
				return this.multiplyQuaternions( q, p );
	
			}
	
			return this.multiplyQuaternions( this, q );
	
		},
	
		multiplyQuaternions: function ( a, b ) {
	
			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm
	
			var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
	
			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		multiplyVector3: function ( vector ) {
	
			console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
			return vector.applyQuaternion( this );
	
		},
	
		slerp: function ( qb, t ) {
	
			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );
	
			var x = this._x, y = this._y, z = this._z, w = this._w;
	
			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/
	
			var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;
	
			if ( cosHalfTheta < 0 ) {
	
				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;
	
				cosHalfTheta = - cosHalfTheta;
	
			} else {
	
				this.copy( qb );
	
			}
	
			if ( cosHalfTheta >= 1.0 ) {
	
				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;
	
				return this;
	
			}
	
			var halfTheta = Math.acos( cosHalfTheta );
			var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );
	
			if ( Math.abs( sinHalfTheta ) < 0.001 ) {
	
				this._w = 0.5 * ( w + this._w );
				this._x = 0.5 * ( x + this._x );
				this._y = 0.5 * ( y + this._y );
				this._z = 0.5 * ( z + this._z );
	
				return this;
	
			}
	
			var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
			ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;
	
			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		equals: function ( quaternion ) {
	
			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );
	
		},
	
		fromArray: function ( array, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;
	
			return array;
	
		},
	
		onChange: function ( callback ) {
	
			this.onChangeCallback = callback;
	
			return this;
	
		},
	
		onChangeCallback: function () {}
	
	};
	
	THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {
	
		return qm.copy( qa ).slerp( qb, t );
	
	};
	
	// File:src/math/Vector2.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author philogb / http://blog.thejit.org/
	 * @author egraether / http://egraether.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	
	THREE.Vector2 = function ( x, y ) {
	
		this.x = x || 0;
		this.y = y || 0;
	
	};
	
	THREE.Vector2.prototype = {
	
		constructor: THREE.Vector2,
	
		get width() { return this.x },
		set width( value ) { this.x = value },
	
		get height() { return this.y },
		set height( value ) { this.y = value },
	
		//
	
		set: function ( x, y ) {
	
			this.x = x;
			this.y = y;
	
			return this;
	
		},
	
		setX: function ( x ) {
	
			this.x = x;
	
			return this;
	
		},
	
		setY: function ( y ) {
	
			this.y = y;
	
			return this;
	
		},
	
		setComponent: function ( index, value ) {
	
			switch ( index ) {
	
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		getComponent: function ( index ) {
	
			switch ( index ) {
	
				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		clone: function () {
	
			return new this.constructor( this.x, this.y );
	
		},
	
		copy: function ( v ) {
	
			this.x = v.x;
			this.y = v.y;
	
			return this;
	
		},
	
		add: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
	
			}
	
			this.x += v.x;
			this.y += v.y;
	
			return this;
	
		},
	
		addScalar: function ( s ) {
	
			this.x += s;
			this.y += s;
	
			return this;
	
		},
	
		addVectors: function ( a, b ) {
	
			this.x = a.x + b.x;
			this.y = a.y + b.y;
	
			return this;
	
		},
	
		addScaledVector: function ( v, s ) {
	
			this.x += v.x * s;
			this.y += v.y * s;
	
			return this;
	
		},
	
		sub: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
	
			}
	
			this.x -= v.x;
			this.y -= v.y;
	
			return this;
	
		},
	
		subScalar: function ( s ) {
	
			this.x -= s;
			this.y -= s;
	
			return this;
	
		},
	
		subVectors: function ( a, b ) {
	
			this.x = a.x - b.x;
			this.y = a.y - b.y;
	
			return this;
	
		},
	
		multiply: function ( v ) {
	
			this.x *= v.x;
			this.y *= v.y;
	
			return this;
	
		},
	
		multiplyScalar: function ( scalar ) {
	
			if ( isFinite( scalar ) ) {
				this.x *= scalar;
				this.y *= scalar;
			} else {
				this.x = 0;
				this.y = 0;
			}
	
			return this;
	
		},
	
		divide: function ( v ) {
	
			this.x /= v.x;
			this.y /= v.y;
	
			return this;
	
		},
	
		divideScalar: function ( scalar ) {
	
			return this.multiplyScalar( 1 / scalar );
	
		},
	
		min: function ( v ) {
	
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
	
			return this;
	
		},
	
		max: function ( v ) {
	
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
	
			return this;
	
		},
	
		clamp: function ( min, max ) {
	
			// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
	
			return this;
	
		},
	
		clampScalar: function () {
	
			var min, max;
	
			return function clampScalar( minVal, maxVal ) {
	
				if ( min === undefined ) {
	
					min = new THREE.Vector2();
					max = new THREE.Vector2();
	
				}
	
				min.set( minVal, minVal );
				max.set( maxVal, maxVal );
	
				return this.clamp( min, max );
	
			};
	
		}(),
	
		clampLength: function ( min, max ) {
	
			var length = this.length();
	
			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );
	
			return this;
	
		},
	
		floor: function () {
	
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
	
			return this;
	
		},
	
		ceil: function () {
	
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
	
			return this;
	
		},
	
		round: function () {
	
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
	
			return this;
	
		},
	
		roundToZero: function () {
	
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
	
			return this;
	
		},
	
		negate: function () {
	
			this.x = - this.x;
			this.y = - this.y;
	
			return this;
	
		},
	
		dot: function ( v ) {
	
			return this.x * v.x + this.y * v.y;
	
		},
	
		lengthSq: function () {
	
			return this.x * this.x + this.y * this.y;
	
		},
	
		length: function () {
	
			return Math.sqrt( this.x * this.x + this.y * this.y );
	
		},
	
		lengthManhattan: function() {
	
			return Math.abs( this.x ) + Math.abs( this.y );
	
		},
	
		normalize: function () {
	
			return this.divideScalar( this.length() );
	
		},
	
		distanceTo: function ( v ) {
	
			return Math.sqrt( this.distanceToSquared( v ) );
	
		},
	
		distanceToSquared: function ( v ) {
	
			var dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;
	
		},
	
		setLength: function ( length ) {
	
			return this.multiplyScalar( length / this.length() );
	
		},
	
		lerp: function ( v, alpha ) {
	
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
	
			return this;
	
		},
	
		lerpVectors: function ( v1, v2, alpha ) {
	
			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			return this;
	
		},
	
		equals: function ( v ) {
	
			return ( ( v.x === this.x ) && ( v.y === this.y ) );
	
		},
	
		fromArray: function ( array, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
	
			return array;
	
		},
	
		fromAttribute: function ( attribute, index, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			index = index * attribute.itemSize + offset;
	
			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
	
			return this;
	
		},
	
		rotateAround: function ( center, angle ) {
	
			var c = Math.cos( angle ), s = Math.sin( angle );
	
			var x = this.x - center.x;
			var y = this.y - center.y;
	
			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;
	
			return this;
	
		}
	
	};
	
	// File:src/math/Vector3.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author *kile / http://kile.stravaganza.org/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.Vector3 = function ( x, y, z ) {
	
		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
	
	};
	
	THREE.Vector3.prototype = {
	
		constructor: THREE.Vector3,
	
		set: function ( x, y, z ) {
	
			this.x = x;
			this.y = y;
			this.z = z;
	
			return this;
	
		},
	
		setX: function ( x ) {
	
			this.x = x;
	
			return this;
	
		},
	
		setY: function ( y ) {
	
			this.y = y;
	
			return this;
	
		},
	
		setZ: function ( z ) {
	
			this.z = z;
	
			return this;
	
		},
	
		setComponent: function ( index, value ) {
	
			switch ( index ) {
	
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		getComponent: function ( index ) {
	
			switch ( index ) {
	
				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		clone: function () {
	
			return new this.constructor( this.x, this.y, this.z );
	
		},
	
		copy: function ( v ) {
	
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
	
			return this;
	
		},
	
		add: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
	
			}
	
			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
	
			return this;
	
		},
	
		addScalar: function ( s ) {
	
			this.x += s;
			this.y += s;
			this.z += s;
	
			return this;
	
		},
	
		addVectors: function ( a, b ) {
	
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
	
			return this;
	
		},
	
		addScaledVector: function ( v, s ) {
	
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
	
			return this;
	
		},
	
		sub: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
	
			}
	
			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
	
			return this;
	
		},
	
		subScalar: function ( s ) {
	
			this.x -= s;
			this.y -= s;
			this.z -= s;
	
			return this;
	
		},
	
		subVectors: function ( a, b ) {
	
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
	
			return this;
	
		},
	
		multiply: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
				return this.multiplyVectors( v, w );
	
			}
	
			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
	
			return this;
	
		},
	
		multiplyScalar: function ( scalar ) {
	
			if ( isFinite( scalar ) ) {
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
			} else {
				this.x = 0;
				this.y = 0;
				this.z = 0;
			}
	
			return this;
	
		},
	
		multiplyVectors: function ( a, b ) {
	
			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;
	
			return this;
	
		},
	
		applyEuler: function () {
	
			var quaternion;
	
			return function applyEuler( euler ) {
	
				if ( euler instanceof THREE.Euler === false ) {
	
					console.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
				}
	
				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();
	
				this.applyQuaternion( quaternion.setFromEuler( euler ) );
	
				return this;
	
			};
	
		}(),
	
		applyAxisAngle: function () {
	
			var quaternion;
	
			return function applyAxisAngle( axis, angle ) {
	
				if ( quaternion === undefined ) quaternion = new THREE.Quaternion();
	
				this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );
	
				return this;
	
			};
	
		}(),
	
		applyMatrix3: function ( m ) {
	
			var x = this.x;
			var y = this.y;
			var z = this.z;
	
			var e = m.elements;
	
			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;
	
			return this;
	
		},
	
		applyMatrix4: function ( m ) {
	
			// input: THREE.Matrix4 affine matrix
	
			var x = this.x, y = this.y, z = this.z;
	
			var e = m.elements;
	
			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];
	
			return this;
	
		},
	
		applyProjection: function ( m ) {
	
			// input: THREE.Matrix4 projection matrix
	
			var x = this.x, y = this.y, z = this.z;
	
			var e = m.elements;
			var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide
	
			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;
	
			return this;
	
		},
	
		applyQuaternion: function ( q ) {
	
			var x = this.x;
			var y = this.y;
			var z = this.z;
	
			var qx = q.x;
			var qy = q.y;
			var qz = q.z;
			var qw = q.w;
	
			// calculate quat * vector
	
			var ix =  qw * x + qy * z - qz * y;
			var iy =  qw * y + qz * x - qx * z;
			var iz =  qw * z + qx * y - qy * x;
			var iw = - qx * x - qy * y - qz * z;
	
			// calculate result * inverse quat
	
			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;
	
			return this;
	
		},
	
		project: function () {
	
			var matrix;
	
			return function project( camera ) {
	
				if ( matrix === undefined ) matrix = new THREE.Matrix4();
	
				matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
				return this.applyProjection( matrix );
	
			};
	
		}(),
	
		unproject: function () {
	
			var matrix;
	
			return function unproject( camera ) {
	
				if ( matrix === undefined ) matrix = new THREE.Matrix4();
	
				matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
				return this.applyProjection( matrix );
	
			};
	
		}(),
	
		transformDirection: function ( m ) {
	
			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction
	
			var x = this.x, y = this.y, z = this.z;
	
			var e = m.elements;
	
			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;
	
			this.normalize();
	
			return this;
	
		},
	
		divide: function ( v ) {
	
			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;
	
			return this;
	
		},
	
		divideScalar: function ( scalar ) {
	
			return this.multiplyScalar( 1 / scalar );
	
		},
	
		min: function ( v ) {
	
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
	
			return this;
	
		},
	
		max: function ( v ) {
	
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
	
			return this;
	
		},
	
		clamp: function ( min, max ) {
	
			// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
	
			return this;
	
		},
	
		clampScalar: function () {
	
			var min, max;
	
			return function clampScalar( minVal, maxVal ) {
	
				if ( min === undefined ) {
	
					min = new THREE.Vector3();
					max = new THREE.Vector3();
	
				}
	
				min.set( minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal );
	
				return this.clamp( min, max );
	
			};
	
		}(),
	
		clampLength: function ( min, max ) {
	
			var length = this.length();
	
			this.multiplyScalar( Math.max( min, Math.min( max, length ) ) / length );
	
			return this;
	
		},
	
		floor: function () {
	
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
	
			return this;
	
		},
	
		ceil: function () {
	
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
	
			return this;
	
		},
	
		round: function () {
	
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
	
			return this;
	
		},
	
		roundToZero: function () {
	
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
	
			return this;
	
		},
	
		negate: function () {
	
			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
	
			return this;
	
		},
	
		dot: function ( v ) {
	
			return this.x * v.x + this.y * v.y + this.z * v.z;
	
		},
	
		lengthSq: function () {
	
			return this.x * this.x + this.y * this.y + this.z * this.z;
	
		},
	
		length: function () {
	
			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );
	
		},
	
		lengthManhattan: function () {
	
			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );
	
		},
	
		normalize: function () {
	
			return this.divideScalar( this.length() );
	
		},
	
		setLength: function ( length ) {
	
			return this.multiplyScalar( length / this.length() );
	
		},
	
		lerp: function ( v, alpha ) {
	
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
	
			return this;
	
		},
	
		lerpVectors: function ( v1, v2, alpha ) {
	
			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			return this;
	
		},
	
		cross: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
				return this.crossVectors( v, w );
	
			}
	
			var x = this.x, y = this.y, z = this.z;
	
			this.x = y * v.z - z * v.y;
			this.y = z * v.x - x * v.z;
			this.z = x * v.y - y * v.x;
	
			return this;
	
		},
	
		crossVectors: function ( a, b ) {
	
			var ax = a.x, ay = a.y, az = a.z;
			var bx = b.x, by = b.y, bz = b.z;
	
			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;
	
			return this;
	
		},
	
		projectOnVector: function () {
	
			var v1, dot;
	
			return function projectOnVector( vector ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
	
				v1.copy( vector ).normalize();
	
				dot = this.dot( v1 );
	
				return this.copy( v1 ).multiplyScalar( dot );
	
			};
	
		}(),
	
		projectOnPlane: function () {
	
			var v1;
	
			return function projectOnPlane( planeNormal ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
	
				v1.copy( this ).projectOnVector( planeNormal );
	
				return this.sub( v1 );
	
			}
	
		}(),
	
		reflect: function () {
	
			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length
	
			var v1;
	
			return function reflect( normal ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
	
				return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );
	
			}
	
		}(),
	
		angleTo: function ( v ) {
	
			var theta = this.dot( v ) / ( this.length() * v.length() );
	
			// clamp, to handle numerical problems
	
			return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );
	
		},
	
		distanceTo: function ( v ) {
	
			return Math.sqrt( this.distanceToSquared( v ) );
	
		},
	
		distanceToSquared: function ( v ) {
	
			var dx = this.x - v.x;
			var dy = this.y - v.y;
			var dz = this.z - v.z;
	
			return dx * dx + dy * dy + dz * dz;
	
		},
	
		setEulerFromRotationMatrix: function ( m, order ) {
	
			console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );
	
		},
	
		setEulerFromQuaternion: function ( q, order ) {
	
			console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );
	
		},
	
		getPositionFromMatrix: function ( m ) {
	
			console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );
	
			return this.setFromMatrixPosition( m );
	
		},
	
		getScaleFromMatrix: function ( m ) {
	
			console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );
	
			return this.setFromMatrixScale( m );
	
		},
	
		getColumnFromMatrix: function ( index, matrix ) {
	
			console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );
	
			return this.setFromMatrixColumn( index, matrix );
	
		},
	
		setFromMatrixPosition: function ( m ) {
	
			this.x = m.elements[ 12 ];
			this.y = m.elements[ 13 ];
			this.z = m.elements[ 14 ];
	
			return this;
	
		},
	
		setFromMatrixScale: function ( m ) {
	
			var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[ 2 ] ).length();
			var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[ 6 ] ).length();
			var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();
	
			this.x = sx;
			this.y = sy;
			this.z = sz;
	
			return this;
	
		},
	
		setFromMatrixColumn: function ( index, matrix ) {
	
			var offset = index * 4;
	
			var me = matrix.elements;
	
			this.x = me[ offset ];
			this.y = me[ offset + 1 ];
			this.z = me[ offset + 2 ];
	
			return this;
	
		},
	
		equals: function ( v ) {
	
			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );
	
		},
	
		fromArray: function ( array, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
	
			return array;
	
		},
	
		fromAttribute: function ( attribute, index, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			index = index * attribute.itemSize + offset;
	
			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
	
			return this;
	
		}
	
	};
	
	// File:src/math/Vector4.js
	
	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author mikael emtinger / http://gomo.se/
	 * @author egraether / http://egraether.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.Vector4 = function ( x, y, z, w ) {
	
		this.x = x || 0;
		this.y = y || 0;
		this.z = z || 0;
		this.w = ( w !== undefined ) ? w : 1;
	
	};
	
	THREE.Vector4.prototype = {
	
		constructor: THREE.Vector4,
	
		set: function ( x, y, z, w ) {
	
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
	
			return this;
	
		},
	
		setX: function ( x ) {
	
			this.x = x;
	
			return this;
	
		},
	
		setY: function ( y ) {
	
			this.y = y;
	
			return this;
	
		},
	
		setZ: function ( z ) {
	
			this.z = z;
	
			return this;
	
		},
	
		setW: function ( w ) {
	
			this.w = w;
	
			return this;
	
		},
	
		setComponent: function ( index, value ) {
	
			switch ( index ) {
	
				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		getComponent: function ( index ) {
	
			switch ( index ) {
	
				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );
	
			}
	
		},
	
		clone: function () {
	
			return new this.constructor( this.x, this.y, this.z, this.w );
	
		},
	
		copy: function ( v ) {
	
			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;
	
			return this;
	
		},
	
		add: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
				return this.addVectors( v, w );
	
			}
	
			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;
	
			return this;
	
		},
	
		addScalar: function ( s ) {
	
			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;
	
			return this;
	
		},
	
		addVectors: function ( a, b ) {
	
			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;
	
			return this;
	
		},
	
		addScaledVector: function ( v, s ) {
	
			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;
	
			return this;
	
		},
	
		sub: function ( v, w ) {
	
			if ( w !== undefined ) {
	
				console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
				return this.subVectors( v, w );
	
			}
	
			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;
	
			return this;
	
		},
	
		subScalar: function ( s ) {
	
			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;
	
			return this;
	
		},
	
		subVectors: function ( a, b ) {
	
			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;
	
			return this;
	
		},
	
		multiplyScalar: function ( scalar ) {
	
			if ( isFinite( scalar ) ) {
				this.x *= scalar;
				this.y *= scalar;
				this.z *= scalar;
				this.w *= scalar;
			} else {
				this.x = 0;
				this.y = 0;
				this.z = 0;
				this.w = 0;
			}
	
			return this;
	
		},
	
		applyMatrix4: function ( m ) {
	
			var x = this.x;
			var y = this.y;
			var z = this.z;
			var w = this.w;
	
			var e = m.elements;
	
			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;
	
			return this;
	
		},
	
		divideScalar: function ( scalar ) {
	
			return this.multiplyScalar( 1 / scalar );
	
		},
	
		setAxisAngleFromQuaternion: function ( q ) {
	
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm
	
			// q is assumed to be normalized
	
			this.w = 2 * Math.acos( q.w );
	
			var s = Math.sqrt( 1 - q.w * q.w );
	
			if ( s < 0.0001 ) {
	
				 this.x = 1;
				 this.y = 0;
				 this.z = 0;
	
			} else {
	
				 this.x = q.x / s;
				 this.y = q.y / s;
				 this.z = q.z / s;
	
			}
	
			return this;
	
		},
	
		setAxisAngleFromRotationMatrix: function ( m ) {
	
			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm
	
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
			var angle, x, y, z,		// variables for result
				epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees
	
				te = m.elements,
	
				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
			if ( ( Math.abs( m12 - m21 ) < epsilon )
			   && ( Math.abs( m13 - m31 ) < epsilon )
			   && ( Math.abs( m23 - m32 ) < epsilon ) ) {
	
				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms
	
				if ( ( Math.abs( m12 + m21 ) < epsilon2 )
				   && ( Math.abs( m13 + m31 ) < epsilon2 )
				   && ( Math.abs( m23 + m32 ) < epsilon2 )
				   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {
	
					// this singularity is identity matrix so angle = 0
	
					this.set( 1, 0, 0, 0 );
	
					return this; // zero angle, arbitrary axis
	
				}
	
				// otherwise this singularity is angle = 180
	
				angle = Math.PI;
	
				var xx = ( m11 + 1 ) / 2;
				var yy = ( m22 + 1 ) / 2;
				var zz = ( m33 + 1 ) / 2;
				var xy = ( m12 + m21 ) / 4;
				var xz = ( m13 + m31 ) / 4;
				var yz = ( m23 + m32 ) / 4;
	
				if ( ( xx > yy ) && ( xx > zz ) ) {
	
					// m11 is the largest diagonal term
	
					if ( xx < epsilon ) {
	
						x = 0;
						y = 0.707106781;
						z = 0.707106781;
	
					} else {
	
						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;
	
					}
	
				} else if ( yy > zz ) {
	
					// m22 is the largest diagonal term
	
					if ( yy < epsilon ) {
	
						x = 0.707106781;
						y = 0;
						z = 0.707106781;
	
					} else {
	
						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;
	
					}
	
				} else {
	
					// m33 is the largest diagonal term so base result on this
	
					if ( zz < epsilon ) {
	
						x = 0.707106781;
						y = 0.707106781;
						z = 0;
	
					} else {
	
						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;
	
					}
	
				}
	
				this.set( x, y, z, angle );
	
				return this; // return 180 deg rotation
	
			}
	
			// as we have reached here there are no singularities so we can handle normally
	
			var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
							  + ( m13 - m31 ) * ( m13 - m31 )
							  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize
	
			if ( Math.abs( s ) < 0.001 ) s = 1;
	
			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case
	
			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );
	
			return this;
	
		},
	
		min: function ( v ) {
	
			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );
	
			return this;
	
		},
	
		max: function ( v ) {
	
			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );
	
			return this;
	
		},
	
		clamp: function ( min, max ) {
	
			// This function assumes min < max, if this assumption isn't true it will not operate correctly
	
			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );
	
			return this;
	
		},
	
		clampScalar: function () {
	
			var min, max;
	
			return function clampScalar( minVal, maxVal ) {
	
				if ( min === undefined ) {
	
					min = new THREE.Vector4();
					max = new THREE.Vector4();
	
				}
	
				min.set( minVal, minVal, minVal, minVal );
				max.set( maxVal, maxVal, maxVal, maxVal );
	
				return this.clamp( min, max );
	
			};
	
		}(),
	
		floor: function () {
	
			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );
	
			return this;
	
		},
	
		ceil: function () {
	
			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );
	
			return this;
	
		},
	
		round: function () {
	
			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );
	
			return this;
	
		},
	
		roundToZero: function () {
	
			this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
			this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
			this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
			this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );
	
			return this;
	
		},
	
		negate: function () {
	
			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;
	
			return this;
	
		},
	
		dot: function ( v ) {
	
			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
	
		},
	
		lengthSq: function () {
	
			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
	
		},
	
		length: function () {
	
			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );
	
		},
	
		lengthManhattan: function () {
	
			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );
	
		},
	
		normalize: function () {
	
			return this.divideScalar( this.length() );
	
		},
	
		setLength: function ( length ) {
	
			return this.multiplyScalar( length / this.length() );
	
		},
	
		lerp: function ( v, alpha ) {
	
			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;
	
			return this;
	
		},
	
		lerpVectors: function ( v1, v2, alpha ) {
	
			this.subVectors( v2, v1 ).multiplyScalar( alpha ).add( v1 );
	
			return this;
	
		},
	
		equals: function ( v ) {
	
			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );
	
		},
	
		fromArray: function ( array, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;
	
			return array;
	
		},
	
		fromAttribute: function ( attribute, index, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			index = index * attribute.itemSize + offset;
	
			this.x = attribute.array[ index ];
			this.y = attribute.array[ index + 1 ];
			this.z = attribute.array[ index + 2 ];
			this.w = attribute.array[ index + 3 ];
	
			return this;
	
		}
	
	};
	
	// File:src/math/Euler.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Euler = function ( x, y, z, order ) {
	
		this._x = x || 0;
		this._y = y || 0;
		this._z = z || 0;
		this._order = order || THREE.Euler.DefaultOrder;
	
	};
	
	THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];
	
	THREE.Euler.DefaultOrder = 'XYZ';
	
	THREE.Euler.prototype = {
	
		constructor: THREE.Euler,
	
		get x () {
	
			return this._x;
	
		},
	
		set x ( value ) {
	
			this._x = value;
			this.onChangeCallback();
	
		},
	
		get y () {
	
			return this._y;
	
		},
	
		set y ( value ) {
	
			this._y = value;
			this.onChangeCallback();
	
		},
	
		get z () {
	
			return this._z;
	
		},
	
		set z ( value ) {
	
			this._z = value;
			this.onChangeCallback();
	
		},
	
		get order () {
	
			return this._order;
	
		},
	
		set order ( value ) {
	
			this._order = value;
			this.onChangeCallback();
	
		},
	
		set: function ( x, y, z, order ) {
	
			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order || this._order;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor( this._x, this._y, this._z, this._order);
	
		},
	
		copy: function ( euler ) {
	
			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		setFromRotationMatrix: function ( m, order, update ) {
	
			var clamp = THREE.Math.clamp;
	
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
			var te = m.elements;
			var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];
	
			order = order || this._order;
	
			if ( order === 'XYZ' ) {
	
				this._y = Math.asin( clamp( m13, - 1, 1 ) );
	
				if ( Math.abs( m13 ) < 0.99999 ) {
	
					this._x = Math.atan2( - m23, m33 );
					this._z = Math.atan2( - m12, m11 );
	
				} else {
	
					this._x = Math.atan2( m32, m22 );
					this._z = 0;
	
				}
	
			} else if ( order === 'YXZ' ) {
	
				this._x = Math.asin( - clamp( m23, - 1, 1 ) );
	
				if ( Math.abs( m23 ) < 0.99999 ) {
	
					this._y = Math.atan2( m13, m33 );
					this._z = Math.atan2( m21, m22 );
	
				} else {
	
					this._y = Math.atan2( - m31, m11 );
					this._z = 0;
	
				}
	
			} else if ( order === 'ZXY' ) {
	
				this._x = Math.asin( clamp( m32, - 1, 1 ) );
	
				if ( Math.abs( m32 ) < 0.99999 ) {
	
					this._y = Math.atan2( - m31, m33 );
					this._z = Math.atan2( - m12, m22 );
	
				} else {
	
					this._y = 0;
					this._z = Math.atan2( m21, m11 );
	
				}
	
			} else if ( order === 'ZYX' ) {
	
				this._y = Math.asin( - clamp( m31, - 1, 1 ) );
	
				if ( Math.abs( m31 ) < 0.99999 ) {
	
					this._x = Math.atan2( m32, m33 );
					this._z = Math.atan2( m21, m11 );
	
				} else {
	
					this._x = 0;
					this._z = Math.atan2( - m12, m22 );
	
				}
	
			} else if ( order === 'YZX' ) {
	
				this._z = Math.asin( clamp( m21, - 1, 1 ) );
	
				if ( Math.abs( m21 ) < 0.99999 ) {
	
					this._x = Math.atan2( - m23, m22 );
					this._y = Math.atan2( - m31, m11 );
	
				} else {
	
					this._x = 0;
					this._y = Math.atan2( m13, m33 );
	
				}
	
			} else if ( order === 'XZY' ) {
	
				this._z = Math.asin( - clamp( m12, - 1, 1 ) );
	
				if ( Math.abs( m12 ) < 0.99999 ) {
	
					this._x = Math.atan2( m32, m22 );
					this._y = Math.atan2( m13, m11 );
	
				} else {
	
					this._x = Math.atan2( - m23, m33 );
					this._y = 0;
	
				}
	
			} else {
	
				console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )
	
			}
	
			this._order = order;
	
			if ( update !== false ) this.onChangeCallback();
	
			return this;
	
		},
	
		setFromQuaternion: function () {
	
			var matrix;
	
			return function ( q, order, update ) {
	
				if ( matrix === undefined ) matrix = new THREE.Matrix4();
				matrix.makeRotationFromQuaternion( q );
				this.setFromRotationMatrix( matrix, order, update );
	
				return this;
	
			};
	
		}(),
	
		setFromVector3: function ( v, order ) {
	
			return this.set( v.x, v.y, v.z, order || this._order );
	
		},
	
		reorder: function () {
	
			// WARNING: this discards revolution information -bhouston
	
			var q = new THREE.Quaternion();
	
			return function ( newOrder ) {
	
				q.setFromEuler( this );
				this.setFromQuaternion( q, newOrder );
	
			};
	
		}(),
	
		equals: function ( euler ) {
	
			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );
	
		},
	
		fromArray: function ( array ) {
	
			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];
	
			this.onChangeCallback();
	
			return this;
	
		},
	
		toArray: function ( array, offset ) {
	
			if ( array === undefined ) array = [];
			if ( offset === undefined ) offset = 0;
	
			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;
	
			return array;
	
		},
	
		toVector3: function ( optionalResult ) {
	
			if ( optionalResult ) {
	
				return optionalResult.set( this._x, this._y, this._z );
	
			} else {
	
				return new THREE.Vector3( this._x, this._y, this._z );
	
			}
	
		},
	
		onChange: function ( callback ) {
	
			this.onChangeCallback = callback;
	
			return this;
	
		},
	
		onChangeCallback: function () {}
	
	};
	
	// File:src/math/Line3.js
	
	/**
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Line3 = function ( start, end ) {
	
		this.start = ( start !== undefined ) ? start : new THREE.Vector3();
		this.end = ( end !== undefined ) ? end : new THREE.Vector3();
	
	};
	
	THREE.Line3.prototype = {
	
		constructor: THREE.Line3,
	
		set: function ( start, end ) {
	
			this.start.copy( start );
			this.end.copy( end );
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( line ) {
	
			this.start.copy( line.start );
			this.end.copy( line.end );
	
			return this;
	
		},
	
		center: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );
	
		},
	
		delta: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.end, this.start );
	
		},
	
		distanceSq: function () {
	
			return this.start.distanceToSquared( this.end );
	
		},
	
		distance: function () {
	
			return this.start.distanceTo( this.end );
	
		},
	
		at: function ( t, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
	
			return this.delta( result ).multiplyScalar( t ).add( this.start );
	
		},
	
		closestPointToPointParameter: function () {
	
			var startP = new THREE.Vector3();
			var startEnd = new THREE.Vector3();
	
			return function ( point, clampToLine ) {
	
				startP.subVectors( point, this.start );
				startEnd.subVectors( this.end, this.start );
	
				var startEnd2 = startEnd.dot( startEnd );
				var startEnd_startP = startEnd.dot( startP );
	
				var t = startEnd_startP / startEnd2;
	
				if ( clampToLine ) {
	
					t = THREE.Math.clamp( t, 0, 1 );
	
				}
	
				return t;
	
			};
	
		}(),
	
		closestPointToPoint: function ( point, clampToLine, optionalTarget ) {
	
			var t = this.closestPointToPointParameter( point, clampToLine );
	
			var result = optionalTarget || new THREE.Vector3();
	
			return this.delta( result ).multiplyScalar( t ).add( this.start );
	
		},
	
		applyMatrix4: function ( matrix ) {
	
			this.start.applyMatrix4( matrix );
			this.end.applyMatrix4( matrix );
	
			return this;
	
		},
	
		equals: function ( line ) {
	
			return line.start.equals( this.start ) && line.end.equals( this.end );
	
		}
	
	};
	
	// File:src/math/Box2.js
	
	/**
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Box2 = function ( min, max ) {
	
		this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );
	
	};
	
	THREE.Box2.prototype = {
	
		constructor: THREE.Box2,
	
		set: function ( min, max ) {
	
			this.min.copy( min );
			this.max.copy( max );
	
			return this;
	
		},
	
		setFromPoints: function ( points ) {
	
			this.makeEmpty();
	
			for ( var i = 0, il = points.length; i < il; i ++ ) {
	
				this.expandByPoint( points[ i ] )
	
			}
	
			return this;
	
		},
	
		setFromCenterAndSize: function () {
	
			var v1 = new THREE.Vector2();
	
			return function ( center, size ) {
	
				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
	
				return this;
	
			};
	
		}(),
		
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( box ) {
	
			this.min.copy( box.min );
			this.max.copy( box.max );
	
			return this;
	
		},
	
		makeEmpty: function () {
	
			this.min.x = this.min.y = Infinity;
			this.max.x = this.max.y = - Infinity;
	
			return this;
	
		},
	
		empty: function () {
	
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );
	
		},
	
		center: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector2();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
		},
	
		size: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector2();
			return result.subVectors( this.max, this.min );
	
		},
	
		expandByPoint: function ( point ) {
	
			this.min.min( point );
			this.max.max( point );
	
			return this;
	
		},
	
		expandByVector: function ( vector ) {
	
			this.min.sub( vector );
			this.max.add( vector );
	
			return this;
	
		},
	
		expandByScalar: function ( scalar ) {
	
			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );
	
			return this;
	
		},
	
		containsPoint: function ( point ) {
	
			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ) {
	
				return false;
	
			}
	
			return true;
	
		},
	
		containsBox: function ( box ) {
	
			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {
	
				return true;
	
			}
	
			return false;
	
		},
	
		getParameter: function ( point, optionalTarget ) {
	
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
	
			var result = optionalTarget || new THREE.Vector2();
	
			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y )
			);
	
		},
	
		isIntersectionBox: function ( box ) {
	
			// using 6 splitting planes to rule out intersections.
	
			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ) {
	
				return false;
	
			}
	
			return true;
	
		},
	
		clampPoint: function ( point, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector2();
			return result.copy( point ).clamp( this.min, this.max );
	
		},
	
		distanceToPoint: function () {
	
			var v1 = new THREE.Vector2();
	
			return function ( point ) {
	
				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();
	
			};
	
		}(),
	
		intersect: function ( box ) {
	
			this.min.max( box.min );
			this.max.min( box.max );
	
			return this;
	
		},
	
		union: function ( box ) {
	
			this.min.min( box.min );
			this.max.max( box.max );
	
			return this;
	
		},
	
		translate: function ( offset ) {
	
			this.min.add( offset );
			this.max.add( offset );
	
			return this;
	
		},
	
		equals: function ( box ) {
	
			return box.min.equals( this.min ) && box.max.equals( this.max );
	
		}
	
	};
	
	// File:src/math/Box3.js
	
	/**
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.Box3 = function ( min, max ) {
	
		this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
		this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );
	
	};
	
	THREE.Box3.prototype = {
	
		constructor: THREE.Box3,
	
		set: function ( min, max ) {
	
			this.min.copy( min );
			this.max.copy( max );
	
			return this;
	
		},
	
		setFromPoints: function ( points ) {
	
			this.makeEmpty();
	
			for ( var i = 0, il = points.length; i < il; i ++ ) {
	
				this.expandByPoint( points[ i ] );
	
			}
	
			return this;
	
		},
	
		setFromCenterAndSize: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( center, size ) {
	
				var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
	
				this.min.copy( center ).sub( halfSize );
				this.max.copy( center ).add( halfSize );
	
				return this;
	
			};
	
		}(),
	
		setFromObject: function () {
	
			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms
	
			var v1 = new THREE.Vector3();
	
			return function ( object ) {
	
				var scope = this;
	
				object.updateMatrixWorld( true );
	
				this.makeEmpty();
	
				object.traverse( function ( node ) {
	
					var geometry = node.geometry;
	
					if ( geometry !== undefined ) {
	
						if ( geometry instanceof THREE.Geometry ) {
	
							var vertices = geometry.vertices;
	
							for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
								v1.copy( vertices[ i ] );
	
								v1.applyMatrix4( node.matrixWorld );
	
								scope.expandByPoint( v1 );
	
							}
	
						} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {
	
							var positions = geometry.attributes[ 'position' ].array;
	
							for ( var i = 0, il = positions.length; i < il; i += 3 ) {
	
								v1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
	
								v1.applyMatrix4( node.matrixWorld );
	
								scope.expandByPoint( v1 );
	
							}
	
						}
	
					}
	
				} );
	
				return this;
	
			};
	
		}(),
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( box ) {
	
			this.min.copy( box.min );
			this.max.copy( box.max );
	
			return this;
	
		},
	
		makeEmpty: function () {
	
			this.min.x = this.min.y = this.min.z = Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;
	
			return this;
	
		},
	
		empty: function () {
	
			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes
	
			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );
	
		},
	
		center: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );
	
		},
	
		size: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.subVectors( this.max, this.min );
	
		},
	
		expandByPoint: function ( point ) {
	
			this.min.min( point );
			this.max.max( point );
	
			return this;
	
		},
	
		expandByVector: function ( vector ) {
	
			this.min.sub( vector );
			this.max.add( vector );
	
			return this;
	
		},
	
		expandByScalar: function ( scalar ) {
	
			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );
	
			return this;
	
		},
	
		containsPoint: function ( point ) {
	
			if ( point.x < this.min.x || point.x > this.max.x ||
			     point.y < this.min.y || point.y > this.max.y ||
			     point.z < this.min.z || point.z > this.max.z ) {
	
				return false;
	
			}
	
			return true;
	
		},
	
		containsBox: function ( box ) {
	
			if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
				 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
				 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {
	
				return true;
	
			}
	
			return false;
	
		},
	
		getParameter: function ( point, optionalTarget ) {
	
			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.
	
			var result = optionalTarget || new THREE.Vector3();
	
			return result.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);
	
		},
	
		isIntersectionBox: function ( box ) {
	
			// using 6 splitting planes to rule out intersections.
	
			if ( box.max.x < this.min.x || box.min.x > this.max.x ||
			     box.max.y < this.min.y || box.min.y > this.max.y ||
			     box.max.z < this.min.z || box.min.z > this.max.z ) {
	
				return false;
	
			}
	
			return true;
	
		},
	
		clampPoint: function ( point, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.copy( point ).clamp( this.min, this.max );
	
		},
	
		distanceToPoint: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( point ) {
	
				var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
				return clampedPoint.sub( point ).length();
	
			};
	
		}(),
	
		getBoundingSphere: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( optionalTarget ) {
	
				var result = optionalTarget || new THREE.Sphere();
	
				result.center = this.center();
				result.radius = this.size( v1 ).length() * 0.5;
	
				return result;
	
			};
	
		}(),
	
		intersect: function ( box ) {
	
			this.min.max( box.min );
			this.max.min( box.max );
	
			return this;
	
		},
	
		union: function ( box ) {
	
			this.min.min( box.min );
			this.max.max( box.max );
	
			return this;
	
		},
	
		applyMatrix4: function () {
	
			var points = [
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3(),
				new THREE.Vector3()
			];
	
			return function ( matrix ) {
	
				// NOTE: I am using a binary pattern to specify all 2^3 combinations below
				points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
				points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
				points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
				points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
				points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
				points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
				points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
				points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111
	
				this.makeEmpty();
				this.setFromPoints( points );
	
				return this;
	
			};
	
		}(),
	
		translate: function ( offset ) {
	
			this.min.add( offset );
			this.max.add( offset );
	
			return this;
	
		},
	
		equals: function ( box ) {
	
			return box.min.equals( this.min ) && box.max.equals( this.max );
	
		}
	
	};
	
	// File:src/math/Matrix3.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Matrix3 = function () {
	
		this.elements = new Float32Array( [
	
			1, 0, 0,
			0, 1, 0,
			0, 0, 1
	
		] );
	
		if ( arguments.length > 0 ) {
	
			console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );
	
		}
	
	};
	
	THREE.Matrix3.prototype = {
	
		constructor: THREE.Matrix3,
	
		set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {
	
			var te = this.elements;
	
			te[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;
			te[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;
			te[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;
	
			return this;
	
		},
	
		identity: function () {
	
			this.set(
	
				1, 0, 0,
				0, 1, 0,
				0, 0, 1
	
			);
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().fromArray( this.elements );
	
		},
	
		copy: function ( m ) {
	
			var me = m.elements;
	
			this.set(
	
				me[ 0 ], me[ 3 ], me[ 6 ],
				me[ 1 ], me[ 4 ], me[ 7 ],
				me[ 2 ], me[ 5 ], me[ 8 ]
	
			);
	
			return this;
	
		},
	
		multiplyVector3: function ( vector ) {
	
			console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
			return vector.applyMatrix3( this );
	
		},
	
		multiplyVector3Array: function ( a ) {
	
			console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
	
		},
	
		applyToVector3Array: function () {
	
			var v1;
	
			return function ( array, offset, length ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;
	
				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {
	
					v1.fromArray( array, j );
					v1.applyMatrix3( this );
					v1.toArray( array, j );
	
				}
	
				return array;
	
			};
	
		}(),
	
		applyToBuffer: function () {
	
			var v1;
	
			return function applyToBuffer( buffer, offset, length ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;
	
				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {
	
					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );
	
					v1.applyMatrix3( this );
	
					buffer.setXYZ( v1.x, v1.y, v1.z );
	
				}
	
				return buffer;
	
			};
	
		}(),
	
		multiplyScalar: function ( s ) {
	
			var te = this.elements;
	
			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;
	
			return this;
	
		},
	
		determinant: function () {
	
			var te = this.elements;
	
			var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];
	
			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;
	
		},
	
		getInverse: function ( matrix, throwOnInvertible ) {
	
			// input: THREE.Matrix4
			// ( based on http://code.google.com/p/webgl-mjs/ )
	
			var me = matrix.elements;
			var te = this.elements;
	
			te[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];
			te[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];
			te[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];
			te[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];
			te[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];
			te[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];
			te[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];
			te[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];
			te[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];
	
			var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];
	
			// no inverse
	
			if ( det === 0 ) {
	
				var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";
	
				if ( throwOnInvertible || false ) {
	
					throw new Error( msg );
	
				} else {
	
					console.warn( msg );
	
				}
	
				this.identity();
	
				return this;
	
			}
	
			this.multiplyScalar( 1.0 / det );
	
			return this;
	
		},
	
		transpose: function () {
	
			var tmp, m = this.elements;
	
			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;
	
			return this;
	
		},
	
		flattenToArrayOffset: function ( array, offset ) {
	
			var te = this.elements;
	
			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
	
			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
	
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ]  = te[ 8 ];
	
			return array;
	
		},
	
		getNormalMatrix: function ( m ) {
	
			// input: THREE.Matrix4
	
			this.getInverse( m ).transpose();
	
			return this;
	
		},
	
		transposeIntoArray: function ( r ) {
	
			var m = this.elements;
	
			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];
	
			return this;
	
		},
	
		fromArray: function ( array ) {
	
			this.elements.set( array );
	
			return this;
	
		},
	
		toArray: function () {
	
			var te = this.elements;
	
			return [
				te[ 0 ], te[ 1 ], te[ 2 ],
				te[ 3 ], te[ 4 ], te[ 5 ],
				te[ 6 ], te[ 7 ], te[ 8 ]
			];
	
		}
	
	};
	
	// File:src/math/Matrix4.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author philogb / http://blog.thejit.org/
	 * @author jordi_ros / http://plattsoft.com
	 * @author D1plo1d / http://github.com/D1plo1d
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author timknip / http://www.floorplanner.com/
	 * @author bhouston / http://clara.io
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.Matrix4 = function () {
	
		this.elements = new Float32Array( [
	
			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1
	
		] );
	
		if ( arguments.length > 0 ) {
	
			console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );
	
		}
	
	};
	
	THREE.Matrix4.prototype = {
	
		constructor: THREE.Matrix4,
	
		set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {
	
			var te = this.elements;
	
			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;
	
			return this;
	
		},
	
		identity: function () {
	
			this.set(
	
				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1
	
			);
	
			return this;
	
		},
	
		clone: function () {
	
			return new THREE.Matrix4().fromArray( this.elements );
	
		},
	
		copy: function ( m ) {
	
			this.elements.set( m.elements );
	
			return this;
	
		},
	
		extractPosition: function ( m ) {
	
			console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
			return this.copyPosition( m );
	
		},
	
		copyPosition: function ( m ) {
	
			var te = this.elements;
			var me = m.elements;
	
			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];
	
			return this;
	
		},
	
		extractBasis: function ( xAxis, yAxis, zAxis ) {
	
			var te = this.elements;
	
			xAxis.set( te[ 0 ], te[ 1 ], te[ 2 ] );
			yAxis.set( te[ 4 ], te[ 5 ], te[ 6 ] );
			zAxis.set( te[ 8 ], te[ 9 ], te[ 10 ] );
	
			return this;
	
		},
	
		makeBasis: function ( xAxis, yAxis, zAxis ) {
	
			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0,       0,       0,       1
			);
	
			return this;
	
		},
	
		extractRotation: function () {
	
			var v1;
	
			return function ( m ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
	
				var te = this.elements;
				var me = m.elements;
	
				var scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();
				var scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();
				var scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();
	
				te[ 0 ] = me[ 0 ] * scaleX;
				te[ 1 ] = me[ 1 ] * scaleX;
				te[ 2 ] = me[ 2 ] * scaleX;
	
				te[ 4 ] = me[ 4 ] * scaleY;
				te[ 5 ] = me[ 5 ] * scaleY;
				te[ 6 ] = me[ 6 ] * scaleY;
	
				te[ 8 ] = me[ 8 ] * scaleZ;
				te[ 9 ] = me[ 9 ] * scaleZ;
				te[ 10 ] = me[ 10 ] * scaleZ;
	
				return this;
	
			};
	
		}(),
	
		makeRotationFromEuler: function ( euler ) {
	
			if ( euler instanceof THREE.Euler === false ) {
	
				console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
	
			}
	
			var te = this.elements;
	
			var x = euler.x, y = euler.y, z = euler.z;
			var a = Math.cos( x ), b = Math.sin( x );
			var c = Math.cos( y ), d = Math.sin( y );
			var e = Math.cos( z ), f = Math.sin( z );
	
			if ( euler.order === 'XYZ' ) {
	
				var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;
	
				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;
	
				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;
	
			} else if ( euler.order === 'YXZ' ) {
	
				var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;
	
				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;
	
				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;
	
			} else if ( euler.order === 'ZXY' ) {
	
				var ce = c * e, cf = c * f, de = d * e, df = d * f;
	
				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;
	
				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;
	
				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;
	
			} else if ( euler.order === 'ZYX' ) {
	
				var ae = a * e, af = a * f, be = b * e, bf = b * f;
	
				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;
	
				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;
	
				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;
	
			} else if ( euler.order === 'YZX' ) {
	
				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;
	
				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;
	
				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;
	
			} else if ( euler.order === 'XZY' ) {
	
				var ac = a * c, ad = a * d, bc = b * c, bd = b * d;
	
				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;
	
				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;
	
				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;
	
			}
	
			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;
	
			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;
	
			return this;
	
		},
	
		setRotationFromQuaternion: function ( q ) {
	
			console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );
	
			return this.makeRotationFromQuaternion( q );
	
		},
	
		makeRotationFromQuaternion: function ( q ) {
	
			var te = this.elements;
	
			var x = q.x, y = q.y, z = q.z, w = q.w;
			var x2 = x + x, y2 = y + y, z2 = z + z;
			var xx = x * x2, xy = x * y2, xz = x * z2;
			var yy = y * y2, yz = y * z2, zz = z * z2;
			var wx = w * x2, wy = w * y2, wz = w * z2;
	
			te[ 0 ] = 1 - ( yy + zz );
			te[ 4 ] = xy - wz;
			te[ 8 ] = xz + wy;
	
			te[ 1 ] = xy + wz;
			te[ 5 ] = 1 - ( xx + zz );
			te[ 9 ] = yz - wx;
	
			te[ 2 ] = xz - wy;
			te[ 6 ] = yz + wx;
			te[ 10 ] = 1 - ( xx + yy );
	
			// last column
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;
	
			// bottom row
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;
	
			return this;
	
		},
	
		lookAt: function () {
	
			var x, y, z;
	
			return function ( eye, target, up ) {
	
				if ( x === undefined ) x = new THREE.Vector3();
				if ( y === undefined ) y = new THREE.Vector3();
				if ( z === undefined ) z = new THREE.Vector3();
	
				var te = this.elements;
	
				z.subVectors( eye, target ).normalize();
	
				if ( z.lengthSq() === 0 ) {
	
					z.z = 1;
	
				}
	
				x.crossVectors( up, z ).normalize();
	
				if ( x.lengthSq() === 0 ) {
	
					z.x += 0.0001;
					x.crossVectors( up, z ).normalize();
	
				}
	
				y.crossVectors( z, x );
	
	
				te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
				te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
				te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;
	
				return this;
	
			};
	
		}(),
	
		multiply: function ( m, n ) {
	
			if ( n !== undefined ) {
	
				console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
				return this.multiplyMatrices( m, n );
	
			}
	
			return this.multiplyMatrices( this, m );
	
		},
	
		multiplyMatrices: function ( a, b ) {
	
			var ae = a.elements;
			var be = b.elements;
			var te = this.elements;
	
			var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];
	
			var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];
	
			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
	
			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
	
			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
	
			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	
			return this;
	
		},
	
		multiplyToArray: function ( a, b, r ) {
	
			var te = this.elements;
	
			this.multiplyMatrices( a, b );
	
			r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
			r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
			r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
			r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];
	
			return this;
	
		},
	
		multiplyScalar: function ( s ) {
	
			var te = this.elements;
	
			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;
	
			return this;
	
		},
	
		multiplyVector3: function ( vector ) {
	
			console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
			return vector.applyProjection( this );
	
		},
	
		multiplyVector4: function ( vector ) {
	
			console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
	
		},
	
		multiplyVector3Array: function ( a ) {
	
			console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
			return this.applyToVector3Array( a );
	
		},
	
		applyToVector3Array: function () {
	
			var v1;
	
			return function ( array, offset, length ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = array.length;
	
				for ( var i = 0, j = offset; i < length; i += 3, j += 3 ) {
	
					v1.fromArray( array, j );
					v1.applyMatrix4( this );
					v1.toArray( array, j );
	
				}
	
				return array;
	
			};
	
		}(),
	
		applyToBuffer: function () {
	
			var v1;
	
			return function applyToBuffer( buffer, offset, length ) {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
				if ( offset === undefined ) offset = 0;
				if ( length === undefined ) length = buffer.length / buffer.itemSize;
	
				for ( var i = 0, j = offset; i < length; i ++, j ++ ) {
	
					v1.x = buffer.getX( j );
					v1.y = buffer.getY( j );
					v1.z = buffer.getZ( j );
	
					v1.applyMatrix4( this );
	
					buffer.setXYZ( v1.x, v1.y, v1.z );
	
				}
	
				return buffer;
	
			};
	
		}(),
	
		rotateAxis: function ( v ) {
	
			console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );
	
			v.transformDirection( this );
	
		},
	
		crossVector: function ( vector ) {
	
			console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
			return vector.applyMatrix4( this );
	
		},
	
		determinant: function () {
	
			var te = this.elements;
	
			var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];
	
			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )
	
			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)
	
			);
	
		},
	
		transpose: function () {
	
			var te = this.elements;
			var tmp;
	
			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;
	
			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;
	
			return this;
	
		},
	
		flattenToArrayOffset: function ( array, offset ) {
	
			var te = this.elements;
	
			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];
	
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
	
			array[ offset + 8 ]  = te[ 8 ];
			array[ offset + 9 ]  = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];
	
			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];
	
			return array;
	
		},
	
		getPosition: function () {
	
			var v1;
	
			return function () {
	
				if ( v1 === undefined ) v1 = new THREE.Vector3();
				console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );
	
				var te = this.elements;
				return v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );
	
			};
	
		}(),
	
		setPosition: function ( v ) {
	
			var te = this.elements;
	
			te[ 12 ] = v.x;
			te[ 13 ] = v.y;
			te[ 14 ] = v.z;
	
			return this;
	
		},
	
		getInverse: function ( m, throwOnInvertible ) {
	
			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			var te = this.elements;
			var me = m.elements;
	
			var n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];
			var n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];
			var n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];
			var n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];
	
			te[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
			te[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
			te[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
			te[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
			te[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
			te[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
			te[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
			te[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
			te[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
			te[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
			te[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
			te[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
			te[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
			te[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
			te[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
			te[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;
	
			var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];
	
			if ( det === 0 ) {
	
				var msg = "THREE.Matrix4.getInverse(): can't invert matrix, determinant is 0";
	
				if ( throwOnInvertible || false ) {
	
					throw new Error( msg );
	
				} else {
	
					console.warn( msg );
	
				}
	
				this.identity();
	
				return this;
	
			}
	
			this.multiplyScalar( 1 / det );
	
			return this;
	
		},
	
		translate: function ( v ) {
	
			console.error( 'THREE.Matrix4: .translate() has been removed.' );
	
		},
	
		rotateX: function ( angle ) {
	
			console.error( 'THREE.Matrix4: .rotateX() has been removed.' );
	
		},
	
		rotateY: function ( angle ) {
	
			console.error( 'THREE.Matrix4: .rotateY() has been removed.' );
	
		},
	
		rotateZ: function ( angle ) {
	
			console.error( 'THREE.Matrix4: .rotateZ() has been removed.' );
	
		},
	
		rotateByAxis: function ( axis, angle ) {
	
			console.error( 'THREE.Matrix4: .rotateByAxis() has been removed.' );
	
		},
	
		scale: function ( v ) {
	
			var te = this.elements;
			var x = v.x, y = v.y, z = v.z;
	
			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;
	
			return this;
	
		},
	
		getMaxScaleOnAxis: function () {
	
			var te = this.elements;
	
			var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];
	
			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );
	
		},
	
		makeTranslation: function ( x, y, z ) {
	
			this.set(
	
				1, 0, 0, x,
				0, 1, 0, y,
				0, 0, 1, z,
				0, 0, 0, 1
	
			);
	
			return this;
	
		},
	
		makeRotationX: function ( theta ) {
	
			var c = Math.cos( theta ), s = Math.sin( theta );
	
			this.set(
	
				1, 0,  0, 0,
				0, c, - s, 0,
				0, s,  c, 0,
				0, 0,  0, 1
	
			);
	
			return this;
	
		},
	
		makeRotationY: function ( theta ) {
	
			var c = Math.cos( theta ), s = Math.sin( theta );
	
			this.set(
	
				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1
	
			);
	
			return this;
	
		},
	
		makeRotationZ: function ( theta ) {
	
			var c = Math.cos( theta ), s = Math.sin( theta );
	
			this.set(
	
				c, - s, 0, 0,
				s,  c, 0, 0,
				0,  0, 1, 0,
				0,  0, 0, 1
	
			);
	
			return this;
	
		},
	
		makeRotationAxis: function ( axis, angle ) {
	
			// Based on http://www.gamedev.net/reference/articles/article1199.asp
	
			var c = Math.cos( angle );
			var s = Math.sin( angle );
			var t = 1 - c;
			var x = axis.x, y = axis.y, z = axis.z;
			var tx = t * x, ty = t * y;
	
			this.set(
	
				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1
	
			);
	
			 return this;
	
		},
	
		makeScale: function ( x, y, z ) {
	
			this.set(
	
				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1
	
			);
	
			return this;
	
		},
	
		compose: function ( position, quaternion, scale ) {
	
			this.makeRotationFromQuaternion( quaternion );
			this.scale( scale );
			this.setPosition( position );
	
			return this;
	
		},
	
		decompose: function () {
	
			var vector, matrix;
	
			return function ( position, quaternion, scale ) {
	
				if ( vector === undefined ) vector = new THREE.Vector3();
				if ( matrix === undefined ) matrix = new THREE.Matrix4();
	
				var te = this.elements;
	
				var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
				var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
				var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();
	
				// if determine is negative, we need to invert one scale
				var det = this.determinant();
				if ( det < 0 ) {
	
					sx = - sx;
	
				}
	
				position.x = te[ 12 ];
				position.y = te[ 13 ];
				position.z = te[ 14 ];
	
				// scale the rotation part
	
				matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()
	
				var invSX = 1 / sx;
				var invSY = 1 / sy;
				var invSZ = 1 / sz;
	
				matrix.elements[ 0 ] *= invSX;
				matrix.elements[ 1 ] *= invSX;
				matrix.elements[ 2 ] *= invSX;
	
				matrix.elements[ 4 ] *= invSY;
				matrix.elements[ 5 ] *= invSY;
				matrix.elements[ 6 ] *= invSY;
	
				matrix.elements[ 8 ] *= invSZ;
				matrix.elements[ 9 ] *= invSZ;
				matrix.elements[ 10 ] *= invSZ;
	
				quaternion.setFromRotationMatrix( matrix );
	
				scale.x = sx;
				scale.y = sy;
				scale.z = sz;
	
				return this;
	
			};
	
		}(),
	
		makeFrustum: function ( left, right, bottom, top, near, far ) {
	
			var te = this.elements;
			var x = 2 * near / ( right - left );
			var y = 2 * near / ( top - bottom );
	
			var a = ( right + left ) / ( right - left );
			var b = ( top + bottom ) / ( top - bottom );
			var c = - ( far + near ) / ( far - near );
			var d = - 2 * far * near / ( far - near );
	
			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;
	
			return this;
	
		},
	
		makePerspective: function ( fov, aspect, near, far ) {
	
			var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
			var ymin = - ymax;
			var xmin = ymin * aspect;
			var xmax = ymax * aspect;
	
			return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );
	
		},
	
		makeOrthographic: function ( left, right, top, bottom, near, far ) {
	
			var te = this.elements;
			var w = right - left;
			var h = top - bottom;
			var p = far - near;
	
			var x = ( right + left ) / w;
			var y = ( top + bottom ) / h;
			var z = ( far + near ) / p;
	
			te[ 0 ] = 2 / w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
			te[ 1 ] = 0;	te[ 5 ] = 2 / h;	te[ 9 ] = 0;	te[ 13 ] = - y;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 / p;	te[ 14 ] = - z;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;
	
			return this;
	
		},
	
		equals: function ( matrix ) {
	
			var te = this.elements;
			var me = matrix.elements;
	
			for ( var i = 0; i < 16; i ++ ) {
	
				if ( te[ i ] !== me[ i ] ) return false;
	
			}
	
			return true;
	
		},
	
		fromArray: function ( array ) {
	
			this.elements.set( array );
	
			return this;
	
		},
	
		toArray: function () {
	
			var te = this.elements;
	
			return [
				te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
				te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
				te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
				te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
			];
	
		}
	
	};
	
	// File:src/math/Ray.js
	
	/**
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Ray = function ( origin, direction ) {
	
		this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
		this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();
	
	};
	
	THREE.Ray.prototype = {
	
		constructor: THREE.Ray,
	
		set: function ( origin, direction ) {
	
			this.origin.copy( origin );
			this.direction.copy( direction );
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( ray ) {
	
			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );
	
			return this;
	
		},
	
		at: function ( t, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
	
			return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );
	
		},
	
		recast: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( t ) {
	
				this.origin.copy( this.at( t, v1 ) );
	
				return this;
	
			};
	
		}(),
	
		closestPointToPoint: function ( point, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			result.subVectors( point, this.origin );
			var directionDistance = result.dot( this.direction );
	
			if ( directionDistance < 0 ) {
	
				return result.copy( this.origin );
	
			}
	
			return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
		},
	
		distanceToPoint: function ( point ) {
	
			return Math.sqrt( this.distanceSqToPoint( point ) );
	
		},
	
		distanceSqToPoint: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( point ) {
	
				var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );
	
				// point behind the ray
	
				if ( directionDistance < 0 ) {
	
					return this.origin.distanceToSquared( point );
	
				}
	
				v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );
	
				return v1.distanceToSquared( point );
	
			};
	
		}(),
	
		distanceSqToSegment: function () {
	
			var segCenter = new THREE.Vector3();
			var segDir = new THREE.Vector3();
			var diff = new THREE.Vector3();
	
			return function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {
	
				// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
				// It returns the min distance between the ray and the segment
				// defined by v0 and v1
				// It can also set two optional targets :
				// - The closest point on the ray
				// - The closest point on the segment
	
				segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
				segDir.copy( v1 ).sub( v0 ).normalize();
				diff.copy( this.origin ).sub( segCenter );
	
				var segExtent = v0.distanceTo( v1 ) * 0.5;
				var a01 = - this.direction.dot( segDir );
				var b0 = diff.dot( this.direction );
				var b1 = - diff.dot( segDir );
				var c = diff.lengthSq();
				var det = Math.abs( 1 - a01 * a01 );
				var s0, s1, sqrDist, extDet;
	
				if ( det > 0 ) {
	
					// The ray and segment are not parallel.
	
					s0 = a01 * b1 - b0;
					s1 = a01 * b0 - b1;
					extDet = segExtent * det;
	
					if ( s0 >= 0 ) {
	
						if ( s1 >= - extDet ) {
	
							if ( s1 <= extDet ) {
	
								// region 0
								// Minimum at interior points of ray and segment.
	
								var invDet = 1 / det;
								s0 *= invDet;
								s1 *= invDet;
								sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;
	
							} else {
	
								// region 1
	
								s1 = segExtent;
								s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
								sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
							}
	
						} else {
	
							// region 5
	
							s1 = - segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						}
	
					} else {
	
						if ( s1 <= - extDet ) {
	
							// region 4
	
							s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						} else if ( s1 <= extDet ) {
	
							// region 3
	
							s0 = 0;
							s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = s1 * ( s1 + 2 * b1 ) + c;
	
						} else {
	
							// region 2
	
							s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
							s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
						}
	
					}
	
				} else {
	
					// Ray and segment are parallel.
	
					s1 = ( a01 > 0 ) ? - segExtent : segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;
	
				}
	
				if ( optionalPointOnRay ) {
	
					optionalPointOnRay.copy( this.direction ).multiplyScalar( s0 ).add( this.origin );
	
				}
	
				if ( optionalPointOnSegment ) {
	
					optionalPointOnSegment.copy( segDir ).multiplyScalar( s1 ).add( segCenter );
	
				}
	
				return sqrDist;
	
			};
	
		}(),
	
	
		isIntersectionSphere: function ( sphere ) {
	
			return this.distanceToPoint( sphere.center ) <= sphere.radius;
	
		},
	
		intersectSphere: function () {
	
			// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/
	
			var v1 = new THREE.Vector3();
	
			return function ( sphere, optionalTarget ) {
	
				v1.subVectors( sphere.center, this.origin );
	
				var tca = v1.dot( this.direction );
	
				var d2 = v1.dot( v1 ) - tca * tca;
	
				var radius2 = sphere.radius * sphere.radius;
	
				if ( d2 > radius2 ) return null;
	
				var thc = Math.sqrt( radius2 - d2 );
	
				// t0 = first intersect point - entrance on front of sphere
				var t0 = tca - thc;
	
				// t1 = second intersect point - exit point on back of sphere
				var t1 = tca + thc;
	
				// test to see if both t0 and t1 are behind the ray - if so, return null
				if ( t0 < 0 && t1 < 0 ) return null;
	
				// test to see if t0 is behind the ray:
				// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
				// in order to always return an intersect point that is in front of the ray.
				if ( t0 < 0 ) return this.at( t1, optionalTarget );
	
				// else t0 is in front of the ray, so return the first collision point scaled by t0
				return this.at( t0, optionalTarget );
	
			}
	
		}(),
	
		isIntersectionPlane: function ( plane ) {
	
			// check if the ray lies on the plane first
	
			var distToPoint = plane.distanceToPoint( this.origin );
	
			if ( distToPoint === 0 ) {
	
				return true;
	
			}
	
			var denominator = plane.normal.dot( this.direction );
	
			if ( denominator * distToPoint < 0 ) {
	
				return true;
	
			}
	
			// ray origin is behind the plane (and is pointing behind it)
	
			return false;
	
		},
	
		distanceToPlane: function ( plane ) {
	
			var denominator = plane.normal.dot( this.direction );
			if ( denominator === 0 ) {
	
				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {
	
					return 0;
	
				}
	
				// Null is preferable to undefined since undefined means.... it is undefined
	
				return null;
	
			}
	
			var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;
	
			// Return if the ray never intersects the plane
	
			return t >= 0 ? t :  null;
	
		},
	
		intersectPlane: function ( plane, optionalTarget ) {
	
			var t = this.distanceToPlane( plane );
	
			if ( t === null ) {
	
				return null;
	
			}
	
			return this.at( t, optionalTarget );
	
		},
	
		isIntersectionBox: function () {
	
			var v = new THREE.Vector3();
	
			return function ( box ) {
	
				return this.intersectBox( box, v ) !== null;
	
			};
	
		}(),
	
		intersectBox: function ( box, optionalTarget ) {
	
			// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/
	
			var tmin, tmax, tymin, tymax, tzmin, tzmax;
	
			var invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;
	
			var origin = this.origin;
	
			if ( invdirx >= 0 ) {
	
				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;
	
			} else {
	
				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;
	
			}
	
			if ( invdiry >= 0 ) {
	
				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;
	
			} else {
	
				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;
	
			}
	
			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;
	
			// These lines also handle the case where tmin or tmax is NaN
			// (result of 0 * Infinity). x !== x returns true if x is NaN
	
			if ( tymin > tmin || tmin !== tmin ) tmin = tymin;
	
			if ( tymax < tmax || tmax !== tmax ) tmax = tymax;
	
			if ( invdirz >= 0 ) {
	
				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;
	
			} else {
	
				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;
	
			}
	
			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;
	
			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;
	
			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;
	
			//return point closest to the ray (positive side)
	
			if ( tmax < 0 ) return null;
	
			return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );
	
		},
	
		intersectTriangle: function () {
	
			// Compute the offset origin, edges, and normal.
			var diff = new THREE.Vector3();
			var edge1 = new THREE.Vector3();
			var edge2 = new THREE.Vector3();
			var normal = new THREE.Vector3();
	
			return function ( a, b, c, backfaceCulling, optionalTarget ) {
	
				// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp
	
				edge1.subVectors( b, a );
				edge2.subVectors( c, a );
				normal.crossVectors( edge1, edge2 );
	
				// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
				// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
				//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
				//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
				//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
				var DdN = this.direction.dot( normal );
				var sign;
	
				if ( DdN > 0 ) {
	
					if ( backfaceCulling ) return null;
					sign = 1;
	
				} else if ( DdN < 0 ) {
	
					sign = - 1;
					DdN = - DdN;
	
				} else {
	
					return null;
	
				}
	
				diff.subVectors( this.origin, a );
				var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );
	
				// b1 < 0, no intersection
				if ( DdQxE2 < 0 ) {
	
					return null;
	
				}
	
				var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );
	
				// b2 < 0, no intersection
				if ( DdE1xQ < 0 ) {
	
					return null;
	
				}
	
				// b1+b2 > 1, no intersection
				if ( DdQxE2 + DdE1xQ > DdN ) {
	
					return null;
	
				}
	
				// Line intersects triangle, check if ray does.
				var QdN = - sign * diff.dot( normal );
	
				// t < 0, no intersection
				if ( QdN < 0 ) {
	
					return null;
	
				}
	
				// Ray intersects triangle.
				return this.at( QdN / DdN, optionalTarget );
	
			};
	
		}(),
	
		applyMatrix4: function ( matrix4 ) {
	
			this.direction.add( this.origin ).applyMatrix4( matrix4 );
			this.origin.applyMatrix4( matrix4 );
			this.direction.sub( this.origin );
			this.direction.normalize();
	
			return this;
	
		},
	
		equals: function ( ray ) {
	
			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );
	
		}
	
	};
	
	// File:src/math/Sphere.js
	
	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Sphere = function ( center, radius ) {
	
		this.center = ( center !== undefined ) ? center : new THREE.Vector3();
		this.radius = ( radius !== undefined ) ? radius : 0;
	
	};
	
	THREE.Sphere.prototype = {
	
		constructor: THREE.Sphere,
	
		set: function ( center, radius ) {
	
			this.center.copy( center );
			this.radius = radius;
	
			return this;
	
		},
	
		setFromPoints: function () {
	
			var box = new THREE.Box3();
	
			return function ( points, optionalCenter ) {
	
				var center = this.center;
	
				if ( optionalCenter !== undefined ) {
	
					center.copy( optionalCenter );
	
				} else {
	
					box.setFromPoints( points ).center( center );
	
				}
	
				var maxRadiusSq = 0;
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );
	
				}
	
				this.radius = Math.sqrt( maxRadiusSq );
	
				return this;
	
			};
	
		}(),
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( sphere ) {
	
			this.center.copy( sphere.center );
			this.radius = sphere.radius;
	
			return this;
	
		},
	
		empty: function () {
	
			return ( this.radius <= 0 );
	
		},
	
		containsPoint: function ( point ) {
	
			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );
	
		},
	
		distanceToPoint: function ( point ) {
	
			return ( point.distanceTo( this.center ) - this.radius );
	
		},
	
		intersectsSphere: function ( sphere ) {
	
			var radiusSum = this.radius + sphere.radius;
	
			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );
	
		},
	
		clampPoint: function ( point, optionalTarget ) {
	
			var deltaLengthSq = this.center.distanceToSquared( point );
	
			var result = optionalTarget || new THREE.Vector3();
			result.copy( point );
	
			if ( deltaLengthSq > ( this.radius * this.radius ) ) {
	
				result.sub( this.center ).normalize();
				result.multiplyScalar( this.radius ).add( this.center );
	
			}
	
			return result;
	
		},
	
		getBoundingBox: function ( optionalTarget ) {
	
			var box = optionalTarget || new THREE.Box3();
	
			box.set( this.center, this.center );
			box.expandByScalar( this.radius );
	
			return box;
	
		},
	
		applyMatrix4: function ( matrix ) {
	
			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();
	
			return this;
	
		},
	
		translate: function ( offset ) {
	
			this.center.add( offset );
	
			return this;
	
		},
	
		equals: function ( sphere ) {
	
			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );
	
		}
	
	};
	
	// File:src/math/Frustum.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {
	
		this.planes = [
	
			( p0 !== undefined ) ? p0 : new THREE.Plane(),
			( p1 !== undefined ) ? p1 : new THREE.Plane(),
			( p2 !== undefined ) ? p2 : new THREE.Plane(),
			( p3 !== undefined ) ? p3 : new THREE.Plane(),
			( p4 !== undefined ) ? p4 : new THREE.Plane(),
			( p5 !== undefined ) ? p5 : new THREE.Plane()
	
		];
	
	};
	
	THREE.Frustum.prototype = {
	
		constructor: THREE.Frustum,
	
		set: function ( p0, p1, p2, p3, p4, p5 ) {
	
			var planes = this.planes;
	
			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( frustum ) {
	
			var planes = this.planes;
	
			for ( var i = 0; i < 6; i ++ ) {
	
				planes[ i ].copy( frustum.planes[ i ] );
	
			}
	
			return this;
	
		},
	
		setFromMatrix: function ( m ) {
	
			var planes = this.planes;
			var me = m.elements;
			var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];
	
			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
			planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();
	
			return this;
	
		},
	
		intersectsObject: function () {
	
			var sphere = new THREE.Sphere();
	
			return function ( object ) {
	
				var geometry = object.geometry;
	
				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
				sphere.copy( geometry.boundingSphere );
				sphere.applyMatrix4( object.matrixWorld );
	
				return this.intersectsSphere( sphere );
	
			};
	
		}(),
	
		intersectsSphere: function ( sphere ) {
	
			var planes = this.planes;
			var center = sphere.center;
			var negRadius = - sphere.radius;
	
			for ( var i = 0; i < 6; i ++ ) {
	
				var distance = planes[ i ].distanceToPoint( center );
	
				if ( distance < negRadius ) {
	
					return false;
	
				}
	
			}
	
			return true;
	
		},
	
		intersectsBox: function () {
	
			var p1 = new THREE.Vector3(),
				p2 = new THREE.Vector3();
	
			return function ( box ) {
	
				var planes = this.planes;
	
				for ( var i = 0; i < 6 ; i ++ ) {
	
					var plane = planes[ i ];
	
					p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
					p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
					p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
					p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
					p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
					p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;
	
					var d1 = plane.distanceToPoint( p1 );
					var d2 = plane.distanceToPoint( p2 );
	
					// if both outside plane, no intersection
	
					if ( d1 < 0 && d2 < 0 ) {
	
						return false;
	
					}
	
				}
	
				return true;
	
			};
	
		}(),
	
	
		containsPoint: function ( point ) {
	
			var planes = this.planes;
	
			for ( var i = 0; i < 6; i ++ ) {
	
				if ( planes[ i ].distanceToPoint( point ) < 0 ) {
	
					return false;
	
				}
	
			}
	
			return true;
	
		}
	
	};
	
	// File:src/math/Plane.js
	
	/**
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Plane = function ( normal, constant ) {
	
		this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
		this.constant = ( constant !== undefined ) ? constant : 0;
	
	};
	
	THREE.Plane.prototype = {
	
		constructor: THREE.Plane,
	
		set: function ( normal, constant ) {
	
			this.normal.copy( normal );
			this.constant = constant;
	
			return this;
	
		},
	
		setComponents: function ( x, y, z, w ) {
	
			this.normal.set( x, y, z );
			this.constant = w;
	
			return this;
	
		},
	
		setFromNormalAndCoplanarPoint: function ( normal, point ) {
	
			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized
	
			return this;
	
		},
	
		setFromCoplanarPoints: function () {
	
			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
	
			return function ( a, b, c ) {
	
				var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();
	
				// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?
	
				this.setFromNormalAndCoplanarPoint( normal, a );
	
				return this;
	
			};
	
		}(),
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( plane ) {
	
			this.normal.copy( plane.normal );
			this.constant = plane.constant;
	
			return this;
	
		},
	
		normalize: function () {
	
			// Note: will lead to a divide by zero if the plane is invalid.
	
			var inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;
	
			return this;
	
		},
	
		negate: function () {
	
			this.constant *= - 1;
			this.normal.negate();
	
			return this;
	
		},
	
		distanceToPoint: function ( point ) {
	
			return this.normal.dot( point ) + this.constant;
	
		},
	
		distanceToSphere: function ( sphere ) {
	
			return this.distanceToPoint( sphere.center ) - sphere.radius;
	
		},
	
		projectPoint: function ( point, optionalTarget ) {
	
			return this.orthoPoint( point, optionalTarget ).sub( point ).negate();
	
		},
	
		orthoPoint: function ( point, optionalTarget ) {
	
			var perpendicularMagnitude = this.distanceToPoint( point );
	
			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );
	
		},
	
		isIntersectionLine: function ( line ) {
	
			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.
	
			var startSign = this.distanceToPoint( line.start );
			var endSign = this.distanceToPoint( line.end );
	
			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );
	
		},
	
		intersectLine: function () {
	
			var v1 = new THREE.Vector3();
	
			return function ( line, optionalTarget ) {
	
				var result = optionalTarget || new THREE.Vector3();
	
				var direction = line.delta( v1 );
	
				var denominator = this.normal.dot( direction );
	
				if ( denominator === 0 ) {
	
					// line is coplanar, return origin
					if ( this.distanceToPoint( line.start ) === 0 ) {
	
						return result.copy( line.start );
	
					}
	
					// Unsure if this is the correct method to handle this case.
					return undefined;
	
				}
	
				var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;
	
				if ( t < 0 || t > 1 ) {
	
					return undefined;
	
				}
	
				return result.copy( direction ).multiplyScalar( t ).add( line.start );
	
			};
	
		}(),
	
	
		coplanarPoint: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.copy( this.normal ).multiplyScalar( - this.constant );
	
		},
	
		applyMatrix4: function () {
	
			var v1 = new THREE.Vector3();
			var v2 = new THREE.Vector3();
			var m1 = new THREE.Matrix3();
	
			return function ( matrix, optionalNormalMatrix ) {
	
				// compute new normal based on theory here:
				// http://www.songho.ca/opengl/gl_normaltransform.html
				var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
				var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );
	
				var newCoplanarPoint = this.coplanarPoint( v2 );
				newCoplanarPoint.applyMatrix4( matrix );
	
				this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );
	
				return this;
	
			};
	
		}(),
	
		translate: function ( offset ) {
	
			this.constant = this.constant - offset.dot( this.normal );
	
			return this;
	
		},
	
		equals: function ( plane ) {
	
			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );
	
		}
	
	};
	
	// File:src/math/Math.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Math = {
	
		generateUUID: function () {
	
			// http://www.broofa.com/Tools/Math.uuid.htm
	
			var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
			var uuid = new Array( 36 );
			var rnd = 0, r;
	
			return function () {
	
				for ( var i = 0; i < 36; i ++ ) {
	
					if ( i === 8 || i === 13 || i === 18 || i === 23 ) {
	
						uuid[ i ] = '-';
	
					} else if ( i === 14 ) {
	
						uuid[ i ] = '4';
	
					} else {
	
						if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
						r = rnd & 0xf;
						rnd = rnd >> 4;
						uuid[ i ] = chars[ ( i === 19 ) ? ( r & 0x3 ) | 0x8 : r ];
	
					}
	
				}
	
				return uuid.join( '' );
	
			};
	
		}(),
	
		clamp: function ( value, min, max ) {
	
			return Math.max( min, Math.min( max, value ) );
	
		},
	
		// compute euclidian modulo of m % n
		// https://en.wikipedia.org/wiki/Modulo_operation
	
		euclideanModulo: function ( n, m ) {
	
			return ( ( n % m ) + m ) % m;
	
		},
	
		// Linear mapping from range <a1, a2> to range <b1, b2>
	
		mapLinear: function ( x, a1, a2, b1, b2 ) {
	
			return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );
	
		},
	
		// http://en.wikipedia.org/wiki/Smoothstep
	
		smoothstep: function ( x, min, max ) {
	
			if ( x <= min ) return 0;
			if ( x >= max ) return 1;
	
			x = ( x - min ) / ( max - min );
	
			return x * x * ( 3 - 2 * x );
	
		},
	
		smootherstep: function ( x, min, max ) {
	
			if ( x <= min ) return 0;
			if ( x >= max ) return 1;
	
			x = ( x - min ) / ( max - min );
	
			return x * x * x * ( x * ( x * 6 - 15 ) + 10 );
	
		},
	
		// Random float from <0, 1> with 16 bits of randomness
		// (standard Math.random() creates repetitive patterns when applied over larger space)
	
		random16: function () {
	
			return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;
	
		},
	
		// Random integer from <low, high> interval
	
		randInt: function ( low, high ) {
	
			return low + Math.floor( Math.random() * ( high - low + 1 ) );
	
		},
	
		// Random float from <low, high> interval
	
		randFloat: function ( low, high ) {
	
			return low + Math.random() * ( high - low );
	
		},
	
		// Random float from <-range/2, range/2> interval
	
		randFloatSpread: function ( range ) {
	
			return range * ( 0.5 - Math.random() );
	
		},
	
		degToRad: function () {
	
			var degreeToRadiansFactor = Math.PI / 180;
	
			return function ( degrees ) {
	
				return degrees * degreeToRadiansFactor;
	
			};
	
		}(),
	
		radToDeg: function () {
	
			var radianToDegreesFactor = 180 / Math.PI;
	
			return function ( radians ) {
	
				return radians * radianToDegreesFactor;
	
			};
	
		}(),
	
		isPowerOfTwo: function ( value ) {
	
			return ( value & ( value - 1 ) ) === 0 && value !== 0;
	
		},
	
		nearestPowerOfTwo: function ( value ) {
	
			return Math.pow( 2, Math.round( Math.log( value ) / Math.LN2 ) );
	
		},
	
		nextPowerOfTwo: function ( value ) {
	
			value --;
			value |= value >> 1;
			value |= value >> 2;
			value |= value >> 4;
			value |= value >> 8;
			value |= value >> 16;
			value ++;
	
			return value;
	
		}
	
	};
	
	// File:src/math/Spline.js
	
	/**
	 * Spline from Tween.js, slightly optimized (and trashed)
	 * http://sole.github.com/tween.js/examples/05_spline.html
	 *
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Spline = function ( points ) {
	
		this.points = points;
	
		var c = [], v3 = { x: 0, y: 0, z: 0 },
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;
	
		this.initFromArray = function ( a ) {
	
			this.points = [];
	
			for ( var i = 0; i < a.length; i ++ ) {
	
				this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };
	
			}
	
		};
	
		this.getPoint = function ( k ) {
	
			point = ( this.points.length - 1 ) * k;
			intPoint = Math.floor( point );
			weight = point - intPoint;
	
			c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
			c[ 1 ] = intPoint;
			c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
			c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;
	
			pa = this.points[ c[ 0 ] ];
			pb = this.points[ c[ 1 ] ];
			pc = this.points[ c[ 2 ] ];
			pd = this.points[ c[ 3 ] ];
	
			w2 = weight * weight;
			w3 = weight * w2;
	
			v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
			v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
			v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );
	
			return v3;
	
		};
	
		this.getControlPointsArray = function () {
	
			var i, p, l = this.points.length,
				coords = [];
	
			for ( i = 0; i < l; i ++ ) {
	
				p = this.points[ i ];
				coords[ i ] = [ p.x, p.y, p.z ];
	
			}
	
			return coords;
	
		};
	
		// approximate length by summing linear segments
	
		this.getLength = function ( nSubDivisions ) {
	
			var i, index, nSamples, position,
				point = 0, intPoint = 0, oldIntPoint = 0,
				oldPosition = new THREE.Vector3(),
				tmpVec = new THREE.Vector3(),
				chunkLengths = [],
				totalLength = 0;
	
			// first point has 0 length
	
			chunkLengths[ 0 ] = 0;
	
			if ( ! nSubDivisions ) nSubDivisions = 100;
	
			nSamples = this.points.length * nSubDivisions;
	
			oldPosition.copy( this.points[ 0 ] );
	
			for ( i = 1; i < nSamples; i ++ ) {
	
				index = i / nSamples;
	
				position = this.getPoint( index );
				tmpVec.copy( position );
	
				totalLength += tmpVec.distanceTo( oldPosition );
	
				oldPosition.copy( position );
	
				point = ( this.points.length - 1 ) * index;
				intPoint = Math.floor( point );
	
				if ( intPoint !== oldIntPoint ) {
	
					chunkLengths[ intPoint ] = totalLength;
					oldIntPoint = intPoint;
	
				}
	
			}
	
			// last point ends with total length
	
			chunkLengths[ chunkLengths.length ] = totalLength;
	
			return { chunks: chunkLengths, total: totalLength };
	
		};
	
		this.reparametrizeByArcLength = function ( samplingCoef ) {
	
			var i, j,
				index, indexCurrent, indexNext,
				realDistance,
				sampling, position,
				newpoints = [],
				tmpVec = new THREE.Vector3(),
				sl = this.getLength();
	
			newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );
	
			for ( i = 1; i < this.points.length; i ++ ) {
	
				//tmpVec.copy( this.points[ i - 1 ] );
				//linearDistance = tmpVec.distanceTo( this.points[ i ] );
	
				realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];
	
				sampling = Math.ceil( samplingCoef * realDistance / sl.total );
	
				indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
				indexNext = i / ( this.points.length - 1 );
	
				for ( j = 1; j < sampling - 1; j ++ ) {
	
					index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );
	
					position = this.getPoint( index );
					newpoints.push( tmpVec.copy( position ).clone() );
	
				}
	
				newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );
	
			}
	
			this.points = newpoints;
	
		};
	
		// Catmull-Rom
	
		function interpolate( p0, p1, p2, p3, t, t2, t3 ) {
	
			var v0 = ( p2 - p0 ) * 0.5,
				v1 = ( p3 - p1 ) * 0.5;
	
			return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
		}
	
	};
	
	// File:src/math/Triangle.js
	
	/**
	 * @author bhouston / http://clara.io
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Triangle = function ( a, b, c ) {
	
		this.a = ( a !== undefined ) ? a : new THREE.Vector3();
		this.b = ( b !== undefined ) ? b : new THREE.Vector3();
		this.c = ( c !== undefined ) ? c : new THREE.Vector3();
	
	};
	
	THREE.Triangle.normal = function () {
	
		var v0 = new THREE.Vector3();
	
		return function ( a, b, c, optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
	
			result.subVectors( c, b );
			v0.subVectors( a, b );
			result.cross( v0 );
	
			var resultLengthSq = result.lengthSq();
			if ( resultLengthSq > 0 ) {
	
				return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );
	
			}
	
			return result.set( 0, 0, 0 );
	
		};
	
	}();
	
	// static/instance method to calculate barycentric coordinates
	// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
	THREE.Triangle.barycoordFromPoint = function () {
	
		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
	
		return function ( point, a, b, c, optionalTarget ) {
	
			v0.subVectors( c, a );
			v1.subVectors( b, a );
			v2.subVectors( point, a );
	
			var dot00 = v0.dot( v0 );
			var dot01 = v0.dot( v1 );
			var dot02 = v0.dot( v2 );
			var dot11 = v1.dot( v1 );
			var dot12 = v1.dot( v2 );
	
			var denom = ( dot00 * dot11 - dot01 * dot01 );
	
			var result = optionalTarget || new THREE.Vector3();
	
			// collinear or singular triangle
			if ( denom === 0 ) {
	
				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return result.set( - 2, - 1, - 1 );
	
			}
	
			var invDenom = 1 / denom;
			var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;
	
			// barycentric coordinates must always sum to 1
			return result.set( 1 - u - v, v, u );
	
		};
	
	}();
	
	THREE.Triangle.containsPoint = function () {
	
		var v1 = new THREE.Vector3();
	
		return function ( point, a, b, c ) {
	
			var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );
	
			return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );
	
		};
	
	}();
	
	THREE.Triangle.prototype = {
	
		constructor: THREE.Triangle,
	
		set: function ( a, b, c ) {
	
			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );
	
			return this;
	
		},
	
		setFromPointsAndIndices: function ( points, i0, i1, i2 ) {
	
			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( triangle ) {
	
			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );
	
			return this;
	
		},
	
		area: function () {
	
			var v0 = new THREE.Vector3();
			var v1 = new THREE.Vector3();
	
			return function () {
	
				v0.subVectors( this.c, this.b );
				v1.subVectors( this.a, this.b );
	
				return v0.cross( v1 ).length() * 0.5;
	
			};
	
		}(),
	
		midpoint: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
			return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );
	
		},
	
		normal: function ( optionalTarget ) {
	
			return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );
	
		},
	
		plane: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Plane();
	
			return result.setFromCoplanarPoints( this.a, this.b, this.c );
	
		},
	
		barycoordFromPoint: function ( point, optionalTarget ) {
	
			return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );
	
		},
	
		containsPoint: function ( point ) {
	
			return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );
	
		},
	
		equals: function ( triangle ) {
	
			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );
	
		}
	
	};
	
	// File:src/core/Channels.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Channels = function () {
	
		this.mask = 1;
	
	};
	
	THREE.Channels.prototype = {
	
		constructor: THREE.Channels,
	
		set: function ( channel ) {
	
			this.mask = 1 << channel;
	
		},
	
		enable: function ( channel ) {
	
			this.mask |= 1 << channel;
	
		},
	
		toggle: function ( channel ) {
	
			this.mask ^= 1 << channel;
	
		},
	
		disable: function ( channel ) {
	
			this.mask &= ~ ( 1 << channel );
	
		}
	
	};
	
	// File:src/core/Clock.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Clock = function ( autoStart ) {
	
		this.autoStart = ( autoStart !== undefined ) ? autoStart : true;
	
		this.startTime = 0;
		this.oldTime = 0;
		this.elapsedTime = 0;
	
		this.running = false;
	
	};
	
	THREE.Clock.prototype = {
	
		constructor: THREE.Clock,
	
		start: function () {
	
			this.startTime = self.performance.now();
	
			this.oldTime = this.startTime;
			this.running = true;
	
		},
	
		stop: function () {
	
			this.getElapsedTime();
			this.running = false;
	
		},
	
		getElapsedTime: function () {
	
			this.getDelta();
			return this.elapsedTime;
	
		},
	
		getDelta: function () {
	
			var diff = 0;
	
			if ( this.autoStart && ! this.running ) {
	
				this.start();
	
			}
	
			if ( this.running ) {
	
				var newTime = self.performance.now();
	
				diff = 0.001 * ( newTime - this.oldTime );
				this.oldTime = newTime;
	
				this.elapsedTime += diff;
	
			}
	
			return diff;
	
		}
	
	};
	
	// File:src/core/EventDispatcher.js
	
	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */
	
	THREE.EventDispatcher = function () {};
	
	THREE.EventDispatcher.prototype = {
	
		constructor: THREE.EventDispatcher,
	
		apply: function ( object ) {
	
			object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
			object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
			object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
			object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;
	
		},
	
		addEventListener: function ( type, listener ) {
	
			if ( this._listeners === undefined ) this._listeners = {};
	
			var listeners = this._listeners;
	
			if ( listeners[ type ] === undefined ) {
	
				listeners[ type ] = [];
	
			}
	
			if ( listeners[ type ].indexOf( listener ) === - 1 ) {
	
				listeners[ type ].push( listener );
	
			}
	
		},
	
		hasEventListener: function ( type, listener ) {
	
			if ( this._listeners === undefined ) return false;
	
			var listeners = this._listeners;
	
			if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {
	
				return true;
	
			}
	
			return false;
	
		},
	
		removeEventListener: function ( type, listener ) {
	
			if ( this._listeners === undefined ) return;
	
			var listeners = this._listeners;
			var listenerArray = listeners[ type ];
	
			if ( listenerArray !== undefined ) {
	
				var index = listenerArray.indexOf( listener );
	
				if ( index !== - 1 ) {
	
					listenerArray.splice( index, 1 );
	
				}
	
			}
	
		},
	
		dispatchEvent: function ( event ) {
	
			if ( this._listeners === undefined ) return;
	
			var listeners = this._listeners;
			var listenerArray = listeners[ event.type ];
	
			if ( listenerArray !== undefined ) {
	
				event.target = this;
	
				var array = [];
				var length = listenerArray.length;
	
				for ( var i = 0; i < length; i ++ ) {
	
					array[ i ] = listenerArray[ i ];
	
				}
	
				for ( var i = 0; i < length; i ++ ) {
	
					array[ i ].call( this, event );
	
				}
	
			}
	
		}
	
	};
	
	// File:src/core/Raycaster.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author bhouston / http://clara.io/
	 * @author stephomi / http://stephaneginier.com/
	 */
	
	( function ( THREE ) {
	
		THREE.Raycaster = function ( origin, direction, near, far ) {
	
			this.ray = new THREE.Ray( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)
	
			this.near = near || 0;
			this.far = far || Infinity;
	
			this.params = {
				Mesh: {},
				Line: {},
				LOD: {},
				Points: { threshold: 1 },
				Sprite: {}
			};
	
			Object.defineProperties( this.params, {
				PointCloud: {
					get: function () {
						console.warn( 'THREE.Raycaster: params.PointCloud has been renamed to params.Points.' );
						return this.Points;
					}
				}
			} );
	
		};
	
		function descSort( a, b ) {
	
			return a.distance - b.distance;
	
		}
	
		function intersectObject( object, raycaster, intersects, recursive ) {
	
			if ( object.visible === false ) return;
	
			object.raycast( raycaster, intersects );
	
			if ( recursive === true ) {
	
				var children = object.children;
	
				for ( var i = 0, l = children.length; i < l; i ++ ) {
	
					intersectObject( children[ i ], raycaster, intersects, true );
	
				}
	
			}
	
		}
	
		//
	
		THREE.Raycaster.prototype = {
	
			constructor: THREE.Raycaster,
	
			linePrecision: 1,
	
			set: function ( origin, direction ) {
	
				// direction is assumed to be normalized (for accurate distance calculations)
	
				this.ray.set( origin, direction );
	
			},
	
			setFromCamera: function ( coords, camera ) {
	
				if ( camera instanceof THREE.PerspectiveCamera ) {
	
					this.ray.origin.setFromMatrixPosition( camera.matrixWorld );
					this.ray.direction.set( coords.x, coords.y, 0.5 ).unproject( camera ).sub( this.ray.origin ).normalize();
	
				} else if ( camera instanceof THREE.OrthographicCamera ) {
	
					this.ray.origin.set( coords.x, coords.y, - 1 ).unproject( camera );
					this.ray.direction.set( 0, 0, - 1 ).transformDirection( camera.matrixWorld );
	
				} else {
	
					console.error( 'THREE.Raycaster: Unsupported camera type.' );
	
				}
	
			},
	
			intersectObject: function ( object, recursive ) {
	
				var intersects = [];
	
				intersectObject( object, this, intersects, recursive );
	
				intersects.sort( descSort );
	
				return intersects;
	
			},
	
			intersectObjects: function ( objects, recursive ) {
	
				var intersects = [];
	
				if ( Array.isArray( objects ) === false ) {
	
					console.warn( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
					return intersects;
	
				}
	
				for ( var i = 0, l = objects.length; i < l; i ++ ) {
	
					intersectObject( objects[ i ], this, intersects, recursive );
	
				}
	
				intersects.sort( descSort );
	
				return intersects;
	
			}
	
		};
	
	}( THREE ) );
	
	// File:src/core/Object3D.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author WestLangley / http://github.com/WestLangley
	 * @author elephantatwork / www.elephantatwork.ch
	 */
	
	THREE.Object3D = function () {
	
		Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.type = 'Object3D';
	
		this.parent = null;
		this.channels = new THREE.Channels();
		this.children = [];
	
		this.up = THREE.Object3D.DefaultUp.clone();
	
		var position = new THREE.Vector3();
		var rotation = new THREE.Euler();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3( 1, 1, 1 );
	
		function onRotationChange() {
	
			quaternion.setFromEuler( rotation, false );
	
		}
	
		function onQuaternionChange() {
	
			rotation.setFromQuaternion( quaternion, undefined, false );
	
		}
	
		rotation.onChange( onRotationChange );
		quaternion.onChange( onQuaternionChange );
	
		Object.defineProperties( this, {
			position: {
				enumerable: true,
				value: position
			},
			rotation: {
				enumerable: true,
				value: rotation
			},
			quaternion: {
				enumerable: true,
				value: quaternion
			},
			scale: {
				enumerable: true,
				value: scale
			},
			modelViewMatrix: {
				value: new THREE.Matrix4()
			},
			normalMatrix: {
				value: new THREE.Matrix3()
			}
		} );
	
		this.rotationAutoUpdate = true;
	
		this.matrix = new THREE.Matrix4();
		this.matrixWorld = new THREE.Matrix4();
	
		this.matrixAutoUpdate = THREE.Object3D.DefaultMatrixAutoUpdate;
		this.matrixWorldNeedsUpdate = false;
	
		this.visible = true;
	
		this.castShadow = false;
		this.receiveShadow = false;
	
		this.frustumCulled = true;
		this.renderOrder = 0;
	
		this.userData = {};
	
	};
	
	THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );
	THREE.Object3D.DefaultMatrixAutoUpdate = true;
	
	THREE.Object3D.prototype = {
	
		constructor: THREE.Object3D,
	
		get eulerOrder () {
	
			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
	
			return this.rotation.order;
	
		},
	
		set eulerOrder ( value ) {
	
			console.warn( 'THREE.Object3D: .eulerOrder is now .rotation.order.' );
	
			this.rotation.order = value;
	
		},
	
		get useQuaternion () {
	
			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
		},
	
		set useQuaternion ( value ) {
	
			console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );
	
		},
	
		set renderDepth ( value ) {
	
			console.warn( 'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.' );
	
		},
	
		//
	
		applyMatrix: function ( matrix ) {
	
			this.matrix.multiplyMatrices( matrix, this.matrix );
	
			this.matrix.decompose( this.position, this.quaternion, this.scale );
	
		},
	
		setRotationFromAxisAngle: function ( axis, angle ) {
	
			// assumes axis is normalized
	
			this.quaternion.setFromAxisAngle( axis, angle );
	
		},
	
		setRotationFromEuler: function ( euler ) {
	
			this.quaternion.setFromEuler( euler, true );
	
		},
	
		setRotationFromMatrix: function ( m ) {
	
			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)
	
			this.quaternion.setFromRotationMatrix( m );
	
		},
	
		setRotationFromQuaternion: function ( q ) {
	
			// assumes q is normalized
	
			this.quaternion.copy( q );
	
		},
	
		rotateOnAxis: function () {
	
			// rotate object on axis in object space
			// axis is assumed to be normalized
	
			var q1 = new THREE.Quaternion();
	
			return function ( axis, angle ) {
	
				q1.setFromAxisAngle( axis, angle );
	
				this.quaternion.multiply( q1 );
	
				return this;
	
			};
	
		}(),
	
		rotateX: function () {
	
			var v1 = new THREE.Vector3( 1, 0, 0 );
	
			return function ( angle ) {
	
				return this.rotateOnAxis( v1, angle );
	
			};
	
		}(),
	
		rotateY: function () {
	
			var v1 = new THREE.Vector3( 0, 1, 0 );
	
			return function ( angle ) {
	
				return this.rotateOnAxis( v1, angle );
	
			};
	
		}(),
	
		rotateZ: function () {
	
			var v1 = new THREE.Vector3( 0, 0, 1 );
	
			return function ( angle ) {
	
				return this.rotateOnAxis( v1, angle );
	
			};
	
		}(),
	
		translateOnAxis: function () {
	
			// translate object by distance along axis in object space
			// axis is assumed to be normalized
	
			var v1 = new THREE.Vector3();
	
			return function ( axis, distance ) {
	
				v1.copy( axis ).applyQuaternion( this.quaternion );
	
				this.position.add( v1.multiplyScalar( distance ) );
	
				return this;
	
			};
	
		}(),
	
		translate: function ( distance, axis ) {
	
			console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
			return this.translateOnAxis( axis, distance );
	
		},
	
		translateX: function () {
	
			var v1 = new THREE.Vector3( 1, 0, 0 );
	
			return function ( distance ) {
	
				return this.translateOnAxis( v1, distance );
	
			};
	
		}(),
	
		translateY: function () {
	
			var v1 = new THREE.Vector3( 0, 1, 0 );
	
			return function ( distance ) {
	
				return this.translateOnAxis( v1, distance );
	
			};
	
		}(),
	
		translateZ: function () {
	
			var v1 = new THREE.Vector3( 0, 0, 1 );
	
			return function ( distance ) {
	
				return this.translateOnAxis( v1, distance );
	
			};
	
		}(),
	
		localToWorld: function ( vector ) {
	
			return vector.applyMatrix4( this.matrixWorld );
	
		},
	
		worldToLocal: function () {
	
			var m1 = new THREE.Matrix4();
	
			return function ( vector ) {
	
				return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );
	
			};
	
		}(),
	
		lookAt: function () {
	
			// This routine does not support objects with rotated and/or translated parent(s)
	
			var m1 = new THREE.Matrix4();
	
			return function ( vector ) {
	
				m1.lookAt( vector, this.position, this.up );
	
				this.quaternion.setFromRotationMatrix( m1 );
	
			};
	
		}(),
	
		add: function ( object ) {
	
			if ( arguments.length > 1 ) {
	
				for ( var i = 0; i < arguments.length; i ++ ) {
	
					this.add( arguments[ i ] );
	
				}
	
				return this;
	
			}
	
			if ( object === this ) {
	
				console.error( "THREE.Object3D.add: object can't be added as a child of itself.", object );
				return this;
	
			}
	
			if ( object instanceof THREE.Object3D ) {
	
				if ( object.parent !== null ) {
	
					object.parent.remove( object );
	
				}
	
				object.parent = this;
				object.dispatchEvent( { type: 'added' } );
	
				this.children.push( object );
	
			} else {
	
				console.error( "THREE.Object3D.add: object not an instance of THREE.Object3D.", object );
	
			}
	
			return this;
	
		},
	
		remove: function ( object ) {
	
			if ( arguments.length > 1 ) {
	
				for ( var i = 0; i < arguments.length; i ++ ) {
	
					this.remove( arguments[ i ] );
	
				}
	
			}
	
			var index = this.children.indexOf( object );
	
			if ( index !== - 1 ) {
	
				object.parent = null;
	
				object.dispatchEvent( { type: 'removed' } );
	
				this.children.splice( index, 1 );
	
			}
	
		},
	
		getChildByName: function ( name ) {
	
			console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
			return this.getObjectByName( name );
	
		},
	
		getObjectById: function ( id ) {
	
			return this.getObjectByProperty( 'id', id );
	
		},
	
		getObjectByName: function ( name ) {
	
			return this.getObjectByProperty( 'name', name );
	
		},
	
		getObjectByProperty: function ( name, value ) {
	
			if ( this[ name ] === value ) return this;
	
			for ( var i = 0, l = this.children.length; i < l; i ++ ) {
	
				var child = this.children[ i ];
				var object = child.getObjectByProperty( name, value );
	
				if ( object !== undefined ) {
	
					return object;
	
				}
	
			}
	
			return undefined;
	
		},
	
		getWorldPosition: function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
	
			this.updateMatrixWorld( true );
	
			return result.setFromMatrixPosition( this.matrixWorld );
	
		},
	
		getWorldQuaternion: function () {
	
			var position = new THREE.Vector3();
			var scale = new THREE.Vector3();
	
			return function ( optionalTarget ) {
	
				var result = optionalTarget || new THREE.Quaternion();
	
				this.updateMatrixWorld( true );
	
				this.matrixWorld.decompose( position, result, scale );
	
				return result;
	
			};
	
		}(),
	
		getWorldRotation: function () {
	
			var quaternion = new THREE.Quaternion();
	
			return function ( optionalTarget ) {
	
				var result = optionalTarget || new THREE.Euler();
	
				this.getWorldQuaternion( quaternion );
	
				return result.setFromQuaternion( quaternion, this.rotation.order, false );
	
			};
	
		}(),
	
		getWorldScale: function () {
	
			var position = new THREE.Vector3();
			var quaternion = new THREE.Quaternion();
	
			return function ( optionalTarget ) {
	
				var result = optionalTarget || new THREE.Vector3();
	
				this.updateMatrixWorld( true );
	
				this.matrixWorld.decompose( position, quaternion, result );
	
				return result;
	
			};
	
		}(),
	
		getWorldDirection: function () {
	
			var quaternion = new THREE.Quaternion();
	
			return function ( optionalTarget ) {
	
				var result = optionalTarget || new THREE.Vector3();
	
				this.getWorldQuaternion( quaternion );
	
				return result.set( 0, 0, 1 ).applyQuaternion( quaternion );
	
			};
	
		}(),
	
		raycast: function () {},
	
		traverse: function ( callback ) {
	
			callback( this );
	
			var children = this.children;
	
			for ( var i = 0, l = children.length; i < l; i ++ ) {
	
				children[ i ].traverse( callback );
	
			}
	
		},
	
		traverseVisible: function ( callback ) {
	
			if ( this.visible === false ) return;
	
			callback( this );
	
			var children = this.children;
	
			for ( var i = 0, l = children.length; i < l; i ++ ) {
	
				children[ i ].traverseVisible( callback );
	
			}
	
		},
	
		traverseAncestors: function ( callback ) {
	
			var parent = this.parent;
	
			if ( parent !== null ) {
	
				callback( parent );
	
				parent.traverseAncestors( callback );
	
			}
	
		},
	
		updateMatrix: function () {
	
			this.matrix.compose( this.position, this.quaternion, this.scale );
	
			this.matrixWorldNeedsUpdate = true;
	
		},
	
		updateMatrixWorld: function ( force ) {
	
			if ( this.matrixAutoUpdate === true ) this.updateMatrix();
	
			if ( this.matrixWorldNeedsUpdate === true || force === true ) {
	
				if ( this.parent === null ) {
	
					this.matrixWorld.copy( this.matrix );
	
				} else {
	
					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );
	
				}
	
				this.matrixWorldNeedsUpdate = false;
	
				force = true;
	
			}
	
			// update children
	
			for ( var i = 0, l = this.children.length; i < l; i ++ ) {
	
				this.children[ i ].updateMatrixWorld( force );
	
			}
	
		},
	
		toJSON: function ( meta ) {
	
			var isRootObject = ( meta === undefined );
	
			var output = {};
	
			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {
	
				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {}
				};
	
				output.metadata = {
					version: 4.4,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};
	
			}
	
			// standard Object3D serialization
	
			var object = {};
	
			object.uuid = this.uuid;
			object.type = this.type;
	
			if ( this.name !== '' ) object.name = this.name;
			if ( JSON.stringify( this.userData ) !== '{}' ) object.userData = this.userData;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
	
			object.matrix = this.matrix.toArray();
	
			//
	
			if ( this.geometry !== undefined ) {
	
				if ( meta.geometries[ this.geometry.uuid ] === undefined ) {
	
					meta.geometries[ this.geometry.uuid ] = this.geometry.toJSON( meta );
	
				}
	
				object.geometry = this.geometry.uuid;
	
			}
	
			if ( this.material !== undefined ) {
	
				if ( meta.materials[ this.material.uuid ] === undefined ) {
	
					meta.materials[ this.material.uuid ] = this.material.toJSON( meta );
	
				}
	
				object.material = this.material.uuid;
	
			}
	
			//
	
			if ( this.children.length > 0 ) {
	
				object.children = [];
	
				for ( var i = 0; i < this.children.length; i ++ ) {
	
					object.children.push( this.children[ i ].toJSON( meta ).object );
	
				}
	
			}
	
			if ( isRootObject ) {
	
				var geometries = extractFromCache( meta.geometries );
				var materials = extractFromCache( meta.materials );
				var textures = extractFromCache( meta.textures );
				var images = extractFromCache( meta.images );
	
				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
	
			}
	
			output.object = object;
	
			return output;
	
			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache ( cache ) {
	
				var values = [];
				for ( var key in cache ) {
	
					var data = cache[ key ];
					delete data.metadata;
					values.push( data );
	
				}
				return values;
	
			}
	
		},
	
		clone: function ( recursive ) {
	
			return new this.constructor().copy( this, recursive );
	
		},
	
		copy: function ( source, recursive ) {
	
			if ( recursive === undefined ) recursive = true;
	
			this.name = source.name;
	
			this.up.copy( source.up );
	
			this.position.copy( source.position );
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );
	
			this.rotationAutoUpdate = source.rotationAutoUpdate;
	
			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );
	
			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
	
			this.visible = source.visible;
	
			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;
	
			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;
	
			this.userData = JSON.parse( JSON.stringify( source.userData ) );
	
			if ( recursive === true ) {
	
				for ( var i = 0; i < source.children.length; i ++ ) {
	
					var child = source.children[ i ];
					this.add( child.clone() );
	
				}
	
			}
	
			return this;
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );
	
	THREE.Object3DIdCount = 0;
	
	// File:src/core/Face3.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {
	
		this.a = a;
		this.b = b;
		this.c = c;
	
		this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
		this.vertexNormals = Array.isArray( normal ) ? normal : [];
	
		this.color = color instanceof THREE.Color ? color : new THREE.Color();
		this.vertexColors = Array.isArray( color ) ? color : [];
	
		this.materialIndex = materialIndex !== undefined ? materialIndex : 0;
	
	};
	
	THREE.Face3.prototype = {
	
		constructor: THREE.Face3,
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			this.a = source.a;
			this.b = source.b;
			this.c = source.c;
	
			this.normal.copy( source.normal );
			this.color.copy( source.color );
	
			this.materialIndex = source.materialIndex;
	
			for ( var i = 0, il = source.vertexNormals.length; i < il; i ++ ) {
	
				this.vertexNormals[ i ] = source.vertexNormals[ i ].clone();
	
			}
	
			for ( var i = 0, il = source.vertexColors.length; i < il; i ++ ) {
	
				this.vertexColors[ i ] = source.vertexColors[ i ].clone();
	
			}
	
			return this;
	
		}
	
	};
	
	// File:src/core/Face4.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {
	
		console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' );
		return new THREE.Face3( a, b, c, normal, color, materialIndex );
	
	};
	
	// File:src/core/BufferAttribute.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.BufferAttribute = function ( array, itemSize ) {
	
		this.uuid = THREE.Math.generateUUID();
	
		this.array = array;
		this.itemSize = itemSize;
	
		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };
	
		this.version = 0;
	
	};
	
	THREE.BufferAttribute.prototype = {
	
		constructor: THREE.BufferAttribute,
	
		get length() {
	
			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
			return this.array.length;
	
		},
	
		get count() {
	
			return this.array.length / this.itemSize;
	
		},
	
		set needsUpdate( value ) {
	
			if ( value === true ) this.version ++;
	
		},
	
		setDynamic: function ( value ) {
	
			this.dynamic = value;
	
			return this;
	
		},
	
		copy: function ( source ) {
	
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
	
			this.dynamic = source.dynamic;
	
			return this;
	
		},
	
		copyAt: function ( index1, attribute, index2 ) {
	
			index1 *= this.itemSize;
			index2 *= attribute.itemSize;
	
			for ( var i = 0, l = this.itemSize; i < l; i ++ ) {
	
				this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
			}
	
			return this;
	
		},
	
		copyArray: function ( array ) {
	
			this.array.set( array );
	
			return this;
	
		},
	
		copyColorsArray: function ( colors ) {
	
			var array = this.array, offset = 0;
	
			for ( var i = 0, l = colors.length; i < l; i ++ ) {
	
				var color = colors[ i ];
	
				if ( color === undefined ) {
	
					console.warn( 'THREE.BufferAttribute.copyColorsArray(): color is undefined', i );
					color = new THREE.Color();
	
				}
	
				array[ offset ++ ] = color.r;
				array[ offset ++ ] = color.g;
				array[ offset ++ ] = color.b;
	
			}
	
			return this;
	
		},
	
		copyIndicesArray: function ( indices ) {
	
			var array = this.array, offset = 0;
	
			for ( var i = 0, l = indices.length; i < l; i ++ ) {
	
				var index = indices[ i ];
	
				array[ offset ++ ] = index.a;
				array[ offset ++ ] = index.b;
				array[ offset ++ ] = index.c;
	
			}
	
			return this;
	
		},
	
		copyVector2sArray: function ( vectors ) {
	
			var array = this.array, offset = 0;
	
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
				var vector = vectors[ i ];
	
				if ( vector === undefined ) {
	
					console.warn( 'THREE.BufferAttribute.copyVector2sArray(): vector is undefined', i );
					vector = new THREE.Vector2();
	
				}
	
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
	
			}
	
			return this;
	
		},
	
		copyVector3sArray: function ( vectors ) {
	
			var array = this.array, offset = 0;
	
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
				var vector = vectors[ i ];
	
				if ( vector === undefined ) {
	
					console.warn( 'THREE.BufferAttribute.copyVector3sArray(): vector is undefined', i );
					vector = new THREE.Vector3();
	
				}
	
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
	
			}
	
			return this;
	
		},
	
		copyVector4sArray: function ( vectors ) {
	
			var array = this.array, offset = 0;
	
			for ( var i = 0, l = vectors.length; i < l; i ++ ) {
	
				var vector = vectors[ i ];
	
				if ( vector === undefined ) {
	
					console.warn( 'THREE.BufferAttribute.copyVector4sArray(): vector is undefined', i );
					vector = new THREE.Vector4();
	
				}
	
				array[ offset ++ ] = vector.x;
				array[ offset ++ ] = vector.y;
				array[ offset ++ ] = vector.z;
				array[ offset ++ ] = vector.w;
	
			}
	
			return this;
	
		},
	
		set: function ( value, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.array.set( value, offset );
	
			return this;
	
		},
	
		getX: function ( index ) {
	
			return this.array[ index * this.itemSize ];
	
		},
	
		setX: function ( index, x ) {
	
			this.array[ index * this.itemSize ] = x;
	
			return this;
	
		},
	
		getY: function ( index ) {
	
			return this.array[ index * this.itemSize + 1 ];
	
		},
	
		setY: function ( index, y ) {
	
			this.array[ index * this.itemSize + 1 ] = y;
	
			return this;
	
		},
	
		getZ: function ( index ) {
	
			return this.array[ index * this.itemSize + 2 ];
	
		},
	
		setZ: function ( index, z ) {
	
			this.array[ index * this.itemSize + 2 ] = z;
	
			return this;
	
		},
	
		getW: function ( index ) {
	
			return this.array[ index * this.itemSize + 3 ];
	
		},
	
		setW: function ( index, w ) {
	
			this.array[ index * this.itemSize + 3 ] = w;
	
			return this;
	
		},
	
		setXY: function ( index, x, y ) {
	
			index *= this.itemSize;
	
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
	
			return this;
	
		},
	
		setXYZ: function ( index, x, y, z ) {
	
			index *= this.itemSize;
	
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
	
			return this;
	
		},
	
		setXYZW: function ( index, x, y, z, w ) {
	
			index *= this.itemSize;
	
			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		}
	
	};
	
	//
	
	THREE.Int8Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Int8Array( array ), itemSize );
	
	};
	
	THREE.Uint8Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Uint8Array( array ), itemSize );
	
	};
	
	THREE.Uint8ClampedAttribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Uint8ClampedArray( array ), itemSize );
	
	};
	
	THREE.Int16Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Int16Array( array ), itemSize );
	
	};
	
	THREE.Uint16Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Uint16Array( array ), itemSize );
	
	};
	
	THREE.Int32Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Int32Array( array ), itemSize );
	
	};
	
	THREE.Uint32Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Uint32Array( array ), itemSize );
	
	};
	
	THREE.Float32Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Float32Array( array ), itemSize );
	
	};
	
	THREE.Float64Attribute = function ( array, itemSize ) {
	
		return new THREE.BufferAttribute( new Float64Array( array ), itemSize );
	
	};
	
	
	// Deprecated
	
	THREE.DynamicBufferAttribute = function ( array, itemSize ) {
	
		console.warn( 'THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setDynamic( true ) instead.' );
		return new THREE.BufferAttribute( array, itemSize ).setDynamic( true );
	
	};
	
	// File:src/core/InstancedBufferAttribute.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.InstancedBufferAttribute = function ( array, itemSize, meshPerAttribute ) {
	
		THREE.BufferAttribute.call( this, array, itemSize );
	
		this.meshPerAttribute = meshPerAttribute || 1;
	
	};
	
	THREE.InstancedBufferAttribute.prototype = Object.create( THREE.BufferAttribute.prototype );
	THREE.InstancedBufferAttribute.prototype.constructor = THREE.InstancedBufferAttribute;
	
	THREE.InstancedBufferAttribute.prototype.copy = function ( source ) {
	
		THREE.BufferAttribute.prototype.copy.call( this, source );
	
		this.meshPerAttribute = source.meshPerAttribute;
	
		return this;
	
	};
	
	// File:src/core/InterleavedBuffer.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.InterleavedBuffer = function ( array, stride ) {
	
		this.uuid = THREE.Math.generateUUID();
	
		this.array = array;
		this.stride = stride;
	
		this.dynamic = false;
		this.updateRange = { offset: 0, count: - 1 };
	
		this.version = 0;
	
	};
	
	THREE.InterleavedBuffer.prototype = {
	
		constructor: THREE.InterleavedBuffer,
	
		get length () {
	
			return this.array.length;
	
		},
	
		get count () {
	
			return this.array.length / this.stride;
	
		},
	
		set needsUpdate( value ) {
	
			if ( value === true ) this.version ++;
	
		},
	
		setDynamic: function ( value ) {
	
			this.dynamic = value;
	
			return this;
	
		},
	
		copy: function ( source ) {
	
			this.array = new source.array.constructor( source.array );
			this.stride = source.stride;
			this.dynamic = source.dynamic;
	
		},
	
		copyAt: function ( index1, attribute, index2 ) {
	
			index1 *= this.stride;
			index2 *= attribute.stride;
	
			for ( var i = 0, l = this.stride; i < l; i ++ ) {
	
				this.array[ index1 + i ] = attribute.array[ index2 + i ];
	
			}
	
			return this;
	
		},
	
		set: function ( value, offset ) {
	
			if ( offset === undefined ) offset = 0;
	
			this.array.set( value, offset );
	
			return this;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		}
	
	};
	
	// File:src/core/InstancedInterleavedBuffer.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.InstancedInterleavedBuffer = function ( array, stride, meshPerAttribute ) {
	
		THREE.InterleavedBuffer.call( this, array, stride );
	
		this.meshPerAttribute = meshPerAttribute || 1;
	
	};
	
	THREE.InstancedInterleavedBuffer.prototype = Object.create( THREE.InterleavedBuffer.prototype );
	THREE.InstancedInterleavedBuffer.prototype.constructor = THREE.InstancedInterleavedBuffer;
	
	THREE.InstancedInterleavedBuffer.prototype.copy = function ( source ) {
	
		THREE.InterleavedBuffer.prototype.copy.call( this, source );
	
		this.meshPerAttribute = source.meshPerAttribute;
	
		return this;
	
	};
	
	// File:src/core/InterleavedBufferAttribute.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.InterleavedBufferAttribute = function ( interleavedBuffer, itemSize, offset ) {
	
		this.uuid = THREE.Math.generateUUID();
	
		this.data = interleavedBuffer;
		this.itemSize = itemSize;
		this.offset = offset;
	
	};
	
	
	THREE.InterleavedBufferAttribute.prototype = {
	
		constructor: THREE.InterleavedBufferAttribute,
	
		get length() {
	
			console.warn( 'THREE.BufferAttribute: .length has been deprecated. Please use .count.' );
			return this.array.length;
	
		},
	
		get count() {
	
			return this.data.array.length / this.data.stride;
	
		},
	
		setX: function ( index, x ) {
	
			this.data.array[ index * this.data.stride + this.offset ] = x;
	
			return this;
	
		},
	
		setY: function ( index, y ) {
	
			this.data.array[ index * this.data.stride + this.offset + 1 ] = y;
	
			return this;
	
		},
	
		setZ: function ( index, z ) {
	
			this.data.array[ index * this.data.stride + this.offset + 2 ] = z;
	
			return this;
	
		},
	
		setW: function ( index, w ) {
	
			this.data.array[ index * this.data.stride + this.offset + 3 ] = w;
	
			return this;
	
		},
	
		getX: function ( index ) {
	
			return this.data.array[ index * this.data.stride + this.offset ];
	
		},
	
		getY: function ( index ) {
	
			return this.data.array[ index * this.data.stride + this.offset + 1 ];
	
		},
	
		getZ: function ( index ) {
	
			return this.data.array[ index * this.data.stride + this.offset + 2 ];
	
		},
	
		getW: function ( index ) {
	
			return this.data.array[ index * this.data.stride + this.offset + 3 ];
	
		},
	
		setXY: function ( index, x, y ) {
	
			index = index * this.data.stride + this.offset;
	
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
	
			return this;
	
		},
	
		setXYZ: function ( index, x, y, z ) {
	
			index = index * this.data.stride + this.offset;
	
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
	
			return this;
	
		},
	
		setXYZW: function ( index, x, y, z, w ) {
	
			index = index * this.data.stride + this.offset;
	
			this.data.array[ index + 0 ] = x;
			this.data.array[ index + 1 ] = y;
			this.data.array[ index + 2 ] = z;
			this.data.array[ index + 3 ] = w;
	
			return this;
	
		}
	
	};
	
	// File:src/core/Geometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author kile / http://kile.stravaganza.org/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * @author bhouston / http://clara.io
	 */
	
	THREE.Geometry = function () {
	
		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.type = 'Geometry';
	
		this.vertices = [];
		this.colors = [];
		this.faces = [];
		this.faceVertexUvs = [ [] ];
	
		this.morphTargets = [];
		this.morphNormals = [];
	
		this.skinWeights = [];
		this.skinIndices = [];
	
		this.lineDistances = [];
	
		this.boundingBox = null;
		this.boundingSphere = null;
	
		// update flags
	
		this.verticesNeedUpdate = false;
		this.elementsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.lineDistancesNeedUpdate = false;
		this.groupsNeedUpdate = false;
	
	};
	
	THREE.Geometry.prototype = {
	
		constructor: THREE.Geometry,
	
		applyMatrix: function ( matrix ) {
	
			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
	
			for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {
	
				var vertex = this.vertices[ i ];
				vertex.applyMatrix4( matrix );
	
			}
	
			for ( var i = 0, il = this.faces.length; i < il; i ++ ) {
	
				var face = this.faces[ i ];
				face.normal.applyMatrix3( normalMatrix ).normalize();
	
				for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
					face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();
	
				}
	
			}
	
			if ( this.boundingBox !== null ) {
	
				this.computeBoundingBox();
	
			}
	
			if ( this.boundingSphere !== null ) {
	
				this.computeBoundingSphere();
	
			}
	
			this.verticesNeedUpdate = true;
			this.normalsNeedUpdate = true;
	
		},
	
		rotateX: function () {
	
			// rotate geometry around world x-axis
	
			var m1;
	
			return function rotateX( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationX( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		rotateY: function () {
	
			// rotate geometry around world y-axis
	
			var m1;
	
			return function rotateY( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationY( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		rotateZ: function () {
	
			// rotate geometry around world z-axis
	
			var m1;
	
			return function rotateZ( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationZ( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		translate: function () {
	
			// translate geometry
	
			var m1;
	
			return function translate( x, y, z ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeTranslation( x, y, z );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		scale: function () {
	
			// scale geometry
	
			var m1;
	
			return function scale( x, y, z ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeScale( x, y, z );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		lookAt: function () {
	
			var obj;
	
			return function lookAt( vector ) {
	
				if ( obj === undefined ) obj = new THREE.Object3D();
	
				obj.lookAt( vector );
	
				obj.updateMatrix();
	
				this.applyMatrix( obj.matrix );
	
			};
	
		}(),
	
		fromBufferGeometry: function ( geometry ) {
	
			var scope = this;
	
			var indices = geometry.index !== null ? geometry.index.array : undefined;
			var attributes = geometry.attributes;
	
			var vertices = attributes.position.array;
			var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
			var colors = attributes.color !== undefined ? attributes.color.array : undefined;
			var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;
			var uvs2 = attributes.uv2 !== undefined ? attributes.uv2.array : undefined;
	
			if ( uvs2 !== undefined ) this.faceVertexUvs[ 1 ] = [];
	
			var tempNormals = [];
			var tempUVs = [];
			var tempUVs2 = [];
	
			for ( var i = 0, j = 0, k = 0; i < vertices.length; i += 3, j += 2, k += 4 ) {
	
				scope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );
	
				if ( normals !== undefined ) {
	
					tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );
	
				}
	
				if ( colors !== undefined ) {
	
					scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );
	
				}
	
				if ( uvs !== undefined ) {
	
					tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );
	
				}
	
				if ( uvs2 !== undefined ) {
	
					tempUVs2.push( new THREE.Vector2( uvs2[ j ], uvs2[ j + 1 ] ) );
	
				}
	
			}
	
			function addFace( a, b, c ) {
	
				var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
				var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];
	
				var face = new THREE.Face3( a, b, c, vertexNormals, vertexColors );
	
				scope.faces.push( face );
	
				if ( uvs !== undefined ) {
	
					scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ].clone(), tempUVs[ b ].clone(), tempUVs[ c ].clone() ] );
	
				}
	
				if ( uvs2 !== undefined ) {
	
					scope.faceVertexUvs[ 1 ].push( [ tempUVs2[ a ].clone(), tempUVs2[ b ].clone(), tempUVs2[ c ].clone() ] );
	
				}
	
			};
	
			if ( indices !== undefined ) {
	
				var groups = geometry.groups;
	
				if ( groups.length > 0 ) {
	
					for ( var i = 0; i < groups.length; i ++ ) {
	
						var group = groups[ i ];
	
						var start = group.start;
						var count = group.count;
	
						for ( var j = start, jl = start + count; j < jl; j += 3 ) {
	
							addFace( indices[ j ], indices[ j + 1 ], indices[ j + 2 ] );
	
						}
	
					}
	
				} else {
	
					for ( var i = 0; i < indices.length; i += 3 ) {
	
						addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );
	
					}
	
				}
	
			} else {
	
				for ( var i = 0; i < vertices.length / 3; i += 3 ) {
	
					addFace( i, i + 1, i + 2 );
	
				}
	
			}
	
			this.computeFaceNormals();
	
			if ( geometry.boundingBox !== null ) {
	
				this.boundingBox = geometry.boundingBox.clone();
	
			}
	
			if ( geometry.boundingSphere !== null ) {
	
				this.boundingSphere = geometry.boundingSphere.clone();
	
			}
	
			return this;
	
		},
	
		center: function () {
	
			this.computeBoundingBox();
	
			var offset = this.boundingBox.center().negate();
	
			this.translate( offset.x, offset.y, offset.z );
	
			return offset;
	
		},
	
		normalize: function () {
	
			this.computeBoundingSphere();
	
			var center = this.boundingSphere.center;
			var radius = this.boundingSphere.radius;
	
			var s = radius === 0 ? 1 : 1.0 / radius;
	
			var matrix = new THREE.Matrix4();
			matrix.set(
				s, 0, 0, - s * center.x,
				0, s, 0, - s * center.y,
				0, 0, s, - s * center.z,
				0, 0, 0, 1
			);
	
			this.applyMatrix( matrix );
	
			return this;
	
		},
	
		computeFaceNormals: function () {
	
			var cb = new THREE.Vector3(), ab = new THREE.Vector3();
	
			for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
				var face = this.faces[ f ];
	
				var vA = this.vertices[ face.a ];
				var vB = this.vertices[ face.b ];
				var vC = this.vertices[ face.c ];
	
				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );
	
				cb.normalize();
	
				face.normal.copy( cb );
	
			}
	
		},
	
		computeVertexNormals: function ( areaWeighted ) {
	
			var v, vl, f, fl, face, vertices;
	
			vertices = new Array( this.vertices.length );
	
			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
				vertices[ v ] = new THREE.Vector3();
	
			}
	
			if ( areaWeighted ) {
	
				// vertex normals weighted by triangle areas
				// http://www.iquilezles.org/www/articles/normals/normals.htm
	
				var vA, vB, vC;
				var cb = new THREE.Vector3(), ab = new THREE.Vector3();
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					vA = this.vertices[ face.a ];
					vB = this.vertices[ face.b ];
					vC = this.vertices[ face.c ];
	
					cb.subVectors( vC, vB );
					ab.subVectors( vA, vB );
					cb.cross( ab );
	
					vertices[ face.a ].add( cb );
					vertices[ face.b ].add( cb );
					vertices[ face.c ].add( cb );
	
				}
	
			} else {
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					vertices[ face.a ].add( face.normal );
					vertices[ face.b ].add( face.normal );
					vertices[ face.c ].add( face.normal );
	
				}
	
			}
	
			for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {
	
				vertices[ v ].normalize();
	
			}
	
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
				face = this.faces[ f ];
	
				var vertexNormals = face.vertexNormals;
	
				if ( vertexNormals.length === 3 ) {
	
					vertexNormals[ 0 ].copy( vertices[ face.a ] );
					vertexNormals[ 1 ].copy( vertices[ face.b ] );
					vertexNormals[ 2 ].copy( vertices[ face.c ] );
	
				} else {
	
					vertexNormals[ 0 ] = vertices[ face.a ].clone();
					vertexNormals[ 1 ] = vertices[ face.b ].clone();
					vertexNormals[ 2 ] = vertices[ face.c ].clone();
	
				}
	
			}
	
		},
	
		computeMorphNormals: function () {
	
			var i, il, f, fl, face;
	
			// save original normals
			// - create temp variables on first access
			//   otherwise just copy (for faster repeated calls)
	
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
				face = this.faces[ f ];
	
				if ( ! face.__originalFaceNormal ) {
	
					face.__originalFaceNormal = face.normal.clone();
	
				} else {
	
					face.__originalFaceNormal.copy( face.normal );
	
				}
	
				if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];
	
				for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {
	
					if ( ! face.__originalVertexNormals[ i ] ) {
	
						face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();
	
					} else {
	
						face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );
	
					}
	
				}
	
			}
	
			// use temp geometry to compute face and vertex normals for each morph
	
			var tmpGeo = new THREE.Geometry();
			tmpGeo.faces = this.faces;
	
			for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {
	
				// create on first access
	
				if ( ! this.morphNormals[ i ] ) {
	
					this.morphNormals[ i ] = {};
					this.morphNormals[ i ].faceNormals = [];
					this.morphNormals[ i ].vertexNormals = [];
	
					var dstNormalsFace = this.morphNormals[ i ].faceNormals;
					var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;
	
					var faceNormal, vertexNormals;
	
					for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
						faceNormal = new THREE.Vector3();
						vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };
	
						dstNormalsFace.push( faceNormal );
						dstNormalsVertex.push( vertexNormals );
	
					}
	
				}
	
				var morphNormals = this.morphNormals[ i ];
	
				// set vertices to morph target
	
				tmpGeo.vertices = this.morphTargets[ i ].vertices;
	
				// compute morph normals
	
				tmpGeo.computeFaceNormals();
				tmpGeo.computeVertexNormals();
	
				// store morph normals
	
				var faceNormal, vertexNormals;
	
				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
					face = this.faces[ f ];
	
					faceNormal = morphNormals.faceNormals[ f ];
					vertexNormals = morphNormals.vertexNormals[ f ];
	
					faceNormal.copy( face.normal );
	
					vertexNormals.a.copy( face.vertexNormals[ 0 ] );
					vertexNormals.b.copy( face.vertexNormals[ 1 ] );
					vertexNormals.c.copy( face.vertexNormals[ 2 ] );
	
				}
	
			}
	
			// restore original normals
	
			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {
	
				face = this.faces[ f ];
	
				face.normal = face.__originalFaceNormal;
				face.vertexNormals = face.__originalVertexNormals;
	
			}
	
		},
	
		computeTangents: function () {
	
			console.warn( 'THREE.Geometry: .computeTangents() has been removed.' );
	
		},
	
		computeLineDistances: function () {
	
			var d = 0;
			var vertices = this.vertices;
	
			for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
				if ( i > 0 ) {
	
					d += vertices[ i ].distanceTo( vertices[ i - 1 ] );
	
				}
	
				this.lineDistances[ i ] = d;
	
			}
	
		},
	
		computeBoundingBox: function () {
	
			if ( this.boundingBox === null ) {
	
				this.boundingBox = new THREE.Box3();
	
			}
	
			this.boundingBox.setFromPoints( this.vertices );
	
		},
	
		computeBoundingSphere: function () {
	
			if ( this.boundingSphere === null ) {
	
				this.boundingSphere = new THREE.Sphere();
	
			}
	
			this.boundingSphere.setFromPoints( this.vertices );
	
		},
	
		merge: function ( geometry, matrix, materialIndexOffset ) {
	
			if ( geometry instanceof THREE.Geometry === false ) {
	
				console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
				return;
	
			}
	
			var normalMatrix,
			vertexOffset = this.vertices.length,
			vertices1 = this.vertices,
			vertices2 = geometry.vertices,
			faces1 = this.faces,
			faces2 = geometry.faces,
			uvs1 = this.faceVertexUvs[ 0 ],
			uvs2 = geometry.faceVertexUvs[ 0 ];
	
			if ( materialIndexOffset === undefined ) materialIndexOffset = 0;
	
			if ( matrix !== undefined ) {
	
				normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
	
			}
	
			// vertices
	
			for ( var i = 0, il = vertices2.length; i < il; i ++ ) {
	
				var vertex = vertices2[ i ];
	
				var vertexCopy = vertex.clone();
	
				if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );
	
				vertices1.push( vertexCopy );
	
			}
	
			// faces
	
			for ( i = 0, il = faces2.length; i < il; i ++ ) {
	
				var face = faces2[ i ], faceCopy, normal, color,
				faceVertexNormals = face.vertexNormals,
				faceVertexColors = face.vertexColors;
	
				faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
				faceCopy.normal.copy( face.normal );
	
				if ( normalMatrix !== undefined ) {
	
					faceCopy.normal.applyMatrix3( normalMatrix ).normalize();
	
				}
	
				for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {
	
					normal = faceVertexNormals[ j ].clone();
	
					if ( normalMatrix !== undefined ) {
	
						normal.applyMatrix3( normalMatrix ).normalize();
	
					}
	
					faceCopy.vertexNormals.push( normal );
	
				}
	
				faceCopy.color.copy( face.color );
	
				for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {
	
					color = faceVertexColors[ j ];
					faceCopy.vertexColors.push( color.clone() );
	
				}
	
				faceCopy.materialIndex = face.materialIndex + materialIndexOffset;
	
				faces1.push( faceCopy );
	
			}
	
			// uvs
	
			for ( i = 0, il = uvs2.length; i < il; i ++ ) {
	
				var uv = uvs2[ i ], uvCopy = [];
	
				if ( uv === undefined ) {
	
					continue;
	
				}
	
				for ( var j = 0, jl = uv.length; j < jl; j ++ ) {
	
					uvCopy.push( uv[ j ].clone() );
	
				}
	
				uvs1.push( uvCopy );
	
			}
	
		},
	
		mergeMesh: function ( mesh ) {
	
			if ( mesh instanceof THREE.Mesh === false ) {
	
				console.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );
				return;
	
			}
	
			mesh.matrixAutoUpdate && mesh.updateMatrix();
	
			this.merge( mesh.geometry, mesh.matrix );
	
		},
	
		/*
		 * Checks for duplicate vertices with hashmap.
		 * Duplicated vertices are removed
		 * and faces' vertices are updated.
		 */
	
		mergeVertices: function () {
	
			var verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)
			var unique = [], changes = [];
	
			var v, key;
			var precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001
			var precision = Math.pow( 10, precisionPoints );
			var i, il, face;
			var indices, j, jl;
	
			for ( i = 0, il = this.vertices.length; i < il; i ++ ) {
	
				v = this.vertices[ i ];
				key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );
	
				if ( verticesMap[ key ] === undefined ) {
	
					verticesMap[ key ] = i;
					unique.push( this.vertices[ i ] );
					changes[ i ] = unique.length - 1;
	
				} else {
	
					//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
					changes[ i ] = changes[ verticesMap[ key ] ];
	
				}
	
			}
	
	
			// if faces are completely degenerate after merging vertices, we
			// have to remove them from the geometry.
			var faceIndicesToRemove = [];
	
			for ( i = 0, il = this.faces.length; i < il; i ++ ) {
	
				face = this.faces[ i ];
	
				face.a = changes[ face.a ];
				face.b = changes[ face.b ];
				face.c = changes[ face.c ];
	
				indices = [ face.a, face.b, face.c ];
	
				var dupIndex = - 1;
	
				// if any duplicate vertices are found in a Face3
				// we have to remove the face as nothing can be saved
				for ( var n = 0; n < 3; n ++ ) {
	
					if ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {
	
						dupIndex = n;
						faceIndicesToRemove.push( i );
						break;
	
					}
	
				}
	
			}
	
			for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
	
				var idx = faceIndicesToRemove[ i ];
	
				this.faces.splice( idx, 1 );
	
				for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {
	
					this.faceVertexUvs[ j ].splice( idx, 1 );
	
				}
	
			}
	
			// Use unique set of vertices
	
			var diff = this.vertices.length - unique.length;
			this.vertices = unique;
			return diff;
	
		},
	
		sortFacesByMaterialIndex: function () {
	
			var faces = this.faces;
			var length = faces.length;
	
			// tag faces
	
			for ( var i = 0; i < length; i ++ ) {
	
				faces[ i ]._id = i;
	
			}
	
			// sort faces
	
			function materialIndexSort( a, b ) {
	
				return a.materialIndex - b.materialIndex;
	
			}
	
			faces.sort( materialIndexSort );
	
			// sort uvs
	
			var uvs1 = this.faceVertexUvs[ 0 ];
			var uvs2 = this.faceVertexUvs[ 1 ];
	
			var newUvs1, newUvs2;
	
			if ( uvs1 && uvs1.length === length ) newUvs1 = [];
			if ( uvs2 && uvs2.length === length ) newUvs2 = [];
	
			for ( var i = 0; i < length; i ++ ) {
	
				var id = faces[ i ]._id;
	
				if ( newUvs1 ) newUvs1.push( uvs1[ id ] );
				if ( newUvs2 ) newUvs2.push( uvs2[ id ] );
	
			}
	
			if ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;
			if ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;
	
		},
	
		toJSON: function () {
	
			var data = {
				metadata: {
					version: 4.4,
					type: 'Geometry',
					generator: 'Geometry.toJSON'
				}
			};
	
			// standard Geometry serialization
	
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
	
			if ( this.parameters !== undefined ) {
	
				var parameters = this.parameters;
	
				for ( var key in parameters ) {
	
					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
				}
	
				return data;
	
			}
	
			var vertices = [];
	
			for ( var i = 0; i < this.vertices.length; i ++ ) {
	
				var vertex = this.vertices[ i ];
				vertices.push( vertex.x, vertex.y, vertex.z );
	
			}
	
			var faces = [];
			var normals = [];
			var normalsHash = {};
			var colors = [];
			var colorsHash = {};
			var uvs = [];
			var uvsHash = {};
	
			for ( var i = 0; i < this.faces.length; i ++ ) {
	
				var face = this.faces[ i ];
	
				var hasMaterial = false; // face.materialIndex !== undefined;
				var hasFaceUv = false; // deprecated
				var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
				var hasFaceNormal = face.normal.length() > 0;
				var hasFaceVertexNormal = face.vertexNormals.length > 0;
				var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
				var hasFaceVertexColor = face.vertexColors.length > 0;
	
				var faceType = 0;
	
				faceType = setBit( faceType, 0, 0 );
				faceType = setBit( faceType, 1, hasMaterial );
				faceType = setBit( faceType, 2, hasFaceUv );
				faceType = setBit( faceType, 3, hasFaceVertexUv );
				faceType = setBit( faceType, 4, hasFaceNormal );
				faceType = setBit( faceType, 5, hasFaceVertexNormal );
				faceType = setBit( faceType, 6, hasFaceColor );
				faceType = setBit( faceType, 7, hasFaceVertexColor );
	
				faces.push( faceType );
				faces.push( face.a, face.b, face.c );
	
				if ( hasFaceVertexUv ) {
	
					var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];
	
					faces.push(
						getUvIndex( faceVertexUvs[ 0 ] ),
						getUvIndex( faceVertexUvs[ 1 ] ),
						getUvIndex( faceVertexUvs[ 2 ] )
					);
	
				}
	
				if ( hasFaceNormal ) {
	
					faces.push( getNormalIndex( face.normal ) );
	
				}
	
				if ( hasFaceVertexNormal ) {
	
					var vertexNormals = face.vertexNormals;
	
					faces.push(
						getNormalIndex( vertexNormals[ 0 ] ),
						getNormalIndex( vertexNormals[ 1 ] ),
						getNormalIndex( vertexNormals[ 2 ] )
					);
	
				}
	
				if ( hasFaceColor ) {
	
					faces.push( getColorIndex( face.color ) );
	
				}
	
				if ( hasFaceVertexColor ) {
	
					var vertexColors = face.vertexColors;
	
					faces.push(
						getColorIndex( vertexColors[ 0 ] ),
						getColorIndex( vertexColors[ 1 ] ),
						getColorIndex( vertexColors[ 2 ] )
					);
	
				}
	
			}
	
			function setBit( value, position, enabled ) {
	
				return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );
	
			}
	
			function getNormalIndex( normal ) {
	
				var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();
	
				if ( normalsHash[ hash ] !== undefined ) {
	
					return normalsHash[ hash ];
	
				}
	
				normalsHash[ hash ] = normals.length / 3;
				normals.push( normal.x, normal.y, normal.z );
	
				return normalsHash[ hash ];
	
			}
	
			function getColorIndex( color ) {
	
				var hash = color.r.toString() + color.g.toString() + color.b.toString();
	
				if ( colorsHash[ hash ] !== undefined ) {
	
					return colorsHash[ hash ];
	
				}
	
				colorsHash[ hash ] = colors.length;
				colors.push( color.getHex() );
	
				return colorsHash[ hash ];
	
			}
	
			function getUvIndex( uv ) {
	
				var hash = uv.x.toString() + uv.y.toString();
	
				if ( uvsHash[ hash ] !== undefined ) {
	
					return uvsHash[ hash ];
	
				}
	
				uvsHash[ hash ] = uvs.length / 2;
				uvs.push( uv.x, uv.y );
	
				return uvsHash[ hash ];
	
			}
	
			data.data = {};
	
			data.data.vertices = vertices;
			data.data.normals = normals;
			if ( colors.length > 0 ) data.data.colors = colors;
			if ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility
			data.data.faces = faces;
	
			return data;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			this.vertices = [];
			this.faces = [];
			this.faceVertexUvs = [ [] ];
	
			var vertices = source.vertices;
	
			for ( var i = 0, il = vertices.length; i < il; i ++ ) {
	
				this.vertices.push( vertices[ i ].clone() );
	
			}
	
			var faces = source.faces;
	
			for ( var i = 0, il = faces.length; i < il; i ++ ) {
	
				this.faces.push( faces[ i ].clone() );
	
			}
	
			for ( var i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {
	
				var faceVertexUvs = source.faceVertexUvs[ i ];
	
				if ( this.faceVertexUvs[ i ] === undefined ) {
	
					this.faceVertexUvs[ i ] = [];
	
				}
	
				for ( var j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {
	
					var uvs = faceVertexUvs[ j ], uvsCopy = [];
	
					for ( var k = 0, kl = uvs.length; k < kl; k ++ ) {
	
						var uv = uvs[ k ];
	
						uvsCopy.push( uv.clone() );
	
					}
	
					this.faceVertexUvs[ i ].push( uvsCopy );
	
				}
	
			}
	
			return this;
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );
	
	THREE.GeometryIdCount = 0;
	
	// File:src/core/DirectGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.DirectGeometry = function () {
	
		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.type = 'DirectGeometry';
	
		this.indices = [];
		this.vertices = [];
		this.normals = [];
		this.colors = [];
		this.uvs = [];
		this.uvs2 = [];
	
		this.groups = [];
	
		this.morphTargets = {};
	
		this.skinWeights = [];
		this.skinIndices = [];
	
		// this.lineDistances = [];
	
		this.boundingBox = null;
		this.boundingSphere = null;
	
		// update flags
	
		this.verticesNeedUpdate = false;
		this.normalsNeedUpdate = false;
		this.colorsNeedUpdate = false;
		this.uvsNeedUpdate = false;
		this.groupsNeedUpdate = false;
	
	};
	
	THREE.DirectGeometry.prototype = {
	
		constructor: THREE.DirectGeometry,
	
		computeBoundingBox: THREE.Geometry.prototype.computeBoundingBox,
		computeBoundingSphere: THREE.Geometry.prototype.computeBoundingSphere,
	
		computeFaceNormals: function () {
	
			console.warn( 'THREE.DirectGeometry: computeFaceNormals() is not a method of this type of geometry.' );
	
		},
	
		computeVertexNormals: function () {
	
			console.warn( 'THREE.DirectGeometry: computeVertexNormals() is not a method of this type of geometry.' );
	
		},
	
		computeGroups: function ( geometry ) {
	
			var group;
			var groups = [];
			var materialIndex;
	
			var faces = geometry.faces;
	
			for ( var i = 0; i < faces.length; i ++ ) {
	
				var face = faces[ i ];
	
				// materials
	
				if ( face.materialIndex !== materialIndex ) {
	
					materialIndex = face.materialIndex;
	
					if ( group !== undefined ) {
	
						group.count = ( i * 3 ) - group.start;
						groups.push( group );
	
					}
	
					group = {
						start: i * 3,
						materialIndex: materialIndex
					};
	
				}
	
			}
	
			if ( group !== undefined ) {
	
				group.count = ( i * 3 ) - group.start;
				groups.push( group );
	
			}
	
			this.groups = groups;
	
		},
	
		fromGeometry: function ( geometry ) {
	
			var faces = geometry.faces;
			var vertices = geometry.vertices;
			var faceVertexUvs = geometry.faceVertexUvs;
	
			var hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;
			var hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;
	
			// morphs
	
			var morphTargets = geometry.morphTargets;
			var morphTargetsLength = morphTargets.length;
	
			if ( morphTargetsLength > 0 ) {
	
				var morphTargetsPosition = [];
	
				for ( var i = 0; i < morphTargetsLength; i ++ ) {
	
					morphTargetsPosition[ i ] = [];
	
				}
	
				this.morphTargets.position = morphTargetsPosition;
	
			}
	
			var morphNormals = geometry.morphNormals;
			var morphNormalsLength = morphNormals.length;
	
			if ( morphNormalsLength > 0 ) {
	
				var morphTargetsNormal = [];
	
				for ( var i = 0; i < morphNormalsLength; i ++ ) {
	
					morphTargetsNormal[ i ] = [];
	
				}
	
				this.morphTargets.normal = morphTargetsNormal;
	
			}
	
			// skins
	
			var skinIndices = geometry.skinIndices;
			var skinWeights = geometry.skinWeights;
	
			var hasSkinIndices = skinIndices.length === vertices.length;
			var hasSkinWeights = skinWeights.length === vertices.length;
	
			//
	
			for ( var i = 0; i < faces.length; i ++ ) {
	
				var face = faces[ i ];
	
				this.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );
	
				var vertexNormals = face.vertexNormals;
	
				if ( vertexNormals.length === 3 ) {
	
					this.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );
	
				} else {
	
					var normal = face.normal;
	
					this.normals.push( normal, normal, normal );
	
				}
	
				var vertexColors = face.vertexColors;
	
				if ( vertexColors.length === 3 ) {
	
					this.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );
	
				} else {
	
					var color = face.color;
	
					this.colors.push( color, color, color );
	
				}
	
				if ( hasFaceVertexUv === true ) {
	
					var vertexUvs = faceVertexUvs[ 0 ][ i ];
	
					if ( vertexUvs !== undefined ) {
	
						this.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
					} else {
	
						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );
	
						this.uvs.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );
	
					}
	
				}
	
				if ( hasFaceVertexUv2 === true ) {
	
					var vertexUvs = faceVertexUvs[ 1 ][ i ];
	
					if ( vertexUvs !== undefined ) {
	
						this.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );
	
					} else {
	
						console.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );
	
						this.uvs2.push( new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() );
	
					}
	
				}
	
				// morphs
	
				for ( var j = 0; j < morphTargetsLength; j ++ ) {
	
					var morphTarget = morphTargets[ j ].vertices;
	
					morphTargetsPosition[ j ].push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );
	
				}
	
				for ( var j = 0; j < morphNormalsLength; j ++ ) {
	
					var morphNormal = morphNormals[ j ].vertexNormals[ i ];
	
					morphTargetsNormal[ j ].push( morphNormal.a, morphNormal.b, morphNormal.c );
	
				}
	
				// skins
	
				if ( hasSkinIndices ) {
	
					this.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );
	
				}
	
				if ( hasSkinWeights ) {
	
					this.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );
	
				}
	
			}
	
			this.computeGroups( geometry );
	
			this.verticesNeedUpdate = geometry.verticesNeedUpdate;
			this.normalsNeedUpdate = geometry.normalsNeedUpdate;
			this.colorsNeedUpdate = geometry.colorsNeedUpdate;
			this.uvsNeedUpdate = geometry.uvsNeedUpdate;
			this.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
			return this;
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.DirectGeometry.prototype );
	
	// File:src/core/BufferGeometry.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.BufferGeometry = function () {
	
		Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.type = 'BufferGeometry';
	
		this.index = null;
		this.attributes = {};
	
		this.morphAttributes = {};
	
		this.groups = [];
	
		this.boundingBox = null;
		this.boundingSphere = null;
	
		this.drawRange = { start: 0, count: Infinity };
	
	};
	
	THREE.BufferGeometry.prototype = {
	
		constructor: THREE.BufferGeometry,
	
		addIndex: function ( index ) {
	
			console.warn( 'THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().' );
			this.setIndex( index );
	
		},
	
		getIndex: function () {
	
			return this.index;
	
		},
	
		setIndex: function ( index ) {
	
			this.index = index;
	
		},
	
		addAttribute: function ( name, attribute ) {
	
			if ( attribute instanceof THREE.BufferAttribute === false && attribute instanceof THREE.InterleavedBufferAttribute === false ) {
	
				console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );
	
				this.addAttribute( name, new THREE.BufferAttribute( arguments[ 1 ], arguments[ 2 ] ) );
	
				return;
	
			}
	
			if ( name === 'index' ) {
	
				console.warn( 'THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.' );
				this.setIndex( attribute );
	
				return;
	
			}
	
			this.attributes[ name ] = attribute;
	
		},
	
		getAttribute: function ( name ) {
	
			return this.attributes[ name ];
	
		},
	
		removeAttribute: function ( name ) {
	
			delete this.attributes[ name ];
	
		},
	
		get drawcalls() {
	
			console.error( 'THREE.BufferGeometry: .drawcalls has been renamed to .groups.' );
			return this.groups;
	
		},
	
		get offsets() {
	
			console.warn( 'THREE.BufferGeometry: .offsets has been renamed to .groups.' );
			return this.groups;
	
		},
	
		addDrawCall: function ( start, count, indexOffset ) {
	
			if ( indexOffset !== undefined ) {
	
				console.warn( 'THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.' );
	
			}
	
			console.warn( 'THREE.BufferGeometry: .addDrawCall() is now .addGroup().' );
			this.addGroup( start, count );
	
		},
	
		clearDrawCalls: function () {
	
			console.warn( 'THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().' );
			this.clearGroups();
	
		},
	
		addGroup: function ( start, count, materialIndex ) {
	
			this.groups.push( {
	
				start: start,
				count: count,
				materialIndex: materialIndex !== undefined ? materialIndex : 0
	
			} );
	
		},
	
		clearGroups: function () {
	
			this.groups = [];
	
		},
	
		setDrawRange: function ( start, count ) {
	
			this.drawRange.start = start;
			this.drawRange.count = count;
	
		},
	
		applyMatrix: function ( matrix ) {
	
			var position = this.attributes.position;
	
			if ( position !== undefined ) {
	
				matrix.applyToVector3Array( position.array );
				position.needsUpdate = true;
	
			}
	
			var normal = this.attributes.normal;
	
			if ( normal !== undefined ) {
	
				var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
	
				normalMatrix.applyToVector3Array( normal.array );
				normal.needsUpdate = true;
	
			}
	
			if ( this.boundingBox !== null ) {
	
				this.computeBoundingBox();
	
			}
	
			if ( this.boundingSphere !== null ) {
	
				this.computeBoundingSphere();
	
			}
	
		},
	
		rotateX: function () {
	
			// rotate geometry around world x-axis
	
			var m1;
	
			return function rotateX( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationX( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		rotateY: function () {
	
			// rotate geometry around world y-axis
	
			var m1;
	
			return function rotateY( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationY( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		rotateZ: function () {
	
			// rotate geometry around world z-axis
	
			var m1;
	
			return function rotateZ( angle ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeRotationZ( angle );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		translate: function () {
	
			// translate geometry
	
			var m1;
	
			return function translate( x, y, z ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeTranslation( x, y, z );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		scale: function () {
	
			// scale geometry
	
			var m1;
	
			return function scale( x, y, z ) {
	
				if ( m1 === undefined ) m1 = new THREE.Matrix4();
	
				m1.makeScale( x, y, z );
	
				this.applyMatrix( m1 );
	
				return this;
	
			};
	
		}(),
	
		lookAt: function () {
	
			var obj;
	
			return function lookAt( vector ) {
	
				if ( obj === undefined ) obj = new THREE.Object3D();
	
				obj.lookAt( vector );
	
				obj.updateMatrix();
	
				this.applyMatrix( obj.matrix );
	
			};
	
		}(),
	
		center: function () {
	
			this.computeBoundingBox();
	
			var offset = this.boundingBox.center().negate();
	
			this.translate( offset.x, offset.y, offset.z );
	
			return offset;
	
		},
	
		setFromObject: function ( object ) {
	
			// console.log( 'THREE.BufferGeometry.setFromObject(). Converting', object, this );
	
			var geometry = object.geometry;
	
			if ( object instanceof THREE.Points || object instanceof THREE.Line ) {
	
				var positions = new THREE.Float32Attribute( geometry.vertices.length * 3, 3 );
				var colors = new THREE.Float32Attribute( geometry.colors.length * 3, 3 );
	
				this.addAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );
				this.addAttribute( 'color', colors.copyColorsArray( geometry.colors ) );
	
				if ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {
	
					var lineDistances = new THREE.Float32Attribute( geometry.lineDistances.length, 1 );
	
					this.addAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );
	
				}
	
				if ( geometry.boundingSphere !== null ) {
	
					this.boundingSphere = geometry.boundingSphere.clone();
	
				}
	
				if ( geometry.boundingBox !== null ) {
	
					this.boundingBox = geometry.boundingBox.clone();
	
				}
	
			} else if ( object instanceof THREE.Mesh ) {
	
				if ( geometry instanceof THREE.Geometry ) {
	
					this.fromGeometry( geometry );
	
				}
	
			}
	
			return this;
	
		},
	
		updateFromObject: function ( object ) {
	
			var geometry = object.geometry;
	
			if ( object instanceof THREE.Mesh ) {
	
				var direct = geometry.__directGeometry;
	
				if ( direct === undefined ) {
	
					return this.fromGeometry( geometry );
	
				}
	
				direct.verticesNeedUpdate = geometry.verticesNeedUpdate;
				direct.normalsNeedUpdate = geometry.normalsNeedUpdate;
				direct.colorsNeedUpdate = geometry.colorsNeedUpdate;
				direct.uvsNeedUpdate = geometry.uvsNeedUpdate;
				direct.groupsNeedUpdate = geometry.groupsNeedUpdate;
	
				geometry.verticesNeedUpdate = false;
				geometry.normalsNeedUpdate = false;
				geometry.colorsNeedUpdate = false;
				geometry.uvsNeedUpdate = false;
				geometry.groupsNeedUpdate = false;
	
				geometry = direct;
	
			}
	
			if ( geometry.verticesNeedUpdate === true ) {
	
				var attribute = this.attributes.position;
	
				if ( attribute !== undefined ) {
	
					attribute.copyVector3sArray( geometry.vertices );
					attribute.needsUpdate = true;
	
				}
	
				geometry.verticesNeedUpdate = false;
	
			}
	
			if ( geometry.normalsNeedUpdate === true ) {
	
				var attribute = this.attributes.normal;
	
				if ( attribute !== undefined ) {
	
					attribute.copyVector3sArray( geometry.normals );
					attribute.needsUpdate = true;
	
				}
	
				geometry.normalsNeedUpdate = false;
	
			}
	
			if ( geometry.colorsNeedUpdate === true ) {
	
				var attribute = this.attributes.color;
	
				if ( attribute !== undefined ) {
	
					attribute.copyColorsArray( geometry.colors );
					attribute.needsUpdate = true;
	
				}
	
				geometry.colorsNeedUpdate = false;
	
			}
	
			if ( geometry.uvsNeedUpdate ) {
	
					var attribute = this.attributes.uv;
	
					if ( attribute !== undefined ) {
	
							attribute.copyVector2sArray( geometry.uvs );
							attribute.needsUpdate = true;
	
					}
	
					geometry.uvsNeedUpdate = false;
	
			}
	
			if ( geometry.lineDistancesNeedUpdate ) {
	
				var attribute = this.attributes.lineDistance;
	
				if ( attribute !== undefined ) {
	
					attribute.copyArray( geometry.lineDistances );
					attribute.needsUpdate = true;
	
				}
	
				geometry.lineDistancesNeedUpdate = false;
	
			}
	
			if ( geometry.groupsNeedUpdate ) {
	
				geometry.computeGroups( object.geometry );
				this.groups = geometry.groups;
	
				geometry.groupsNeedUpdate = false;
	
			}
	
			return this;
	
		},
	
		fromGeometry: function ( geometry ) {
	
			geometry.__directGeometry = new THREE.DirectGeometry().fromGeometry( geometry );
	
			return this.fromDirectGeometry( geometry.__directGeometry );
	
		},
	
		fromDirectGeometry: function ( geometry ) {
	
			var positions = new Float32Array( geometry.vertices.length * 3 );
			this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );
	
			if ( geometry.normals.length > 0 ) {
	
				var normals = new Float32Array( geometry.normals.length * 3 );
				this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );
	
			}
	
			if ( geometry.colors.length > 0 ) {
	
				var colors = new Float32Array( geometry.colors.length * 3 );
				this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );
	
			}
	
			if ( geometry.uvs.length > 0 ) {
	
				var uvs = new Float32Array( geometry.uvs.length * 2 );
				this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );
	
			}
	
			if ( geometry.uvs2.length > 0 ) {
	
				var uvs2 = new Float32Array( geometry.uvs2.length * 2 );
				this.addAttribute( 'uv2', new THREE.BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );
	
			}
	
			if ( geometry.indices.length > 0 ) {
	
				var TypeArray = geometry.vertices.length > 65535 ? Uint32Array : Uint16Array;
				var indices = new TypeArray( geometry.indices.length * 3 );
				this.setIndex( new THREE.BufferAttribute( indices, 1 ).copyIndicesArray( geometry.indices ) );
	
			}
	
			// groups
	
			this.groups = geometry.groups;
	
			// morphs
	
			for ( var name in geometry.morphTargets ) {
	
				var array = [];
				var morphTargets = geometry.morphTargets[ name ];
	
				for ( var i = 0, l = morphTargets.length; i < l; i ++ ) {
	
					var morphTarget = morphTargets[ i ];
	
					var attribute = new THREE.Float32Attribute( morphTarget.length * 3, 3 );
	
					array.push( attribute.copyVector3sArray( morphTarget ) );
	
				}
	
				this.morphAttributes[ name ] = array;
	
			}
	
			// skinning
	
			if ( geometry.skinIndices.length > 0 ) {
	
				var skinIndices = new THREE.Float32Attribute( geometry.skinIndices.length * 4, 4 );
				this.addAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );
	
			}
	
			if ( geometry.skinWeights.length > 0 ) {
	
				var skinWeights = new THREE.Float32Attribute( geometry.skinWeights.length * 4, 4 );
				this.addAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );
	
			}
	
			//
	
			if ( geometry.boundingSphere !== null ) {
	
				this.boundingSphere = geometry.boundingSphere.clone();
	
			}
	
			if ( geometry.boundingBox !== null ) {
	
				this.boundingBox = geometry.boundingBox.clone();
	
			}
	
			return this;
	
		},
	
		computeBoundingBox: function () {
	
			var vector = new THREE.Vector3();
	
			return function () {
	
				if ( this.boundingBox === null ) {
	
					this.boundingBox = new THREE.Box3();
	
				}
	
				var positions = this.attributes.position.array;
	
				if ( positions ) {
	
					var bb = this.boundingBox;
					bb.makeEmpty();
	
					for ( var i = 0, il = positions.length; i < il; i += 3 ) {
	
						vector.fromArray( positions, i );
						bb.expandByPoint( vector );
	
					}
	
				}
	
				if ( positions === undefined || positions.length === 0 ) {
	
					this.boundingBox.min.set( 0, 0, 0 );
					this.boundingBox.max.set( 0, 0, 0 );
	
				}
	
				if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {
	
					console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );
	
				}
	
			};
	
		}(),
	
		computeBoundingSphere: function () {
	
			var box = new THREE.Box3();
			var vector = new THREE.Vector3();
	
			return function () {
	
				if ( this.boundingSphere === null ) {
	
					this.boundingSphere = new THREE.Sphere();
	
				}
	
				var positions = this.attributes.position.array;
	
				if ( positions ) {
	
					box.makeEmpty();
	
					var center = this.boundingSphere.center;
	
					for ( var i = 0, il = positions.length; i < il; i += 3 ) {
	
						vector.fromArray( positions, i );
						box.expandByPoint( vector );
	
					}
	
					box.center( center );
	
					// hoping to find a boundingSphere with a radius smaller than the
					// boundingSphere of the boundingBox: sqrt(3) smaller in the best case
	
					var maxRadiusSq = 0;
	
					for ( var i = 0, il = positions.length; i < il; i += 3 ) {
	
						vector.fromArray( positions, i );
						maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );
	
					}
	
					this.boundingSphere.radius = Math.sqrt( maxRadiusSq );
	
					if ( isNaN( this.boundingSphere.radius ) ) {
	
						console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );
	
					}
	
				}
	
			};
	
		}(),
	
		computeFaceNormals: function () {
	
			// backwards compatibility
	
		},
	
		computeVertexNormals: function () {
	
			var index = this.index;
			var attributes = this.attributes;
			var groups = this.groups;
	
			if ( attributes.position ) {
	
				var positions = attributes.position.array;
	
				if ( attributes.normal === undefined ) {
	
					this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );
	
				} else {
	
					// reset existing normals to zero
	
					var normals = attributes.normal.array;
	
					for ( var i = 0, il = normals.length; i < il; i ++ ) {
	
						normals[ i ] = 0;
	
					}
	
				}
	
				var normals = attributes.normal.array;
	
				var vA, vB, vC,
	
				pA = new THREE.Vector3(),
				pB = new THREE.Vector3(),
				pC = new THREE.Vector3(),
	
				cb = new THREE.Vector3(),
				ab = new THREE.Vector3();
	
				// indexed elements
	
				if ( index ) {
	
					var indices = index.array;
	
					if ( groups.length === 0 ) {
	
						this.addGroup( 0, indices.length );
	
					}
	
					for ( var j = 0, jl = groups.length; j < jl; ++ j ) {
	
						var group = groups[ j ];
	
						var start = group.start;
						var count = group.count;
	
						for ( var i = start, il = start + count; i < il; i += 3 ) {
	
							vA = indices[ i + 0 ] * 3;
							vB = indices[ i + 1 ] * 3;
							vC = indices[ i + 2 ] * 3;
	
							pA.fromArray( positions, vA );
							pB.fromArray( positions, vB );
							pC.fromArray( positions, vC );
	
							cb.subVectors( pC, pB );
							ab.subVectors( pA, pB );
							cb.cross( ab );
	
							normals[ vA ] += cb.x;
							normals[ vA + 1 ] += cb.y;
							normals[ vA + 2 ] += cb.z;
	
							normals[ vB ] += cb.x;
							normals[ vB + 1 ] += cb.y;
							normals[ vB + 2 ] += cb.z;
	
							normals[ vC ] += cb.x;
							normals[ vC + 1 ] += cb.y;
							normals[ vC + 2 ] += cb.z;
	
						}
	
					}
	
				} else {
	
					// non-indexed elements (unconnected triangle soup)
	
					for ( var i = 0, il = positions.length; i < il; i += 9 ) {
	
						pA.fromArray( positions, i );
						pB.fromArray( positions, i + 3 );
						pC.fromArray( positions, i + 6 );
	
						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );
	
						normals[ i ] = cb.x;
						normals[ i + 1 ] = cb.y;
						normals[ i + 2 ] = cb.z;
	
						normals[ i + 3 ] = cb.x;
						normals[ i + 4 ] = cb.y;
						normals[ i + 5 ] = cb.z;
	
						normals[ i + 6 ] = cb.x;
						normals[ i + 7 ] = cb.y;
						normals[ i + 8 ] = cb.z;
	
					}
	
				}
	
				this.normalizeNormals();
	
				attributes.normal.needsUpdate = true;
	
			}
	
		},
	
		computeTangents: function () {
	
			console.warn( 'THREE.BufferGeometry: .computeTangents() has been removed.' );
	
		},
	
		computeOffsets: function ( size ) {
	
			console.warn( 'THREE.BufferGeometry: .computeOffsets() has been removed.')
	
		},
	
		merge: function ( geometry, offset ) {
	
			if ( geometry instanceof THREE.BufferGeometry === false ) {
	
				console.error( 'THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.', geometry );
				return;
	
			}
	
			if ( offset === undefined ) offset = 0;
	
			var attributes = this.attributes;
	
			for ( var key in attributes ) {
	
				if ( geometry.attributes[ key ] === undefined ) continue;
	
				var attribute1 = attributes[ key ];
				var attributeArray1 = attribute1.array;
	
				var attribute2 = geometry.attributes[ key ];
				var attributeArray2 = attribute2.array;
	
				var attributeSize = attribute2.itemSize;
	
				for ( var i = 0, j = attributeSize * offset; i < attributeArray2.length; i ++, j ++ ) {
	
					attributeArray1[ j ] = attributeArray2[ i ];
	
				}
	
			}
	
			return this;
	
		},
	
		normalizeNormals: function () {
	
			var normals = this.attributes.normal.array;
	
			var x, y, z, n;
	
			for ( var i = 0, il = normals.length; i < il; i += 3 ) {
	
				x = normals[ i ];
				y = normals[ i + 1 ];
				z = normals[ i + 2 ];
	
				n = 1.0 / Math.sqrt( x * x + y * y + z * z );
	
				normals[ i ] *= n;
				normals[ i + 1 ] *= n;
				normals[ i + 2 ] *= n;
	
			}
	
		},
	
		toJSON: function () {
	
			var data = {
				metadata: {
					version: 4.4,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};
	
			// standard BufferGeometry serialization
	
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
	
			if ( this.parameters !== undefined ) {
	
				var parameters = this.parameters;
	
				for ( var key in parameters ) {
	
					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];
	
				}
	
				return data;
	
			}
	
			data.data = { attributes: {} };
	
			var index = this.index;
	
			if ( index !== null ) {
	
				var array = Array.prototype.slice.call( index.array );
	
				data.data.index = {
					type: index.array.constructor.name,
					array: array
				};
	
			}
	
			var attributes = this.attributes;
	
			for ( var key in attributes ) {
	
				var attribute = attributes[ key ];
	
				var array = Array.prototype.slice.call( attribute.array );
	
				data.data.attributes[ key ] = {
					itemSize: attribute.itemSize,
					type: attribute.array.constructor.name,
					array: array
				};
	
			}
	
			var groups = this.groups;
	
			if ( groups.length > 0 ) {
	
				data.data.groups = JSON.parse( JSON.stringify( groups ) );
	
			}
	
			var boundingSphere = this.boundingSphere;
	
			if ( boundingSphere !== null ) {
	
				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};
	
			}
	
			return data;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			var index = source.index;
	
			if ( index !== null ) {
	
				this.setIndex( index.clone() );
	
			}
	
			var attributes = source.attributes;
	
			for ( var name in attributes ) {
	
				var attribute = attributes[ name ];
				this.addAttribute( name, attribute.clone() );
	
			}
	
			var groups = source.groups;
	
			for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
				var group = groups[ i ];
				this.addGroup( group.start, group.count );
	
			}
	
			return this;
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );
	
	THREE.BufferGeometry.MaxIndex = 65535;
	
	// File:src/core/InstancedBufferGeometry.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.InstancedBufferGeometry = function () {
	
		THREE.BufferGeometry.call( this );
	
		this.type = 'InstancedBufferGeometry';
		this.maxInstancedCount = undefined;
	
	};
	
	THREE.InstancedBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.InstancedBufferGeometry.prototype.constructor = THREE.InstancedBufferGeometry;
	
	THREE.InstancedBufferGeometry.prototype.addGroup = function ( start, count, instances ) {
	
		this.groups.push( {
	
			start: start,
			count: count,
			instances: instances
	
		} );
	
	};
	
	THREE.InstancedBufferGeometry.prototype.copy = function ( source ) {
	
		var index = source.index;
	
		if ( index !== null ) {
	
			this.setIndex( index.clone() );
	
		}
	
		var attributes = source.attributes;
	
		for ( var name in attributes ) {
	
			var attribute = attributes[ name ];
			this.addAttribute( name, attribute.clone() );
	
		}
	
		var groups = source.groups;
	
		for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
			var group = groups[ i ];
			this.addGroup( group.start, group.count, group.instances );
	
		}
	
		return this;
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.InstancedBufferGeometry.prototype );
	
	// File:src/animation/AnimationAction.js
	
	/**
	 *
	 * A clip that has been explicitly scheduled.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.AnimationAction = function ( clip, startTime, timeScale, weight, loop ) {
	
		if ( clip === undefined ) throw new Error( 'clip is null' );
		this.clip = clip;
		this.localRoot = null;
		this.startTime = startTime || 0;
		this.timeScale = timeScale || 1;
		this.weight = weight || 1;
		this.loop = loop || THREE.LoopRepeat;
		this.loopCount = 0;
		this.enabled = true;	// allow for easy disabling of the action.
	
		this.actionTime = - this.startTime;
		this.clipTime = 0;
	
		this.propertyBindings = [];
	};
	
	/*
	THREE.LoopOnce = 2200;
	THREE.LoopRepeat = 2201;
	THREE.LoopPingPing = 2202;
	*/
	
	THREE.AnimationAction.prototype = {
	
		constructor: THREE.AnimationAction,
	
		setLocalRoot: function( localRoot ) {
	
			this.localRoot = localRoot;
	
			return this;
	
		},
	
		updateTime: function( clipDeltaTime ) {
	
			var previousClipTime = this.clipTime;
	   		var previousLoopCount = this.loopCount;
	   		var previousActionTime = this.actionTime;
	
			var duration = this.clip.duration;
	
			this.actionTime = this.actionTime + clipDeltaTime;
	
			if ( this.loop === THREE.LoopOnce ) {
	
				this.loopCount = 0;
				this.clipTime = Math.min( Math.max( this.actionTime, 0 ), duration );
	
				// if time is changed since last time, see if we have hit a start/end limit
				if ( this.clipTime !== previousClipTime ) {
	
					if ( this.clipTime === duration ) {
	
						this.mixer.dispatchEvent( { type: 'finished', action: this, direction: 1 } );
	
					} else if ( this.clipTime === 0 ) {
	
						this.mixer.dispatchEvent( { type: 'finished', action: this, direction: -1 } );
	
					}
	
				}
	
	
				return this.clipTime;
	
			}
	
			this.loopCount = Math.floor( this.actionTime / duration );
	
			var newClipTime = this.actionTime - this.loopCount * duration;
			newClipTime = newClipTime % duration;
	
			// if we are ping pong looping, ensure that we go backwards when appropriate
			if ( this.loop == THREE.LoopPingPong ) {
	
				if ( Math.abs( this.loopCount % 2 ) === 1 ) {
	
					newClipTime = duration - newClipTime;
	
				}
	
			}
	
			this.clipTime = newClipTime;
	
			if ( this.loopCount !== previousLoopCount ) {
	
	   			this.mixer.dispatchEvent( { type: 'loop', action: this, loopDelta: ( this.loopCount - this.loopCount ) } );
	
	   		}
	
		   	return this.clipTime;
	
		},
	
		syncWith: function( action ) {
	
			this.actionTime = action.actionTime;
			this.timeScale = action.timeScale;
	
			return this;
		},
	
		warpToDuration: function( duration ) {
	
			this.timeScale = this.clip.duration / duration;
	
			return this;
		},
	
		init: function( time ) {
	
			this.clipTime = time - this.startTime;
	
			return this;
	
		},
	
		update: function( clipDeltaTime ) {
	
			this.updateTime( clipDeltaTime );
	
			var clipResults = this.clip.getAt( this.clipTime );
	
			return clipResults;
	
		},
	
		getTimeScaleAt: function( time ) {
	
			if ( this.timeScale.getAt ) {
				// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip
				return this.timeScale.getAt( time );
	
			}
	
			return this.timeScale;
	
		},
	
		getWeightAt: function( time ) {
	
			if ( this.weight.getAt ) {
				// pass in time, not clip time, allows for fadein/fadeout across multiple loops of the clip
				return this.weight.getAt( time );
	
			}
	
			return this.weight;
	
		}
	
	};
	
	// File:src/animation/AnimationClip.js
	
	/**
	 *
	 * Reusable set of Tracks that represent an animation.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.AnimationClip = function ( name, duration, tracks ) {
	
		this.name = name;
		this.tracks = tracks;
		this.duration = ( duration !== undefined ) ? duration : -1;
	
		// this means it should figure out its duration by scanning the tracks
		if ( this.duration < 0 ) {
			for ( var i = 0; i < this.tracks.length; i ++ ) {
				var track = this.tracks[i];
				this.duration = Math.max( track.keys[ track.keys.length - 1 ].time );
			}
		}
	
		// maybe only do these on demand, as doing them here could potentially slow down loading
		// but leaving these here during development as this ensures a lot of testing of these functions
		this.trim();
		this.optimize();
	
		this.results = [];
	
	};
	
	THREE.AnimationClip.prototype = {
	
		constructor: THREE.AnimationClip,
	
		getAt: function( clipTime ) {
	
			clipTime = Math.max( 0, Math.min( clipTime, this.duration ) );
	
			for ( var i = 0; i < this.tracks.length; i ++ ) {
	
				var track = this.tracks[ i ];
	
				this.results[ i ] = track.getAt( clipTime );
	
			}
	
			return this.results;
		},
	
		trim: function() {
	
			for ( var i = 0; i < this.tracks.length; i ++ ) {
	
				this.tracks[ i ].trim( 0, this.duration );
	
			}
	
			return this;
	
		},
	
		optimize: function() {
	
			for ( var i = 0; i < this.tracks.length; i ++ ) {
	
				this.tracks[ i ].optimize();
	
			}
	
			return this;
	
		}
	
	};
	
	
	THREE.AnimationClip.CreateFromMorphTargetSequence = function( name, morphTargetSequence, fps ) {
	
	
		var numMorphTargets = morphTargetSequence.length;
		var tracks = [];
	
		for ( var i = 0; i < numMorphTargets; i ++ ) {
	
			var keys = [];
	
			keys.push( { time: ( i + numMorphTargets - 1 ) % numMorphTargets, value: 0 } );
			keys.push( { time: i, value: 1 } );
			keys.push( { time: ( i + 1 ) % numMorphTargets, value: 0 } );
	
			keys.sort( THREE.KeyframeTrack.keyComparer );
	
			// if there is a key at the first frame, duplicate it as the last frame as well for perfect loop.
			if ( keys[0].time === 0 ) {
				keys.push( {
					time: numMorphTargets,
					value: keys[0].value
				});
			}
	
			tracks.push( new THREE.NumberKeyframeTrack( '.morphTargetInfluences[' + morphTargetSequence[i].name + ']', keys ).scale( 1.0 / fps ) );
		}
	
		return new THREE.AnimationClip( name, -1, tracks );
	
	};
	
	THREE.AnimationClip.findByName = function( clipArray, name ) {
	
		for ( var i = 0; i < clipArray.length; i ++ ) {
	
			if ( clipArray[i].name === name ) {
	
				return clipArray[i];
	
			}
		}
	
		return null;
	
	};
	
	THREE.AnimationClip.CreateClipsFromMorphTargetSequences = function( morphTargets, fps ) {
	
		var animationToMorphTargets = {};
	
		// tested with https://regex101.com/ on trick sequences such flamingo_flyA_003, flamingo_run1_003, crdeath0059
		var pattern = /^([\w-]*?)([\d]+)$/;
	
		// sort morph target names into animation groups based patterns like Walk_001, Walk_002, Run_001, Run_002
		for ( var i = 0, il = morphTargets.length; i < il; i ++ ) {
	
			var morphTarget = morphTargets[ i ];
			var parts = morphTarget.name.match( pattern );
	
			if ( parts && parts.length > 1 ) {
	
				var name = parts[ 1 ];
	
				var animationMorphTargets = animationToMorphTargets[ name ];
				if ( ! animationMorphTargets ) {
					animationToMorphTargets[ name ] = animationMorphTargets = [];
				}
	
				animationMorphTargets.push( morphTarget );
	
			}
	
		}
	
		var clips = [];
	
		for ( var name in animationToMorphTargets ) {
	
			clips.push( THREE.AnimationClip.CreateFromMorphTargetSequence( name, animationToMorphTargets[ name ], fps ) );
		}
	
		return clips;
	
	};
	
	// parse the standard JSON format for clips
	THREE.AnimationClip.parse = function( json ) {
	
		var tracks = [];
	
		for ( var i = 0; i < json.tracks.length; i ++ ) {
	
			tracks.push( THREE.KeyframeTrack.parse( json.tracks[i] ).scale( 1.0 / json.fps ) );
	
		}
	
		return new THREE.AnimationClip( json.name, json.duration, tracks );
	
	};
	
	
	// parse the animation.hierarchy format
	THREE.AnimationClip.parseAnimation = function( animation, bones, nodeName ) {
	
		if ( ! animation ) {
			console.error( "  no animation in JSONLoader data" );
			return null;
		}
	
		var convertTrack = function( trackName, animationKeys, propertyName, trackType, animationKeyToValueFunc ) {
	
			var keys = [];
	
			for ( var k = 0; k < animationKeys.length; k ++ ) {
	
				var animationKey = animationKeys[k];
	
				if ( animationKey[propertyName] !== undefined ) {
	
					keys.push( { time: animationKey.time, value: animationKeyToValueFunc( animationKey ) } );
				}
	
			}
	
			// only return track if there are actually keys.
			if ( keys.length > 0 ) {
	
				return new trackType( trackName, keys );
	
			}
	
			return null;
	
		};
	
		var tracks = [];
	
		var clipName = animation.name || 'default';
		var duration = animation.length || -1; // automatic length determination in AnimationClip.
		var fps = animation.fps || 30;
	
		var hierarchyTracks = animation.hierarchy || [];
	
		for ( var h = 0; h < hierarchyTracks.length; h ++ ) {
	
			var animationKeys = hierarchyTracks[ h ].keys;
	
			// skip empty tracks
			if ( ! animationKeys || animationKeys.length == 0 ) {
				continue;
			}
	
			// process morph targets in a way exactly compatible with AnimationHandler.init( animation )
			if ( animationKeys[0].morphTargets ) {
	
				// figure out all morph targets used in this track
				var morphTargetNames = {};
				for ( var k = 0; k < animationKeys.length; k ++ ) {
	
					if ( animationKeys[k].morphTargets ) {
						for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {
	
							morphTargetNames[ animationKeys[k].morphTargets[m] ] = -1;
						}
					}
	
				}
	
				// create a track for each morph target with all zero morphTargetInfluences except for the keys in which the morphTarget is named.
				for ( var morphTargetName in morphTargetNames ) {
	
					var keys = [];
	
					for ( var m = 0; m < animationKeys[k].morphTargets.length; m ++ ) {
	
						var animationKey = animationKeys[k];
	
						keys.push( {
								time: animationKey.time,
								value: (( animationKey.morphTarget === morphTargetName ) ? 1 : 0 )
							});
	
					}
	
					tracks.push( new THREE.NumberKeyframeTrack( nodeName + '.morphTargetInfluence[' + morphTargetName + ']', keys ) );
	
				}
	
				duration = morphTargetNames.length * ( fps || 1.0 );
	
			} else {
	
				var boneName = nodeName + '.bones[' + bones[ h ].name + ']';
	
				// track contains positions...
				var positionTrack = convertTrack( boneName + '.position', animationKeys, 'pos', THREE.VectorKeyframeTrack, function( animationKey ) {
						return new THREE.Vector3().fromArray( animationKey.pos )
					} );
	
				if ( positionTrack ) tracks.push( positionTrack );
	
				// track contains quaternions...
				var quaternionTrack = convertTrack( boneName + '.quaternion', animationKeys, 'rot', THREE.QuaternionKeyframeTrack, function( animationKey ) {
						if ( animationKey.rot.slerp ) {
							return animationKey.rot.clone();
						} else {
							return new THREE.Quaternion().fromArray( animationKey.rot );
						}
					} );
	
				if ( quaternionTrack ) tracks.push( quaternionTrack );
	
				// track contains quaternions...
				var scaleTrack = convertTrack( boneName + '.scale', animationKeys, 'scl', THREE.VectorKeyframeTrack, function( animationKey ) {
						return new THREE.Vector3().fromArray( animationKey.scl )
					} );
	
				if ( scaleTrack ) tracks.push( scaleTrack );
	
			}
		}
	
		if ( tracks.length === 0 ) {
	
			return null;
	
		}
	
		var clip = new THREE.AnimationClip( clipName, duration, tracks );
	
		return clip;
	
	};
	
	// File:src/animation/AnimationMixer.js
	
	/**
	 *
	 * Mixes together the AnimationClips scheduled by AnimationActions and applies them to the root and subtree
	 *
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.AnimationMixer = function( root ) {
	
		this.root = root;
		this.time = 0;
		this.timeScale = 1.0;
		this.actions = [];
		this.propertyBindingMap = {};
	
	};
	
	THREE.AnimationMixer.prototype = {
	
		constructor: THREE.AnimationMixer,
	
		addAction: function( action ) {
	
			// TODO: check for duplicate action names?  Or provide each action with a UUID?
	
			this.actions.push( action );
			action.init( this.time );
			action.mixer = this;
	
			var tracks = action.clip.tracks;
	
			var root = action.localRoot || this.root;
	
			for ( var i = 0; i < tracks.length; i ++ ) {
	
				var track = tracks[ i ];
	
				var propertyBindingKey = root.uuid + '-' + track.name;
				var propertyBinding = this.propertyBindingMap[ propertyBindingKey ];
	
				if ( propertyBinding === undefined ) {
	
					propertyBinding = new THREE.PropertyBinding( root, track.name );
					this.propertyBindingMap[ propertyBindingKey ] = propertyBinding;
	
				}
	
				// push in the same order as the tracks.
				action.propertyBindings.push( propertyBinding );
	
				// track usages of shared property bindings, because if we leave too many around, the mixer can get slow
				propertyBinding.referenceCount += 1;
	
			}
	
		},
	
		removeAllActions: function() {
	
			for ( var i = 0; i < this.actions.length; i ++ ) {
	
				this.actions[i].mixer = null;
	
			}
	
			// unbind all property bindings
			for ( var properyBindingKey in this.propertyBindingMap ) {
	
				this.propertyBindingMap[ properyBindingKey ].unbind();
	
			}
	
			this.actions = [];
			this.propertyBindingMap = {};
	
			return this;
	
		},
	
		removeAction: function( action ) {
	
			var index = this.actions.indexOf( action );
	
			if ( index !== - 1 ) {
	
				this.actions.splice( index, 1 );
				action.mixer = null;
	
			}
	
	
			// remove unused property bindings because if we leave them around the mixer can get slow
			var root = action.localRoot || this.root;
			var tracks = action.clip.tracks;
	
			for ( var i = 0; i < tracks.length; i ++ ) {
	
				var track = tracks[ i ];
	
				var propertyBindingKey = root.uuid + '-' + track.name;
				var propertyBinding = this.propertyBindingMap[ propertyBindingKey ];
	
				propertyBinding.referenceCount -= 1;
	
				if ( propertyBinding.referenceCount <= 0 ) {
	
					propertyBinding.unbind();
	
					delete this.propertyBindingMap[ propertyBindingKey ];
	
				}
			}
	
			return this;
	
		},
	
		// can be optimized if needed
		findActionByName: function( name ) {
	
			for ( var i = 0; i < this.actions.length; i ++ ) {
	
				if ( this.actions[i].name === name ) return this.actions[i];
	
			}
	
			return null;
	
		},
	
		play: function( action, optionalFadeInDuration ) {
	
			action.startTime = this.time;
			this.addAction( action );
	
			return this;
	
		},
	
		fadeOut: function( action, duration ) {
	
			var keys = [];
	
			keys.push( { time: this.time, value: 1 } );
			keys.push( { time: this.time + duration, value: 0 } );
	
			action.weight = new THREE.NumberKeyframeTrack( "weight", keys );
	
			return this;
	
		},
	
		fadeIn: function( action, duration ) {
	
			var keys = [];
	
			keys.push( { time: this.time, value: 0 } );
			keys.push( { time: this.time + duration, value: 1 } );
	
			action.weight = new THREE.NumberKeyframeTrack( "weight", keys );
	
			return this;
	
		},
	
		warp: function( action, startTimeScale, endTimeScale, duration ) {
	
			var keys = [];
	
			keys.push( { time: this.time, value: startTimeScale } );
			keys.push( { time: this.time + duration, value: endTimeScale } );
	
			action.timeScale = new THREE.NumberKeyframeTrack( "timeScale", keys );
	
			return this;
	
		},
	
		crossFade: function( fadeOutAction, fadeInAction, duration, warp ) {
	
			this.fadeOut( fadeOutAction, duration );
			this.fadeIn( fadeInAction, duration );
	
			if ( warp ) {
	
				var startEndRatio = fadeOutAction.clip.duration / fadeInAction.clip.duration;
				var endStartRatio = 1.0 / startEndRatio;
	
				this.warp( fadeOutAction, 1.0, startEndRatio, duration );
				this.warp( fadeInAction, endStartRatio, 1.0, duration );
	
			}
	
			return this;
	
		},
	
		update: function( deltaTime ) {
	
			var mixerDeltaTime = deltaTime * this.timeScale;
			this.time += mixerDeltaTime;
	
			for ( var i = 0; i < this.actions.length; i ++ ) {
	
				var action = this.actions[i];
	
				var weight = action.getWeightAt( this.time );
	
				var actionTimeScale = action.getTimeScaleAt( this.time );
				var actionDeltaTime = mixerDeltaTime * actionTimeScale;
	
				var actionResults = action.update( actionDeltaTime );
	
				if ( action.weight <= 0 || ! action.enabled ) continue;
	
				for ( var j = 0; j < actionResults.length; j ++ ) {
	
					var name = action.clip.tracks[j].name;
	
					action.propertyBindings[ j ].accumulate( actionResults[j], weight );
	
				}
	
			}
	
			// apply to nodes
			for ( var propertyBindingKey in this.propertyBindingMap ) {
	
				this.propertyBindingMap[ propertyBindingKey ].apply();
	
			}
	
			return this;
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.AnimationMixer.prototype );
	
	// File:src/animation/AnimationUtils.js
	
	/**
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.AnimationUtils = {
	
		getEqualsFunc: function( exemplarValue ) {
	
			if ( exemplarValue.equals ) {
				return function equals_object( a, b ) {
					return a.equals( b );
				}
			}
	
			return function equals_primitive( a, b ) {
				return ( a === b );
			};
	
		},
	
		clone: function( exemplarValue ) {
	
			var typeName = typeof exemplarValue;
			if ( typeName === "object" ) {
				if ( exemplarValue.clone ) {
					return exemplarValue.clone();
				}
				console.error( "can not figure out how to copy exemplarValue", exemplarValue );
			}
	
			return exemplarValue;
	
		},
	
		lerp: function( a, b, alpha, interTrack ) {
	
			var lerpFunc = THREE.AnimationUtils.getLerpFunc( a, interTrack );
	
			return lerpFunc( a, b, alpha );
	
		},
	
		lerp_object: function( a, b, alpha ) {
			return a.lerp( b, alpha );
		},
	
		slerp_object: function( a, b, alpha ) {
			return a.slerp( b, alpha );
		},
	
		lerp_number: function( a, b, alpha ) {
			return a * ( 1 - alpha ) + b * alpha;
		},
	
		lerp_boolean: function( a, b, alpha ) {
			return ( alpha < 0.5 ) ? a : b;
		},
	
		lerp_boolean_immediate: function( a, b, alpha ) {
			return a;
		},
	
		lerp_string: function( a, b, alpha ) {
			return ( alpha < 0.5 ) ? a : b;
		},
	
		lerp_string_immediate: function( a, b, alpha ) {
	 		return a;
	 	},
	
		// NOTE: this is an accumulator function that modifies the first argument (e.g. a).	This is to minimize memory alocations.
		getLerpFunc: function( exemplarValue, interTrack ) {
	
			if ( exemplarValue === undefined || exemplarValue === null ) throw new Error( "examplarValue is null" );
	
			var typeName = typeof exemplarValue;
	
			switch( typeName ) {
	
				case "object":
					if ( exemplarValue.lerp ) {
						return THREE.AnimationUtils.lerp_object;
					}
	
					if ( exemplarValue.slerp ) {
						return THREE.AnimationUtils.slerp_object;
					}
					break;
	
				case "number":
					return THREE.AnimationUtils.lerp_number;
	
				case "boolean":
					if ( interTrack ) {
						return THREE.AnimationUtils.lerp_boolean;
					} else {
						return THREE.AnimationUtils.lerp_boolean_immediate;
					}
	
				case "string":
					if ( interTrack ) {
						return THREE.AnimationUtils.lerp_string;
					} else {
						return THREE.AnimationUtils.lerp_string_immediate;
					}
	
			}
	
		}
	
	};
	
	// File:src/animation/KeyframeTrack.js
	
	/**
	 *
	 * A Track that returns a keyframe interpolated value, currently linearly interpolated
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.KeyframeTrack = function ( name, keys ) {
	
		if ( name === undefined ) throw new Error( "track name is undefined" );
		if ( keys === undefined || keys.length === 0 ) throw new Error( "no keys in track named " + name );
	
		this.name = name;
		this.keys = keys;	// time in seconds, value as value
	
		// the index of the last result, used as a starting point for local search.
		this.lastIndex = 0;
	
		this.validate();
		this.optimize();
	
	};
	
	THREE.KeyframeTrack.prototype = {
	
		constructor: THREE.KeyframeTrack,
	
		getAt: function( time ) {
	
	
			// this can not go higher than this.keys.length.
			while( ( this.lastIndex < this.keys.length ) && ( time >= this.keys[this.lastIndex].time ) ) {
				this.lastIndex ++;
			};
	
			// this can not go lower than 0.
			while( ( this.lastIndex > 0 ) && ( time < this.keys[this.lastIndex - 1].time ) ) {
				this.lastIndex --;
			}
	
			if ( this.lastIndex >= this.keys.length ) {
	
				this.setResult( this.keys[ this.keys.length - 1 ].value );
	
				return this.result;
	
			}
	
			if ( this.lastIndex === 0 ) {
	
				this.setResult( this.keys[ 0 ].value );
	
				return this.result;
	
			}
	
			var prevKey = this.keys[ this.lastIndex - 1 ];
			this.setResult( prevKey.value );
	
			// if true, means that prev/current keys are identical, thus no interpolation required.
			if ( prevKey.constantToNext ) {
	
				return this.result;
	
			}
	
			// linear interpolation to start with
			var currentKey = this.keys[ this.lastIndex ];
			var alpha = ( time - prevKey.time ) / ( currentKey.time - prevKey.time );
			this.result = this.lerpValues( this.result, currentKey.value, alpha );
	
			return this.result;
	
		},
	
		// move all keyframes either forwards or backwards in time
		shift: function( timeOffset ) {
	
			if ( timeOffset !== 0.0 ) {
	
				for ( var i = 0; i < this.keys.length; i ++ ) {
					this.keys[i].time += timeOffset;
				}
	
			}
	
			return this;
	
		},
	
		// scale all keyframe times by a factor (useful for frame <-> seconds conversions)
		scale: function( timeScale ) {
	
			if ( timeScale !== 1.0 ) {
	
				for ( var i = 0; i < this.keys.length; i ++ ) {
					this.keys[i].time *= timeScale;
				}
	
			}
	
			return this;
	
		},
	
		// removes keyframes before and after animation without changing any values within the range [startTime, endTime].
		// IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
	 	trim: function( startTime, endTime ) {
	
			var firstKeysToRemove = 0;
			for ( var i = 1; i < this.keys.length; i ++ ) {
				if ( this.keys[i] <= startTime ) {
					firstKeysToRemove ++;
				}
			}
	
			var lastKeysToRemove = 0;
			for ( var i = this.keys.length - 2; i > 0; i ++ ) {
				if ( this.keys[i] >= endTime ) {
					lastKeysToRemove ++;
				} else {
					break;
				}
			}
	
			// remove last keys first because it doesn't affect the position of the first keys (the otherway around doesn't work as easily)
			if ( ( firstKeysToRemove + lastKeysToRemove ) > 0 ) {
				this.keys = this.keys.splice( firstKeysToRemove, this.keys.length - lastKeysToRemove - firstKeysToRemove );;
			}
	
			return this;
	
		},
	
		/* NOTE: This is commented out because we really shouldn't have to handle unsorted key lists
		         Tracks with out of order keys should be considered to be invalid.  - bhouston
		sort: function() {
	
			this.keys.sort( THREE.KeyframeTrack.keyComparer );
	
			return this;
	
		},*/
	
		// ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
		// One could eventually ensure that all key.values in a track are all of the same type (otherwise interpolation makes no sense.)
		validate: function() {
	
			var prevKey = null;
	
			if ( this.keys.length === 0 ) {
				console.error( "  track is empty, no keys", this );
				return;
			}
	
			for ( var i = 0; i < this.keys.length; i ++ ) {
	
				var currKey = this.keys[i];
	
				if ( ! currKey ) {
					console.error( "  key is null in track", this, i );
					return;
				}
	
				if ( ( typeof currKey.time ) !== 'number' || isNaN( currKey.time ) ) {
					console.error( "  key.time is not a valid number", this, i, currKey );
					return;
				}
	
				if ( currKey.value === undefined || currKey.value === null) {
					console.error( "  key.value is null in track", this, i, currKey );
					return;
				}
	
				if ( prevKey && prevKey.time > currKey.time ) {
					console.error( "  key.time is less than previous key time, out of order keys", this, i, currKey, prevKey );
					return;
				}
	
				prevKey = currKey;
	
			}
	
			return this;
	
		},
	
		// currently only removes equivalent sequential keys (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0), which are common in morph target animations
		optimize: function() {
	
			var newKeys = [];
			var prevKey = this.keys[0];
			newKeys.push( prevKey );
	
			var equalsFunc = THREE.AnimationUtils.getEqualsFunc( prevKey.value );
	
			for ( var i = 1; i < this.keys.length - 1; i ++ ) {
				var currKey = this.keys[i];
				var nextKey = this.keys[i+1];
	
				// if prevKey & currKey are the same time, remove currKey.  If you want immediate adjacent keys, use an epsilon offset
				// it is not possible to have two keys at the same time as we sort them.  The sort is not stable on keys with the same time.
				if ( ( prevKey.time === currKey.time ) ) {
	
					continue;
	
				}
	
				// remove completely unnecessary keyframes that are the same as their prev and next keys
				if ( this.compareValues( prevKey.value, currKey.value ) && this.compareValues( currKey.value, nextKey.value ) ) {
	
					continue;
	
				}
	
				// determine if interpolation is required
				prevKey.constantToNext = this.compareValues( prevKey.value, currKey.value );
	
				newKeys.push( currKey );
				prevKey = currKey;
			}
			newKeys.push( this.keys[ this.keys.length - 1 ] );
	
			this.keys = newKeys;
	
			return this;
	
		}
	
	};
	
	THREE.KeyframeTrack.keyComparer = function keyComparator(key0, key1) {
		return key0.time - key1.time;
	};
	
	THREE.KeyframeTrack.parse = function( json ) {
	
		if ( json.type === undefined ) throw new Error( "track type undefined, can not parse" );
	
		var trackType = THREE.KeyframeTrack.GetTrackTypeForTypeName( json.type );
	
		return trackType.parse( json );
	
	};
	
	THREE.KeyframeTrack.GetTrackTypeForTypeName = function( typeName ) {
		switch( typeName.toLowerCase() ) {
		 	case "vector":
		 	case "vector2":
		 	case "vector3":
		 	case "vector4":
				return THREE.VectorKeyframeTrack;
	
		 	case "quaternion":
				return THREE.QuaternionKeyframeTrack;
	
		 	case "integer":
		 	case "scalar":
		 	case "double":
		 	case "float":
		 	case "number":
				return THREE.NumberKeyframeTrack;
	
		 	case "bool":
		 	case "boolean":
				return THREE.BooleanKeyframeTrack;
	
		 	case "string":
		 		return THREE.StringKeyframeTrack;
		};
	
		throw new Error( "Unsupported typeName: " + typeName );
	};
	
	// File:src/animation/PropertyBinding.js
	
	/**
	 *
	 * A track bound to a real value in the scene graph.
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.PropertyBinding = function ( rootNode, trackName ) {
	
		this.rootNode = rootNode;
		this.trackName = trackName;
		this.referenceCount = 0;
		this.originalValue = null; // the value of the property before it was controlled by this binding
	
		var parseResults = THREE.PropertyBinding.parseTrackName( trackName );
	
		this.directoryName = parseResults.directoryName;
		this.nodeName = parseResults.nodeName;
		this.objectName = parseResults.objectName;
		this.objectIndex = parseResults.objectIndex;
		this.propertyName = parseResults.propertyName;
		this.propertyIndex = parseResults.propertyIndex;
	
		this.node = THREE.PropertyBinding.findNode( rootNode, this.nodeName ) || rootNode;
	
		this.cumulativeValue = null;
		this.cumulativeWeight = 0;
	};
	
	THREE.PropertyBinding.prototype = {
	
		constructor: THREE.PropertyBinding,
	
		reset: function() {
	
			this.cumulativeValue = null;
			this.cumulativeWeight = 0;
	
		},
	
		accumulate: function( value, weight ) {
	
			if ( ! this.isBound ) this.bind();
	
			if ( this.cumulativeWeight === 0 ) {
	
				if ( weight > 0 ) {
	
					if ( this.cumulativeValue === null ) {
						this.cumulativeValue = THREE.AnimationUtils.clone( value );
					}
					this.cumulativeWeight = weight;
	
				}
	
			} else {
	
				var lerpAlpha = weight / ( this.cumulativeWeight + weight );
				this.cumulativeValue = this.lerpValue( this.cumulativeValue, value, lerpAlpha );
				this.cumulativeWeight += weight;
	
			}
	
		},
	
		unbind: function() {
	
			if ( ! this.isBound ) return;
	
			this.setValue( this.originalValue );
	
			this.setValue = null;
			this.getValue = null;
			this.lerpValue = null;
			this.equalsValue = null;
			this.triggerDirty = null;
			this.isBound = false;
	
		},
	
		// bind to the real property in the scene graph, remember original value, memorize various accessors for speed/inefficiency
		bind: function() {
	
			if ( this.isBound ) return;
	
			var targetObject = this.node;
	
	 		// ensure there is a value node
			if ( ! targetObject ) {
				console.error( "  trying to update node for track: " + this.trackName + " but it wasn't found." );
				return;
			}
	
			if ( this.objectName ) {
				// special case were we need to reach deeper into the hierarchy to get the face materials....
				if ( this.objectName === "materials" ) {
					if ( ! targetObject.material ) {
						console.error( '  can not bind to material as node does not have a material', this );
						return;
					}
					if ( ! targetObject.material.materials ) {
						console.error( '  can not bind to material.materials as node.material does not have a materials array', this );
						return;
					}
					targetObject = targetObject.material.materials;
				} else if ( this.objectName === "bones" ) {
					if ( ! targetObject.skeleton ) {
						console.error( '  can not bind to bones as node does not have a skeleton', this );
						return;
					}
					// potential future optimization: skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
	
					targetObject = targetObject.skeleton.bones;
	
					// support resolving morphTarget names into indices.
					for ( var i = 0; i < targetObject.length; i ++ ) {
						if ( targetObject[i].name === this.objectIndex ) {
							this.objectIndex = i;
							break;
						}
					}
				} else {
	
					if ( targetObject[ this.objectName ] === undefined ) {
						console.error( '  can not bind to objectName of node, undefined', this );
						return;
					}
					targetObject = targetObject[ this.objectName ];
				}
	
				if ( this.objectIndex !== undefined ) {
					if ( targetObject[ this.objectIndex ] === undefined ) {
						console.error( "  trying to bind to objectIndex of objectName, but is undefined:", this, targetObject );
						return;
					}
	
					targetObject = targetObject[ this.objectIndex ];
				}
	
			}
	
	 		// special case mappings
	 		var nodeProperty = targetObject[ this.propertyName ];
			if ( ! nodeProperty ) {
				console.error( "  trying to update property for track: " + this.nodeName + '.' + this.propertyName + " but it wasn't found.", targetObject );
				return;
			}
	
			// access a sub element of the property array (only primitives are supported right now)
			if ( this.propertyIndex !== undefined ) {
	
				if ( this.propertyName === "morphTargetInfluences" ) {
					// potential optimization, skip this if propertyIndex is already an integer, and convert the integer string to a true integer.
	
					// support resolving morphTarget names into indices.
					if ( ! targetObject.geometry ) {
						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry', this );
					}
					if ( ! targetObject.geometry.morphTargets ) {
						console.error( '  can not bind to morphTargetInfluences becasuse node does not have a geometry.morphTargets', this );
					}
	
					for ( var i = 0; i < this.node.geometry.morphTargets.length; i ++ ) {
						if ( targetObject.geometry.morphTargets[i].name === this.propertyIndex ) {
							this.propertyIndex = i;
							break;
						}
					}
				}
	
				this.setValue = function setValue_propertyIndexed( value ) {
					if ( ! this.equalsValue( nodeProperty[ this.propertyIndex ], value ) ) {
						nodeProperty[ this.propertyIndex ] = value;
						return true;
					}
					return false;
				};
	
				this.getValue = function getValue_propertyIndexed() {
					return nodeProperty[ this.propertyIndex ];
				};
	
			}
			// must use copy for Object3D.Euler/Quaternion
			else if ( nodeProperty.copy ) {
	
				this.setValue = function setValue_propertyObject( value ) {
					if ( ! this.equalsValue( nodeProperty, value ) ) {
						nodeProperty.copy( value );
						return true;
					}
					return false;
				}
	
				this.getValue = function getValue_propertyObject() {
					return nodeProperty;
				};
	
			}
			// otherwise just set the property directly on the node (do not use nodeProperty as it may not be a reference object)
			else {
	
				this.setValue = function setValue_property( value ) {
					if ( ! this.equalsValue( targetObject[ this.propertyName ], value ) ) {
						targetObject[ this.propertyName ] = value;
						return true;
					}
					return false;
				}
	
				this.getValue = function getValue_property() {
					return targetObject[ this.propertyName ];
				};
	
			}
	
			// trigger node dirty
			if ( targetObject.needsUpdate !== undefined ) { // material
	
				this.triggerDirty = function triggerDirty_needsUpdate() {
					this.node.needsUpdate = true;
				}
	
			} else if ( targetObject.matrixWorldNeedsUpdate !== undefined ) { // node transform
	
				this.triggerDirty = function triggerDirty_matrixWorldNeedsUpdate() {
					targetObject.matrixWorldNeedsUpdate = true;
				}
	
			}
	
			this.originalValue = this.getValue();
	
			this.equalsValue = THREE.AnimationUtils.getEqualsFunc( this.originalValue );
			this.lerpValue = THREE.AnimationUtils.getLerpFunc( this.originalValue, true );
	
			this.isBound = true;
	
		},
	
		apply: function() {
	
			// for speed capture the setter pattern as a closure (sort of a memoization pattern: https://en.wikipedia.org/wiki/Memoization)
			if ( ! this.isBound ) this.bind();
	
			// early exit if there is nothing to apply.
			if ( this.cumulativeWeight > 0 ) {
	
				// blend with original value
				if ( this.cumulativeWeight < 1 ) {
	
					var remainingWeight = 1 - this.cumulativeWeight;
					var lerpAlpha = remainingWeight / ( this.cumulativeWeight + remainingWeight );
					this.cumulativeValue = this.lerpValue( this.cumulativeValue, this.originalValue, lerpAlpha );
	
				}
	
				var valueChanged = this.setValue( this.cumulativeValue );
	
				if ( valueChanged && this.triggerDirty ) {
					this.triggerDirty();
				}
	
				// reset accumulator
				this.cumulativeValue = null;
				this.cumulativeWeight = 0;
	
			}
		}
	
	};
	
	
	THREE.PropertyBinding.parseTrackName = function( trackName ) {
	
		// matches strings in the form of:
		//    nodeName.property
		//    nodeName.property[accessor]
		//    nodeName.material.property[accessor]
		//    uuid.property[accessor]
		//    uuid.objectName[objectIndex].propertyName[propertyIndex]
		//    parentName/nodeName.property
		//    parentName/parentName/nodeName.property[index]
		//	  .bone[Armature.DEF_cog].position
		// created and tested via https://regex101.com/#javascript
	
		var re = /^(([\w]+\/)*)([\w-\d]+)?(\.([\w]+)(\[([\w\d\[\]\_. ]+)\])?)?(\.([\w.]+)(\[([\w\d\[\]\_. ]+)\])?)$/;
		var matches = re.exec(trackName);
	
		if ( ! matches ) {
			throw new Error( "cannot parse trackName at all: " + trackName );
		}
	
	    if (matches.index === re.lastIndex) {
	        re.lastIndex++;
	    }
	
		var results = {
			directoryName: matches[1],
			nodeName: matches[3], 	// allowed to be null, specified root node.
			objectName: matches[5],
			objectIndex: matches[7],
			propertyName: matches[9],
			propertyIndex: matches[11]	// allowed to be null, specifies that the whole property is set.
		};
	
		if ( results.propertyName === null || results.propertyName.length === 0 ) {
			throw new Error( "can not parse propertyName from trackName: " + trackName );
		}
	
		return results;
	
	};
	
	THREE.PropertyBinding.findNode = function( root, nodeName ) {
	
		function searchSkeleton( skeleton ) {
	
			for ( var i = 0; i < skeleton.bones.length; i ++ ) {
	
				var bone = skeleton.bones[i];
	
				if ( bone.name === nodeName ) {
	
					return bone;
	
				}
			}
	
			return null;
	
		}
	
		function searchNodeSubtree( children ) {
	
			for ( var i = 0; i < children.length; i ++ ) {
	
				var childNode = children[i];
	
				if ( childNode.name === nodeName || childNode.uuid === nodeName ) {
	
					return childNode;
	
				}
	
				var result = searchNodeSubtree( childNode.children );
	
				if ( result ) return result;
	
			}
	
			return null;
	
		}
	
		//
	
		if ( ! nodeName || nodeName === "" || nodeName === "root" || nodeName === "." || nodeName === -1 || nodeName === root.name || nodeName === root.uuid ) {
	
			return root;
	
		}
	
		// search into skeleton bones.
		if ( root.skeleton ) {
	
			var bone = searchSkeleton( root.skeleton );
	
			if ( bone ) {
	
				return bone;
	
			}
		}
	
		// search into node subtree.
		if ( root.children ) {
	
			var subTreeNode = searchNodeSubtree( root.children );
	
			if ( subTreeNode ) {
	
				return subTreeNode;
	
			}
	
		}
	
		return null;
	}
	
	// File:src/animation/tracks/VectorKeyframeTrack.js
	
	/**
	 *
	 * A Track that interpolates Vectors
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.VectorKeyframeTrack = function ( name, keys ) {
	
		THREE.KeyframeTrack.call( this, name, keys );
	
		// local cache of value type to avoid allocations during runtime.
		this.result = this.keys[0].value.clone();
	
	};
	
	THREE.VectorKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );
	
	THREE.VectorKeyframeTrack.prototype.constructor = THREE.VectorKeyframeTrack;
	
	THREE.VectorKeyframeTrack.prototype.setResult = function( value ) {
	
		this.result.copy( value );
	
	};
	
	// memoization of the lerp function for speed.
	// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.
	THREE.VectorKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {
	
		return value0.lerp( value1, alpha );
	
	};
	
	THREE.VectorKeyframeTrack.prototype.compareValues = function( value0, value1 ) {
	
		return value0.equals( value1 );
	
	};
	
	THREE.VectorKeyframeTrack.prototype.clone = function() {
	
		var clonedKeys = [];
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			var key = this.keys[i];
			clonedKeys.push( {
				time: key.time,
				value: key.value.clone()
			} );
		}
	
		return new THREE.VectorKeyframeTrack( this.name, clonedKeys );
	
	};
	
	THREE.VectorKeyframeTrack.parse = function( json ) {
	
		var elementCount = json.keys[0].value.length;
		var valueType = THREE[ 'Vector' + elementCount ];
	
		var keys = [];
	
		for ( var i = 0; i < json.keys.length; i ++ ) {
			var jsonKey = json.keys[i];
			keys.push( {
				value: new valueType().fromArray( jsonKey.value ),
				time: jsonKey.time
			} );
		}
	
		return new THREE.VectorKeyframeTrack( json.name, keys );
	
	};
	
	// File:src/animation/tracks/QuaternionKeyframeTrack.js
	
	/**
	 *
	 * A Track that interpolates Quaternion
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.QuaternionKeyframeTrack = function ( name, keys ) {
	
		THREE.KeyframeTrack.call( this, name, keys );
	
		// local cache of value type to avoid allocations during runtime.
		this.result = this.keys[0].value.clone();
	
	};
	
	THREE.QuaternionKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );
	
	THREE.QuaternionKeyframeTrack.prototype.constructor = THREE.QuaternionKeyframeTrack;
	
	THREE.QuaternionKeyframeTrack.prototype.setResult = function( value ) {
	
		this.result.copy( value );
	
	};
	
	// memoization of the lerp function for speed.
	// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.
	THREE.QuaternionKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {
	
		return value0.slerp( value1, alpha );
	
	};
	
	THREE.QuaternionKeyframeTrack.prototype.compareValues = function( value0, value1 ) {
	
		return value0.equals( value1 );
	
	};
	
	THREE.QuaternionKeyframeTrack.prototype.multiply = function( quat ) {
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			this.keys[i].value.multiply( quat );
	
		}
	
		return this;
	
	};
	
	THREE.QuaternionKeyframeTrack.prototype.clone = function() {
	
		var clonedKeys = [];
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			var key = this.keys[i];
			clonedKeys.push( {
				time: key.time,
				value: key.value.clone()
			} );
		}
	
		return new THREE.QuaternionKeyframeTrack( this.name, clonedKeys );
	
	};
	
	THREE.QuaternionKeyframeTrack.parse = function( json ) {
	
		var keys = [];
	
		for ( var i = 0; i < json.keys.length; i ++ ) {
			var jsonKey = json.keys[i];
			keys.push( {
				value: new THREE.Quaternion().fromArray( jsonKey.value ),
				time: jsonKey.time
			} );
		}
	
		return new THREE.QuaternionKeyframeTrack( json.name, keys );
	
	};
	
	// File:src/animation/tracks/StringKeyframeTrack.js
	
	/**
	 *
	 * A Track that interpolates Strings
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.StringKeyframeTrack = function ( name, keys ) {
	
		THREE.KeyframeTrack.call( this, name, keys );
	
		// local cache of value type to avoid allocations during runtime.
		this.result = this.keys[0].value;
	
	};
	
	THREE.StringKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );
	
	THREE.StringKeyframeTrack.prototype.constructor = THREE.StringKeyframeTrack;
	
	THREE.StringKeyframeTrack.prototype.setResult = function( value ) {
	
		this.result = value;
	
	};
	
	// memoization of the lerp function for speed.
	// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.
	THREE.StringKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {
	
		return ( alpha < 1.0 ) ? value0 : value1;
	
	};
	
	THREE.StringKeyframeTrack.prototype.compareValues = function( value0, value1 ) {
	
		return ( value0 === value1 );
	
	};
	
	THREE.StringKeyframeTrack.prototype.clone = function() {
	
		var clonedKeys = [];
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			var key = this.keys[i];
			clonedKeys.push( {
				time: key.time,
				value: key.value
			} );
		}
	
		return new THREE.StringKeyframeTrack( this.name, clonedKeys );
	
	};
	
	THREE.StringKeyframeTrack.parse = function( json ) {
	
		return new THREE.StringKeyframeTrack( json.name, json.keys );
	
	};
	
	// File:src/animation/tracks/BooleanKeyframeTrack.js
	
	/**
	 *
	 * A Track that interpolates Boolean
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.BooleanKeyframeTrack = function ( name, keys ) {
	
		THREE.KeyframeTrack.call( this, name, keys );
	
		// local cache of value type to avoid allocations during runtime.
		this.result = this.keys[0].value;
	
	};
	
	THREE.BooleanKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );
	
	THREE.BooleanKeyframeTrack.prototype.constructor = THREE.BooleanKeyframeTrack;
	
	THREE.BooleanKeyframeTrack.prototype.setResult = function( value ) {
	
		this.result = value;
	
	};
	
	// memoization of the lerp function for speed.
	// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.
	THREE.BooleanKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {
	
		return ( alpha < 1.0 ) ? value0 : value1;
	
	};
	
	THREE.BooleanKeyframeTrack.prototype.compareValues = function( value0, value1 ) {
	
		return ( value0 === value1 );
	
	};
	
	THREE.BooleanKeyframeTrack.prototype.clone = function() {
	
		var clonedKeys = [];
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			var key = this.keys[i];
			clonedKeys.push( {
				time: key.time,
				value: key.value
			} );
		}
	
		return new THREE.BooleanKeyframeTrack( this.name, clonedKeys );
	
	};
	
	THREE.BooleanKeyframeTrack.parse = function( json ) {
	
		return new THREE.BooleanKeyframeTrack( json.name, json.keys );
	
	};
	
	// File:src/animation/tracks/NumberKeyframeTrack.js
	
	/**
	 *
	 * A Track that interpolates Numbers
	 *
	 * @author Ben Houston / http://clara.io/
	 * @author David Sarno / http://lighthaus.us/
	 */
	
	THREE.NumberKeyframeTrack = function ( name, keys ) {
	
		THREE.KeyframeTrack.call( this, name, keys );
	
		// local cache of value type to avoid allocations during runtime.
		this.result = this.keys[0].value;
	
	};
	
	THREE.NumberKeyframeTrack.prototype = Object.create( THREE.KeyframeTrack.prototype );
	
	THREE.NumberKeyframeTrack.prototype.constructor = THREE.NumberKeyframeTrack;
	
	THREE.NumberKeyframeTrack.prototype.setResult = function( value ) {
	
		this.result = value;
	
	};
	
	// memoization of the lerp function for speed.
	// NOTE: Do not optimize as a prototype initialization closure, as value0 will be different on a per class basis.
	THREE.NumberKeyframeTrack.prototype.lerpValues = function( value0, value1, alpha ) {
	
		return value0 * ( 1 - alpha ) + value1 * alpha;
	
	};
	
	THREE.NumberKeyframeTrack.prototype.compareValues = function( value0, value1 ) {
	
		return ( value0 === value1 );
	
	};
	
	THREE.NumberKeyframeTrack.prototype.clone = function() {
	
		var clonedKeys = [];
	
		for ( var i = 0; i < this.keys.length; i ++ ) {
	
			var key = this.keys[i];
			clonedKeys.push( {
				time: key.time,
				value: key.value
			} );
		}
	
		return new THREE.NumberKeyframeTrack( this.name, clonedKeys );
	
	};
	
	THREE.NumberKeyframeTrack.parse = function( json ) {
	
		return new THREE.NumberKeyframeTrack( json.name, json.keys );
	
	};
	
	// File:src/cameras/Camera.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author WestLangley / http://github.com/WestLangley
	*/
	
	THREE.Camera = function () {
	
		THREE.Object3D.call( this );
	
		this.type = 'Camera';
	
		this.matrixWorldInverse = new THREE.Matrix4();
		this.projectionMatrix = new THREE.Matrix4();
	
	};
	
	THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Camera.prototype.constructor = THREE.Camera;
	
	THREE.Camera.prototype.getWorldDirection = function () {
	
		var quaternion = new THREE.Quaternion();
	
		return function ( optionalTarget ) {
	
			var result = optionalTarget || new THREE.Vector3();
	
			this.getWorldQuaternion( quaternion );
	
			return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
		};
	
	}();
	
	THREE.Camera.prototype.lookAt = function () {
	
		// This routine does not support cameras with rotated and/or translated parent(s)
	
		var m1 = new THREE.Matrix4();
	
		return function ( vector ) {
	
			m1.lookAt( this.position, vector, this.up );
	
			this.quaternion.setFromRotationMatrix( m1 );
	
		};
	
	}();
	
	THREE.Camera.prototype.clone = function () {
	
		return new this.constructor().copy( this );
	
	};
	
	THREE.Camera.prototype.copy = function ( source ) {
	
		THREE.Object3D.prototype.copy.call( this, source );
	
		this.matrixWorldInverse.copy( source.matrixWorldInverse );
		this.projectionMatrix.copy( source.projectionMatrix );
	
		return this;
	
	};
	
	// File:src/cameras/CubeCamera.js
	
	/**
	 * Camera for rendering cube maps
	 *	- renders scene into axis-aligned cube
	 *
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.CubeCamera = function ( near, far, cubeResolution ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'CubeCamera';
	
		var fov = 90, aspect = 1;
	
		var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPX.up.set( 0, - 1, 0 );
		cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
		this.add( cameraPX );
	
		var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNX.up.set( 0, - 1, 0 );
		cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
		this.add( cameraNX );
	
		var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPY.up.set( 0, 0, 1 );
		cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
		this.add( cameraPY );
	
		var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNY.up.set( 0, 0, - 1 );
		cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
		this.add( cameraNY );
	
		var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraPZ.up.set( 0, - 1, 0 );
		cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
		this.add( cameraPZ );
	
		var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
		cameraNZ.up.set( 0, - 1, 0 );
		cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
		this.add( cameraNZ );
	
		this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );
	
		this.updateCubeMap = function ( renderer, scene ) {
	
			if ( this.parent === null ) this.updateMatrixWorld();
	
			var renderTarget = this.renderTarget;
			var generateMipmaps = renderTarget.texture.generateMipmaps;
	
			renderTarget.texture.generateMipmaps = false;
	
			renderTarget.activeCubeFace = 0;
			renderer.render( scene, cameraPX, renderTarget );
	
			renderTarget.activeCubeFace = 1;
			renderer.render( scene, cameraNX, renderTarget );
	
			renderTarget.activeCubeFace = 2;
			renderer.render( scene, cameraPY, renderTarget );
	
			renderTarget.activeCubeFace = 3;
			renderer.render( scene, cameraNY, renderTarget );
	
			renderTarget.activeCubeFace = 4;
			renderer.render( scene, cameraPZ, renderTarget );
	
			renderTarget.texture.generateMipmaps = generateMipmaps;
	
			renderTarget.activeCubeFace = 5;
			renderer.render( scene, cameraNZ, renderTarget );
	
			renderer.setRenderTarget( null );
	
		};
	
	};
	
	THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );
	THREE.CubeCamera.prototype.constructor = THREE.CubeCamera;
	
	// File:src/cameras/OrthographicCamera.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {
	
		THREE.Camera.call( this );
	
		this.type = 'OrthographicCamera';
	
		this.zoom = 1;
	
		this.left = left;
		this.right = right;
		this.top = top;
		this.bottom = bottom;
	
		this.near = ( near !== undefined ) ? near : 0.1;
		this.far = ( far !== undefined ) ? far : 2000;
	
		this.updateProjectionMatrix();
	
	};
	
	THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.OrthographicCamera.prototype.constructor = THREE.OrthographicCamera;
	
	THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {
	
		var dx = ( this.right - this.left ) / ( 2 * this.zoom );
		var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
		var cx = ( this.right + this.left ) / 2;
		var cy = ( this.top + this.bottom ) / 2;
	
		this.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );
	
	};
	
	THREE.OrthographicCamera.prototype.copy = function ( source ) {
		
		THREE.Camera.prototype.copy.call( this, source );
		
		this.left = source.left;
		this.right = source.right;
		this.top = source.top;
		this.bottom = source.bottom;
		this.near = source.near;
		this.far = source.far;
		
		this.zoom = source.zoom;
		
		return this;
			
	};
	
	THREE.OrthographicCamera.prototype.toJSON = function ( meta ) {
	
		var data = THREE.Object3D.prototype.toJSON.call( this, meta );
	
		data.object.zoom = this.zoom;
		data.object.left = this.left;
		data.object.right = this.right;
		data.object.top = this.top;
		data.object.bottom = this.bottom;
		data.object.near = this.near;
		data.object.far = this.far;
	
		return data;
	
	};
	
	// File:src/cameras/PerspectiveCamera.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author greggman / http://games.greggman.com/
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	
	THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {
	
		THREE.Camera.call( this );
	
		this.type = 'PerspectiveCamera';
	
		this.zoom = 1;
	
		this.fov = fov !== undefined ? fov : 50;
		this.aspect = aspect !== undefined ? aspect : 1;
		this.near = near !== undefined ? near : 0.1;
		this.far = far !== undefined ? far : 2000;
	
		this.updateProjectionMatrix();
	
	};
	
	THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );
	THREE.PerspectiveCamera.prototype.constructor = THREE.PerspectiveCamera;
	
	
	/**
	 * Uses Focal Length (in mm) to estimate and set FOV
	 * 35mm (full-frame) camera is used if frame size is not specified;
	 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
	 */
	
	THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {
	
		if ( frameHeight === undefined ) frameHeight = 24;
	
		this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
		this.updateProjectionMatrix();
	
	};
	
	
	/**
	 * Sets an offset in a larger frustum. This is useful for multi-window or
	 * multi-monitor/multi-machine setups.
	 *
	 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
	 * the monitors are in grid like this
	 *
	 *   +---+---+---+
	 *   | A | B | C |
	 *   +---+---+---+
	 *   | D | E | F |
	 *   +---+---+---+
	 *
	 * then for each monitor you would call it like this
	 *
	 *   var w = 1920;
	 *   var h = 1080;
	 *   var fullWidth = w * 3;
	 *   var fullHeight = h * 2;
	 *
	 *   --A--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
	 *   --B--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
	 *   --C--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
	 *   --D--
	 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
	 *   --E--
	 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
	 *   --F--
	 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
	 *
	 *   Note there is no reason monitors have to be the same size or in a grid.
	 */
	
	THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {
	
		this.fullWidth = fullWidth;
		this.fullHeight = fullHeight;
		this.x = x;
		this.y = y;
		this.width = width;
		this.height = height;
	
		this.updateProjectionMatrix();
	
	};
	
	
	THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {
	
		var fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );
	
		if ( this.fullWidth ) {
	
			var aspect = this.fullWidth / this.fullHeight;
			var top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;
			var bottom = - top;
			var left = aspect * bottom;
			var right = aspect * top;
			var width = Math.abs( right - left );
			var height = Math.abs( top - bottom );
	
			this.projectionMatrix.makeFrustum(
				left + this.x * width / this.fullWidth,
				left + ( this.x + this.width ) * width / this.fullWidth,
				top - ( this.y + this.height ) * height / this.fullHeight,
				top - this.y * height / this.fullHeight,
				this.near,
				this.far
			);
	
		} else {
	
			this.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );
	
		}
	
	};
	
	THREE.PerspectiveCamera.prototype.copy = function ( source ) {
		
		THREE.Camera.prototype.copy.call( this, source );
		
		this.fov = source.fov;
		this.aspect = source.aspect;
		this.near = source.near;
		this.far = source.far;
		
		this.zoom = source.zoom;
		
		return this;
			
	};
	
	THREE.PerspectiveCamera.prototype.toJSON = function ( meta ) {
	
		var data = THREE.Object3D.prototype.toJSON.call( this, meta );
	
		data.object.zoom = this.zoom;
		data.object.fov = this.fov;
		data.object.aspect = this.aspect;
		data.object.near = this.near;
		data.object.far = this.far;
	
		return data;
	
	};
	
	// File:src/lights/Light.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Light = function ( color ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'Light';
	
		this.color = new THREE.Color( color );
	
		this.receiveShadow = undefined;
	
	};
	
	THREE.Light.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Light.prototype.constructor = THREE.Light;
	
	Object.defineProperties( THREE.Light.prototype, {
		onlyShadow: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .onlyShadow has been removed.' );
			}
		},
		shadowCameraFov: {
			set: function ( value ) {
				this.shadow.camera.fov = value;
			}
		},
		shadowCameraLeft: {
			set: function ( value ) {
				this.shadow.camera.left = value;
			}
		},
		shadowCameraRight: {
			set: function ( value ) {
				this.shadow.camera.right = value;
			}
		},
		shadowCameraTop: {
			set: function ( value ) {
				this.shadow.camera.top = value;
			}
		},
		shadowCameraBottom: {
			set: function ( value ) {
				this.shadow.camera.bottom = value;
			}
		},
		shadowCameraNear: {
			set: function ( value ) {
				this.shadow.camera.near = value;
			}
		},
		shadowCameraFar: {
			set: function ( value ) {
				this.shadow.camera.far = value;
			}
		},
		shadowCameraVisible: {
			set: function ( value ) {
				console.warn( 'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow ) instead.' );
			}
		},
		shadowBias: {
			set: function ( value ) {
				this.shadow.bias = value;
			}
		},
		shadowDarkness: {
			set: function ( value ) {
				this.shadow.darkness = value;
			}
		},
		shadowMapWidth: {
			set: function ( value ) {
				this.shadow.mapSize.width = value;
			}
		},
		shadowMapHeight: {
			set: function ( value ) {
				this.shadow.mapSize.height = value;
			}
		}
	} );
	
	THREE.Light.prototype.copy = function ( source ) {
	
		THREE.Object3D.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
	
		return this;
	
	};
	
	THREE.Light.prototype.toJSON = function ( meta ) {
	
		var data = THREE.Object3D.prototype.toJSON.call( this, meta );
	
		data.object.color = this.color.getHex();
		if ( this.groundColor !== undefined ) data.object.groundColor = this.groundColor.getHex();
	
		if ( this.intensity !== undefined ) data.object.intensity = this.intensity;
		if ( this.distance !== undefined ) data.object.distance = this.distance;
		if ( this.angle !== undefined ) data.object.angle = this.angle;
		if ( this.decay !== undefined ) data.object.decay = this.decay;
		if ( this.exponent !== undefined ) data.object.exponent = this.exponent;
	
		return data;
	
	};
	
	// File:src/lights/LightShadow.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.LightShadow = function ( camera ) {
	
		this.camera = camera;
	
		this.bias = 0;
		this.darkness = 1;
	
		this.mapSize = new THREE.Vector2( 512, 512 );
	
		this.map = null;
		this.matrix = null;
	
	};
	
	THREE.LightShadow.prototype = {
	
		constructor: THREE.LightShadow,
	
		copy: function ( source ) {
	
			this.camera = source.camera.clone();
	
			this.bias = source.bias;
			this.darkness = source.darkness;
	
			this.mapSize.copy( source.mapSize );
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		}
	
	};
	
	// File:src/lights/AmbientLight.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.AmbientLight = function ( color ) {
	
		THREE.Light.call( this, color );
	
		this.type = 'AmbientLight';
	
		this.castShadow = undefined;
	
	};
	
	THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );
	THREE.AmbientLight.prototype.constructor = THREE.AmbientLight;
	
	// File:src/lights/DirectionalLight.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.DirectionalLight = function ( color, intensity ) {
	
		THREE.Light.call( this, color );
	
		this.type = 'DirectionalLight';
	
		this.position.set( 0, 1, 0 );
		this.updateMatrix();
	
		this.target = new THREE.Object3D();
	
		this.intensity = ( intensity !== undefined ) ? intensity : 1;
	
		this.shadow = new THREE.LightShadow( new THREE.OrthographicCamera( - 500, 500, 500, - 500, 50, 5000 ) );
	
	};
	
	THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );
	THREE.DirectionalLight.prototype.constructor = THREE.DirectionalLight;
	
	THREE.DirectionalLight.prototype.copy = function ( source ) {
	
		THREE.Light.prototype.copy.call( this, source );
	
		this.intensity = source.intensity;
		this.target = source.target.clone();
	
		this.shadow = source.shadow.clone();
	
		return this;
	
	};
	
	// File:src/lights/HemisphereLight.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {
	
		THREE.Light.call( this, skyColor );
	
		this.type = 'HemisphereLight';
	
		this.castShadow = undefined;
	
		this.position.set( 0, 1, 0 );
		this.updateMatrix();
	
		this.groundColor = new THREE.Color( groundColor );
		this.intensity = ( intensity !== undefined ) ? intensity : 1;
	
	};
	
	THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );
	THREE.HemisphereLight.prototype.constructor = THREE.HemisphereLight;
	
	THREE.HemisphereLight.prototype.copy = function ( source ) {
	
		THREE.Light.prototype.copy.call( this, source );
	
		this.groundColor.copy( source.groundColor );
		this.intensity = source.intensity;
	
		return this;
	
	};
	
	// File:src/lights/PointLight.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	
	THREE.PointLight = function ( color, intensity, distance, decay ) {
	
		THREE.Light.call( this, color );
	
		this.type = 'PointLight';
	
		this.intensity = ( intensity !== undefined ) ? intensity : 1;
		this.distance = ( distance !== undefined ) ? distance : 0;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 90, 1, 1, 500 ) );
	
	};
	
	THREE.PointLight.prototype = Object.create( THREE.Light.prototype );
	THREE.PointLight.prototype.constructor = THREE.PointLight;
	
	THREE.PointLight.prototype.copy = function ( source ) {
	
		THREE.Light.prototype.copy.call( this, source );
	
		this.intensity = source.intensity;
		this.distance = source.distance;
		this.decay = source.decay;
	
		this.shadow = source.shadow.clone();
	
		return this;
	
	};
	
	// File:src/lights/SpotLight.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.SpotLight = function ( color, intensity, distance, angle, exponent, decay ) {
	
		THREE.Light.call( this, color );
	
		this.type = 'SpotLight';
	
		this.position.set( 0, 1, 0 );
		this.updateMatrix();
	
		this.target = new THREE.Object3D();
	
		this.intensity = ( intensity !== undefined ) ? intensity : 1;
		this.distance = ( distance !== undefined ) ? distance : 0;
		this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
		this.exponent = ( exponent !== undefined ) ? exponent : 10;
		this.decay = ( decay !== undefined ) ? decay : 1;	// for physically correct lights, should be 2.
	
		this.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 50, 1, 50, 5000 ) );
	
	};
	
	THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );
	THREE.SpotLight.prototype.constructor = THREE.SpotLight;
	
	THREE.SpotLight.prototype.copy = function ( source ) {
	
		THREE.Light.prototype.copy.call( this, source );
	
		this.intensity = source.intensity;
		this.distance = source.distance;
		this.angle = source.angle;
		this.exponent = source.exponent;
		this.decay = source.decay;
	
		this.target = source.target.clone();
	
		this.shadow = source.shadow.clone();
	
		return this;
	
	};
	
	// File:src/loaders/Cache.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Cache = {
	
		enabled: false,
	
		files: {},
	
		add: function ( key, file ) {
	
			if ( this.enabled === false ) return;
	
			// console.log( 'THREE.Cache', 'Adding key:', key );
	
			this.files[ key ] = file;
	
		},
	
		get: function ( key ) {
	
			if ( this.enabled === false ) return;
	
			// console.log( 'THREE.Cache', 'Checking key:', key );
	
			return this.files[ key ];
	
		},
	
		remove: function ( key ) {
	
			delete this.files[ key ];
	
		},
	
		clear: function () {
	
			this.files = {};
	
		}
	
	};
	
	// File:src/loaders/Loader.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Loader = function () {
	
		this.onLoadStart = function () {};
		this.onLoadProgress = function () {};
		this.onLoadComplete = function () {};
	
	};
	
	THREE.Loader.prototype = {
	
		constructor: THREE.Loader,
	
		crossOrigin: undefined,
	
		extractUrlBase: function ( url ) {
	
			var parts = url.split( '/' );
	
			if ( parts.length === 1 ) return './';
	
			parts.pop();
	
			return parts.join( '/' ) + '/';
	
		},
	
		initMaterials: function ( materials, texturePath, crossOrigin ) {
	
			var array = [];
	
			for ( var i = 0; i < materials.length; ++ i ) {
	
				array[ i ] = this.createMaterial( materials[ i ], texturePath, crossOrigin );
	
			}
	
			return array;
	
		},
	
		createMaterial: ( function () {
	
			var color, textureLoader, materialLoader;
	
			return function ( m, texturePath, crossOrigin ) {
	
				if ( color === undefined ) color = new THREE.Color();
				if ( textureLoader === undefined ) textureLoader = new THREE.TextureLoader();
				if ( materialLoader === undefined ) materialLoader = new THREE.MaterialLoader();
	
				// convert from old material format
	
				var textures = {};
	
				function loadTexture( path, repeat, offset, wrap, anisotropy ) {
	
					var fullPath = texturePath + path;
					var loader = THREE.Loader.Handlers.get( fullPath );
	
					var texture;
	
					if ( loader !== null ) {
	
						texture = loader.load( fullPath );
	
					} else {
	
						textureLoader.setCrossOrigin( crossOrigin );
						texture = textureLoader.load( fullPath );
	
					}
	
					if ( repeat !== undefined ) {
	
						texture.repeat.fromArray( repeat );
	
						if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
						if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;
	
					}
	
					if ( offset !== undefined ) {
	
						texture.offset.fromArray( offset );
	
					}
	
					if ( wrap !== undefined ) {
	
						if ( wrap[ 0 ] === 'repeat' ) texture.wrapS = THREE.RepeatWrapping;
						if ( wrap[ 0 ] === 'mirror' ) texture.wrapS = THREE.MirroredRepeatWrapping;
	
						if ( wrap[ 1 ] === 'repeat' ) texture.wrapT = THREE.RepeatWrapping;
						if ( wrap[ 1 ] === 'mirror' ) texture.wrapT = THREE.MirroredRepeatWrapping;
	
					}
	
					if ( anisotropy !== undefined ) {
	
						texture.anisotropy = anisotropy;
	
					}
	
					var uuid = THREE.Math.generateUUID();
	
					textures[ uuid ] = texture;
	
					return uuid;
	
				}
	
				//
	
				var json = {
					uuid: THREE.Math.generateUUID(),
					type: 'MeshLambertMaterial'
				};
	
				for ( var name in m ) {
	
					var value = m[ name ];
	
					switch ( name ) {
						case 'DbgColor':
							json.color = value;
							break;
						case 'DbgIndex':
						case 'opticalDensity':
						case 'illumination':
							// These were never supported
							break;
						case 'DbgName':
							json.name = value;
							break;
						case 'blending':
							json.blending = THREE[ value ];
							break;
						case 'colorDiffuse':
							json.color = color.fromArray( value ).getHex();
							break;
						case 'colorSpecular':
							json.specular = color.fromArray( value ).getHex();
							break;
						case 'colorEmissive':
							json.emissive = color.fromArray( value ).getHex();
							break;
						case 'specularCoef':
							json.shininess = value;
							break;
						case 'shading':
							if ( value.toLowerCase() === 'basic' ) json.type = 'MeshBasicMaterial';
							if ( value.toLowerCase() === 'phong' ) json.type = 'MeshPhongMaterial';
							break;
						case 'mapDiffuse':
							json.map = loadTexture( value, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );
							break;
						case 'mapDiffuseRepeat':
						case 'mapDiffuseOffset':
						case 'mapDiffuseWrap':
						case 'mapDiffuseAnisotropy':
							break;
						case 'mapLight':
							json.lightMap = loadTexture( value, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );
							break;
						case 'mapLightRepeat':
						case 'mapLightOffset':
						case 'mapLightWrap':
						case 'mapLightAnisotropy':
							break;
						case 'mapAO':
							json.aoMap = loadTexture( value, m.mapAORepeat, m.mapAOOffset, m.mapAOWrap, m.mapAOAnisotropy );
							break;
						case 'mapAORepeat':
						case 'mapAOOffset':
						case 'mapAOWrap':
						case 'mapAOAnisotropy':
							break;
						case 'mapBump':
							json.bumpMap = loadTexture( value, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );
							break;
						case 'mapBumpScale':
							json.bumpScale = value;
							break;
						case 'mapBumpRepeat':
						case 'mapBumpOffset':
						case 'mapBumpWrap':
						case 'mapBumpAnisotropy':
							break;
						case 'mapNormal':
							json.normalMap = loadTexture( value, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );
							break;
						case 'mapNormalFactor':
							json.normalScale = [ value, value ];
							break;
						case 'mapNormalRepeat':
						case 'mapNormalOffset':
						case 'mapNormalWrap':
						case 'mapNormalAnisotropy':
							break;
						case 'mapSpecular':
							json.specularMap = loadTexture( value, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );
							break;
						case 'mapSpecularRepeat':
						case 'mapSpecularOffset':
						case 'mapSpecularWrap':
						case 'mapSpecularAnisotropy':
							break;
						case 'mapAlpha':
							json.alphaMap = loadTexture( value, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );
							break;
						case 'mapAlphaRepeat':
						case 'mapAlphaOffset':
						case 'mapAlphaWrap':
						case 'mapAlphaAnisotropy':
							break;
						case 'flipSided':
							json.side = THREE.BackSide;
							break;
						case 'doubleSided':
							json.side = THREE.DoubleSide;
							break;
						case 'transparency':
							console.warn( 'THREE.Loader: transparency has been renamed to opacity' );
							json.opacity = value;
							break;
						case 'opacity':
						case 'transparent':
						case 'depthTest':
						case 'depthWrite':
						case 'transparent':
						case 'visible':
						case 'wireframe':
							json[ name ] = value;
							break;
						case 'vertexColors':
							if ( value === true ) json.vertexColors = THREE.VertexColors;
							if ( value === 'face' ) json.vertexColors = THREE.FaceColors;
							break;
						default:
							console.error( 'Loader.createMaterial: Unsupported', name, value );
							break;
					}
	
				}
	
				if ( json.type !== 'MeshPhongMaterial' ) delete json.specular;
				if ( json.opacity < 1 ) json.transparent = true;
	
				materialLoader.setTextures( textures );
	
				return materialLoader.parse( json );
	
			};
	
		} )()
	
	};
	
	THREE.Loader.Handlers = {
	
		handlers: [],
	
		add: function ( regex, loader ) {
	
			this.handlers.push( regex, loader );
	
		},
	
		get: function ( file ) {
	
			var handlers = this.handlers;
	
			for ( var i = 0, l = handlers.length; i < l; i += 2 ) {
	
				var regex = handlers[ i ];
				var loader  = handlers[ i + 1 ];
	
				if ( regex.test( file ) ) {
	
					return loader;
	
				}
	
			}
	
			return null;
	
		}
	
	};
	
	// File:src/loaders/XHRLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.XHRLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
	};
	
	THREE.XHRLoader.prototype = {
	
		constructor: THREE.XHRLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var cached = THREE.Cache.get( url );
	
			if ( cached !== undefined ) {
	
				if ( onLoad ) {
	
					setTimeout( function () {
	
						onLoad( cached );
	
					}, 0 );
	
				}
	
				return cached;
	
			}
	
			var request = new XMLHttpRequest();
			request.open( 'GET', url, true );
	
			request.addEventListener( 'load', function ( event ) {
	
				var response = event.target.response;
	
				THREE.Cache.add( url, response );
	
				if ( onLoad ) onLoad( response );
	
				scope.manager.itemEnd( url );
	
			}, false );
	
			if ( onProgress !== undefined ) {
	
				request.addEventListener( 'progress', function ( event ) {
	
					onProgress( event );
	
				}, false );
	
			}
	
			request.addEventListener( 'error', function ( event ) {
	
				if ( onError ) onError( event );
	
				scope.manager.itemError( url );
	
			}, false );
	
			if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;
			if ( this.responseType !== undefined ) request.responseType = this.responseType;
			if ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;
	
			request.send( null );
	
			scope.manager.itemStart( url );
	
			return request;
	
		},
	
		setResponseType: function ( value ) {
	
			this.responseType = value;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		},
	
		setWithCredentials: function ( value ) {
	
			this.withCredentials = value;
	
		}
	
	};
	
	// File:src/loaders/ImageLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.ImageLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
	};
	
	THREE.ImageLoader.prototype = {
	
		constructor: THREE.ImageLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var cached = THREE.Cache.get( url );
	
			if ( cached !== undefined ) {
	
				scope.manager.itemStart( url );
	
				if ( onLoad ) {
	
					setTimeout( function () {
	
						onLoad( cached );
	
						scope.manager.itemEnd( url );
	
					}, 0 );
	
				} else {
	
					scope.manager.itemEnd( url );
	
				}
	
				return cached;
	
			}
	
			var image = document.createElement( 'img' );
	
			image.addEventListener( 'load', function ( event ) {
	
				THREE.Cache.add( url, this );
	
				if ( onLoad ) onLoad( this );
	
				scope.manager.itemEnd( url );
	
			}, false );
	
			if ( onProgress !== undefined ) {
	
				image.addEventListener( 'progress', function ( event ) {
	
					onProgress( event );
	
				}, false );
	
			}
	
			image.addEventListener( 'error', function ( event ) {
	
				if ( onError ) onError( event );
	
				scope.manager.itemError( url );
	
			}, false );
	
			if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;
	
			scope.manager.itemStart( url );
	
			image.src = url;
	
			return image;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		}
	
	};
	
	// File:src/loaders/JSONLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.JSONLoader = function ( manager ) {
	
		if ( typeof manager === 'boolean' ) {
	
			console.warn( 'THREE.JSONLoader: showStatus parameter has been removed from constructor.' );
			manager = undefined;
	
		}
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
		this.withCredentials = false;
	
	};
	
	THREE.JSONLoader.prototype = {
	
		constructor: THREE.JSONLoader,
	
		// Deprecated
	
		get statusDomElement () {
	
			if ( this._statusDomElement === undefined ) {
	
				this._statusDomElement = document.createElement( 'div' );
	
			}
	
			console.warn( 'THREE.JSONLoader: .statusDomElement has been removed.' );
			return this._statusDomElement;
	
		},
	
		load: function( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var texturePath = this.texturePath && ( typeof this.texturePath === "string" ) ? this.texturePath : THREE.Loader.prototype.extractUrlBase( url );
	
			var loader = new THREE.XHRLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setWithCredentials( this.withCredentials );
			loader.load( url, function ( text ) {
	
				var json = JSON.parse( text );
				var metadata = json.metadata;
	
				if ( metadata !== undefined ) {
	
					if ( metadata.type === 'object' ) {
	
						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.ObjectLoader instead.' );
						return;
	
					}
	
					if ( metadata.type === 'scene' ) {
	
						console.error( 'THREE.JSONLoader: ' + url + ' should be loaded with THREE.SceneLoader instead.' );
						return;
	
					}
	
				}
	
				var object = scope.parse( json, texturePath );
				onLoad( object.geometry, object.materials );
	
			} );
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		},
	
		setTexturePath: function ( value ) {
	
			this.texturePath = value;
	
		},
	
		parse: function ( json, texturePath ) {
	
			var geometry = new THREE.Geometry(),
			scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;
	
			parseModel( scale );
	
			parseSkin();
			parseMorphing( scale );
			parseAnimations();
	
			geometry.computeFaceNormals();
			geometry.computeBoundingSphere();
	
			function parseModel( scale ) {
	
				function isBitSet( value, position ) {
	
					return value & ( 1 << position );
	
				}
	
				var i, j, fi,
	
				offset, zLength,
	
			colorIndex, normalIndex, uvIndex, materialIndex,
	
				type,
				isQuad,
				hasMaterial,
				hasFaceVertexUv,
				hasFaceNormal, hasFaceVertexNormal,
				hasFaceColor, hasFaceVertexColor,
	
			vertex, face, faceA, faceB, hex, normal,
	
				uvLayer, uv, u, v,
	
				faces = json.faces,
				vertices = json.vertices,
				normals = json.normals,
				colors = json.colors,
	
				nUvLayers = 0;
	
				if ( json.uvs !== undefined ) {
	
					// disregard empty arrays
	
					for ( i = 0; i < json.uvs.length; i ++ ) {
	
						if ( json.uvs[ i ].length ) nUvLayers ++;
	
					}
	
					for ( i = 0; i < nUvLayers; i ++ ) {
	
						geometry.faceVertexUvs[ i ] = [];
	
					}
	
				}
	
				offset = 0;
				zLength = vertices.length;
	
				while ( offset < zLength ) {
	
					vertex = new THREE.Vector3();
	
					vertex.x = vertices[ offset ++ ] * scale;
					vertex.y = vertices[ offset ++ ] * scale;
					vertex.z = vertices[ offset ++ ] * scale;
	
					geometry.vertices.push( vertex );
	
				}
	
				offset = 0;
				zLength = faces.length;
	
				while ( offset < zLength ) {
	
					type = faces[ offset ++ ];
	
	
					isQuad              = isBitSet( type, 0 );
					hasMaterial         = isBitSet( type, 1 );
					hasFaceVertexUv     = isBitSet( type, 3 );
					hasFaceNormal       = isBitSet( type, 4 );
					hasFaceVertexNormal = isBitSet( type, 5 );
					hasFaceColor	     = isBitSet( type, 6 );
					hasFaceVertexColor  = isBitSet( type, 7 );
	
					// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);
	
					if ( isQuad ) {
	
						faceA = new THREE.Face3();
						faceA.a = faces[ offset ];
						faceA.b = faces[ offset + 1 ];
						faceA.c = faces[ offset + 3 ];
	
						faceB = new THREE.Face3();
						faceB.a = faces[ offset + 1 ];
						faceB.b = faces[ offset + 2 ];
						faceB.c = faces[ offset + 3 ];
	
						offset += 4;
	
						if ( hasMaterial ) {
	
							materialIndex = faces[ offset ++ ];
							faceA.materialIndex = materialIndex;
							faceB.materialIndex = materialIndex;
	
						}
	
						// to get face <=> uv index correspondence
	
						fi = geometry.faces.length;
	
						if ( hasFaceVertexUv ) {
	
							for ( i = 0; i < nUvLayers; i ++ ) {
	
								uvLayer = json.uvs[ i ];
	
								geometry.faceVertexUvs[ i ][ fi ] = [];
								geometry.faceVertexUvs[ i ][ fi + 1 ] = [];
	
								for ( j = 0; j < 4; j ++ ) {
	
									uvIndex = faces[ offset ++ ];
	
									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];
	
									uv = new THREE.Vector2( u, v );
	
									if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
									if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );
	
								}
	
							}
	
						}
	
						if ( hasFaceNormal ) {
	
							normalIndex = faces[ offset ++ ] * 3;
	
							faceA.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);
	
							faceB.normal.copy( faceA.normal );
	
						}
	
						if ( hasFaceVertexNormal ) {
	
							for ( i = 0; i < 4; i ++ ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
	
								if ( i !== 2 ) faceA.vertexNormals.push( normal );
								if ( i !== 0 ) faceB.vertexNormals.push( normal );
	
							}
	
						}
	
	
						if ( hasFaceColor ) {
	
							colorIndex = faces[ offset ++ ];
							hex = colors[ colorIndex ];
	
							faceA.color.setHex( hex );
							faceB.color.setHex( hex );
	
						}
	
	
						if ( hasFaceVertexColor ) {
	
							for ( i = 0; i < 4; i ++ ) {
	
								colorIndex = faces[ offset ++ ];
								hex = colors[ colorIndex ];
	
								if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
								if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );
	
							}
	
						}
	
						geometry.faces.push( faceA );
						geometry.faces.push( faceB );
	
					} else {
	
						face = new THREE.Face3();
						face.a = faces[ offset ++ ];
						face.b = faces[ offset ++ ];
						face.c = faces[ offset ++ ];
	
						if ( hasMaterial ) {
	
							materialIndex = faces[ offset ++ ];
							face.materialIndex = materialIndex;
	
						}
	
						// to get face <=> uv index correspondence
	
						fi = geometry.faces.length;
	
						if ( hasFaceVertexUv ) {
	
							for ( i = 0; i < nUvLayers; i ++ ) {
	
								uvLayer = json.uvs[ i ];
	
								geometry.faceVertexUvs[ i ][ fi ] = [];
	
								for ( j = 0; j < 3; j ++ ) {
	
									uvIndex = faces[ offset ++ ];
	
									u = uvLayer[ uvIndex * 2 ];
									v = uvLayer[ uvIndex * 2 + 1 ];
	
									uv = new THREE.Vector2( u, v );
	
									geometry.faceVertexUvs[ i ][ fi ].push( uv );
	
								}
	
							}
	
						}
	
						if ( hasFaceNormal ) {
	
							normalIndex = faces[ offset ++ ] * 3;
	
							face.normal.set(
								normals[ normalIndex ++ ],
								normals[ normalIndex ++ ],
								normals[ normalIndex ]
							);
	
						}
	
						if ( hasFaceVertexNormal ) {
	
							for ( i = 0; i < 3; i ++ ) {
	
								normalIndex = faces[ offset ++ ] * 3;
	
								normal = new THREE.Vector3(
									normals[ normalIndex ++ ],
									normals[ normalIndex ++ ],
									normals[ normalIndex ]
								);
	
								face.vertexNormals.push( normal );
	
							}
	
						}
	
	
						if ( hasFaceColor ) {
	
							colorIndex = faces[ offset ++ ];
							face.color.setHex( colors[ colorIndex ] );
	
						}
	
	
						if ( hasFaceVertexColor ) {
	
							for ( i = 0; i < 3; i ++ ) {
	
								colorIndex = faces[ offset ++ ];
								face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );
	
							}
	
						}
	
						geometry.faces.push( face );
	
					}
	
				}
	
			};
	
			function parseSkin() {
	
				var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;
	
				if ( json.skinWeights ) {
	
					for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {
	
						var x =                               json.skinWeights[ i ];
						var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
						var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
						var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;
	
						geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );
	
					}
	
				}
	
				if ( json.skinIndices ) {
	
					for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {
	
						var a =                               json.skinIndices[ i ];
						var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
						var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
						var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;
	
						geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );
	
					}
	
				}
	
				geometry.bones = json.bones;
	
				if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {
	
					console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
						geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );
	
				}
	
			};
	
			function parseMorphing( scale ) {
	
				if ( json.morphTargets !== undefined ) {
	
					for ( var i = 0, l = json.morphTargets.length; i < l; i ++ ) {
	
						geometry.morphTargets[ i ] = {};
						geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
						geometry.morphTargets[ i ].vertices = [];
	
						var dstVertices = geometry.morphTargets[ i ].vertices;
						var srcVertices = json.morphTargets[ i ].vertices;
	
						for ( var v = 0, vl = srcVertices.length; v < vl; v += 3 ) {
	
							var vertex = new THREE.Vector3();
							vertex.x = srcVertices[ v ] * scale;
							vertex.y = srcVertices[ v + 1 ] * scale;
							vertex.z = srcVertices[ v + 2 ] * scale;
	
							dstVertices.push( vertex );
	
						}
	
					}
	
				}
	
				if ( json.morphColors !== undefined && json.morphColors.length > 0 ) {
	
					console.warn( 'THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.' );
	
					var faces = geometry.faces;
					var morphColors = json.morphColors[ 0 ].colors;
	
					for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
						faces[ i ].color.fromArray( morphColors, i * 3 );
	
					}
	
				}
	
			}
	
			function parseAnimations() {
	
				var outputAnimations = [];
	
				// parse old style Bone/Hierarchy animations
				var animations = [];
				if ( json.animation !== undefined ) {
					animations.push( json.animation );
				}
				if ( json.animations !== undefined ) {
					if ( json.animations.length ) {
						animations = animations.concat( json.animations );
					} else {
						animations.push( json.animations );
					}
				}
	
				for ( var i = 0; i < animations.length; i ++ ) {
	
					var clip = THREE.AnimationClip.parseAnimation( animations[i], geometry.bones );
					if ( clip ) outputAnimations.push( clip );
	
				}
	
				// parse implicit morph animations
				if ( geometry.morphTargets ) {
	
					// TODO: Figure out what an appropraite FPS is for morph target animations -- defaulting to 10, but really it is completely arbitrary.
					var morphAnimationClips = THREE.AnimationClip.CreateClipsFromMorphTargetSequences( geometry.morphTargets, 10 );
					outputAnimations = outputAnimations.concat( morphAnimationClips );
	
				}
	
				if ( outputAnimations.length > 0 ) geometry.animations = outputAnimations;
	
			};
	
			if ( json.materials === undefined || json.materials.length === 0 ) {
	
				return { geometry: geometry };
	
			} else {
	
				var materials = THREE.Loader.prototype.initMaterials( json.materials, texturePath, this.crossOrigin );
	
				return { geometry: geometry, materials: materials };
	
			}
	
		}
	
	};
	
	// File:src/loaders/LoadingManager.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.LoadingManager = function ( onLoad, onProgress, onError ) {
	
		var scope = this;
	
		var isLoading = false, itemsLoaded = 0, itemsTotal = 0;
	
		this.onStart = undefined;
		this.onLoad = onLoad;
		this.onProgress = onProgress;
		this.onError = onError;
	
		this.itemStart = function ( url ) {
	
			itemsTotal ++;
	
			if ( isLoading === false ) {
	
				if ( scope.onStart !== undefined ) {
	
					scope.onStart( url, itemsLoaded, itemsTotal );
	
				}
	
			}
	
			isLoading = true;
	
		};
	
		this.itemEnd = function ( url ) {
	
			itemsLoaded ++;
	
			if ( scope.onProgress !== undefined ) {
	
				scope.onProgress( url, itemsLoaded, itemsTotal );
	
			}
	
			if ( itemsLoaded === itemsTotal ) {
	
				isLoading = false;
	
				if ( scope.onLoad !== undefined ) {
	
					scope.onLoad();
	
				}
	
			}
	
		};
	
		this.itemError = function ( url ) {
	
			if ( scope.onError !== undefined ) {
	
				scope.onError( url );
	
			}
	
		};
	
	};
	
	THREE.DefaultLoadingManager = new THREE.LoadingManager();
	
	// File:src/loaders/BufferGeometryLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.BufferGeometryLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
	};
	
	THREE.BufferGeometryLoader.prototype = {
	
		constructor: THREE.BufferGeometryLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var loader = new THREE.XHRLoader( scope.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.load( url, function ( text ) {
	
				onLoad( scope.parse( JSON.parse( text ) ) );
	
			}, onProgress, onError );
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		},
	
		parse: function ( json ) {
	
			var geometry = new THREE.BufferGeometry();
	
			var index = json.data.index;
	
			if ( index !== undefined ) {
	
				var typedArray = new self[ index.type ]( index.array );
				geometry.setIndex( new THREE.BufferAttribute( typedArray, 1 ) );
	
			}
	
			var attributes = json.data.attributes;
	
			for ( var key in attributes ) {
	
				var attribute = attributes[ key ];
				var typedArray = new self[ attribute.type ]( attribute.array );
	
				geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );
	
			}
	
			var groups = json.data.groups || json.data.drawcalls || json.data.offsets;
	
			if ( groups !== undefined ) {
	
				for ( var i = 0, n = groups.length; i !== n; ++ i ) {
	
					var group = groups[ i ];
	
					geometry.addGroup( group.start, group.count );
	
				}
	
			}
	
			var boundingSphere = json.data.boundingSphere;
	
			if ( boundingSphere !== undefined ) {
	
				var center = new THREE.Vector3();
	
				if ( boundingSphere.center !== undefined ) {
	
					center.fromArray( boundingSphere.center );
	
				}
	
				geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );
	
			}
	
			return geometry;
	
		}
	
	};
	
	// File:src/loaders/MaterialLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.MaterialLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.textures = {};
	
	};
	
	THREE.MaterialLoader.prototype = {
	
		constructor: THREE.MaterialLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var loader = new THREE.XHRLoader( scope.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.load( url, function ( text ) {
	
				onLoad( scope.parse( JSON.parse( text ) ) );
	
			}, onProgress, onError );
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		},
	
		setTextures: function ( value ) {
	
			this.textures = value;
	
		},
	
		getTexture: function ( name ) {
	
			var textures = this.textures;
	
			if ( textures[ name ] === undefined ) {
	
				console.warn( 'THREE.MaterialLoader: Undefined texture', name );
	
			}
	
			return textures[ name ];
	
		},
	
		parse: function ( json ) {
	
			var material = new THREE[ json.type ];
			material.uuid = json.uuid;
	
			if ( json.name !== undefined ) material.name = json.name;
			if ( json.color !== undefined ) material.color.setHex( json.color );
			if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
			if ( json.specular !== undefined ) material.specular.setHex( json.specular );
			if ( json.shininess !== undefined ) material.shininess = json.shininess;
			if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
			if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
			if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;
			if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
			if ( json.shading !== undefined ) material.shading = json.shading;
			if ( json.blending !== undefined ) material.blending = json.blending;
			if ( json.side !== undefined ) material.side = json.side;
			if ( json.opacity !== undefined ) material.opacity = json.opacity;
			if ( json.transparent !== undefined ) material.transparent = json.transparent;
			if ( json.alphaTest !== undefined ) material.alphaTest = json.alphaTest;
			if ( json.depthTest !== undefined ) material.depthTest = json.depthTest;
			if ( json.depthWrite !== undefined ) material.depthWrite = json.depthWrite;
			if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;
			if ( json.wireframeLinewidth !== undefined ) material.wireframeLinewidth = json.wireframeLinewidth;
	
			// for PointsMaterial
			if ( json.size !== undefined ) material.size = json.size;
			if ( json.sizeAttenuation !== undefined ) material.sizeAttenuation = json.sizeAttenuation;
	
			// maps
	
			if ( json.map !== undefined ) material.map = this.getTexture( json.map );
	
			if ( json.alphaMap !== undefined ) {
	
				material.alphaMap = this.getTexture( json.alphaMap );
				material.transparent = true;
	
			}
	
			if ( json.bumpMap !== undefined ) material.bumpMap = this.getTexture( json.bumpMap );
			if ( json.bumpScale !== undefined ) material.bumpScale = json.bumpScale;
	
			if ( json.normalMap !== undefined ) material.normalMap = this.getTexture( json.normalMap );
			if ( json.normalScale )	material.normalScale = new THREE.Vector2( json.normalScale, json.normalScale );
	
			if ( json.displacementMap !== undefined ) material.displacementMap = this.getTexture( json.displacementMap );
			if ( json.displacementScale !== undefined ) material.displacementScale = json.displacementScale;
			if ( json.displacementBias !== undefined ) material.displacementBias = json.displacementBias;
	
			if ( json.specularMap !== undefined ) material.specularMap = this.getTexture( json.specularMap );
	
			if ( json.envMap !== undefined ) {
	
				material.envMap = this.getTexture( json.envMap );
				material.combine = THREE.MultiplyOperation;
	
			}
	
			if ( json.reflectivity ) material.reflectivity = json.reflectivity;
	
			if ( json.lightMap !== undefined ) material.lightMap = this.getTexture( json.lightMap );
			if ( json.lightMapIntensity !== undefined ) material.lightMapIntensity = json.lightMapIntensity;
	
			if ( json.aoMap !== undefined ) material.aoMap = this.getTexture( json.aoMap );
			if ( json.aoMapIntensity !== undefined ) material.aoMapIntensity = json.aoMapIntensity;
	
			// MeshFaceMaterial
	
			if ( json.materials !== undefined ) {
	
				for ( var i = 0, l = json.materials.length; i < l; i ++ ) {
	
					material.materials.push( this.parse( json.materials[ i ] ) );
	
				}
	
			}
	
			return material;
	
		}
	
	};
	
	// File:src/loaders/ObjectLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.ObjectLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
		this.texturePath = '';
	
	};
	
	THREE.ObjectLoader.prototype = {
	
		constructor: THREE.ObjectLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			if ( this.texturePath === '' ) {
	
				this.texturePath = url.substring( 0, url.lastIndexOf( '/' ) + 1 );
	
			}
	
			var scope = this;
	
			var loader = new THREE.XHRLoader( scope.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.load( url, function ( text ) {
	
				scope.parse( JSON.parse( text ), onLoad );
	
			}, onProgress, onError );
	
		},
	
		setTexturePath: function ( value ) {
	
			this.texturePath = value;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		},
	
		parse: function ( json, onLoad ) {
	
			var geometries = this.parseGeometries( json.geometries );
	
			var images = this.parseImages( json.images, function () {
	
				if ( onLoad !== undefined ) onLoad( object );
	
			} );
	
			var textures  = this.parseTextures( json.textures, images );
			var materials = this.parseMaterials( json.materials, textures );
	
			var object = this.parseObject( json.object, geometries, materials );
	
			if ( json.animations ) {
	
				object.animations = this.parseAnimations( json.animations );
	
			}
	
			if ( json.images === undefined || json.images.length === 0 ) {
	
				if ( onLoad !== undefined ) onLoad( object );
	
			}
	
			return object;
	
		},
	
		parseGeometries: function ( json ) {
	
			var geometries = {};
	
			if ( json !== undefined ) {
	
				var geometryLoader = new THREE.JSONLoader();
				var bufferGeometryLoader = new THREE.BufferGeometryLoader();
	
				for ( var i = 0, l = json.length; i < l; i ++ ) {
	
					var geometry;
					var data = json[ i ];
	
					switch ( data.type ) {
	
						case 'PlaneGeometry':
						case 'PlaneBufferGeometry':
	
							geometry = new THREE[ data.type ](
								data.width,
								data.height,
								data.widthSegments,
								data.heightSegments
							);
	
							break;
	
						case 'BoxGeometry':
						case 'CubeGeometry': // backwards compatible
	
							geometry = new THREE.BoxGeometry(
								data.width,
								data.height,
								data.depth,
								data.widthSegments,
								data.heightSegments,
								data.depthSegments
							);
	
							break;
	
						case 'CircleBufferGeometry':
	
							geometry = new THREE.CircleBufferGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'CircleGeometry':
	
							geometry = new THREE.CircleGeometry(
								data.radius,
								data.segments,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'CylinderGeometry':
	
							geometry = new THREE.CylinderGeometry(
								data.radiusTop,
								data.radiusBottom,
								data.height,
								data.radialSegments,
								data.heightSegments,
								data.openEnded,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'SphereGeometry':
	
							geometry = new THREE.SphereGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'SphereBufferGeometry':
	
							geometry = new THREE.SphereBufferGeometry(
								data.radius,
								data.widthSegments,
								data.heightSegments,
								data.phiStart,
								data.phiLength,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'DodecahedronGeometry':
	
							geometry = new THREE.DodecahedronGeometry(
								data.radius,
								data.detail
							);
	
							break;
	
						case 'IcosahedronGeometry':
	
							geometry = new THREE.IcosahedronGeometry(
								data.radius,
								data.detail
							);
	
							break;
	
						case 'OctahedronGeometry':
	
							geometry = new THREE.OctahedronGeometry(
								data.radius,
								data.detail
							);
	
							break;
	
						case 'TetrahedronGeometry':
	
							geometry = new THREE.TetrahedronGeometry(
								data.radius,
								data.detail
							);
	
							break;
	
						case 'RingGeometry':
	
							geometry = new THREE.RingGeometry(
								data.innerRadius,
								data.outerRadius,
								data.thetaSegments,
								data.phiSegments,
								data.thetaStart,
								data.thetaLength
							);
	
							break;
	
						case 'TorusGeometry':
	
							geometry = new THREE.TorusGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.arc
							);
	
							break;
	
						case 'TorusKnotGeometry':
	
							geometry = new THREE.TorusKnotGeometry(
								data.radius,
								data.tube,
								data.radialSegments,
								data.tubularSegments,
								data.p,
								data.q,
								data.heightScale
							);
	
							break;
	
						case 'BufferGeometry':
	
							geometry = bufferGeometryLoader.parse( data );
	
							break;
	
						case 'Geometry':
	
							geometry = geometryLoader.parse( data.data, this.texturePath ).geometry;
	
							break;
	
						default:
	
							console.warn( 'THREE.ObjectLoader: Unsupported geometry type "' + data.type + '"' );
	
							continue;
	
					}
	
					geometry.uuid = data.uuid;
	
					if ( data.name !== undefined ) geometry.name = data.name;
	
					geometries[ data.uuid ] = geometry;
	
				}
	
			}
	
			return geometries;
	
		},
	
		parseMaterials: function ( json, textures ) {
	
			var materials = {};
	
			if ( json !== undefined ) {
	
				var loader = new THREE.MaterialLoader();
				loader.setTextures( textures );
	
				for ( var i = 0, l = json.length; i < l; i ++ ) {
	
					var material = loader.parse( json[ i ] );
					materials[ material.uuid ] = material;
	
				}
	
			}
	
			return materials;
	
		},
	
		parseAnimations: function ( json ) {
	
			var animations = [];
	
			for ( var i = 0; i < json.length; i ++ ) {
	
				var clip = THREE.AnimationClip.parse( json[i] );
	
				animations.push( clip );
	
			}
	
			return animations;
	
		},
	
		parseImages: function ( json, onLoad ) {
	
			var scope = this;
			var images = {};
	
			function loadImage( url ) {
	
				scope.manager.itemStart( url );
	
				return loader.load( url, function () {
	
					scope.manager.itemEnd( url );
	
				} );
	
			}
	
			if ( json !== undefined && json.length > 0 ) {
	
				var manager = new THREE.LoadingManager( onLoad );
	
				var loader = new THREE.ImageLoader( manager );
				loader.setCrossOrigin( this.crossOrigin );
	
				for ( var i = 0, l = json.length; i < l; i ++ ) {
	
					var image = json[ i ];
					var path = /^(\/\/)|([a-z]+:(\/\/)?)/i.test( image.url ) ? image.url : scope.texturePath + image.url;
	
					images[ image.uuid ] = loadImage( path );
	
				}
	
			}
	
			return images;
	
		},
	
		parseTextures: function ( json, images ) {
	
			function parseConstant( value ) {
	
				if ( typeof( value ) === 'number' ) return value;
	
				console.warn( 'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.', value );
	
				return THREE[ value ];
	
			}
	
			var textures = {};
	
			if ( json !== undefined ) {
	
				for ( var i = 0, l = json.length; i < l; i ++ ) {
	
					var data = json[ i ];
	
					if ( data.image === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: No "image" specified for', data.uuid );
	
					}
	
					if ( images[ data.image ] === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: Undefined image', data.image );
	
					}
	
					var texture = new THREE.Texture( images[ data.image ] );
					texture.needsUpdate = true;
	
					texture.uuid = data.uuid;
	
					if ( data.name !== undefined ) texture.name = data.name;
					if ( data.mapping !== undefined ) texture.mapping = parseConstant( data.mapping );
					if ( data.offset !== undefined ) texture.offset = new THREE.Vector2( data.offset[ 0 ], data.offset[ 1 ] );
					if ( data.repeat !== undefined ) texture.repeat = new THREE.Vector2( data.repeat[ 0 ], data.repeat[ 1 ] );
					if ( data.minFilter !== undefined ) texture.minFilter = parseConstant( data.minFilter );
					if ( data.magFilter !== undefined ) texture.magFilter = parseConstant( data.magFilter );
					if ( data.anisotropy !== undefined ) texture.anisotropy = data.anisotropy;
					if ( Array.isArray( data.wrap ) ) {
	
						texture.wrapS = parseConstant( data.wrap[ 0 ] );
						texture.wrapT = parseConstant( data.wrap[ 1 ] );
	
					}
	
					textures[ data.uuid ] = texture;
	
				}
	
			}
	
			return textures;
	
		},
	
		parseObject: function () {
	
			var matrix = new THREE.Matrix4();
	
			return function ( data, geometries, materials ) {
	
				var object;
	
				function getGeometry( name ) {
	
					if ( geometries[ name ] === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: Undefined geometry', name );
	
					}
	
					return geometries[ name ];
	
				}
	
				function getMaterial( name ) {
	
					if ( name === undefined ) return undefined;
	
					if ( materials[ name ] === undefined ) {
	
						console.warn( 'THREE.ObjectLoader: Undefined material', name );
	
					}
	
					return materials[ name ];
	
				}
	
				switch ( data.type ) {
	
					case 'Scene':
	
						object = new THREE.Scene();
	
						break;
	
					case 'PerspectiveCamera':
	
						object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );
	
						break;
	
					case 'OrthographicCamera':
	
						object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );
	
						break;
	
					case 'AmbientLight':
	
						object = new THREE.AmbientLight( data.color );
	
						break;
	
					case 'DirectionalLight':
	
						object = new THREE.DirectionalLight( data.color, data.intensity );
	
						break;
	
					case 'PointLight':
	
						object = new THREE.PointLight( data.color, data.intensity, data.distance, data.decay );
	
						break;
	
					case 'SpotLight':
	
						object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent, data.decay );
	
						break;
	
					case 'HemisphereLight':
	
						object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );
	
						break;
	
					case 'Mesh':
	
						object = new THREE.Mesh( getGeometry( data.geometry ), getMaterial( data.material ) );
	
						break;
	
					case 'LOD':
	
						object = new THREE.LOD();
	
						break;
	
					case 'Line':
	
						object = new THREE.Line( getGeometry( data.geometry ), getMaterial( data.material ), data.mode );
	
						break;
	
					case 'PointCloud':
					case 'Points':
	
						object = new THREE.Points( getGeometry( data.geometry ), getMaterial( data.material ) );
	
						break;
	
					case 'Sprite':
	
						object = new THREE.Sprite( getMaterial( data.material ) );
	
						break;
	
					case 'Group':
	
						object = new THREE.Group();
	
						break;
	
					default:
	
						object = new THREE.Object3D();
	
				}
	
				object.uuid = data.uuid;
	
				if ( data.name !== undefined ) object.name = data.name;
				if ( data.matrix !== undefined ) {
	
					matrix.fromArray( data.matrix );
					matrix.decompose( object.position, object.quaternion, object.scale );
	
				} else {
	
					if ( data.position !== undefined ) object.position.fromArray( data.position );
					if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
					if ( data.scale !== undefined ) object.scale.fromArray( data.scale );
	
				}
	
				if ( data.castShadow !== undefined ) object.castShadow = data.castShadow;
				if ( data.receiveShadow !== undefined ) object.receiveShadow = data.receiveShadow;
	
				if ( data.visible !== undefined ) object.visible = data.visible;
				if ( data.userData !== undefined ) object.userData = data.userData;
	
				if ( data.children !== undefined ) {
	
					for ( var child in data.children ) {
	
						object.add( this.parseObject( data.children[ child ], geometries, materials ) );
	
					}
	
				}
	
				if ( data.type === 'LOD' ) {
	
					var levels = data.levels;
	
					for ( var l = 0; l < levels.length; l ++ ) {
	
						var level = levels[ l ];
						var child = object.getObjectByProperty( 'uuid', level.object );
	
						if ( child !== undefined ) {
	
							object.addLevel( child, level.distance );
	
						}
	
					}
	
				}
	
				return object;
	
			}
	
		}()
	
	};
	
	// File:src/loaders/TextureLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.TextureLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
	};
	
	THREE.TextureLoader.prototype = {
	
		constructor: THREE.TextureLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var texture = new THREE.Texture();
	
			var loader = new THREE.ImageLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.load( url, function ( image ) {
	
				texture.image = image;
				texture.needsUpdate = true;
	
				if ( onLoad !== undefined ) {
	
					onLoad( texture );
	
				}
	
			}, onProgress, onError );
	
			return texture;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		}
	
	};
	
	// File:src/loaders/CubeTextureLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.CubeTextureLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
	};
	
	THREE.CubeTextureLoader.prototype = {
	
		constructor: THREE.CubeTextureLoader,
	
		load: function ( urls, onLoad, onProgress, onError ) {
	
			var texture = new THREE.CubeTexture( [] );
	
			var loader = new THREE.ImageLoader();
			loader.setCrossOrigin( this.crossOrigin );
	
			var loaded = 0;
	
			function loadTexture( i ) {
	
				loader.load( urls[ i ], function ( image ) {
	
					texture.images[ i ] = image;
	
					loaded ++;
	
					if ( loaded === 6 ) {
	
						texture.needsUpdate = true;
	
						if ( onLoad ) onLoad( texture );
	
					}
	
				}, undefined, onError );
	
			}
	
			for ( var i = 0; i < urls.length; ++ i ) {
	
				loadTexture( i );
	
			}
	
			return texture;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		}
	
	};
	
	// File:src/loaders/BinaryTextureLoader.js
	
	/**
	 * @author Nikos M. / https://github.com/foo123/
	 *
	 * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)
	 */
	
	THREE.DataTextureLoader = THREE.BinaryTextureLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
		// override in sub classes
		this._parser = null;
	
	};
	
	THREE.BinaryTextureLoader.prototype = {
	
		constructor: THREE.BinaryTextureLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var texture = new THREE.DataTexture();
	
			var loader = new THREE.XHRLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setResponseType( 'arraybuffer' );
	
			loader.load( url, function ( buffer ) {
	
				var texData = scope._parser( buffer );
	
				if ( ! texData ) return;
	
				if ( undefined !== texData.image ) {
	
					texture.image = texData.image;
	
				} else if ( undefined !== texData.data ) {
	
					texture.image.width = texData.width;
					texture.image.height = texData.height;
					texture.image.data = texData.data;
	
				}
	
				texture.wrapS = undefined !== texData.wrapS ? texData.wrapS : THREE.ClampToEdgeWrapping;
				texture.wrapT = undefined !== texData.wrapT ? texData.wrapT : THREE.ClampToEdgeWrapping;
	
				texture.magFilter = undefined !== texData.magFilter ? texData.magFilter : THREE.LinearFilter;
				texture.minFilter = undefined !== texData.minFilter ? texData.minFilter : THREE.LinearMipMapLinearFilter;
	
				texture.anisotropy = undefined !== texData.anisotropy ? texData.anisotropy : 1;
	
				if ( undefined !== texData.format ) {
	
					texture.format = texData.format;
	
				}
				if ( undefined !== texData.type ) {
	
					texture.type = texData.type;
	
				}
	
				if ( undefined !== texData.mipmaps ) {
	
					texture.mipmaps = texData.mipmaps;
	
				}
	
				if ( 1 === texData.mipmapCount ) {
	
					texture.minFilter = THREE.LinearFilter;
	
				}
	
				texture.needsUpdate = true;
	
				if ( onLoad ) onLoad( texture, texData );
	
			}, onProgress, onError );
	
	
			return texture;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		}
	
	};
	
	// File:src/loaders/CompressedTextureLoader.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * Abstract Base class to block based textures loader (dds, pvr, ...)
	 */
	
	THREE.CompressedTextureLoader = function ( manager ) {
	
		this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;
	
		// override in sub classes
		this._parser = null;
	
	};
	
	
	THREE.CompressedTextureLoader.prototype = {
	
		constructor: THREE.CompressedTextureLoader,
	
		load: function ( url, onLoad, onProgress, onError ) {
	
			var scope = this;
	
			var images = [];
	
			var texture = new THREE.CompressedTexture();
			texture.image = images;
	
			var loader = new THREE.XHRLoader( this.manager );
			loader.setCrossOrigin( this.crossOrigin );
			loader.setResponseType( 'arraybuffer' );
	
			if ( Array.isArray( url ) ) {
	
				var loaded = 0;
	
				var loadTexture = function ( i ) {
	
					loader.load( url[ i ], function ( buffer ) {
	
						var texDatas = scope._parser( buffer, true );
	
						images[ i ] = {
							width: texDatas.width,
							height: texDatas.height,
							format: texDatas.format,
							mipmaps: texDatas.mipmaps
						};
	
						loaded += 1;
	
						if ( loaded === 6 ) {
	
							if ( texDatas.mipmapCount === 1 )
	 							texture.minFilter = THREE.LinearFilter;
	
							texture.format = texDatas.format;
							texture.needsUpdate = true;
	
							if ( onLoad ) onLoad( texture );
	
						}
	
					}, onProgress, onError );
	
				};
	
				for ( var i = 0, il = url.length; i < il; ++ i ) {
	
					loadTexture( i );
	
				}
	
			} else {
	
				// compressed cubemap texture stored in a single DDS file
	
				loader.load( url, function ( buffer ) {
	
					var texDatas = scope._parser( buffer, true );
	
					if ( texDatas.isCubemap ) {
	
						var faces = texDatas.mipmaps.length / texDatas.mipmapCount;
	
						for ( var f = 0; f < faces; f ++ ) {
	
							images[ f ] = { mipmaps : [] };
	
							for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {
	
								images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
								images[ f ].format = texDatas.format;
								images[ f ].width = texDatas.width;
								images[ f ].height = texDatas.height;
	
							}
	
						}
	
					} else {
	
						texture.image.width = texDatas.width;
						texture.image.height = texDatas.height;
						texture.mipmaps = texDatas.mipmaps;
	
					}
	
					if ( texDatas.mipmapCount === 1 ) {
	
						texture.minFilter = THREE.LinearFilter;
	
					}
	
					texture.format = texDatas.format;
					texture.needsUpdate = true;
	
					if ( onLoad ) onLoad( texture );
	
				}, onProgress, onError );
	
			}
	
			return texture;
	
		},
	
		setCrossOrigin: function ( value ) {
	
			this.crossOrigin = value;
	
		}
	
	};
	
	// File:src/materials/Material.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Material = function () {
	
		Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.type = 'Material';
	
		this.side = THREE.FrontSide;
	
		this.opacity = 1;
		this.transparent = false;
	
		this.blending = THREE.NormalBlending;
	
		this.blendSrc = THREE.SrcAlphaFactor;
		this.blendDst = THREE.OneMinusSrcAlphaFactor;
		this.blendEquation = THREE.AddEquation;
		this.blendSrcAlpha = null;
		this.blendDstAlpha = null;
		this.blendEquationAlpha = null;
	
		this.depthFunc = THREE.LessEqualDepth;
		this.depthTest = true;
		this.depthWrite = true;
	
		this.colorWrite = true;
	
		this.precision = null; // override the renderer's default precision for this material
	
		this.polygonOffset = false;
		this.polygonOffsetFactor = 0;
		this.polygonOffsetUnits = 0;
	
		this.alphaTest = 0;
	
		this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer
	
		this.visible = true;
	
		this._needsUpdate = true;
	
	};
	
	THREE.Material.prototype = {
	
		constructor: THREE.Material,
	
		get needsUpdate () {
	
			return this._needsUpdate;
	
		},
	
		set needsUpdate ( value ) {
	
			if ( value === true ) this.update();
	
			this._needsUpdate = value;
	
		},
	
		setValues: function ( values ) {
	
			if ( values === undefined ) return;
	
			for ( var key in values ) {
	
				var newValue = values[ key ];
	
				if ( newValue === undefined ) {
	
					console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
					continue;
	
				}
	
				var currentValue = this[ key ];
	
				if ( currentValue === undefined ) {
	
					console.warn( "THREE." + this.type + ": '" + key + "' is not a property of this material." );
					continue;
	
				}
	
				if ( currentValue instanceof THREE.Color ) {
	
					currentValue.set( newValue );
	
				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {
	
					currentValue.copy( newValue );
	
				} else if ( key === 'overdraw' ) {
	
					// ensure overdraw is backwards-compatible with legacy boolean type
					this[ key ] = Number( newValue );
	
				} else {
	
					this[ key ] = newValue;
	
				}
	
			}
	
		},
	
		toJSON: function ( meta ) {
	
			var data = {
				metadata: {
					version: 4.4,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};
	
			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
	
			if ( this.color instanceof THREE.Color ) data.color = this.color.getHex();
			if ( this.emissive instanceof THREE.Color ) data.emissive = this.emissive.getHex();
			if ( this.specular instanceof THREE.Color ) data.specular = this.specular.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
	
			if ( this.map instanceof THREE.Texture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.alphaMap instanceof THREE.Texture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;
			if ( this.lightMap instanceof THREE.Texture ) data.lightMap = this.lightMap.toJSON( meta ).uuid;
			if ( this.bumpMap instanceof THREE.Texture ) {
	
				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;
	
			}
			if ( this.normalMap instanceof THREE.Texture ) {
	
				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalScale = this.normalScale; // Removed for now, causes issue in editor ui.js
	
			}
			if ( this.displacementMap instanceof THREE.Texture ) {
	
				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;
	
			}
			if ( this.specularMap instanceof THREE.Texture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
			if ( this.envMap instanceof THREE.Texture ) {
	
				data.envMap = this.envMap.toJSON( meta ).uuid;
				data.reflectivity = this.reflectivity; // Scale behind envMap
	
			}
	
			if ( this.size !== undefined ) data.size = this.size;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;
	
			if ( this.vertexColors !== undefined && this.vertexColors !== THREE.NoColors ) data.vertexColors = this.vertexColors;
			if ( this.shading !== undefined && this.shading !== THREE.SmoothShading ) data.shading = this.shading;
			if ( this.blending !== undefined && this.blending !== THREE.NormalBlending ) data.blending = this.blending;
			if ( this.side !== undefined && this.side !== THREE.FrontSide ) data.side = this.side;
	
			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;
			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
	
			return data;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			this.name = source.name;
	
			this.side = source.side;
	
			this.opacity = source.opacity;
			this.transparent = source.transparent;
	
			this.blending = source.blending;
	
			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;
	
			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;
	
			this.precision = source.precision;
	
			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;
	
			this.alphaTest = source.alphaTest;
	
			this.overdraw = source.overdraw;
	
			this.visible = source.visible;
	
			return this;
	
		},
	
		update: function () {
	
			this.dispatchEvent( { type: 'update' } );
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		},
	
		// Deprecated
	
		get wrapAround () {
	
			console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
	
		},
	
		set wrapAround ( boolean ) {
	
			console.warn( 'THREE.' + this.type + ': .wrapAround has been removed.' );
	
		},
	
		get wrapRGB () {
	
			console.warn( 'THREE.' + this.type + ': .wrapRGB has been removed.' );
			return new THREE.Color();
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );
	
	THREE.MaterialIdCount = 0;
	
	// File:src/materials/LineBasicMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *  linecap: "round",
	 *  linejoin: "round",
	 *
	 *  vertexColors: <bool>
	 *
	 *  fog: <bool>
	 * }
	 */
	
	THREE.LineBasicMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'LineBasicMaterial';
	
		this.color = new THREE.Color( 0xffffff );
	
		this.linewidth = 1;
		this.linecap = 'round';
		this.linejoin = 'round';
	
		this.vertexColors = THREE.NoColors;
	
		this.fog = true;
	
		this.setValues( parameters );
	
	};
	
	THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineBasicMaterial.prototype.constructor = THREE.LineBasicMaterial;
	
	THREE.LineBasicMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
	
		this.linewidth = source.linewidth;
		this.linecap = source.linecap;
		this.linejoin = source.linejoin;
	
		this.vertexColors = source.vertexColors;
	
		this.fog = source.fog;
	
		return this;
	
	};
	
	// File:src/materials/LineDashedMaterial.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  linewidth: <float>,
	 *
	 *  scale: <float>,
	 *  dashSize: <float>,
	 *  gapSize: <float>,
	 *
	 *  vertexColors: <bool>
	 *
	 *  fog: <bool>
	 * }
	 */
	
	THREE.LineDashedMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'LineDashedMaterial';
	
		this.color = new THREE.Color( 0xffffff );
	
		this.linewidth = 1;
	
		this.scale = 1;
		this.dashSize = 3;
		this.gapSize = 1;
	
		this.vertexColors = false;
	
		this.fog = true;
	
		this.setValues( parameters );
	
	};
	
	THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.LineDashedMaterial.prototype.constructor = THREE.LineDashedMaterial;
	
	THREE.LineDashedMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
		
		this.linewidth = source.linewidth;
	
		this.scale = source.scale;
		this.dashSize = source.dashSize;
		this.gapSize = source.gapSize;
	
		this.vertexColors = source.vertexColors;
	
		this.fog = source.fog;
	
		return this;
	
	};
	
	// File:src/materials/MeshBasicMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */
	
	THREE.MeshBasicMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'MeshBasicMaterial';
	
		this.color = new THREE.Color( 0xffffff ); // emissive
	
		this.map = null;
	
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
	
		this.specularMap = null;
	
		this.alphaMap = null;
	
		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
	
		this.fog = true;
	
		this.shading = THREE.SmoothShading;
	
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
	
		this.vertexColors = THREE.NoColors;
	
		this.skinning = false;
		this.morphTargets = false;
	
		this.setValues( parameters );
	
	};
	
	THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshBasicMaterial.prototype.constructor = THREE.MeshBasicMaterial;
	
	THREE.MeshBasicMaterial.prototype.copy = function ( source ) {
		
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
	
		this.map = source.map;
	
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
	
		this.specularMap = source.specularMap;
	
		this.alphaMap = source.alphaMap;
	
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
	
		this.fog = source.fog;
	
		this.shading = source.shading;
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
	
		this.vertexColors = source.vertexColors;
	
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		
		return this;
	
	};
	
	// File:src/materials/MeshLambertMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  emissive: <hex>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */
	
	THREE.MeshLambertMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'MeshLambertMaterial';
	
		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.emissive = new THREE.Color( 0x000000 );
	
		this.map = null;
	
		this.specularMap = null;
	
		this.alphaMap = null;
	
		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
	
		this.fog = true;
	
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
	
		this.vertexColors = THREE.NoColors;
	
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
	
		this.setValues( parameters );
	
	};
	
	THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshLambertMaterial.prototype.constructor = THREE.MeshLambertMaterial;
	
	THREE.MeshLambertMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
		this.emissive.copy( source.emissive );
	
		this.map = source.map;
	
		this.specularMap = source.specularMap;
	
		this.alphaMap = source.alphaMap;
	
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
	
		this.fog = source.fog;
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
	
		this.vertexColors = source.vertexColors;
	
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
	
		return this;
	
	};
	
	// File:src/materials/MeshPhongMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  emissive: <hex>,
	 *  specular: <hex>,
	 *  shininess: <float>,
	 *  opacity: <float>,
	 *
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  lightMap: new THREE.Texture( <Image> ),
	 *  lightMapIntensity: <float>
	 *
	 *  aoMap: new THREE.Texture( <Image> ),
	 *  aoMapIntensity: <float>
	 *
	 *  emissiveMap: new THREE.Texture( <Image> ),
	 *
	 *  bumpMap: new THREE.Texture( <Image> ),
	 *  bumpScale: <float>,
	 *
	 *  normalMap: new THREE.Texture( <Image> ),
	 *  normalScale: <Vector2>,
	 *
	 *  displacementMap: new THREE.Texture( <Image> ),
	 *  displacementScale: <float>,
	 *  displacementBias: <float>,
	 *
	 *  specularMap: new THREE.Texture( <Image> ),
	 *
	 *  alphaMap: new THREE.Texture( <Image> ),
	 *
	 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
	 *  combine: THREE.Multiply,
	 *  reflectivity: <float>,
	 *  refractionRatio: <float>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */
	
	THREE.MeshPhongMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'MeshPhongMaterial';
	
		this.color = new THREE.Color( 0xffffff ); // diffuse
		this.emissive = new THREE.Color( 0x000000 );
		this.specular = new THREE.Color( 0x111111 );
		this.shininess = 30;
	
		this.metal = false;
	
		this.map = null;
	
		this.lightMap = null;
		this.lightMapIntensity = 1.0;
	
		this.aoMap = null;
		this.aoMapIntensity = 1.0;
	
		this.emissiveMap = null;
	
		this.bumpMap = null;
		this.bumpScale = 1;
	
		this.normalMap = null;
		this.normalScale = new THREE.Vector2( 1, 1 );
	
		this.displacementMap = null;
		this.displacementScale = 1;
		this.displacementBias = 0;
	
		this.specularMap = null;
	
		this.alphaMap = null;
	
		this.envMap = null;
		this.combine = THREE.MultiplyOperation;
		this.reflectivity = 1;
		this.refractionRatio = 0.98;
	
		this.fog = true;
	
		this.shading = THREE.SmoothShading;
	
		this.wireframe = false;
		this.wireframeLinewidth = 1;
		this.wireframeLinecap = 'round';
		this.wireframeLinejoin = 'round';
	
		this.vertexColors = THREE.NoColors;
	
		this.skinning = false;
		this.morphTargets = false;
		this.morphNormals = false;
	
		this.setValues( parameters );
	
	};
	
	THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshPhongMaterial.prototype.constructor = THREE.MeshPhongMaterial;
	
	THREE.MeshPhongMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
		this.emissive.copy( source.emissive );
		this.specular.copy( source.specular );
		this.shininess = source.shininess;
	
		this.metal = source.metal;
	
		this.map = source.map;
	
		this.lightMap = source.lightMap;
		this.lightMapIntensity = source.lightMapIntensity;
	
		this.aoMap = source.aoMap;
		this.aoMapIntensity = source.aoMapIntensity;
	
		this.emissiveMap = source.emissiveMap;
	
		this.bumpMap = source.bumpMap;
		this.bumpScale = source.bumpScale;
	
		this.normalMap = source.normalMap;
		this.normalScale.copy( source.normalScale );
	
		this.displacementMap = source.displacementMap;
		this.displacementScale = source.displacementScale;
		this.displacementBias = source.displacementBias;
	
		this.specularMap = source.specularMap;
	
		this.alphaMap = source.alphaMap;
	
		this.envMap = source.envMap;
		this.combine = source.combine;
		this.reflectivity = source.reflectivity;
		this.refractionRatio = source.refractionRatio;
	
		this.fog = source.fog;
	
		this.shading = source.shading;
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
		this.wireframeLinecap = source.wireframeLinecap;
		this.wireframeLinejoin = source.wireframeLinejoin;
	
		this.vertexColors = source.vertexColors;
	
		this.skinning = source.skinning;
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
	
		return this;
	
	};
	
	// File:src/materials/MeshDepthMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */
	
	THREE.MeshDepthMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'MeshDepthMaterial';
	
		this.morphTargets = false;
		this.wireframe = false;
		this.wireframeLinewidth = 1;
	
		this.setValues( parameters );
	
	};
	
	THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshDepthMaterial.prototype.constructor = THREE.MeshDepthMaterial;
	
	THREE.MeshDepthMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
	
		return this;
	
	};
	
	// File:src/materials/MeshNormalMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 *
	 * parameters = {
	 *  opacity: <float>,
	 *
	 *  shading: THREE.FlatShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>
	 * }
	 */
	
	THREE.MeshNormalMaterial = function ( parameters ) {
	
		THREE.Material.call( this, parameters );
	
		this.type = 'MeshNormalMaterial';
	
		this.wireframe = false;
		this.wireframeLinewidth = 1;
	
		this.morphTargets = false;
	
		this.setValues( parameters );
	
	};
	
	THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.MeshNormalMaterial.prototype.constructor = THREE.MeshNormalMaterial;
	
	THREE.MeshNormalMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
	
		return this;
	
	};
	
	// File:src/materials/MultiMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.MultiMaterial = function ( materials ) {
	
		this.uuid = THREE.Math.generateUUID();
	
		this.type = 'MultiMaterial';
	
		this.materials = materials instanceof Array ? materials : [];
	
		this.visible = true;
	
	};
	
	THREE.MultiMaterial.prototype = {
	
		constructor: THREE.MultiMaterial,
	
		toJSON: function () {
	
			var output = {
				metadata: {
					version: 4.2,
					type: 'material',
					generator: 'MaterialExporter'
				},
				uuid: this.uuid,
				type: this.type,
				materials: []
			};
	
			for ( var i = 0, l = this.materials.length; i < l; i ++ ) {
	
				output.materials.push( this.materials[ i ].toJSON() );
	
			}
	
			output.visible = this.visible;
	
			return output;
	
		},
	
		clone: function () {
	
			var material = new this.constructor();
	
			for ( var i = 0; i < this.materials.length; i ++ ) {
	
				material.materials.push( this.materials[ i ].clone() );
	
			}
	
			material.visible = this.visible;
	
			return material;
	
		}
	
	};
	
	// backwards compatibility
	
	THREE.MeshFaceMaterial = THREE.MultiMaterial;
	
	// File:src/materials/PointsMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  size: <float>,
	 *  sizeAttenuation: <bool>,
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  vertexColors: <bool>,
	 *
	 *  fog: <bool>
	 * }
	 */
	
	THREE.PointsMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'PointsMaterial';
	
		this.color = new THREE.Color( 0xffffff );
	
		this.map = null;
	
		this.size = 1;
		this.sizeAttenuation = true;
	
		this.vertexColors = THREE.NoColors;
	
		this.fog = true;
	
		this.setValues( parameters );
	
	};
	
	THREE.PointsMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.PointsMaterial.prototype.constructor = THREE.PointsMaterial;
	
	THREE.PointsMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
	
		this.map = source.map;
	
		this.size = source.size;
		this.sizeAttenuation = source.sizeAttenuation;
	
		this.vertexColors = source.vertexColors;
	
		this.fog = source.fog;
	
		return this;
	
	};
	
	// backwards compatibility
	
	THREE.PointCloudMaterial = function ( parameters ) {
	
		console.warn( 'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.' );
		return new THREE.PointsMaterial( parameters );
	
	};
	
	THREE.ParticleBasicMaterial = function ( parameters ) {
	
		console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.' );
		return new THREE.PointsMaterial( parameters );
	
	};
	
	THREE.ParticleSystemMaterial = function ( parameters ) {
	
		console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.' );
		return new THREE.PointsMaterial( parameters );
	
	};
	
	// File:src/materials/ShaderMaterial.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  defines: { "label" : "value" },
	 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
	 *
	 *  fragmentShader: <string>,
	 *  vertexShader: <string>,
	 *
	 *  shading: THREE.SmoothShading,
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *  wireframe: <boolean>,
	 *  wireframeLinewidth: <float>,
	 *
	 *  lights: <bool>,
	 *
	 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
	 *
	 *  skinning: <bool>,
	 *  morphTargets: <bool>,
	 *  morphNormals: <bool>,
	 *
	 *	fog: <bool>
	 * }
	 */
	
	THREE.ShaderMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'ShaderMaterial';
	
		this.defines = {};
		this.uniforms = {};
	
		this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
		this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';
	
		this.shading = THREE.SmoothShading;
	
		this.linewidth = 1;
	
		this.wireframe = false;
		this.wireframeLinewidth = 1;
	
		this.fog = false; // set to use scene fog
	
		this.lights = false; // set to use scene lights
	
		this.vertexColors = THREE.NoColors; // set to use "color" attribute stream
	
		this.skinning = false; // set to use skinning attribute streams
	
		this.morphTargets = false; // set to use morph targets
		this.morphNormals = false; // set to use morph normals
	
		this.derivatives = false; // set to use derivatives
	
		// When rendered geometry doesn't include these attributes but the material does,
		// use these default values in WebGL. This avoids errors when buffer data is missing.
		this.defaultAttributeValues = {
			'color': [ 1, 1, 1 ],
			'uv': [ 0, 0 ],
			'uv2': [ 0, 0 ]
		};
	
		this.index0AttributeName = undefined;
	
		if ( parameters !== undefined ) {
	
			if ( parameters.attributes !== undefined ) {
	
				console.error( 'THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.' );
	
			}
	
			this.setValues( parameters );
	
		}
	
	};
	
	THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.ShaderMaterial.prototype.constructor = THREE.ShaderMaterial;
	
	THREE.ShaderMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.fragmentShader = source.fragmentShader;
		this.vertexShader = source.vertexShader;
	
		this.uniforms = THREE.UniformsUtils.clone( source.uniforms );
	
		this.attributes = source.attributes;
		this.defines = source.defines;
	
		this.shading = source.shading;
	
		this.wireframe = source.wireframe;
		this.wireframeLinewidth = source.wireframeLinewidth;
	
		this.fog = source.fog;
	
		this.lights = source.lights;
	
		this.vertexColors = source.vertexColors;
	
		this.skinning = source.skinning;
	
		this.morphTargets = source.morphTargets;
		this.morphNormals = source.morphNormals;
	
		this.derivatives = source.derivatives;
	
		return this;
	
	};
	
	THREE.ShaderMaterial.prototype.toJSON = function ( meta ) {
	
		var data = THREE.Material.prototype.toJSON.call( this, meta );
	
		data.uniforms = this.uniforms;
		data.attributes = this.attributes;
		data.vertexShader = this.vertexShader;
		data.fragmentShader = this.fragmentShader;
	
		return data;
	
	};
	
	// File:src/materials/RawShaderMaterial.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.RawShaderMaterial = function ( parameters ) {
	
		THREE.ShaderMaterial.call( this, parameters );
	
		this.type = 'RawShaderMaterial';
	
	};
	
	THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );
	THREE.RawShaderMaterial.prototype.constructor = THREE.RawShaderMaterial;
	// File:src/materials/SpriteMaterial.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 * parameters = {
	 *  color: <hex>,
	 *  opacity: <float>,
	 *  map: new THREE.Texture( <Image> ),
	 *
	 *  blending: THREE.NormalBlending,
	 *  depthTest: <bool>,
	 *  depthWrite: <bool>,
	 *
	 *	uvOffset: new THREE.Vector2(),
	 *	uvScale: new THREE.Vector2(),
	 *
	 *  fog: <bool>
	 * }
	 */
	
	THREE.SpriteMaterial = function ( parameters ) {
	
		THREE.Material.call( this );
	
		this.type = 'SpriteMaterial';
	
		this.color = new THREE.Color( 0xffffff );
		this.map = null;
	
		this.rotation = 0;
	
		this.fog = false;
	
		// set parameters
	
		this.setValues( parameters );
	
	};
	
	THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );
	THREE.SpriteMaterial.prototype.constructor = THREE.SpriteMaterial;
	
	THREE.SpriteMaterial.prototype.copy = function ( source ) {
	
		THREE.Material.prototype.copy.call( this, source );
	
		this.color.copy( source.color );
		this.map = source.map;
	
		this.rotation = source.rotation;
	
		this.fog = source.fog;
	
		return this;
	
	};
	
	// File:src/textures/Texture.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */
	
	THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
		Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );
	
		this.uuid = THREE.Math.generateUUID();
	
		this.name = '';
		this.sourceFile = '';
	
		this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
		this.mipmaps = [];
	
		this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;
	
		this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
		this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;
	
		this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;
	
		this.anisotropy = anisotropy !== undefined ? anisotropy : 1;
	
		this.format = format !== undefined ? format : THREE.RGBAFormat;
		this.type = type !== undefined ? type : THREE.UnsignedByteType;
	
		this.offset = new THREE.Vector2( 0, 0 );
		this.repeat = new THREE.Vector2( 1, 1 );
	
		this.generateMipmaps = true;
		this.premultiplyAlpha = false;
		this.flipY = true;
		this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)
	
		this.version = 0;
		this.onUpdate = null;
	
	};
	
	THREE.Texture.DEFAULT_IMAGE = undefined;
	THREE.Texture.DEFAULT_MAPPING = THREE.UVMapping;
	
	THREE.Texture.prototype = {
	
		constructor: THREE.Texture,
	
		set needsUpdate ( value ) {
	
			if ( value === true ) this.version ++;
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			this.image = source.image;
			this.mipmaps = source.mipmaps.slice( 0 );
	
			this.mapping = source.mapping;
	
			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;
	
			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;
	
			this.anisotropy = source.anisotropy;
	
			this.format = source.format;
			this.type = source.type;
	
			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
	
			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
	
			return this;
	
		},
	
		toJSON: function ( meta ) {
	
			if ( meta.textures[ this.uuid ] !== undefined ) {
	
				return meta.textures[ this.uuid ];
	
			}
	
			function getDataURL( image ) {
	
				var canvas;
	
				if ( image.toDataURL !== undefined ) {
	
					canvas = image;
	
				} else {
	
					canvas = document.createElement( 'canvas' );
					canvas.width = image.width;
					canvas.height = image.height;
	
					canvas.getContext( '2d' ).drawImage( image, 0, 0, image.width, image.height );
	
				}
	
				if ( canvas.width > 2048 || canvas.height > 2048 ) {
	
					return canvas.toDataURL( 'image/jpeg', 0.6 );
	
				} else {
	
					return canvas.toDataURL( 'image/png' );
	
				}
	
			}
	
			var output = {
				metadata: {
					version: 4.4,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},
	
				uuid: this.uuid,
				name: this.name,
	
				mapping: this.mapping,
	
				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				wrap: [ this.wrapS, this.wrapT ],
	
				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy
			};
	
			if ( this.image !== undefined ) {
	
				// TODO: Move to THREE.Image
	
				var image = this.image;
	
				if ( image.uuid === undefined ) {
	
					image.uuid = THREE.Math.generateUUID(); // UGH
	
				}
	
				if ( meta.images[ image.uuid ] === undefined ) {
	
					meta.images[ image.uuid ] = {
						uuid: image.uuid,
						url: getDataURL( image )
					};
	
				}
	
				output.image = image.uuid;
	
			}
	
			meta.textures[ this.uuid ] = output;
	
			return output;
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		},
	
		transformUv: function ( uv ) {
	
			if ( this.mapping !== THREE.UVMapping )  return;
	
			uv.multiply( this.repeat );
			uv.add( this.offset );
	
			if ( uv.x < 0 || uv.x > 1 ) {
	
				switch ( this.wrapS ) {
	
					case THREE.RepeatWrapping:
	
						uv.x = uv.x - Math.floor( uv.x );
						break;
	
					case THREE.ClampToEdgeWrapping:
	
						uv.x = uv.x < 0 ? 0 : 1;
						break;
	
					case THREE.MirroredRepeatWrapping:
	
						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {
	
							uv.x = Math.ceil( uv.x ) - uv.x;
	
						} else {
	
							uv.x = uv.x - Math.floor( uv.x );
	
						}
						break;
	
				}
	
			}
	
			if ( uv.y < 0 || uv.y > 1 ) {
	
				switch ( this.wrapT ) {
	
					case THREE.RepeatWrapping:
	
						uv.y = uv.y - Math.floor( uv.y );
						break;
	
					case THREE.ClampToEdgeWrapping:
	
						uv.y = uv.y < 0 ? 0 : 1;
						break;
	
					case THREE.MirroredRepeatWrapping:
	
						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {
	
							uv.y = Math.ceil( uv.y ) - uv.y;
	
						} else {
	
							uv.y = uv.y - Math.floor( uv.y );
	
						}
						break;
	
				}
	
			}
	
			if ( this.flipY ) {
	
				uv.y = 1 - uv.y;
	
			}
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );
	
	THREE.TextureIdCount = 0;
	
	// File:src/textures/CanvasTexture.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.CanvasTexture = function ( canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
		THREE.Texture.call( this, canvas, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
		this.needsUpdate = true;
	
	};
	
	THREE.CanvasTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CanvasTexture.prototype.constructor = THREE.CanvasTexture;
	
	// File:src/textures/CubeTexture.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
		mapping = mapping !== undefined ? mapping : THREE.CubeReflectionMapping;
	
		THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
		this.images = images;
		this.flipY = false;
	
	};
	
	THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CubeTexture.prototype.constructor = THREE.CubeTexture;
	
	THREE.CubeTexture.prototype.copy = function ( source ) {
	
		THREE.Texture.prototype.copy.call( this, source );
		
		this.images = source.images;
		
		return this;
	
	};
	// File:src/textures/CompressedTexture.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {
	
		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
		this.image = { width: width, height: height };
		this.mipmaps = mipmaps;
	
		// no flipping for cube textures
		// (also flipping doesn't work for compressed textures )
	
		this.flipY = false;
	
		// can't generate mipmaps for compressed textures
		// mips must be embedded in DDS files
	
		this.generateMipmaps = false;
	
	};
	
	THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.CompressedTexture.prototype.constructor = THREE.CompressedTexture;
	
	// File:src/textures/DataTexture.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {
	
		THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
		this.image = { data: data, width: width, height: height };
	
		this.magFilter = magFilter !== undefined ? magFilter : THREE.NearestFilter;
		this.minFilter = minFilter !== undefined ? minFilter : THREE.NearestFilter;
		
		this.flipY = false;
		this.generateMipmaps  = false;
	
	};
	
	THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.DataTexture.prototype.constructor = THREE.DataTexture;
	
	// File:src/textures/VideoTexture.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {
	
		THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
	
		this.generateMipmaps = false;
	
		var scope = this;
	
		function update() {
	
			requestAnimationFrame( update );
	
			if ( video.readyState === video.HAVE_ENOUGH_DATA ) {
	
				scope.needsUpdate = true;
	
			}
	
		}
	
		update();
	
	};
	
	THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );
	THREE.VideoTexture.prototype.constructor = THREE.VideoTexture;
	
	// File:src/objects/Group.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Group = function () {
	
		THREE.Object3D.call( this );
	
		this.type = 'Group';
	
	};
	
	THREE.Group.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Group.prototype.constructor = THREE.Group;
	// File:src/objects/Points.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Points = function ( geometry, material ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'Points';
	
		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.PointsMaterial( { color: Math.random() * 0xffffff } );
	
	};
	
	THREE.Points.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Points.prototype.constructor = THREE.Points;
	
	THREE.Points.prototype.raycast = ( function () {
	
		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
	
		return function raycast( raycaster, intersects ) {
	
			var object = this;
			var geometry = object.geometry;
			var threshold = raycaster.params.Points.threshold;
	
			inverseMatrix.getInverse( this.matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
			if ( geometry.boundingBox !== null ) {
	
				if ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {
	
					return;
	
				}
	
			}
	
			var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			var localThresholdSq = localThreshold * localThreshold;
			var position = new THREE.Vector3();
	
			function testPoint( point, index ) {
	
				var rayPointDistanceSq = ray.distanceSqToPoint( point );
	
				if ( rayPointDistanceSq < localThresholdSq ) {
	
					var intersectPoint = ray.closestPointToPoint( point );
					intersectPoint.applyMatrix4( object.matrixWorld );
	
					var distance = raycaster.ray.origin.distanceTo( intersectPoint );
	
					if ( distance < raycaster.near || distance > raycaster.far ) return;
	
					intersects.push( {
	
						distance: distance,
						distanceToRay: Math.sqrt( rayPointDistanceSq ),
						point: intersectPoint.clone(),
						index: index,
						face: null,
						object: object
	
					} );
	
				}
	
			}
	
			if ( geometry instanceof THREE.BufferGeometry ) {
	
				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;
	
				if ( index !== null ) {
	
					var indices = index.array;
	
					for ( var i = 0, il = indices.length; i < il; i ++ ) {
	
						var a = indices[ i ];
	
						position.fromArray( positions, a * 3 );
	
						testPoint( position, a );
	
					}
	
				} else {
	
					for ( var i = 0, l = positions.length / 3; i < l; i ++ ) {
	
						position.fromArray( positions, i * 3 );
	
						testPoint( position, i );
	
					}
	
				}
	
			} else {
	
				var vertices = geometry.vertices;
	
				for ( var i = 0, l = vertices.length; i < l; i ++ ) {
	
					testPoint( vertices[ i ], i );
	
				}
	
			}
	
		};
	
	}() );
	
	THREE.Points.prototype.clone = function () {
	
		return new this.constructor( this.geometry, this.material ).copy( this );
	
	};
	
	// Backwards compatibility
	
	THREE.PointCloud = function ( geometry, material ) {
	
		console.warn( 'THREE.PointCloud has been renamed to THREE.Points.' );
		return new THREE.Points( geometry, material );
	
	};
	
	THREE.ParticleSystem = function ( geometry, material ) {
	
		console.warn( 'THREE.ParticleSystem has been renamed to THREE.Points.' );
		return new THREE.Points( geometry, material );
	
	};
	
	// File:src/objects/Line.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Line = function ( geometry, material, mode ) {
	
		if ( mode === 1 ) {
	
			console.warn( 'THREE.Line: parameter THREE.LinePieces no longer supported. Created THREE.LineSegments instead.' );
			return new THREE.LineSegments( geometry, material );
	
		}
	
		THREE.Object3D.call( this );
	
		this.type = 'Line';
	
		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );
	
	};
	
	THREE.Line.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Line.prototype.constructor = THREE.Line;
	
	THREE.Line.prototype.raycast = ( function () {
	
		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();
	
		return function raycast( raycaster, intersects ) {
	
			var precision = raycaster.linePrecision;
			var precisionSq = precision * precision;
	
			var geometry = this.geometry;
	
			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
			// Checking boundingSphere distance to ray
	
			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( this.matrixWorld );
	
			if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {
	
				return;
	
			}
	
			inverseMatrix.getInverse( this.matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
			var vStart = new THREE.Vector3();
			var vEnd = new THREE.Vector3();
			var interSegment = new THREE.Vector3();
			var interRay = new THREE.Vector3();
			var step = this instanceof THREE.LineSegments ? 2 : 1;
	
			if ( geometry instanceof THREE.BufferGeometry ) {
	
				var index = geometry.index;
				var attributes = geometry.attributes;
	
				if ( index !== null ) {
	
					var indices = index.array;
					var positions = attributes.position.array;
	
					for ( var i = 0, l = indices.length - 1; i < l; i += step ) {
	
						var a = indices[ i ];
						var b = indices[ i + 1 ];
	
						vStart.fromArray( positions, a * 3 );
						vEnd.fromArray( positions, b * 3 );
	
						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
						if ( distSq > precisionSq ) continue;
	
						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
						var distance = raycaster.ray.origin.distanceTo( interRay );
	
						if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
						intersects.push( {
	
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this
	
						} );
	
					}
	
				} else {
	
					var positions = attributes.position.array;
	
					for ( var i = 0, l = positions.length / 3 - 1; i < l; i += step ) {
	
						vStart.fromArray( positions, 3 * i );
						vEnd.fromArray( positions, 3 * i + 3 );
	
						var distSq = ray.distanceSqToSegment( vStart, vEnd, interRay, interSegment );
	
						if ( distSq > precisionSq ) continue;
	
						interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
						var distance = raycaster.ray.origin.distanceTo( interRay );
	
						if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
						intersects.push( {
	
							distance: distance,
							// What do we want? intersection point on the ray or on the segment??
							// point: raycaster.ray.at( distance ),
							point: interSegment.clone().applyMatrix4( this.matrixWorld ),
							index: i,
							face: null,
							faceIndex: null,
							object: this
	
						} );
	
					}
	
				}
	
			} else if ( geometry instanceof THREE.Geometry ) {
	
				var vertices = geometry.vertices;
				var nbVertices = vertices.length;
	
				for ( var i = 0; i < nbVertices - 1; i += step ) {
	
					var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );
	
					if ( distSq > precisionSq ) continue;
	
					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation
	
					var distance = raycaster.ray.origin.distanceTo( interRay );
	
					if ( distance < raycaster.near || distance > raycaster.far ) continue;
	
					intersects.push( {
	
						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this
	
					} );
	
				}
	
			}
	
		};
	
	}() );
	
	THREE.Line.prototype.clone = function () {
	
		return new this.constructor( this.geometry, this.material ).copy( this );
	
	};
	
	// DEPRECATED
	
	THREE.LineStrip = 0;
	THREE.LinePieces = 1;
	
	// File:src/objects/LineSegments.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.LineSegments = function ( geometry, material ) {
	
		THREE.Line.call( this, geometry, material );
	
		this.type = 'LineSegments';
	
	};
	
	THREE.LineSegments.prototype = Object.create( THREE.Line.prototype );
	THREE.LineSegments.prototype.constructor = THREE.LineSegments;
	
	// File:src/objects/Mesh.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mikael emtinger / http://gomo.se/
	 * @author jonobr1 / http://jonobr1.com/
	 */
	
	THREE.Mesh = function ( geometry, material ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'Mesh';
	
		this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
		this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );
	
		this.updateMorphTargets();
	
	};
	
	THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Mesh.prototype.constructor = THREE.Mesh;
	
	THREE.Mesh.prototype.updateMorphTargets = function () {
	
		if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {
	
			this.morphTargetBase = - 1;
			this.morphTargetInfluences = [];
			this.morphTargetDictionary = {};
	
			for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {
	
				this.morphTargetInfluences.push( 0 );
				this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;
	
			}
	
		}
	
	};
	
	THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {
	
		if ( this.morphTargetDictionary[ name ] !== undefined ) {
	
			return this.morphTargetDictionary[ name ];
	
		}
	
		console.warn( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );
	
		return 0;
	
	};
	
	
	THREE.Mesh.prototype.raycast = ( function () {
	
		var inverseMatrix = new THREE.Matrix4();
		var ray = new THREE.Ray();
		var sphere = new THREE.Sphere();
	
		var vA = new THREE.Vector3();
		var vB = new THREE.Vector3();
		var vC = new THREE.Vector3();
	
		var tempA = new THREE.Vector3();
		var tempB = new THREE.Vector3();
		var tempC = new THREE.Vector3();
	
		var uvA = new THREE.Vector2();
		var uvB = new THREE.Vector2();
		var uvC = new THREE.Vector2();
	
		var barycoord = new THREE.Vector3();
	
		var intersectionPoint = new THREE.Vector3();
		var intersectionPointWorld = new THREE.Vector3();
	
		function uvIntersection( point, p1, p2, p3, uv1, uv2, uv3 ) {
	
			THREE.Triangle.barycoordFromPoint( point, p1, p2, p3, barycoord );
	
			uv1.multiplyScalar( barycoord.x );
			uv2.multiplyScalar( barycoord.y );
			uv3.multiplyScalar( barycoord.z );
	
			uv1.add( uv2 ).add( uv3 );
	
			return uv1.clone();
	
		}
	
		function checkIntersection( object, raycaster, ray, pA, pB, pC, point ){
	
			var intersect;
			var material = object.material;
	
			if ( material.side === THREE.BackSide ) {
	
				intersect = ray.intersectTriangle( pC, pB, pA, true, point );
	
			} else {
	
				intersect = ray.intersectTriangle( pA, pB, pC, material.side !== THREE.DoubleSide, point );
	
			}
	
			if ( intersect === null ) return null;
	
			intersectionPointWorld.copy( point );
			intersectionPointWorld.applyMatrix4( object.matrixWorld );
	
			var distance = raycaster.ray.origin.distanceTo( intersectionPointWorld );
	
			if ( distance < raycaster.near || distance > raycaster.far ) return null;
	
			return {
				distance: distance,
				point: intersectionPointWorld.clone(),
				object: object
			};
	
		}
	
		function checkBufferGeometryIntersection( object, raycaster, ray, positions, uvs, a, b, c ) {
	
			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );
	
			var intersection = checkIntersection( object, raycaster, ray, vA, vB, vC, intersectionPoint );
	
			if ( intersection ) {
	
				if ( uvs ) {
	
					uvA.fromArray( uvs, a * 2 );
					uvB.fromArray( uvs, b * 2 );
					uvC.fromArray( uvs, c * 2 );
	
					intersection.uv = uvIntersection( intersectionPoint,  vA, vB, vC,  uvA, uvB, uvC );
	
				}
	
				intersection.face = new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) );
				intersection.faceIndex = a;
	
			}
	
			return intersection;
	
		}
	
		return function raycast( raycaster, intersects ) {
	
			var geometry = this.geometry;
			var material = this.material;
	
			if ( material === undefined ) return;
	
			// Checking boundingSphere distance to ray
	
			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
	
			var matrixWorld = this.matrixWorld;
	
			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( matrixWorld );
	
			if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) return;
	
			// Check boundingBox before continuing
	
			inverseMatrix.getInverse( matrixWorld );
			ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );
	
			if ( geometry.boundingBox !== null ) {
	
				if ( ray.isIntersectionBox( geometry.boundingBox ) === false ) return;
	
			}
	
			var uvs, intersection;
	
			if ( geometry instanceof THREE.BufferGeometry ) {
	
				var a, b, c;
				var index = geometry.index;
				var attributes = geometry.attributes;
				var positions = attributes.position.array;
	
				if ( attributes.uv !== undefined ){
	
					uvs = attributes.uv.array;
	
				}
	
				if ( index !== null ) {
	
					var indices = index.array;
	
					for ( var i = 0, l = indices.length; i < l; i += 3 ) {
	
						a = indices[ i ];
						b = indices[ i + 1 ];
						c = indices[ i + 2 ];
	
						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );
	
						if ( intersection ) {
	
							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indices buffer semantics
							intersects.push( intersection );
	
						}
	
					}
	
				} else {
	
	
					for ( var i = 0, l = positions.length; i < l; i += 9 ) {
	
						a = i / 3;
						b = a + 1;
						c = a + 2;
	
						intersection = checkBufferGeometryIntersection( this, raycaster, ray, positions, uvs, a, b, c );
	
						if ( intersection ) {
	
							intersection.index = a; // triangle number in positions buffer semantics
							intersects.push( intersection );
	
						}
	
					}
	
				}
	
			} else if ( geometry instanceof THREE.Geometry ) {
	
				var fvA, fvB, fvC;
				var isFaceMaterial = material instanceof THREE.MeshFaceMaterial;
				var materials = isFaceMaterial === true ? material.materials : null;
	
				var vertices = geometry.vertices;
				var faces = geometry.faces;
				var faceVertexUvs = geometry.faceVertexUvs[ 0 ];
				if ( faceVertexUvs.length > 0 ) uvs = faceVertexUvs;
	
				for ( var f = 0, fl = faces.length; f < fl; f ++ ) {
	
					var face = faces[ f ];
					var faceMaterial = isFaceMaterial === true ? materials[ face.materialIndex ] : material;
	
					if ( faceMaterial === undefined ) continue;
	
					fvA = vertices[ face.a ];
					fvB = vertices[ face.b ];
					fvC = vertices[ face.c ];
	
					if ( faceMaterial.morphTargets === true ) {
	
						var morphTargets = geometry.morphTargets;
						var morphInfluences = this.morphTargetInfluences;
	
						vA.set( 0, 0, 0 );
						vB.set( 0, 0, 0 );
						vC.set( 0, 0, 0 );
	
						for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {
	
							var influence = morphInfluences[ t ];
	
							if ( influence === 0 ) continue;
	
							var targets = morphTargets[ t ].vertices;
	
							vA.addScaledVector( tempA.subVectors( targets[ face.a ], fvA ), influence );
							vB.addScaledVector( tempB.subVectors( targets[ face.b ], fvB ), influence );
							vC.addScaledVector( tempC.subVectors( targets[ face.c ], fvC ), influence );
	
						}
	
						vA.add( fvA );
						vB.add( fvB );
						vC.add( fvC );
	
						fvA = vA;
						fvB = vB;
						fvC = vC;
	
					}
	
					intersection = checkIntersection( this, raycaster, ray, fvA, fvB, fvC, intersectionPoint );
	
					if ( intersection ) {
	
						if ( uvs ) {
	
							var uvs_f = uvs[ f ];
							uvA.copy( uvs_f[ 0 ] );
							uvB.copy( uvs_f[ 1 ] );
							uvC.copy( uvs_f[ 2 ] );
	
							intersection.uv = uvIntersection( intersectionPoint, fvA, fvB, fvC, uvA, uvB, uvC );
	
						}
	
						intersection.face = face;
						intersection.faceIndex = f;
						intersects.push( intersection );
	
					}
	
				}
	
			}
	
		};
	
	}() );
	
	THREE.Mesh.prototype.clone = function () {
	
		return new this.constructor( this.geometry, this.material ).copy( this );
	
	};
	
	// File:src/objects/Bone.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */
	
	THREE.Bone = function ( skin ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'Bone';
	
		this.skin = skin;
	
	};
	
	THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Bone.prototype.constructor = THREE.Bone;
	
	THREE.Bone.prototype.copy = function ( source ) {
		
		THREE.Object3D.prototype.copy.call( this, source );
		
		this.skin = source.skin;
		
		return this;
	
	};
	
	// File:src/objects/Skeleton.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author michael guerrero / http://realitymeltdown.com
	 * @author ikerr / http://verold.com
	 */
	
	THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {
	
		this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;
	
		this.identityMatrix = new THREE.Matrix4();
	
		// copy the bone array
	
		bones = bones || [];
	
		this.bones = bones.slice( 0 );
	
		// create a bone texture or an array of floats
	
		if ( this.useVertexTexture ) {
	
			// layout (1 matrix = 4 pixels)
			//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
			//  with  8x8  pixel texture max   16 bones * 4 pixels =  (8 * 8)
			//       16x16 pixel texture max   64 bones * 4 pixels = (16 * 16)
			//       32x32 pixel texture max  256 bones * 4 pixels = (32 * 32)
			//       64x64 pixel texture max 1024 bones * 4 pixels = (64 * 64)
	
			
			var size = Math.sqrt( this.bones.length * 4 ); // 4 pixels needed for 1 matrix
			size = THREE.Math.nextPowerOfTwo( Math.ceil( size ) );
			size = Math.max( size, 4 );
	
			this.boneTextureWidth = size;
			this.boneTextureHeight = size;
	
			this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
			this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
	
		} else {
	
			this.boneMatrices = new Float32Array( 16 * this.bones.length );
	
		}
	
		// use the supplied bone inverses or calculate the inverses
	
		if ( boneInverses === undefined ) {
	
			this.calculateInverses();
	
		} else {
	
			if ( this.bones.length === boneInverses.length ) {
	
				this.boneInverses = boneInverses.slice( 0 );
	
			} else {
	
				console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );
	
				this.boneInverses = [];
	
				for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
					this.boneInverses.push( new THREE.Matrix4() );
	
				}
	
			}
	
		}
	
	};
	
	THREE.Skeleton.prototype.calculateInverses = function () {
	
		this.boneInverses = [];
	
		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
			var inverse = new THREE.Matrix4();
	
			if ( this.bones[ b ] ) {
	
				inverse.getInverse( this.bones[ b ].matrixWorld );
	
			}
	
			this.boneInverses.push( inverse );
	
		}
	
	};
	
	THREE.Skeleton.prototype.pose = function () {
	
		var bone;
	
		// recover the bind-time world matrices
	
		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
			bone = this.bones[ b ];
	
			if ( bone ) {
	
				bone.matrixWorld.getInverse( this.boneInverses[ b ] );
	
			}
	
		}
	
		// compute the local matrices, positions, rotations and scales
	
		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
			bone = this.bones[ b ];
	
			if ( bone ) {
	
				if ( bone.parent ) {
	
					bone.matrix.getInverse( bone.parent.matrixWorld );
					bone.matrix.multiply( bone.matrixWorld );
	
				} else {
	
					bone.matrix.copy( bone.matrixWorld );
	
				}
	
				bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );
	
			}
	
		}
	
	};
	
	THREE.Skeleton.prototype.update = ( function () {
	
		var offsetMatrix = new THREE.Matrix4();
	
		return function update() {
	
			// flatten bone matrices to array
	
			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {
	
				// compute the offset between the current and the original transform
	
				var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;
	
				offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
				offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );
	
			}
	
			if ( this.useVertexTexture ) {
	
				this.boneTexture.needsUpdate = true;
	
			}
	
		};
	
	} )();
	
	THREE.Skeleton.prototype.clone = function () {
	
		return new THREE.Skeleton( this.bones, this.boneInverses, this.useVertexTexture );
	
	};
	
	// File:src/objects/SkinnedMesh.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author ikerr / http://verold.com
	 */
	
	THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {
	
		THREE.Mesh.call( this, geometry, material );
	
		this.type = 'SkinnedMesh';
	
		this.bindMode = "attached";
		this.bindMatrix = new THREE.Matrix4();
		this.bindMatrixInverse = new THREE.Matrix4();
	
		// init bones
	
		// TODO: remove bone creation as there is no reason (other than
		// convenience) for THREE.SkinnedMesh to do this.
	
		var bones = [];
	
		if ( this.geometry && this.geometry.bones !== undefined ) {
	
			var bone, gbone;
	
			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {
	
				gbone = this.geometry.bones[ b ];
	
				bone = new THREE.Bone( this );
				bones.push( bone );
	
				bone.name = gbone.name;
				bone.position.fromArray( gbone.pos );
				bone.quaternion.fromArray( gbone.rotq );
				if ( gbone.scl !== undefined ) bone.scale.fromArray( gbone.scl );
	
			}
	
			for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++ b ) {
	
				gbone = this.geometry.bones[ b ];
	
				if ( gbone.parent !== - 1 && gbone.parent !== null) {
	
					bones[ gbone.parent ].add( bones[ b ] );
	
				} else {
	
					this.add( bones[ b ] );
	
				}
	
			}
	
		}
	
		this.normalizeSkinWeights();
	
		this.updateMatrixWorld( true );
		this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ), this.matrixWorld );
	
	};
	
	
	THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.SkinnedMesh.prototype.constructor = THREE.SkinnedMesh;
	
	THREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {
	
		this.skeleton = skeleton;
	
		if ( bindMatrix === undefined ) {
	
			this.updateMatrixWorld( true );
			
			this.skeleton.calculateInverses();
	
			bindMatrix = this.matrixWorld;
	
		}
	
		this.bindMatrix.copy( bindMatrix );
		this.bindMatrixInverse.getInverse( bindMatrix );
	
	};
	
	THREE.SkinnedMesh.prototype.pose = function () {
	
		this.skeleton.pose();
	
	};
	
	THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {
	
		if ( this.geometry instanceof THREE.Geometry ) {
	
			for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {
	
				var sw = this.geometry.skinWeights[ i ];
	
				var scale = 1.0 / sw.lengthManhattan();
	
				if ( scale !== Infinity ) {
	
					sw.multiplyScalar( scale );
	
				} else {
	
					sw.set( 1 ); // this will be normalized by the shader anyway
	
				}
	
			}
	
		} else {
	
			// skinning weights assumed to be normalized for THREE.BufferGeometry
	
		}
	
	};
	
	THREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {
	
		THREE.Mesh.prototype.updateMatrixWorld.call( this, true );
	
		if ( this.bindMode === "attached" ) {
	
			this.bindMatrixInverse.getInverse( this.matrixWorld );
	
		} else if ( this.bindMode === "detached" ) {
	
			this.bindMatrixInverse.getInverse( this.bindMatrix );
	
		} else {
	
			console.warn( 'THREE.SkinnedMesh unrecognized bindMode: ' + this.bindMode );
	
		}
	
	};
	
	THREE.SkinnedMesh.prototype.clone = function() {
	
		return new this.constructor( this.geometry, this.material, this.useVertexTexture ).copy( this );
	
	};
	
	// File:src/objects/LOD.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.LOD = function () {
	
		THREE.Object3D.call( this );
	
		this.type = 'LOD';
	
		Object.defineProperties( this, {
			levels: {
				enumerable: true,
				value: []
			},
			objects: {
				get: function () {
	
					console.warn( 'THREE.LOD: .objects has been renamed to .levels.' );
					return this.levels;
	
				}
			}
		} );
	
	};
	
	
	THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LOD.prototype.constructor = THREE.LOD;
	
	THREE.LOD.prototype.addLevel = function ( object, distance ) {
	
		if ( distance === undefined ) distance = 0;
	
		distance = Math.abs( distance );
	
		var levels = this.levels;
	
		for ( var l = 0; l < levels.length; l ++ ) {
	
			if ( distance < levels[ l ].distance ) {
	
				break;
	
			}
	
		}
	
		levels.splice( l, 0, { distance: distance, object: object } );
	
		this.add( object );
	
	};
	
	THREE.LOD.prototype.getObjectForDistance = function ( distance ) {
	
		var levels = this.levels;
	
		for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
			if ( distance < levels[ i ].distance ) {
	
				break;
	
			}
	
		}
	
		return levels[ i - 1 ].object;
	
	};
	
	THREE.LOD.prototype.raycast = ( function () {
	
		var matrixPosition = new THREE.Vector3();
	
		return function raycast( raycaster, intersects ) {
	
			matrixPosition.setFromMatrixPosition( this.matrixWorld );
	
			var distance = raycaster.ray.origin.distanceTo( matrixPosition );
	
			this.getObjectForDistance( distance ).raycast( raycaster, intersects );
	
		};
	
	}() );
	
	THREE.LOD.prototype.update = function () {
	
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
	
		return function update( camera ) {
	
			var levels = this.levels;
	
			if ( levels.length > 1 ) {
	
				v1.setFromMatrixPosition( camera.matrixWorld );
				v2.setFromMatrixPosition( this.matrixWorld );
	
				var distance = v1.distanceTo( v2 );
	
				levels[ 0 ].object.visible = true;
	
				for ( var i = 1, l = levels.length; i < l; i ++ ) {
	
					if ( distance >= levels[ i ].distance ) {
	
						levels[ i - 1 ].object.visible = false;
						levels[ i ].object.visible = true;
	
					} else {
	
						break;
	
					}
	
				}
	
				for ( ; i < l; i ++ ) {
	
					levels[ i ].object.visible = false;
	
				}
	
			}
	
		};
	
	}();
	
	THREE.LOD.prototype.copy = function ( source ) {
	
		THREE.Object3D.prototype.copy.call( this, source, false );
	
		var levels = source.levels;
	
		for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
			var level = levels[ i ];
	
			this.addLevel( level.object.clone(), level.distance );
	
		}
	
		return this;
	
	};
	
	THREE.LOD.prototype.toJSON = function ( meta ) {
	
		var data = THREE.Object3D.prototype.toJSON.call( this, meta );
	
		data.object.levels = [];
	
		var levels = this.levels;
	
		for ( var i = 0, l = levels.length; i < l; i ++ ) {
	
			var level = levels[ i ];
	
			data.object.levels.push( {
				object: level.object.uuid,
				distance: level.distance
			} );
	
		}
	
		return data;
	
	};
	
	// File:src/objects/Sprite.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Sprite = ( function () {
	
		var indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );
		var vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );
		var uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );
	
		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
	
		return function Sprite( material ) {
	
			THREE.Object3D.call( this );
	
			this.type = 'Sprite';
	
			this.geometry = geometry;
			this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();
	
		};
	
	} )();
	
	THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Sprite.prototype.constructor = THREE.Sprite;
	
	THREE.Sprite.prototype.raycast = ( function () {
	
		var matrixPosition = new THREE.Vector3();
	
		return function raycast( raycaster, intersects ) {
	
			matrixPosition.setFromMatrixPosition( this.matrixWorld );
	
			var distanceSq = raycaster.ray.distanceSqToPoint( matrixPosition );
			var guessSizeSq = this.scale.x * this.scale.y;
	
			if ( distanceSq > guessSizeSq ) {
	
				return;
	
			}
	
			intersects.push( {
	
				distance: Math.sqrt( distanceSq ),
				point: this.position,
				face: null,
				object: this
	
			} );
	
		};
	
	}() );
	
	THREE.Sprite.prototype.clone = function () {
	
		return new this.constructor( this.material ).copy( this );
	
	};
	
	// Backwards compatibility
	
	THREE.Particle = THREE.Sprite;
	
	// File:src/objects/LensFlare.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.LensFlare = function ( texture, size, distance, blending, color ) {
	
		THREE.Object3D.call( this );
	
		this.lensFlares = [];
	
		this.positionScreen = new THREE.Vector3();
		this.customUpdateCallback = undefined;
	
		if ( texture !== undefined ) {
	
			this.add( texture, size, distance, blending, color );
	
		}
	
	};
	
	THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );
	THREE.LensFlare.prototype.constructor = THREE.LensFlare;
	
	
	/*
	 * Add: adds another flare
	 */
	
	THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {
	
		if ( size === undefined ) size = - 1;
		if ( distance === undefined ) distance = 0;
		if ( opacity === undefined ) opacity = 1;
		if ( color === undefined ) color = new THREE.Color( 0xffffff );
		if ( blending === undefined ) blending = THREE.NormalBlending;
	
		distance = Math.min( distance, Math.max( 0, distance ) );
	
		this.lensFlares.push( {
			texture: texture,	// THREE.Texture
			size: size, 		// size in pixels (-1 = use texture.width)
			distance: distance, 	// distance (0-1) from light source (0=at light source)
			x: 0, y: 0, z: 0,	// screen position (-1 => 1) z = 0 is in front z = 1 is back
			scale: 1, 		// scale
			rotation: 0, 		// rotation
			opacity: opacity,	// opacity
			color: color,		// color
			blending: blending	// blending
		} );
	
	};
	
	/*
	 * Update lens flares update positions on all flares based on the screen position
	 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
	 */
	
	THREE.LensFlare.prototype.updateLensFlares = function () {
	
		var f, fl = this.lensFlares.length;
		var flare;
		var vecX = - this.positionScreen.x * 2;
		var vecY = - this.positionScreen.y * 2;
	
		for ( f = 0; f < fl; f ++ ) {
	
			flare = this.lensFlares[ f ];
	
			flare.x = this.positionScreen.x + vecX * flare.distance;
			flare.y = this.positionScreen.y + vecY * flare.distance;
	
			flare.wantedRotation = flare.x * Math.PI * 0.25;
			flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;
	
		}
	
	};
	
	THREE.LensFlare.prototype.copy = function ( source ) {
	
		THREE.Object3D.prototype.copy.call( this, source );
	
		this.positionScreen.copy( source.positionScreen );
		this.customUpdateCallback = source.customUpdateCallback;
	
		for ( var i = 0, l = source.lensFlares.length; i < l; i ++ ) {
	
			this.lensFlares.push( source.lensFlares[ i ] );
	
		}
	
		return this;
	
	};
	
	// File:src/scenes/Scene.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Scene = function () {
	
		THREE.Object3D.call( this );
	
		this.type = 'Scene';
	
		this.fog = null;
		this.overrideMaterial = null;
	
		this.autoUpdate = true; // checked by the renderer
	
	};
	
	THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Scene.prototype.constructor = THREE.Scene;
	
	THREE.Scene.prototype.copy = function ( source ) {
	
		THREE.Object3D.prototype.copy.call( this, source );
	
		if ( source.fog !== null ) this.fog = source.fog.clone();
		if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();
	
		this.autoUpdate = source.autoUpdate;
		this.matrixAutoUpdate = source.matrixAutoUpdate;
	
		return this;
	
	};
	
	// File:src/scenes/Fog.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.Fog = function ( color, near, far ) {
	
		this.name = '';
	
		this.color = new THREE.Color( color );
	
		this.near = ( near !== undefined ) ? near : 1;
		this.far = ( far !== undefined ) ? far : 1000;
	
	};
	
	THREE.Fog.prototype.clone = function () {
	
		return new THREE.Fog( this.color.getHex(), this.near, this.far );
	
	};
	
	// File:src/scenes/FogExp2.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.FogExp2 = function ( color, density ) {
	
		this.name = '';
	
		this.color = new THREE.Color( color );
		this.density = ( density !== undefined ) ? density : 0.00025;
	
	};
	
	THREE.FogExp2.prototype.clone = function () {
	
		return new THREE.FogExp2( this.color.getHex(), this.density );
	
	};
	
	// File:src/renderers/shaders/ShaderChunk.js
	
	THREE.ShaderChunk = {};
	
	// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl
	
	THREE.ShaderChunk[ 'alphamap_fragment'] = "#ifdef USE_ALPHAMAP\n\n	diffuseColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'alphamap_pars_fragment'] = "#ifdef USE_ALPHAMAP\n\n	uniform sampler2D alphaMap;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl
	
	THREE.ShaderChunk[ 'alphatest_fragment'] = "#ifdef ALPHATEST\n\n	if ( diffuseColor.a < ALPHATEST ) discard;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/aomap_fragment.glsl
	
	THREE.ShaderChunk[ 'aomap_fragment'] = "#ifdef USE_AOMAP\n\n	totalAmbientLight *= ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/aomap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'aomap_pars_fragment'] = "#ifdef USE_AOMAP\n\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/begin_vertex.glsl
	
	THREE.ShaderChunk[ 'begin_vertex'] = "\nvec3 transformed = vec3( position );\n";
	
	// File:src/renderers/shaders/ShaderChunk/beginnormal_vertex.glsl
	
	THREE.ShaderChunk[ 'beginnormal_vertex'] = "\nvec3 objectNormal = vec3( normal );\n";
	
	// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'bumpmap_pars_fragment'] = "#ifdef USE_BUMPMAP\n\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n\n\n\n	vec2 dHdxy_fwd() {\n\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n		return vec2( dBx, dBy );\n\n	}\n\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n\n		float fDet = dot( vSigmaX, R1 );\n\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n\n	}\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl
	
	THREE.ShaderChunk[ 'color_fragment'] = "#ifdef USE_COLOR\n\n	diffuseColor.rgb *= vColor;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'color_pars_fragment'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'color_pars_vertex'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl
	
	THREE.ShaderChunk[ 'color_vertex'] = "#ifdef USE_COLOR\n\n	vColor.xyz = color.xyz;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/common.glsl
	
	THREE.ShaderChunk[ 'common'] = "#define PI 3.14159\n#define PI2 6.28318\n#define RECIPROCAL_PI2 0.15915494\n#define LOG2 1.442695\n#define EPSILON 1e-6\n\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#define whiteCompliment(a) ( 1.0 - saturate( a ) )\n\nvec3 transformDirection( in vec3 normal, in mat4 matrix ) {\n\n	return normalize( ( matrix * vec4( normal, 0.0 ) ).xyz );\n\n}\n\nvec3 inverseTransformDirection( in vec3 normal, in mat4 matrix ) {\n\n	return normalize( ( vec4( normal, 0.0 ) * matrix ).xyz );\n\n}\n\nvec3 projectOnPlane(in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n	float distance = dot( planeNormal, point - pointOnPlane );\n\n	return - distance * planeNormal + point;\n\n}\n\nfloat sideOfPlane( in vec3 point, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n	return sign( dot( point - pointOnPlane, planeNormal ) );\n\n}\n\nvec3 linePlaneIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnPlane, in vec3 planeNormal ) {\n\n	return lineDirection * ( dot( planeNormal, pointOnPlane - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n\n}\n\nfloat calcLightAttenuation( float lightDistance, float cutoffDistance, float decayExponent ) {\n\n	if ( decayExponent > 0.0 ) {\n\n	  return pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\n	}\n\n	return 1.0;\n\n}\n\nvec3 F_Schlick( in vec3 specularColor, in float dotLH ) {\n\n\n	float fresnel = exp2( ( -5.55437 * dotLH - 6.98316 ) * dotLH );\n\n	return ( 1.0 - specularColor ) * fresnel + specularColor;\n\n}\n\nfloat G_BlinnPhong_Implicit( /* in float dotNL, in float dotNV */ ) {\n\n\n	return 0.25;\n\n}\n\nfloat D_BlinnPhong( in float shininess, in float dotNH ) {\n\n\n	return ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n\n}\n\nvec3 BRDF_BlinnPhong( in vec3 specularColor, in float shininess, in vec3 normal, in vec3 lightDir, in vec3 viewDir ) {\n\n	vec3 halfDir = normalize( lightDir + viewDir );\n\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotLH = saturate( dot( lightDir, halfDir ) );\n\n	vec3 F = F_Schlick( specularColor, dotLH );\n\n	float G = G_BlinnPhong_Implicit( /* dotNL, dotNV */ );\n\n	float D = D_BlinnPhong( shininess, dotNH );\n\n	return F * G * D;\n\n}\n\nvec3 inputToLinear( in vec3 a ) {\n\n	#ifdef GAMMA_INPUT\n\n		return pow( a, vec3( float( GAMMA_FACTOR ) ) );\n\n	#else\n\n		return a;\n\n	#endif\n\n}\n\nvec3 linearToOutput( in vec3 a ) {\n\n	#ifdef GAMMA_OUTPUT\n\n		return pow( a, vec3( 1.0 / float( GAMMA_FACTOR ) ) );\n\n	#else\n\n		return a;\n\n	#endif\n\n}\n";
	
	// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl
	
	THREE.ShaderChunk[ 'defaultnormal_vertex'] = "#ifdef FLIP_SIDED\n\n	objectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;\n";
	
	// File:src/renderers/shaders/ShaderChunk/displacementmap_vertex.glsl
	
	THREE.ShaderChunk[ 'displacementmap_vertex'] = "#ifdef USE_DISPLACEMENTMAP\n\n	transformed += normal * ( texture2D( displacementMap, uv ).x * displacementScale + displacementBias );\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/displacementmap_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'displacementmap_pars_vertex'] = "#ifdef USE_DISPLACEMENTMAP\n\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/emissivemap_fragment.glsl
	
	THREE.ShaderChunk[ 'emissivemap_fragment'] = "#ifdef USE_EMISSIVEMAP\n\n	vec4 emissiveColor = texture2D( emissiveMap, vUv );\n\n	emissiveColor.rgb = inputToLinear( emissiveColor.rgb );\n\n	totalEmissiveLight *= emissiveColor.rgb;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/emissivemap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'emissivemap_pars_fragment'] = "#ifdef USE_EMISSIVEMAP\n\n	uniform sampler2D emissiveMap;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl
	
	THREE.ShaderChunk[ 'envmap_fragment'] = "#ifdef USE_ENVMAP\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\n		#ifdef ENVMAP_MODE_REFLECTION\n\n			vec3 reflectVec = reflect( cameraToVertex, worldNormal );\n\n		#else\n\n			vec3 reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n		#endif\n\n	#else\n\n		vec3 reflectVec = vReflect;\n\n	#endif\n\n	#ifdef DOUBLE_SIDED\n		float flipNormal = ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n	#else\n		float flipNormal = 1.0;\n	#endif\n\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n	#elif defined( ENVMAP_TYPE_EQUIREC )\n		vec2 sampleUV;\n		sampleUV.y = saturate( flipNormal * reflectVec.y * 0.5 + 0.5 );\n		sampleUV.x = atan( flipNormal * reflectVec.z, flipNormal * reflectVec.x ) * RECIPROCAL_PI2 + 0.5;\n		vec4 envColor = texture2D( envMap, sampleUV );\n\n	#elif defined( ENVMAP_TYPE_SPHERE )\n		vec3 reflectView = flipNormal * normalize((viewMatrix * vec4( reflectVec, 0.0 )).xyz + vec3(0.0,0.0,1.0));\n		vec4 envColor = texture2D( envMap, reflectView.xy * 0.5 + 0.5 );\n	#endif\n\n	envColor.xyz = inputToLinear( envColor.xyz );\n\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\n	#elif defined( ENVMAP_BLENDING_MIX )\n\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\n	#elif defined( ENVMAP_BLENDING_ADD )\n\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'envmap_pars_fragment'] = "#ifdef USE_ENVMAP\n\n	uniform float reflectivity;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	uniform float flipEnvMap;\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		uniform float refractionRatio;\n\n	#else\n\n		varying vec3 vReflect;\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'envmap_pars_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	varying vec3 vReflect;\n\n	uniform float refractionRatio;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl
	
	THREE.ShaderChunk[ 'envmap_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n	vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\n	#ifdef ENVMAP_MODE_REFLECTION\n\n		vReflect = reflect( cameraToVertex, worldNormal );\n\n	#else\n\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl
	
	THREE.ShaderChunk[ 'fog_fragment'] = "#ifdef USE_FOG\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n	#else\n\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n\n	#endif\n\n	#ifdef FOG_EXP2\n\n		float fogFactor = whiteCompliment( exp2( - fogDensity * fogDensity * depth * depth * LOG2 ) );\n\n	#else\n\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n\n	#endif\n	\n	outgoingLight = mix( outgoingLight, fogColor, fogFactor );\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'fog_pars_fragment'] = "#ifdef USE_FOG\n\n	uniform vec3 fogColor;\n\n	#ifdef FOG_EXP2\n\n		uniform float fogDensity;\n\n	#else\n\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/hemilight_fragment.glsl
	
	THREE.ShaderChunk[ 'hemilight_fragment'] = "#if MAX_HEMI_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec3 lightDir = hemisphereLightDirection[ i ];\n\n		float dotProduct = dot( normal, lightDir );\n\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n		vec3 lightColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		totalAmbientLight += lightColor;\n\n	}\n\n#endif\n\n";
	
	// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl
	
	THREE.ShaderChunk[ 'lightmap_fragment'] = "#ifdef USE_LIGHTMAP\n\n	totalAmbientLight += texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'lightmap_pars_fragment'] = "#ifdef USE_LIGHTMAP\n\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = "#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl
	
	THREE.ShaderChunk[ 'lights_lambert_vertex'] = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n	vLightBack = vec3( 0.0 );\n\n#endif\n\nvec3 normal = normalize( transformedNormal );\n\n#if MAX_POINT_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec3 lightColor = pointLightColor[ i ];\n\n		vec3 lVector = pointLightPosition[ i ] - mvPosition.xyz;\n		vec3 lightDir = normalize( lVector );\n\n\n		float attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n		float dotProduct = dot( normal, lightDir );\n\n		vLightFront += lightColor * attenuation * saturate( dotProduct );\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n		#endif\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec3 lightColor = spotLightColor[ i ];\n\n		vec3 lightPosition = spotLightPosition[ i ];\n		vec3 lVector = lightPosition - mvPosition.xyz;\n		vec3 lightDir = normalize( lVector );\n\n		float spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n			float attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n			attenuation *= spotEffect;\n\n\n			float dotProduct = dot( normal, lightDir );\n\n			vLightFront += lightColor * attenuation * saturate( dotProduct );\n\n			#ifdef DOUBLE_SIDED\n\n				vLightBack += lightColor * attenuation * saturate( - dotProduct );\n\n			#endif\n\n		}\n\n	}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n		vec3 lightColor = directionalLightColor[ i ];\n\n		vec3 lightDir = directionalLightDirection[ i ];\n\n\n		float dotProduct = dot( normal, lightDir );\n\n		vLightFront += lightColor * saturate( dotProduct );\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += lightColor * saturate( - dotProduct );\n\n		#endif\n\n	}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec3 lightDir = hemisphereLightDirection[ i ];\n\n\n		float dotProduct = dot( normal, lightDir );\n\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n		vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		#ifdef DOUBLE_SIDED\n\n			float hemiDiffuseWeightBack = - 0.5 * dotProduct + 0.5;\n\n			vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n		#endif\n\n	}\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl
	
	THREE.ShaderChunk[ 'lights_phong_fragment'] = "vec3 viewDir = normalize( vViewPosition );\n\nvec3 totalDiffuseLight = vec3( 0.0 );\nvec3 totalSpecularLight = vec3( 0.0 );\n\n#if MAX_POINT_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec3 lightColor = pointLightColor[ i ];\n\n		vec3 lightPosition = pointLightPosition[ i ];\n		vec3 lVector = lightPosition + vViewPosition.xyz;\n		vec3 lightDir = normalize( lVector );\n\n\n		float attenuation = calcLightAttenuation( length( lVector ), pointLightDistance[ i ], pointLightDecay[ i ] );\n\n\n		float cosineTerm = saturate( dot( normal, lightDir ) );\n\n		totalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n		vec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n		totalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec3 lightColor = spotLightColor[ i ];\n\n		vec3 lightPosition = spotLightPosition[ i ];\n		vec3 lVector = lightPosition + vViewPosition.xyz;\n		vec3 lightDir = normalize( lVector );\n\n		float spotEffect = dot( spotLightDirection[ i ], lightDir );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = saturate( pow( saturate( spotEffect ), spotLightExponent[ i ] ) );\n\n\n			float attenuation = calcLightAttenuation( length( lVector ), spotLightDistance[ i ], spotLightDecay[ i ] );\n\n			attenuation *= spotEffect;\n\n\n			float cosineTerm = saturate( dot( normal, lightDir ) );\n\n			totalDiffuseLight += lightColor * attenuation * cosineTerm;\n\n\n			vec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n			totalSpecularLight += brdf * specularStrength * lightColor * attenuation * cosineTerm;\n\n		}\n\n	}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n	for ( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n		vec3 lightColor = directionalLightColor[ i ];\n\n		vec3 lightDir = directionalLightDirection[ i ];\n\n\n		float cosineTerm = saturate( dot( normal, lightDir ) );\n\n		totalDiffuseLight += lightColor * cosineTerm;\n\n\n		vec3 brdf = BRDF_BlinnPhong( specular, shininess, normal, lightDir, viewDir );\n\n		totalSpecularLight += brdf * specularStrength * lightColor * cosineTerm;\n\n	}\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'lights_phong_pars_fragment'] = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDecay[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDecay[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n\nvarying vec3 vViewPosition;\n\n#ifndef FLAT_SHADED\n\n	varying vec3 vNormal;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'lights_phong_pars_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl
	
	THREE.ShaderChunk[ 'lights_phong_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_ENVMAP )\n\n	vWorldPosition = worldPosition.xyz;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl
	
	THREE.ShaderChunk[ 'linear_to_gamma_fragment'] = "\n	outgoingLight = linearToOutput( outgoingLight );\n";
	
	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl
	
	THREE.ShaderChunk[ 'logdepthbuf_fragment'] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = "#ifdef USE_LOGDEPTHBUF\n\n	uniform float logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		varying float vFragDepth;\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		varying float vFragDepth;\n\n	#endif\n\n	uniform float logDepthBufFC;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl
	
	THREE.ShaderChunk[ 'logdepthbuf_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	gl_Position.z = log2(max( EPSILON, gl_Position.w + 1.0 )) * logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		vFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n	#endif\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl
	
	THREE.ShaderChunk[ 'map_fragment'] = "#ifdef USE_MAP\n\n	vec4 texelColor = texture2D( map, vUv );\n\n	texelColor.xyz = inputToLinear( texelColor.xyz );\n\n	diffuseColor *= texelColor;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'map_pars_fragment'] = "#ifdef USE_MAP\n\n	uniform sampler2D map;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl
	
	THREE.ShaderChunk[ 'map_particle_fragment'] = "#ifdef USE_MAP\n\n	diffuseColor *= texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) * offsetRepeat.zw + offsetRepeat.xy );\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'map_particle_pars_fragment'] = "#ifdef USE_MAP\n\n	uniform vec4 offsetRepeat;\n	uniform sampler2D map;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl
	
	THREE.ShaderChunk[ 'morphnormal_vertex'] = "#ifdef USE_MORPHNORMALS\n\n	objectNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	objectNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	objectNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	objectNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'morphtarget_pars_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	#ifndef USE_MORPHNORMALS\n\n	uniform float morphTargetInfluences[ 8 ];\n\n	#else\n\n	uniform float morphTargetInfluences[ 4 ];\n\n	#endif\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl
	
	THREE.ShaderChunk[ 'morphtarget_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	transformed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	transformed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	transformed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	transformed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n	#ifndef USE_MORPHNORMALS\n\n	transformed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	transformed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	transformed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	transformed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/normal_phong_fragment.glsl
	
	THREE.ShaderChunk[ 'normal_phong_fragment'] = "#ifndef FLAT_SHADED\n\n	vec3 normal = normalize( vNormal );\n\n	#ifdef DOUBLE_SIDED\n\n		normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n	#endif\n\n#else\n\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n";
	
	// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'normalmap_pars_fragment'] = "#ifdef USE_NORMALMAP\n\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n\n\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n\n	}\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/project_vertex.glsl
	
	THREE.ShaderChunk[ 'project_vertex'] = "#ifdef USE_SKINNING\n\n	vec4 mvPosition = modelViewMatrix * skinned;\n\n#else\n\n	vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;\n";
	
	// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl
	
	THREE.ShaderChunk[ 'shadowmap_fragment'] = "#ifdef USE_SHADOWMAP\n\n	for ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n		float texelSizeY =  1.0 / shadowMapSize[ i ].y;\n\n		float shadow = 0.0;\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n		bool isPointLight = shadowDarkness[ i ] < 0.0;\n\n		if ( isPointLight ) {\n\n			float realShadowDarkness = abs( shadowDarkness[ i ] );\n\n			vec3 lightToPosition = vShadowCoord[ i ].xyz;\n\n	#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n			vec3 bd3D = normalize( lightToPosition );\n			float dp = length( lightToPosition );\n\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n\n	#if defined( SHADOWMAP_TYPE_PCF )\n			const float Dr = 1.25;\n	#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			const float Dr = 2.25;\n	#endif\n\n			float os = Dr *  2.0 * texelSizeY;\n\n			const vec3 Gsd = vec3( - 1, 0, 1 );\n\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xxy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xzy * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.zyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.xyx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxz * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yxx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D + Gsd.yzx * os, texelSizeY ) ), shadowBias[ i ], shadow );\n\n			shadow *= realShadowDarkness * ( 1.0 / 21.0 );\n\n	#else \n			vec3 bd3D = normalize( lightToPosition );\n			float dp = length( lightToPosition );\n\n			adjustShadowValue1K( dp, texture2D( shadowMap[ i ], cubeToUV( bd3D, texelSizeY ) ), shadowBias[ i ], shadow );\n\n			shadow *= realShadowDarkness;\n\n	#endif\n\n		} else {\n\n#endif \n			float texelSizeX =  1.0 / shadowMapSize[ i ].x;\n\n			vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n\n			bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n			bool inFrustum = all( inFrustumVec );\n\n			bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n			bool frustumTest = all( frustumTestVec );\n\n			if ( frustumTest ) {\n\n	#if defined( SHADOWMAP_TYPE_PCF )\n\n\n				/*\n					for ( float y = -1.25; y <= 1.25; y += 1.25 )\n						for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n							vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n							float fDepth = unpackDepth( rgbaDepth );\n							if ( fDepth < shadowCoord.z )\n								shadow += 1.0;\n					}\n					shadow /= 9.0;\n				*/\n\n				shadowCoord.z += shadowBias[ i ];\n\n				const float ShadowDelta = 1.0 / 9.0;\n\n				float xPixelOffset = texelSizeX;\n				float yPixelOffset = texelSizeY;\n\n				float dx0 = - 1.25 * xPixelOffset;\n				float dy0 = - 1.25 * yPixelOffset;\n				float dx1 = 1.25 * xPixelOffset;\n				float dy1 = 1.25 * yPixelOffset;\n\n				float fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += ShadowDelta;\n\n				shadow *= shadowDarkness[ i ];\n\n	#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n\n				shadowCoord.z += shadowBias[ i ];\n\n				float xPixelOffset = texelSizeX;\n				float yPixelOffset = texelSizeY;\n\n				float dx0 = - 1.0 * xPixelOffset;\n				float dy0 = - 1.0 * yPixelOffset;\n				float dx1 = 1.0 * xPixelOffset;\n				float dy1 = 1.0 * yPixelOffset;\n\n				mat3 shadowKernel;\n				mat3 depthKernel;\n\n				depthKernel[ 0 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				depthKernel[ 0 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				depthKernel[ 0 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				depthKernel[ 1 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				depthKernel[ 1 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				depthKernel[ 1 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				depthKernel[ 2 ][ 0 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				depthKernel[ 2 ][ 1 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				depthKernel[ 2 ][ 2 ] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n				vec3 shadowZ = vec3( shadowCoord.z );\n				shadowKernel[ 0 ] = vec3( lessThan( depthKernel[ 0 ], shadowZ ) );\n				shadowKernel[ 0 ] *= vec3( 0.25 );\n\n				shadowKernel[ 1 ] = vec3( lessThan( depthKernel[ 1 ], shadowZ ) );\n				shadowKernel[ 1 ] *= vec3( 0.25 );\n\n				shadowKernel[ 2 ] = vec3( lessThan( depthKernel[ 2 ], shadowZ ) );\n				shadowKernel[ 2 ] *= vec3( 0.25 );\n\n				vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[ i ].xy );\n\n				shadowKernel[ 0 ] = mix( shadowKernel[ 1 ], shadowKernel[ 0 ], fractionalCoord.x );\n				shadowKernel[ 1 ] = mix( shadowKernel[ 2 ], shadowKernel[ 1 ], fractionalCoord.x );\n\n				vec4 shadowValues;\n				shadowValues.x = mix( shadowKernel[ 0 ][ 1 ], shadowKernel[ 0 ][ 0 ], fractionalCoord.y );\n				shadowValues.y = mix( shadowKernel[ 0 ][ 2 ], shadowKernel[ 0 ][ 1 ], fractionalCoord.y );\n				shadowValues.z = mix( shadowKernel[ 1 ][ 1 ], shadowKernel[ 1 ][ 0 ], fractionalCoord.y );\n				shadowValues.w = mix( shadowKernel[ 1 ][ 2 ], shadowKernel[ 1 ][ 1 ], fractionalCoord.y );\n\n				shadow = dot( shadowValues, vec4( 1.0 ) ) * shadowDarkness[ i ];\n\n	#else \n				shadowCoord.z += shadowBias[ i ];\n\n				vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n				float fDepth = unpackDepth( rgbaDepth );\n\n				if ( fDepth < shadowCoord.z )\n					shadow = shadowDarkness[ i ];\n\n	#endif\n\n			}\n\n#ifdef SHADOWMAP_DEBUG\n\n			if ( inFrustum ) {\n\n				if ( i == 0 ) {\n\n					outgoingLight *= vec3( 1.0, 0.5, 0.0 );\n\n				} else if ( i == 1 ) {\n\n					outgoingLight *= vec3( 0.0, 1.0, 0.8 );\n\n				} else {\n\n					outgoingLight *= vec3( 0.0, 0.5, 1.0 );\n\n				}\n\n			}\n\n#endif\n\n#if defined( POINT_LIGHT_SHADOWS )\n\n		}\n\n#endif\n\n		shadowMask = shadowMask * vec3( 1.0 - shadow );\n\n	}\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'shadowmap_pars_fragment'] = "#ifdef USE_SHADOWMAP\n\n	uniform sampler2D shadowMap[ MAX_SHADOWS ];\n	uniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n	uniform float shadowDarkness[ MAX_SHADOWS ];\n	uniform float shadowBias[ MAX_SHADOWS ];\n\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n	float unpackDepth( const in vec4 rgba_depth ) {\n\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		float depth = dot( rgba_depth, bit_shift );\n		return depth;\n\n	}\n\n	#if defined(POINT_LIGHT_SHADOWS)\n\n\n		void adjustShadowValue1K( const float testDepth, const vec4 textureData, const float bias, inout float shadowValue ) {\n\n			const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n			if ( testDepth >= dot( textureData, bitSh ) * 1000.0 + bias )\n				shadowValue += 1.0;\n\n		}\n\n\n		vec2 cubeToUV( vec3 v, float texelSizeY ) {\n\n\n			vec3 absV = abs( v );\n\n\n			float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n			absV *= scaleToCube;\n\n\n			v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\n\n\n			vec2 planar = v.xy;\n\n			float almostATexel = 1.5 * texelSizeY;\n			float almostOne = 1.0 - almostATexel;\n\n			if ( absV.z >= almostOne ) {\n\n				if ( v.z > 0.0 )\n					planar.x = 4.0 - v.x;\n\n			} else if ( absV.x >= almostOne ) {\n\n				float signX = sign( v.x );\n				planar.x = v.z * signX + 2.0 * signX;\n\n			} else if ( absV.y >= almostOne ) {\n\n				float signY = sign( v.y );\n				planar.x = v.x + 2.0 * signY + 2.0;\n				planar.y = v.z * signY - 2.0;\n\n			}\n\n\n			return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\n		}\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'shadowmap_pars_vertex'] = "#ifdef USE_SHADOWMAP\n\n	uniform float shadowDarkness[ MAX_SHADOWS ];\n	uniform mat4 shadowMatrix[ MAX_SHADOWS ];\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl
	
	THREE.ShaderChunk[ 'shadowmap_vertex'] = "#ifdef USE_SHADOWMAP\n\n	for ( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n			vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n	}\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl
	
	THREE.ShaderChunk[ 'skinbase_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'skinning_pars_vertex'] = "#ifdef USE_SKINNING\n\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n\n	#ifdef BONE_TEXTURE\n\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n\n			y = dy * ( y + 0.5 );\n\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n			mat4 bone = mat4( v1, v2, v3, v4 );\n\n			return bone;\n\n		}\n\n	#else\n\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n\n		}\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl
	
	THREE.ShaderChunk[ 'skinning_vertex'] = "#ifdef USE_SKINNING\n\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl
	
	THREE.ShaderChunk[ 'skinnormal_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl
	
	THREE.ShaderChunk[ 'specularmap_fragment'] = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n\n#else\n\n	specularStrength = 1.0;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'specularmap_pars_fragment'] = "#ifdef USE_SPECULARMAP\n\n	uniform sampler2D specularMap;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/uv2_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'uv2_pars_fragment'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n	varying vec2 vUv2;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/uv2_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'uv2_pars_vertex'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n	attribute vec2 uv2;\n	varying vec2 vUv2;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/uv2_vertex.glsl
	
	THREE.ShaderChunk[ 'uv2_vertex'] = "#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\n	vUv2 = uv2;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/uv_pars_fragment.glsl
	
	THREE.ShaderChunk[ 'uv_pars_fragment'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n	varying vec2 vUv;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/uv_pars_vertex.glsl
	
	THREE.ShaderChunk[ 'uv_pars_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n\n#endif\n";
	
	// File:src/renderers/shaders/ShaderChunk/uv_vertex.glsl
	
	THREE.ShaderChunk[ 'uv_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP )\n\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";
	
	// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl
	
	THREE.ShaderChunk[ 'worldpos_vertex'] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n	#ifdef USE_SKINNING\n\n		vec4 worldPosition = modelMatrix * skinned;\n\n	#else\n\n		vec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\n	#endif\n\n#endif\n";
	
	// File:src/renderers/shaders/UniformsUtils.js
	
	/**
	 * Uniform Utilities
	 */
	
	THREE.UniformsUtils = {
	
		merge: function ( uniforms ) {
	
			var merged = {};
	
			for ( var u = 0; u < uniforms.length; u ++ ) {
	
				var tmp = this.clone( uniforms[ u ] );
	
				for ( var p in tmp ) {
	
					merged[ p ] = tmp[ p ];
	
				}
	
			}
	
			return merged;
	
		},
	
		clone: function ( uniforms_src ) {
	
			var uniforms_dst = {};
	
			for ( var u in uniforms_src ) {
	
				uniforms_dst[ u ] = {};
	
				for ( var p in uniforms_src[ u ] ) {
	
					var parameter_src = uniforms_src[ u ][ p ];
	
					if ( parameter_src instanceof THREE.Color ||
						 parameter_src instanceof THREE.Vector2 ||
						 parameter_src instanceof THREE.Vector3 ||
						 parameter_src instanceof THREE.Vector4 ||
						 parameter_src instanceof THREE.Matrix3 ||
						 parameter_src instanceof THREE.Matrix4 ||
						 parameter_src instanceof THREE.Texture ) {
	
						uniforms_dst[ u ][ p ] = parameter_src.clone();
	
					} else if ( Array.isArray( parameter_src ) ) {
	
						uniforms_dst[ u ][ p ] = parameter_src.slice();
	
					} else {
	
						uniforms_dst[ u ][ p ] = parameter_src;
	
					}
	
				}
	
			}
	
			return uniforms_dst;
	
		}
	
	};
	
	// File:src/renderers/shaders/UniformsLib.js
	
	/**
	 * Uniforms library for shared webgl shaders
	 */
	
	THREE.UniformsLib = {
	
		common: {
	
			"diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity" : { type: "f", value: 1.0 },
	
			"map" : { type: "t", value: null },
			"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },
	
			"specularMap" : { type: "t", value: null },
			"alphaMap" : { type: "t", value: null },
	
			"envMap" : { type: "t", value: null },
			"flipEnvMap" : { type: "f", value: - 1 },
			"reflectivity" : { type: "f", value: 1.0 },
			"refractionRatio" : { type: "f", value: 0.98 }
	
		},
	
		aomap: {
	
			"aoMap" : { type: "t", value: null },
			"aoMapIntensity" : { type: "f", value: 1 },
	
		},
	
		lightmap: {
	
			"lightMap" : { type: "t", value: null },
			"lightMapIntensity" : { type: "f", value: 1 },
	
		},
	
		emissivemap: {
	
			"emissiveMap" : { type: "t", value: null },
	
		},
	
		bumpmap: {
	
			"bumpMap" : { type: "t", value: null },
			"bumpScale" : { type: "f", value: 1 }
	
		},
	
		normalmap: {
	
			"normalMap" : { type: "t", value: null },
			"normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
	
		},
	
		displacementmap: {
	
			"displacementMap" : { type: "t", value: null },
			"displacementScale" : { type: "f", value: 1 },
			"displacementBias" : { type: "f", value: 0 }
	
		},
	
		fog : {
	
			"fogDensity" : { type: "f", value: 0.00025 },
			"fogNear" : { type: "f", value: 1 },
			"fogFar" : { type: "f", value: 2000 },
			"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }
	
		},
	
		lights: {
	
			"ambientLightColor" : { type: "fv", value: [] },
	
			"directionalLightDirection" : { type: "fv", value: [] },
			"directionalLightColor" : { type: "fv", value: [] },
	
			"hemisphereLightDirection" : { type: "fv", value: [] },
			"hemisphereLightSkyColor" : { type: "fv", value: [] },
			"hemisphereLightGroundColor" : { type: "fv", value: [] },
	
			"pointLightColor" : { type: "fv", value: [] },
			"pointLightPosition" : { type: "fv", value: [] },
			"pointLightDistance" : { type: "fv1", value: [] },
			"pointLightDecay" : { type: "fv1", value: [] },
	
			"spotLightColor" : { type: "fv", value: [] },
			"spotLightPosition" : { type: "fv", value: [] },
			"spotLightDirection" : { type: "fv", value: [] },
			"spotLightDistance" : { type: "fv1", value: [] },
			"spotLightAngleCos" : { type: "fv1", value: [] },
			"spotLightExponent" : { type: "fv1", value: [] },
			"spotLightDecay" : { type: "fv1", value: [] }
	
		},
	
		points: {
	
			"psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
			"opacity" : { type: "f", value: 1.0 },
			"size" : { type: "f", value: 1.0 },
			"scale" : { type: "f", value: 1.0 },
			"map" : { type: "t", value: null },
			"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },
	
			"fogDensity" : { type: "f", value: 0.00025 },
			"fogNear" : { type: "f", value: 1 },
			"fogFar" : { type: "f", value: 2000 },
			"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }
	
		},
	
		shadowmap: {
	
			"shadowMap": { type: "tv", value: [] },
			"shadowMapSize": { type: "v2v", value: [] },
	
			"shadowBias" : { type: "fv1", value: [] },
			"shadowDarkness": { type: "fv1", value: [] },
	
			"shadowMatrix" : { type: "m4v", value: [] }
	
		}
	
	};
	
	// File:src/renderers/shaders/ShaderLib.js
	
	/**
	 * Webgl Shader Library for three.js
	 *
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author mikael emtinger / http://gomo.se/
	 */
	
	
	THREE.ShaderLib = {
	
		'basic': {
	
			uniforms: THREE.UniformsUtils.merge( [
	
				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "shadowmap" ]
	
			] ),
	
			vertexShader: [
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
	
				"	#ifdef USE_ENVMAP",
	
					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],
	
				"	#endif",
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform vec3 diffuse;",
				"uniform float opacity;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	vec3 totalAmbientLight = vec3( 1.0 );", // hardwired
				"	vec3 shadowMask = vec3( 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "aomap_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],
	
				"	outgoingLight = diffuseColor.rgb * totalAmbientLight * shadowMask;",
	
					THREE.ShaderChunk[ "envmap_fragment" ],
	
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
	
					THREE.ShaderChunk[ "fog_fragment" ],
	
				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'lambert': {
	
			uniforms: THREE.UniformsUtils.merge( [
	
				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],
	
				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) }
				}
	
			] ),
	
			vertexShader: [
	
				"#define LAMBERT",
	
				"varying vec3 vLightFront;",
	
				"#ifdef DOUBLE_SIDED",
	
				"	varying vec3 vLightBack;",
	
				"#endif",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],
	
					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_lambert_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform float opacity;",
	
				"uniform vec3 ambientLightColor;",
	
				"varying vec3 vLightFront;",
	
				"#ifdef DOUBLE_SIDED",
	
				"	varying vec3 vLightBack;",
	
				"#endif",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	vec3 outgoingLight = vec3( 0.0 );",	// outgoing light does not have an alpha, the surface does
				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	vec3 totalAmbientLight = ambientLightColor;",
				"	vec3 shadowMask = vec3( 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],
	
				"	#ifdef DOUBLE_SIDED",
	
				"		if ( gl_FrontFacing )",
				"			outgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;",
				"		else",
				"			outgoingLight += diffuseColor.rgb * ( vLightBack * shadowMask + totalAmbientLight ) + emissive;",
	
				"	#else",
	
				"		outgoingLight += diffuseColor.rgb * ( vLightFront * shadowMask + totalAmbientLight ) + emissive;",
	
				"	#endif",
	
					THREE.ShaderChunk[ "envmap_fragment" ],
	
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
	
					THREE.ShaderChunk[ "fog_fragment" ],
	
				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'phong': {
	
			uniforms: THREE.UniformsUtils.merge( [
	
				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "aomap" ],
				THREE.UniformsLib[ "lightmap" ],
				THREE.UniformsLib[ "emissivemap" ],
				THREE.UniformsLib[ "bumpmap" ],
				THREE.UniformsLib[ "normalmap" ],
				THREE.UniformsLib[ "displacementmap" ],
				THREE.UniformsLib[ "fog" ],
				THREE.UniformsLib[ "lights" ],
				THREE.UniformsLib[ "shadowmap" ],
	
				{
					"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
					"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
					"shininess": { type: "f", value: 30 }
				}
	
			] ),
	
			vertexShader: [
	
				"#define PHONG",
	
				"varying vec3 vViewPosition;",
	
				"#ifndef FLAT_SHADED",
	
				"	varying vec3 vNormal;",
	
				"#endif",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "uv_pars_vertex" ],
				THREE.ShaderChunk[ "uv2_pars_vertex" ],
				THREE.ShaderChunk[ "displacementmap_pars_vertex" ],
				THREE.ShaderChunk[ "envmap_pars_vertex" ],
				THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "uv_vertex" ],
					THREE.ShaderChunk[ "uv2_vertex" ],
					THREE.ShaderChunk[ "color_vertex" ],
	
					THREE.ShaderChunk[ "beginnormal_vertex" ],
					THREE.ShaderChunk[ "morphnormal_vertex" ],
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "skinnormal_vertex" ],
					THREE.ShaderChunk[ "defaultnormal_vertex" ],
	
				"#ifndef FLAT_SHADED", // Normal computed with derivatives when FLAT_SHADED
	
				"	vNormal = normalize( transformedNormal );",
	
				"#endif",
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "displacementmap_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"	vViewPosition = - mvPosition.xyz;",
	
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "envmap_vertex" ],
					THREE.ShaderChunk[ "lights_phong_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"#define PHONG",
	
				"uniform vec3 diffuse;",
				"uniform vec3 emissive;",
				"uniform vec3 specular;",
				"uniform float shininess;",
				"uniform float opacity;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "uv_pars_fragment" ],
				THREE.ShaderChunk[ "uv2_pars_fragment" ],
				THREE.ShaderChunk[ "map_pars_fragment" ],
				THREE.ShaderChunk[ "alphamap_pars_fragment" ],
				THREE.ShaderChunk[ "aomap_pars_fragment" ],
				THREE.ShaderChunk[ "lightmap_pars_fragment" ],
				THREE.ShaderChunk[ "emissivemap_pars_fragment" ],
				THREE.ShaderChunk[ "envmap_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
				THREE.ShaderChunk[ "normalmap_pars_fragment" ],
				THREE.ShaderChunk[ "specularmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",
				"	vec3 totalAmbientLight = ambientLightColor;",
				"	vec3 totalEmissiveLight = emissive;",
				"	vec3 shadowMask = vec3( 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphamap_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "specularmap_fragment" ],
					THREE.ShaderChunk[ "normal_phong_fragment" ],
					THREE.ShaderChunk[ "lightmap_fragment" ],
					THREE.ShaderChunk[ "hemilight_fragment" ],
					THREE.ShaderChunk[ "aomap_fragment" ],
					THREE.ShaderChunk[ "emissivemap_fragment" ],
	
					THREE.ShaderChunk[ "lights_phong_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],
	
					"totalDiffuseLight *= shadowMask;",
					"totalSpecularLight *= shadowMask;",
	
					"#ifdef METAL",
	
					"	outgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) * specular + totalSpecularLight + totalEmissiveLight;",
	
					"#else",
	
					"	outgoingLight += diffuseColor.rgb * ( totalDiffuseLight + totalAmbientLight ) + totalSpecularLight + totalEmissiveLight;",
	
					"#endif",
	
					THREE.ShaderChunk[ "envmap_fragment" ],
	
					THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
	
					THREE.ShaderChunk[ "fog_fragment" ],
	
				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'points': {
	
			uniforms: THREE.UniformsUtils.merge( [
	
				THREE.UniformsLib[ "points" ],
				THREE.UniformsLib[ "shadowmap" ]
	
			] ),
	
			vertexShader: [
	
				"uniform float size;",
				"uniform float scale;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "color_vertex" ],
	
				"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
	
				"	#ifdef USE_SIZEATTENUATION",
				"		gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
				"	#else",
				"		gl_PointSize = size;",
				"	#endif",
	
				"	gl_Position = projectionMatrix * mvPosition;",
	
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],
					THREE.ShaderChunk[ "shadowmap_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform vec3 psColor;",
				"uniform float opacity;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "map_particle_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( psColor, opacity );",
				"	vec3 shadowMask = vec3( 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "map_particle_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
					THREE.ShaderChunk[ "alphatest_fragment" ],
					THREE.ShaderChunk[ "shadowmap_fragment" ],
	
				"	outgoingLight = diffuseColor.rgb * shadowMask;",
	
					THREE.ShaderChunk[ "fog_fragment" ],
	
				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'dashed': {
	
			uniforms: THREE.UniformsUtils.merge( [
	
				THREE.UniformsLib[ "common" ],
				THREE.UniformsLib[ "fog" ],
	
				{
					"scale"    : { type: "f", value: 1 },
					"dashSize" : { type: "f", value: 1 },
					"totalSize": { type: "f", value: 2 }
				}
	
			] ),
	
			vertexShader: [
	
				"uniform float scale;",
				"attribute float lineDistance;",
	
				"varying float vLineDistance;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "color_vertex" ],
	
				"	vLineDistance = scale * lineDistance;",
	
				"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
				"	gl_Position = projectionMatrix * mvPosition;",
	
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform vec3 diffuse;",
				"uniform float opacity;",
	
				"uniform float dashSize;",
				"uniform float totalSize;",
	
				"varying float vLineDistance;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "color_pars_fragment" ],
				THREE.ShaderChunk[ "fog_pars_fragment" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	if ( mod( vLineDistance, totalSize ) > dashSize ) {",
	
				"		discard;",
	
				"	}",
	
				"	vec3 outgoingLight = vec3( 0.0 );",
				"	vec4 diffuseColor = vec4( diffuse, opacity );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
					THREE.ShaderChunk[ "color_fragment" ],
	
				"	outgoingLight = diffuseColor.rgb;", // simple shader
	
					THREE.ShaderChunk[ "fog_fragment" ],
	
				"	gl_FragColor = vec4( outgoingLight, diffuseColor.a );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'depth': {
	
			uniforms: {
	
				"mNear": { type: "f", value: 1.0 },
				"mFar" : { type: "f", value: 2000.0 },
				"opacity" : { type: "f", value: 1.0 }
	
			},
	
			vertexShader: [
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform float mNear;",
				"uniform float mFar;",
				"uniform float opacity;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
	
				"	#ifdef USE_LOGDEPTHBUF_EXT",
	
				"		float depth = gl_FragDepthEXT / gl_FragCoord.w;",
	
				"	#else",
	
				"		float depth = gl_FragCoord.z / gl_FragCoord.w;",
	
				"	#endif",
	
				"	float color = 1.0 - smoothstep( mNear, mFar, depth );",
				"	gl_FragColor = vec4( vec3( color ), opacity );",
	
				"}"
	
			].join( "\n" )
	
		},
	
		'normal': {
	
			uniforms: {
	
				"opacity" : { type: "f", value: 1.0 }
	
			},
	
			vertexShader: [
	
				"varying vec3 vNormal;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
				"	vNormal = normalize( normalMatrix * normal );",
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform float opacity;",
				"varying vec3 vNormal;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
	
				"}"
	
			].join( "\n" )
	
		},
	
		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */
	
		'cube': {
	
			uniforms: { "tCube": { type: "t", value: null },
						"tFlip": { type: "f", value: - 1 } },
	
			vertexShader: [
	
				"varying vec3 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
				"	vWorldPosition = transformDirection( position, modelMatrix );",
	
				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform samplerCube tCube;",
				"uniform float tFlip;",
	
				"varying vec3 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
				"	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
	
				"}"
	
			].join( "\n" )
	
		},
	
		/* -------------------------------------------------------------------------
		//	Cube map shader
		 ------------------------------------------------------------------------- */
	
		'equirect': {
	
			uniforms: { "tEquirect": { type: "t", value: null },
						"tFlip": { type: "f", value: - 1 } },
	
			vertexShader: [
	
				"varying vec3 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
				"	vWorldPosition = transformDirection( position, modelMatrix );",
	
				"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",
	
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform sampler2D tEquirect;",
				"uniform float tFlip;",
	
				"varying vec3 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"void main() {",
	
					// "	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",
					"vec3 direction = normalize( vWorldPosition );",
					"vec2 sampleUV;",
					"sampleUV.y = saturate( tFlip * direction.y * -0.5 + 0.5 );",
					"sampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;",
					"gl_FragColor = texture2D( tEquirect, sampleUV );",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
	
				"}"
	
			].join( "\n" )
	
		},
	
		/* Depth encoding into RGBA texture
		 *
		 * based on SpiderGL shadow map example
		 * http://spidergl.org/example.php?id=6
		 *
		 * originally from
		 * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
		 *
		 * see also
		 * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
		 */
	
		'depthRGBA': {
	
			uniforms: {},
	
			vertexShader: [
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "skinbase_vertex" ],
	
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "logdepthbuf_vertex" ],
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],
	
				"vec4 pack_depth( const in float depth ) {",
	
				"	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
				"	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
				"	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );", // "	vec4 res = fract( depth * bit_shift );",
				"	res -= res.xxyz * bit_mask;",
				"	return res;",
	
				"}",
	
				"void main() {",
	
					THREE.ShaderChunk[ "logdepthbuf_fragment" ],
	
				"	#ifdef USE_LOGDEPTHBUF_EXT",
	
				"		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",
	
				"	#else",
	
				"		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",
	
				"	#endif",
	
					//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
					//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
					//"gl_FragData[ 0 ] = pack_depth( z );",
					//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",
	
				"}"
	
			].join( "\n" )
	
		},
	
	
		'distanceRGBA': {
	
			uniforms: {
	
				"lightPos": { type: "v3", value: new THREE.Vector3( 0, 0, 0 ) }
	
			},
	
			vertexShader: [
	
				"varying vec4 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
				THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
				THREE.ShaderChunk[ "skinning_pars_vertex" ],
	
				"void main() {",
	
					THREE.ShaderChunk[ "skinbase_vertex" ],
					THREE.ShaderChunk[ "begin_vertex" ],
					THREE.ShaderChunk[ "morphtarget_vertex" ],
					THREE.ShaderChunk[ "skinning_vertex" ],
					THREE.ShaderChunk[ "project_vertex" ],
					THREE.ShaderChunk[ "worldpos_vertex" ],
	
					"vWorldPosition = worldPosition;",
	
				"}"
	
			].join( "\n" ),
	
			fragmentShader: [
	
				"uniform vec3 lightPos;",
				"varying vec4 vWorldPosition;",
	
				THREE.ShaderChunk[ "common" ],
	
				"vec4 pack1K ( float depth ) {",
	
				"   depth /= 1000.0;",
				"   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
	  			"	const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
	   			"	vec4 res = fract( depth * bitSh );",
	   			"	res -= res.xxyz * bitMsk;",
	   			"	return res; ",
	
				"}",
	
				"float unpack1K ( vec4 color ) {",
	
				"	const vec4 bitSh = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );",
				"	return dot( color, bitSh ) * 1000.0;",
	
				"}",
	
				"void main () {",
	
				"	gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz ) );",
	
				"}"
	
			].join( "\n" )
	
		}
	
	};
	
	// File:src/renderers/WebGLRenderer.js
	
	/**
	 * @author supereggbert / http://www.paulbrunt.co.uk/
	 * @author mrdoob / http://mrdoob.com/
	 * @author alteredq / http://alteredqualia.com/
	 * @author szimek / https://github.com/szimek/
	 */
	
	THREE.WebGLRenderer = function ( parameters ) {
	
		console.log( 'THREE.WebGLRenderer', THREE.REVISION );
	
		parameters = parameters || {};
	
		var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
		_context = parameters.context !== undefined ? parameters.context : null,
	
		_width = _canvas.width,
		_height = _canvas.height,
	
		pixelRatio = 1,
	
		_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
		_depth = parameters.depth !== undefined ? parameters.depth : true,
		_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
		_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
		_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
		_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
	
		_clearColor = new THREE.Color( 0x000000 ),
		_clearAlpha = 0;
	
		var lights = [];
	
		var opaqueObjects = [];
		var opaqueObjectsLastIndex = - 1;
		var transparentObjects = [];
		var transparentObjectsLastIndex = - 1;
	
		var morphInfluences = new Float32Array( 8 );
	
	
		var sprites = [];
		var lensFlares = [];
	
		// public properties
	
		this.domElement = _canvas;
		this.context = null;
	
		// clearing
	
		this.autoClear = true;
		this.autoClearColor = true;
		this.autoClearDepth = true;
		this.autoClearStencil = true;
	
		// scene graph
	
		this.sortObjects = true;
	
		// physically based shading
	
		this.gammaFactor = 2.0;	// for backwards compatibility
		this.gammaInput = false;
		this.gammaOutput = false;
	
		// morphs
	
		this.maxMorphTargets = 8;
		this.maxMorphNormals = 4;
	
		// flags
	
		this.autoScaleCubemaps = true;
	
		// internal properties
	
		var _this = this,
	
		// internal state cache
	
		_currentProgram = null,
		_currentFramebuffer = null,
		_currentMaterialId = - 1,
		_currentGeometryProgram = '',
		_currentCamera = null,
	
		_usedTextureUnits = 0,
	
		_viewportX = 0,
		_viewportY = 0,
		_viewportWidth = _canvas.width,
		_viewportHeight = _canvas.height,
		_currentWidth = 0,
		_currentHeight = 0,
	
		// frustum
	
		_frustum = new THREE.Frustum(),
	
		 // camera matrices cache
	
		_projScreenMatrix = new THREE.Matrix4(),
	
		_vector3 = new THREE.Vector3(),
	
		// light arrays cache
	
		_direction = new THREE.Vector3(),
	
		_lightsNeedUpdate = true,
	
		_lights = {
	
			ambient: [ 0, 0, 0 ],
			directional: { length: 0, colors: [], positions: [] },
			point: { length: 0, colors: [], positions: [], distances: [], decays: [] },
			spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [], decays: [] },
			hemi: { length: 0, skyColors: [], groundColors: [], positions: [] }
	
		},
	
		// info
	
		_infoMemory = {
	
			geometries: 0,
			textures: 0
	
		},
	
		_infoRender = {
	
			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0
	
		};
	
		this.info = {
	
			render: _infoRender,
			memory: _infoMemory,
			programs: null
	
		};
	
	
		// initialize
	
		var _gl;
	
		try {
	
			var attributes = {
				alpha: _alpha,
				depth: _depth,
				stencil: _stencil,
				antialias: _antialias,
				premultipliedAlpha: _premultipliedAlpha,
				preserveDrawingBuffer: _preserveDrawingBuffer
			};
	
			_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );
	
			if ( _gl === null ) {
	
				if ( _canvas.getContext( 'webgl' ) !== null ) {
	
					throw 'Error creating WebGL context with your selected attributes.';
	
				} else {
	
					throw 'Error creating WebGL context.';
	
				}
	
			}
	
			_canvas.addEventListener( 'webglcontextlost', onContextLost, false );
	
		} catch ( error ) {
	
			console.error( 'THREE.WebGLRenderer: ' + error );
	
		}
	
		var extensions = new THREE.WebGLExtensions( _gl );
	
		extensions.get( 'OES_texture_float' );
		extensions.get( 'OES_texture_float_linear' );
		extensions.get( 'OES_texture_half_float' );
		extensions.get( 'OES_texture_half_float_linear' );
		extensions.get( 'OES_standard_derivatives' );
		extensions.get( 'ANGLE_instanced_arrays' );
	
		if ( extensions.get( 'OES_element_index_uint' ) ) {
	
			THREE.BufferGeometry.MaxIndex = 4294967296;
	
		}
	
		var capabilities = new THREE.WebGLCapabilities( _gl, extensions, parameters );
	
		var state = new THREE.WebGLState( _gl, extensions, paramThreeToGL );
		var properties = new THREE.WebGLProperties();
		var objects = new THREE.WebGLObjects( _gl, properties, this.info );
		var programCache = new THREE.WebGLPrograms( this, capabilities );
	
		this.info.programs = programCache.programs;
	
		var bufferRenderer = new THREE.WebGLBufferRenderer( _gl, extensions, _infoRender );
		var indexedBufferRenderer = new THREE.WebGLIndexedBufferRenderer( _gl, extensions, _infoRender );
	
		//
	
		function glClearColor( r, g, b, a ) {
	
			if ( _premultipliedAlpha === true ) {
	
				r *= a; g *= a; b *= a;
	
			}
	
			_gl.clearColor( r, g, b, a );
	
		}
	
		function setDefaultGLState() {
	
			state.init();
	
			_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );
	
			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
		}
	
		function resetGLState() {
	
			_currentProgram = null;
			_currentCamera = null;
	
			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
	
			_lightsNeedUpdate = true;
	
			state.reset();
	
		}
	
		setDefaultGLState();
	
		this.context = _gl;
		this.capabilities = capabilities;
		this.extensions = extensions;
		this.state = state;
	
		// shadow map
	
		var shadowMap = new THREE.WebGLShadowMap( this, lights, objects );
	
		this.shadowMap = shadowMap;
	
	
		// Plugins
	
		var spritePlugin = new THREE.SpritePlugin( this, sprites );
		var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );
	
		// API
	
		this.getContext = function () {
	
			return _gl;
	
		};
	
		this.getContextAttributes = function () {
	
			return _gl.getContextAttributes();
	
		};
	
		this.forceContextLoss = function () {
	
			extensions.get( 'WEBGL_lose_context' ).loseContext();
	
		};
	
		this.getMaxAnisotropy = ( function () {
	
			var value;
	
			return function getMaxAnisotropy() {
	
				if ( value !== undefined ) return value;
	
				var extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
				if ( extension !== null ) {
	
					value = _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );
	
				} else {
	
					value = 0;
	
				}
	
				return value;
	
			}
	
		} )();
	
		this.getPrecision = function () {
	
			return capabilities.precision;
	
		};
	
		this.getPixelRatio = function () {
	
			return pixelRatio;
	
		};
	
		this.setPixelRatio = function ( value ) {
	
			if ( value !== undefined ) pixelRatio = value;
	
		};
	
		this.getSize = function () {
	
			return {
				width: _width,
				height: _height
			};
	
		};
	
		this.setSize = function ( width, height, updateStyle ) {
	
			_width = width;
			_height = height;
	
			_canvas.width = width * pixelRatio;
			_canvas.height = height * pixelRatio;
	
			if ( updateStyle !== false ) {
	
				_canvas.style.width = width + 'px';
				_canvas.style.height = height + 'px';
	
			}
	
			this.setViewport( 0, 0, width, height );
	
		};
	
		this.setViewport = function ( x, y, width, height ) {
	
			_viewportX = x * pixelRatio;
			_viewportY = y * pixelRatio;
	
			_viewportWidth = width * pixelRatio;
			_viewportHeight = height * pixelRatio;
	
			_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );
	
		};
	
		this.getViewport = function ( dimensions ) {
	
			dimensions.x = _viewportX / pixelRatio;
			dimensions.y = _viewportY / pixelRatio;
	
			dimensions.z = _viewportWidth / pixelRatio;
			dimensions.w = _viewportHeight / pixelRatio;
	
		};
	
		this.setScissor = function ( x, y, width, height ) {
	
			_gl.scissor(
				x * pixelRatio,
				y * pixelRatio,
				width * pixelRatio,
				height * pixelRatio
			);
	
		};
	
		this.enableScissorTest = function ( boolean ) {
	
			state.setScissorTest( boolean );
	
		};
	
		// Clearing
	
		this.getClearColor = function () {
	
			return _clearColor;
	
		};
	
		this.setClearColor = function ( color, alpha ) {
	
			_clearColor.set( color );
	
			_clearAlpha = alpha !== undefined ? alpha : 1;
	
			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
		};
	
		this.getClearAlpha = function () {
	
			return _clearAlpha;
	
		};
	
		this.setClearAlpha = function ( alpha ) {
	
			_clearAlpha = alpha;
	
			glClearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );
	
		};
	
		this.clear = function ( color, depth, stencil ) {
	
			var bits = 0;
	
			if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
			if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
			if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;
	
			_gl.clear( bits );
	
		};
	
		this.clearColor = function () {
	
			_gl.clear( _gl.COLOR_BUFFER_BIT );
	
		};
	
		this.clearDepth = function () {
	
			_gl.clear( _gl.DEPTH_BUFFER_BIT );
	
		};
	
		this.clearStencil = function () {
	
			_gl.clear( _gl.STENCIL_BUFFER_BIT );
	
		};
	
		this.clearTarget = function ( renderTarget, color, depth, stencil ) {
	
			this.setRenderTarget( renderTarget );
			this.clear( color, depth, stencil );
	
		};
	
		// Reset
	
		this.resetGLState = resetGLState;
	
		this.dispose = function() {
	
			_canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
	
		};
	
		// Events
	
		function onContextLost( event ) {
	
			event.preventDefault();
	
			resetGLState();
			setDefaultGLState();
	
			properties.clear();
	
		};
	
		function onTextureDispose( event ) {
	
			var texture = event.target;
	
			texture.removeEventListener( 'dispose', onTextureDispose );
	
			deallocateTexture( texture );
	
			_infoMemory.textures --;
	
	
		}
	
		function onRenderTargetDispose( event ) {
	
			var renderTarget = event.target;
	
			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );
	
			deallocateRenderTarget( renderTarget );
	
			_infoMemory.textures --;
	
		}
	
		function onMaterialDispose( event ) {
	
			var material = event.target;
	
			material.removeEventListener( 'dispose', onMaterialDispose );
	
			deallocateMaterial( material );
	
		}
	
		// Buffer deallocation
	
		function deallocateTexture( texture ) {
	
			var textureProperties = properties.get( texture );
	
			if ( texture.image && textureProperties.__image__webglTextureCube ) {
	
				// cube texture
	
				_gl.deleteTexture( textureProperties.__image__webglTextureCube );
	
			} else {
	
				// 2D texture
	
				if ( textureProperties.__webglInit === undefined ) return;
	
				_gl.deleteTexture( textureProperties.__webglTexture );
	
			}
	
			// remove all webgl properties
			properties.delete( texture );
	
		}
	
		function deallocateRenderTarget( renderTarget ) {
	
			var renderTargetProperties = properties.get( renderTarget );
			var textureProperties = properties.get( renderTarget.texture );
	
			if ( ! renderTarget || textureProperties.__webglTexture === undefined ) return;
	
			_gl.deleteTexture( textureProperties.__webglTexture );
	
			if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {
	
				for ( var i = 0; i < 6; i ++ ) {
	
					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );
					_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer[ i ] );
	
				}
	
			} else {
	
				_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );
				_gl.deleteRenderbuffer( renderTargetProperties.__webglRenderbuffer );
	
			}
	
			properties.delete( renderTarget.texture );
			properties.delete( renderTarget );
	
		}
	
		function deallocateMaterial( material ) {
	
			releaseMaterialProgramReference( material );
	
			properties.delete( material );
	
		}
	
	
		function releaseMaterialProgramReference( material ) {
	
			var programInfo = properties.get( material ).program;
	
			material.program = undefined;
	
			if ( programInfo !== undefined ) {
	
				programCache.releaseProgram( programInfo );
	
			}
	
		}
	
		// Buffer rendering
	
		this.renderBufferImmediate = function ( object, program, material ) {
	
			state.initAttributes();
	
			var buffers = properties.get( object );
	
			if ( object.hasPositions && ! buffers.position ) buffers.position = _gl.createBuffer();
			if ( object.hasNormals && ! buffers.normal ) buffers.normal = _gl.createBuffer();
			if ( object.hasUvs && ! buffers.uv ) buffers.uv = _gl.createBuffer();
			if ( object.hasColors && ! buffers.color ) buffers.color = _gl.createBuffer();
	
			var attributes = program.getAttributes();
	
			if ( object.hasPositions ) {
	
				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.position );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
	
				state.enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );
	
			}
	
			if ( object.hasNormals ) {
	
				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.normal );
	
				if ( material.type !== 'MeshPhongMaterial' && material.shading === THREE.FlatShading ) {
	
					for ( var i = 0, l = object.count * 3; i < l; i += 9 ) {
	
						var array = object.normalArray;
	
						var nx = ( array[ i + 0 ] + array[ i + 3 ] + array[ i + 6 ] ) / 3;
						var ny = ( array[ i + 1 ] + array[ i + 4 ] + array[ i + 7 ] ) / 3;
						var nz = ( array[ i + 2 ] + array[ i + 5 ] + array[ i + 8 ] ) / 3;
	
						array[ i + 0 ] = nx;
						array[ i + 1 ] = ny;
						array[ i + 2 ] = nz;
	
						array[ i + 3 ] = nx;
						array[ i + 4 ] = ny;
						array[ i + 5 ] = nz;
	
						array[ i + 6 ] = nx;
						array[ i + 7 ] = ny;
						array[ i + 8 ] = nz;
	
					}
	
				}
	
				_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
	
				state.enableAttribute( attributes.normal );
	
				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );
	
			}
	
			if ( object.hasUvs && material.map ) {
	
				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.uv );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
	
				state.enableAttribute( attributes.uv );
	
				_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );
	
			}
	
			if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {
	
				_gl.bindBuffer( _gl.ARRAY_BUFFER, buffers.color );
				_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
	
				state.enableAttribute( attributes.color );
	
				_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );
	
			}
	
			state.disableUnusedAttributes();
	
			_gl.drawArrays( _gl.TRIANGLES, 0, object.count );
	
			object.count = 0;
	
		};
	
		this.renderBufferDirect = function ( camera, lights, fog, geometry, material, object, group ) {
	
			setMaterial( material );
	
			var program = setProgram( camera, lights, fog, material, object );
	
			var updateBuffers = false;
			var geometryProgram = geometry.id + '_' + program.id + '_' + material.wireframe;
	
			if ( geometryProgram !== _currentGeometryProgram ) {
	
				_currentGeometryProgram = geometryProgram;
				updateBuffers = true;
	
			}
	
			// morph targets
	
			var morphTargetInfluences = object.morphTargetInfluences;
	
			if ( morphTargetInfluences !== undefined ) {
	
				var activeInfluences = [];
	
				for ( var i = 0, l = morphTargetInfluences.length; i < l; i ++ ) {
	
					var influence = morphTargetInfluences[ i ];
					activeInfluences.push( [ influence, i ] );
	
				}
	
				activeInfluences.sort( numericalSort );
	
				if ( activeInfluences.length > 8 ) {
	
					activeInfluences.length = 8;
	
				}
	
				var morphAttributes = geometry.morphAttributes;
	
				for ( var i = 0, l = activeInfluences.length; i < l; i ++ ) {
	
					var influence = activeInfluences[ i ];
					morphInfluences[ i ] = influence[ 0 ];
	
					if ( influence[ 0 ] !== 0 ) {
	
						var index = influence[ 1 ];
	
						if ( material.morphTargets === true && morphAttributes.position ) geometry.addAttribute( 'morphTarget' + i, morphAttributes.position[ index ] );
						if ( material.morphNormals === true && morphAttributes.normal ) geometry.addAttribute( 'morphNormal' + i, morphAttributes.normal[ index ] );
	
					} else {
	
						if ( material.morphTargets === true ) geometry.removeAttribute( 'morphTarget' + i );
						if ( material.morphNormals === true ) geometry.removeAttribute( 'morphNormal' + i );
	
					}
	
				}
	
				var uniforms = program.getUniforms();
	
				if ( uniforms.morphTargetInfluences !== null ) {
	
					_gl.uniform1fv( uniforms.morphTargetInfluences, morphInfluences );
	
				}
	
				updateBuffers = true;
	
			}
	
			//
	
			var index = geometry.index;
			var position = geometry.attributes.position;
	
			if ( material.wireframe === true ) {
	
				index = objects.getWireframeAttribute( geometry );
	
			}
	
			var renderer;
	
			if ( index !== null ) {
	
				renderer = indexedBufferRenderer;
				renderer.setIndex( index );
	
			} else {
	
				renderer = bufferRenderer;
	
			}
	
			if ( updateBuffers ) {
	
				setupVertexAttributes( material, program, geometry );
	
				if ( index !== null ) {
	
					_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, objects.getAttributeBuffer( index ) );
	
				}
	
			}
	
			//
	
			var dataStart = 0;
			var dataCount = Infinity;
	
			if ( index !== null ) {
	
				dataCount = index.count
	
			} else if ( position !== undefined ) {
	
				dataCount = position.count;
	
			}
	
			var rangeStart = geometry.drawRange.start;
			var rangeCount = geometry.drawRange.count;
	
			var groupStart = group !== null ? group.start : 0;
			var groupCount = group !== null ? group.count : Infinity;
	
			var drawStart = Math.max( dataStart, rangeStart, groupStart );
			var drawEnd = Math.min( dataStart + dataCount, rangeStart + rangeCount, groupStart + groupCount ) - 1;
	
			var drawCount = Math.max( 0, drawEnd - drawStart + 1 );
	
			//
	
			if ( object instanceof THREE.Mesh ) {
	
				if ( material.wireframe === true ) {
	
					state.setLineWidth( material.wireframeLinewidth * pixelRatio );
					renderer.setMode( _gl.LINES );
	
				} else {
	
					renderer.setMode( _gl.TRIANGLES );
	
				}
	
				if ( geometry instanceof THREE.InstancedBufferGeometry && geometry.maxInstancedCount > 0 ) {
	
					renderer.renderInstances( geometry );
	
				} else {
	
					renderer.render( drawStart, drawCount );
	
				}
	
			} else if ( object instanceof THREE.Line ) {
	
				var lineWidth = material.linewidth;
	
				if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material
	
				state.setLineWidth( lineWidth * pixelRatio );
	
				if ( object instanceof THREE.LineSegments ) {
	
					renderer.setMode( _gl.LINES );
	
				} else {
	
					renderer.setMode( _gl.LINE_STRIP );
	
				}
	
				renderer.render( drawStart, drawCount );
	
			} else if ( object instanceof THREE.Points ) {
	
				renderer.setMode( _gl.POINTS );
				renderer.render( drawStart, drawCount );
	
			}
	
		};
	
		function setupVertexAttributes( material, program, geometry, startIndex ) {
	
			var extension;
	
			if ( geometry instanceof THREE.InstancedBufferGeometry ) {
	
				extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				if ( extension === null ) {
	
					console.error( 'THREE.WebGLRenderer.setupVertexAttributes: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;
	
				}
	
			}
	
			if ( startIndex === undefined ) startIndex = 0;
	
			state.initAttributes();
	
			var geometryAttributes = geometry.attributes;
	
			var programAttributes = program.getAttributes();
	
			var materialDefaultAttributeValues = material.defaultAttributeValues;
	
			for ( var name in programAttributes ) {
	
				var programAttribute = programAttributes[ name ];
	
				if ( programAttribute >= 0 ) {
	
					var geometryAttribute = geometryAttributes[ name ];
	
					if ( geometryAttribute !== undefined ) {
	
						var size = geometryAttribute.itemSize;
						var buffer = objects.getAttributeBuffer( geometryAttribute );
	
						if ( geometryAttribute instanceof THREE.InterleavedBufferAttribute ) {
	
							var data = geometryAttribute.data;
							var stride = data.stride;
							var offset = geometryAttribute.offset;
	
							if ( data instanceof THREE.InstancedInterleavedBuffer ) {
	
								state.enableAttributeAndDivisor( programAttribute, data.meshPerAttribute, extension );
	
								if ( geometry.maxInstancedCount === undefined ) {
	
									geometry.maxInstancedCount = data.meshPerAttribute * data.count;
	
								}
	
							} else {
	
								state.enableAttribute( programAttribute );
	
							}
	
							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, stride * data.array.BYTES_PER_ELEMENT, ( startIndex * stride + offset ) * data.array.BYTES_PER_ELEMENT );
	
						} else {
	
							if ( geometryAttribute instanceof THREE.InstancedBufferAttribute ) {
	
								state.enableAttributeAndDivisor( programAttribute, geometryAttribute.meshPerAttribute, extension );
	
								if ( geometry.maxInstancedCount === undefined ) {
	
									geometry.maxInstancedCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
	
								}
	
							} else {
	
								state.enableAttribute( programAttribute );
	
							}
	
							_gl.bindBuffer( _gl.ARRAY_BUFFER, buffer );
							_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32
	
						}
	
					} else if ( materialDefaultAttributeValues !== undefined ) {
	
						var value = materialDefaultAttributeValues[ name ];
	
						if ( value !== undefined ) {
	
							switch ( value.length ) {
	
								case 2:
									_gl.vertexAttrib2fv( programAttribute, value );
									break;
	
								case 3:
									_gl.vertexAttrib3fv( programAttribute, value );
									break;
	
								case 4:
									_gl.vertexAttrib4fv( programAttribute, value );
									break;
	
								default:
									_gl.vertexAttrib1fv( programAttribute, value );
	
							}
	
						}
	
					}
	
				}
	
			}
	
			state.disableUnusedAttributes();
	
		}
	
		// Sorting
	
		function numericalSort ( a, b ) {
	
			return b[ 0 ] - a[ 0 ];
	
		}
	
		function painterSortStable ( a, b ) {
	
			if ( a.object.renderOrder !== b.object.renderOrder ) {
	
				return a.object.renderOrder - b.object.renderOrder;
	
			} else if ( a.material.id !== b.material.id ) {
	
				return a.material.id - b.material.id;
	
			} else if ( a.z !== b.z ) {
	
				return a.z - b.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
		function reversePainterSortStable ( a, b ) {
	
			if ( a.object.renderOrder !== b.object.renderOrder ) {
	
				return a.object.renderOrder - b.object.renderOrder;
	
			} if ( a.z !== b.z ) {
	
				return b.z - a.z;
	
			} else {
	
				return a.id - b.id;
	
			}
	
		}
	
		// Rendering
	
		this.render = function ( scene, camera, renderTarget, forceClear ) {
	
			if ( camera instanceof THREE.Camera === false ) {
	
				console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
				return;
	
			}
	
			var fog = scene.fog;
	
			// reset caching for this frame
	
			_currentGeometryProgram = '';
			_currentMaterialId = - 1;
			_currentCamera = null;
			_lightsNeedUpdate = true;
	
			// update scene graph
	
			if ( scene.autoUpdate === true ) scene.updateMatrixWorld();
	
			// update camera matrices and frustum
	
			if ( camera.parent === null ) camera.updateMatrixWorld();
	
			camera.matrixWorldInverse.getInverse( camera.matrixWorld );
	
			_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );
	
			lights.length = 0;
	
			opaqueObjectsLastIndex = - 1;
			transparentObjectsLastIndex = - 1;
	
			sprites.length = 0;
			lensFlares.length = 0;
	
			projectObject( scene, camera );
	
			opaqueObjects.length = opaqueObjectsLastIndex + 1;
			transparentObjects.length = transparentObjectsLastIndex + 1;
	
			if ( _this.sortObjects === true ) {
	
				opaqueObjects.sort( painterSortStable );
				transparentObjects.sort( reversePainterSortStable );
	
			}
	
			//
	
			shadowMap.render( scene );
	
			//
	
			_infoRender.calls = 0;
			_infoRender.vertices = 0;
			_infoRender.faces = 0;
			_infoRender.points = 0;
	
			this.setRenderTarget( renderTarget );
	
			if ( this.autoClear || forceClear ) {
	
				this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );
	
			}
	
			//
	
			if ( scene.overrideMaterial ) {
	
				var overrideMaterial = scene.overrideMaterial;
	
				renderObjects( opaqueObjects, camera, lights, fog, overrideMaterial );
				renderObjects( transparentObjects, camera, lights, fog, overrideMaterial );
	
			} else {
	
				// opaque pass (front-to-back order)
	
				state.setBlending( THREE.NoBlending );
				renderObjects( opaqueObjects, camera, lights, fog );
	
				// transparent pass (back-to-front order)
	
				renderObjects( transparentObjects, camera, lights, fog );
	
			}
	
			// custom render plugins (post pass)
	
			spritePlugin.render( scene, camera );
			lensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );
	
			// Generate mipmap if we're using any kind of mipmap filtering
	
			if ( renderTarget ) {
	
				var texture = renderTarget.texture;
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget );
				if ( texture.generateMipmaps && isTargetPowerOfTwo && texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {
	
					 updateRenderTargetMipmap( renderTarget );
	
				}
	
			}
	
			// Ensure depth buffer writing is enabled so it can be cleared on next render
	
			state.setDepthTest( true );
			state.setDepthWrite( true );
			state.setColorWrite( true );
	
			// _gl.finish();
	
		};
	
		function pushRenderItem( object, geometry, material, z, group ) {
	
			var array, index;
	
			// allocate the next position in the appropriate array
	
			if ( material.transparent ) {
	
				array = transparentObjects;
				index = ++ transparentObjectsLastIndex;
	
			} else {
	
				array = opaqueObjects;
				index = ++ opaqueObjectsLastIndex;
	
			}
	
			// recycle existing render item or grow the array
	
			var renderItem = array[ index ];
	
			if ( renderItem !== undefined ) {
	
				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.z = _vector3.z;
				renderItem.group = group;
	
			} else {
	
				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					z: _vector3.z,
					group: group
				};
	
				// assert( index === array.length );
				array.push( renderItem );
	
			}
	
		}
	
		function projectObject( object, camera ) {
	
			if ( object.visible === false ) return;
	
			if ( ( object.channels.mask & camera.channels.mask ) !== 0 ) {
	
				if ( object instanceof THREE.Light ) {
	
					lights.push( object );
	
				} else if ( object instanceof THREE.Sprite ) {
	
					sprites.push( object );
	
				} else if ( object instanceof THREE.LensFlare ) {
	
					lensFlares.push( object );
	
				} else if ( object instanceof THREE.ImmediateRenderObject ) {
	
					if ( _this.sortObjects === true ) {
	
						_vector3.setFromMatrixPosition( object.matrixWorld );
						_vector3.applyProjection( _projScreenMatrix );
	
					}
	
					pushRenderItem( object, null, object.material, _vector3.z, null );
	
				} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {
	
					if ( object instanceof THREE.SkinnedMesh ) {
	
						object.skeleton.update();
	
					}
	
					if ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) {
	
						var material = object.material;
	
						if ( material.visible === true ) {
	
							if ( _this.sortObjects === true ) {
	
								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );
	
							}
	
							var geometry = objects.update( object );
	
							if ( material instanceof THREE.MeshFaceMaterial ) {
	
								var groups = geometry.groups;
								var materials = material.materials;
	
								for ( var i = 0, l = groups.length; i < l; i ++ ) {
	
									var group = groups[ i ];
									var groupMaterial = materials[ group.materialIndex ];
	
									if ( groupMaterial.visible === true ) {
	
										pushRenderItem( object, geometry, groupMaterial, _vector3.z, group );
	
									}
	
								}
	
							} else {
	
								pushRenderItem( object, geometry, material, _vector3.z, null );
	
							}
	
						}
	
					}
	
				}
	
			}
	
			var children = object.children;
	
			for ( var i = 0, l = children.length; i < l; i ++ ) {
	
				projectObject( children[ i ], camera );
	
			}
	
		}
	
		function renderObjects( renderList, camera, lights, fog, overrideMaterial ) {
	
			for ( var i = 0, l = renderList.length; i < l; i ++ ) {
	
				var renderItem = renderList[ i ];
	
				var object = renderItem.object;
				var geometry = renderItem.geometry;
				var material = overrideMaterial === undefined ? renderItem.material : overrideMaterial;
				var group = renderItem.group;
	
				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );
	
				if ( object instanceof THREE.ImmediateRenderObject ) {
	
					setMaterial( material );
	
					var program = setProgram( camera, lights, fog, material, object );
	
					_currentGeometryProgram = '';
	
					object.render( function ( object ) {
	
						_this.renderBufferImmediate( object, program, material );
	
					} );
	
				} else {
	
					_this.renderBufferDirect( camera, lights, fog, geometry, material, object, group );
	
				}
	
			}
	
		}
	
		function initMaterial( material, lights, fog, object ) {
	
			var materialProperties = properties.get( material );
	
			var parameters = programCache.getParameters( material, lights, fog, object );
			var code = programCache.getProgramCode( material, parameters );
	
			var program = materialProperties.program;
			var programChange = true;
	
			if ( program === undefined ) {
	
				// new material
				material.addEventListener( 'dispose', onMaterialDispose );
	
			} else if ( program.code !== code ) {
	
				// changed glsl or parameters
				releaseMaterialProgramReference( material );
	
			} else if ( parameters.shaderID !== undefined ) {
	
				// same glsl and uniform list
				return;
	
			} else {
	
				// only rebuild uniform list
				programChange = false;
	
			}
	
			if ( programChange ) {
	
				if ( parameters.shaderID ) {
	
					var shader = THREE.ShaderLib[ parameters.shaderID ];
	
					materialProperties.__webglShader = {
						name: material.type,
						uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
						vertexShader: shader.vertexShader,
						fragmentShader: shader.fragmentShader
					};
	
				} else {
	
					materialProperties.__webglShader = {
						name: material.type,
						uniforms: material.uniforms,
						vertexShader: material.vertexShader,
						fragmentShader: material.fragmentShader
					};
	
				}
	
				material.__webglShader = materialProperties.__webglShader;
	
				program = programCache.acquireProgram( material, parameters, code );
	
				materialProperties.program = program;
				material.program = program;
	
			}
	
			var attributes = program.getAttributes();
	
			if ( material.morphTargets ) {
	
				material.numSupportedMorphTargets = 0;
	
				for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {
	
					if ( attributes[ 'morphTarget' + i ] >= 0 ) {
	
						material.numSupportedMorphTargets ++;
	
					}
	
				}
	
			}
	
			if ( material.morphNormals ) {
	
				material.numSupportedMorphNormals = 0;
	
				for ( i = 0; i < _this.maxMorphNormals; i ++ ) {
	
					if ( attributes[ 'morphNormal' + i ] >= 0 ) {
	
						material.numSupportedMorphNormals ++;
	
					}
	
				}
	
			}
	
			materialProperties.uniformsList = [];
	
			var uniformLocations = materialProperties.program.getUniforms();
	
			for ( var u in materialProperties.__webglShader.uniforms ) {
	
				var location = uniformLocations[ u ];
	
				if ( location ) {
	
					materialProperties.uniformsList.push( [ materialProperties.__webglShader.uniforms[ u ], location ] );
	
				}
	
			}
	
		}
	
		function setMaterial( material ) {
	
			setMaterialFaces( material );
	
			if ( material.transparent === true ) {
	
				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha );
	
			} else {
	
				state.setBlending( THREE.NoBlending );
	
			}
	
			state.setDepthFunc( material.depthFunc );
			state.setDepthTest( material.depthTest );
			state.setDepthWrite( material.depthWrite );
			state.setColorWrite( material.colorWrite );
			state.setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );
	
		}
	
		function setMaterialFaces( material ) {
	
			material.side !== THREE.DoubleSide ? state.enable( _gl.CULL_FACE ) : state.disable( _gl.CULL_FACE );
			state.setFlipSided( material.side === THREE.BackSide );
	
		}
	
		function setProgram( camera, lights, fog, material, object ) {
	
			_usedTextureUnits = 0;
	
			var materialProperties = properties.get( material );
	
			if ( material.needsUpdate || ! materialProperties.program ) {
	
				initMaterial( material, lights, fog, object );
				material.needsUpdate = false;
	
			}
	
			var refreshProgram = false;
			var refreshMaterial = false;
			var refreshLights = false;
	
			var program = materialProperties.program,
				p_uniforms = program.getUniforms(),
				m_uniforms = materialProperties.__webglShader.uniforms;
	
			if ( program.id !== _currentProgram ) {
	
				_gl.useProgram( program.program );
				_currentProgram = program.id;
	
				refreshProgram = true;
				refreshMaterial = true;
				refreshLights = true;
	
			}
	
			if ( material.id !== _currentMaterialId ) {
	
				if ( _currentMaterialId === - 1 ) refreshLights = true;
				_currentMaterialId = material.id;
	
				refreshMaterial = true;
	
			}
	
			if ( refreshProgram || camera !== _currentCamera ) {
	
				_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
	
				if ( capabilities.logarithmicDepthBuffer ) {
	
					_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );
	
				}
	
	
				if ( camera !== _currentCamera ) _currentCamera = camera;
	
				// load material specific uniforms
				// (shader material also gets them for the sake of genericity)
	
				if ( material instanceof THREE.ShaderMaterial ||
					 material instanceof THREE.MeshPhongMaterial ||
					 material.envMap ) {
	
					if ( p_uniforms.cameraPosition !== undefined ) {
	
						_vector3.setFromMatrixPosition( camera.matrixWorld );
						_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );
	
					}
	
				}
	
				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.ShaderMaterial ||
					 material.skinning ) {
	
					if ( p_uniforms.viewMatrix !== undefined ) {
	
						_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );
	
					}
	
				}
	
			}
	
			// skinning uniforms must be set even if material didn't change
			// auto-setting of texture unit for bone texture must go before other textures
			// not sure why, but otherwise weird things happen
	
			if ( material.skinning ) {
	
				if ( object.bindMatrix && p_uniforms.bindMatrix !== undefined ) {
	
					_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );
	
				}
	
				if ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== undefined ) {
	
					_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );
	
				}
	
				if ( capabilities.floatVertexTextures && object.skeleton && object.skeleton.useVertexTexture ) {
	
					if ( p_uniforms.boneTexture !== undefined ) {
	
						var textureUnit = getTextureUnit();
	
						_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
						_this.setTexture( object.skeleton.boneTexture, textureUnit );
	
					}
	
					if ( p_uniforms.boneTextureWidth !== undefined ) {
	
						_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );
	
					}
	
					if ( p_uniforms.boneTextureHeight !== undefined ) {
	
						_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );
	
					}
	
				} else if ( object.skeleton && object.skeleton.boneMatrices ) {
	
					if ( p_uniforms.boneGlobalMatrices !== undefined ) {
	
						_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );
	
					}
	
				}
	
			}
	
			if ( refreshMaterial ) {
	
				// refresh uniforms common to several materials
	
				if ( fog && material.fog ) {
	
					refreshUniformsFog( m_uniforms, fog );
	
				}
	
				if ( material instanceof THREE.MeshPhongMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material.lights ) {
	
					if ( _lightsNeedUpdate ) {
	
						refreshLights = true;
						setupLights( lights, camera );
						_lightsNeedUpdate = false;
	
					}
	
					if ( refreshLights ) {
	
						refreshUniformsLights( m_uniforms, _lights );
						markUniformsLightsNeedsUpdate( m_uniforms, true );
	
					} else {
	
						markUniformsLightsNeedsUpdate( m_uniforms, false );
	
					}
	
				}
	
				if ( material instanceof THREE.MeshBasicMaterial ||
					 material instanceof THREE.MeshLambertMaterial ||
					 material instanceof THREE.MeshPhongMaterial ) {
	
					refreshUniformsCommon( m_uniforms, material );
	
				}
	
				// refresh single material specific uniforms
	
				if ( material instanceof THREE.LineBasicMaterial ) {
	
					refreshUniformsLine( m_uniforms, material );
	
				} else if ( material instanceof THREE.LineDashedMaterial ) {
	
					refreshUniformsLine( m_uniforms, material );
					refreshUniformsDash( m_uniforms, material );
	
				} else if ( material instanceof THREE.PointsMaterial ) {
	
					refreshUniformsParticle( m_uniforms, material );
	
				} else if ( material instanceof THREE.MeshPhongMaterial ) {
	
					refreshUniformsPhong( m_uniforms, material );
	
				} else if ( material instanceof THREE.MeshDepthMaterial ) {
	
					m_uniforms.mNear.value = camera.near;
					m_uniforms.mFar.value = camera.far;
					m_uniforms.opacity.value = material.opacity;
	
				} else if ( material instanceof THREE.MeshNormalMaterial ) {
	
					m_uniforms.opacity.value = material.opacity;
	
				}
	
				if ( object.receiveShadow && ! material._shadowPass ) {
	
					refreshUniformsShadow( m_uniforms, lights, camera );
	
				}
	
				// load common uniforms
	
				loadUniformsGeneric( materialProperties.uniformsList );
	
			}
	
			loadUniformsMatrices( p_uniforms, object );
	
			if ( p_uniforms.modelMatrix !== undefined ) {
	
				_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );
	
			}
	
			return program;
	
		}
	
		// Uniforms (refresh uniforms objects)
	
		function refreshUniformsCommon ( uniforms, material ) {
	
			uniforms.opacity.value = material.opacity;
	
			uniforms.diffuse.value = material.color;
	
			if ( material.emissive ) {
	
				uniforms.emissive.value = material.emissive;
	
			}
	
			uniforms.map.value = material.map;
			uniforms.specularMap.value = material.specularMap;
			uniforms.alphaMap.value = material.alphaMap;
	
			if ( material.aoMap ) {
	
				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;
	
			}
	
			// uv repeat and offset setting priorities
			// 1. color map
			// 2. specular map
			// 3. normal map
			// 4. bump map
			// 5. alpha map
			// 6. emissive map
	
			var uvScaleMap;
	
			if ( material.map ) {
	
				uvScaleMap = material.map;
	
			} else if ( material.specularMap ) {
	
				uvScaleMap = material.specularMap;
	
			} else if ( material.displacementMap ) {
	
				uvScaleMap = material.displacementMap;
	
			} else if ( material.normalMap ) {
	
				uvScaleMap = material.normalMap;
	
			} else if ( material.bumpMap ) {
	
				uvScaleMap = material.bumpMap;
	
			} else if ( material.alphaMap ) {
	
				uvScaleMap = material.alphaMap;
	
			} else if ( material.emissiveMap ) {
	
				uvScaleMap = material.emissiveMap;
	
			}
	
			if ( uvScaleMap !== undefined ) {
	
				if ( uvScaleMap instanceof THREE.WebGLRenderTarget ) uvScaleMap = uvScaleMap.texture;
				var offset = uvScaleMap.offset;
				var repeat = uvScaleMap.repeat;
	
				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
	
			}
	
			uniforms.envMap.value = material.envMap;
			uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;
	
			uniforms.reflectivity.value = material.reflectivity;
			uniforms.refractionRatio.value = material.refractionRatio;
	
		}
	
		function refreshUniformsLine ( uniforms, material ) {
	
			uniforms.diffuse.value = material.color;
			uniforms.opacity.value = material.opacity;
	
		}
	
		function refreshUniformsDash ( uniforms, material ) {
	
			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;
	
		}
	
		function refreshUniformsParticle ( uniforms, material ) {
	
			uniforms.psColor.value = material.color;
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size;
			uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.
	
			uniforms.map.value = material.map;
	
			if ( material.map !== null ) {
	
				var offset = material.map.offset;
				var repeat = material.map.repeat;
	
				uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );
	
			}
	
		}
	
		function refreshUniformsFog ( uniforms, fog ) {
	
			uniforms.fogColor.value = fog.color;
	
			if ( fog instanceof THREE.Fog ) {
	
				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;
	
			} else if ( fog instanceof THREE.FogExp2 ) {
	
				uniforms.fogDensity.value = fog.density;
	
			}
	
		}
	
		function refreshUniformsPhong ( uniforms, material ) {
	
			uniforms.specular.value = material.specular;
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )
	
			if ( material.lightMap ) {
	
				uniforms.lightMap.value = material.lightMap;
				uniforms.lightMapIntensity.value = material.lightMapIntensity;
	
			}
	
			if ( material.emissiveMap ) {
	
				uniforms.emissiveMap.value = material.emissiveMap;
	
			}
	
			if ( material.bumpMap ) {
	
				uniforms.bumpMap.value = material.bumpMap;
				uniforms.bumpScale.value = material.bumpScale;
	
			}
	
			if ( material.normalMap ) {
	
				uniforms.normalMap.value = material.normalMap;
				uniforms.normalScale.value.copy( material.normalScale );
	
			}
	
			if ( material.displacementMap ) {
	
				uniforms.displacementMap.value = material.displacementMap;
				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;
	
			}
	
		}
	
		function refreshUniformsLights ( uniforms, lights ) {
	
			uniforms.ambientLightColor.value = lights.ambient;
	
			uniforms.directionalLightColor.value = lights.directional.colors;
			uniforms.directionalLightDirection.value = lights.directional.positions;
	
			uniforms.pointLightColor.value = lights.point.colors;
			uniforms.pointLightPosition.value = lights.point.positions;
			uniforms.pointLightDistance.value = lights.point.distances;
			uniforms.pointLightDecay.value = lights.point.decays;
	
			uniforms.spotLightColor.value = lights.spot.colors;
			uniforms.spotLightPosition.value = lights.spot.positions;
			uniforms.spotLightDistance.value = lights.spot.distances;
			uniforms.spotLightDirection.value = lights.spot.directions;
			uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
			uniforms.spotLightExponent.value = lights.spot.exponents;
			uniforms.spotLightDecay.value = lights.spot.decays;
	
			uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
			uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
			uniforms.hemisphereLightDirection.value = lights.hemi.positions;
	
		}
	
		// If uniforms are marked as clean, they don't need to be loaded to the GPU.
	
		function markUniformsLightsNeedsUpdate ( uniforms, value ) {
	
			uniforms.ambientLightColor.needsUpdate = value;
	
			uniforms.directionalLightColor.needsUpdate = value;
			uniforms.directionalLightDirection.needsUpdate = value;
	
			uniforms.pointLightColor.needsUpdate = value;
			uniforms.pointLightPosition.needsUpdate = value;
			uniforms.pointLightDistance.needsUpdate = value;
			uniforms.pointLightDecay.needsUpdate = value;
	
			uniforms.spotLightColor.needsUpdate = value;
			uniforms.spotLightPosition.needsUpdate = value;
			uniforms.spotLightDistance.needsUpdate = value;
			uniforms.spotLightDirection.needsUpdate = value;
			uniforms.spotLightAngleCos.needsUpdate = value;
			uniforms.spotLightExponent.needsUpdate = value;
			uniforms.spotLightDecay.needsUpdate = value;
	
			uniforms.hemisphereLightSkyColor.needsUpdate = value;
			uniforms.hemisphereLightGroundColor.needsUpdate = value;
			uniforms.hemisphereLightDirection.needsUpdate = value;
	
		}
	
		function refreshUniformsShadow ( uniforms, lights, camera ) {
	
			if ( uniforms.shadowMatrix ) {
	
				var j = 0;
	
				for ( var i = 0, il = lights.length; i < il; i ++ ) {
	
					var light = lights[ i ];
	
					if ( light.castShadow === true ) {
	
						if ( light instanceof THREE.PointLight || light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) {
	
							var shadow = light.shadow;
	
							if ( light instanceof THREE.PointLight ) {
	
								// for point lights we set the shadow matrix to be a translation-only matrix
								// equal to inverse of the light's position
								_vector3.setFromMatrixPosition( light.matrixWorld ).negate();
								shadow.matrix.identity().setPosition( _vector3 );
	
								// for point lights we set the sign of the shadowDarkness uniform to be negative
								uniforms.shadowDarkness.value[ j ] = - shadow.darkness;
	
							} else {
	
								uniforms.shadowDarkness.value[ j ] = shadow.darkness;
	
							}
	
							uniforms.shadowMatrix.value[ j ] = shadow.matrix;
							uniforms.shadowMap.value[ j ] = shadow.map;
							uniforms.shadowMapSize.value[ j ] = shadow.mapSize;
							uniforms.shadowBias.value[ j ] = shadow.bias;
	
							j ++;
	
						}
	
					}
	
				}
	
			}
	
		}
	
		// Uniforms (load to GPU)
	
		function loadUniformsMatrices ( uniforms, object ) {
	
			_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object.modelViewMatrix.elements );
	
			if ( uniforms.normalMatrix ) {
	
				_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object.normalMatrix.elements );
	
			}
	
		}
	
		function getTextureUnit() {
	
			var textureUnit = _usedTextureUnits;
	
			if ( textureUnit >= capabilities.maxTextures ) {
	
				console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + capabilities.maxTextures );
	
			}
	
			_usedTextureUnits += 1;
	
			return textureUnit;
	
		}
	
		function loadUniformsGeneric ( uniforms ) {
	
			var texture, textureUnit;
	
			for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {
	
				var uniform = uniforms[ j ][ 0 ];
	
				// needsUpdate property is not added to all uniforms.
				if ( uniform.needsUpdate === false ) continue;
	
				var type = uniform.type;
				var value = uniform.value;
				var location = uniforms[ j ][ 1 ];
	
				switch ( type ) {
	
					case '1i':
						_gl.uniform1i( location, value );
						break;
	
					case '1f':
						_gl.uniform1f( location, value );
						break;
	
					case '2f':
						_gl.uniform2f( location, value[ 0 ], value[ 1 ] );
						break;
	
					case '3f':
						_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );
						break;
	
					case '4f':
						_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );
						break;
	
					case '1iv':
						_gl.uniform1iv( location, value );
						break;
	
					case '3iv':
						_gl.uniform3iv( location, value );
						break;
	
					case '1fv':
						_gl.uniform1fv( location, value );
						break;
	
					case '2fv':
						_gl.uniform2fv( location, value );
						break;
	
					case '3fv':
						_gl.uniform3fv( location, value );
						break;
	
					case '4fv':
						_gl.uniform4fv( location, value );
						break;
	
					case 'Matrix3fv':
						_gl.uniformMatrix3fv( location, false, value );
						break;
	
					case 'Matrix4fv':
						_gl.uniformMatrix4fv( location, false, value );
						break;
	
					//
	
					case 'i':
	
						// single integer
						_gl.uniform1i( location, value );
	
						break;
	
					case 'f':
	
						// single float
						_gl.uniform1f( location, value );
	
						break;
	
					case 'v2':
	
						// single THREE.Vector2
						_gl.uniform2f( location, value.x, value.y );
	
						break;
	
					case 'v3':
	
						// single THREE.Vector3
						_gl.uniform3f( location, value.x, value.y, value.z );
	
						break;
	
					case 'v4':
	
						// single THREE.Vector4
						_gl.uniform4f( location, value.x, value.y, value.z, value.w );
	
						break;
	
					case 'c':
	
						// single THREE.Color
						_gl.uniform3f( location, value.r, value.g, value.b );
	
						break;
	
					case 'iv1':
	
						// flat array of integers (JS or typed array)
						_gl.uniform1iv( location, value );
	
						break;
	
					case 'iv':
	
						// flat array of integers with 3 x N size (JS or typed array)
						_gl.uniform3iv( location, value );
	
						break;
	
					case 'fv1':
	
						// flat array of floats (JS or typed array)
						_gl.uniform1fv( location, value );
	
						break;
	
					case 'fv':
	
						// flat array of floats with 3 x N size (JS or typed array)
						_gl.uniform3fv( location, value );
	
						break;
	
					case 'v2v':
	
						// array of THREE.Vector2
	
						if ( uniform._array === undefined ) {
	
							uniform._array = new Float32Array( 2 * value.length );
	
						}
	
						for ( var i = 0, i2 = 0, il = value.length; i < il; i ++, i2 += 2 ) {
	
							uniform._array[ i2 + 0 ] = value[ i ].x;
							uniform._array[ i2 + 1 ] = value[ i ].y;
	
						}
	
						_gl.uniform2fv( location, uniform._array );
	
						break;
	
					case 'v3v':
	
						// array of THREE.Vector3
	
						if ( uniform._array === undefined ) {
	
							uniform._array = new Float32Array( 3 * value.length );
	
						}
	
						for ( var i = 0, i3 = 0, il = value.length; i < il; i ++, i3 += 3 ) {
	
							uniform._array[ i3 + 0 ] = value[ i ].x;
							uniform._array[ i3 + 1 ] = value[ i ].y;
							uniform._array[ i3 + 2 ] = value[ i ].z;
	
						}
	
						_gl.uniform3fv( location, uniform._array );
	
						break;
	
					case 'v4v':
	
						// array of THREE.Vector4
	
						if ( uniform._array === undefined ) {
	
							uniform._array = new Float32Array( 4 * value.length );
	
						}
	
						for ( var i = 0, i4 = 0, il = value.length; i < il; i ++, i4 += 4 ) {
	
							uniform._array[ i4 + 0 ] = value[ i ].x;
							uniform._array[ i4 + 1 ] = value[ i ].y;
							uniform._array[ i4 + 2 ] = value[ i ].z;
							uniform._array[ i4 + 3 ] = value[ i ].w;
	
						}
	
						_gl.uniform4fv( location, uniform._array );
	
						break;
	
					case 'm3':
	
						// single THREE.Matrix3
						_gl.uniformMatrix3fv( location, false, value.elements );
	
						break;
	
					case 'm3v':
	
						// array of THREE.Matrix3
	
						if ( uniform._array === undefined ) {
	
							uniform._array = new Float32Array( 9 * value.length );
	
						}
	
						for ( var i = 0, il = value.length; i < il; i ++ ) {
	
							value[ i ].flattenToArrayOffset( uniform._array, i * 9 );
	
						}
	
						_gl.uniformMatrix3fv( location, false, uniform._array );
	
						break;
	
					case 'm4':
	
						// single THREE.Matrix4
						_gl.uniformMatrix4fv( location, false, value.elements );
	
						break;
	
					case 'm4v':
	
						// array of THREE.Matrix4
	
						if ( uniform._array === undefined ) {
	
							uniform._array = new Float32Array( 16 * value.length );
	
						}
	
						for ( var i = 0, il = value.length; i < il; i ++ ) {
	
							value[ i ].flattenToArrayOffset( uniform._array, i * 16 );
	
						}
	
						_gl.uniformMatrix4fv( location, false, uniform._array );
	
						break;
	
					case 't':
	
						// single THREE.Texture (2d or cube)
	
						texture = value;
						textureUnit = getTextureUnit();
	
						_gl.uniform1i( location, textureUnit );
	
						if ( ! texture ) continue;
	
						if ( texture instanceof THREE.CubeTexture ||
							 ( Array.isArray( texture.image ) && texture.image.length === 6 ) ) {
	
							// CompressedTexture can have Array in image :/
	
							setCubeTexture( texture, textureUnit );
	
						} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {
	
							setCubeTextureDynamic( texture.texture, textureUnit );
	
						} else if ( texture instanceof THREE.WebGLRenderTarget ) {
	
							_this.setTexture( texture.texture, textureUnit );
	
						} else {
	
							_this.setTexture( texture, textureUnit );
	
						}
	
						break;
	
					case 'tv':
	
						// array of THREE.Texture (2d or cube)
	
						if ( uniform._array === undefined ) {
	
							uniform._array = [];
	
						}
	
						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {
	
							uniform._array[ i ] = getTextureUnit();
	
						}
	
						_gl.uniform1iv( location, uniform._array );
	
						for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {
	
							texture = uniform.value[ i ];
							textureUnit = uniform._array[ i ];
	
							if ( ! texture ) continue;
	
							if ( texture instanceof THREE.CubeTexture ||
								 ( texture.image instanceof Array && texture.image.length === 6 ) ) {
	
								// CompressedTexture can have Array in image :/
	
								setCubeTexture( texture, textureUnit );
	
							} else if ( texture instanceof THREE.WebGLRenderTarget ) {
	
								_this.setTexture( texture.texture, textureUnit );
	
							} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {
	
								setCubeTextureDynamic( texture.texture, textureUnit );
	
							} else {
	
								_this.setTexture( texture, textureUnit );
	
							}
	
						}
	
						break;
	
					default:
	
						console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );
	
				}
	
			}
	
		}
	
		function setColorLinear( array, offset, color, intensity ) {
	
			array[ offset + 0 ] = color.r * intensity;
			array[ offset + 1 ] = color.g * intensity;
			array[ offset + 2 ] = color.b * intensity;
	
		}
	
		function setupLights ( lights, camera ) {
	
			var l, ll, light,
			r = 0, g = 0, b = 0,
			color, skyColor, groundColor,
			intensity,
			distance,
	
			zlights = _lights,
	
			viewMatrix = camera.matrixWorldInverse,
	
			dirColors = zlights.directional.colors,
			dirPositions = zlights.directional.positions,
	
			pointColors = zlights.point.colors,
			pointPositions = zlights.point.positions,
			pointDistances = zlights.point.distances,
			pointDecays = zlights.point.decays,
	
			spotColors = zlights.spot.colors,
			spotPositions = zlights.spot.positions,
			spotDistances = zlights.spot.distances,
			spotDirections = zlights.spot.directions,
			spotAnglesCos = zlights.spot.anglesCos,
			spotExponents = zlights.spot.exponents,
			spotDecays = zlights.spot.decays,
	
			hemiSkyColors = zlights.hemi.skyColors,
			hemiGroundColors = zlights.hemi.groundColors,
			hemiPositions = zlights.hemi.positions,
	
			dirLength = 0,
			pointLength = 0,
			spotLength = 0,
			hemiLength = 0,
	
			dirCount = 0,
			pointCount = 0,
			spotCount = 0,
			hemiCount = 0,
	
			dirOffset = 0,
			pointOffset = 0,
			spotOffset = 0,
			hemiOffset = 0;
	
			for ( l = 0, ll = lights.length; l < ll; l ++ ) {
	
				light = lights[ l ];
	
				color = light.color;
				intensity = light.intensity;
				distance = light.distance;
	
				if ( light instanceof THREE.AmbientLight ) {
	
					if ( ! light.visible ) continue;
	
					r += color.r;
					g += color.g;
					b += color.b;
	
				} else if ( light instanceof THREE.DirectionalLight ) {
	
					dirCount += 1;
	
					if ( ! light.visible ) continue;
	
					_direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					_direction.sub( _vector3 );
					_direction.transformDirection( viewMatrix );
	
					dirOffset = dirLength * 3;
	
					dirPositions[ dirOffset + 0 ] = _direction.x;
					dirPositions[ dirOffset + 1 ] = _direction.y;
					dirPositions[ dirOffset + 2 ] = _direction.z;
	
					setColorLinear( dirColors, dirOffset, color, intensity );
	
					dirLength += 1;
	
				} else if ( light instanceof THREE.PointLight ) {
	
					pointCount += 1;
	
					if ( ! light.visible ) continue;
	
					pointOffset = pointLength * 3;
	
					setColorLinear( pointColors, pointOffset, color, intensity );
	
					_vector3.setFromMatrixPosition( light.matrixWorld );
					_vector3.applyMatrix4( viewMatrix );
	
					pointPositions[ pointOffset + 0 ] = _vector3.x;
					pointPositions[ pointOffset + 1 ] = _vector3.y;
					pointPositions[ pointOffset + 2 ] = _vector3.z;
	
					// distance is 0 if decay is 0, because there is no attenuation at all.
					pointDistances[ pointLength ] = distance;
					pointDecays[ pointLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;
	
					pointLength += 1;
	
				} else if ( light instanceof THREE.SpotLight ) {
	
					spotCount += 1;
	
					if ( ! light.visible ) continue;
	
					spotOffset = spotLength * 3;
	
					setColorLinear( spotColors, spotOffset, color, intensity );
	
					_direction.setFromMatrixPosition( light.matrixWorld );
					_vector3.copy( _direction ).applyMatrix4( viewMatrix );
	
					spotPositions[ spotOffset + 0 ] = _vector3.x;
					spotPositions[ spotOffset + 1 ] = _vector3.y;
					spotPositions[ spotOffset + 2 ] = _vector3.z;
	
					spotDistances[ spotLength ] = distance;
	
					_vector3.setFromMatrixPosition( light.target.matrixWorld );
					_direction.sub( _vector3 );
					_direction.transformDirection( viewMatrix );
	
					spotDirections[ spotOffset + 0 ] = _direction.x;
					spotDirections[ spotOffset + 1 ] = _direction.y;
					spotDirections[ spotOffset + 2 ] = _direction.z;
	
					spotAnglesCos[ spotLength ] = Math.cos( light.angle );
					spotExponents[ spotLength ] = light.exponent;
					spotDecays[ spotLength ] = ( light.distance === 0 ) ? 0.0 : light.decay;
	
					spotLength += 1;
	
				} else if ( light instanceof THREE.HemisphereLight ) {
	
					hemiCount += 1;
	
					if ( ! light.visible ) continue;
	
					_direction.setFromMatrixPosition( light.matrixWorld );
					_direction.transformDirection( viewMatrix );
	
					hemiOffset = hemiLength * 3;
	
					hemiPositions[ hemiOffset + 0 ] = _direction.x;
					hemiPositions[ hemiOffset + 1 ] = _direction.y;
					hemiPositions[ hemiOffset + 2 ] = _direction.z;
	
					skyColor = light.color;
					groundColor = light.groundColor;
	
					setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
					setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );
	
					hemiLength += 1;
	
				}
	
			}
	
			// null eventual remains from removed lights
			// (this is to avoid if in shader)
	
			for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
			for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
			for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
			for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
			for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;
	
			zlights.directional.length = dirLength;
			zlights.point.length = pointLength;
			zlights.spot.length = spotLength;
			zlights.hemi.length = hemiLength;
	
			zlights.ambient[ 0 ] = r;
			zlights.ambient[ 1 ] = g;
			zlights.ambient[ 2 ] = b;
	
		}
	
		// GL state setting
	
		this.setFaceCulling = function ( cullFace, frontFaceDirection ) {
	
			if ( cullFace === THREE.CullFaceNone ) {
	
				state.disable( _gl.CULL_FACE );
	
			} else {
	
				if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {
	
					_gl.frontFace( _gl.CW );
	
				} else {
	
					_gl.frontFace( _gl.CCW );
	
				}
	
				if ( cullFace === THREE.CullFaceBack ) {
	
					_gl.cullFace( _gl.BACK );
	
				} else if ( cullFace === THREE.CullFaceFront ) {
	
					_gl.cullFace( _gl.FRONT );
	
				} else {
	
					_gl.cullFace( _gl.FRONT_AND_BACK );
	
				}
	
				state.enable( _gl.CULL_FACE );
	
			}
	
		};
	
		// Textures
	
		function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {
	
			var extension;
	
			if ( isImagePowerOfTwo ) {
	
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );
	
				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );
	
			} else {
	
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );
	
				if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) {
	
					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.', texture );
	
				}
	
				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );
	
				if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) {
	
					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.', texture );
	
				}
	
			}
	
			extension = extensions.get( 'EXT_texture_filter_anisotropic' );
	
			if ( extension ) {
	
				if ( texture.type === THREE.FloatType && extensions.get( 'OES_texture_float_linear' ) === null ) return;
				if ( texture.type === THREE.HalfFloatType && extensions.get( 'OES_texture_half_float_linear' ) === null ) return;
	
				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {
	
					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;
	
				}
	
			}
	
		}
	
		function uploadTexture( textureProperties, texture, slot ) {
	
			if ( textureProperties.__webglInit === undefined ) {
	
				textureProperties.__webglInit = true;
	
				texture.addEventListener( 'dispose', onTextureDispose );
	
				textureProperties.__webglTexture = _gl.createTexture();
	
				_infoMemory.textures ++;
	
			}
	
			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
			_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
			_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
			_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
	
			texture.image = clampToMaxSize( texture.image, capabilities.maxTextureSize );
	
			if ( textureNeedsPowerOfTwo( texture ) && isPowerOfTwo( texture.image ) === false ) {
	
				texture.image = makePowerOfTwo( texture.image );
	
			}
	
			var image = texture.image,
			isImagePowerOfTwo = isPowerOfTwo( image ),
			glFormat = paramThreeToGL( texture.format ),
			glType = paramThreeToGL( texture.type );
	
			setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );
	
			var mipmap, mipmaps = texture.mipmaps;
	
			if ( texture instanceof THREE.DataTexture ) {
	
				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels
	
				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {
	
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
					}
	
					texture.generateMipmaps = false;
	
				} else {
	
					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );
	
				}
	
			} else if ( texture instanceof THREE.CompressedTexture ) {
	
				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
					mipmap = mipmaps[ i ];
	
					if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {
	
						if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
							state.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
						} else {
	
							console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()" );
	
						}
	
					} else {
	
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
					}
	
				}
	
			} else {
	
				// regular Texture (image, video, canvas)
	
				// use manually created mipmaps if available
				// if there are no manual mipmaps
				// set 0 level mipmap and then use GL to generate other mipmap levels
	
				if ( mipmaps.length > 0 && isImagePowerOfTwo ) {
	
					for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {
	
						mipmap = mipmaps[ i ];
						state.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );
	
					}
	
					texture.generateMipmaps = false;
	
				} else {
	
					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );
	
				}
	
			}
	
			if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
	
			textureProperties.__version = texture.version;
	
			if ( texture.onUpdate ) texture.onUpdate( texture );
	
		}
	
		this.setTexture = function ( texture, slot ) {
	
			var textureProperties = properties.get( texture );
	
			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
				var image = texture.image;
	
				if ( image === undefined ) {
	
					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is undefined', texture );
					return;
	
				}
	
				if ( image.complete === false ) {
	
					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete', texture );
					return;
	
				}
	
				uploadTexture( textureProperties, texture, slot );
	
				return;
	
			}
	
			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
	
		};
	
		function clampToMaxSize ( image, maxSize ) {
	
			if ( image.width > maxSize || image.height > maxSize ) {
	
				// Warning: Scaling through the canvas will only work with images that use
				// premultiplied alpha.
	
				var scale = maxSize / Math.max( image.width, image.height );
	
				var canvas = document.createElement( 'canvas' );
				canvas.width = Math.floor( image.width * scale );
				canvas.height = Math.floor( image.height * scale );
	
				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );
	
				console.warn( 'THREE.WebGLRenderer: image is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
				return canvas;
	
			}
	
			return image;
	
		}
	
		function isPowerOfTwo( image ) {
	
			return THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height );
	
		}
	
		function textureNeedsPowerOfTwo( texture ) {
	
			if ( texture.wrapS !== THREE.ClampToEdgeWrapping || texture.wrapT !== THREE.ClampToEdgeWrapping ) return true;
			if ( texture.minFilter !== THREE.NearestFilter && texture.minFilter !== THREE.LinearFilter ) return true;
	
			return false;
	
		}
	
		function makePowerOfTwo( image ) {
	
			if ( image instanceof HTMLImageElement || image instanceof HTMLCanvasElement ) {
	
				var canvas = document.createElement( 'canvas' );
				canvas.width = THREE.Math.nearestPowerOfTwo( image.width );
				canvas.height = THREE.Math.nearestPowerOfTwo( image.height );
	
				var context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, canvas.width, canvas.height );
	
				console.warn( 'THREE.WebGLRenderer: image is not power of two (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height, image );
	
				return canvas;
	
			}
	
			return image;
	
		}
	
		function setCubeTexture ( texture, slot ) {
	
			var textureProperties = properties.get( texture );
	
			if ( texture.image.length === 6 ) {
	
				if ( texture.version > 0 && textureProperties.__version !== texture.version ) {
	
					if ( ! textureProperties.__image__webglTextureCube ) {
	
						texture.addEventListener( 'dispose', onTextureDispose );
	
						textureProperties.__image__webglTextureCube = _gl.createTexture();
	
						_infoMemory.textures ++;
	
					}
	
					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
					_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
	
					var isCompressed = texture instanceof THREE.CompressedTexture;
					var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;
	
					var cubeImage = [];
	
					for ( var i = 0; i < 6; i ++ ) {
	
						if ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {
	
							cubeImage[ i ] = clampToMaxSize( texture.image[ i ], capabilities.maxCubemapSize );
	
						} else {
	
							cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];
	
						}
	
					}
	
					var image = cubeImage[ 0 ],
					isImagePowerOfTwo = isPowerOfTwo( image ),
					glFormat = paramThreeToGL( texture.format ),
					glType = paramThreeToGL( texture.type );
	
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );
	
					for ( var i = 0; i < 6; i ++ ) {
	
						if ( ! isCompressed ) {
	
							if ( isDataTexture ) {
	
								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );
	
							} else {
	
								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );
	
							}
	
						} else {
	
							var mipmap, mipmaps = cubeImage[ i ].mipmaps;
	
							for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {
	
								mipmap = mipmaps[ j ];
	
								if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {
	
									if ( state.getCompressedTextureFormats().indexOf( glFormat ) > - 1 ) {
	
										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );
	
									} else {
	
										console.warn( "THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setCubeTexture()" );
	
									}
	
								} else {
	
									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );
	
								}
	
							}
	
						}
	
					}
	
					if ( texture.generateMipmaps && isImagePowerOfTwo ) {
	
						_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
	
					}
	
					textureProperties.__version = texture.version;
	
					if ( texture.onUpdate ) texture.onUpdate( texture );
	
				} else {
	
					state.activeTexture( _gl.TEXTURE0 + slot );
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__image__webglTextureCube );
	
				}
	
			}
	
		}
	
		function setCubeTextureDynamic ( texture, slot ) {
	
			state.activeTexture( _gl.TEXTURE0 + slot );
			state.bindTexture( _gl.TEXTURE_CUBE_MAP, properties.get( texture ).__webglTexture );
	
		}
	
		// Render targets
	
		function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {
	
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, properties.get( renderTarget.texture ).__webglTexture, 0 );
	
		}
	
		function setupRenderBuffer ( renderbuffer, renderTarget ) {
	
			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );
	
			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
	
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
			/* For some reason this is not working. Defaulting to RGBA4.
			} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
			*/
	
			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
	
			} else {
	
				_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );
	
			}
	
		}
	
		this.setRenderTarget = function ( renderTarget ) {
	
			var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );
	
			if ( renderTarget && properties.get( renderTarget ).__webglFramebuffer === undefined ) {
	
				var renderTargetProperties = properties.get( renderTarget );
				var textureProperties = properties.get( renderTarget.texture );
	
				if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
				if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;
	
				renderTarget.addEventListener( 'dispose', onRenderTargetDispose );
	
				textureProperties.__webglTexture = _gl.createTexture();
	
				_infoMemory.textures ++;
	
				// Setup texture, create render and frame buffers
	
				var isTargetPowerOfTwo = isPowerOfTwo( renderTarget ),
					glFormat = paramThreeToGL( renderTarget.texture.format ),
					glType = paramThreeToGL( renderTarget.texture.type );
	
				if ( isCube ) {
	
					renderTargetProperties.__webglFramebuffer = [];
					renderTargetProperties.__webglRenderbuffer = [];
	
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
	
					setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget.texture, isTargetPowerOfTwo );
	
					for ( var i = 0; i < 6; i ++ ) {
	
						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();
						renderTargetProperties.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();
						state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
	
						setupFrameBuffer( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
						setupRenderBuffer( renderTargetProperties.__webglRenderbuffer[ i ], renderTarget );
	
					}
	
					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
	
				} else {
	
					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
	
					if ( renderTarget.shareDepthFrom ) {
	
						renderTargetProperties.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;
	
					} else {
	
						renderTargetProperties.__webglRenderbuffer = _gl.createRenderbuffer();
	
					}
	
					state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, renderTarget.texture, isTargetPowerOfTwo );
	
					state.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );
	
					setupFrameBuffer( renderTargetProperties.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );
	
					if ( renderTarget.shareDepthFrom ) {
	
						if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {
	
							_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );
	
						} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {
	
							_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTargetProperties.__webglRenderbuffer );
	
						}
	
					} else {
	
						setupRenderBuffer( renderTargetProperties.__webglRenderbuffer, renderTarget );
	
					}
	
					if ( renderTarget.texture.generateMipmaps && isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );
	
				}
	
				// Release everything
	
				if ( isCube ) {
	
					state.bindTexture( _gl.TEXTURE_CUBE_MAP, null );
	
				} else {
	
					state.bindTexture( _gl.TEXTURE_2D, null );
	
				}
	
				_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );
	
			}
	
			var framebuffer, width, height, vx, vy;
	
			if ( renderTarget ) {
	
				var renderTargetProperties = properties.get( renderTarget );
	
				if ( isCube ) {
	
					framebuffer = renderTargetProperties.__webglFramebuffer[ renderTarget.activeCubeFace ];
	
				} else {
	
					framebuffer = renderTargetProperties.__webglFramebuffer;
	
				}
	
				width = renderTarget.width;
				height = renderTarget.height;
	
				vx = 0;
				vy = 0;
	
			} else {
	
				framebuffer = null;
	
				width = _viewportWidth;
				height = _viewportHeight;
	
				vx = _viewportX;
				vy = _viewportY;
	
			}
	
			if ( framebuffer !== _currentFramebuffer ) {
	
				_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
				_gl.viewport( vx, vy, width, height );
	
				_currentFramebuffer = framebuffer;
	
			}
	
			if ( isCube ) {
	
				var textureProperties = properties.get( renderTarget.texture );
				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + renderTarget.activeCubeFace, textureProperties.__webglTexture, 0 );
	
			}
	
			_currentWidth = width;
			_currentHeight = height;
	
		};
	
		this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer ) {
	
			if ( renderTarget instanceof THREE.WebGLRenderTarget === false ) {
	
				console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
				return;
	
			}
	
			var framebuffer = properties.get( renderTarget ).__webglFramebuffer;
	
			if ( framebuffer ) {
	
				var restore = false;
	
				if ( framebuffer !== _currentFramebuffer ) {
	
					_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
	
					restore = true;
	
				}
	
				try {
	
					var texture = renderTarget.texture;
	
					if ( texture.format !== THREE.RGBAFormat
						&& paramThreeToGL( texture.format ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {
	
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
						return;
	
					}
	
					if ( texture.type !== THREE.UnsignedByteType
						&& paramThreeToGL( texture.type ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE )
						&& ! ( texture.type === THREE.FloatType && extensions.get( 'WEBGL_color_buffer_float' ) )
						&& ! ( texture.type === THREE.HalfFloatType && extensions.get( 'EXT_color_buffer_half_float' ) ) ) {
	
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
						return;
	
					}
	
					if ( _gl.checkFramebufferStatus( _gl.FRAMEBUFFER ) === _gl.FRAMEBUFFER_COMPLETE ) {
	
						_gl.readPixels( x, y, width, height, paramThreeToGL( texture.format ), paramThreeToGL( texture.type ), buffer );
	
					} else {
	
						console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.' );
	
					}
	
				} finally {
	
					if ( restore ) {
	
						_gl.bindFramebuffer( _gl.FRAMEBUFFER, _currentFramebuffer );
	
					}
	
				}
	
			}
	
		};
	
		function updateRenderTargetMipmap( renderTarget ) {
	
			var target = renderTarget instanceof THREE.WebGLRenderTargetCube ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
			var texture = properties.get( renderTarget.texture ).__webglTexture;
	
			state.bindTexture( target, texture );
			_gl.generateMipmap( target );
			state.bindTexture( target, null );
	
		}
	
		// Fallback filters for non-power-of-2 textures
	
		function filterFallback ( f ) {
	
			if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {
	
				return _gl.NEAREST;
	
			}
	
			return _gl.LINEAR;
	
		}
	
		// Map three.js constants to WebGL constants
	
		function paramThreeToGL ( p ) {
	
			var extension;
	
			if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
			if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
			if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;
	
			if ( p === THREE.NearestFilter ) return _gl.NEAREST;
			if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
			if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;
	
			if ( p === THREE.LinearFilter ) return _gl.LINEAR;
			if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
			if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;
	
			if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
			if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
			if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;
	
			if ( p === THREE.ByteType ) return _gl.BYTE;
			if ( p === THREE.ShortType ) return _gl.SHORT;
			if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
			if ( p === THREE.IntType ) return _gl.INT;
			if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
			if ( p === THREE.FloatType ) return _gl.FLOAT;
	
			extension = extensions.get( 'OES_texture_half_float' );
	
			if ( extension !== null ) {
	
				if ( p === THREE.HalfFloatType ) return extension.HALF_FLOAT_OES;
	
			}
	
			if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
			if ( p === THREE.RGBFormat ) return _gl.RGB;
			if ( p === THREE.RGBAFormat ) return _gl.RGBA;
			if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
			if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;
	
			if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
			if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
			if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;
	
			if ( p === THREE.ZeroFactor ) return _gl.ZERO;
			if ( p === THREE.OneFactor ) return _gl.ONE;
			if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
			if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
			if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
			if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
			if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
			if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;
	
			if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
			if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
			if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;
	
			extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
			if ( extension !== null ) {
	
				if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
				if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
				if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
	
			}
	
			extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
			if ( extension !== null ) {
	
				if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
				if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
	
			}
	
			extension = extensions.get( 'EXT_blend_minmax' );
	
			if ( extension !== null ) {
	
				if ( p === THREE.MinEquation ) return extension.MIN_EXT;
				if ( p === THREE.MaxEquation ) return extension.MAX_EXT;
	
			}
	
			return 0;
	
		}
	
		// DEPRECATED
	
		this.supportsFloatTextures = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( \'OES_texture_float\' ).' );
			return extensions.get( 'OES_texture_float' );
	
		};
	
		this.supportsHalfFloatTextures = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( \'OES_texture_half_float\' ).' );
			return extensions.get( 'OES_texture_half_float' );
	
		};
	
		this.supportsStandardDerivatives = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( \'OES_standard_derivatives\' ).' );
			return extensions.get( 'OES_standard_derivatives' );
	
		};
	
		this.supportsCompressedTextureS3TC = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( \'WEBGL_compressed_texture_s3tc\' ).' );
			return extensions.get( 'WEBGL_compressed_texture_s3tc' );
	
		};
	
		this.supportsCompressedTexturePVRTC = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( \'WEBGL_compressed_texture_pvrtc\' ).' );
			return extensions.get( 'WEBGL_compressed_texture_pvrtc' );
	
		};
	
		this.supportsBlendMinMax = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( \'EXT_blend_minmax\' ).' );
			return extensions.get( 'EXT_blend_minmax' );
	
		};
	
		this.supportsVertexTextures = function () {
	
			return capabilities.vertexTextures;
	
		};
	
		this.supportsInstancedArrays = function () {
	
			console.warn( 'THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( \'ANGLE_instanced_arrays\' ).' );
			return extensions.get( 'ANGLE_instanced_arrays' );
	
		};
	
		//
	
		this.initMaterial = function () {
	
			console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );
	
		};
	
		this.addPrePlugin = function () {
	
			console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );
	
		};
	
		this.addPostPlugin = function () {
	
			console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );
	
		};
	
		this.updateShadowMap = function () {
	
			console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );
	
		};
	
		Object.defineProperties( this, {
			shadowMapEnabled: {
				get: function () {
	
					return shadowMap.enabled;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.' );
					shadowMap.enabled = value;
	
				}
			},
			shadowMapType: {
				get: function () {
	
					return shadowMap.type;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.' );
					shadowMap.type = value;
	
				}
			},
			shadowMapCullFace: {
				get: function () {
	
					return shadowMap.cullFace;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapCullFace is now .shadowMap.cullFace.' );
					shadowMap.cullFace = value;
	
				}
			},
			shadowMapDebug: {
				get: function () {
	
					return shadowMap.debug;
	
				},
				set: function ( value ) {
	
					console.warn( 'THREE.WebGLRenderer: .shadowMapDebug is now .shadowMap.debug.' );
					shadowMap.debug = value;
	
				}
			}
		} );
	
	};
	
	// File:src/renderers/WebGLRenderTarget.js
	
	/**
	 * @author szimek / https://github.com/szimek/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.WebGLRenderTarget = function ( width, height, options ) {
	
		this.uuid = THREE.Math.generateUUID();
	
		this.width = width;
		this.height = height;
	
		options = options || {};
	
		if ( options.minFilter === undefined ) options.minFilter = THREE.LinearFilter;
	
		this.texture = new THREE.Texture( undefined, undefined, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy );
	
		this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
		this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;
	
		this.shareDepthFrom = options.shareDepthFrom !== undefined ? options.shareDepthFrom : null;
	
	};
	
	THREE.WebGLRenderTarget.prototype = {
	
		constructor: THREE.WebGLRenderTarget,
	
		get wrapS() {
	
			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
	
			return this.texture.wrapS;
	
		},
	
		set wrapS( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.' );
	
			this.texture.wrapS = value;
	
		},
	
		get wrapT() {
	
			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
	
			return this.texture.wrapT;
	
		},
	
		set wrapT( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.' );
	
			this.texture.wrapT = value;
	
		},
	
		get magFilter() {
	
			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
	
			return this.texture.magFilter;
	
		},
	
		set magFilter( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.' );
	
			this.texture.magFilter = value;
	
		},
	
		get minFilter() {
	
			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
	
			return this.texture.minFilter;
	
		},
	
		set minFilter( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.' );
	
			this.texture.minFilter = value;
	
		},
	
		get anisotropy() {
	
			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
	
			return this.texture.anisotropy;
	
		},
	
		set anisotropy( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.' );
	
			this.texture.anisotropy = value;
	
		},
	
		get offset() {
	
			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
	
			return this.texture.offset;
	
		},
	
		set offset( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .offset is now .texture.offset.' );
	
			this.texture.offset = value;
	
		},
	
		get repeat() {
	
			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
	
			return this.texture.repeat;
	
		},
	
		set repeat( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .repeat is now .texture.repeat.' );
	
			this.texture.repeat = value;
	
		},
	
		get format() {
	
			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
	
			return this.texture.format;
	
		},
	
		set format( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .format is now .texture.format.' );
	
			this.texture.format = value;
	
		},
	
		get type() {
	
			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
	
			return this.texture.type;
	
		},
	
		set type( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .type is now .texture.type.' );
	
			this.texture.type = value;
	
		},
	
		get generateMipmaps() {
	
			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
	
			return this.texture.generateMipmaps;
	
		},
	
		set generateMipmaps( value ) {
	
			console.warn( 'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.' );
	
			this.texture.generateMipmaps = value;
	
		},
	
		//
	
		setSize: function ( width, height ) {
	
			if ( this.width !== width || this.height !== height ) {
	
				this.width = width;
				this.height = height;
	
				this.dispose();
	
			}
	
		},
	
		clone: function () {
	
			return new this.constructor().copy( this );
	
		},
	
		copy: function ( source ) {
	
			this.width = source.width;
			this.height = source.height;
	
			this.texture = source.texture.clone();
	
			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;
	
			this.shareDepthFrom = source.shareDepthFrom;
	
			return this;
	
		},
	
		dispose: function () {
	
			this.dispatchEvent( { type: 'dispose' } );
	
		}
	
	};
	
	THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );
	
	// File:src/renderers/WebGLRenderTargetCube.js
	
	/**
	 * @author alteredq / http://alteredqualia.com
	 */
	
	THREE.WebGLRenderTargetCube = function ( width, height, options ) {
	
		THREE.WebGLRenderTarget.call( this, width, height, options );
	
		this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5
	
	};
	
	THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );
	THREE.WebGLRenderTargetCube.prototype.constructor = THREE.WebGLRenderTargetCube;
	
	// File:src/renderers/webgl/WebGLBufferRenderer.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLBufferRenderer = function ( _gl, extensions, _infoRender ) {
	
		var mode;
	
		function setMode( value ) {
	
			mode = value;
	
		}
	
		function render( start, count ) {
	
			_gl.drawArrays( mode, start, count );
	
			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;
	
		}
	
		function renderInstances( geometry ) {
	
			var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
			if ( extension === null ) {
	
				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;
	
			}
	
			var position = geometry.attributes.position;
	
			if ( position instanceof THREE.InterleavedBufferAttribute ) {
	
				extension.drawArraysInstancedANGLE( mode, 0, position.data.count, geometry.maxInstancedCount );
	
			} else {
	
				extension.drawArraysInstancedANGLE( mode, 0, position.count, geometry.maxInstancedCount );
	
			}
	
		}
	
		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;
	
	};
	
	// File:src/renderers/webgl/WebGLIndexedBufferRenderer.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLIndexedBufferRenderer = function ( _gl, extensions, _infoRender ) {
	
		var mode;
	
		function setMode( value ) {
	
			mode = value;
	
		}
	
		var type, size;
	
		function setIndex( index ) {
	
			if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {
	
				type = _gl.UNSIGNED_INT;
				size = 4;
	
			} else {
	
				type = _gl.UNSIGNED_SHORT;
				size = 2;
	
			}
	
		}
	
		function render( start, count ) {
	
			_gl.drawElements( mode, count, type, start * size );
	
			_infoRender.calls ++;
			_infoRender.vertices += count;
			if ( mode === _gl.TRIANGLES ) _infoRender.faces += count / 3;
	
		}
	
		function renderInstances( geometry ) {
	
			var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
			if ( extension === null ) {
	
				console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
				return;
	
			}
	
			var index = geometry.index;
	
			extension.drawElementsInstancedANGLE( mode, index.array.length, type, 0, geometry.maxInstancedCount );
	
		}
	
		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;
	
	};
	
	// File:src/renderers/webgl/WebGLExtensions.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLExtensions = function ( gl ) {
	
		var extensions = {};
	
		this.get = function ( name ) {
	
			if ( extensions[ name ] !== undefined ) {
	
				return extensions[ name ];
	
			}
	
			var extension;
	
			switch ( name ) {
	
				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;
	
				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;
	
				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;
	
				default:
					extension = gl.getExtension( name );
	
			}
	
			if ( extension === null ) {
	
				console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );
	
			}
	
			extensions[ name ] = extension;
	
			return extension;
	
		};
	
	};
	
	// File:src/renderers/webgl/WebGLCapabilities.js
	
	THREE.WebGLCapabilities = function ( gl, extensions, parameters ) {
	
		function getMaxPrecision( precision ) {
	
			if ( precision === 'highp' ) {
	
				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {
	
					return 'highp';
	
				}
	
				precision = 'mediump';
	
			}
	
			if ( precision === 'mediump' ) {
	
				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
				     gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {
	
					return 'mediump';
	
				}
	
			}
	
			return 'lowp';
	
		}
	
		this.getMaxPrecision = getMaxPrecision;
	
		this.precision = parameters.precision !== undefined ? parameters.precision : 'highp',
		this.logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false;
	
		this.maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		this.maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		this.maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		this.maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );
	
		this.maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		this.maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		this.maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		this.maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );
	
		this.vertexTextures = this.maxVertexTextures > 0;
		this.floatFragmentTextures = !! extensions.get( 'OES_texture_float' );
		this.floatVertexTextures = this.vertexTextures && this.floatFragmentTextures;
	
		var _maxPrecision = getMaxPrecision( this.precision );
	
		if ( _maxPrecision !== this.precision ) {
	
			console.warn( 'THREE.WebGLRenderer:', this.precision, 'not supported, using', _maxPrecision, 'instead.' );
			this.precision = _maxPrecision;
	
		}
	
		if ( this.logarithmicDepthBuffer ) {
	
			this.logarithmicDepthBuffer = !! extensions.get( 'EXT_frag_depth' );
	
		}
	
	};
	
	// File:src/renderers/webgl/WebGLGeometries.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLGeometries = function ( gl, properties, info ) {
	
		var geometries = {};
	
		function get( object ) {
	
			var geometry = object.geometry;
	
			if ( geometries[ geometry.id ] !== undefined ) {
	
				return geometries[ geometry.id ];
	
			}
	
			geometry.addEventListener( 'dispose', onGeometryDispose );
	
			var buffergeometry;
	
			if ( geometry instanceof THREE.BufferGeometry ) {
	
				buffergeometry = geometry;
	
			} else if ( geometry instanceof THREE.Geometry ) {
	
				if ( geometry._bufferGeometry === undefined ) {
	
					geometry._bufferGeometry = new THREE.BufferGeometry().setFromObject( object );
	
				}
	
				buffergeometry = geometry._bufferGeometry;
	
			}
	
			geometries[ geometry.id ] = buffergeometry;
	
			info.memory.geometries ++;
	
			return buffergeometry;
	
		}
	
		function onGeometryDispose( event ) {
	
			var geometry = event.target;
			var buffergeometry = geometries[ geometry.id ];
	
			deleteAttributes( buffergeometry.attributes );
	
			geometry.removeEventListener( 'dispose', onGeometryDispose );
	
			delete geometries[ geometry.id ];
	
			var property = properties.get( geometry );
			if ( property.wireframe ) deleteAttribute( property.wireframe );
	
			info.memory.geometries --;
	
		}
	
		function getAttributeBuffer( attribute ) {
	
			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {
	
				return properties.get( attribute.data ).__webglBuffer;
	
			}
	
			return properties.get( attribute ).__webglBuffer;
	
		}
	
		function deleteAttribute( attribute ) {
	
			var buffer = getAttributeBuffer( attribute );
	
			if ( buffer !== undefined ) {
	
				gl.deleteBuffer( buffer );
				removeAttributeBuffer( attribute );
	
			}
	
		}
	
		function deleteAttributes( attributes ) {
	
			for ( var name in attributes ) {
	
				deleteAttribute( attributes[ name ] );
	
			}
	
		}
	
		function removeAttributeBuffer( attribute ) {
	
			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {
	
				properties.delete( attribute.data );
	
			} else {
	
				properties.delete( attribute );
	
			}
	
		}
	
		this.get = get;
	
	};
	
	// File:src/renderers/webgl/WebGLObjects.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLObjects = function ( gl, properties, info ) {
	
		var geometries = new THREE.WebGLGeometries( gl, properties, info );
	
		//
	
		function update( object ) {
	
			// TODO: Avoid updating twice (when using shadowMap). Maybe add frame counter.
	
			var geometry = geometries.get( object );
	
			if ( object.geometry instanceof THREE.Geometry ) {
	
				geometry.updateFromObject( object );
	
			}
	
			var index = geometry.index;
			var attributes = geometry.attributes;
	
			if ( index !== null ) {
	
				updateAttribute( index, gl.ELEMENT_ARRAY_BUFFER );
	
			}
	
			for ( var name in attributes ) {
	
				updateAttribute( attributes[ name ], gl.ARRAY_BUFFER );
	
			}
	
			// morph targets
	
			var morphAttributes = geometry.morphAttributes;
	
			for ( var name in morphAttributes ) {
	
				var array = morphAttributes[ name ];
	
				for ( var i = 0, l = array.length; i < l; i ++ ) {
	
					updateAttribute( array[ i ], gl.ARRAY_BUFFER );
	
				}
	
			}
	
			return geometry;
	
		}
	
		function updateAttribute( attribute, bufferType ) {
	
			var data = ( attribute instanceof THREE.InterleavedBufferAttribute ) ? attribute.data : attribute;
	
			var attributeProperties = properties.get( data );
	
			if ( attributeProperties.__webglBuffer === undefined ) {
	
				createBuffer( attributeProperties, data, bufferType );
	
			} else if ( attributeProperties.version !== data.version ) {
	
				updateBuffer( attributeProperties, data, bufferType );
	
			}
	
		}
	
		function createBuffer( attributeProperties, data, bufferType ) {
	
			attributeProperties.__webglBuffer = gl.createBuffer();
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );
	
			var usage = data.dynamic ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
	
			gl.bufferData( bufferType, data.array, usage );
	
			attributeProperties.version = data.version;
	
		}
	
		function updateBuffer( attributeProperties, data, bufferType ) {
	
			gl.bindBuffer( bufferType, attributeProperties.__webglBuffer );
	
			if ( data.dynamic === false || data.updateRange.count === - 1 ) {
	
				// Not using update ranges
	
				gl.bufferSubData( bufferType, 0, data.array );
	
			} else if ( data.updateRange.count === 0 ) {
	
				console.error( 'THREE.WebGLObjects.updateBuffer: dynamic THREE.BufferAttribute marked as needsUpdate but updateRange.count is 0, ensure you are using set methods or updating manually.' );
	
			} else {
	
				gl.bufferSubData( bufferType, data.updateRange.offset * data.array.BYTES_PER_ELEMENT,
								  data.array.subarray( data.updateRange.offset, data.updateRange.offset + data.updateRange.count ) );
	
				data.updateRange.count = 0; // reset range
	
			}
	
			attributeProperties.version = data.version;
	
		}
	
		function getAttributeBuffer( attribute ) {
	
			if ( attribute instanceof THREE.InterleavedBufferAttribute ) {
	
				return properties.get( attribute.data ).__webglBuffer;
	
			}
	
			return properties.get( attribute ).__webglBuffer;
	
		}
	
		function getWireframeAttribute( geometry ) {
	
			var property = properties.get( geometry );
	
			if ( property.wireframe !== undefined ) {
	
				return property.wireframe;
	
			}
	
			var indices = [];
	
			var index = geometry.index;
			var attributes = geometry.attributes;
			var position = attributes.position;
	
			// console.time( 'wireframe' );
	
			if ( index !== null ) {
	
				var edges = {};
				var array = index.array;
	
				for ( var i = 0, l = array.length; i < l; i += 3 ) {
	
					var a = array[ i + 0 ];
					var b = array[ i + 1 ];
					var c = array[ i + 2 ];
	
					if ( checkEdge( edges, a, b ) ) indices.push( a, b );
					if ( checkEdge( edges, b, c ) ) indices.push( b, c );
					if ( checkEdge( edges, c, a ) ) indices.push( c, a );
	
				}
	
			} else {
	
				var array = attributes.position.array;
	
				for ( var i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {
	
					var a = i + 0;
					var b = i + 1;
					var c = i + 2;
	
					indices.push( a, b, b, c, c, a );
	
				}
	
			}
	
			// console.timeEnd( 'wireframe' );
	
			var TypeArray = position.count > 65535 ? Uint32Array : Uint16Array;
			var attribute = new THREE.BufferAttribute( new TypeArray( indices ), 1 );
	
			updateAttribute( attribute, gl.ELEMENT_ARRAY_BUFFER );
	
			property.wireframe = attribute;
	
			return attribute;
	
		}
	
		function checkEdge( edges, a, b ) {
	
			if ( a > b ) {
	
				var tmp = a;
				a = b;
				b = tmp;
	
			}
	
			var list = edges[ a ];
	
			if ( list === undefined ) {
	
				edges[ a ] = [ b ];
				return true;
	
			} else if ( list.indexOf( b ) === -1 ) {
	
				list.push( b );
				return true;
	
			}
	
			return false;
	
		}
	
		this.getAttributeBuffer = getAttributeBuffer;
		this.getWireframeAttribute = getWireframeAttribute;
	
		this.update = update;
	
	};
	
	// File:src/renderers/webgl/WebGLProgram.js
	
	THREE.WebGLProgram = ( function () {
	
		var programIdCount = 0;
	
		function generateDefines( defines ) {
	
			var chunks = [];
	
			for ( var name in defines ) {
	
				var value = defines[ name ];
	
				if ( value === false ) continue;
	
				chunks.push( '#define ' + name + ' ' + value );
	
			}
	
			return chunks.join( '\n' );
	
		}
	
		function fetchUniformLocations( gl, program, identifiers ) {
	
			var uniforms = {};
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );
	
			for ( var i = 0; i < n; i ++ ) {
	
				var info = gl.getActiveUniform( program, i );
				var name = info.name;
				var location = gl.getUniformLocation( program, name );
	
				// console.log("THREE.WebGLProgram: ACTIVE UNIFORM:", name);
	
				var suffixPos = name.lastIndexOf( '[0]' );
				if ( suffixPos !== - 1 && suffixPos === name.length - 3 ) {
	
					uniforms[ name.substr( 0, suffixPos ) ] = location;
	
				}
	
				uniforms[ name ] = location;
	
			}
	
			return uniforms;
	
		}
	
		function fetchAttributeLocations( gl, program, identifiers ) {
	
			var attributes = {};
	
			var n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );
	
			for ( var i = 0; i < n; i ++ ) {
	
				var info = gl.getActiveAttrib( program, i );
				var name = info.name;
	
				// console.log("THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:", name, i );
	
				attributes[ name ] = gl.getAttribLocation( program, name );
	
			}
	
			return attributes;
	
		}
	
		function filterEmptyLine( string ) {
	
			return string !== '';
	
		}
	
		return function WebGLProgram( renderer, code, material, parameters ) {
	
			var gl = renderer.context;
	
			var defines = material.defines;
	
			var vertexShader = material.__webglShader.vertexShader;
			var fragmentShader = material.__webglShader.fragmentShader;
	
			var shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';
	
			if ( parameters.shadowMapType === THREE.PCFShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';
	
			} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {
	
				shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';
	
			}
	
			var envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
			var envMapModeDefine = 'ENVMAP_MODE_REFLECTION';
			var envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
	
			if ( parameters.envMap ) {
	
				switch ( material.envMap.mapping ) {
	
					case THREE.CubeReflectionMapping:
					case THREE.CubeRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
						break;
	
					case THREE.EquirectangularReflectionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_EQUIREC';
						break;
	
					case THREE.SphericalReflectionMapping:
						envMapTypeDefine = 'ENVMAP_TYPE_SPHERE';
						break;
	
				}
	
				switch ( material.envMap.mapping ) {
	
					case THREE.CubeRefractionMapping:
					case THREE.EquirectangularRefractionMapping:
						envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
						break;
	
				}
	
				switch ( material.combine ) {
	
					case THREE.MultiplyOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
						break;
	
					case THREE.MixOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
						break;
	
					case THREE.AddOperation:
						envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
						break;
	
				}
	
			}
	
			var gammaFactorDefine = ( renderer.gammaFactor > 0 ) ? renderer.gammaFactor : 1.0;
	
			// console.log( 'building new program ' );
	
			//
	
			var customDefines = generateDefines( defines );
	
			//
	
			var program = gl.createProgram();
	
			var prefixVertex, prefixFragment;
	
			if ( material instanceof THREE.RawShaderMaterial ) {
	
				prefixVertex = '';
				prefixFragment = '';
	
			} else {
	
				prefixVertex = [
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + material.__webglShader.name,
	
					customDefines,
	
					parameters.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
	
					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,
					'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,
					'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,
					'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,
	
					'#define MAX_SHADOWS ' + parameters.maxShadows,
	
					'#define MAX_BONES ' + parameters.maxBones,
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.displacementMap && parameters.supportsVertexTextures ? '#define USE_DISPLACEMENTMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.skinning ? '#define USE_SKINNING' : '',
					parameters.useVertexTexture ? '#define BONE_TEXTURE' : '',
	
					parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
					parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',
	
					parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
	
					'uniform mat4 modelMatrix;',
					'uniform mat4 modelViewMatrix;',
					'uniform mat4 projectionMatrix;',
					'uniform mat4 viewMatrix;',
					'uniform mat3 normalMatrix;',
					'uniform vec3 cameraPosition;',
	
					'attribute vec3 position;',
					'attribute vec3 normal;',
					'attribute vec2 uv;',
	
					'#ifdef USE_COLOR',
	
					'	attribute vec3 color;',
	
					'#endif',
	
					'#ifdef USE_MORPHTARGETS',
	
					'	attribute vec3 morphTarget0;',
					'	attribute vec3 morphTarget1;',
					'	attribute vec3 morphTarget2;',
					'	attribute vec3 morphTarget3;',
	
					'	#ifdef USE_MORPHNORMALS',
	
					'		attribute vec3 morphNormal0;',
					'		attribute vec3 morphNormal1;',
					'		attribute vec3 morphNormal2;',
					'		attribute vec3 morphNormal3;',
	
					'	#else',
	
					'		attribute vec3 morphTarget4;',
					'		attribute vec3 morphTarget5;',
					'		attribute vec3 morphTarget6;',
					'		attribute vec3 morphTarget7;',
	
					'	#endif',
	
					'#endif',
	
					'#ifdef USE_SKINNING',
	
					'	attribute vec4 skinIndex;',
					'	attribute vec4 skinWeight;',
	
					'#endif',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
				prefixFragment = [
	
					parameters.bumpMap || parameters.normalMap || parameters.flatShading || material.derivatives ? '#extension GL_OES_standard_derivatives : enable' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#extension GL_EXT_frag_depth : enable' : '',
	
					'precision ' + parameters.precision + ' float;',
					'precision ' + parameters.precision + ' int;',
	
					'#define SHADER_NAME ' + material.__webglShader.name,
	
					customDefines,
	
					'#define MAX_DIR_LIGHTS ' + parameters.maxDirLights,
					'#define MAX_POINT_LIGHTS ' + parameters.maxPointLights,
					'#define MAX_SPOT_LIGHTS ' + parameters.maxSpotLights,
					'#define MAX_HEMI_LIGHTS ' + parameters.maxHemiLights,
	
					'#define MAX_SHADOWS ' + parameters.maxShadows,
	
					parameters.alphaTest ? '#define ALPHATEST ' + parameters.alphaTest : '',
	
					renderer.gammaInput ? '#define GAMMA_INPUT' : '',
					renderer.gammaOutput ? '#define GAMMA_OUTPUT' : '',
					'#define GAMMA_FACTOR ' + gammaFactorDefine,
	
					( parameters.useFog && parameters.fog ) ? '#define USE_FOG' : '',
					( parameters.useFog && parameters.fogExp ) ? '#define FOG_EXP2' : '',
	
					parameters.map ? '#define USE_MAP' : '',
					parameters.envMap ? '#define USE_ENVMAP' : '',
					parameters.envMap ? '#define ' + envMapTypeDefine : '',
					parameters.envMap ? '#define ' + envMapModeDefine : '',
					parameters.envMap ? '#define ' + envMapBlendingDefine : '',
					parameters.lightMap ? '#define USE_LIGHTMAP' : '',
					parameters.aoMap ? '#define USE_AOMAP' : '',
					parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
					parameters.bumpMap ? '#define USE_BUMPMAP' : '',
					parameters.normalMap ? '#define USE_NORMALMAP' : '',
					parameters.specularMap ? '#define USE_SPECULARMAP' : '',
					parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
					parameters.vertexColors ? '#define USE_COLOR' : '',
	
					parameters.flatShading ? '#define FLAT_SHADED' : '',
	
					parameters.metal ? '#define METAL' : '',
					parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
					parameters.flipSided ? '#define FLIP_SIDED' : '',
	
					parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
					parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',
					parameters.shadowMapDebug ? '#define SHADOWMAP_DEBUG' : '',
					parameters.pointLightShadows > 0 ? '#define POINT_LIGHT_SHADOWS' : '',
	
					parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
					parameters.logarithmicDepthBuffer && renderer.extensions.get( 'EXT_frag_depth' ) ? '#define USE_LOGDEPTHBUF_EXT' : '',
	
					'uniform mat4 viewMatrix;',
					'uniform vec3 cameraPosition;',
	
					'\n'
	
				].filter( filterEmptyLine ).join( '\n' );
	
			}
	
			var vertexGlsl = prefixVertex + vertexShader;
			var fragmentGlsl = prefixFragment + fragmentShader;
	
			var glVertexShader = THREE.WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
			var glFragmentShader = THREE.WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );
	
			gl.attachShader( program, glVertexShader );
			gl.attachShader( program, glFragmentShader );
	
			// Force a particular attribute to index 0.
	
			if ( material.index0AttributeName !== undefined ) {
	
				gl.bindAttribLocation( program, 0, material.index0AttributeName );
	
			} else if ( parameters.morphTargets === true ) {
	
				// programs with morphTargets displace position out of attribute 0
				gl.bindAttribLocation( program, 0, 'position' );
	
			}
	
			gl.linkProgram( program );
	
			var programLog = gl.getProgramInfoLog( program );
			var vertexLog = gl.getShaderInfoLog( glVertexShader );
			var fragmentLog = gl.getShaderInfoLog( glFragmentShader );
	
			var runnable = true;
			var haveDiagnostics = true;
	
			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {
	
				runnable = false;
	
				console.error( 'THREE.WebGLProgram: shader error: ', gl.getError(), 'gl.VALIDATE_STATUS', gl.getProgramParameter( program, gl.VALIDATE_STATUS ), 'gl.getProgramInfoLog', programLog, vertexLog, fragmentLog );
	
			} else if ( programLog !== '' ) {
	
				console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', programLog );
	
			} else if ( vertexLog === '' || fragmentLog === '' ) {
	
				haveDiagnostics = false;
	
			}
	
			if ( haveDiagnostics ) {
	
				this.diagnostics = {
	
					runnable: runnable,
					material: material,
	
					programLog: programLog,
	
					vertexShader: {
	
						log: vertexLog,
						prefix: prefixVertex
	
					},
	
					fragmentShader: {
	
						log: fragmentLog,
						prefix: prefixFragment
	
					}
	
				};
	
			}
	
			// clean up
	
			gl.deleteShader( glVertexShader );
			gl.deleteShader( glFragmentShader );
	
			// set up caching for uniform locations
	
			var cachedUniforms;
	
			this.getUniforms = function() {
	
				if ( cachedUniforms === undefined ) {
	
					cachedUniforms = fetchUniformLocations( gl, program );
	
				}
	
				return cachedUniforms;
	
			};
	
			// set up caching for attribute locations
	
			var cachedAttributes;
	
			this.getAttributes = function() {
	
				if ( cachedAttributes === undefined ) {
	
					cachedAttributes = fetchAttributeLocations( gl, program );
	
				}
	
				return cachedAttributes;
	
			};
	
			// free resource
	
			this.destroy = function() {
	
				gl.deleteProgram( program );
				this.program = undefined;
	
			};
	
			// DEPRECATED
	
			Object.defineProperties( this, {
	
				uniforms: {
					get: function() {
	
						console.warn( 'THREE.WebGLProgram: .uniforms is now .getUniforms().' );
						return this.getUniforms();
	
					}
				},
	
				attributes: {
					get: function() {
	
						console.warn( 'THREE.WebGLProgram: .attributes is now .getAttributes().' );
						return this.getAttributes();
	
					}
				}
	
			} );
	
	
			//
	
			this.id = programIdCount ++;
			this.code = code;
			this.usedTimes = 1;
			this.program = program;
			this.vertexShader = glVertexShader;
			this.fragmentShader = glFragmentShader;
	
			return this;
	
		};
	
	} )();
	
	// File:src/renderers/webgl/WebGLPrograms.js
	
	THREE.WebGLPrograms = function ( renderer, capabilities ) {
	
		var programs = [];
	
		var shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points'
		};
	
		var parameterNames = [
			"precision", "supportsVertexTextures", "map", "envMap", "envMapMode",
			"lightMap", "aoMap", "emissiveMap", "bumpMap", "normalMap", "displacementMap", "specularMap",
			"alphaMap", "combine", "vertexColors", "fog", "useFog", "fogExp",
			"flatShading", "sizeAttenuation", "logarithmicDepthBuffer", "skinning",
			"maxBones", "useVertexTexture", "morphTargets", "morphNormals",
			"maxMorphTargets", "maxMorphNormals", "maxDirLights", "maxPointLights",
			"maxSpotLights", "maxHemiLights", "maxShadows", "shadowMapEnabled", "pointLightShadows",
			"shadowMapType", "shadowMapDebug", "alphaTest", "metal", "doubleSided",
			"flipSided"
		];
	
	
		function allocateBones ( object ) {
	
			if ( capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {
	
				return 1024;
	
			} else {
	
				// default for when object is not specified
				// ( for example when prebuilding shader to be used with multiple objects )
				//
				//  - leave some extra space for other uniforms
				//  - limit here is ANGLE's 254 max uniform vectors
				//    (up to 54 should be safe)
	
				var nVertexUniforms = capabilities.maxVertexUniforms;
				var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );
	
				var maxBones = nVertexMatrices;
	
				if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {
	
					maxBones = Math.min( object.skeleton.bones.length, maxBones );
	
					if ( maxBones < object.skeleton.bones.length ) {
	
						console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );
	
					}
	
				}
	
				return maxBones;
	
			}
	
		}
	
		function allocateLights( lights ) {
	
			var dirLights = 0;
			var pointLights = 0;
			var spotLights = 0;
			var hemiLights = 0;
	
			for ( var l = 0, ll = lights.length; l < ll; l ++ ) {
	
				var light = lights[ l ];
	
				if ( light.visible === false ) continue;
	
				if ( light instanceof THREE.DirectionalLight ) dirLights ++;
				if ( light instanceof THREE.PointLight ) pointLights ++;
				if ( light instanceof THREE.SpotLight ) spotLights ++;
				if ( light instanceof THREE.HemisphereLight ) hemiLights ++;
	
			}
	
			return { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };
	
		}
	
		function allocateShadows( lights ) {
	
			var maxShadows = 0;
			var pointLightShadows = 0;
	
			for ( var l = 0, ll = lights.length; l < ll; l ++ ) {
	
				var light = lights[ l ];
	
				if ( ! light.castShadow ) continue;
	
				if ( light instanceof THREE.SpotLight || light instanceof THREE.DirectionalLight ) maxShadows ++;
				if ( light instanceof THREE.PointLight ) {
	
					maxShadows ++;
					pointLightShadows ++;
	
				}
	
			}
	
			return { 'maxShadows': maxShadows, 'pointLightShadows': pointLightShadows };
	
		}
	
		this.getParameters = function ( material, lights, fog, object ) {
	
			var shaderID = shaderIDs[ material.type ];
			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)
	
			var maxLightCount = allocateLights( lights );
			var allocatedShadows = allocateShadows( lights );
			var maxBones = allocateBones( object );
			var precision = renderer.getPrecision();
	
			if ( material.precision !== null ) {
	
				precision = capabilities.getMaxPrecision( material.precision );
	
				if ( precision !== material.precision ) {
	
					console.warn( 'THREE.WebGLRenderer.initMaterial:', material.precision, 'not supported, using', precision, 'instead.' );
	
				}
	
			}
	
			var parameters = {
	
				shaderID: shaderID,
	
				precision: precision,
				supportsVertexTextures: capabilities.vertexTextures,
	
				map: !! material.map,
				envMap: !! material.envMap,
				envMapMode: material.envMap && material.envMap.mapping,
				lightMap: !! material.lightMap,
				aoMap: !! material.aoMap,
				emissiveMap: !! material.emissiveMap,
				bumpMap: !! material.bumpMap,
				normalMap: !! material.normalMap,
				displacementMap: !! material.displacementMap,
				specularMap: !! material.specularMap,
				alphaMap: !! material.alphaMap,
	
				combine: material.combine,
	
				vertexColors: material.vertexColors,
	
				fog: fog,
				useFog: material.fog,
				fogExp: fog instanceof THREE.FogExp2,
	
				flatShading: material.shading === THREE.FlatShading,
	
				sizeAttenuation: material.sizeAttenuation,
				logarithmicDepthBuffer: capabilities.logarithmicDepthBuffer,
	
				skinning: material.skinning,
				maxBones: maxBones,
				useVertexTexture: capabilities.floatVertexTextures && object && object.skeleton && object.skeleton.useVertexTexture,
	
				morphTargets: material.morphTargets,
				morphNormals: material.morphNormals,
				maxMorphTargets: renderer.maxMorphTargets,
				maxMorphNormals: renderer.maxMorphNormals,
	
				maxDirLights: maxLightCount.directional,
				maxPointLights: maxLightCount.point,
				maxSpotLights: maxLightCount.spot,
				maxHemiLights: maxLightCount.hemi,
	
				maxShadows: allocatedShadows.maxShadows,
				pointLightShadows: allocatedShadows.pointLightShadows,
				shadowMapEnabled: renderer.shadowMap.enabled && object.receiveShadow && allocatedShadows.maxShadows > 0,
				shadowMapType: renderer.shadowMap.type,
				shadowMapDebug: renderer.shadowMap.debug,
	
				alphaTest: material.alphaTest,
				metal: material.metal,
				doubleSided: material.side === THREE.DoubleSide,
				flipSided: material.side === THREE.BackSide
	
			};
	
			return parameters;
	
		};
	
		this.getProgramCode = function ( material, parameters ) {
	
			var chunks = [];
	
			if ( parameters.shaderID ) {
	
				chunks.push( parameters.shaderID );
	
			} else {
	
				chunks.push( material.fragmentShader );
				chunks.push( material.vertexShader );
	
			}
	
			if ( material.defines !== undefined ) {
	
				for ( var name in material.defines ) {
	
					chunks.push( name );
					chunks.push( material.defines[ name ] );
	
				}
	
			}
	
			for ( var i = 0; i < parameterNames.length; i ++ ) {
	
				var parameterName = parameterNames[ i ];
				chunks.push( parameterName );
				chunks.push( parameters[ parameterName ] );
	
			}
	
			return chunks.join();
	
		};
	
		this.acquireProgram = function ( material, parameters, code ) {
	
			var program;
	
			// Check if code has been already compiled
			for ( var p = 0, pl = programs.length; p < pl; p ++ ) {
	
				var programInfo = programs[ p ];
	
				if ( programInfo.code === code ) {
	
					program = programInfo;
					++ program.usedTimes;
	
					break;
	
				}
	
			}
	
			if ( program === undefined ) {
	
				program = new THREE.WebGLProgram( renderer, code, material, parameters );
				programs.push( program );
	
			}
	
			return program;
	
		};
	
		this.releaseProgram = function( program ) {
	
			if ( -- program.usedTimes === 0 ) {
	
				// Remove from unordered set
				var i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();
	
				// Free WebGL resources
				program.destroy();
	
			}
	
		};
	
		// Exposed for resource monitoring & error feedback via renderer.info:
		this.programs = programs;
	
	};
	
	// File:src/renderers/webgl/WebGLProperties.js
	
	/**
	* @author fordacious / fordacious.github.io
	*/
	
	THREE.WebGLProperties = function () {
	
		var properties = {};
	
		this.get = function ( object ) {
	
			var uuid = object.uuid;
			var map = properties[ uuid ];
	
			if ( map === undefined ) {
	
				map = {};
				properties[ uuid ] = map;
	
			}
	
			return map;
	
		};
	
		this.delete = function ( object ) {
	
			delete properties[ object.uuid ];
	
		};
	
		this.clear = function () {
	
			properties = {};
	
		};
	
	};
	
	// File:src/renderers/webgl/WebGLShader.js
	
	THREE.WebGLShader = ( function () {
	
		function addLineNumbers( string ) {
	
			var lines = string.split( '\n' );
	
			for ( var i = 0; i < lines.length; i ++ ) {
	
				lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];
	
			}
	
			return lines.join( '\n' );
	
		}
	
		return function WebGLShader( gl, type, string ) {
	
			var shader = gl.createShader( type );
	
			gl.shaderSource( shader, string );
			gl.compileShader( shader );
	
			if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {
	
				console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );
	
			}
	
			if ( gl.getShaderInfoLog( shader ) !== '' ) {
	
				console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', type === gl.VERTEX_SHADER ? 'vertex' : 'fragment', gl.getShaderInfoLog( shader ), addLineNumbers( string ) );
	
			}
	
			// --enable-privileged-webgl-extension
			// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );
	
			return shader;
	
		};
	
	} )();
	
	// File:src/renderers/webgl/WebGLShadowMap.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.WebGLShadowMap = function ( _renderer, _lights, _objects ) {
	
		var _gl = _renderer.context,
		_state = _renderer.state,
		_frustum = new THREE.Frustum(),
		_projScreenMatrix = new THREE.Matrix4(),
	
		_min = new THREE.Vector3(),
		_max = new THREE.Vector3(),
	
		_lookTarget = new THREE.Vector3(),
		_lightPositionWorld = new THREE.Vector3(),
	
		_renderList = [],
	
		_MorphingFlag = 1,
		_SkinningFlag = 2,
	
		_NumberOfMaterialVariants = ( _MorphingFlag | _SkinningFlag ) + 1,
	
		_depthMaterials = new Array( _NumberOfMaterialVariants ),
		_distanceMaterials = new Array( _NumberOfMaterialVariants );
	
		var cubeDirections = [
			new THREE.Vector3( 1, 0, 0 ), new THREE.Vector3( - 1, 0, 0 ), new THREE.Vector3( 0, 0, 1 ),
			new THREE.Vector3( 0, 0, - 1 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, - 1, 0 )
		];
	
		var cubeUps = [
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 1, 0 ),
			new THREE.Vector3( 0, 1, 0 ), new THREE.Vector3( 0, 0, 1 ),	new THREE.Vector3( 0, 0, - 1 )
		];
	
		var cube2DViewPorts = [
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4(),
			new THREE.Vector4(), new THREE.Vector4(), new THREE.Vector4()
		];
	
		var _vector4 = new THREE.Vector4();
	
		// init
	
		var depthShader = THREE.ShaderLib[ "depthRGBA" ];
		var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );
	
		var distanceShader = THREE.ShaderLib[ "distanceRGBA" ];
		var distanceUniforms = THREE.UniformsUtils.clone( distanceShader.uniforms );
	
		for ( var i = 0; i !== _NumberOfMaterialVariants; ++ i ) {
	
			var useMorphing = ( i & _MorphingFlag ) !== 0;
			var useSkinning = ( i & _SkinningFlag ) !== 0;
	
			var depthMaterial = new THREE.ShaderMaterial( {
				uniforms: depthUniforms,
				vertexShader: depthShader.vertexShader,
				fragmentShader: depthShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );
	
			depthMaterial._shadowPass = true;
	
			_depthMaterials[ i ] = depthMaterial;
	
			var distanceMaterial = new THREE.ShaderMaterial( {
				uniforms: distanceUniforms,
				vertexShader: distanceShader.vertexShader,
				fragmentShader: distanceShader.fragmentShader,
				morphTargets: useMorphing,
				skinning: useSkinning
			} );
	
			distanceMaterial._shadowPass = true;
	
			_distanceMaterials[ i ] = distanceMaterial;
	
		}
	
		//
	
		var scope = this;
	
		this.enabled = false;
	
		this.autoUpdate = true;
		this.needsUpdate = false;
	
		this.type = THREE.PCFShadowMap;
		this.cullFace = THREE.CullFaceFront;
	
		this.render = function ( scene ) {
	
			var faceCount, isPointLight;
	
			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;
	
			// Set GL state for depth map.
			_gl.clearColor( 1, 1, 1, 1 );
			_state.disable( _gl.BLEND );
			_state.enable( _gl.CULL_FACE );
			_gl.frontFace( _gl.CCW );
			_gl.cullFace( scope.cullFace === THREE.CullFaceFront ? _gl.FRONT : _gl.BACK );
			_state.setDepthTest( true );
	
			// save the existing viewport so it can be restored later
			_renderer.getViewport( _vector4 );
	
			// render depth map
	
			for ( var i = 0, il = _lights.length; i < il; i ++ ) {
	
				var light = _lights[ i ];
	
				if ( light.castShadow === true ) {
	
					var shadow = light.shadow;
					var shadowCamera = shadow.camera;
					var shadowMapSize = shadow.mapSize;
	
					if ( light instanceof THREE.PointLight ) {
	
						faceCount = 6;
						isPointLight = true;
	
						var vpWidth = shadowMapSize.x / 4.0;
						var vpHeight = shadowMapSize.y / 2.0;
	
						// These viewports map a cube-map onto a 2D texture with the
						// following orientation:
						//
						//  xzXZ
						//   y Y
						//
						// X - Positive x direction
						// x - Negative x direction
						// Y - Positive y direction
						// y - Negative y direction
						// Z - Positive z direction
						// z - Negative z direction
	
						// positive X
						cube2DViewPorts[ 0 ].set( vpWidth * 2, vpHeight, vpWidth, vpHeight );
						// negative X
						cube2DViewPorts[ 1 ].set( 0, vpHeight, vpWidth, vpHeight );
						// positive Z
						cube2DViewPorts[ 2 ].set( vpWidth * 3, vpHeight, vpWidth, vpHeight );
						// negative Z
						cube2DViewPorts[ 3 ].set( vpWidth, vpHeight, vpWidth, vpHeight );
						// positive Y
						cube2DViewPorts[ 4 ].set( vpWidth * 3, 0, vpWidth, vpHeight );
						// negative Y
						cube2DViewPorts[ 5 ].set( vpWidth, 0, vpWidth, vpHeight );
	
					} else {
	
						faceCount = 1;
						isPointLight = false;
	
					}
	
					if ( shadow.map === null ) {
	
						var shadowFilter = THREE.LinearFilter;
	
						if ( scope.type === THREE.PCFSoftShadowMap ) {
	
							shadowFilter = THREE.NearestFilter;
	
						}
	
						var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };
	
						shadow.map = new THREE.WebGLRenderTarget( shadowMapSize.x, shadowMapSize.y, pars );
						shadow.matrix = new THREE.Matrix4();
	
						//
	
						if ( light instanceof THREE.SpotLight ) {
	
							shadowCamera.aspect = shadowMapSize.x / shadowMapSize.y;
	
						}
	
						shadowCamera.updateProjectionMatrix();
	
					}
	
					var shadowMap = shadow.map;
					var shadowMatrix = shadow.matrix;
	
					_lightPositionWorld.setFromMatrixPosition( light.matrixWorld );
					shadowCamera.position.copy( _lightPositionWorld );
	
					_renderer.setRenderTarget( shadowMap );
					_renderer.clear();
	
					// render shadow map for each cube face (if omni-directional) or
					// run a single pass if not
	
					for ( var face = 0; face < faceCount; face ++ ) {
	
						if ( isPointLight ) {
	
							_lookTarget.copy( shadowCamera.position );
							_lookTarget.add( cubeDirections[ face ] );
							shadowCamera.up.copy( cubeUps[ face ] );
							shadowCamera.lookAt( _lookTarget );
							var vpDimensions = cube2DViewPorts[ face ];
							_renderer.setViewport( vpDimensions.x, vpDimensions.y, vpDimensions.z, vpDimensions.w );
	
						} else {
	
							_lookTarget.setFromMatrixPosition( light.target.matrixWorld );
							shadowCamera.lookAt( _lookTarget );
	
						}
	
						shadowCamera.updateMatrixWorld();
						shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );
	
						// compute shadow matrix
	
						shadowMatrix.set(
							0.5, 0.0, 0.0, 0.5,
							0.0, 0.5, 0.0, 0.5,
							0.0, 0.0, 0.5, 0.5,
							0.0, 0.0, 0.0, 1.0
						);
	
						shadowMatrix.multiply( shadowCamera.projectionMatrix );
						shadowMatrix.multiply( shadowCamera.matrixWorldInverse );
	
						// update camera matrices and frustum
	
						_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
						_frustum.setFromMatrix( _projScreenMatrix );
	
						// set object matrices & frustum culling
	
						_renderList.length = 0;
	
						projectObject( scene, shadowCamera );
	
						// render shadow map
						// render regular objects
	
						for ( var j = 0, jl = _renderList.length; j < jl; j ++ ) {
	
							var object = _renderList[ j ];
							var geometry = _objects.update( object );
							var material = object.material;
	
							if ( material instanceof THREE.MeshFaceMaterial ) {
	
								var groups = geometry.groups;
								var materials = material.materials;
	
								for ( var k = 0, kl = groups.length; k < kl; k ++ ) {
	
									var group = groups[ k ];
									var groupMaterial = materials[ group.materialIndex ];
	
									if ( groupMaterial.visible === true ) {
	
										var depthMaterial = getDepthMaterial( object, groupMaterial, isPointLight, _lightPositionWorld );
										_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, group );
	
									}
	
								}
	
							} else {
	
								var depthMaterial = getDepthMaterial( object, material, isPointLight, _lightPositionWorld );
								_renderer.renderBufferDirect( shadowCamera, _lights, null, geometry, depthMaterial, object, null );
	
							}
	
						}
	
					}
	
					// We must call _renderer.resetGLState() at the end of each iteration of
					// the light loop in order to force material updates for each light.
					_renderer.resetGLState();
	
				}
	
			}
	
			_renderer.setViewport( _vector4.x, _vector4.y, _vector4.z, _vector4.w );
	
			// Restore GL state.
			var clearColor = _renderer.getClearColor(),
			clearAlpha = _renderer.getClearAlpha();
			_renderer.setClearColor( clearColor, clearAlpha );
			_state.enable( _gl.BLEND );
	
			if ( scope.cullFace === THREE.CullFaceFront ) {
	
				_gl.cullFace( _gl.BACK );
	
			}
	
			_renderer.resetGLState();
	
			scope.needsUpdate = false;
	
		};
	
		function getDepthMaterial( object, material, isPointLight, lightPositionWorld ) {
	
			var geometry = object.geometry;
	
			var newMaterial = null;
	
			var materialVariants = _depthMaterials;
			var customMaterial = object.customDepthMaterial;
	
			if ( isPointLight ) {
	
				materialVariants = _distanceMaterials;
				customMaterial = object.customDistanceMaterial;
	
			}
	
			if ( ! customMaterial ) {
	
				var useMorphing = geometry.morphTargets !== undefined &&
						geometry.morphTargets.length > 0 && material.morphTargets;
	
				var useSkinning = object instanceof THREE.SkinnedMesh && material.skinning;
	
				var variantIndex = 0;
	
				if ( useMorphing ) variantIndex |= _MorphingFlag;
				if ( useSkinning ) variantIndex |= _SkinningFlag;
	
				newMaterial = materialVariants[ variantIndex ];
	
			} else {
	
				newMaterial = customMaterial;
	
			}
	
			newMaterial.visible = material.visible;
			newMaterial.wireframe = material.wireframe;
			newMaterial.wireframeLinewidth = material.wireframeLinewidth;
	
			if ( isPointLight && newMaterial.uniforms.lightPos !== undefined ) {
	
				newMaterial.uniforms.lightPos.value.copy( lightPositionWorld );
	
			}
	
			return newMaterial;
	
		}
	
		function projectObject( object, camera ) {
	
			if ( object.visible === false ) return;
	
			if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {
	
				if ( object.castShadow && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {
	
					var material = object.material;
	
					if ( material.visible === true ) {
	
						object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
						_renderList.push( object );
	
					}
	
				}
	
			}
	
			var children = object.children;
	
			for ( var i = 0, l = children.length; i < l; i ++ ) {
	
				projectObject( children[ i ], camera );
	
			}
	
		}
	
	};
	
	// File:src/renderers/webgl/WebGLState.js
	
	/**
	* @author mrdoob / http://mrdoob.com/
	*/
	
	THREE.WebGLState = function ( gl, extensions, paramThreeToGL ) {
	
		var _this = this;
	
		var newAttributes = new Uint8Array( 16 );
		var enabledAttributes = new Uint8Array( 16 );
		var attributeDivisors = new Uint8Array( 16 );
	
		var capabilities = {};
	
		var compressedTextureFormats = null;
	
		var currentBlending = null;
		var currentBlendEquation = null;
		var currentBlendSrc = null;
		var currentBlendDst = null;
		var currentBlendEquationAlpha = null;
		var currentBlendSrcAlpha = null;
		var currentBlendDstAlpha = null;
	
		var currentDepthFunc = null;
		var currentDepthWrite = null;
	
		var currentColorWrite = null;
	
		var currentFlipSided = null;
	
		var currentLineWidth = null;
	
		var currentPolygonOffsetFactor = null;
		var currentPolygonOffsetUnits = null;
	
		var maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
	
		var currentTextureSlot = undefined;
		var currentBoundTextures = {};
	
		this.init = function () {
	
			gl.clearColor( 0, 0, 0, 1 );
			gl.clearDepth( 1 );
			gl.clearStencil( 0 );
	
			this.enable( gl.DEPTH_TEST );
			gl.depthFunc( gl.LEQUAL );
	
			gl.frontFace( gl.CCW );
			gl.cullFace( gl.BACK );
			this.enable( gl.CULL_FACE );
	
			this.enable( gl.BLEND );
			gl.blendEquation( gl.FUNC_ADD );
			gl.blendFunc( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA );
	
		};
	
		this.initAttributes = function () {
	
			for ( var i = 0, l = newAttributes.length; i < l; i ++ ) {
	
				newAttributes[ i ] = 0;
	
			}
	
		};
	
		this.enableAttribute = function ( attribute ) {
	
			newAttributes[ attribute ] = 1;
	
			if ( enabledAttributes[ attribute ] === 0 ) {
	
				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;
	
			}
	
			if ( attributeDivisors[ attribute ] !== 0 ) {
	
				var extension = extensions.get( 'ANGLE_instanced_arrays' );
	
				extension.vertexAttribDivisorANGLE( attribute, 0 );
				attributeDivisors[ attribute ] = 0;
	
			}
	
		};
	
		this.enableAttributeAndDivisor = function ( attribute, meshPerAttribute, extension ) {
	
			newAttributes[ attribute ] = 1;
	
			if ( enabledAttributes[ attribute ] === 0 ) {
	
				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;
	
			}
	
			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {
	
				extension.vertexAttribDivisorANGLE( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;
	
			}
	
		};
	
		this.disableUnusedAttributes = function () {
	
			for ( var i = 0, l = enabledAttributes.length; i < l; i ++ ) {
	
				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {
	
					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;
	
				}
	
			}
	
		};
	
		this.enable = function ( id ) {
	
			if ( capabilities[ id ] !== true ) {
	
				gl.enable( id );
				capabilities[ id ] = true;
	
			}
	
		};
	
		this.disable = function ( id ) {
	
			if ( capabilities[ id ] !== false ) {
	
				gl.disable( id );
				capabilities[ id ] = false;
	
			}
	
		};
	
		this.getCompressedTextureFormats = function () {
	
			if ( compressedTextureFormats === null ) {
	
				compressedTextureFormats = [];
	
				if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) ||
				     extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {
	
					var formats = gl.getParameter( gl.COMPRESSED_TEXTURE_FORMATS );
	
					for ( var i = 0; i < formats.length; i ++ ) {
	
						compressedTextureFormats.push( formats[ i ] );
	
					}
	
				}
	
			}
	
			return compressedTextureFormats;
	
		};
	
		this.setBlending = function ( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha ) {
	
			if ( blending !== currentBlending ) {
	
				if ( blending === THREE.NoBlending ) {
	
					this.disable( gl.BLEND );
	
				} else if ( blending === THREE.AdditiveBlending ) {
	
					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
	
				} else if ( blending === THREE.SubtractiveBlending ) {
	
					// TODO: Find blendFuncSeparate() combination
	
					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.ONE_MINUS_SRC_COLOR );
	
				} else if ( blending === THREE.MultiplyBlending ) {
	
					// TODO: Find blendFuncSeparate() combination
	
					this.enable( gl.BLEND );
					gl.blendEquation( gl.FUNC_ADD );
					gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
	
				} else if ( blending === THREE.CustomBlending ) {
	
					this.enable( gl.BLEND );
	
				} else {
	
					this.enable( gl.BLEND );
					gl.blendEquationSeparate( gl.FUNC_ADD, gl.FUNC_ADD );
					gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
	
				}
	
				currentBlending = blending;
	
			}
	
			if ( blending === THREE.CustomBlending ) {
	
				blendEquationAlpha = blendEquationAlpha || blendEquation;
				blendSrcAlpha = blendSrcAlpha || blendSrc;
				blendDstAlpha = blendDstAlpha || blendDst;
	
				if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {
	
					gl.blendEquationSeparate( paramThreeToGL( blendEquation ), paramThreeToGL( blendEquationAlpha ) );
	
					currentBlendEquation = blendEquation;
					currentBlendEquationAlpha = blendEquationAlpha;
	
				}
	
				if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {
	
					gl.blendFuncSeparate( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ), paramThreeToGL( blendSrcAlpha ), paramThreeToGL( blendDstAlpha ) );
	
					currentBlendSrc = blendSrc;
					currentBlendDst = blendDst;
					currentBlendSrcAlpha = blendSrcAlpha;
					currentBlendDstAlpha = blendDstAlpha;
	
				}
	
			} else {
	
				currentBlendEquation = null;
				currentBlendSrc = null;
				currentBlendDst = null;
				currentBlendEquationAlpha = null;
				currentBlendSrcAlpha = null;
				currentBlendDstAlpha = null;
	
			}
	
		};
	
		this.setDepthFunc = function ( depthFunc ) {
	
			if ( currentDepthFunc !== depthFunc ) {
	
				if ( depthFunc ) {
	
					switch ( depthFunc ) {
	
						case THREE.NeverDepth:
	
							gl.depthFunc( gl.NEVER );
							break;
	
						case THREE.AlwaysDepth:
	
							gl.depthFunc( gl.ALWAYS );
							break;
	
						case THREE.LessDepth:
	
							gl.depthFunc( gl.LESS );
							break;
	
						case THREE.LessEqualDepth:
	
							gl.depthFunc( gl.LEQUAL );
							break;
	
						case THREE.EqualDepth:
	
							gl.depthFunc( gl.EQUAL );
							break;
	
						case THREE.GreaterEqualDepth:
	
							gl.depthFunc( gl.GEQUAL );
							break;
	
						case THREE.GreaterDepth:
	
							gl.depthFunc( gl.GREATER );
							break;
	
						case THREE.NotEqualDepth:
	
							gl.depthFunc( gl.NOTEQUAL );
							break;
	
						default:
	
							gl.depthFunc( gl.LEQUAL );
	
					}
	
				} else {
	
					gl.depthFunc( gl.LEQUAL );
	
				}
	
				currentDepthFunc = depthFunc;
	
			}
	
		};
	
		this.setDepthTest = function ( depthTest ) {
	
			if ( depthTest ) {
	
				this.enable( gl.DEPTH_TEST );
	
			} else {
	
				this.disable( gl.DEPTH_TEST );
	
			}
	
		};
	
		this.setDepthWrite = function ( depthWrite ) {
	
			if ( currentDepthWrite !== depthWrite ) {
	
				gl.depthMask( depthWrite );
				currentDepthWrite = depthWrite;
	
			}
	
		};
	
		this.setColorWrite = function ( colorWrite ) {
	
			if ( currentColorWrite !== colorWrite ) {
	
				gl.colorMask( colorWrite, colorWrite, colorWrite, colorWrite );
				currentColorWrite = colorWrite;
	
			}
	
		};
	
		this.setFlipSided = function ( flipSided ) {
	
			if ( currentFlipSided !== flipSided ) {
	
				if ( flipSided ) {
	
					gl.frontFace( gl.CW );
	
				} else {
	
					gl.frontFace( gl.CCW );
	
				}
	
				currentFlipSided = flipSided;
	
			}
	
		};
	
		this.setLineWidth = function ( width ) {
	
			if ( width !== currentLineWidth ) {
	
				gl.lineWidth( width );
	
				currentLineWidth = width;
	
			}
	
		};
	
		this.setPolygonOffset = function ( polygonOffset, factor, units ) {
	
			if ( polygonOffset ) {
	
				this.enable( gl.POLYGON_OFFSET_FILL );
	
			} else {
	
				this.disable( gl.POLYGON_OFFSET_FILL );
	
			}
	
			if ( polygonOffset && ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) ) {
	
				gl.polygonOffset( factor, units );
	
				currentPolygonOffsetFactor = factor;
				currentPolygonOffsetUnits = units;
	
			}
	
		};
	
		this.setScissorTest = function ( scissorTest ) {
	
			if ( scissorTest ) {
	
				this.enable( gl.SCISSOR_TEST );
	
			} else {
	
				this.disable( gl.SCISSOR_TEST );
	
			}
	
		};
	
		// texture
	
		this.activeTexture = function ( webglSlot ) {
	
			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;
	
			if ( currentTextureSlot !== webglSlot ) {
	
				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;
	
			}
	
		}
	
		this.bindTexture = function ( webglType, webglTexture ) {
	
			if ( currentTextureSlot === undefined ) {
	
				_this.activeTexture();
	
			}
	
			var boundTexture = currentBoundTextures[ currentTextureSlot ];
	
			if ( boundTexture === undefined ) {
	
				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ currentTextureSlot ] = boundTexture;
	
			}
	
			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {
	
				gl.bindTexture( webglType, webglTexture );
	
				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;
	
			}
	
		};
	
		this.compressedTexImage2D = function () {
	
			try {
	
				gl.compressedTexImage2D.apply( gl, arguments );
	
			} catch ( error ) {
	
				console.error( error );
	
			}
	
		};
	
		this.texImage2D = function () {
	
			try {
	
				gl.texImage2D.apply( gl, arguments );
	
			} catch ( error ) {
	
				console.error( error );
	
			}
	
		};
	
		//
	
		this.reset = function () {
	
			for ( var i = 0; i < enabledAttributes.length; i ++ ) {
	
				if ( enabledAttributes[ i ] === 1 ) {
	
					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;
	
				}
	
			}
	
			capabilities = {};
	
			compressedTextureFormats = null;
	
			currentBlending = null;
	
			currentDepthWrite = null;
			currentColorWrite = null;
	
			currentFlipSided = null;
	
		};
	
	};
	
	// File:src/renderers/webgl/plugins/LensFlarePlugin.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.LensFlarePlugin = function ( renderer, flares ) {
	
		var gl = renderer.context;
		var state = renderer.state;
	
		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;
		var hasVertexTexture;
	
		var tempTexture, occlusionTexture;
	
		function init() {
	
			var vertices = new Float32Array( [
				- 1, - 1,  0, 0,
				 1, - 1,  1, 0,
				 1,  1,  1, 1,
				- 1,  1,  0, 1
			] );
	
			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );
	
			// buffers
	
			vertexBuffer     = gl.createBuffer();
			elementBuffer    = gl.createBuffer();
	
			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
			// textures
	
			tempTexture      = gl.createTexture();
			occlusionTexture = gl.createTexture();
	
			state.bindTexture( gl.TEXTURE_2D, tempTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
			state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
			gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
			gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
	
			hasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;
	
			var shader;
	
			if ( hasVertexTexture ) {
	
				shader = {
	
					vertexShader: [
	
						"uniform lowp int renderType;",
	
						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",
	
						"uniform sampler2D occlusionMap;",
	
						"attribute vec2 position;",
						"attribute vec2 uv;",
	
						"varying vec2 vUV;",
						"varying float vVisibility;",
	
						"void main() {",
	
							"vUV = uv;",
	
							"vec2 pos = position;",
	
							"if ( renderType == 2 ) {",
	
								"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",
	
								"vVisibility =        visibility.r / 9.0;",
								"vVisibility *= 1.0 - visibility.g / 9.0;",
								"vVisibility *=       visibility.b / 9.0;",
								"vVisibility *= 1.0 - visibility.a / 9.0;",
	
								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
	
							"}",
	
							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
	
						"}"
	
					].join( "\n" ),
	
					fragmentShader: [
	
						"uniform lowp int renderType;",
	
						"uniform sampler2D map;",
						"uniform float opacity;",
						"uniform vec3 color;",
	
						"varying vec2 vUV;",
						"varying float vVisibility;",
	
						"void main() {",
	
							// pink square
	
							"if ( renderType == 0 ) {",
	
								"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",
	
							// restore
	
							"} else if ( renderType == 1 ) {",
	
								"gl_FragColor = texture2D( map, vUV );",
	
							// flare
	
							"} else {",
	
								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * vVisibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",
	
							"}",
	
						"}"
	
					].join( "\n" )
	
				};
	
			} else {
	
				shader = {
	
					vertexShader: [
	
						"uniform lowp int renderType;",
	
						"uniform vec3 screenPosition;",
						"uniform vec2 scale;",
						"uniform float rotation;",
	
						"attribute vec2 position;",
						"attribute vec2 uv;",
	
						"varying vec2 vUV;",
	
						"void main() {",
	
							"vUV = uv;",
	
							"vec2 pos = position;",
	
							"if ( renderType == 2 ) {",
	
								"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
								"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",
	
							"}",
	
							"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",
	
						"}"
	
					].join( "\n" ),
	
					fragmentShader: [
	
						"precision mediump float;",
	
						"uniform lowp int renderType;",
	
						"uniform sampler2D map;",
						"uniform sampler2D occlusionMap;",
						"uniform float opacity;",
						"uniform vec3 color;",
	
						"varying vec2 vUV;",
	
						"void main() {",
	
							// pink square
	
							"if ( renderType == 0 ) {",
	
								"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",
	
							// restore
	
							"} else if ( renderType == 1 ) {",
	
								"gl_FragColor = texture2D( map, vUV );",
	
							// flare
	
							"} else {",
	
								"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
								"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
								"visibility = ( 1.0 - visibility / 4.0 );",
	
								"vec4 texture = texture2D( map, vUV );",
								"texture.a *= opacity * visibility;",
								"gl_FragColor = texture;",
								"gl_FragColor.rgb *= color;",
	
							"}",
	
						"}"
	
					].join( "\n" )
	
				};
	
			}
	
			program = createProgram( shader );
	
			attributes = {
				vertex: gl.getAttribLocation ( program, "position" ),
				uv:     gl.getAttribLocation ( program, "uv" )
			};
	
			uniforms = {
				renderType:     gl.getUniformLocation( program, "renderType" ),
				map:            gl.getUniformLocation( program, "map" ),
				occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
				opacity:        gl.getUniformLocation( program, "opacity" ),
				color:          gl.getUniformLocation( program, "color" ),
				scale:          gl.getUniformLocation( program, "scale" ),
				rotation:       gl.getUniformLocation( program, "rotation" ),
				screenPosition: gl.getUniformLocation( program, "screenPosition" )
			};
	
		}
	
		/*
		 * Render lens flares
		 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
		 *         reads these back and calculates occlusion.
		 */
	
		this.render = function ( scene, camera, viewportWidth, viewportHeight ) {
	
			if ( flares.length === 0 ) return;
	
			var tempPosition = new THREE.Vector3();
	
			var invAspect = viewportHeight / viewportWidth,
				halfViewportWidth = viewportWidth * 0.5,
				halfViewportHeight = viewportHeight * 0.5;
	
			var size = 16 / viewportHeight,
				scale = new THREE.Vector2( size * invAspect, size );
	
			var screenPosition = new THREE.Vector3( 1, 1, 0 ),
				screenPositionPixels = new THREE.Vector2( 1, 1 );
	
			if ( program === undefined ) {
	
				init();
	
			}
	
			gl.useProgram( program );
	
			state.initAttributes();
			state.enableAttribute( attributes.vertex );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();
	
			// loop through all lens flares to update their occlusion and positions
			// setup gl and common used attribs/uniforms
	
			gl.uniform1i( uniforms.occlusionMap, 0 );
			gl.uniform1i( uniforms.map, 1 );
	
			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
			state.disable( gl.CULL_FACE );
			gl.depthMask( false );
	
			for ( var i = 0, l = flares.length; i < l; i ++ ) {
	
				size = 16 / viewportHeight;
				scale.set( size * invAspect, size );
	
				// calc object screen position
	
				var flare = flares[ i ];
	
				tempPosition.set( flare.matrixWorld.elements[ 12 ], flare.matrixWorld.elements[ 13 ], flare.matrixWorld.elements[ 14 ] );
	
				tempPosition.applyMatrix4( camera.matrixWorldInverse );
				tempPosition.applyProjection( camera.projectionMatrix );
	
				// setup arrays for gl programs
	
				screenPosition.copy( tempPosition );
	
				screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
				screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;
	
				// screen cull
	
				if ( hasVertexTexture || (
					screenPositionPixels.x > 0 &&
					screenPositionPixels.x < viewportWidth &&
					screenPositionPixels.y > 0 &&
					screenPositionPixels.y < viewportHeight ) ) {
	
					// save current RGB to temp texture
	
					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, null );
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );
	
	
					// render pink quad
	
					gl.uniform1i( uniforms.renderType, 0 );
					gl.uniform2f( uniforms.scale, scale.x, scale.y );
					gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
	
					state.disable( gl.BLEND );
					state.enable( gl.DEPTH_TEST );
	
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
					// copy result to occlusionMap
	
					state.activeTexture( gl.TEXTURE0 );
					state.bindTexture( gl.TEXTURE_2D, occlusionTexture );
					gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );
	
	
					// restore graphics
	
					gl.uniform1i( uniforms.renderType, 1 );
					state.disable( gl.DEPTH_TEST );
	
					state.activeTexture( gl.TEXTURE1 );
					state.bindTexture( gl.TEXTURE_2D, tempTexture );
					gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
	
					// update object positions
	
					flare.positionScreen.copy( screenPosition );
	
					if ( flare.customUpdateCallback ) {
	
						flare.customUpdateCallback( flare );
	
					} else {
	
						flare.updateLensFlares();
	
					}
	
					// render flares
	
					gl.uniform1i( uniforms.renderType, 2 );
					state.enable( gl.BLEND );
	
					for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {
	
						var sprite = flare.lensFlares[ j ];
	
						if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {
	
							screenPosition.x = sprite.x;
							screenPosition.y = sprite.y;
							screenPosition.z = sprite.z;
	
							size = sprite.size * sprite.scale / viewportHeight;
	
							scale.x = size * invAspect;
							scale.y = size;
	
							gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
							gl.uniform2f( uniforms.scale, scale.x, scale.y );
							gl.uniform1f( uniforms.rotation, sprite.rotation );
	
							gl.uniform1f( uniforms.opacity, sprite.opacity );
							gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );
	
							state.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
							renderer.setTexture( sprite.texture, 1 );
	
							gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
						}
	
					}
	
				}
	
			}
	
			// restore gl
	
			state.enable( gl.CULL_FACE );
			state.enable( gl.DEPTH_TEST );
			gl.depthMask( true );
	
			renderer.resetGLState();
	
		};
	
		function createProgram ( shader ) {
	
			var program = gl.createProgram();
	
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
	
			var prefix = "precision " + renderer.getPrecision() + " float;\n";
	
			gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
			gl.shaderSource( vertexShader, prefix + shader.vertexShader );
	
			gl.compileShader( fragmentShader );
			gl.compileShader( vertexShader );
	
			gl.attachShader( program, fragmentShader );
			gl.attachShader( program, vertexShader );
	
			gl.linkProgram( program );
	
			return program;
	
		}
	
	};
	
	// File:src/renderers/webgl/plugins/SpritePlugin.js
	
	/**
	 * @author mikael emtinger / http://gomo.se/
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.SpritePlugin = function ( renderer, sprites ) {
	
		var gl = renderer.context;
		var state = renderer.state;
	
		var vertexBuffer, elementBuffer;
		var program, attributes, uniforms;
	
		var texture;
	
		// decompose matrixWorld
	
		var spritePosition = new THREE.Vector3();
		var spriteRotation = new THREE.Quaternion();
		var spriteScale = new THREE.Vector3();
	
		function init() {
	
			var vertices = new Float32Array( [
				- 0.5, - 0.5,  0, 0,
				  0.5, - 0.5,  1, 0,
				  0.5,   0.5,  1, 1,
				- 0.5,   0.5,  0, 1
			] );
	
			var faces = new Uint16Array( [
				0, 1, 2,
				0, 2, 3
			] );
	
			vertexBuffer  = gl.createBuffer();
			elementBuffer = gl.createBuffer();
	
			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );
	
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
			gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );
	
			program = createProgram();
	
			attributes = {
				position:			gl.getAttribLocation ( program, 'position' ),
				uv:					gl.getAttribLocation ( program, 'uv' )
			};
	
			uniforms = {
				uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
				uvScale:			gl.getUniformLocation( program, 'uvScale' ),
	
				rotation:			gl.getUniformLocation( program, 'rotation' ),
				scale:				gl.getUniformLocation( program, 'scale' ),
	
				color:				gl.getUniformLocation( program, 'color' ),
				map:				gl.getUniformLocation( program, 'map' ),
				opacity:			gl.getUniformLocation( program, 'opacity' ),
	
				modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
				projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),
	
				fogType:			gl.getUniformLocation( program, 'fogType' ),
				fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
				fogNear:			gl.getUniformLocation( program, 'fogNear' ),
				fogFar:				gl.getUniformLocation( program, 'fogFar' ),
				fogColor:			gl.getUniformLocation( program, 'fogColor' ),
	
				alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
			};
	
			var canvas = document.createElement( 'canvas' );
			canvas.width = 8;
			canvas.height = 8;
	
			var context = canvas.getContext( '2d' );
			context.fillStyle = 'white';
			context.fillRect( 0, 0, 8, 8 );
	
			texture = new THREE.Texture( canvas );
			texture.needsUpdate = true;
	
		}
	
		this.render = function ( scene, camera ) {
	
			if ( sprites.length === 0 ) return;
	
			// setup gl
	
			if ( program === undefined ) {
	
				init();
	
			}
	
			gl.useProgram( program );
	
			state.initAttributes();
			state.enableAttribute( attributes.position );
			state.enableAttribute( attributes.uv );
			state.disableUnusedAttributes();
	
			state.disable( gl.CULL_FACE );
			state.enable( gl.BLEND );
	
			gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
			gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
			gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );
	
			gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
	
			gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );
	
			state.activeTexture( gl.TEXTURE0 );
			gl.uniform1i( uniforms.map, 0 );
	
			var oldFogType = 0;
			var sceneFogType = 0;
			var fog = scene.fog;
	
			if ( fog ) {
	
				gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );
	
				if ( fog instanceof THREE.Fog ) {
	
					gl.uniform1f( uniforms.fogNear, fog.near );
					gl.uniform1f( uniforms.fogFar, fog.far );
	
					gl.uniform1i( uniforms.fogType, 1 );
					oldFogType = 1;
					sceneFogType = 1;
	
				} else if ( fog instanceof THREE.FogExp2 ) {
	
					gl.uniform1f( uniforms.fogDensity, fog.density );
	
					gl.uniform1i( uniforms.fogType, 2 );
					oldFogType = 2;
					sceneFogType = 2;
	
				}
	
			} else {
	
				gl.uniform1i( uniforms.fogType, 0 );
				oldFogType = 0;
				sceneFogType = 0;
	
			}
	
	
			// update positions and sort
	
			for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
				var sprite = sprites[ i ];
	
				sprite.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );
				sprite.z = - sprite.modelViewMatrix.elements[ 14 ];
	
			}
	
			sprites.sort( painterSortStable );
	
			// render all sprites
	
			var scale = [];
	
			for ( var i = 0, l = sprites.length; i < l; i ++ ) {
	
				var sprite = sprites[ i ];
				var material = sprite.material;
	
				gl.uniform1f( uniforms.alphaTest, material.alphaTest );
				gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite.modelViewMatrix.elements );
	
				sprite.matrixWorld.decompose( spritePosition, spriteRotation, spriteScale );
	
				scale[ 0 ] = spriteScale.x;
				scale[ 1 ] = spriteScale.y;
	
				var fogType = 0;
	
				if ( scene.fog && material.fog ) {
	
					fogType = sceneFogType;
	
				}
	
				if ( oldFogType !== fogType ) {
	
					gl.uniform1i( uniforms.fogType, fogType );
					oldFogType = fogType;
	
				}
	
				if ( material.map !== null ) {
	
					gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
					gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );
	
				} else {
	
					gl.uniform2f( uniforms.uvOffset, 0, 0 );
					gl.uniform2f( uniforms.uvScale, 1, 1 );
	
				}
	
				gl.uniform1f( uniforms.opacity, material.opacity );
				gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );
	
				gl.uniform1f( uniforms.rotation, material.rotation );
				gl.uniform2fv( uniforms.scale, scale );
	
				state.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
				state.setDepthTest( material.depthTest );
				state.setDepthWrite( material.depthWrite );
	
				if ( material.map && material.map.image && material.map.image.width ) {
	
					renderer.setTexture( material.map, 0 );
	
				} else {
	
					renderer.setTexture( texture, 0 );
	
				}
	
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );
	
			}
	
			// restore gl
	
			state.enable( gl.CULL_FACE );
	
			renderer.resetGLState();
	
		};
	
		function createProgram () {
	
			var program = gl.createProgram();
	
			var vertexShader = gl.createShader( gl.VERTEX_SHADER );
			var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
	
			gl.shaderSource( vertexShader, [
	
				'precision ' + renderer.getPrecision() + ' float;',
	
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform float rotation;',
				'uniform vec2 scale;',
				'uniform vec2 uvOffset;',
				'uniform vec2 uvScale;',
	
				'attribute vec2 position;',
				'attribute vec2 uv;',
	
				'varying vec2 vUV;',
	
				'void main() {',
	
					'vUV = uvOffset + uv * uvScale;',
	
					'vec2 alignedPosition = position * scale;',
	
					'vec2 rotatedPosition;',
					'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
					'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',
	
					'vec4 finalPosition;',
	
					'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
					'finalPosition.xy += rotatedPosition;',
					'finalPosition = projectionMatrix * finalPosition;',
	
					'gl_Position = finalPosition;',
	
				'}'
	
			].join( '\n' ) );
	
			gl.shaderSource( fragmentShader, [
	
				'precision ' + renderer.getPrecision() + ' float;',
	
				'uniform vec3 color;',
				'uniform sampler2D map;',
				'uniform float opacity;',
	
				'uniform int fogType;',
				'uniform vec3 fogColor;',
				'uniform float fogDensity;',
				'uniform float fogNear;',
				'uniform float fogFar;',
				'uniform float alphaTest;',
	
				'varying vec2 vUV;',
	
				'void main() {',
	
					'vec4 texture = texture2D( map, vUV );',
	
					'if ( texture.a < alphaTest ) discard;',
	
					'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',
	
					'if ( fogType > 0 ) {',
	
						'float depth = gl_FragCoord.z / gl_FragCoord.w;',
						'float fogFactor = 0.0;',
	
						'if ( fogType == 1 ) {',
	
							'fogFactor = smoothstep( fogNear, fogFar, depth );',
	
						'} else {',
	
							'const float LOG2 = 1.442695;',
							'fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
							'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',
	
						'}',
	
						'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',
	
					'}',
	
				'}'
	
			].join( '\n' ) );
	
			gl.compileShader( vertexShader );
			gl.compileShader( fragmentShader );
	
			gl.attachShader( program, vertexShader );
			gl.attachShader( program, fragmentShader );
	
			gl.linkProgram( program );
	
			return program;
	
		}
	
		function painterSortStable ( a, b ) {
	
			if ( a.z !== b.z ) {
	
				return b.z - a.z;
	
			} else {
	
				return b.id - a.id;
	
			}
	
		}
	
	};
	
	// File:src/extras/CurveUtils.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	
	THREE.CurveUtils = {
	
		tangentQuadraticBezier: function ( t, p0, p1, p2 ) {
	
			return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );
	
		},
	
		// Puay Bing, thanks for helping with this derivative!
	
		tangentCubicBezier: function ( t, p0, p1, p2, p3 ) {
	
			return - 3 * p0 * ( 1 - t ) * ( 1 - t )  +
				3 * p1 * ( 1 - t ) * ( 1 - t ) - 6 * t * p1 * ( 1 - t ) +
				6 * t *  p2 * ( 1 - t ) - 3 * t * t * p2 +
				3 * t * t * p3;
	
		},
	
		tangentSpline: function ( t, p0, p1, p2, p3 ) {
	
			// To check if my formulas are correct
	
			var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
			var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
			var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
			var h11 = 3 * t * t - 2 * t;	// t3 − t2
	
			return h00 + h10 + h01 + h11;
	
		},
	
		// Catmull-Rom
	
		interpolate: function( p0, p1, p2, p3, t ) {
	
			var v0 = ( p2 - p0 ) * 0.5;
			var v1 = ( p3 - p1 ) * 0.5;
			var t2 = t * t;
			var t3 = t * t2;
			return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;
	
		}
	
	};
	
	// File:src/extras/GeometryUtils.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.GeometryUtils = {
	
		merge: function ( geometry1, geometry2, materialIndexOffset ) {
	
			console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );
	
			var matrix;
	
			if ( geometry2 instanceof THREE.Mesh ) {
	
				geometry2.matrixAutoUpdate && geometry2.updateMatrix();
	
				matrix = geometry2.matrix;
				geometry2 = geometry2.geometry;
	
			}
	
			geometry1.merge( geometry2, matrix, materialIndexOffset );
	
		},
	
		center: function ( geometry ) {
	
			console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
			return geometry.center();
	
		}
	
	};
	
	// File:src/extras/ImageUtils.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author Daosheng Mu / https://github.com/DaoshengMu/
	 */
	
	THREE.ImageUtils = {
	
		crossOrigin: undefined,
	
		loadTexture: function ( url, mapping, onLoad, onError ) {
	
			console.warn( 'THREE.ImageUtils.loadTexture is being deprecated. Use THREE.TextureLoader() instead.' );
	
			var loader = new THREE.TextureLoader();
			loader.setCrossOrigin( this.crossOrigin );
	
			var texture = loader.load( url, onLoad, undefined, onError );
	
			if ( mapping ) texture.mapping = mapping;
	
			return texture;
	
		},
	
		loadTextureCube: function ( urls, mapping, onLoad, onError ) {
	
			console.warn( 'THREE.ImageUtils.loadTextureCube is being deprecated. Use THREE.CubeTextureLoader() instead.' );
	
			var loader = new THREE.CubeTextureLoader();
			loader.setCrossOrigin( this.crossOrigin );
	
			var texture = loader.load( urls, onLoad, undefined, onError );
	
			if ( mapping ) texture.mapping = mapping;
	
			return texture;
	
		},
	
		loadCompressedTexture: function () {
	
			console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )
	
		},
	
		loadCompressedTextureCube: function () {
	
			console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )
	
		}
	
	};
	
	// File:src/extras/SceneUtils.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.SceneUtils = {
	
		createMultiMaterialObject: function ( geometry, materials ) {
	
			var group = new THREE.Group();
	
			for ( var i = 0, l = materials.length; i < l; i ++ ) {
	
				group.add( new THREE.Mesh( geometry, materials[ i ] ) );
	
			}
	
			return group;
	
		},
	
		detach: function ( child, parent, scene ) {
	
			child.applyMatrix( parent.matrixWorld );
			parent.remove( child );
			scene.add( child );
	
		},
	
		attach: function ( child, scene, parent ) {
	
			var matrixWorldInverse = new THREE.Matrix4();
			matrixWorldInverse.getInverse( parent.matrixWorld );
			child.applyMatrix( matrixWorldInverse );
	
			scene.remove( child );
			parent.add( child );
	
		}
	
	};
	
	// File:src/extras/ShapeUtils.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 */
	
	THREE.ShapeUtils = {
	
		// calculate area of the contour polygon
	
		area: function ( contour ) {
	
			var n = contour.length;
			var a = 0.0;
	
			for ( var p = n - 1, q = 0; q < n; p = q ++ ) {
	
				a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;
	
			}
	
			return a * 0.5;
	
		},
	
		triangulate: ( function () {
	
			/**
			 * This code is a quick port of code written in C++ which was submitted to
			 * flipcode.com by John W. Ratcliff  // July 22, 2000
			 * See original code and more information here:
			 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
			 *
			 * ported to actionscript by Zevan Rosser
			 * www.actionsnippet.com
			 *
			 * ported to javascript by Joshua Koo
			 * http://www.lab4games.net/zz85/blog
			 *
			 */
	
			function snip( contour, u, v, w, n, verts ) {
	
				var p;
				var ax, ay, bx, by;
				var cx, cy, px, py;
	
				ax = contour[ verts[ u ] ].x;
				ay = contour[ verts[ u ] ].y;
	
				bx = contour[ verts[ v ] ].x;
				by = contour[ verts[ v ] ].y;
	
				cx = contour[ verts[ w ] ].x;
				cy = contour[ verts[ w ] ].y;
	
				if ( Number.EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;
	
				var aX, aY, bX, bY, cX, cY;
				var apx, apy, bpx, bpy, cpx, cpy;
				var cCROSSap, bCROSScp, aCROSSbp;
	
				aX = cx - bx;  aY = cy - by;
				bX = ax - cx;  bY = ay - cy;
				cX = bx - ax;  cY = by - ay;
	
				for ( p = 0; p < n; p ++ ) {
	
					px = contour[ verts[ p ] ].x;
					py = contour[ verts[ p ] ].y;
	
					if ( ( ( px === ax ) && ( py === ay ) ) ||
						 ( ( px === bx ) && ( py === by ) ) ||
						 ( ( px === cx ) && ( py === cy ) ) )	continue;
	
					apx = px - ax;  apy = py - ay;
					bpx = px - bx;  bpy = py - by;
					cpx = px - cx;  cpy = py - cy;
	
					// see if p is inside triangle abc
	
					aCROSSbp = aX * bpy - aY * bpx;
					cCROSSap = cX * apy - cY * apx;
					bCROSScp = bX * cpy - bY * cpx;
	
					if ( ( aCROSSbp >= - Number.EPSILON ) && ( bCROSScp >= - Number.EPSILON ) && ( cCROSSap >= - Number.EPSILON ) ) return false;
	
				}
	
				return true;
	
			}
	
			// takes in an contour array and returns
	
			return function ( contour, indices ) {
	
				var n = contour.length;
	
				if ( n < 3 ) return null;
	
				var result = [],
					verts = [],
					vertIndices = [];
	
				/* we want a counter-clockwise polygon in verts */
	
				var u, v, w;
	
				if ( THREE.ShapeUtils.area( contour ) > 0.0 ) {
	
					for ( v = 0; v < n; v ++ ) verts[ v ] = v;
	
				} else {
	
					for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;
	
				}
	
				var nv = n;
	
				/*  remove nv - 2 vertices, creating 1 triangle every time */
	
				var count = 2 * nv;   /* error detection */
	
				for ( v = nv - 1; nv > 2; ) {
	
					/* if we loop, it is probably a non-simple polygon */
	
					if ( ( count -- ) <= 0 ) {
	
						//** Triangulate: ERROR - probable bad polygon!
	
						//throw ( "Warning, unable to triangulate polygon!" );
						//return null;
						// Sometimes warning is fine, especially polygons are triangulated in reverse.
						console.warn( 'THREE.ShapeUtils: Unable to triangulate polygon! in triangulate()' );
	
						if ( indices ) return vertIndices;
						return result;
	
					}
	
					/* three consecutive vertices in current polygon, <u,v,w> */
	
					u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
					v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
					w = v + 1;  if ( nv <= w ) w = 0;     /* next     */
	
					if ( snip( contour, u, v, w, nv, verts ) ) {
	
						var a, b, c, s, t;
	
						/* true names of the vertices */
	
						a = verts[ u ];
						b = verts[ v ];
						c = verts[ w ];
	
						/* output Triangle */
	
						result.push( [ contour[ a ],
							contour[ b ],
							contour[ c ] ] );
	
	
						vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );
	
						/* remove v from the remaining polygon */
	
						for ( s = v, t = v + 1; t < nv; s ++, t ++ ) {
	
							verts[ s ] = verts[ t ];
	
						}
	
						nv --;
	
						/* reset error detection counter */
	
						count = 2 * nv;
	
					}
	
				}
	
				if ( indices ) return vertIndices;
				return result;
	
			}
	
		} )(),
	
		triangulateShape: function ( contour, holes ) {
	
			function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
	
				// inOtherPt needs to be collinear to the inSegment
				if ( inSegPt1.x !== inSegPt2.x ) {
	
					if ( inSegPt1.x < inSegPt2.x ) {
	
						return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
	
					} else {
	
						return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
	
					}
	
				} else {
	
					if ( inSegPt1.y < inSegPt2.y ) {
	
						return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
	
					} else {
	
						return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
	
					}
	
				}
	
			}
	
			function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
	
				var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
				var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;
	
				var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
				var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;
	
				var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
				var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;
	
				if ( Math.abs( limit ) > Number.EPSILON ) {
	
					// not parallel
	
					var perpSeg2;
					if ( limit > 0 ) {
	
						if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];
	
					} else {
	
						if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
						perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
						if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];
	
					}
	
					// i.e. to reduce rounding errors
					// intersection at endpoint of segment#1?
					if ( perpSeg2 === 0 ) {
	
						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt1 ];
	
					}
					if ( perpSeg2 === limit ) {
	
						if ( ( inExcludeAdjacentSegs ) &&
							 ( ( perpSeg1 === 0 ) || ( perpSeg1 === limit ) ) )		return [];
						return [ inSeg1Pt2 ];
	
					}
					// intersection at endpoint of segment#2?
					if ( perpSeg1 === 0 )		return [ inSeg2Pt1 ];
					if ( perpSeg1 === limit )	return [ inSeg2Pt2 ];
	
					// return real intersection point
					var factorSeg1 = perpSeg2 / limit;
					return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
								y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];
	
				} else {
	
					// parallel or collinear
					if ( ( perpSeg1 !== 0 ) ||
						 ( seg2dy * seg1seg2dx !== seg2dx * seg1seg2dy ) ) 			return [];
	
					// they are collinear or degenerate
					var seg1Pt = ( ( seg1dx === 0 ) && ( seg1dy === 0 ) );	// segment1 is just a point?
					var seg2Pt = ( ( seg2dx === 0 ) && ( seg2dy === 0 ) );	// segment2 is just a point?
					// both segments are points
					if ( seg1Pt && seg2Pt ) {
	
						if ( ( inSeg1Pt1.x !== inSeg2Pt1.x ) ||
							 ( inSeg1Pt1.y !== inSeg2Pt1.y ) )		return [];	// they are distinct  points
						return [ inSeg1Pt1 ];                 						// they are the same point
	
					}
					// segment#1  is a single point
					if ( seg1Pt ) {
	
						if ( ! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
						return [ inSeg1Pt1 ];
	
					}
					// segment#2  is a single point
					if ( seg2Pt ) {
	
						if ( ! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
						return [ inSeg2Pt1 ];
	
					}
	
					// they are collinear segments, which might overlap
					var seg1min, seg1max, seg1minVal, seg1maxVal;
					var seg2min, seg2max, seg2minVal, seg2maxVal;
					if ( seg1dx !== 0 ) {
	
						// the segments are NOT on a vertical line
						if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
	
							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
	
						} else {
	
							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
	
						}
						if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
	
							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
	
						} else {
	
							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
	
						}
	
					} else {
	
						// the segments are on a vertical line
						if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
	
							seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
							seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
	
						} else {
	
							seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
							seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
	
						}
						if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
	
							seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
							seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
	
						} else {
	
							seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
							seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
	
						}
	
					}
					if ( seg1minVal <= seg2minVal ) {
	
						if ( seg1maxVal <  seg2minVal )	return [];
						if ( seg1maxVal === seg2minVal )	{
	
							if ( inExcludeAdjacentSegs )		return [];
							return [ seg2min ];
	
						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
						return	[ seg2min, seg2max ];
	
					} else {
	
						if ( seg1minVal >  seg2maxVal )	return [];
						if ( seg1minVal === seg2maxVal )	{
	
							if ( inExcludeAdjacentSegs )		return [];
							return [ seg1min ];
	
						}
						if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
						return	[ seg1min, seg2max ];
	
					}
	
				}
	
			}
	
			function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
	
				// The order of legs is important
	
				// translation of all points, so that Vertex is at (0,0)
				var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
				var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
				var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;
	
				// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
				var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
				var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;
	
				if ( Math.abs( from2toAngle ) > Number.EPSILON ) {
	
					// angle != 180 deg.
	
					var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
					// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );
	
					if ( from2toAngle > 0 ) {
	
						// main angle < 180 deg.
						return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
	
					} else {
	
						// main angle > 180 deg.
						return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
	
					}
	
				} else {
	
					// angle == 180 deg.
					// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
					return	( from2otherAngle > 0 );
	
				}
	
			}
	
	
			function removeHoles( contour, holes ) {
	
				var shape = contour.concat(); // work on this shape
				var hole;
	
				function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
	
					// Check if hole point lies within angle around shape point
					var lastShapeIdx = shape.length - 1;
	
					var prevShapeIdx = inShapeIdx - 1;
					if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;
	
					var nextShapeIdx = inShapeIdx + 1;
					if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;
	
					var insideAngle = isPointInsideAngle( shape[ inShapeIdx ], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[ inHoleIdx ] );
					if ( ! insideAngle ) {
	
						// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
						return	false;
	
					}
	
					// Check if shape point lies within angle around hole point
					var lastHoleIdx = hole.length - 1;
	
					var prevHoleIdx = inHoleIdx - 1;
					if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;
	
					var nextHoleIdx = inHoleIdx + 1;
					if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;
	
					insideAngle = isPointInsideAngle( hole[ inHoleIdx ], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[ inShapeIdx ] );
					if ( ! insideAngle ) {
	
						// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
						return	false;
	
					}
	
					return	true;
	
				}
	
				function intersectsShapeEdge( inShapePt, inHolePt ) {
	
					// checks for intersections with shape edges
					var sIdx, nextIdx, intersection;
					for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {
	
						nextIdx = sIdx + 1; nextIdx %= shape.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, shape[ sIdx ], shape[ nextIdx ], true );
						if ( intersection.length > 0 )		return	true;
	
					}
	
					return	false;
	
				}
	
				var indepHoles = [];
	
				function intersectsHoleEdge( inShapePt, inHolePt ) {
	
					// checks for intersections with hole edges
					var ihIdx, chkHole,
						hIdx, nextIdx, intersection;
					for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {
	
						chkHole = holes[ indepHoles[ ihIdx ]];
						for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {
	
							nextIdx = hIdx + 1; nextIdx %= chkHole.length;
							intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[ hIdx ], chkHole[ nextIdx ], true );
							if ( intersection.length > 0 )		return	true;
	
						}
	
					}
					return	false;
	
				}
	
				var holeIndex, shapeIndex,
					shapePt, holePt,
					holeIdx, cutKey, failedCuts = [],
					tmpShape1, tmpShape2,
					tmpHole1, tmpHole2;
	
				for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
					indepHoles.push( h );
	
				}
	
				var minShapeIndex = 0;
				var counter = indepHoles.length * 2;
				while ( indepHoles.length > 0 ) {
	
					counter --;
					if ( counter < 0 ) {
	
						console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
						break;
	
					}
	
					// search for shape-vertex and hole-vertex,
					// which can be connected without intersections
					for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {
	
						shapePt = shape[ shapeIndex ];
						holeIndex	= - 1;
	
						// search for hole which can be reached without intersections
						for ( var h = 0; h < indepHoles.length; h ++ ) {
	
							holeIdx = indepHoles[ h ];
	
							// prevent multiple checks
							cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
							if ( failedCuts[ cutKey ] !== undefined )			continue;
	
							hole = holes[ holeIdx ];
							for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
	
								holePt = hole[ h2 ];
								if ( ! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
								if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
								if ( intersectsHoleEdge( shapePt, holePt ) )		continue;
	
								holeIndex = h2;
								indepHoles.splice( h, 1 );
	
								tmpShape1 = shape.slice( 0, shapeIndex + 1 );
								tmpShape2 = shape.slice( shapeIndex );
								tmpHole1 = hole.slice( holeIndex );
								tmpHole2 = hole.slice( 0, holeIndex + 1 );
	
								shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );
	
								minShapeIndex = shapeIndex;
	
								// Debug only, to show the selected cuts
								// glob_CutLines.push( [ shapePt, holePt ] );
	
								break;
	
							}
							if ( holeIndex >= 0 )	break;		// hole-vertex found
	
							failedCuts[ cutKey ] = true;			// remember failure
	
						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found
	
					}
	
				}
	
				return shape; 			/* shape with no holes */
	
			}
	
	
			var i, il, f, face,
				key, index,
				allPointsMap = {};
	
			// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.
	
			var allpoints = contour.concat();
	
			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {
	
				Array.prototype.push.apply( allpoints, holes[ h ] );
	
			}
	
			//console.log( "allpoints",allpoints, allpoints.length );
	
			// prepare all points map
	
			for ( i = 0, il = allpoints.length; i < il; i ++ ) {
	
				key = allpoints[ i ].x + ":" + allpoints[ i ].y;
	
				if ( allPointsMap[ key ] !== undefined ) {
	
					console.warn( "THREE.Shape: Duplicate point", key );
	
				}
	
				allPointsMap[ key ] = i;
	
			}
	
			// remove holes by cutting paths to holes and adding them to the shape
			var shapeWithoutHoles = removeHoles( contour, holes );
	
			var triangles = THREE.ShapeUtils.triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
			//console.log( "triangles",triangles, triangles.length );
	
			// check all face vertices against all points map
	
			for ( i = 0, il = triangles.length; i < il; i ++ ) {
	
				face = triangles[ i ];
	
				for ( f = 0; f < 3; f ++ ) {
	
					key = face[ f ].x + ":" + face[ f ].y;
	
					index = allPointsMap[ key ];
	
					if ( index !== undefined ) {
	
						face[ f ] = index;
	
					}
	
				}
	
			}
	
			return triangles.concat();
	
		},
	
		isClockWise: function ( pts ) {
	
			return THREE.ShapeUtils.area( pts ) < 0;
	
		},
	
		// Bezier Curves formulas obtained from
		// http://en.wikipedia.org/wiki/B%C3%A9zier_curve
	
		// Quad Bezier Functions
	
		b2: ( function () {
	
			function b2p0( t, p ) {
	
				var k = 1 - t;
				return k * k * p;
	
			}
	
			function b2p1( t, p ) {
	
				return 2 * ( 1 - t ) * t * p;
	
			}
	
			function b2p2( t, p ) {
	
				return t * t * p;
	
			}
	
			return function ( t, p0, p1, p2 ) {
	
				return b2p0( t, p0 ) + b2p1( t, p1 ) + b2p2( t, p2 );
	
			};
	
		} )(),
	
		// Cubic Bezier Functions
	
		b3: ( function () {
	
			function b3p0( t, p ) {
	
				var k = 1 - t;
				return k * k * k * p;
	
			}
	
			function b3p1( t, p ) {
	
				var k = 1 - t;
				return 3 * k * k * t * p;
	
			}
	
			function b3p2( t, p ) {
	
				var k = 1 - t;
				return 3 * k * t * t * p;
	
			}
	
			function b3p3( t, p ) {
	
				return t * t * t * p;
	
			}
	
			return function ( t, p0, p1, p2, p3 ) {
	
				return b3p0( t, p0 ) + b3p1( t, p1 ) + b3p2( t, p2 ) + b3p3( t, p3 );
	
			};
	
		} )()
	
	};
	
	// File:src/extras/audio/Audio.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.Audio = function ( listener ) {
	
		THREE.Object3D.call( this );
	
		this.type = 'Audio';
	
		this.context = listener.context;
		this.source = this.context.createBufferSource();
		this.source.onended = this.onEnded.bind( this );
	
		this.gain = this.context.createGain();
		this.gain.connect( this.context.destination );
	
		this.panner = this.context.createPanner();
		this.panner.connect( this.gain );
	
		this.autoplay = false;
	
		this.startTime = 0;
		this.playbackRate = 1;
		this.isPlaying = false;
	
	};
	
	THREE.Audio.prototype = Object.create( THREE.Object3D.prototype );
	THREE.Audio.prototype.constructor = THREE.Audio;
	
	THREE.Audio.prototype.load = function ( file ) {
	
		var scope = this;
	
		var request = new XMLHttpRequest();
		request.open( 'GET', file, true );
		request.responseType = 'arraybuffer';
		request.onload = function ( e ) {
	
			scope.context.decodeAudioData( this.response, function ( buffer ) {
	
				scope.source.buffer = buffer;
	
				if ( scope.autoplay ) scope.play();
	
			} );
	
		};
		request.send();
	
		return this;
	
	};
	
	THREE.Audio.prototype.play = function () {
	
		if ( this.isPlaying === true ) {
	
			console.warn( 'THREE.Audio: Audio is already playing.' );
			return;
	
		}
	
		var source = this.context.createBufferSource();
	
		source.buffer = this.source.buffer;
		source.loop = this.source.loop;
		source.onended = this.source.onended;
		source.start( 0, this.startTime );
		source.playbackRate.value = this.playbackRate;
	
		this.isPlaying = true;
	
		this.source = source;
	
		this.connect();
	
	};
	
	THREE.Audio.prototype.pause = function () {
	
		this.source.stop();
		this.startTime = this.context.currentTime;
	
	};
	
	THREE.Audio.prototype.stop = function () {
	
		this.source.stop();
		this.startTime = 0;
	
	};
	
	THREE.Audio.prototype.connect = function () {
	
		if ( this.filter !== undefined ) {
	
			this.source.connect( this.filter );
			this.filter.connect( this.panner );
	
		} else {
	
			this.source.connect( this.panner );
	
		}
	
	};
	
	THREE.Audio.prototype.disconnect = function () {
	
		if ( this.filter !== undefined ) {
	
			this.source.disconnect( this.filter );
			this.filter.disconnect( this.panner );
	
		} else {
	
			this.source.disconnect( this.panner );
	
		}
	
	};
	
	THREE.Audio.prototype.setFilter = function ( value ) {
	
		if ( this.isPlaying === true ) {
	
			this.disconnect();
			this.filter = value;
			this.connect();
	
		} else {
	
			this.filter = value;
	
		}
	
	};
	
	THREE.Audio.prototype.getFilter = function () {
	
		return this.filter;
	
	};
	
	THREE.Audio.prototype.setPlaybackRate = function ( value ) {
	
		this.playbackRate = value;
	
		if ( this.isPlaying === true ) {
	
			this.source.playbackRate.value = this.playbackRate;
	
		}
	
	};
	
	THREE.Audio.prototype.getPlaybackRate = function () {
	
		return this.playbackRate;
	
	};
	
	THREE.Audio.prototype.onEnded = function() {
	
		this.isPlaying = false;
	
	};
	
	THREE.Audio.prototype.setLoop = function ( value ) {
	
		this.source.loop = value;
	
	};
	
	THREE.Audio.prototype.getLoop = function () {
	
		return this.source.loop;
	
	};
	
	THREE.Audio.prototype.setRefDistance = function ( value ) {
	
		this.panner.refDistance = value;
	
	};
	
	THREE.Audio.prototype.getRefDistance = function () {
	
		return this.panner.refDistance;
	
	};
	
	THREE.Audio.prototype.setRolloffFactor = function ( value ) {
	
		this.panner.rolloffFactor = value;
	
	};
	
	THREE.Audio.prototype.getRolloffFactor = function () {
	
		return this.panner.rolloffFactor;
	
	};
	
	THREE.Audio.prototype.setVolume = function ( value ) {
	
		this.gain.gain.value = value;
	
	};
	
	THREE.Audio.prototype.getVolume = function () {
	
		return this.gain.gain.value;
	
	};
	
	THREE.Audio.prototype.updateMatrixWorld = ( function () {
	
		var position = new THREE.Vector3();
	
		return function updateMatrixWorld( force ) {
	
			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );
	
			position.setFromMatrixPosition( this.matrixWorld );
	
			this.panner.setPosition( position.x, position.y, position.z );
	
		};
	
	} )();
	
	// File:src/extras/audio/AudioListener.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.AudioListener = function () {
	
		THREE.Object3D.call( this );
	
		this.type = 'AudioListener';
	
		this.context = new ( window.AudioContext || window.webkitAudioContext )();
	
	};
	
	THREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );
	THREE.AudioListener.prototype.constructor = THREE.AudioListener;
	
	THREE.AudioListener.prototype.updateMatrixWorld = ( function () {
	
		var position = new THREE.Vector3();
		var quaternion = new THREE.Quaternion();
		var scale = new THREE.Vector3();
	
		var orientation = new THREE.Vector3();
	
		return function updateMatrixWorld( force ) {
	
			THREE.Object3D.prototype.updateMatrixWorld.call( this, force );
	
			var listener = this.context.listener;
			var up = this.up;
	
			this.matrixWorld.decompose( position, quaternion, scale );
	
			orientation.set( 0, 0, - 1 ).applyQuaternion( quaternion );
	
			listener.setPosition( position.x, position.y, position.z );
			listener.setOrientation( orientation.x, orientation.y, orientation.z, up.x, up.y, up.z );
	
		};
	
	} )();
	
	// File:src/extras/core/Curve.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Extensible curve object
	 *
	 * Some common of Curve methods
	 * .getPoint(t), getTangent(t)
	 * .getPointAt(u), getTagentAt(u)
	 * .getPoints(), .getSpacedPoints()
	 * .getLength()
	 * .updateArcLengths()
	 *
	 * This following classes subclasses THREE.Curve:
	 *
	 * -- 2d classes --
	 * THREE.LineCurve
	 * THREE.QuadraticBezierCurve
	 * THREE.CubicBezierCurve
	 * THREE.SplineCurve
	 * THREE.ArcCurve
	 * THREE.EllipseCurve
	 *
	 * -- 3d classes --
	 * THREE.LineCurve3
	 * THREE.QuadraticBezierCurve3
	 * THREE.CubicBezierCurve3
	 * THREE.SplineCurve3
	 * THREE.ClosedSplineCurve3
	 *
	 * A series of curves can be represented as a THREE.CurvePath
	 *
	 **/
	
	/**************************************************************
	 *	Abstract Curve base class
	 **************************************************************/
	
	THREE.Curve = function () {
	
	};
	
	THREE.Curve.prototype = {
	
		constructor: THREE.Curve,
	
		// Virtual base class method to overwrite and implement in subclasses
		//	- t [0 .. 1]
	
		getPoint: function ( t ) {
	
			console.warn( "THREE.Curve: Warning, getPoint() not implemented!" );
			return null;
	
		},
	
		// Get point at relative position in curve according to arc length
		// - u [0 .. 1]
	
		getPointAt: function ( u ) {
	
			var t = this.getUtoTmapping( u );
			return this.getPoint( t );
	
		},
	
		// Get sequence of points using getPoint( t )
	
		getPoints: function ( divisions ) {
	
			if ( ! divisions ) divisions = 5;
	
			var d, pts = [];
	
			for ( d = 0; d <= divisions; d ++ ) {
	
				pts.push( this.getPoint( d / divisions ) );
	
			}
	
			return pts;
	
		},
	
		// Get sequence of points using getPointAt( u )
	
		getSpacedPoints: function ( divisions ) {
	
			if ( ! divisions ) divisions = 5;
	
			var d, pts = [];
	
			for ( d = 0; d <= divisions; d ++ ) {
	
				pts.push( this.getPointAt( d / divisions ) );
	
			}
	
			return pts;
	
		},
	
		// Get total curve arc length
	
		getLength: function () {
	
			var lengths = this.getLengths();
			return lengths[ lengths.length - 1 ];
	
		},
	
		// Get list of cumulative segment lengths
	
		getLengths: function ( divisions ) {
	
			if ( ! divisions ) divisions = ( this.__arcLengthDivisions ) ? ( this.__arcLengthDivisions ) : 200;
	
			if ( this.cacheArcLengths
				&& ( this.cacheArcLengths.length === divisions + 1 )
				&& ! this.needsUpdate ) {
	
				//console.log( "cached", this.cacheArcLengths );
				return this.cacheArcLengths;
	
			}
	
			this.needsUpdate = false;
	
			var cache = [];
			var current, last = this.getPoint( 0 );
			var p, sum = 0;
	
			cache.push( 0 );
	
			for ( p = 1; p <= divisions; p ++ ) {
	
				current = this.getPoint ( p / divisions );
				sum += current.distanceTo( last );
				cache.push( sum );
				last = current;
	
			}
	
			this.cacheArcLengths = cache;
	
			return cache; // { sums: cache, sum:sum }; Sum is in the last element.
	
		},
	
		updateArcLengths: function() {
	
			this.needsUpdate = true;
			this.getLengths();
	
		},
	
		// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
	
		getUtoTmapping: function ( u, distance ) {
	
			var arcLengths = this.getLengths();
	
			var i = 0, il = arcLengths.length;
	
			var targetArcLength; // The targeted u distance value to get
	
			if ( distance ) {
	
				targetArcLength = distance;
	
			} else {
	
				targetArcLength = u * arcLengths[ il - 1 ];
	
			}
	
			//var time = Date.now();
	
			// binary search for the index with largest value smaller than target u distance
	
			var low = 0, high = il - 1, comparison;
	
			while ( low <= high ) {
	
				i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats
	
				comparison = arcLengths[ i ] - targetArcLength;
	
				if ( comparison < 0 ) {
	
					low = i + 1;
	
				} else if ( comparison > 0 ) {
	
					high = i - 1;
	
				} else {
	
					high = i;
					break;
	
					// DONE
	
				}
	
			}
	
			i = high;
	
			//console.log('b' , i, low, high, Date.now()- time);
	
			if ( arcLengths[ i ] === targetArcLength ) {
	
				var t = i / ( il - 1 );
				return t;
	
			}
	
			// we could get finer grain at lengths, or use simple interpolation between two points
	
			var lengthBefore = arcLengths[ i ];
			var lengthAfter = arcLengths[ i + 1 ];
	
			var segmentLength = lengthAfter - lengthBefore;
	
			// determine where we are between the 'before' and 'after' points
	
			var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;
	
			// add that fractional amount to t
	
			var t = ( i + segmentFraction ) / ( il - 1 );
	
			return t;
	
		},
	
		// Returns a unit vector tangent at t
		// In case any sub curve does not implement its tangent derivation,
		// 2 points a small delta apart will be used to find its gradient
		// which seems to give a reasonable approximation
	
		getTangent: function( t ) {
	
			var delta = 0.0001;
			var t1 = t - delta;
			var t2 = t + delta;
	
			// Capping in case of danger
	
			if ( t1 < 0 ) t1 = 0;
			if ( t2 > 1 ) t2 = 1;
	
			var pt1 = this.getPoint( t1 );
			var pt2 = this.getPoint( t2 );
	
			var vec = pt2.clone().sub( pt1 );
			return vec.normalize();
	
		},
	
		getTangentAt: function ( u ) {
	
			var t = this.getUtoTmapping( u );
			return this.getTangent( t );
	
		}
	
	}
	
	THREE.Curve.Utils = THREE.CurveUtils; // backwards compatibility
	
	// TODO: Transformation for Curves?
	
	/**************************************************************
	 *	3D Curves
	 **************************************************************/
	
	// A Factory method for creating new curve subclasses
	
	THREE.Curve.create = function ( constructor, getPointFunc ) {
	
		constructor.prototype = Object.create( THREE.Curve.prototype );
		constructor.prototype.constructor = constructor;
		constructor.prototype.getPoint = getPointFunc;
	
		return constructor;
	
	};
	
	// File:src/extras/core/CurvePath.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 **/
	
	/**************************************************************
	 *	Curved Path - a curve path is simply a array of connected
	 *  curves, but retains the api of a curve
	 **************************************************************/
	
	THREE.CurvePath = function () {
	
		this.curves = [];
	
		this.autoClose = false; // Automatically closes the path
	
	};
	
	THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );
	THREE.CurvePath.prototype.constructor = THREE.CurvePath;
	
	THREE.CurvePath.prototype.add = function ( curve ) {
	
		this.curves.push( curve );
	
	};
	
	/*
	THREE.CurvePath.prototype.checkConnection = function() {
		// TODO
		// If the ending of curve is not connected to the starting
		// or the next curve, then, this is not a real path
	};
	*/
	
	THREE.CurvePath.prototype.closePath = function() {
	
		// TODO Test
		// and verify for vector3 (needs to implement equals)
		// Add a line curve if start and end of lines are not connected
		var startPoint = this.curves[ 0 ].getPoint( 0 );
		var endPoint = this.curves[ this.curves.length - 1 ].getPoint( 1 );
	
		if ( ! startPoint.equals( endPoint ) ) {
	
			this.curves.push( new THREE.LineCurve( endPoint, startPoint ) );
	
		}
	
	};
	
	// To get accurate point with reference to
	// entire path distance at time t,
	// following has to be done:
	
	// 1. Length of each sub path have to be known
	// 2. Locate and identify type of curve
	// 3. Get t for the curve
	// 4. Return curve.getPointAt(t')
	
	THREE.CurvePath.prototype.getPoint = function( t ) {
	
		var d = t * this.getLength();
		var curveLengths = this.getCurveLengths();
		var i = 0;
	
		// To think about boundaries points.
	
		while ( i < curveLengths.length ) {
	
			if ( curveLengths[ i ] >= d ) {
	
				var diff = curveLengths[ i ] - d;
				var curve = this.curves[ i ];
	
				var u = 1 - diff / curve.getLength();
	
				return curve.getPointAt( u );
	
			}
	
			i ++;
	
		}
	
		return null;
	
		// loop where sum != 0, sum > d , sum+1 <d
	
	};
	
	/*
	THREE.CurvePath.prototype.getTangent = function( t ) {
	};
	*/
	
	// We cannot use the default THREE.Curve getPoint() with getLength() because in
	// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
	// getPoint() depends on getLength
	
	THREE.CurvePath.prototype.getLength = function() {
	
		var lens = this.getCurveLengths();
		return lens[ lens.length - 1 ];
	
	};
	
	// Compute lengths and cache them
	// We cannot overwrite getLengths() because UtoT mapping uses it.
	
	THREE.CurvePath.prototype.getCurveLengths = function() {
	
		// We use cache values if curves and cache array are same length
	
		if ( this.cacheLengths && this.cacheLengths.length === this.curves.length ) {
	
			return this.cacheLengths;
	
		}
	
		// Get length of sub-curve
		// Push sums into cached array
	
		var lengths = [], sums = 0;
	
		for ( var i = 0, l = this.curves.length; i < l; i ++ ) {
	
			sums += this.curves[ i ].getLength();
			lengths.push( sums );
	
		}
	
		this.cacheLengths = lengths;
	
		return lengths;
	
	};
	
	
	
	/**************************************************************
	 *	Create Geometries Helpers
	 **************************************************************/
	
	/// Generate geometry from path points (for Line or Points objects)
	
	THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {
	
		var pts = this.getPoints( divisions, true );
		return this.createGeometry( pts );
	
	};
	
	// Generate geometry from equidistant sampling along the path
	
	THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {
	
		var pts = this.getSpacedPoints( divisions, true );
		return this.createGeometry( pts );
	
	};
	
	THREE.CurvePath.prototype.createGeometry = function( points ) {
	
		var geometry = new THREE.Geometry();
	
		for ( var i = 0, l = points.length; i < l; i ++ ) {
	
			var point = points[ i ];
			geometry.vertices.push( new THREE.Vector3( point.x, point.y, point.z || 0 ) );
	
		}
	
		return geometry;
	
	};
	
	// File:src/extras/core/Path.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Creates free form 2d path using series of points, lines or curves.
	 *
	 **/
	
	THREE.Path = function ( points ) {
	
		THREE.CurvePath.call( this );
	
		this.actions = [];
	
		if ( points ) {
	
			this.fromPoints( points );
	
		}
	
	};
	
	THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );
	THREE.Path.prototype.constructor = THREE.Path;
	
	// TODO Clean up PATH API
	
	// Create path using straight lines to connect all points
	// - vectors: array of Vector2
	
	THREE.Path.prototype.fromPoints = function ( vectors ) {
	
		this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );
	
		for ( var i = 1, l = vectors.length; i < l; i ++ ) {
	
			this.lineTo( vectors[ i ].x, vectors[ i ].y );
	
		}
	
	};
	
	// startPath() endPath()?
	
	THREE.Path.prototype.moveTo = function ( x, y ) {
	
		this.actions.push( { action: 'moveTo', args: [ x, y ] } );
	
	};
	
	THREE.Path.prototype.lineTo = function ( x, y ) {
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
	
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
		this.curves.push( curve );
	
		this.actions.push( { action: 'lineTo', args: [ x, y ] } );
	
	};
	
	THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
	
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		var curve = new THREE.QuadraticBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCPx, aCPy ),
			new THREE.Vector2( aX, aY )
		);
	
		this.curves.push( curve );
	
		this.actions.push( { action: 'quadraticCurveTo', args: [ aCPx, aCPy, aX, aY ] } );
	
	};
	
	THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ) {
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
	
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		var curve = new THREE.CubicBezierCurve(
			new THREE.Vector2( x0, y0 ),
			new THREE.Vector2( aCP1x, aCP1y ),
			new THREE.Vector2( aCP2x, aCP2y ),
			new THREE.Vector2( aX, aY )
		);
	
		this.curves.push( curve );
	
		this.actions.push( { action: 'bezierCurveTo', args: [ aCP1x, aCP1y, aCP2x, aCP2y, aX, aY ] } );
	
	};
	
	THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {
	
		var args = Array.prototype.slice.call( arguments );
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
	
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		var npts = [ new THREE.Vector2( x0, y0 ) ];
		Array.prototype.push.apply( npts, pts );
	
		var curve = new THREE.SplineCurve( npts );
		this.curves.push( curve );
	
		this.actions.push( { action: 'splineThru', args: args } );
	
	};
	
	// FUTURE: Change the API or follow canvas API?
	
	THREE.Path.prototype.arc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		this.absarc( aX + x0, aY + y0, aRadius,
			aStartAngle, aEndAngle, aClockwise );
	
	 };
	
	 THREE.Path.prototype.absarc = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
		this.absellipse( aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
	 };
	
	THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
		var lastargs = this.actions[ this.actions.length - 1 ].args;
		var x0 = lastargs[ lastargs.length - 2 ];
		var y0 = lastargs[ lastargs.length - 1 ];
	
		this.absellipse( aX + x0, aY + y0, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
	
	 };
	
	
	THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
		var args = [
			aX, aY,
			xRadius, yRadius,
			aStartAngle, aEndAngle,
			aClockwise,
			aRotation || 0 // aRotation is optional.
		];
	
		var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation );
		this.curves.push( curve );
	
		var lastPoint = curve.getPoint( 1 );
		args.push( lastPoint.x );
		args.push( lastPoint.y );
	
		this.actions.push( { action: 'ellipse', args: args } );
	
	 };
	
	THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {
	
		if ( ! divisions ) divisions = 40;
	
		var points = [];
	
		for ( var i = 0; i < divisions; i ++ ) {
	
			points.push( this.getPoint( i / divisions ) );
	
			//if ( !this.getPoint( i / divisions ) ) throw "DIE";
	
		}
	
		// if ( closedPath ) {
		//
		// 	points.push( points[ 0 ] );
		//
		// }
	
		return points;
	
	};
	
	/* Return an array of vectors based on contour of the path */
	
	THREE.Path.prototype.getPoints = function( divisions, closedPath ) {
	
		divisions = divisions || 12;
	
		var b2 = THREE.ShapeUtils.b2;
		var b3 = THREE.ShapeUtils.b3;
	
		var points = [];
	
		var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
			laste, tx, ty;
	
		for ( var i = 0, l = this.actions.length; i < l; i ++ ) {
	
			var item = this.actions[ i ];
	
			var action = item.action;
			var args = item.args;
	
			switch ( action ) {
	
			case 'moveTo':
	
				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );
	
				break;
	
			case 'lineTo':
	
				points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );
	
				break;
	
			case 'quadraticCurveTo':
	
				cpx  = args[ 2 ];
				cpy  = args[ 3 ];
	
				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];
	
				if ( points.length > 0 ) {
	
					laste = points[ points.length - 1 ];
	
					cpx0 = laste.x;
					cpy0 = laste.y;
	
				} else {
	
					laste = this.actions[ i - 1 ].args;
	
					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];
	
				}
	
				for ( var j = 1; j <= divisions; j ++ ) {
	
					var t = j / divisions;
	
					tx = b2( t, cpx0, cpx1, cpx );
					ty = b2( t, cpy0, cpy1, cpy );
	
					points.push( new THREE.Vector2( tx, ty ) );
	
				}
	
				break;
	
			case 'bezierCurveTo':
	
				cpx  = args[ 4 ];
				cpy  = args[ 5 ];
	
				cpx1 = args[ 0 ];
				cpy1 = args[ 1 ];
	
				cpx2 = args[ 2 ];
				cpy2 = args[ 3 ];
	
				if ( points.length > 0 ) {
	
					laste = points[ points.length - 1 ];
	
					cpx0 = laste.x;
					cpy0 = laste.y;
	
				} else {
	
					laste = this.actions[ i - 1 ].args;
	
					cpx0 = laste[ laste.length - 2 ];
					cpy0 = laste[ laste.length - 1 ];
	
				}
	
	
				for ( var j = 1; j <= divisions; j ++ ) {
	
					var t = j / divisions;
	
					tx = b3( t, cpx0, cpx1, cpx2, cpx );
					ty = b3( t, cpy0, cpy1, cpy2, cpy );
	
					points.push( new THREE.Vector2( tx, ty ) );
	
				}
	
				break;
	
			case 'splineThru':
	
				laste = this.actions[ i - 1 ].args;
	
				var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
				var spts = [ last ];
	
				var n = divisions * args[ 0 ].length;
	
				spts = spts.concat( args[ 0 ] );
	
				var spline = new THREE.SplineCurve( spts );
	
				for ( var j = 1; j <= n; j ++ ) {
	
					points.push( spline.getPointAt( j / n ) );
	
				}
	
				break;
	
			case 'arc':
	
				var aX = args[ 0 ], aY = args[ 1 ],
					aRadius = args[ 2 ],
					aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
					aClockwise = !! args[ 5 ];
	
				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;
	
				for ( var j = 1; j <= tdivisions; j ++ ) {
	
					var t = j / tdivisions;
	
					if ( ! aClockwise ) {
	
						t = 1 - t;
	
					}
	
					angle = aStartAngle + t * deltaAngle;
	
					tx = aX + aRadius * Math.cos( angle );
					ty = aY + aRadius * Math.sin( angle );
	
					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);
	
					points.push( new THREE.Vector2( tx, ty ) );
	
				}
	
				//console.log(points);
	
				break;
	
			case 'ellipse':
	
				var aX = args[ 0 ], aY = args[ 1 ],
					xRadius = args[ 2 ],
					yRadius = args[ 3 ],
					aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
					aClockwise = !! args[ 6 ],
					aRotation = args[ 7 ];
	
	
				var deltaAngle = aEndAngle - aStartAngle;
				var angle;
				var tdivisions = divisions * 2;
	
				var cos, sin;
				if ( aRotation !== 0 ) {
	
					cos = Math.cos( aRotation );
					sin = Math.sin( aRotation );
	
				}
	
				for ( var j = 1; j <= tdivisions; j ++ ) {
	
					var t = j / tdivisions;
	
					if ( ! aClockwise ) {
	
						t = 1 - t;
	
					}
	
					angle = aStartAngle + t * deltaAngle;
	
					tx = aX + xRadius * Math.cos( angle );
					ty = aY + yRadius * Math.sin( angle );
	
					if ( aRotation !== 0 ) {
	
						var x = tx, y = ty;
	
						// Rotate the point about the center of the ellipse.
						tx = ( x - aX ) * cos - ( y - aY ) * sin + aX;
						ty = ( x - aX ) * sin + ( y - aY ) * cos + aY;
	
					}
	
					//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);
	
					points.push( new THREE.Vector2( tx, ty ) );
	
				}
	
				//console.log(points);
	
				break;
	
			} // end switch
	
		}
	
	
	
		// Normalize to remove the closing point by default.
		var lastPoint = points[ points.length - 1 ];
		if ( Math.abs( lastPoint.x - points[ 0 ].x ) < Number.EPSILON &&
				 Math.abs( lastPoint.y - points[ 0 ].y ) < Number.EPSILON )
			points.splice( points.length - 1, 1 );
		if ( closedPath ) {
	
			points.push( points[ 0 ] );
	
		}
	
		return points;
	
	};
	
	//
	// Breaks path into shapes
	//
	//	Assumptions (if parameter isCCW==true the opposite holds):
	//	- solid shapes are defined clockwise (CW)
	//	- holes are defined counterclockwise (CCW)
	//
	//	If parameter noHoles==true:
	//  - all subPaths are regarded as solid shapes
	//  - definition order CW/CCW has no relevance
	//
	
	THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {
	
		function extractSubpaths( inActions ) {
	
			var subPaths = [], lastPath = new THREE.Path();
	
			for ( var i = 0, l = inActions.length; i < l; i ++ ) {
	
				var item = inActions[ i ];
	
				var args = item.args;
				var action = item.action;
	
				if ( action === 'moveTo' ) {
	
					if ( lastPath.actions.length !== 0 ) {
	
						subPaths.push( lastPath );
						lastPath = new THREE.Path();
	
					}
	
				}
	
				lastPath[ action ].apply( lastPath, args );
	
			}
	
			if ( lastPath.actions.length !== 0 ) {
	
				subPaths.push( lastPath );
	
			}
	
			// console.log(subPaths);
	
			return	subPaths;
	
		}
	
		function toShapesNoHoles( inSubpaths ) {
	
			var shapes = [];
	
			for ( var i = 0, l = inSubpaths.length; i < l; i ++ ) {
	
				var tmpPath = inSubpaths[ i ];
	
				var tmpShape = new THREE.Shape();
				tmpShape.actions = tmpPath.actions;
				tmpShape.curves = tmpPath.curves;
	
				shapes.push( tmpShape );
	
			}
	
			//console.log("shape", shapes);
	
			return shapes;
	
		}
	
		function isPointInsidePolygon( inPt, inPolygon ) {
	
			var polyLen = inPolygon.length;
	
			// inPt on polygon contour => immediate success    or
			// toggling of inside/outside at every single! intersection point of an edge
			//  with the horizontal line through inPt, left of inPt
			//  not counting lowerY endpoints of edges and whole edges on that line
			var inside = false;
			for ( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
	
				var edgeLowPt  = inPolygon[ p ];
				var edgeHighPt = inPolygon[ q ];
	
				var edgeDx = edgeHighPt.x - edgeLowPt.x;
				var edgeDy = edgeHighPt.y - edgeLowPt.y;
	
				if ( Math.abs( edgeDy ) > Number.EPSILON ) {
	
					// not parallel
					if ( edgeDy < 0 ) {
	
						edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
						edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
	
					}
					if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;
	
					if ( inPt.y === edgeLowPt.y ) {
	
						if ( inPt.x === edgeLowPt.x )		return	true;		// inPt is on contour ?
						// continue;				// no intersection or edgeLowPt => doesn't count !!!
	
					} else {
	
						var perpEdge = edgeDy * ( inPt.x - edgeLowPt.x ) - edgeDx * ( inPt.y - edgeLowPt.y );
						if ( perpEdge === 0 )				return	true;		// inPt is on contour ?
						if ( perpEdge < 0 ) 				continue;
						inside = ! inside;		// true intersection left of inPt
	
					}
	
				} else {
	
					// parallel or collinear
					if ( inPt.y !== edgeLowPt.y ) 		continue;			// parallel
					// edge lies on the same horizontal line as inPt
					if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
						 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
					// continue;
	
				}
	
			}
	
			return	inside;
	
		}
	
		var isClockWise = THREE.ShapeUtils.isClockWise;
	
		var subPaths = extractSubpaths( this.actions );
		if ( subPaths.length === 0 ) return [];
	
		if ( noHoles === true )	return	toShapesNoHoles( subPaths );
	
	
		var solid, tmpPath, tmpShape, shapes = [];
	
		if ( subPaths.length === 1 ) {
	
			tmpPath = subPaths[ 0 ];
			tmpShape = new THREE.Shape();
			tmpShape.actions = tmpPath.actions;
			tmpShape.curves = tmpPath.curves;
			shapes.push( tmpShape );
			return shapes;
	
		}
	
		var holesFirst = ! isClockWise( subPaths[ 0 ].getPoints() );
		holesFirst = isCCW ? ! holesFirst : holesFirst;
	
		// console.log("Holes first", holesFirst);
	
		var betterShapeHoles = [];
		var newShapes = [];
		var newShapeHoles = [];
		var mainIdx = 0;
		var tmpPoints;
	
		newShapes[ mainIdx ] = undefined;
		newShapeHoles[ mainIdx ] = [];
	
		for ( var i = 0, l = subPaths.length; i < l; i ++ ) {
	
			tmpPath = subPaths[ i ];
			tmpPoints = tmpPath.getPoints();
			solid = isClockWise( tmpPoints );
			solid = isCCW ? ! solid : solid;
	
			if ( solid ) {
	
				if ( ( ! holesFirst ) && ( newShapes[ mainIdx ] ) )	mainIdx ++;
	
				newShapes[ mainIdx ] = { s: new THREE.Shape(), p: tmpPoints };
				newShapes[ mainIdx ].s.actions = tmpPath.actions;
				newShapes[ mainIdx ].s.curves = tmpPath.curves;
	
				if ( holesFirst )	mainIdx ++;
				newShapeHoles[ mainIdx ] = [];
	
				//console.log('cw', i);
	
			} else {
	
				newShapeHoles[ mainIdx ].push( { h: tmpPath, p: tmpPoints[ 0 ] } );
	
				//console.log('ccw', i);
	
			}
	
		}
	
		// only Holes? -> probably all Shapes with wrong orientation
		if ( ! newShapes[ 0 ] )	return	toShapesNoHoles( subPaths );
	
	
		if ( newShapes.length > 1 ) {
	
			var ambiguous = false;
			var toChange = [];
	
			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
				betterShapeHoles[ sIdx ] = [];
	
			}
	
			for ( var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
	
				var sho = newShapeHoles[ sIdx ];
	
				for ( var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
	
					var ho = sho[ hIdx ];
					var hole_unassigned = true;
	
					for ( var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
	
						if ( isPointInsidePolygon( ho.p, newShapes[ s2Idx ].p ) ) {
	
							if ( sIdx !== s2Idx )	toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
							if ( hole_unassigned ) {
	
								hole_unassigned = false;
								betterShapeHoles[ s2Idx ].push( ho );
	
							} else {
	
								ambiguous = true;
	
							}
	
						}
	
					}
					if ( hole_unassigned ) {
	
						betterShapeHoles[ sIdx ].push( ho );
	
					}
	
				}
	
			}
			// console.log("ambiguous: ", ambiguous);
			if ( toChange.length > 0 ) {
	
				// console.log("to change: ", toChange);
				if ( ! ambiguous )	newShapeHoles = betterShapeHoles;
	
			}
	
		}
	
		var tmpHoles;
	
		for ( var i = 0, il = newShapes.length; i < il; i ++ ) {
	
			tmpShape = newShapes[ i ].s;
			shapes.push( tmpShape );
			tmpHoles = newShapeHoles[ i ];
	
			for ( var j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
	
				tmpShape.holes.push( tmpHoles[ j ].h );
	
			}
	
		}
	
		//console.log("shape", shapes);
	
		return shapes;
	
	};
	
	// File:src/extras/core/Shape.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 * Defines a 2d shape plane using paths.
	 **/
	
	// STEP 1 Create a path.
	// STEP 2 Turn path into shape.
	// STEP 3 ExtrudeGeometry takes in Shape/Shapes
	// STEP 3a - Extract points from each shape, turn to vertices
	// STEP 3b - Triangulate each shape, add faces.
	
	THREE.Shape = function () {
	
		THREE.Path.apply( this, arguments );
	
		this.holes = [];
	
	};
	
	THREE.Shape.prototype = Object.create( THREE.Path.prototype );
	THREE.Shape.prototype.constructor = THREE.Shape;
	
	// Convenience method to return ExtrudeGeometry
	
	THREE.Shape.prototype.extrude = function ( options ) {
	
		return new THREE.ExtrudeGeometry( this, options );
	
	};
	
	// Convenience method to return ShapeGeometry
	
	THREE.Shape.prototype.makeGeometry = function ( options ) {
	
		return new THREE.ShapeGeometry( this, options );
	
	};
	
	// Get points of holes
	
	THREE.Shape.prototype.getPointsHoles = function ( divisions ) {
	
		var holesPts = [];
	
		for ( var i = 0, l = this.holes.length; i < l; i ++ ) {
	
			holesPts[ i ] = this.holes[ i ].getPoints( divisions );
	
		}
	
		return holesPts;
	
	};
	
	
	// Get points of shape and holes (keypoints based on segments parameter)
	
	THREE.Shape.prototype.extractAllPoints = function ( divisions ) {
	
		return {
	
			shape: this.getPoints( divisions ),
			holes: this.getPointsHoles( divisions )
	
		};
	
	};
	
	THREE.Shape.prototype.extractPoints = function ( divisions ) {
	
		return this.extractAllPoints( divisions );
	
	};
	
	THREE.Shape.Utils = THREE.ShapeUtils; // backwards compatibility
	
	// File:src/extras/curves/LineCurve.js
	
	/**************************************************************
	 *	Line
	 **************************************************************/
	
	THREE.LineCurve = function ( v1, v2 ) {
	
		this.v1 = v1;
		this.v2 = v2;
	
	};
	
	THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.LineCurve.prototype.constructor = THREE.LineCurve;
	
	THREE.LineCurve.prototype.getPoint = function ( t ) {
	
		var point = this.v2.clone().sub( this.v1 );
		point.multiplyScalar( t ).add( this.v1 );
	
		return point;
	
	};
	
	// Line curve is linear, so we can overwrite default getPointAt
	
	THREE.LineCurve.prototype.getPointAt = function ( u ) {
	
		return this.getPoint( u );
	
	};
	
	THREE.LineCurve.prototype.getTangent = function( t ) {
	
		var tangent = this.v2.clone().sub( this.v1 );
	
		return tangent.normalize();
	
	};
	
	// File:src/extras/curves/QuadraticBezierCurve.js
	
	/**************************************************************
	 *	Quadratic Bezier curve
	 **************************************************************/
	
	
	THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {
	
		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
	
	};
	
	THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.QuadraticBezierCurve.prototype.constructor = THREE.QuadraticBezierCurve;
	
	
	THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {
	
		var b2 = THREE.ShapeUtils.b2;
	
		return new THREE.Vector2(
			b2( t, this.v0.x, this.v1.x, this.v2.x ),
			b2( t, this.v0.y, this.v1.y, this.v2.y )
		);
	
	};
	
	
	THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {
	
		var tangentQuadraticBezier = THREE.CurveUtils.tangentQuadraticBezier;
	
		return new THREE.Vector2(
			tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x ),
			tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y )
		).normalize();
	
	};
	
	// File:src/extras/curves/CubicBezierCurve.js
	
	/**************************************************************
	 *	Cubic Bezier curve
	 **************************************************************/
	
	THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {
	
		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;
	
	};
	
	THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.CubicBezierCurve.prototype.constructor = THREE.CubicBezierCurve;
	
	THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {
	
		var b3 = THREE.ShapeUtils.b3;
	
		return new THREE.Vector2( 
			b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		);
	
	};
	
	THREE.CubicBezierCurve.prototype.getTangent = function( t ) {
	
		var tangentCubicBezier = THREE.CurveUtils.tangentCubicBezier;
	
		return new THREE.Vector2( 
			tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
			tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y )
		).normalize();
	
	};
	
	// File:src/extras/curves/SplineCurve.js
	
	/**************************************************************
	 *	Spline curve
	 **************************************************************/
	
	THREE.SplineCurve = function ( points /* array of Vector2 */ ) {
	
		this.points = ( points == undefined ) ? [] : points;
	
	};
	
	THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.SplineCurve.prototype.constructor = THREE.SplineCurve;
	
	THREE.SplineCurve.prototype.getPoint = function ( t ) {
	
		var points = this.points;
		var point = ( points.length - 1 ) * t;
	
		var intPoint = Math.floor( point );
		var weight = point - intPoint;
	
		var point0 = points[ intPoint === 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
		var interpolate = THREE.CurveUtils.interpolate;
	
		return new THREE.Vector2(
			interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
			interpolate( point0.y, point1.y, point2.y, point3.y, weight )
		);
	
	};
	
	// File:src/extras/curves/EllipseCurve.js
	
	/**************************************************************
	 *	Ellipse curve
	 **************************************************************/
	
	THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation ) {
	
		this.aX = aX;
		this.aY = aY;
	
		this.xRadius = xRadius;
		this.yRadius = yRadius;
	
		this.aStartAngle = aStartAngle;
		this.aEndAngle = aEndAngle;
	
		this.aClockwise = aClockwise;
		
		this.aRotation = aRotation || 0;
	
	};
	
	THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );
	THREE.EllipseCurve.prototype.constructor = THREE.EllipseCurve;
	
	THREE.EllipseCurve.prototype.getPoint = function ( t ) {
	
		var deltaAngle = this.aEndAngle - this.aStartAngle;
	
		if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
		if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;
	
		var angle;
	
		if ( this.aClockwise === true ) {
	
			angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );
	
		} else {
	
			angle = this.aStartAngle + t * deltaAngle;
	
		}
		
		var x = this.aX + this.xRadius * Math.cos( angle );
		var y = this.aY + this.yRadius * Math.sin( angle );
	
		if ( this.aRotation !== 0 ) {
	
			var cos = Math.cos( this.aRotation );
			var sin = Math.sin( this.aRotation );
	
			var tx = x, ty = y;
	
			// Rotate the point about the center of the ellipse.
			x = ( tx - this.aX ) * cos - ( ty - this.aY ) * sin + this.aX;
			y = ( tx - this.aX ) * sin + ( ty - this.aY ) * cos + this.aY;
	
		}
	
		return new THREE.Vector2( x, y );
	
	};
	
	// File:src/extras/curves/ArcCurve.js
	
	/**************************************************************
	 *	Arc curve
	 **************************************************************/
	
	THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {
	
		THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
	
	};
	
	THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );
	THREE.ArcCurve.prototype.constructor = THREE.ArcCurve;
	
	// File:src/extras/curves/LineCurve3.js
	
	/**************************************************************
	 *	Line3D
	 **************************************************************/
	
	THREE.LineCurve3 = THREE.Curve.create(
	
		function ( v1, v2 ) {
	
			this.v1 = v1;
			this.v2 = v2;
	
		},
	
		function ( t ) {
	
			var vector = new THREE.Vector3();
	
			vector.subVectors( this.v2, this.v1 ); // diff
			vector.multiplyScalar( t );
			vector.add( this.v1 );
	
			return vector;
	
		}
	
	);
	
	// File:src/extras/curves/QuadraticBezierCurve3.js
	
	/**************************************************************
	 *	Quadratic Bezier 3D curve
	 **************************************************************/
	
	THREE.QuadraticBezierCurve3 = THREE.Curve.create(
	
		function ( v0, v1, v2 ) {
	
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
	
		},
	
		function ( t ) {
	
			var b2 = THREE.ShapeUtils.b2;		
	
			return new THREE.Vector3(
				b2( t, this.v0.x, this.v1.x, this.v2.x ),
				b2( t, this.v0.y, this.v1.y, this.v2.y ),
				b2( t, this.v0.z, this.v1.z, this.v2.z )
			);
	
		}
	
	);
	
	// File:src/extras/curves/CubicBezierCurve3.js
	
	/**************************************************************
	 *	Cubic Bezier 3D curve
	 **************************************************************/
	
	THREE.CubicBezierCurve3 = THREE.Curve.create(
	
		function ( v0, v1, v2, v3 ) {
	
			this.v0 = v0;
			this.v1 = v1;
			this.v2 = v2;
			this.v3 = v3;
	
		},
	
		function ( t ) {
	
			var b3 = THREE.ShapeUtils.b3;
	
			return new THREE.Vector3(
				b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x ),
				b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y ),
				b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z )
			);
	
		}
	
	);
	
	// File:src/extras/curves/SplineCurve3.js
	
	/**************************************************************
	 *	Spline 3D curve
	 **************************************************************/
	
	
	THREE.SplineCurve3 = THREE.Curve.create(
	
		function ( points /* array of Vector3 */ ) {
	
			console.warn( 'THREE.SplineCurve3 will be deprecated. Please use THREE.CatmullRomCurve3' );
			this.points = ( points == undefined ) ? [] : points;
	
		},
	
		function ( t ) {
	
			var points = this.points;
			var point = ( points.length - 1 ) * t;
	
			var intPoint = Math.floor( point );
			var weight = point - intPoint;
	
			var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
			var point1 = points[ intPoint ];
			var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
			var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];
	
			var interpolate = THREE.CurveUtils.interpolate;
	
			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);
	
		}
	
	);
	
	// File:src/extras/curves/CatmullRomCurve3.js
	
	/**
	 * @author zz85 https://github.com/zz85
	 *
	 * Centripetal CatmullRom Curve - which is useful for avoiding
	 * cusps and self-intersections in non-uniform catmull rom curves.
	 * http://www.cemyuksel.com/research/catmullrom_param/catmullrom.pdf
	 *
	 * curve.type accepts centripetal(default), chordal and catmullrom
	 * curve.tension is used for catmullrom which defaults to 0.5
	 */
	
	THREE.CatmullRomCurve3 = ( function() {
	
		var
			tmp = new THREE.Vector3(),
			px = new CubicPoly(),
			py = new CubicPoly(),
			pz = new CubicPoly();
	
		/*
		Based on an optimized c++ solution in
		 - http://stackoverflow.com/questions/9489736/catmull-rom-curve-with-no-cusps-and-no-self-intersections/
		 - http://ideone.com/NoEbVM
	
		This CubicPoly class could be used for reusing some variables and calculations,
		but for three.js curve use, it could be possible inlined and flatten into a single function call
		which can be placed in CurveUtils.
		*/
	
		function CubicPoly() {
	
		}
	
		/*
		 * Compute coefficients for a cubic polynomial
		 *   p(s) = c0 + c1*s + c2*s^2 + c3*s^3
		 * such that
		 *   p(0) = x0, p(1) = x1
		 *  and
		 *   p'(0) = t0, p'(1) = t1.
		 */
		CubicPoly.prototype.init = function( x0, x1, t0, t1 ) {
	
			this.c0 = x0;
			this.c1 = t0;
			this.c2 = - 3 * x0 + 3 * x1 - 2 * t0 - t1;
			this.c3 = 2 * x0 - 2 * x1 + t0 + t1;
	
		};
	
		CubicPoly.prototype.initNonuniformCatmullRom = function( x0, x1, x2, x3, dt0, dt1, dt2 ) {
	
			// compute tangents when parameterized in [t1,t2]
			var t1 = ( x1 - x0 ) / dt0 - ( x2 - x0 ) / ( dt0 + dt1 ) + ( x2 - x1 ) / dt1;
			var t2 = ( x2 - x1 ) / dt1 - ( x3 - x1 ) / ( dt1 + dt2 ) + ( x3 - x2 ) / dt2;
	
			// rescale tangents for parametrization in [0,1]
			t1 *= dt1;
			t2 *= dt1;
	
			// initCubicPoly
			this.init( x1, x2, t1, t2 );
	
		};
	
		// standard Catmull-Rom spline: interpolate between x1 and x2 with previous/following points x1/x4
		CubicPoly.prototype.initCatmullRom = function( x0, x1, x2, x3, tension ) {
	
			this.init( x1, x2, tension * ( x2 - x0 ), tension * ( x3 - x1 ) );
	
		};
	
		CubicPoly.prototype.calc = function( t ) {
	
			var t2 = t * t;
			var t3 = t2 * t;
			return this.c0 + this.c1 * t + this.c2 * t2 + this.c3 * t3;
	
		};
	
		// Subclass Three.js curve
		return THREE.Curve.create(
	
			function ( p /* array of Vector3 */ ) {
	
				this.points = p || [];
	
			},
	
			function ( t ) {
	
				var points = this.points,
					point, intPoint, weight, l;
	
				l = points.length;
	
				if ( l < 2 ) console.log( 'duh, you need at least 2 points' );
	
				point = ( l - 1 ) * t;
				intPoint = Math.floor( point );
				weight = point - intPoint;
	
				if ( weight === 0 && intPoint === l - 1 ) {
	
					intPoint = l - 2;
					weight = 1;
	
				}
	
				var p0, p1, p2, p3;
	
				if ( intPoint === 0 ) {
	
					// extrapolate first point
					tmp.subVectors( points[ 0 ], points[ 1 ] ).add( points[ 0 ] );
					p0 = tmp;
	
				} else {
	
					p0 = points[ intPoint - 1 ];
	
				}
	
				p1 = points[ intPoint ];
				p2 = points[ intPoint + 1 ];
	
				if ( intPoint + 2 < l ) {
	
					p3 = points[ intPoint + 2 ]
	
				} else {
	
					// extrapolate last point
					tmp.subVectors( points[ l - 1 ], points[ l - 2 ] ).add( points[ l - 2 ] );
					p3 = tmp;
	
				}
	
				if ( this.type === undefined || this.type === 'centripetal' || this.type === 'chordal' ) {
	
					// init Centripetal / Chordal Catmull-Rom
					var pow = this.type === 'chordal' ? 0.5 : 0.25;
					var dt0 = Math.pow( p0.distanceToSquared( p1 ), pow );
					var dt1 = Math.pow( p1.distanceToSquared( p2 ), pow );
					var dt2 = Math.pow( p2.distanceToSquared( p3 ), pow );
	
					// safety check for repeated points
					if ( dt1 < 1e-4 ) dt1 = 1.0;
					if ( dt0 < 1e-4 ) dt0 = dt1;
					if ( dt2 < 1e-4 ) dt2 = dt1;
	
					px.initNonuniformCatmullRom( p0.x, p1.x, p2.x, p3.x, dt0, dt1, dt2 );
					py.initNonuniformCatmullRom( p0.y, p1.y, p2.y, p3.y, dt0, dt1, dt2 );
					pz.initNonuniformCatmullRom( p0.z, p1.z, p2.z, p3.z, dt0, dt1, dt2 );
	
				} else if ( this.type === 'catmullrom' ) {
	
					var tension = this.tension !== undefined ? this.tension : 0.5;
					px.initCatmullRom( p0.x, p1.x, p2.x, p3.x, tension );
					py.initCatmullRom( p0.y, p1.y, p2.y, p3.y, tension );
					pz.initCatmullRom( p0.z, p1.z, p2.z, p3.z, tension );
	
				}
	
				var v = new THREE.Vector3(
					px.calc( weight ),
					py.calc( weight ),
					pz.calc( weight )
				);
	
				return v;
	
			}
	
		);
	
	} )();
	
	// File:src/extras/curves/ClosedSplineCurve3.js
	
	/**************************************************************
	 *	Closed Spline 3D curve
	 **************************************************************/
	
	
	THREE.ClosedSplineCurve3 = THREE.Curve.create(
	
		function ( points /* array of Vector3 */ ) {
	
			this.points = ( points == undefined ) ? [] : points;
	
		},
	
		function ( t ) {
	
			var points = this.points;
			var point = ( points.length - 0 ) * t; // This needs to be from 0-length +1
	
			var intPoint = Math.floor( point );
			var weight = point - intPoint;
	
			intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;
	
			var point0 = points[ ( intPoint - 1 ) % points.length ];
			var point1 = points[ ( intPoint     ) % points.length ];
			var point2 = points[ ( intPoint + 1 ) % points.length ];
			var point3 = points[ ( intPoint + 2 ) % points.length ];
	
			var interpolate = THREE.CurveUtils.interpolate;
	
			return new THREE.Vector3(
				interpolate( point0.x, point1.x, point2.x, point3.x, weight ),
				interpolate( point0.y, point1.y, point2.y, point3.y, weight ),
				interpolate( point0.z, point1.z, point2.z, point3.z, weight )
			);
	
		}
	
	);
	
	// File:src/extras/geometries/BoxGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
	 */
	
	THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'BoxGeometry';
	
		this.parameters = {
			width: width,
			height: height,
			depth: depth,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			depthSegments: depthSegments
		};
	
		this.widthSegments = widthSegments || 1;
		this.heightSegments = heightSegments || 1;
		this.depthSegments = depthSegments || 1;
	
		var scope = this;
	
		var width_half = width / 2;
		var height_half = height / 2;
		var depth_half = depth / 2;
	
		buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
		buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
		buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
		buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
		buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
		buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz
	
		function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {
	
			var w, ix, iy,
			gridX = scope.widthSegments,
			gridY = scope.heightSegments,
			width_half = width / 2,
			height_half = height / 2,
			offset = scope.vertices.length;
	
			if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {
	
				w = 'z';
	
			} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {
	
				w = 'y';
				gridY = scope.depthSegments;
	
			} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {
	
				w = 'x';
				gridX = scope.depthSegments;
	
			}
	
			var gridX1 = gridX + 1,
			gridY1 = gridY + 1,
			segment_width = width / gridX,
			segment_height = height / gridY,
			normal = new THREE.Vector3();
	
			normal[ w ] = depth > 0 ? 1 : - 1;
	
			for ( iy = 0; iy < gridY1; iy ++ ) {
	
				for ( ix = 0; ix < gridX1; ix ++ ) {
	
					var vector = new THREE.Vector3();
					vector[ u ] = ( ix * segment_width - width_half ) * udir;
					vector[ v ] = ( iy * segment_height - height_half ) * vdir;
					vector[ w ] = depth;
	
					scope.vertices.push( vector );
	
				}
	
			}
	
			for ( iy = 0; iy < gridY; iy ++ ) {
	
				for ( ix = 0; ix < gridX; ix ++ ) {
	
					var a = ix + gridX1 * iy;
					var b = ix + gridX1 * ( iy + 1 );
					var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					var d = ( ix + 1 ) + gridX1 * iy;
	
					var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
					var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
					var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
					var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );
	
					var face = new THREE.Face3( a + offset, b + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;
	
					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
	
					face = new THREE.Face3( b + offset, c + offset, d + offset );
					face.normal.copy( normal );
					face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
					face.materialIndex = materialIndex;
	
					scope.faces.push( face );
					scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
	
				}
	
			}
	
		}
	
		this.mergeVertices();
	
	};
	
	THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.BoxGeometry.prototype.constructor = THREE.BoxGeometry;
	
	THREE.BoxGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.BoxGeometry(
			parameters.width,
			parameters.height,
			parameters.depth,
			parameters.widthSegments,
			parameters.heightSegments,
			parameters.depthSegments
		);
	
	};
	
	THREE.CubeGeometry = THREE.BoxGeometry; // backwards compatibility
	
	// File:src/extras/geometries/CircleGeometry.js
	
	/**
	 * @author hughes
	 */
	
	THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'CircleGeometry';
	
		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		this.fromBufferGeometry( new THREE.CircleBufferGeometry( radius, segments, thetaStart, thetaLength ) );
	
	};
	
	THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CircleGeometry.prototype.constructor = THREE.CircleGeometry;
	
	THREE.CircleGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.CircleGeometry(
			parameters.radius,
			parameters.segments,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/CircleBufferGeometry.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 */
	
	THREE.CircleBufferGeometry = function ( radius, segments, thetaStart, thetaLength ) {
	
		THREE.BufferGeometry.call( this );
	
		this.type = 'CircleBufferGeometry';
	
		this.parameters = {
			radius: radius,
			segments: segments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		radius = radius || 50;
		segments = segments !== undefined ? Math.max( 3, segments ) : 8;
	
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
		var vertices = segments + 2;
	
		var positions = new Float32Array( vertices * 3 );
		var normals = new Float32Array( vertices * 3 );
		var uvs = new Float32Array( vertices * 2 );
	
		// center data is already zero, but need to set a few extras
		normals[ 2 ] = 1.0;
		uvs[ 0 ] = 0.5;
		uvs[ 1 ] = 0.5;
	
		for ( var s = 0, i = 3, ii = 2 ; s <= segments; s ++, i += 3, ii += 2 ) {
	
			var segment = thetaStart + s / segments * thetaLength;
	
			positions[ i ] = radius * Math.cos( segment );
			positions[ i + 1 ] = radius * Math.sin( segment );
	
			normals[ i + 2 ] = 1; // normal z
	
			uvs[ ii ] = ( positions[ i ] / radius + 1 ) / 2;
			uvs[ ii + 1 ] = ( positions[ i + 1 ] / radius + 1 ) / 2;
	
		}
	
		var indices = [];
	
		for ( var i = 1; i <= segments; i ++ ) {
	
			indices.push( i, i + 1, 0 );
	
		}
	
		this.setIndex( new THREE.BufferAttribute( new Uint16Array( indices ), 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
	
		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
	
	};
	
	THREE.CircleBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.CircleBufferGeometry.prototype.constructor = THREE.CircleBufferGeometry;
	
	THREE.CircleBufferGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.CircleBufferGeometry(
			parameters.radius,
			parameters.segments,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/CylinderGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'CylinderGeometry';
	
		this.parameters = {
			radiusTop: radiusTop,
			radiusBottom: radiusBottom,
			height: height,
			radialSegments: radialSegments,
			heightSegments: heightSegments,
			openEnded: openEnded,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		radiusTop = radiusTop !== undefined ? radiusTop : 20;
		radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
		height = height !== undefined ? height : 100;
	
		radialSegments = radialSegments || 8;
		heightSegments = heightSegments || 1;
	
		openEnded = openEnded !== undefined ? openEnded : false;
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : 2 * Math.PI;
	
		var heightHalf = height / 2;
	
		var x, y, vertices = [], uvs = [];
	
		for ( y = 0; y <= heightSegments; y ++ ) {
	
			var verticesRow = [];
			var uvsRow = [];
	
			var v = y / heightSegments;
			var radius = v * ( radiusBottom - radiusTop ) + radiusTop;
	
			for ( x = 0; x <= radialSegments; x ++ ) {
	
				var u = x / radialSegments;
	
				var vertex = new THREE.Vector3();
				vertex.x = radius * Math.sin( u * thetaLength + thetaStart );
				vertex.y = - v * height + heightHalf;
				vertex.z = radius * Math.cos( u * thetaLength + thetaStart );
	
				this.vertices.push( vertex );
	
				verticesRow.push( this.vertices.length - 1 );
				uvsRow.push( new THREE.Vector2( u, 1 - v ) );
	
			}
	
			vertices.push( verticesRow );
			uvs.push( uvsRow );
	
		}
	
		var tanTheta = ( radiusBottom - radiusTop ) / height;
		var na, nb;
	
		for ( x = 0; x < radialSegments; x ++ ) {
	
			if ( radiusTop !== 0 ) {
	
				na = this.vertices[ vertices[ 0 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();
	
			} else {
	
				na = this.vertices[ vertices[ 1 ][ x ] ].clone();
				nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();
	
			}
	
			na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
			nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();
	
			for ( y = 0; y < heightSegments; y ++ ) {
	
				var v1 = vertices[ y ][ x ];
				var v2 = vertices[ y + 1 ][ x ];
				var v3 = vertices[ y + 1 ][ x + 1 ];
				var v4 = vertices[ y ][ x + 1 ];
	
				var n1 = na.clone();
				var n2 = na.clone();
				var n3 = nb.clone();
				var n4 = nb.clone();
	
				var uv1 = uvs[ y ][ x ].clone();
				var uv2 = uvs[ y + 1 ][ x ].clone();
				var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
				var uv4 = uvs[ y ][ x + 1 ].clone();
	
				this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );
	
				this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );
	
			}
	
		}
	
		// top cap
	
		if ( openEnded === false && radiusTop > 0 ) {
	
			this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );
	
			for ( x = 0; x < radialSegments; x ++ ) {
	
				var v1 = vertices[ 0 ][ x ];
				var v2 = vertices[ 0 ][ x + 1 ];
				var v3 = this.vertices.length - 1;
	
				var n1 = new THREE.Vector3( 0, 1, 0 );
				var n2 = new THREE.Vector3( 0, 1, 0 );
				var n3 = new THREE.Vector3( 0, 1, 0 );
	
				var uv1 = uvs[ 0 ][ x ].clone();
				var uv2 = uvs[ 0 ][ x + 1 ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 0 );
	
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 1 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );
	
			}
	
		}
	
		// bottom cap
	
		if ( openEnded === false && radiusBottom > 0 ) {
	
			this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );
	
			for ( x = 0; x < radialSegments; x ++ ) {
	
				var v1 = vertices[ heightSegments ][ x + 1 ];
				var v2 = vertices[ heightSegments ][ x ];
				var v3 = this.vertices.length - 1;
	
				var n1 = new THREE.Vector3( 0, - 1, 0 );
				var n2 = new THREE.Vector3( 0, - 1, 0 );
				var n3 = new THREE.Vector3( 0, - 1, 0 );
	
				var uv1 = uvs[ heightSegments ][ x + 1 ].clone();
				var uv2 = uvs[ heightSegments ][ x ].clone();
				var uv3 = new THREE.Vector2( uv2.x, 1 );
	
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ], undefined, 2 ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );
	
			}
	
		}
	
		this.computeFaceNormals();
	
	};
	
	THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.CylinderGeometry.prototype.constructor = THREE.CylinderGeometry;
	
	THREE.CylinderGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.CylinderGeometry(
			parameters.radiusTop,
			parameters.radiusBottom,
			parameters.height,
			parameters.radialSegments,
			parameters.heightSegments,
			parameters.openEnded,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/EdgesGeometry.js
	
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.EdgesGeometry = function ( geometry, thresholdAngle ) {
	
		THREE.BufferGeometry.call( this );
	
		thresholdAngle = ( thresholdAngle !== undefined ) ? thresholdAngle : 1;
	
		var thresholdDot = Math.cos( THREE.Math.degToRad( thresholdAngle ) );
	
		var edge = [ 0, 0 ], hash = {};
	
		function sortFunction( a, b ) {
	
			return a - b;
	
		}
	
		var keys = [ 'a', 'b', 'c' ];
	
		var geometry2;
	
		if ( geometry instanceof THREE.BufferGeometry ) {
	
			geometry2 = new THREE.Geometry();
			geometry2.fromBufferGeometry( geometry );
	
		} else {
	
			geometry2 = geometry.clone();
	
		}
	
		geometry2.mergeVertices();
		geometry2.computeFaceNormals();
	
		var vertices = geometry2.vertices;
		var faces = geometry2.faces;
	
		for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
			var face = faces[ i ];
	
			for ( var j = 0; j < 3; j ++ ) {
	
				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );
	
				var key = edge.toString();
	
				if ( hash[ key ] === undefined ) {
	
					hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
	
				} else {
	
					hash[ key ].face2 = i;
	
				}
	
			}
	
		}
	
		var coords = [];
	
		for ( var key in hash ) {
	
			var h = hash[ key ];
	
			if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) <= thresholdDot ) {
	
				var vertex = vertices[ h.vert1 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );
	
				vertex = vertices[ h.vert2 ];
				coords.push( vertex.x );
				coords.push( vertex.y );
				coords.push( vertex.z );
	
			}
	
		}
	
		this.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( coords ), 3 ) );
	
	};
	
	THREE.EdgesGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.EdgesGeometry.prototype.constructor = THREE.EdgesGeometry;
	
	// File:src/extras/geometries/ExtrudeGeometry.js
	
	/**
	 * @author zz85 / http://www.lab4games.net/zz85/blog
	 *
	 * Creates extruded geometry from a path shape.
	 *
	 * parameters = {
	 *
	 *  curveSegments: <int>, // number of points on the curves
	 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segments of extrude spline too
	 *  amount: <int>, // Depth to extrude the shape
	 *
	 *  bevelEnabled: <bool>, // turn on bevel
	 *  bevelThickness: <float>, // how deep into the original shape bevel goes
	 *  bevelSize: <float>, // how far from shape outline is bevel
	 *  bevelSegments: <int>, // number of bevel layers
	 *
	 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
	 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
	 *
	 *  uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/
	
	THREE.ExtrudeGeometry = function ( shapes, options ) {
	
		if ( typeof( shapes ) === "undefined" ) {
	
			shapes = [];
			return;
	
		}
	
		THREE.Geometry.call( this );
	
		this.type = 'ExtrudeGeometry';
	
		shapes = Array.isArray( shapes ) ? shapes : [ shapes ];
	
		this.addShapeList( shapes, options );
	
		this.computeFaceNormals();
	
		// can't really use automatic vertex normals
		// as then front and back sides get smoothed too
		// should do separate smoothing just for sides
	
		//this.computeVertexNormals();
	
		//console.log( "took", ( Date.now() - startTime ) );
	
	};
	
	THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ExtrudeGeometry.prototype.constructor = THREE.ExtrudeGeometry;
	
	THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
	
		var sl = shapes.length;
	
		for ( var s = 0; s < sl; s ++ ) {
	
			var shape = shapes[ s ];
			this.addShape( shape, options );
	
		}
	
	};
	
	THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {
	
		var amount = options.amount !== undefined ? options.amount : 100;
	
		var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
		var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
		var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;
	
		var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false
	
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
	
		var steps = options.steps !== undefined ? options.steps : 1;
	
		var extrudePath = options.extrudePath;
		var extrudePts, extrudeByPath = false;
	
		// Use default WorldUVGenerator if no UV generators are specified.
		var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;
	
		var splineTube, binormal, normal, position2;
		if ( extrudePath ) {
	
			extrudePts = extrudePath.getSpacedPoints( steps );
	
			extrudeByPath = true;
			bevelEnabled = false; // bevels not supported for path extrusion
	
			// SETUP TNB variables
	
			// Reuse TNB from TubeGeomtry for now.
			// TODO1 - have a .isClosed in spline?
	
			splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames( extrudePath, steps, false );
	
			// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);
	
			binormal = new THREE.Vector3();
			normal = new THREE.Vector3();
			position2 = new THREE.Vector3();
	
		}
	
		// Safeguards if bevels are not enabled
	
		if ( ! bevelEnabled ) {
	
			bevelSegments = 0;
			bevelThickness = 0;
			bevelSize = 0;
	
		}
	
		// Variables initialization
	
		var ahole, h, hl; // looping of holes
		var scope = this;
	
		var shapesOffset = this.vertices.length;
	
		var shapePoints = shape.extractPoints( curveSegments );
	
		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;
	
		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );
	
		if ( reverse ) {
	
			vertices = vertices.reverse();
	
			// Maybe we should also check if holes are in the opposite direction, just to be safe ...
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
	
				if ( THREE.ShapeUtils.isClockWise( ahole ) ) {
	
					holes[ h ] = ahole.reverse();
	
				}
	
			}
	
			reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!
	
		}
	
	
		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );
	
		/* Vertices */
	
		var contour = vertices; // vertices has all points but contour has only points of circumference
	
		for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
			ahole = holes[ h ];
	
			vertices = vertices.concat( ahole );
	
		}
	
	
		function scalePt2 ( pt, vec, size ) {
	
			if ( ! vec ) console.error( "THREE.ExtrudeGeometry: vec does not exist" );
	
			return vec.clone().multiplyScalar( size ).add( pt );
	
		}
	
		var b, bs, t, z,
			vert, vlen = vertices.length,
			face, flen = faces.length;
	
	
		// Find directions for point movement
	
	
		function getBevelVec( inPt, inPrev, inNext ) {
	
			// computes for inPt the corresponding point inPt' on a new contour
			//   shifted by 1 unit (length of normalized vector) to the left
			// if we walk along contour clockwise, this new contour is outside the old one
			//
			// inPt' is the intersection of the two lines parallel to the two
			//  adjacent edges of inPt at a distance of 1 unit on the left side.
	
			var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt
	
			// good reading for geometry algorithms (here: line-line intersection)
			// http://geomalgorithms.com/a05-_intersect-1.html
	
			var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
			var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
	
			var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
	
			// check for collinear edges
			var collinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
			if ( Math.abs( collinear0 ) > Number.EPSILON ) {
	
				// not collinear
	
				// length of vectors for normalizing
	
				var v_prev_len = Math.sqrt( v_prev_lensq );
				var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
	
				// shift adjacent points by unit vectors to the left
	
				var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
				var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
	
				var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
				var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
	
				// scaling factor for v_prev to intersection point
	
				var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
							( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
						  ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
				// vector from inPt to intersection point
	
				v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
				v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
	
				// Don't normalize!, otherwise sharp corners become ugly
				//  but prevent crazy spikes
				var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y );
				if ( v_trans_lensq <= 2 ) {
	
					return	new THREE.Vector2( v_trans_x, v_trans_y );
	
				} else {
	
					shrink_by = Math.sqrt( v_trans_lensq / 2 );
	
				}
	
			} else {
	
				// handle special case of collinear edges
	
				var direction_eq = false;		// assumes: opposite
				if ( v_prev_x > Number.EPSILON ) {
	
					if ( v_next_x > Number.EPSILON ) {
	
						direction_eq = true;
	
					}
	
				} else {
	
					if ( v_prev_x < - Number.EPSILON ) {
	
						if ( v_next_x < - Number.EPSILON ) {
	
							direction_eq = true;
	
						}
	
					} else {
	
						if ( Math.sign( v_prev_y ) === Math.sign( v_next_y ) ) {
	
							direction_eq = true;
	
						}
	
					}
	
				}
	
				if ( direction_eq ) {
	
					// console.log("Warning: lines are a straight sequence");
					v_trans_x = - v_prev_y;
					v_trans_y =  v_prev_x;
					shrink_by = Math.sqrt( v_prev_lensq );
	
				} else {
	
					// console.log("Warning: lines are a straight spike");
					v_trans_x = v_prev_x;
					v_trans_y = v_prev_y;
					shrink_by = Math.sqrt( v_prev_lensq / 2 );
	
				}
	
			}
	
			return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );
	
		}
	
	
		var contourMovements = [];
	
		for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
			if ( j === il ) j = 0;
			if ( k === il ) k = 0;
	
			//  (j)---(i)---(k)
			// console.log('i,j,k', i, j , k)
	
			contourMovements[ i ] = getBevelVec( contour[ i ], contour[ j ], contour[ k ] );
	
		}
	
		var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();
	
		for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
			ahole = holes[ h ];
	
			oneHoleMovements = [];
	
			for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {
	
				if ( j === il ) j = 0;
				if ( k === il ) k = 0;
	
				//  (j)---(i)---(k)
				oneHoleMovements[ i ] = getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );
	
			}
	
			holesMovements.push( oneHoleMovements );
			verticesMovements = verticesMovements.concat( oneHoleMovements );
	
		}
	
	
		// Loop bevelSegments, 1 for the front, 1 for the back
	
		for ( b = 0; b < bevelSegments; b ++ ) {
	
			//for ( b = bevelSegments; b > 0; b -- ) {
	
			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );
	
			//z = bevelThickness * t;
			bs = bevelSize * ( Math.sin ( t * Math.PI / 2 ) ); // curved
			//bs = bevelSize * t; // linear
	
			// contract shape
	
			for ( i = 0, il = contour.length; i < il; i ++ ) {
	
				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
	
				v( vert.x, vert.y,  - z );
	
			}
	
			// expand holes
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];
	
				for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
					v( vert.x, vert.y,  - z );
	
				}
	
			}
	
		}
	
		bs = bevelSize;
	
		// Back facing vertices
	
		for ( i = 0; i < vlen; i ++ ) {
	
			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
			if ( ! extrudeByPath ) {
	
				v( vert.x, vert.y, 0 );
	
			} else {
	
				// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );
	
				normal.copy( splineTube.normals[ 0 ] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[ 0 ] ).multiplyScalar( vert.y );
	
				position2.copy( extrudePts[ 0 ] ).add( normal ).add( binormal );
	
				v( position2.x, position2.y, position2.z );
	
			}
	
		}
	
		// Add stepped vertices...
		// Including front facing vertices
	
		var s;
	
		for ( s = 1; s <= steps; s ++ ) {
	
			for ( i = 0; i < vlen; i ++ ) {
	
				vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];
	
				if ( ! extrudeByPath ) {
	
					v( vert.x, vert.y, amount / steps * s );
	
				} else {
	
					// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );
	
					normal.copy( splineTube.normals[ s ] ).multiplyScalar( vert.x );
					binormal.copy( splineTube.binormals[ s ] ).multiplyScalar( vert.y );
	
					position2.copy( extrudePts[ s ] ).add( normal ).add( binormal );
	
					v( position2.x, position2.y, position2.z );
	
				}
	
			}
	
		}
	
	
		// Add bevel segments planes
	
		//for ( b = 1; b <= bevelSegments; b ++ ) {
		for ( b = bevelSegments - 1; b >= 0; b -- ) {
	
			t = b / bevelSegments;
			z = bevelThickness * ( 1 - t );
			//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
			bs = bevelSize * Math.sin ( t * Math.PI / 2 );
	
			// contract shape
	
			for ( i = 0, il = contour.length; i < il; i ++ ) {
	
				vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
				v( vert.x, vert.y,  amount + z );
	
			}
	
			// expand holes
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
				oneHoleMovements = holesMovements[ h ];
	
				for ( i = 0, il = ahole.length; i < il; i ++ ) {
	
					vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );
	
					if ( ! extrudeByPath ) {
	
						v( vert.x, vert.y,  amount + z );
	
					} else {
	
						v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );
	
					}
	
				}
	
			}
	
		}
	
		/* Faces */
	
		// Top and bottom faces
	
		buildLidFaces();
	
		// Sides faces
	
		buildSideFaces();
	
	
		/////  Internal functions
	
		function buildLidFaces() {
	
			if ( bevelEnabled ) {
	
				var layer = 0; // steps + 1
				var offset = vlen * layer;
	
				// Bottom faces
	
				for ( i = 0; i < flen; i ++ ) {
	
					face = faces[ i ];
					f3( face[ 2 ] + offset, face[ 1 ] + offset, face[ 0 ] + offset );
	
				}
	
				layer = steps + bevelSegments * 2;
				offset = vlen * layer;
	
				// Top faces
	
				for ( i = 0; i < flen; i ++ ) {
	
					face = faces[ i ];
					f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );
	
				}
	
			} else {
	
				// Bottom faces
	
				for ( i = 0; i < flen; i ++ ) {
	
					face = faces[ i ];
					f3( face[ 2 ], face[ 1 ], face[ 0 ] );
	
				}
	
				// Top faces
	
				for ( i = 0; i < flen; i ++ ) {
	
					face = faces[ i ];
					f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );
	
				}
	
			}
	
		}
	
		// Create faces for the z-sides of the shape
	
		function buildSideFaces() {
	
			var layeroffset = 0;
			sidewalls( contour, layeroffset );
			layeroffset += contour.length;
	
			for ( h = 0, hl = holes.length; h < hl; h ++ ) {
	
				ahole = holes[ h ];
				sidewalls( ahole, layeroffset );
	
				//, true
				layeroffset += ahole.length;
	
			}
	
		}
	
		function sidewalls( contour, layeroffset ) {
	
			var j, k;
			i = contour.length;
	
			while ( -- i >= 0 ) {
	
				j = i;
				k = i - 1;
				if ( k < 0 ) k = contour.length - 1;
	
				//console.log('b', i,j, i-1, k,vertices.length);
	
				var s = 0, sl = steps  + bevelSegments * 2;
	
				for ( s = 0; s < sl; s ++ ) {
	
					var slen1 = vlen * s;
					var slen2 = vlen * ( s + 1 );
	
					var a = layeroffset + j + slen1,
						b = layeroffset + k + slen1,
						c = layeroffset + k + slen2,
						d = layeroffset + j + slen2;
	
					f4( a, b, c, d, contour, s, sl, j, k );
	
				}
	
			}
	
		}
	
	
		function v( x, y, z ) {
	
			scope.vertices.push( new THREE.Vector3( x, y, z ) );
	
		}
	
		function f3( a, b, c ) {
	
			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
	
			scope.faces.push( new THREE.Face3( a, b, c, null, null, 0 ) );
	
			var uvs = uvgen.generateTopUV( scope, a, b, c );
	
			scope.faceVertexUvs[ 0 ].push( uvs );
	
		}
	
		function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {
	
			a += shapesOffset;
			b += shapesOffset;
			c += shapesOffset;
			d += shapesOffset;
	
			scope.faces.push( new THREE.Face3( a, b, d, null, null, 1 ) );
			scope.faces.push( new THREE.Face3( b, c, d, null, null, 1 ) );
	
			var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );
	
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
			scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );
	
		}
	
	};
	
	THREE.ExtrudeGeometry.WorldUVGenerator = {
	
		generateTopUV: function ( geometry, indexA, indexB, indexC ) {
	
			var vertices = geometry.vertices;
	
			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
	
			return [
				new THREE.Vector2( a.x, a.y ),
				new THREE.Vector2( b.x, b.y ),
				new THREE.Vector2( c.x, c.y )
			];
	
		},
	
		generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {
	
			var vertices = geometry.vertices;
	
			var a = vertices[ indexA ];
			var b = vertices[ indexB ];
			var c = vertices[ indexC ];
			var d = vertices[ indexD ];
	
			if ( Math.abs( a.y - b.y ) < 0.01 ) {
	
				return [
					new THREE.Vector2( a.x, 1 - a.z ),
					new THREE.Vector2( b.x, 1 - b.z ),
					new THREE.Vector2( c.x, 1 - c.z ),
					new THREE.Vector2( d.x, 1 - d.z )
				];
	
			} else {
	
				return [
					new THREE.Vector2( a.y, 1 - a.z ),
					new THREE.Vector2( b.y, 1 - b.z ),
					new THREE.Vector2( c.y, 1 - c.z ),
					new THREE.Vector2( d.y, 1 - d.z )
				];
	
			}
	
		}
	};
	
	// File:src/extras/geometries/ShapeGeometry.js
	
	/**
	 * @author jonobr1 / http://jonobr1.com
	 *
	 * Creates a one-sided polygonal geometry from a path shape. Similar to
	 * ExtrudeGeometry.
	 *
	 * parameters = {
	 *
	 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
	 *
	 *	material: <int> // material index for front and back faces
	 *	uvGenerator: <Object> // object that provides UV generator functions
	 *
	 * }
	 **/
	
	THREE.ShapeGeometry = function ( shapes, options ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'ShapeGeometry';
	
		if ( Array.isArray( shapes ) === false ) shapes = [ shapes ];
	
		this.addShapeList( shapes, options );
	
		this.computeFaceNormals();
	
	};
	
	THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ShapeGeometry.prototype.constructor = THREE.ShapeGeometry;
	
	/**
	 * Add an array of shapes to THREE.ShapeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {
	
		for ( var i = 0, l = shapes.length; i < l; i ++ ) {
	
			this.addShape( shapes[ i ], options );
	
		}
	
		return this;
	
	};
	
	/**
	 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
	 */
	THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {
	
		if ( options === undefined ) options = {};
		var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;
	
		var material = options.material;
		var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;
	
		//
	
		var i, l, hole;
	
		var shapesOffset = this.vertices.length;
		var shapePoints = shape.extractPoints( curveSegments );
	
		var vertices = shapePoints.shape;
		var holes = shapePoints.holes;
	
		var reverse = ! THREE.ShapeUtils.isClockWise( vertices );
	
		if ( reverse ) {
	
			vertices = vertices.reverse();
	
			// Maybe we should also check if holes are in the opposite direction, just to be safe...
	
			for ( i = 0, l = holes.length; i < l; i ++ ) {
	
				hole = holes[ i ];
	
				if ( THREE.ShapeUtils.isClockWise( hole ) ) {
	
					holes[ i ] = hole.reverse();
	
				}
	
			}
	
			reverse = false;
	
		}
	
		var faces = THREE.ShapeUtils.triangulateShape( vertices, holes );
	
		// Vertices
	
		for ( i = 0, l = holes.length; i < l; i ++ ) {
	
			hole = holes[ i ];
			vertices = vertices.concat( hole );
	
		}
	
		//
	
		var vert, vlen = vertices.length;
		var face, flen = faces.length;
	
		for ( i = 0; i < vlen; i ++ ) {
	
			vert = vertices[ i ];
	
			this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );
	
		}
	
		for ( i = 0; i < flen; i ++ ) {
	
			face = faces[ i ];
	
			var a = face[ 0 ] + shapesOffset;
			var b = face[ 1 ] + shapesOffset;
			var c = face[ 2 ] + shapesOffset;
	
			this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
			this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );
	
		}
	
	};
	
	// File:src/extras/geometries/LatheGeometry.js
	
	/**
	 * @author astrodud / http://astrodud.isgreat.org/
	 * @author zz85 / https://github.com/zz85
	 * @author bhouston / http://clara.io
	 */
	
	// points - to create a closed torus, one must use a set of points 
	//    like so: [ a, b, c, d, a ], see first is the same as last.
	// segments - the number of circumference segments to create
	// phiStart - the starting radian
	// phiLength - the radian (0 to 2*PI) range of the lathed section
	//    2*pi is a closed lathe, less than 2PI is a portion.
	
	THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'LatheGeometry';
	
		this.parameters = {
			points: points,
			segments: segments,
			phiStart: phiStart,
			phiLength: phiLength
		};
	
		segments = segments || 12;
		phiStart = phiStart || 0;
		phiLength = phiLength || 2 * Math.PI;
	
		var inversePointLength = 1.0 / ( points.length - 1 );
		var inverseSegments = 1.0 / segments;
	
		for ( var i = 0, il = segments; i <= il; i ++ ) {
	
			var phi = phiStart + i * inverseSegments * phiLength;
	
			var c = Math.cos( phi ),
				s = Math.sin( phi );
	
			for ( var j = 0, jl = points.length; j < jl; j ++ ) {
	
				var pt = points[ j ];
	
				var vertex = new THREE.Vector3();
	
				vertex.x = c * pt.x - s * pt.y;
				vertex.y = s * pt.x + c * pt.y;
				vertex.z = pt.z;
	
				this.vertices.push( vertex );
	
			}
	
		}
	
		var np = points.length;
	
		for ( var i = 0, il = segments; i < il; i ++ ) {
	
			for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {
	
				var base = j + np * i;
				var a = base;
				var b = base + np;
				var c = base + 1 + np;
				var d = base + 1;
	
				var u0 = i * inverseSegments;
				var v0 = j * inversePointLength;
				var u1 = u0 + inverseSegments;
				var v1 = v0 + inversePointLength;
	
				this.faces.push( new THREE.Face3( a, b, d ) );
	
				this.faceVertexUvs[ 0 ].push( [
	
					new THREE.Vector2( u0, v0 ),
					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u0, v1 )
	
				] );
	
				this.faces.push( new THREE.Face3( b, c, d ) );
	
				this.faceVertexUvs[ 0 ].push( [
	
					new THREE.Vector2( u1, v0 ),
					new THREE.Vector2( u1, v1 ),
					new THREE.Vector2( u0, v1 )
	
				] );
	
	
			}
	
		}
	
		this.mergeVertices();
		this.computeFaceNormals();
		this.computeVertexNormals();
	
	};
	
	THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.LatheGeometry.prototype.constructor = THREE.LatheGeometry;
	
	// File:src/extras/geometries/PlaneGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */
	
	THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'PlaneGeometry';
	
		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};
	
		this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );
	
	};
	
	THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PlaneGeometry.prototype.constructor = THREE.PlaneGeometry;
	
	THREE.PlaneGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.PlaneGeometry(
			parameters.width,
			parameters.height,
			parameters.widthSegments,
			parameters.heightSegments
		);
	
	};
	
	// File:src/extras/geometries/PlaneBufferGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
	 */
	
	THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {
	
		THREE.BufferGeometry.call( this );
	
		this.type = 'PlaneBufferGeometry';
	
		this.parameters = {
			width: width,
			height: height,
			widthSegments: widthSegments,
			heightSegments: heightSegments
		};
	
		var width_half = width / 2;
		var height_half = height / 2;
	
		var gridX = Math.floor( widthSegments ) || 1;
		var gridY = Math.floor( heightSegments ) || 1;
	
		var gridX1 = gridX + 1;
		var gridY1 = gridY + 1;
	
		var segment_width = width / gridX;
		var segment_height = height / gridY;
	
		var vertices = new Float32Array( gridX1 * gridY1 * 3 );
		var normals = new Float32Array( gridX1 * gridY1 * 3 );
		var uvs = new Float32Array( gridX1 * gridY1 * 2 );
	
		var offset = 0;
		var offset2 = 0;
	
		for ( var iy = 0; iy < gridY1; iy ++ ) {
	
			var y = iy * segment_height - height_half;
	
			for ( var ix = 0; ix < gridX1; ix ++ ) {
	
				var x = ix * segment_width - width_half;
	
				vertices[ offset ] = x;
				vertices[ offset + 1 ] = - y;
	
				normals[ offset + 2 ] = 1;
	
				uvs[ offset2 ] = ix / gridX;
				uvs[ offset2 + 1 ] = 1 - ( iy / gridY );
	
				offset += 3;
				offset2 += 2;
	
			}
	
		}
	
		offset = 0;
	
		var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );
	
		for ( var iy = 0; iy < gridY; iy ++ ) {
	
			for ( var ix = 0; ix < gridX; ix ++ ) {
	
				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;
	
				indices[ offset ] = a;
				indices[ offset + 1 ] = b;
				indices[ offset + 2 ] = d;
	
				indices[ offset + 3 ] = b;
				indices[ offset + 4 ] = c;
				indices[ offset + 5 ] = d;
	
				offset += 6;
	
			}
	
		}
	
		this.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
		this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );
	
	};
	
	THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.PlaneBufferGeometry.prototype.constructor = THREE.PlaneBufferGeometry;
	
	THREE.PlaneBufferGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.PlaneBufferGeometry(
			parameters.width,
			parameters.height,
			parameters.widthSegments,
			parameters.heightSegments
		);
	
	};
	
	// File:src/extras/geometries/RingGeometry.js
	
	/**
	 * @author Kaleb Murphy
	 */
	
	THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'RingGeometry';
	
		this.parameters = {
			innerRadius: innerRadius,
			outerRadius: outerRadius,
			thetaSegments: thetaSegments,
			phiSegments: phiSegments,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		innerRadius = innerRadius || 0;
		outerRadius = outerRadius || 50;
	
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;
	
		thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
		phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;
	
		var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );
	
		for ( i = 0; i < phiSegments + 1; i ++ ) {
	
			// concentric circles inside ring
	
			for ( o = 0; o < thetaSegments + 1; o ++ ) {
	
				// number of segments per circle
	
				var vertex = new THREE.Vector3();
				var segment = thetaStart + o / thetaSegments * thetaLength;
				vertex.x = radius * Math.cos( segment );
				vertex.y = radius * Math.sin( segment );
	
				this.vertices.push( vertex );
				uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );
	
			}
	
			radius += radiusStep;
	
		}
	
		var n = new THREE.Vector3( 0, 0, 1 );
	
		for ( i = 0; i < phiSegments; i ++ ) {
	
			// concentric circles inside ring
	
			var thetaSegment = i * ( thetaSegments + 1 );
	
			for ( o = 0; o < thetaSegments ; o ++ ) {
	
				// number of segments per circle
	
				var segment = o + thetaSegment;
	
				var v1 = segment;
				var v2 = segment + thetaSegments + 1;
				var v3 = segment + thetaSegments + 2;
	
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );
	
				v1 = segment;
				v2 = segment + thetaSegments + 2;
				v3 = segment + 1;
	
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ] );
	
			}
	
		}
	
		this.computeFaceNormals();
	
		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
	
	};
	
	THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.RingGeometry.prototype.constructor = THREE.RingGeometry;
	
	THREE.RingGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.RingGeometry(
			parameters.innerRadius,
			parameters.outerRadius,
			parameters.thetaSegments,
			parameters.phiSegments,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/SphereGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'SphereGeometry';
	
		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		this.fromBufferGeometry( new THREE.SphereBufferGeometry( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) );
	
	};
	
	THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.SphereGeometry.prototype.constructor = THREE.SphereGeometry;
	
	THREE.SphereGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.SphereGeometry(
			parameters.radius,
			parameters.widthSegments,
			parameters.heightSegments,
			parameters.phiStart,
			parameters.phiLength,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/SphereBufferGeometry.js
	
	/**
	 * @author benaadams / https://twitter.com/ben_a_adams
	 * based on THREE.SphereGeometry
	 */
	
	THREE.SphereBufferGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {
	
		THREE.BufferGeometry.call( this );
	
		this.type = 'SphereBufferGeometry';
	
		this.parameters = {
			radius: radius,
			widthSegments: widthSegments,
			heightSegments: heightSegments,
			phiStart: phiStart,
			phiLength: phiLength,
			thetaStart: thetaStart,
			thetaLength: thetaLength
		};
	
		radius = radius || 50;
	
		widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
		heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );
	
		phiStart = phiStart !== undefined ? phiStart : 0;
		phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;
	
		thetaStart = thetaStart !== undefined ? thetaStart : 0;
		thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;
	
		var thetaEnd = thetaStart + thetaLength;
	
		var vertexCount = ( ( widthSegments + 1 ) * ( heightSegments + 1 ) );
	
		var positions = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var normals = new THREE.BufferAttribute( new Float32Array( vertexCount * 3 ), 3 );
		var uvs = new THREE.BufferAttribute( new Float32Array( vertexCount * 2 ), 2 );
	
		var index = 0, vertices = [], normal = new THREE.Vector3();
	
		for ( var y = 0; y <= heightSegments; y ++ ) {
	
			var verticesRow = [];
	
			var v = y / heightSegments;
	
			for ( var x = 0; x <= widthSegments; x ++ ) {
	
				var u = x / widthSegments;
	
				var px = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
				var py = radius * Math.cos( thetaStart + v * thetaLength );
				var pz = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
	
				normal.set( px, py, pz ).normalize();
	
				positions.setXYZ( index, px, py, pz );
				normals.setXYZ( index, normal.x, normal.y, normal.z );
				uvs.setXY( index, u, 1 - v );
	
				verticesRow.push( index );
	
				index ++;
	
			}
	
			vertices.push( verticesRow );
	
		}
	
		var indices = [];
	
		for ( var y = 0; y < heightSegments; y ++ ) {
	
			for ( var x = 0; x < widthSegments; x ++ ) {
	
				var v1 = vertices[ y ][ x + 1 ];
				var v2 = vertices[ y ][ x ];
				var v3 = vertices[ y + 1 ][ x ];
				var v4 = vertices[ y + 1 ][ x + 1 ];
	
				if ( y !== 0 || thetaStart > 0 ) indices.push( v1, v2, v4 );
				if ( y !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( v2, v3, v4 );
	
			}
	
		}
	
		this.setIndex( new ( positions.count > 65535 ? THREE.Uint32Attribute : THREE.Uint16Attribute )( indices, 1 ) );
		this.addAttribute( 'position', positions );
		this.addAttribute( 'normal', normals );
		this.addAttribute( 'uv', uvs );
	
		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
	
	};
	
	THREE.SphereBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.SphereBufferGeometry.prototype.constructor = THREE.SphereBufferGeometry;
	
	THREE.SphereBufferGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.SphereBufferGeometry(
			parameters.radius,
			parameters.widthSegments,
			parameters.heightSegments,
			parameters.phiStart,
			parameters.phiLength,
			parameters.thetaStart,
			parameters.thetaLength
		);
	
	};
	
	// File:src/extras/geometries/TorusGeometry.js
	
	/**
	 * @author oosmoxiecode
	 * @author mrdoob / http://mrdoob.com/
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
	 */
	
	THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'TorusGeometry';
	
		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			arc: arc
		};
	
		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 8;
		tubularSegments = tubularSegments || 6;
		arc = arc || Math.PI * 2;
	
		var center = new THREE.Vector3(), uvs = [], normals = [];
	
		for ( var j = 0; j <= radialSegments; j ++ ) {
	
			for ( var i = 0; i <= tubularSegments; i ++ ) {
	
				var u = i / tubularSegments * arc;
				var v = j / radialSegments * Math.PI * 2;
	
				center.x = radius * Math.cos( u );
				center.y = radius * Math.sin( u );
	
				var vertex = new THREE.Vector3();
				vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
				vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
				vertex.z = tube * Math.sin( v );
	
				this.vertices.push( vertex );
	
				uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
				normals.push( vertex.clone().sub( center ).normalize() );
	
			}
	
		}
	
		for ( var j = 1; j <= radialSegments; j ++ ) {
	
			for ( var i = 1; i <= tubularSegments; i ++ ) {
	
				var a = ( tubularSegments + 1 ) * j + i - 1;
				var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
				var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
				var d = ( tubularSegments + 1 ) * j + i;
	
				var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );
	
				face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
				this.faces.push( face );
				this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );
	
			}
	
		}
	
		this.computeFaceNormals();
	
	};
	
	THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusGeometry.prototype.constructor = THREE.TorusGeometry;
	
	THREE.TorusGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.TorusGeometry(
			parameters.radius,
			parameters.tube,
			parameters.radialSegments,
			parameters.tubularSegments,
			parameters.arc
		);
	
	};
	
	// File:src/extras/geometries/TorusKnotGeometry.js
	
	/**
	 * @author oosmoxiecode
	 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
	 */
	
	THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'TorusKnotGeometry';
	
		this.parameters = {
			radius: radius,
			tube: tube,
			radialSegments: radialSegments,
			tubularSegments: tubularSegments,
			p: p,
			q: q,
			heightScale: heightScale
		};
	
		radius = radius || 100;
		tube = tube || 40;
		radialSegments = radialSegments || 64;
		tubularSegments = tubularSegments || 8;
		p = p || 2;
		q = q || 3;
		heightScale = heightScale || 1;
	
		var grid = new Array( radialSegments );
		var tang = new THREE.Vector3();
		var n = new THREE.Vector3();
		var bitan = new THREE.Vector3();
	
		for ( var i = 0; i < radialSegments; ++ i ) {
	
			grid[ i ] = new Array( tubularSegments );
			var u = i / radialSegments * 2 * p * Math.PI;
			var p1 = getPos( u, q, p, radius, heightScale );
			var p2 = getPos( u + 0.01, q, p, radius, heightScale );
			tang.subVectors( p2, p1 );
			n.addVectors( p2, p1 );
	
			bitan.crossVectors( tang, n );
			n.crossVectors( bitan, tang );
			bitan.normalize();
			n.normalize();
	
			for ( var j = 0; j < tubularSegments; ++ j ) {
	
				var v = j / tubularSegments * 2 * Math.PI;
				var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				var cy = tube * Math.sin( v );
	
				var pos = new THREE.Vector3();
				pos.x = p1.x + cx * n.x + cy * bitan.x;
				pos.y = p1.y + cx * n.y + cy * bitan.y;
				pos.z = p1.z + cx * n.z + cy * bitan.z;
	
				grid[ i ][ j ] = this.vertices.push( pos ) - 1;
	
			}
	
		}
	
		for ( var i = 0; i < radialSegments; ++ i ) {
	
			for ( var j = 0; j < tubularSegments; ++ j ) {
	
				var ip = ( i + 1 ) % radialSegments;
				var jp = ( j + 1 ) % tubularSegments;
	
				var a = grid[ i ][ j ];
				var b = grid[ ip ][ j ];
				var c = grid[ ip ][ jp ];
				var d = grid[ i ][ jp ];
	
				var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
				var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
				var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
				var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );
	
				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
	
				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
	
			}
	
		}
	
		this.computeFaceNormals();
		this.computeVertexNormals();
	
		function getPos( u, in_q, in_p, radius, heightScale ) {
	
			var cu = Math.cos( u );
			var su = Math.sin( u );
			var quOverP = in_q / in_p * u;
			var cs = Math.cos( quOverP );
	
			var tx = radius * ( 2 + cs ) * 0.5 * cu;
			var ty = radius * ( 2 + cs ) * su * 0.5;
			var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;
	
			return new THREE.Vector3( tx, ty, tz );
	
		}
	
	};
	
	THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TorusKnotGeometry.prototype.constructor = THREE.TorusKnotGeometry;
	
	THREE.TorusKnotGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.TorusKnotGeometry(
			parameters.radius,
			parameters.tube,
			parameters.radialSegments,
			parameters.tubularSegments,
			parameters.p,
			parameters.q,
			parameters.heightScale
		);
	
	};
	
	// File:src/extras/geometries/TubeGeometry.js
	
	/**
	 * @author WestLangley / https://github.com/WestLangley
	 * @author zz85 / https://github.com/zz85
	 * @author miningold / https://github.com/miningold
	 * @author jonobr1 / https://github.com/jonobr1
	 *
	 * Modified from the TorusKnotGeometry by @oosmoxiecode
	 *
	 * Creates a tube which extrudes along a 3d spline
	 *
	 * Uses parallel transport frames as described in
	 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
	 */
	
	THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed, taper ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'TubeGeometry';
	
		this.parameters = {
			path: path,
			segments: segments,
			radius: radius,
			radialSegments: radialSegments,
			closed: closed,
			taper: taper
		};
	
		segments = segments || 64;
		radius = radius || 1;
		radialSegments = radialSegments || 8;
		closed = closed || false;
		taper = taper || THREE.TubeGeometry.NoTaper;
	
		var grid = [];
	
		var scope = this,
	
			tangent,
			normal,
			binormal,
	
			numpoints = segments + 1,
	
			u, v, r,
	
			cx, cy,
			pos, pos2 = new THREE.Vector3(),
			i, j,
			ip, jp,
			a, b, c, d,
			uva, uvb, uvc, uvd;
	
		var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
			tangents = frames.tangents,
			normals = frames.normals,
			binormals = frames.binormals;
	
		// proxy internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;
	
		function vert( x, y, z ) {
	
			return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;
	
		}
	
		// construct the grid
	
		for ( i = 0; i < numpoints; i ++ ) {
	
			grid[ i ] = [];
	
			u = i / ( numpoints - 1 );
	
			pos = path.getPointAt( u );
	
			tangent = tangents[ i ];
			normal = normals[ i ];
			binormal = binormals[ i ];
	
			r = radius * taper( u );
	
			for ( j = 0; j < radialSegments; j ++ ) {
	
				v = j / radialSegments * 2 * Math.PI;
	
				cx = - r * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
				cy = r * Math.sin( v );
	
				pos2.copy( pos );
				pos2.x += cx * normal.x + cy * binormal.x;
				pos2.y += cx * normal.y + cy * binormal.y;
				pos2.z += cx * normal.z + cy * binormal.z;
	
				grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );
	
			}
	
		}
	
	
		// construct the mesh
	
		for ( i = 0; i < segments; i ++ ) {
	
			for ( j = 0; j < radialSegments; j ++ ) {
	
				ip = ( closed ) ? ( i + 1 ) % segments : i + 1;
				jp = ( j + 1 ) % radialSegments;
	
				a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
				b = grid[ ip ][ j ];
				c = grid[ ip ][ jp ];
				d = grid[ i ][ jp ];
	
				uva = new THREE.Vector2( i / segments, j / radialSegments );
				uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
				uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
				uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );
	
				this.faces.push( new THREE.Face3( a, b, d ) );
				this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );
	
				this.faces.push( new THREE.Face3( b, c, d ) );
				this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );
	
			}
	
		}
	
		this.computeFaceNormals();
		this.computeVertexNormals();
	
	};
	
	THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.TubeGeometry.prototype.constructor = THREE.TubeGeometry;
	THREE.TubeGeometry.prototype.clone = function() {
	
		return new this.constructor( this.parameters.path,
			this.parameters.segments, this.parameters.radius, this.parameters.radialSegments,
			this.parameters.closed, this.parameters.taper
		);
	
	};
	
	THREE.TubeGeometry.NoTaper = function ( u ) {
	
		return 1;
	
	};
	
	THREE.TubeGeometry.SinusoidalTaper = function ( u ) {
	
		return Math.sin( Math.PI * u );
	
	};
	
	// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
	THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {
	
		var	normal = new THREE.Vector3(),
	
			tangents = [],
			normals = [],
			binormals = [],
	
			vec = new THREE.Vector3(),
			mat = new THREE.Matrix4(),
	
			numpoints = segments + 1,
			theta,
			smallest,
	
			tx, ty, tz,
			i, u;
	
	
		// expose internals
		this.tangents = tangents;
		this.normals = normals;
		this.binormals = binormals;
	
		// compute the tangent vectors for each segment on the path
	
		for ( i = 0; i < numpoints; i ++ ) {
	
			u = i / ( numpoints - 1 );
	
			tangents[ i ] = path.getTangentAt( u );
			tangents[ i ].normalize();
	
		}
	
		initialNormal3();
	
		/*
		function initialNormal1(lastBinormal) {
			// fixed start binormal. Has dangers of 0 vectors
			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
			normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
		}
	
		function initialNormal2() {
	
			// This uses the Frenet-Serret formula for deriving binormal
			var t2 = path.getTangentAt( epsilon );
	
			normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
			binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );
	
			normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
	
		}
		*/
	
		function initialNormal3() {
	
			// select an initial normal vector perpendicular to the first tangent vector,
			// and in the direction of the smallest tangent xyz component
	
			normals[ 0 ] = new THREE.Vector3();
			binormals[ 0 ] = new THREE.Vector3();
			smallest = Number.MAX_VALUE;
			tx = Math.abs( tangents[ 0 ].x );
			ty = Math.abs( tangents[ 0 ].y );
			tz = Math.abs( tangents[ 0 ].z );
	
			if ( tx <= smallest ) {
	
				smallest = tx;
				normal.set( 1, 0, 0 );
	
			}
	
			if ( ty <= smallest ) {
	
				smallest = ty;
				normal.set( 0, 1, 0 );
	
			}
	
			if ( tz <= smallest ) {
	
				normal.set( 0, 0, 1 );
	
			}
	
			vec.crossVectors( tangents[ 0 ], normal ).normalize();
	
			normals[ 0 ].crossVectors( tangents[ 0 ], vec );
			binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	
		}
	
	
		// compute the slowly-varying normal and binormal vectors for each segment on the path
	
		for ( i = 1; i < numpoints; i ++ ) {
	
			normals[ i ] = normals[ i - 1 ].clone();
	
			binormals[ i ] = binormals[ i - 1 ].clone();
	
			vec.crossVectors( tangents[ i - 1 ], tangents[ i ] );
	
			if ( vec.length() > Number.EPSILON ) {
	
				vec.normalize();
	
				theta = Math.acos( THREE.Math.clamp( tangents[ i - 1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors
	
				normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );
	
			}
	
			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
		}
	
	
		// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same
	
		if ( closed ) {
	
			theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints - 1 ] ), - 1, 1 ) );
			theta /= ( numpoints - 1 );
	
			if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints - 1 ] ) ) > 0 ) {
	
				theta = - theta;
	
			}
	
			for ( i = 1; i < numpoints; i ++ ) {
	
				// twist a little...
				normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
				binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );
	
			}
	
		}
	
	};
	
	// File:src/extras/geometries/PolyhedronGeometry.js
	
	/**
	 * @author clockworkgeek / https://github.com/clockworkgeek
	 * @author timothypratley / https://github.com/timothypratley
	 * @author WestLangley / http://github.com/WestLangley
	*/
	
	THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'PolyhedronGeometry';
	
		this.parameters = {
			vertices: vertices,
			indices: indices,
			radius: radius,
			detail: detail
		};
	
		radius = radius || 1;
		detail = detail || 0;
	
		var that = this;
	
		for ( var i = 0, l = vertices.length; i < l; i += 3 ) {
	
			prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );
	
		}
	
		var p = this.vertices;
	
		var faces = [];
	
		for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {
	
			var v1 = p[ indices[ i ] ];
			var v2 = p[ indices[ i + 1 ] ];
			var v3 = p[ indices[ i + 2 ] ];
	
			faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, j );
	
		}
	
		var centroid = new THREE.Vector3();
	
		for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
			subdivide( faces[ i ], detail );
	
		}
	
	
		// Handle case when face straddles the seam
	
		for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {
	
			var uvs = this.faceVertexUvs[ 0 ][ i ];
	
			var x0 = uvs[ 0 ].x;
			var x1 = uvs[ 1 ].x;
			var x2 = uvs[ 2 ].x;
	
			var max = Math.max( x0, x1, x2 );
			var min = Math.min( x0, x1, x2 );
	
			if ( max > 0.9 && min < 0.1 ) {
	
				// 0.9 is somewhat arbitrary
	
				if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
				if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
				if ( x2 < 0.2 ) uvs[ 2 ].x += 1;
	
			}
	
		}
	
	
		// Apply radius
	
		for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {
	
			this.vertices[ i ].multiplyScalar( radius );
	
		}
	
	
		// Merge vertices
	
		this.mergeVertices();
	
		this.computeFaceNormals();
	
		this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );
	
	
		// Project vector onto sphere's surface
	
		function prepare( vector ) {
	
			var vertex = vector.normalize().clone();
			vertex.index = that.vertices.push( vertex ) - 1;
	
			// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.
	
			var u = azimuth( vector ) / 2 / Math.PI + 0.5;
			var v = inclination( vector ) / Math.PI + 0.5;
			vertex.uv = new THREE.Vector2( u, 1 - v );
	
			return vertex;
	
		}
	
	
		// Approximate a curved face with recursively sub-divided triangles.
	
		function make( v1, v2, v3, materialIndex ) {
	
			var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ], undefined, materialIndex );
			that.faces.push( face );
	
			centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );
	
			var azi = azimuth( centroid );
	
			that.faceVertexUvs[ 0 ].push( [
				correctUV( v1.uv, v1, azi ),
				correctUV( v2.uv, v2, azi ),
				correctUV( v3.uv, v3, azi )
			] );
	
		}
	
	
		// Analytically subdivide a face to the required detail level.
	
		function subdivide( face, detail ) {
	
			var cols = Math.pow( 2, detail );
			var a = prepare( that.vertices[ face.a ] );
			var b = prepare( that.vertices[ face.b ] );
			var c = prepare( that.vertices[ face.c ] );
			var v = [];
	
			var materialIndex = face.materialIndex;
	
			// Construct all of the vertices for this subdivision.
	
			for ( var i = 0 ; i <= cols; i ++ ) {
	
				v[ i ] = [];
	
				var aj = prepare( a.clone().lerp( c, i / cols ) );
				var bj = prepare( b.clone().lerp( c, i / cols ) );
				var rows = cols - i;
	
				for ( var j = 0; j <= rows; j ++ ) {
	
					if ( j === 0 && i === cols ) {
	
						v[ i ][ j ] = aj;
	
					} else {
	
						v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );
	
					}
	
				}
	
			}
	
			// Construct all of the faces.
	
			for ( var i = 0; i < cols ; i ++ ) {
	
				for ( var j = 0; j < 2 * ( cols - i ) - 1; j ++ ) {
	
					var k = Math.floor( j / 2 );
	
					if ( j % 2 === 0 ) {
	
						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k ],
							v[ i ][ k ],
							materialIndex
						);
	
					} else {
	
						make(
							v[ i ][ k + 1 ],
							v[ i + 1 ][ k + 1 ],
							v[ i + 1 ][ k ],
							materialIndex
						);
	
					}
	
				}
	
			}
	
		}
	
	
		// Angle around the Y axis, counter-clockwise when looking from above.
	
		function azimuth( vector ) {
	
			return Math.atan2( vector.z, - vector.x );
	
		}
	
	
		// Angle above the XZ plane.
	
		function inclination( vector ) {
	
			return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );
	
		}
	
	
		// Texture fixing helper. Spheres have some odd behaviours.
	
		function correctUV( uv, vector, azimuth ) {
	
			if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
			if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
			return uv.clone();
	
		}
	
	
	};
	
	THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.PolyhedronGeometry.prototype.constructor = THREE.PolyhedronGeometry;
	
	THREE.PolyhedronGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.PolyhedronGeometry(
			parameters.vertices,
			parameters.indices,
			parameters.radius,
			parameters.detail
		);
	
	};
	
	// File:src/extras/geometries/DodecahedronGeometry.js
	
	/**
	 * @author Abe Pazos / https://hamoid.com
	 */
	
	THREE.DodecahedronGeometry = function ( radius, detail ) {
	
		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
		var r = 1 / t;
	
		var vertices = [
	
			// (±1, ±1, ±1)
			- 1, - 1, - 1,    - 1, - 1,  1,
			- 1,  1, - 1,    - 1,  1,  1,
			 1, - 1, - 1,     1, - 1,  1,
			 1,  1, - 1,     1,  1,  1,
	
			// (0, ±1/φ, ±φ)
			 0, - r, - t,     0, - r,  t,
			 0,  r, - t,     0,  r,  t,
	
			// (±1/φ, ±φ, 0)
			- r, - t,  0,    - r,  t,  0,
			 r, - t,  0,     r,  t,  0,
	
			// (±φ, 0, ±1/φ)
			- t,  0, - r,     t,  0, - r,
			- t,  0,  r,     t,  0,  r
		];
	
		var indices = [
			 3, 11,  7,      3,  7, 15,      3, 15, 13,
			 7, 19, 17,      7, 17,  6,      7,  6, 15,
			17,  4,  8,     17,  8, 10,     17, 10,  6,
			 8,  0, 16,      8, 16,  2,      8,  2, 10,
			 0, 12,  1,      0,  1, 18,      0, 18, 16,
			 6, 10,  2,      6,  2, 13,      6, 13, 15,
			 2, 16, 18,      2, 18,  3,      2,  3, 13,
			18,  1,  9,     18,  9, 11,     18, 11,  3,
			 4, 14, 12,      4, 12,  0,      4,  0,  8,
			11,  9,  5,     11,  5, 19,     11, 19,  7,
			19,  5, 14,     19, 14,  4,     19,  4, 17,
			 1, 12, 14,      1, 14,  5,      1,  5,  9
		];
	
		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
	
		this.type = 'DodecahedronGeometry';
	
		this.parameters = {
			radius: radius,
			detail: detail
		};
	
	};
	
	THREE.DodecahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.DodecahedronGeometry.prototype.constructor = THREE.DodecahedronGeometry;
	
	THREE.DodecahedronGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.DodecahedronGeometry(
			parameters.radius,
			parameters.detail
		);
	
	};
	
	// File:src/extras/geometries/IcosahedronGeometry.js
	
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */
	
	THREE.IcosahedronGeometry = function ( radius, detail ) {
	
		var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	
		var vertices = [
			- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
			 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
			 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
		];
	
		var indices = [
			 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
			 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
			 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
			 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
		];
	
		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
	
		this.type = 'IcosahedronGeometry';
	
		this.parameters = {
			radius: radius,
			detail: detail
		};
	
	};
	
	THREE.IcosahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.IcosahedronGeometry.prototype.constructor = THREE.IcosahedronGeometry;
	
	THREE.IcosahedronGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.IcosahedronGeometry(
			parameters.radius,
			parameters.detail
		);
	
	};
	
	// File:src/extras/geometries/OctahedronGeometry.js
	
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */
	
	THREE.OctahedronGeometry = function ( radius, detail ) {
	
		var vertices = [
			1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0, - 1, 0,    0, 0, 1,    0, 0, - 1
		];
	
		var indices = [
			0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
		];
	
		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
	
		this.type = 'OctahedronGeometry';
	
		this.parameters = {
			radius: radius,
			detail: detail
		};
	
	};
	
	THREE.OctahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.OctahedronGeometry.prototype.constructor = THREE.OctahedronGeometry;
	
	THREE.OctahedronGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.OctahedronGeometry(
			parameters.radius,
			parameters.detail
		);
	
	};
	
	// File:src/extras/geometries/TetrahedronGeometry.js
	
	/**
	 * @author timothypratley / https://github.com/timothypratley
	 */
	
	THREE.TetrahedronGeometry = function ( radius, detail ) {
	
		var vertices = [
			 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
		];
	
		var indices = [
			 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
		];
	
		THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );
	
		this.type = 'TetrahedronGeometry';
	
		this.parameters = {
			radius: radius,
			detail: detail
		};
	
	};
	
	THREE.TetrahedronGeometry.prototype = Object.create( THREE.PolyhedronGeometry.prototype );
	THREE.TetrahedronGeometry.prototype.constructor = THREE.TetrahedronGeometry;
	
	THREE.TetrahedronGeometry.prototype.clone = function () {
	
		var parameters = this.parameters;
	
		return new THREE.TetrahedronGeometry(
			parameters.radius,
			parameters.detail
		);
	
	};
	
	// File:src/extras/geometries/ParametricGeometry.js
	
	/**
	 * @author zz85 / https://github.com/zz85
	 * Parametric Surfaces Geometry
	 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
	 *
	 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
	 *
	 */
	
	THREE.ParametricGeometry = function ( func, slices, stacks ) {
	
		THREE.Geometry.call( this );
	
		this.type = 'ParametricGeometry';
	
		this.parameters = {
			func: func,
			slices: slices,
			stacks: stacks
		};
	
		var verts = this.vertices;
		var faces = this.faces;
		var uvs = this.faceVertexUvs[ 0 ];
	
		var i, j, p;
		var u, v;
	
		var sliceCount = slices + 1;
	
		for ( i = 0; i <= stacks; i ++ ) {
	
			v = i / stacks;
	
			for ( j = 0; j <= slices; j ++ ) {
	
				u = j / slices;
	
				p = func( u, v );
				verts.push( p );
	
			}
	
		}
	
		var a, b, c, d;
		var uva, uvb, uvc, uvd;
	
		for ( i = 0; i < stacks; i ++ ) {
	
			for ( j = 0; j < slices; j ++ ) {
	
				a = i * sliceCount + j;
				b = i * sliceCount + j + 1;
				c = ( i + 1 ) * sliceCount + j + 1;
				d = ( i + 1 ) * sliceCount + j;
	
				uva = new THREE.Vector2( j / slices, i / stacks );
				uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
				uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
				uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );
	
				faces.push( new THREE.Face3( a, b, d ) );
				uvs.push( [ uva, uvb, uvd ] );
	
				faces.push( new THREE.Face3( b, c, d ) );
				uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );
	
			}
	
		}
	
		// console.log(this);
	
		// magic bullet
		// var diff = this.mergeVertices();
		// console.log('removed ', diff, ' vertices by merging');
	
		this.computeFaceNormals();
		this.computeVertexNormals();
	
	};
	
	THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );
	THREE.ParametricGeometry.prototype.constructor = THREE.ParametricGeometry;
	
	// File:src/extras/geometries/WireframeGeometry.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.WireframeGeometry = function ( geometry ) {
	
		THREE.BufferGeometry.call( this );
	
		var edge = [ 0, 0 ], hash = {};
	
		function sortFunction( a, b ) {
	
			return a - b;
	
		}
	
		var keys = [ 'a', 'b', 'c' ];
	
		if ( geometry instanceof THREE.Geometry ) {
	
			var vertices = geometry.vertices;
			var faces = geometry.faces;
			var numEdges = 0;
	
			// allocate maximal size
			var edges = new Uint32Array( 6 * faces.length );
	
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
				var face = faces[ i ];
	
				for ( var j = 0; j < 3; j ++ ) {
	
					edge[ 0 ] = face[ keys[ j ] ];
					edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
					edge.sort( sortFunction );
	
					var key = edge.toString();
	
					if ( hash[ key ] === undefined ) {
	
						edges[ 2 * numEdges ] = edge[ 0 ];
						edges[ 2 * numEdges + 1 ] = edge[ 1 ];
						hash[ key ] = true;
						numEdges ++;
	
					}
	
				}
	
			}
	
			var coords = new Float32Array( numEdges * 2 * 3 );
	
			for ( var i = 0, l = numEdges; i < l; i ++ ) {
	
				for ( var j = 0; j < 2; j ++ ) {
	
					var vertex = vertices[ edges [ 2 * i + j ] ];
	
					var index = 6 * i + 3 * j;
					coords[ index + 0 ] = vertex.x;
					coords[ index + 1 ] = vertex.y;
					coords[ index + 2 ] = vertex.z;
	
				}
	
			}
	
			this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
	
		} else if ( geometry instanceof THREE.BufferGeometry ) {
	
			if ( geometry.index !== null ) {
	
				// Indexed BufferGeometry
	
				var indices = geometry.index.array;
				var vertices = geometry.attributes.position;
				var drawcalls = geometry.drawcalls;
				var numEdges = 0;
	
				if ( drawcalls.length === 0 ) {
	
					geometry.addGroup( 0, indices.length );
	
				}
	
				// allocate maximal size
				var edges = new Uint32Array( 2 * indices.length );
	
				for ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {
	
					var drawcall = drawcalls[ o ];
	
					var start = drawcall.start;
					var count = drawcall.count;
	
					for ( var i = start, il = start + count; i < il; i += 3 ) {
	
						for ( var j = 0; j < 3; j ++ ) {
	
							edge[ 0 ] = indices[ i + j ];
							edge[ 1 ] = indices[ i + ( j + 1 ) % 3 ];
							edge.sort( sortFunction );
	
							var key = edge.toString();
	
							if ( hash[ key ] === undefined ) {
	
								edges[ 2 * numEdges ] = edge[ 0 ];
								edges[ 2 * numEdges + 1 ] = edge[ 1 ];
								hash[ key ] = true;
								numEdges ++;
	
							}
	
						}
	
					}
	
				}
	
				var coords = new Float32Array( numEdges * 2 * 3 );
	
				for ( var i = 0, l = numEdges; i < l; i ++ ) {
	
					for ( var j = 0; j < 2; j ++ ) {
	
						var index = 6 * i + 3 * j;
						var index2 = edges[ 2 * i + j ];
	
						coords[ index + 0 ] = vertices.getX( index2 );
						coords[ index + 1 ] = vertices.getY( index2 );
						coords[ index + 2 ] = vertices.getZ( index2 );
	
					}
	
				}
	
				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
	
			} else {
	
				// non-indexed BufferGeometry
	
				var vertices = geometry.attributes.position.array;
				var numEdges = vertices.length / 3;
				var numTris = numEdges / 3;
	
				var coords = new Float32Array( numEdges * 2 * 3 );
	
				for ( var i = 0, l = numTris; i < l; i ++ ) {
	
					for ( var j = 0; j < 3; j ++ ) {
	
						var index = 18 * i + 6 * j;
	
						var index1 = 9 * i + 3 * j;
						coords[ index + 0 ] = vertices[ index1 ];
						coords[ index + 1 ] = vertices[ index1 + 1 ];
						coords[ index + 2 ] = vertices[ index1 + 2 ];
	
						var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
						coords[ index + 3 ] = vertices[ index2 ];
						coords[ index + 4 ] = vertices[ index2 + 1 ];
						coords[ index + 5 ] = vertices[ index2 + 2 ];
	
					}
	
				}
	
				this.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );
	
			}
	
		}
	
	};
	
	THREE.WireframeGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );
	THREE.WireframeGeometry.prototype.constructor = THREE.WireframeGeometry;
	
	// File:src/extras/helpers/AxisHelper.js
	
	/**
	 * @author sroucheray / http://sroucheray.org/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.AxisHelper = function ( size ) {
	
		size = size || 1;
	
		var vertices = new Float32Array( [
			0, 0, 0,  size, 0, 0,
			0, 0, 0,  0, size, 0,
			0, 0, 0,  0, 0, size
		] );
	
		var colors = new Float32Array( [
			1, 0, 0,  1, 0.6, 0,
			0, 1, 0,  0.6, 1, 0,
			0, 0, 1,  0, 0.6, 1
		] );
	
		var geometry = new THREE.BufferGeometry();
		geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
		geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );
	
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );
	
		THREE.LineSegments.call( this, geometry, material );
	
	};
	
	THREE.AxisHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.AxisHelper.prototype.constructor = THREE.AxisHelper;
	
	// File:src/extras/helpers/ArrowHelper.js
	
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @author zz85 / http://github.com/zz85
	 * @author bhouston / http://clara.io
	 *
	 * Creates an arrow for visualizing directions
	 *
	 * Parameters:
	 *  dir - Vector3
	 *  origin - Vector3
	 *  length - Number
	 *  color - color in hex value
	 *  headLength - Number
	 *  headWidth - Number
	 */
	
	THREE.ArrowHelper = ( function () {
	
		var lineGeometry = new THREE.Geometry();
		lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );
	
		var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
		coneGeometry.translate( 0, - 0.5, 0 );
	
		return function ArrowHelper( dir, origin, length, color, headLength, headWidth ) {
	
			// dir is assumed to be normalized
	
			THREE.Object3D.call( this );
	
			if ( color === undefined ) color = 0xffff00;
			if ( length === undefined ) length = 1;
			if ( headLength === undefined ) headLength = 0.2 * length;
			if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
			this.position.copy( origin );
			
			if ( headLength < length ) {
				this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
				this.line.matrixAutoUpdate = false;
				this.add( this.line );
			}
	
			this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
			this.cone.matrixAutoUpdate = false;
			this.add( this.cone );
	
			this.setDirection( dir );
			this.setLength( length, headLength, headWidth );
	
		}
	
	}() );
	
	THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ArrowHelper.prototype.constructor = THREE.ArrowHelper;
	
	THREE.ArrowHelper.prototype.setDirection = ( function () {
	
		var axis = new THREE.Vector3();
		var radians;
	
		return function setDirection( dir ) {
	
			// dir is assumed to be normalized
	
			if ( dir.y > 0.99999 ) {
	
				this.quaternion.set( 0, 0, 0, 1 );
	
			} else if ( dir.y < - 0.99999 ) {
	
				this.quaternion.set( 1, 0, 0, 0 );
	
			} else {
	
				axis.set( dir.z, 0, - dir.x ).normalize();
	
				radians = Math.acos( dir.y );
	
				this.quaternion.setFromAxisAngle( axis, radians );
	
			}
	
		};
	
	}() );
	
	THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {
	
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;
	
		if ( headLength < length ){
			this.line.scale.set( 1, length - headLength, 1 );
			this.line.updateMatrix();
		}
	
		this.cone.scale.set( headWidth, headLength, headWidth );
		this.cone.position.y = length;
		this.cone.updateMatrix();
	
	};
	
	THREE.ArrowHelper.prototype.setColor = function ( color ) {
	
		if ( this.line !== undefined ) this.line.material.color.set( color );
		this.cone.material.color.set( color );
	
	};
	
	// File:src/extras/helpers/BoxHelper.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.BoxHelper = function ( object ) {
	
		var indices = new Uint16Array( [ 0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7 ] );
		var positions = new Float32Array( 8 * 3 );
	
		var geometry = new THREE.BufferGeometry();
		geometry.setIndex( new THREE.BufferAttribute( indices, 1 ) );
		geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
	
		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ) );
	
		if ( object !== undefined ) {
	
			this.update( object );
	
		}
	
	};
	
	THREE.BoxHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.BoxHelper.prototype.constructor = THREE.BoxHelper;
	
	THREE.BoxHelper.prototype.update = ( function () {
	
		var box = new THREE.Box3();
	
		return function ( object ) {
	
			box.setFromObject( object );
	
			if ( box.empty() ) return;
	
			var min = box.min;
			var max = box.max;
	
			/*
			  5____4
			1/___0/|
			| 6__|_7
			2/___3/
	
			0: max.x, max.y, max.z
			1: min.x, max.y, max.z
			2: min.x, min.y, max.z
			3: max.x, min.y, max.z
			4: max.x, max.y, min.z
			5: min.x, max.y, min.z
			6: min.x, min.y, min.z
			7: max.x, min.y, min.z
			*/
	
			var position = this.geometry.attributes.position;
			var array = position.array;
	
			array[  0 ] = max.x; array[  1 ] = max.y; array[  2 ] = max.z;
			array[  3 ] = min.x; array[  4 ] = max.y; array[  5 ] = max.z;
			array[  6 ] = min.x; array[  7 ] = min.y; array[  8 ] = max.z;
			array[  9 ] = max.x; array[ 10 ] = min.y; array[ 11 ] = max.z;
			array[ 12 ] = max.x; array[ 13 ] = max.y; array[ 14 ] = min.z;
			array[ 15 ] = min.x; array[ 16 ] = max.y; array[ 17 ] = min.z;
			array[ 18 ] = min.x; array[ 19 ] = min.y; array[ 20 ] = min.z;
			array[ 21 ] = max.x; array[ 22 ] = min.y; array[ 23 ] = min.z;
	
			position.needsUpdate = true;
	
			this.geometry.computeBoundingSphere();
	
		}
	
	} )();
	
	// File:src/extras/helpers/BoundingBoxHelper.js
	
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	// a helper to show the world-axis-aligned bounding box for an object
	
	THREE.BoundingBoxHelper = function ( object, hex ) {
	
		var color = ( hex !== undefined ) ? hex : 0x888888;
	
		this.object = object;
	
		this.box = new THREE.Box3();
	
		THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );
	
	};
	
	THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.BoundingBoxHelper.prototype.constructor = THREE.BoundingBoxHelper;
	
	THREE.BoundingBoxHelper.prototype.update = function () {
	
		this.box.setFromObject( this.object );
	
		this.box.size( this.scale );
	
		this.box.center( this.position );
	
	};
	
	// File:src/extras/helpers/CameraHelper.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 *
	 *	- shows frustum, line of sight and up of the camera
	 *	- suitable for fast updates
	 * 	- based on frustum visualization in lightgl.js shadowmap example
	 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
	 */
	
	THREE.CameraHelper = function ( camera ) {
	
		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );
	
		var pointMap = {};
	
		// colors
	
		var hexFrustum = 0xffaa00;
		var hexCone = 0xff0000;
		var hexUp = 0x00aaff;
		var hexTarget = 0xffffff;
		var hexCross = 0x333333;
	
		// near
	
		addLine( "n1", "n2", hexFrustum );
		addLine( "n2", "n4", hexFrustum );
		addLine( "n4", "n3", hexFrustum );
		addLine( "n3", "n1", hexFrustum );
	
		// far
	
		addLine( "f1", "f2", hexFrustum );
		addLine( "f2", "f4", hexFrustum );
		addLine( "f4", "f3", hexFrustum );
		addLine( "f3", "f1", hexFrustum );
	
		// sides
	
		addLine( "n1", "f1", hexFrustum );
		addLine( "n2", "f2", hexFrustum );
		addLine( "n3", "f3", hexFrustum );
		addLine( "n4", "f4", hexFrustum );
	
		// cone
	
		addLine( "p", "n1", hexCone );
		addLine( "p", "n2", hexCone );
		addLine( "p", "n3", hexCone );
		addLine( "p", "n4", hexCone );
	
		// up
	
		addLine( "u1", "u2", hexUp );
		addLine( "u2", "u3", hexUp );
		addLine( "u3", "u1", hexUp );
	
		// target
	
		addLine( "c", "t", hexTarget );
		addLine( "p", "c", hexCross );
	
		// cross
	
		addLine( "cn1", "cn2", hexCross );
		addLine( "cn3", "cn4", hexCross );
	
		addLine( "cf1", "cf2", hexCross );
		addLine( "cf3", "cf4", hexCross );
	
		function addLine( a, b, hex ) {
	
			addPoint( a, hex );
			addPoint( b, hex );
	
		}
	
		function addPoint( id, hex ) {
	
			geometry.vertices.push( new THREE.Vector3() );
			geometry.colors.push( new THREE.Color( hex ) );
	
			if ( pointMap[ id ] === undefined ) {
	
				pointMap[ id ] = [];
	
			}
	
			pointMap[ id ].push( geometry.vertices.length - 1 );
	
		}
	
		THREE.LineSegments.call( this, geometry, material );
	
		this.camera = camera;
		this.camera.updateProjectionMatrix();
	
		this.matrix = camera.matrixWorld;
		this.matrixAutoUpdate = false;
	
		this.pointMap = pointMap;
	
		this.update();
	
	};
	
	THREE.CameraHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.CameraHelper.prototype.constructor = THREE.CameraHelper;
	
	THREE.CameraHelper.prototype.update = function () {
	
		var geometry, pointMap;
	
		var vector = new THREE.Vector3();
		var camera = new THREE.Camera();
	
		function setPoint( point, x, y, z ) {
	
			vector.set( x, y, z ).unproject( camera );
	
			var points = pointMap[ point ];
	
			if ( points !== undefined ) {
	
				for ( var i = 0, il = points.length; i < il; i ++ ) {
	
					geometry.vertices[ points[ i ] ].copy( vector );
	
				}
	
			}
	
		}
	
		return function () {
	
			geometry = this.geometry;
			pointMap = this.pointMap;
	
			var w = 1, h = 1;
	
			// we need just camera projection matrix
			// world matrix must be identity
	
			camera.projectionMatrix.copy( this.camera.projectionMatrix );
	
			// center / target
	
			setPoint( "c", 0, 0, - 1 );
			setPoint( "t", 0, 0,  1 );
	
			// near
	
			setPoint( "n1", - w, - h, - 1 );
			setPoint( "n2",   w, - h, - 1 );
			setPoint( "n3", - w,   h, - 1 );
			setPoint( "n4",   w,   h, - 1 );
	
			// far
	
			setPoint( "f1", - w, - h, 1 );
			setPoint( "f2",   w, - h, 1 );
			setPoint( "f3", - w,   h, 1 );
			setPoint( "f4",   w,   h, 1 );
	
			// up
	
			setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
			setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
			setPoint( "u3",         0, h * 2,   - 1 );
	
			// cross
	
			setPoint( "cf1", - w,   0, 1 );
			setPoint( "cf2",   w,   0, 1 );
			setPoint( "cf3",   0, - h, 1 );
			setPoint( "cf4",   0,   h, 1 );
	
			setPoint( "cn1", - w,   0, - 1 );
			setPoint( "cn2",   w,   0, - 1 );
			setPoint( "cn3",   0, - h, - 1 );
			setPoint( "cn4",   0,   h, - 1 );
	
			geometry.verticesNeedUpdate = true;
	
		};
	
	}();
	
	// File:src/extras/helpers/DirectionalLightHelper.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	 */
	
	THREE.DirectionalLightHelper = function ( light, size ) {
	
		THREE.Object3D.call( this );
	
		this.light = light;
		this.light.updateMatrixWorld();
	
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
	
		size = size || 1;
	
		var geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3( - size,   size, 0 ),
			new THREE.Vector3(   size,   size, 0 ),
			new THREE.Vector3(   size, - size, 0 ),
			new THREE.Vector3( - size, - size, 0 ),
			new THREE.Vector3( - size,   size, 0 )
		);
	
		var material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
		this.lightPlane = new THREE.Line( geometry, material );
		this.add( this.lightPlane );
	
		geometry = new THREE.Geometry();
		geometry.vertices.push(
			new THREE.Vector3(),
			new THREE.Vector3()
		);
	
		material = new THREE.LineBasicMaterial( { fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
		this.targetLine = new THREE.Line( geometry, material );
		this.add( this.targetLine );
	
		this.update();
	
	};
	
	THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.DirectionalLightHelper.prototype.constructor = THREE.DirectionalLightHelper;
	
	THREE.DirectionalLightHelper.prototype.dispose = function () {
	
		this.lightPlane.geometry.dispose();
		this.lightPlane.material.dispose();
		this.targetLine.geometry.dispose();
		this.targetLine.material.dispose();
	
	};
	
	THREE.DirectionalLightHelper.prototype.update = function () {
	
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var v3 = new THREE.Vector3();
	
		return function () {
	
			v1.setFromMatrixPosition( this.light.matrixWorld );
			v2.setFromMatrixPosition( this.light.target.matrixWorld );
			v3.subVectors( v2, v1 );
	
			this.lightPlane.lookAt( v3 );
			this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
			this.targetLine.geometry.vertices[ 1 ].copy( v3 );
			this.targetLine.geometry.verticesNeedUpdate = true;
			this.targetLine.material.color.copy( this.lightPlane.material.color );
	
		};
	
	}();
	
	// File:src/extras/helpers/EdgesHelper.js
	
	/**
	 * @author WestLangley / http://github.com/WestLangley
	 * @param object THREE.Mesh whose geometry will be used
	 * @param hex line color
	 * @param thresholdAngle the minimum angle (in degrees),
	 * between the face normals of adjacent faces,
	 * that is required to render an edge. A value of 10 means
	 * an edge is only rendered if the angle is at least 10 degrees.
	 */
	
	THREE.EdgesHelper = function ( object, hex, thresholdAngle ) {
	
		var color = ( hex !== undefined ) ? hex : 0xffffff;
	
		THREE.LineSegments.call( this, new THREE.EdgesGeometry( object.geometry, thresholdAngle ), new THREE.LineBasicMaterial( { color: color } ) );
	
		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;
	
	};
	
	THREE.EdgesHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.EdgesHelper.prototype.constructor = THREE.EdgesHelper;
	
	// File:src/extras/helpers/FaceNormalsHelper.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/
	
	THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {
	
		// FaceNormalsHelper only supports THREE.Geometry
	
		this.object = object;
	
		this.size = ( size !== undefined ) ? size : 1;
	
		var color = ( hex !== undefined ) ? hex : 0xffff00;
	
		var width = ( linewidth !== undefined ) ? linewidth : 1;
	
		//
	
		var nNormals = 0;
	
		var objGeometry = this.object.geometry;
	
		if ( objGeometry instanceof THREE.Geometry ) {
	
			nNormals = objGeometry.faces.length;
	
		} else {
	
			console.warn( 'THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.' );
	
		}
	
		//
	
		var geometry = new THREE.BufferGeometry();
	
		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );
	
		geometry.addAttribute( 'position', positions );
	
		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );
	
		//
	
		this.matrixAutoUpdate = false;
		this.update();
	
	};
	
	THREE.FaceNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.FaceNormalsHelper.prototype.constructor = THREE.FaceNormalsHelper;
	
	THREE.FaceNormalsHelper.prototype.update = ( function () {
	
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();
	
		return function update() {
	
			this.object.updateMatrixWorld( true );
	
			normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
			var matrixWorld = this.object.matrixWorld;
	
			var position = this.geometry.attributes.position;
	
			//
	
			var objGeometry = this.object.geometry;
	
			var vertices = objGeometry.vertices;
	
			var faces = objGeometry.faces;
	
			var idx = 0;
	
			for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
				var face = faces[ i ];
	
				var normal = face.normal;
	
				v1.copy( vertices[ face.a ] )
					.add( vertices[ face.b ] )
					.add( vertices[ face.c ] )
					.divideScalar( 3 )
					.applyMatrix4( matrixWorld );
	
				v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
				position.setXYZ( idx, v1.x, v1.y, v1.z );
	
				idx = idx + 1;
	
				position.setXYZ( idx, v2.x, v2.y, v2.z );
	
				idx = idx + 1;
	
			}
	
			position.needsUpdate = true;
	
			return this;
	
		}
	
	}() );
	
	// File:src/extras/helpers/GridHelper.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.GridHelper = function ( size, step ) {
	
		var geometry = new THREE.Geometry();
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );
	
		this.color1 = new THREE.Color( 0x444444 );
		this.color2 = new THREE.Color( 0x888888 );
	
		for ( var i = - size; i <= size; i += step ) {
	
			geometry.vertices.push(
				new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
				new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
			);
	
			var color = i === 0 ? this.color1 : this.color2;
	
			geometry.colors.push( color, color, color, color );
	
		}
	
		THREE.LineSegments.call( this, geometry, material );
	
	};
	
	THREE.GridHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.GridHelper.prototype.constructor = THREE.GridHelper;
	
	THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {
	
		this.color1.set( colorCenterLine );
		this.color2.set( colorGrid );
	
		this.geometry.colorsNeedUpdate = true;
	
	};
	
	// File:src/extras/helpers/HemisphereLightHelper.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.HemisphereLightHelper = function ( light, sphereSize ) {
	
		THREE.Object3D.call( this );
	
		this.light = light;
		this.light.updateMatrixWorld();
	
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
	
		this.colors = [ new THREE.Color(), new THREE.Color() ];
	
		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		geometry.rotateX( - Math.PI / 2 );
	
		for ( var i = 0, il = 8; i < il; i ++ ) {
	
			geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];
	
		}
	
		var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );
	
		this.lightSphere = new THREE.Mesh( geometry, material );
		this.add( this.lightSphere );
	
		this.update();
	
	};
	
	THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.HemisphereLightHelper.prototype.constructor = THREE.HemisphereLightHelper;
	
	THREE.HemisphereLightHelper.prototype.dispose = function () {
	
		this.lightSphere.geometry.dispose();
		this.lightSphere.material.dispose();
	
	};
	
	THREE.HemisphereLightHelper.prototype.update = function () {
	
		var vector = new THREE.Vector3();
	
		return function () {
	
			this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
			this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );
	
			this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
			this.lightSphere.geometry.colorsNeedUpdate = true;
	
		}
	
	}();
	
	// File:src/extras/helpers/PointLightHelper.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.PointLightHelper = function ( light, sphereSize ) {
	
		this.light = light;
		this.light.updateMatrixWorld();
	
		var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
		material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
		THREE.Mesh.call( this, geometry, material );
	
		this.matrix = this.light.matrixWorld;
		this.matrixAutoUpdate = false;
	
		/*
		var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
		var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );
	
		this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
		this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );
	
		var d = light.distance;
	
		if ( d === 0.0 ) {
	
			this.lightDistance.visible = false;
	
		} else {
	
			this.lightDistance.scale.set( d, d, d );
	
		}
	
		this.add( this.lightDistance );
		*/
	
	};
	
	THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );
	THREE.PointLightHelper.prototype.constructor = THREE.PointLightHelper;
	
	THREE.PointLightHelper.prototype.dispose = function () {
	
		this.geometry.dispose();
		this.material.dispose();
	
	};
	
	THREE.PointLightHelper.prototype.update = function () {
	
		this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
		/*
		var d = this.light.distance;
	
		if ( d === 0.0 ) {
	
			this.lightDistance.visible = false;
	
		} else {
	
			this.lightDistance.visible = true;
			this.lightDistance.scale.set( d, d, d );
	
		}
		*/
	
	};
	
	// File:src/extras/helpers/SkeletonHelper.js
	
	/**
	 * @author Sean Griffin / http://twitter.com/sgrif
	 * @author Michael Guerrero / http://realitymeltdown.com
	 * @author mrdoob / http://mrdoob.com/
	 * @author ikerr / http://verold.com
	 */
	
	THREE.SkeletonHelper = function ( object ) {
	
		this.bones = this.getBoneList( object );
	
		var geometry = new THREE.Geometry();
	
		for ( var i = 0; i < this.bones.length; i ++ ) {
	
			var bone = this.bones[ i ];
	
			if ( bone.parent instanceof THREE.Bone ) {
	
				geometry.vertices.push( new THREE.Vector3() );
				geometry.vertices.push( new THREE.Vector3() );
				geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
				geometry.colors.push( new THREE.Color( 0, 1, 0 ) );
	
			}
	
		}
	
		geometry.dynamic = true;
	
		var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );
	
		THREE.LineSegments.call( this, geometry, material );
	
		this.root = object;
	
		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;
	
		this.update();
	
	};
	
	
	THREE.SkeletonHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.SkeletonHelper.prototype.constructor = THREE.SkeletonHelper;
	
	THREE.SkeletonHelper.prototype.getBoneList = function( object ) {
	
		var boneList = [];
	
		if ( object instanceof THREE.Bone ) {
	
			boneList.push( object );
	
		}
	
		for ( var i = 0; i < object.children.length; i ++ ) {
	
			boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );
	
		}
	
		return boneList;
	
	};
	
	THREE.SkeletonHelper.prototype.update = function () {
	
		var geometry = this.geometry;
	
		var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );
	
		var boneMatrix = new THREE.Matrix4();
	
		var j = 0;
	
		for ( var i = 0; i < this.bones.length; i ++ ) {
	
			var bone = this.bones[ i ];
	
			if ( bone.parent instanceof THREE.Bone ) {
	
				boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
				geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );
	
				boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
				geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );
	
				j += 2;
	
			}
	
		}
	
		geometry.verticesNeedUpdate = true;
	
		geometry.computeBoundingSphere();
	
	};
	
	// File:src/extras/helpers/SpotLightHelper.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/
	
	THREE.SpotLightHelper = function ( light ) {
	
		THREE.Object3D.call( this );
	
		this.light = light;
		this.light.updateMatrixWorld();
	
		this.matrix = light.matrixWorld;
		this.matrixAutoUpdate = false;
	
		var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );
	
		geometry.translate( 0, - 0.5, 0 );
		geometry.rotateX( - Math.PI / 2 );
	
		var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
	
		this.cone = new THREE.Mesh( geometry, material );
		this.add( this.cone );
	
		this.update();
	
	};
	
	THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );
	THREE.SpotLightHelper.prototype.constructor = THREE.SpotLightHelper;
	
	THREE.SpotLightHelper.prototype.dispose = function () {
	
		this.cone.geometry.dispose();
		this.cone.material.dispose();
	
	};
	
	THREE.SpotLightHelper.prototype.update = function () {
	
		var vector = new THREE.Vector3();
		var vector2 = new THREE.Vector3();
	
		return function () {
	
			var coneLength = this.light.distance ? this.light.distance : 10000;
			var coneWidth = coneLength * Math.tan( this.light.angle );
	
			this.cone.scale.set( coneWidth, coneWidth, coneLength );
	
			vector.setFromMatrixPosition( this.light.matrixWorld );
			vector2.setFromMatrixPosition( this.light.target.matrixWorld );
	
			this.cone.lookAt( vector2.sub( vector ) );
	
			this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );
	
		};
	
	}();
	
	// File:src/extras/helpers/VertexNormalsHelper.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 * @author WestLangley / http://github.com/WestLangley
	*/
	
	THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {
	
		this.object = object;
	
		this.size = ( size !== undefined ) ? size : 1;
	
		var color = ( hex !== undefined ) ? hex : 0xff0000;
	
		var width = ( linewidth !== undefined ) ? linewidth : 1;
	
		//
	
		var nNormals = 0;
	
		var objGeometry = this.object.geometry;
	
		if ( objGeometry instanceof THREE.Geometry ) {
	
			nNormals = objGeometry.faces.length * 3;
	
		} else if ( objGeometry instanceof THREE.BufferGeometry ) {
	
			nNormals = objGeometry.attributes.normal.count
	
		}
	
		//
	
		var geometry = new THREE.BufferGeometry();
	
		var positions = new THREE.Float32Attribute( nNormals * 2 * 3, 3 );
	
		geometry.addAttribute( 'position', positions );
	
		THREE.LineSegments.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ) );
	
		//
	
		this.matrixAutoUpdate = false;
	
		this.update();
	
	};
	
	THREE.VertexNormalsHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.VertexNormalsHelper.prototype.constructor = THREE.VertexNormalsHelper;
	
	THREE.VertexNormalsHelper.prototype.update = ( function () {
	
		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var normalMatrix = new THREE.Matrix3();
	
		return function update() {
	
			var keys = [ 'a', 'b', 'c' ];
	
			this.object.updateMatrixWorld( true );
	
			normalMatrix.getNormalMatrix( this.object.matrixWorld );
	
			var matrixWorld = this.object.matrixWorld;
	
			var position = this.geometry.attributes.position;
	
			//
	
			var objGeometry = this.object.geometry;
	
			if ( objGeometry instanceof THREE.Geometry ) {
	
				var vertices = objGeometry.vertices;
	
				var faces = objGeometry.faces;
	
				var idx = 0;
	
				for ( var i = 0, l = faces.length; i < l; i ++ ) {
	
					var face = faces[ i ];
	
					for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {
	
						var vertex = vertices[ face[ keys[ j ] ] ];
	
						var normal = face.vertexNormals[ j ];
	
						v1.copy( vertex ).applyMatrix4( matrixWorld );
	
						v2.copy( normal ).applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
						position.setXYZ( idx, v1.x, v1.y, v1.z );
	
						idx = idx + 1;
	
						position.setXYZ( idx, v2.x, v2.y, v2.z );
	
						idx = idx + 1;
	
					}
	
				}
	
			} else if ( objGeometry instanceof THREE.BufferGeometry ) {
	
				var objPos = objGeometry.attributes.position;
	
				var objNorm = objGeometry.attributes.normal;
	
				var idx = 0;
	
				// for simplicity, ignore index and drawcalls, and render every normal
	
				for ( var j = 0, jl = objPos.count; j < jl; j ++ ) {
	
					v1.set( objPos.getX( j ), objPos.getY( j ), objPos.getZ( j ) ).applyMatrix4( matrixWorld );
	
					v2.set( objNorm.getX( j ), objNorm.getY( j ), objNorm.getZ( j ) );
	
					v2.applyMatrix3( normalMatrix ).normalize().multiplyScalar( this.size ).add( v1 );
	
					position.setXYZ( idx, v1.x, v1.y, v1.z );
	
					idx = idx + 1;
	
					position.setXYZ( idx, v2.x, v2.y, v2.z );
	
					idx = idx + 1;
	
				}
	
			}
	
			position.needsUpdate = true;
	
			return this;
	
		}
	
	}() );
	
	// File:src/extras/helpers/WireframeHelper.js
	
	/**
	 * @author mrdoob / http://mrdoob.com/
	 */
	
	THREE.WireframeHelper = function ( object, hex ) {
	
		var color = ( hex !== undefined ) ? hex : 0xffffff;
	
		THREE.LineSegments.call( this, new THREE.WireframeGeometry( object.geometry ), new THREE.LineBasicMaterial( { color: color } ) );
	
		this.matrix = object.matrixWorld;
		this.matrixAutoUpdate = false;
	
	};
	
	THREE.WireframeHelper.prototype = Object.create( THREE.LineSegments.prototype );
	THREE.WireframeHelper.prototype.constructor = THREE.WireframeHelper;
	
	// File:src/extras/objects/ImmediateRenderObject.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.ImmediateRenderObject = function ( material ) {
	
		THREE.Object3D.call( this );
	
		this.material = material;
		this.render = function ( renderCallback ) {};
	
	};
	
	THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );
	THREE.ImmediateRenderObject.prototype.constructor = THREE.ImmediateRenderObject;
	
	// File:src/extras/objects/MorphBlendMesh.js
	
	/**
	 * @author alteredq / http://alteredqualia.com/
	 */
	
	THREE.MorphBlendMesh = function( geometry, material ) {
	
		THREE.Mesh.call( this, geometry, material );
	
		this.animationsMap = {};
		this.animationsList = [];
	
		// prepare default animation
		// (all frames played together in 1 second)
	
		var numFrames = this.geometry.morphTargets.length;
	
		var name = "__default";
	
		var startFrame = 0;
		var endFrame = numFrames - 1;
	
		var fps = numFrames / 1;
	
		this.createAnimation( name, startFrame, endFrame, fps );
		this.setAnimationWeight( name, 1 );
	
	};
	
	THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );
	THREE.MorphBlendMesh.prototype.constructor = THREE.MorphBlendMesh;
	
	THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {
	
		var animation = {
	
			start: start,
			end: end,
	
			length: end - start + 1,
	
			fps: fps,
			duration: ( end - start ) / fps,
	
			lastFrame: 0,
			currentFrame: 0,
	
			active: false,
	
			time: 0,
			direction: 1,
			weight: 1,
	
			directionBackwards: false,
			mirroredLoop: false
	
		};
	
		this.animationsMap[ name ] = animation;
		this.animationsList.push( animation );
	
	};
	
	THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {
	
		var pattern = /([a-z]+)_?(\d+)/;
	
		var firstAnimation, frameRanges = {};
	
		var geometry = this.geometry;
	
		for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {
	
			var morph = geometry.morphTargets[ i ];
			var chunks = morph.name.match( pattern );
	
			if ( chunks && chunks.length > 1 ) {
	
				var name = chunks[ 1 ];
	
				if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };
	
				var range = frameRanges[ name ];
	
				if ( i < range.start ) range.start = i;
				if ( i > range.end ) range.end = i;
	
				if ( ! firstAnimation ) firstAnimation = name;
	
			}
	
		}
	
		for ( var name in frameRanges ) {
	
			var range = frameRanges[ name ];
			this.createAnimation( name, range.start, range.end, fps );
	
		}
	
		this.firstAnimation = firstAnimation;
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.direction = 1;
			animation.directionBackwards = false;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.direction = - 1;
			animation.directionBackwards = true;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.fps = fps;
			animation.duration = ( animation.end - animation.start ) / animation.fps;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.duration = duration;
			animation.fps = ( animation.end - animation.start ) / animation.duration;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.weight = weight;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.time = time;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {
	
		var time = 0;
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			time = animation.time;
	
		}
	
		return time;
	
	};
	
	THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {
	
		var duration = - 1;
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			duration = animation.duration;
	
		}
	
		return duration;
	
	};
	
	THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.time = 0;
			animation.active = true;
	
		} else {
	
			console.warn( "THREE.MorphBlendMesh: animation[" + name + "] undefined in .playAnimation()" );
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {
	
		var animation = this.animationsMap[ name ];
	
		if ( animation ) {
	
			animation.active = false;
	
		}
	
	};
	
	THREE.MorphBlendMesh.prototype.update = function ( delta ) {
	
		for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {
	
			var animation = this.animationsList[ i ];
	
			if ( ! animation.active ) continue;
	
			var frameTime = animation.duration / animation.length;
	
			animation.time += animation.direction * delta;
	
			if ( animation.mirroredLoop ) {
	
				if ( animation.time > animation.duration || animation.time < 0 ) {
	
					animation.direction *= - 1;
	
					if ( animation.time > animation.duration ) {
	
						animation.time = animation.duration;
						animation.directionBackwards = true;
	
					}
	
					if ( animation.time < 0 ) {
	
						animation.time = 0;
						animation.directionBackwards = false;
	
					}
	
				}
	
			} else {
	
				animation.time = animation.time % animation.duration;
	
				if ( animation.time < 0 ) animation.time += animation.duration;
	
			}
	
			var keyframe = animation.start + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
			var weight = animation.weight;
	
			if ( keyframe !== animation.currentFrame ) {
	
				this.morphTargetInfluences[ animation.lastFrame ] = 0;
				this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;
	
				this.morphTargetInfluences[ keyframe ] = 0;
	
				animation.lastFrame = animation.currentFrame;
				animation.currentFrame = keyframe;
	
			}
	
			var mix = ( animation.time % frameTime ) / frameTime;
	
			if ( animation.directionBackwards ) mix = 1 - mix;
	
			if ( animation.currentFrame !== animation.lastFrame ) {
	
				this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
				this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;
	
			} else {
	
				this.morphTargetInfluences[ animation.currentFrame ] = weight;
	
			}
	
		}
	
	};
	
	
	// Export the THREE object for **Node.js**, with
	// backwards-compatibility for the old `require()` API. If we're in
	// the browser, add `_` as a global object via a string identifier,
	// for Closure Compiler "advanced" mode.
	if (true) {
	  if (typeof module !== 'undefined' && module.exports) {
	    exports = module.exports = THREE;
	  }
	  exports.THREE = THREE;
	} else {
	  this['THREE'] = THREE;
	}


/***/ },
/* 241 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _d = __webpack_require__(238);
	
	var _d2 = _interopRequireDefault(_d);
	
	var _nvd = __webpack_require__(242);
	
	var _nvd2 = _interopRequireDefault(_nvd);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    params: ['config', 'course-id'],
	    bind: function bind() {
	        this.courseChange = false;
	        _d2.default.select(this.el).style('margin-left', '-40');
	    },
	    update: function update(newVal, oldVal) {
	        if (!newVal) return;
	
	        var config = this.params.config;
	        if (!config) return;
	
	        var chart = _nvd2.default.models.stackedAreaChart().height(config.height).margin(config.margin).x(config.x).y(config.y).useVoronoi(config.useVoronoi).clipEdge(config.clipEdge).duration(config.duration).useInteractiveGuideline(config.useInteractiveGuideline).controlLabels({ stacked: "Stacked" });
	
	        if (config.width) {
	            chart.width(config.width);
	            _d2.default.select(this.el).style('width', config.width);
	        }
	        chart.xAxis.showMaxMin(config.xAxis.showMaxMin || false).tickFormat(config.xAxis.tickFormat);
	        chart.yAxis.tickFormat(config.yAxis.tickFormat);
	        chart.legend.vers('furious');
	        chart.interactiveLayer.tooltip.headerFormatter(function (d, i) {
	            return _nvd2.default.models.axis().tickFormat()(d, i);
	        });
	
	        if (this.changeCourse) {
	            _d2.default.select(this.el).selectAll('*').remove();
	            this.changeCourse = false;
	        }
	        _d2.default.select(this.el).style('height', config.height).datum(newVal).transition().duration(1000).call(chart);
	        _nvd2.default.utils.windowResize(chart.update);
	    },
	
	    paramWatchers: {
	        'courseId': function courseId(newVal, oldVal) {
	            if (newVal !== oldVal) {
	                this.courseId = newVal;
	                this.changeCourse = true;
	            }
	        }
	    }
	};

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	/* nvd3 version 1.8.4 (https://github.com/novus/nvd3) 2016-07-03 */
	(function(){
	
	// set up main nv object
	var nv = {};
	
	// the major global objects under the nv namespace
	nv.dev = false; //set false when in production
	nv.tooltip = nv.tooltip || {}; // For the tooltip system
	nv.utils = nv.utils || {}; // Utility subsystem
	nv.models = nv.models || {}; //stores all the possible models/components
	nv.charts = {}; //stores all the ready to use charts
	nv.logs = {}; //stores some statistics and potential error messages
	nv.dom = {}; //DOM manipulation functions
	
	// Node/CommonJS - require D3
	if (typeof(module) !== 'undefined' && typeof(exports) !== 'undefined' && typeof(d3) == 'undefined') {
	    d3 = __webpack_require__(238);
	}
	
	nv.dispatch = d3.dispatch('render_start', 'render_end');
	
	// Function bind polyfill
	// Needed ONLY for phantomJS as it's missing until version 2.0 which is unreleased as of this comment
	// https://github.com/ariya/phantomjs/issues/10522
	// http://kangax.github.io/compat-table/es5/#Function.prototype.bind
	// phantomJS is used for running the test suite
	if (!Function.prototype.bind) {
	    Function.prototype.bind = function (oThis) {
	        if (typeof this !== "function") {
	            // closest thing possible to the ECMAScript 5 internal IsCallable function
	            throw new TypeError("Function.prototype.bind - what is trying to be bound is not callable");
	        }
	
	        var aArgs = Array.prototype.slice.call(arguments, 1),
	            fToBind = this,
	            fNOP = function () {},
	            fBound = function () {
	                return fToBind.apply(this instanceof fNOP && oThis
	                        ? this
	                        : oThis,
	                    aArgs.concat(Array.prototype.slice.call(arguments)));
	            };
	
	        fNOP.prototype = this.prototype;
	        fBound.prototype = new fNOP();
	        return fBound;
	    };
	}
	
	//  Development render timers - disabled if dev = false
	if (nv.dev) {
	    nv.dispatch.on('render_start', function(e) {
	        nv.logs.startTime = +new Date();
	    });
	
	    nv.dispatch.on('render_end', function(e) {
	        nv.logs.endTime = +new Date();
	        nv.logs.totalTime = nv.logs.endTime - nv.logs.startTime;
	        nv.log('total', nv.logs.totalTime); // used for development, to keep track of graph generation times
	    });
	}
	
	// Logs all arguments, and returns the last so you can test things in place
	// Note: in IE8 console.log is an object not a function, and if modernizr is used
	// then calling Function.prototype.bind with with anything other than a function
	// causes a TypeError to be thrown.
	nv.log = function() {
	    if (nv.dev && window.console && console.log && console.log.apply)
	        console.log.apply(console, arguments);
	    else if (nv.dev && window.console && typeof console.log == "function" && Function.prototype.bind) {
	        var log = Function.prototype.bind.call(console.log, console);
	        log.apply(console, arguments);
	    }
	    return arguments[arguments.length - 1];
	};
	
	// print console warning, should be used by deprecated functions
	nv.deprecated = function(name, info) {
	    if (console && console.warn) {
	        console.warn('nvd3 warning: `' + name + '` has been deprecated. ', info || '');
	    }
	};
	
	// The nv.render function is used to queue up chart rendering
	// in non-blocking async functions.
	// When all queued charts are done rendering, nv.dispatch.render_end is invoked.
	nv.render = function render(step) {
	    // number of graphs to generate in each timeout loop
	    step = step || 1;
	
	    nv.render.active = true;
	    nv.dispatch.render_start();
	
	    var renderLoop = function() {
	        var chart, graph;
	
	        for (var i = 0; i < step && (graph = nv.render.queue[i]); i++) {
	            chart = graph.generate();
	            if (typeof graph.callback == typeof(Function)) graph.callback(chart);
	        }
	
	        nv.render.queue.splice(0, i);
	
	        if (nv.render.queue.length) {
	            setTimeout(renderLoop);
	        }
	        else {
	            nv.dispatch.render_end();
	            nv.render.active = false;
	        }
	    };
	
	    setTimeout(renderLoop);
	};
	
	nv.render.active = false;
	nv.render.queue = [];
	
	/*
	Adds a chart to the async rendering queue. This method can take arguments in two forms:
	nv.addGraph({
	    generate: <Function>
	    callback: <Function>
	})
	
	or
	
	nv.addGraph(<generate Function>, <callback Function>)
	
	The generate function should contain code that creates the NVD3 model, sets options
	on it, adds data to an SVG element, and invokes the chart model. The generate function
	should return the chart model.  See examples/lineChart.html for a usage example.
	
	The callback function is optional, and it is called when the generate function completes.
	*/
	nv.addGraph = function(obj) {
	    if (typeof arguments[0] === typeof(Function)) {
	        obj = {generate: arguments[0], callback: arguments[1]};
	    }
	
	    nv.render.queue.push(obj);
	
	    if (!nv.render.active) {
	        nv.render();
	    }
	};
	
	// Node/CommonJS exports
	if (true) {
	  module.exports = nv;
	}
	
	if (typeof(window) !== 'undefined') {
	  window.nv = nv;
	}
	/* Facade for queueing DOM write operations
	 * with Fastdom (https://github.com/wilsonpage/fastdom)
	 * if available.
	 * This could easily be extended to support alternate
	 * implementations in the future.
	 */
	nv.dom.write = function(callback) {
		if (window.fastdom !== undefined) {
			return fastdom.mutate(callback);
		}
		return callback();
	};
	
	/* Facade for queueing DOM read operations
	 * with Fastdom (https://github.com/wilsonpage/fastdom)
	 * if available.
	 * This could easily be extended to support alternate
	 * implementations in the future.
	 */
	nv.dom.read = function(callback) {
		if (window.fastdom !== undefined) {
			return fastdom.measure(callback);
		}
		return callback();
	};
	/* Utility class to handle creation of an interactive layer.
	 This places a rectangle on top of the chart. When you mouse move over it, it sends a dispatch
	 containing the X-coordinate. It can also render a vertical line where the mouse is located.
	
	 dispatch.elementMousemove is the important event to latch onto.  It is fired whenever the mouse moves over
	 the rectangle. The dispatch is given one object which contains the mouseX/Y location.
	 It also has 'pointXValue', which is the conversion of mouseX to the x-axis scale.
	 */
	nv.interactiveGuideline = function() {
	    "use strict";
	
	    var margin = { left: 0, top: 0 } //Pass the chart's top and left magins. Used to calculate the mouseX/Y.
	        ,   width = null
	        ,   height = null
	        ,   xScale = d3.scale.linear()
	        ,   dispatch = d3.dispatch('elementMousemove', 'elementMouseout', 'elementClick', 'elementDblclick', 'elementMouseDown', 'elementMouseUp')
	        ,   showGuideLine = true
	        ,   svgContainer = null // Must pass the chart's svg, we'll use its mousemove event.
	        ,   tooltip = nv.models.tooltip()
	        ,   isMSIE =  window.ActiveXObject// Checkt if IE by looking for activeX. (excludes IE11)
	    ;
	
	    tooltip
	        .duration(0)
	        .hideDelay(0)
	        .hidden(false);
	
	    function layer(selection) {
	        selection.each(function(data) {
	            var container = d3.select(this);
	            var availableWidth = (width || 960), availableHeight = (height || 400);
	            var wrap = container.selectAll("g.nv-wrap.nv-interactiveLineLayer")
	                .data([data]);
	            var wrapEnter = wrap.enter()
	                .append("g").attr("class", " nv-wrap nv-interactiveLineLayer");
	            wrapEnter.append("g").attr("class","nv-interactiveGuideLine");
	
	            if (!svgContainer) {
	                return;
	            }
	
	            function mouseHandler() {
	                var d3mouse = d3.mouse(this);
	                var mouseX = d3mouse[0];
	                var mouseY = d3mouse[1];
	                var subtractMargin = true;
	                var mouseOutAnyReason = false;
	                if (isMSIE) {
	                    /*
	                     D3.js (or maybe SVG.getScreenCTM) has a nasty bug in Internet Explorer 10.
	                     d3.mouse() returns incorrect X,Y mouse coordinates when mouse moving
	                     over a rect in IE 10.
	                     However, d3.event.offsetX/Y also returns the mouse coordinates
	                     relative to the triggering <rect>. So we use offsetX/Y on IE.
	                     */
	                    mouseX = d3.event.offsetX;
	                    mouseY = d3.event.offsetY;
	
	                    /*
	                     On IE, if you attach a mouse event listener to the <svg> container,
	                     it will actually trigger it for all the child elements (like <path>, <circle>, etc).
	                     When this happens on IE, the offsetX/Y is set to where ever the child element
	                     is located.
	                     As a result, we do NOT need to subtract margins to figure out the mouse X/Y
	                     position under this scenario. Removing the line below *will* cause
	                     the interactive layer to not work right on IE.
	                     */
	                    if(d3.event.target.tagName !== "svg") {
	                        subtractMargin = false;
	                    }
	
	                    if (d3.event.target.className.baseVal.match("nv-legend")) {
	                        mouseOutAnyReason = true;
	                    }
	
	                }
	
	                if(subtractMargin) {
	                    mouseX -= margin.left;
	                    mouseY -= margin.top;
	                }
	
	                /* If mouseX/Y is outside of the chart's bounds,
	                 trigger a mouseOut event.
	                 */
	                if (d3.event.type === 'mouseout'
	                    || mouseX < 0 || mouseY < 0
	                    || mouseX > availableWidth || mouseY > availableHeight
	                    || (d3.event.relatedTarget && d3.event.relatedTarget.ownerSVGElement === undefined)
	                    || mouseOutAnyReason
	                    ) {
	
	                    if (isMSIE) {
	                        if (d3.event.relatedTarget
	                            && d3.event.relatedTarget.ownerSVGElement === undefined
	                            && (d3.event.relatedTarget.className === undefined
	                                || d3.event.relatedTarget.className.match(tooltip.nvPointerEventsClass))) {
	
	                            return;
	                        }
	                    }
	                    dispatch.elementMouseout({
	                        mouseX: mouseX,
	                        mouseY: mouseY
	                    });
	                    layer.renderGuideLine(null); //hide the guideline
	                    tooltip.hidden(true);
	                    return;
	                } else {
	                    tooltip.hidden(false);
	                }
	
	
	                var scaleIsOrdinal = typeof xScale.rangeBands === 'function';
	                var pointXValue = undefined;
	
	                // Ordinal scale has no invert method
	                if (scaleIsOrdinal) {
	                    var elementIndex = d3.bisect(xScale.range(), mouseX) - 1;
	                    // Check if mouseX is in the range band
	                    if (xScale.range()[elementIndex] + xScale.rangeBand() >= mouseX) {
	                        pointXValue = xScale.domain()[d3.bisect(xScale.range(), mouseX) - 1];
	                    }
	                    else {
	                        dispatch.elementMouseout({
	                            mouseX: mouseX,
	                            mouseY: mouseY
	                        });
	                        layer.renderGuideLine(null); //hide the guideline
	                        tooltip.hidden(true);
	                        return;
	                    }
	                }
	                else {
	                    pointXValue = xScale.invert(mouseX);
	                }
	
	                dispatch.elementMousemove({
	                    mouseX: mouseX,
	                    mouseY: mouseY,
	                    pointXValue: pointXValue
	                });
	
	                //If user double clicks the layer, fire a elementDblclick
	                if (d3.event.type === "dblclick") {
	                    dispatch.elementDblclick({
	                        mouseX: mouseX,
	                        mouseY: mouseY,
	                        pointXValue: pointXValue
	                    });
	                }
	
	                // if user single clicks the layer, fire elementClick
	                if (d3.event.type === 'click') {
	                    dispatch.elementClick({
	                        mouseX: mouseX,
	                        mouseY: mouseY,
	                        pointXValue: pointXValue
	                    });
	                }
	
	                // if user presses mouse down the layer, fire elementMouseDown
	                if (d3.event.type === 'mousedown') {
	                	dispatch.elementMouseDown({
	                		mouseX: mouseX,
	                		mouseY: mouseY,
	                		pointXValue: pointXValue
	                	});
	                }
	
	                // if user presses mouse down the layer, fire elementMouseUp
	                if (d3.event.type === 'mouseup') {
	                	dispatch.elementMouseUp({
	                		mouseX: mouseX,
	                		mouseY: mouseY,
	                		pointXValue: pointXValue
	                	});
	                }
	            }
	
	            svgContainer
	                .on("touchmove",mouseHandler)
	                .on("mousemove",mouseHandler, true)
	                .on("mouseout" ,mouseHandler,true)
	                .on("mousedown" ,mouseHandler,true)
	                .on("mouseup" ,mouseHandler,true)
	                .on("dblclick" ,mouseHandler)
	                .on("click", mouseHandler)
	            ;
	
	            layer.guideLine = null;
	            //Draws a vertical guideline at the given X postion.
	            layer.renderGuideLine = function(x) {
	                if (!showGuideLine) return;
	                if (layer.guideLine && layer.guideLine.attr("x1") === x) return;
	                nv.dom.write(function() {
	                    var line = wrap.select(".nv-interactiveGuideLine")
	                        .selectAll("line")
	                        .data((x != null) ? [nv.utils.NaNtoZero(x)] : [], String);
	                    line.enter()
	                        .append("line")
	                        .attr("class", "nv-guideline")
	                        .attr("x1", function(d) { return d;})
	                        .attr("x2", function(d) { return d;})
	                        .attr("y1", availableHeight)
	                        .attr("y2",0);
	                    line.exit().remove();
	                });
	            }
	        });
	    }
	
	    layer.dispatch = dispatch;
	    layer.tooltip = tooltip;
	
	    layer.margin = function(_) {
	        if (!arguments.length) return margin;
	        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
	        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
	        return layer;
	    };
	
	    layer.width = function(_) {
	        if (!arguments.length) return width;
	        width = _;
	        return layer;
	    };
	
	    layer.height = function(_) {
	        if (!arguments.length) return height;
	        height = _;
	        return layer;
	    };
	
	    layer.xScale = function(_) {
	        if (!arguments.length) return xScale;
	        xScale = _;
	        return layer;
	    };
	
	    layer.showGuideLine = function(_) {
	        if (!arguments.length) return showGuideLine;
	        showGuideLine = _;
	        return layer;
	    };
	
	    layer.svgContainer = function(_) {
	        if (!arguments.length) return svgContainer;
	        svgContainer = _;
	        return layer;
	    };
	
	    return layer;
	};
	
	/* Utility class that uses d3.bisect to find the index in a given array, where a search value can be inserted.
	 This is different from normal bisectLeft; this function finds the nearest index to insert the search value.
	
	 For instance, lets say your array is [1,2,3,5,10,30], and you search for 28.
	 Normal d3.bisectLeft will return 4, because 28 is inserted after the number 10.  But interactiveBisect will return 5
	 because 28 is closer to 30 than 10.
	
	 Unit tests can be found in: interactiveBisectTest.html
	
	 Has the following known issues:
	 * Will not work if the data points move backwards (ie, 10,9,8,7, etc) or if the data points are in random order.
	 * Won't work if there are duplicate x coordinate values.
	 */
	nv.interactiveBisect = function (values, searchVal, xAccessor) {
	    "use strict";
	    if (! (values instanceof Array)) {
	        return null;
	    }
	    var _xAccessor;
	    if (typeof xAccessor !== 'function') {
	        _xAccessor = function(d) {
	            return d.x;
	        }
	    } else {
	        _xAccessor = xAccessor;
	    }
	    var _cmp = function(d, v) {
	        // Accessors are no longer passed the index of the element along with
	        // the element itself when invoked by d3.bisector.
	        //
	        // Starting at D3 v3.4.4, d3.bisector() started inspecting the
	        // function passed to determine if it should consider it an accessor
	        // or a comparator. This meant that accessors that take two arguments
	        // (expecting an index as the second parameter) are treated as
	        // comparators where the second argument is the search value against
	        // which the first argument is compared.
	        return _xAccessor(d) - v;
	    };
	
	    var bisect = d3.bisector(_cmp).left;
	    var index = d3.max([0, bisect(values,searchVal) - 1]);
	    var currentValue = _xAccessor(values[index]);
	
	    if (typeof currentValue === 'undefined') {
	        currentValue = index;
	    }
	
	    if (currentValue === searchVal) {
	        return index; //found exact match
	    }
	
	    var nextIndex = d3.min([index+1, values.length - 1]);
	    var nextValue = _xAccessor(values[nextIndex]);
	
	    if (typeof nextValue === 'undefined') {
	        nextValue = nextIndex;
	    }
	
	    if (Math.abs(nextValue - searchVal) >= Math.abs(currentValue - searchVal)) {
	        return index;
	    } else {
	        return nextIndex
	    }
	};
	
	/*
	 Returns the index in the array "values" that is closest to searchVal.
	 Only returns an index if searchVal is within some "threshold".
	 Otherwise, returns null.
	 */
	nv.nearestValueIndex = function (values, searchVal, threshold) {
	    "use strict";
	    var yDistMax = Infinity, indexToHighlight = null;
	    values.forEach(function(d,i) {
	        var delta = Math.abs(searchVal - d);
	        if ( d != null && delta <= yDistMax && delta < threshold) {
	            yDistMax = delta;
	            indexToHighlight = i;
	        }
	    });
	    return indexToHighlight;
	};
	
	/* Model which can be instantiated to handle tooltip rendering.
	 Example usage:
	 var tip = nv.models.tooltip().gravity('w').distance(23)
	 .data(myDataObject);
	
	 tip();    //just invoke the returned function to render tooltip.
	 */
	nv.models.tooltip = function() {
	    "use strict";
	
	    /*
	    Tooltip data. If data is given in the proper format, a consistent tooltip is generated.
	    Example Format of data:
	    {
	        key: "Date",
	        value: "August 2009",
	        series: [
	            {key: "Series 1", value: "Value 1", color: "#000"},
	            {key: "Series 2", value: "Value 2", color: "#00f"}
	        ]
	    }
	    */
	    var id = "nvtooltip-" + Math.floor(Math.random() * 100000) // Generates a unique id when you create a new tooltip() object.
	        ,   data = null
	        ,   gravity = 'w'   // Can be 'n','s','e','w'. Determines how tooltip is positioned.
	        ,   distance = 25 // Distance to offset tooltip from the mouse location.
	        ,   snapDistance = 0   // Tolerance allowed before tooltip is moved from its current position (creates 'snapping' effect)
	        ,   classes = null  // Attaches additional CSS classes to the tooltip DIV that is created.
	        ,   hidden = true  // Start off hidden, toggle with hide/show functions below.
	        ,   hideDelay = 200  // Delay (in ms) before the tooltip hides after calling hide().
	        ,   tooltip = null // d3 select of the tooltip div.
	        ,   lastPosition = { left: null, top: null } // Last position the tooltip was in.
	        ,   enabled = true  // True -> tooltips are rendered. False -> don't render tooltips.
	        ,   duration = 100 // Tooltip movement duration, in ms.
	        ,   headerEnabled = true // If is to show the tooltip header.
	        ,   nvPointerEventsClass = "nv-pointer-events-none" // CSS class to specify whether element should not have mouse events.
	    ;
	
	    // Format function for the tooltip values column.
	    var valueFormatter = function(d, i) {
	        return d;
	    };
	
	    // Format function for the tooltip header value.
	    var headerFormatter = function(d) {
	        return d;
	    };
	
	    var keyFormatter = function(d, i) {
	        return d;
	    };
	
	    // By default, the tooltip model renders a beautiful table inside a DIV.
	    // You can override this function if a custom tooltip is desired.
	    var contentGenerator = function(d) {
	        if (d === null) {
	            return '';
	        }
	
	        var table = d3.select(document.createElement("table"));
	        if (headerEnabled) {
	            var theadEnter = table.selectAll("thead")
	                .data([d])
	                .enter().append("thead");
	
	            theadEnter.append("tr")
	                .append("td")
	                .attr("colspan", 3)
	                .append("strong")
	                .classed("x-value", true)
	                .html(headerFormatter(d.value));
	        }
	
	        var tbodyEnter = table.selectAll("tbody")
	            .data([d])
	            .enter().append("tbody");
	
	        var trowEnter = tbodyEnter.selectAll("tr")
	                .data(function(p) { return p.series})
	                .enter()
	                .append("tr")
	                .classed("highlight", function(p) { return p.highlight});
	
	        trowEnter.append("td")
	            .classed("legend-color-guide",true)
	            .append("div")
	            .style("background-color", function(p) { return p.color});
	
	        trowEnter.append("td")
	            .classed("key",true)
	            .classed("total",function(p) { return !!p.total})
	            .html(function(p, i) { return keyFormatter(p.key, i)});
	
	        trowEnter.append("td")
	            .classed("value",true)
	            .html(function(p, i) { return valueFormatter(p.value, i) });
	
	        trowEnter.filter(function (p,i) { return p.percent !== undefined }).append("td")
	            .classed("percent", true)
	            .html(function(p, i) { return "(" + d3.format('%')(p.percent) + ")" });
	
	        trowEnter.selectAll("td").each(function(p) {
	            if (p.highlight) {
	                var opacityScale = d3.scale.linear().domain([0,1]).range(["#fff",p.color]);
	                var opacity = 0.6;
	                d3.select(this)
	                    .style("border-bottom-color", opacityScale(opacity))
	                    .style("border-top-color", opacityScale(opacity))
	                ;
	            }
	        });
	
	        var html = table.node().outerHTML;
	        if (d.footer !== undefined)
	            html += "<div class='footer'>" + d.footer + "</div>";
	        return html;
	
	    };
	
	    /*
	     Function that returns the position (relative to the viewport/document.body)
	     the tooltip should be placed in.
	     Should return: {
	        left: <leftPos>,
	        top: <topPos>
	     }
	     */
	    var position = function() {
	        var pos = {
	            left: d3.event !== null ? d3.event.clientX : 0,
	            top: d3.event !== null ? d3.event.clientY : 0
	        };
	
	        if(getComputedStyle(document.body).transform != 'none') {
	            // Take the offset into account, as now the tooltip is relative
	            // to document.body.
	            var client = document.body.getBoundingClientRect();
	            pos.left -= client.left;
	            pos.top -= client.top;
	        }
	
	        return pos;
	    };
	
	    var dataSeriesExists = function(d) {
	        if (d && d.series) {
	            if (nv.utils.isArray(d.series)) {
	                return true;
	            }
	            // if object, it's okay just convert to array of the object
	            if (nv.utils.isObject(d.series)) {
	                d.series = [d.series];
	                return true;
	            }
	        }
	        return false;
	    };
	
	    // Calculates the gravity offset of the tooltip. Parameter is position of tooltip
	    // relative to the viewport.
	    var calcGravityOffset = function(pos) {
	        var height = tooltip.node().offsetHeight,
	            width = tooltip.node().offsetWidth,
	            clientWidth = document.documentElement.clientWidth, // Don't want scrollbars.
	            clientHeight = document.documentElement.clientHeight, // Don't want scrollbars.
	            left, top, tmp;
	
	        // calculate position based on gravity
	        switch (gravity) {
	            case 'e':
	                left = - width - distance;
	                top = - (height / 2);
	                if(pos.left + left < 0) left = distance;
	                if((tmp = pos.top + top) < 0) top -= tmp;
	                if((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;
	                break;
	            case 'w':
	                left = distance;
	                top = - (height / 2);
	                if (pos.left + left + width > clientWidth) left = - width - distance;
	                if ((tmp = pos.top + top) < 0) top -= tmp;
	                if ((tmp = pos.top + top + height) > clientHeight) top -= tmp - clientHeight;
	                break;
	            case 'n':
	                left = - (width / 2) - 5; // - 5 is an approximation of the mouse's height.
	                top = distance;
	                if (pos.top + top + height > clientHeight) top = - height - distance;
	                if ((tmp = pos.left + left) < 0) left -= tmp;
	                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;
	                break;
	            case 's':
	                left = - (width / 2);
	                top = - height - distance;
	                if (pos.top + top < 0) top = distance;
	                if ((tmp = pos.left + left) < 0) left -= tmp;
	                if ((tmp = pos.left + left + width) > clientWidth) left -= tmp - clientWidth;
	                break;
	            case 'center':
	                left = - (width / 2);
	                top = - (height / 2);
	                break;
	            default:
	                left = 0;
	                top = 0;
	                break;
	        }
	
	        return { 'left': left, 'top': top };
	    };
	
	    /*
	     Positions the tooltip in the correct place, as given by the position() function.
	     */
	    var positionTooltip = function() {
	        nv.dom.read(function() {
	            var pos = position(),
	                gravityOffset = calcGravityOffset(pos),
	                left = pos.left + gravityOffset.left,
	                top = pos.top + gravityOffset.top;
	
	            // delay hiding a bit to avoid flickering
	            if (hidden) {
	                tooltip
	                    .interrupt()
	                    .transition()
	                    .delay(hideDelay)
	                    .duration(0)
	                    .style('opacity', 0);
	            } else {
	                // using tooltip.style('transform') returns values un-usable for tween
	                var old_translate = 'translate(' + lastPosition.left + 'px, ' + lastPosition.top + 'px)';
	                var new_translate = 'translate(' + Math.round(left) + 'px, ' + Math.round(top) + 'px)';
	                var translateInterpolator = d3.interpolateString(old_translate, new_translate);
	                var is_hidden = tooltip.style('opacity') < 0.1;
	
	                tooltip
	                    .interrupt() // cancel running transitions
	                    .transition()
	                    .duration(is_hidden ? 0 : duration)
	                    // using tween since some versions of d3 can't auto-tween a translate on a div
	                    .styleTween('transform', function (d) {
	                        return translateInterpolator;
	                    }, 'important')
	                    // Safari has its own `-webkit-transform` and does not support `transform`
	                    .styleTween('-webkit-transform', function (d) {
	                        return translateInterpolator;
	                    })
	                    .style('-ms-transform', new_translate)
	                    .style('opacity', 1);
	            }
	
	            lastPosition.left = left;
	            lastPosition.top = top;
	        });
	    };
	
	    // Creates new tooltip container, or uses existing one on DOM.
	    function initTooltip() {
	        if (!tooltip || !tooltip.node()) {
	            // Create new tooltip div if it doesn't exist on DOM.
	
	            var data = [1];
	            tooltip = d3.select(document.body).selectAll('.nvtooltip').data(data);
	
	            tooltip.enter().append('div')
	                   .attr("class", "nvtooltip " + (classes ? classes : "xy-tooltip"))
	                   .attr("id", id)
	                   .style("top", 0).style("left", 0)
	                   .style('opacity', 0)
	                   .style('position', 'fixed')
	                   .selectAll("div, table, td, tr").classed(nvPointerEventsClass, true)
	                   .classed(nvPointerEventsClass, true);
	
	            tooltip.exit().remove()
	        }
	    }
	
	    // Draw the tooltip onto the DOM.
	    function nvtooltip() {
	        if (!enabled) return;
	        if (!dataSeriesExists(data)) return;
	
	        nv.dom.write(function () {
	            initTooltip();
	            // Generate data and set it into tooltip.
	            // Bonus - If you override contentGenerator and return falsey you can use something like
	            //         React or Knockout to bind the data for your tooltip.
	            var newContent = contentGenerator(data);
	            if (newContent) {
	                tooltip.node().innerHTML = newContent;
	            }
	
	            positionTooltip();
	        });
	
	        return nvtooltip;
	    }
	
	    nvtooltip.nvPointerEventsClass = nvPointerEventsClass;
	    nvtooltip.options = nv.utils.optionsFunc.bind(nvtooltip);
	
	    nvtooltip._options = Object.create({}, {
	        // simple read/write options
	        duration: {get: function(){return duration;}, set: function(_){duration=_;}},
	        gravity: {get: function(){return gravity;}, set: function(_){gravity=_;}},
	        distance: {get: function(){return distance;}, set: function(_){distance=_;}},
	        snapDistance: {get: function(){return snapDistance;}, set: function(_){snapDistance=_;}},
	        classes: {get: function(){return classes;}, set: function(_){classes=_;}},
	        enabled: {get: function(){return enabled;}, set: function(_){enabled=_;}},
	        hideDelay: {get: function(){return hideDelay;}, set: function(_){hideDelay=_;}},
	        contentGenerator: {get: function(){return contentGenerator;}, set: function(_){contentGenerator=_;}},
	        valueFormatter: {get: function(){return valueFormatter;}, set: function(_){valueFormatter=_;}},
	        headerFormatter: {get: function(){return headerFormatter;}, set: function(_){headerFormatter=_;}},
	        keyFormatter: {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},
	        headerEnabled: {get: function(){return headerEnabled;}, set: function(_){headerEnabled=_;}},
	        position: {get: function(){return position;}, set: function(_){position=_;}},
	
	        // Deprecated options
	        chartContainer: {get: function(){return document.body;}, set: function(_){
	            // deprecated after 1.8.3
	            nv.deprecated('chartContainer', 'feature removed after 1.8.3');
	        }},
	        fixedTop: {get: function(){return null;}, set: function(_){
	            // deprecated after 1.8.1
	            nv.deprecated('fixedTop', 'feature removed after 1.8.1');
	        }},
	        offset: {get: function(){return {left: 0, top: 0};}, set: function(_){
	            // deprecated after 1.8.1
	            nv.deprecated('offset', 'use chart.tooltip.distance() instead');
	        }},
	
	        // options with extra logic
	        hidden: {get: function(){return hidden;}, set: function(_){
	            if (hidden != _) {
	                hidden = !!_;
	                nvtooltip();
	            }
	        }},
	        data: {get: function(){return data;}, set: function(_){
	            // if showing a single data point, adjust data format with that
	            if (_.point) {
	                _.value = _.point.x;
	                _.series = _.series || {};
	                _.series.value = _.point.y;
	                _.series.color = _.point.color || _.series.color;
	            }
	            data = _;
	        }},
	
	        // read only properties
	        node: {get: function(){return tooltip.node();}, set: function(_){}},
	        id: {get: function(){return id;}, set: function(_){}}
	    });
	
	    nv.utils.initOptions(nvtooltip);
	    return nvtooltip;
	};
	
	
	/*
	Gets the browser window size
	
	Returns object with height and width properties
	 */
	nv.utils.windowSize = function() {
	    // Sane defaults
	    var size = {width: 640, height: 480};
	
	    // Most recent browsers use
	    if (window.innerWidth && window.innerHeight) {
	        size.width = window.innerWidth;
	        size.height = window.innerHeight;
	        return (size);
	    }
	
	    // IE can use depending on mode it is in
	    if (document.compatMode=='CSS1Compat' &&
	        document.documentElement &&
	        document.documentElement.offsetWidth ) {
	
	        size.width = document.documentElement.offsetWidth;
	        size.height = document.documentElement.offsetHeight;
	        return (size);
	    }
	
	    // Earlier IE uses Doc.body
	    if (document.body && document.body.offsetWidth) {
	        size.width = document.body.offsetWidth;
	        size.height = document.body.offsetHeight;
	        return (size);
	    }
	
	    return (size);
	};
	
	
	/* handle dumb browser quirks...  isinstance breaks if you use frames
	typeof returns 'object' for null, NaN is a number, etc.
	 */
	nv.utils.isArray = Array.isArray;
	nv.utils.isObject = function(a) {
	    return a !== null && typeof a === 'object';
	};
	nv.utils.isFunction = function(a) {
	    return typeof a === 'function';
	};
	nv.utils.isDate = function(a) {
	    return toString.call(a) === '[object Date]';
	};
	nv.utils.isNumber = function(a) {
	    return !isNaN(a) && typeof a === 'number';
	};
	
	
	/*
	Binds callback function to run when window is resized
	 */
	nv.utils.windowResize = function(handler) {
	    if (window.addEventListener) {
	        window.addEventListener('resize', handler);
	    } else {
	        nv.log("ERROR: Failed to bind to window.resize with: ", handler);
	    }
	    // return object with clear function to remove the single added callback.
	    return {
	        callback: handler,
	        clear: function() {
	            window.removeEventListener('resize', handler);
	        }
	    }
	};
	
	
	/*
	Backwards compatible way to implement more d3-like coloring of graphs.
	Can take in nothing, an array, or a function/scale
	To use a normal scale, get the range and pass that because we must be able
	to take two arguments and use the index to keep backward compatibility
	*/
	nv.utils.getColor = function(color) {
	    //if you pass in nothing, get default colors back
	    if (color === undefined) {
	        return nv.utils.defaultColor();
	
	    //if passed an array, turn it into a color scale
	    } else if(nv.utils.isArray(color)) {
	        var color_scale = d3.scale.ordinal().range(color);
	        return function(d, i) {
	            var key = i === undefined ? d : i;
	            return d.color || color_scale(key);
	        };
	
	    //if passed a function or scale, return it, or whatever it may be
	    //external libs, such as angularjs-nvd3-directives use this
	    } else {
	        //can't really help it if someone passes rubbish as color
	        return color;
	    }
	};
	
	
	/*
	Default color chooser uses a color scale of 20 colors from D3
	 https://github.com/mbostock/d3/wiki/Ordinal-Scales#categorical-colors
	 */
	nv.utils.defaultColor = function() {
	    // get range of the scale so we'll turn it into our own function.
	    return nv.utils.getColor(d3.scale.category20().range());
	};
	
	
	/*
	Returns a color function that takes the result of 'getKey' for each series and
	looks for a corresponding color from the dictionary
	*/
	nv.utils.customTheme = function(dictionary, getKey, defaultColors) {
	    // use default series.key if getKey is undefined
	    getKey = getKey || function(series) { return series.key };
	    defaultColors = defaultColors || d3.scale.category20().range();
	
	    // start at end of default color list and walk back to index 0
	    var defIndex = defaultColors.length;
	
	    return function(series, index) {
	        var key = getKey(series);
	        if (nv.utils.isFunction(dictionary[key])) {
	            return dictionary[key]();
	        } else if (dictionary[key] !== undefined) {
	            return dictionary[key];
	        } else {
	            // no match in dictionary, use a default color
	            if (!defIndex) {
	                // used all the default colors, start over
	                defIndex = defaultColors.length;
	            }
	            defIndex = defIndex - 1;
	            return defaultColors[defIndex];
	        }
	    };
	};
	
	
	/*
	From the PJAX example on d3js.org, while this is not really directly needed
	it's a very cool method for doing pjax, I may expand upon it a little bit,
	open to suggestions on anything that may be useful
	*/
	nv.utils.pjax = function(links, content) {
	
	    var load = function(href) {
	        d3.html(href, function(fragment) {
	            var target = d3.select(content).node();
	            target.parentNode.replaceChild(
	                d3.select(fragment).select(content).node(),
	                target);
	            nv.utils.pjax(links, content);
	        });
	    };
	
	    d3.selectAll(links).on("click", function() {
	        history.pushState(this.href, this.textContent, this.href);
	        load(this.href);
	        d3.event.preventDefault();
	    });
	
	    d3.select(window).on("popstate", function() {
	        if (d3.event.state) {
	            load(d3.event.state);
	        }
	    });
	};
	
	
	/*
	For when we want to approximate the width in pixels for an SVG:text element.
	Most common instance is when the element is in a display:none; container.
	Forumla is : text.length * font-size * constant_factor
	*/
	nv.utils.calcApproxTextWidth = function (svgTextElem) {
	    if (nv.utils.isFunction(svgTextElem.style) && nv.utils.isFunction(svgTextElem.text)) {
	        var fontSize = parseInt(svgTextElem.style("font-size").replace("px",""), 10);
	        var textLength = svgTextElem.text().length;
	        return nv.utils.NaNtoZero(textLength * fontSize * 0.5);
	    }
	    return 0;
	};
	
	
	/*
	Numbers that are undefined, null or NaN, convert them to zeros.
	*/
	nv.utils.NaNtoZero = function(n) {
	    if (!nv.utils.isNumber(n)
	        || isNaN(n)
	        || n === null
	        || n === Infinity
	        || n === -Infinity) {
	
	        return 0;
	    }
	    return n;
	};
	
	/*
	Add a way to watch for d3 transition ends to d3
	*/
	d3.selection.prototype.watchTransition = function(renderWatch){
	    var args = [this].concat([].slice.call(arguments, 1));
	    return renderWatch.transition.apply(renderWatch, args);
	};
	
	
	/*
	Helper object to watch when d3 has rendered something
	*/
	nv.utils.renderWatch = function(dispatch, duration) {
	    if (!(this instanceof nv.utils.renderWatch)) {
	        return new nv.utils.renderWatch(dispatch, duration);
	    }
	
	    var _duration = duration !== undefined ? duration : 250;
	    var renderStack = [];
	    var self = this;
	
	    this.models = function(models) {
	        models = [].slice.call(arguments, 0);
	        models.forEach(function(model){
	            model.__rendered = false;
	            (function(m){
	                m.dispatch.on('renderEnd', function(arg){
	                    m.__rendered = true;
	                    self.renderEnd('model');
	                });
	            })(model);
	
	            if (renderStack.indexOf(model) < 0) {
	                renderStack.push(model);
	            }
	        });
	    return this;
	    };
	
	    this.reset = function(duration) {
	        if (duration !== undefined) {
	            _duration = duration;
	        }
	        renderStack = [];
	    };
	
	    this.transition = function(selection, args, duration) {
	        args = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
	
	        if (args.length > 1) {
	            duration = args.pop();
	        } else {
	            duration = _duration !== undefined ? _duration : 250;
	        }
	        selection.__rendered = false;
	
	        if (renderStack.indexOf(selection) < 0) {
	            renderStack.push(selection);
	        }
	
	        if (duration === 0) {
	            selection.__rendered = true;
	            selection.delay = function() { return this; };
	            selection.duration = function() { return this; };
	            return selection;
	        } else {
	            if (selection.length === 0) {
	                selection.__rendered = true;
	            } else if (selection.every( function(d){ return !d.length; } )) {
	                selection.__rendered = true;
	            } else {
	                selection.__rendered = false;
	            }
	
	            var n = 0;
	            return selection
	                .transition()
	                .duration(duration)
	                .each(function(){ ++n; })
	                .each('end', function(d, i) {
	                    if (--n === 0) {
	                        selection.__rendered = true;
	                        self.renderEnd.apply(this, args);
	                    }
	                });
	        }
	    };
	
	    this.renderEnd = function() {
	        if (renderStack.every( function(d){ return d.__rendered; } )) {
	            renderStack.forEach( function(d){ d.__rendered = false; });
	            dispatch.renderEnd.apply(this, arguments);
	        }
	    }
	
	};
	
	
	/*
	Takes multiple objects and combines them into the first one (dst)
	example:  nv.utils.deepExtend({a: 1}, {a: 2, b: 3}, {c: 4});
	gives:  {a: 2, b: 3, c: 4}
	*/
	nv.utils.deepExtend = function(dst){
	    var sources = arguments.length > 1 ? [].slice.call(arguments, 1) : [];
	    sources.forEach(function(source) {
	        for (var key in source) {
	            var isArray = nv.utils.isArray(dst[key]);
	            var isObject = nv.utils.isObject(dst[key]);
	            var srcObj = nv.utils.isObject(source[key]);
	
	            if (isObject && !isArray && srcObj) {
	                nv.utils.deepExtend(dst[key], source[key]);
	            } else {
	                dst[key] = source[key];
	            }
	        }
	    });
	};
	
	
	/*
	state utility object, used to track d3 states in the models
	*/
	nv.utils.state = function(){
	    if (!(this instanceof nv.utils.state)) {
	        return new nv.utils.state();
	    }
	    var state = {};
	    var _self = this;
	    var _setState = function(){};
	    var _getState = function(){ return {}; };
	    var init = null;
	    var changed = null;
	
	    this.dispatch = d3.dispatch('change', 'set');
	
	    this.dispatch.on('set', function(state){
	        _setState(state, true);
	    });
	
	    this.getter = function(fn){
	        _getState = fn;
	        return this;
	    };
	
	    this.setter = function(fn, callback) {
	        if (!callback) {
	            callback = function(){};
	        }
	        _setState = function(state, update){
	            fn(state);
	            if (update) {
	                callback();
	            }
	        };
	        return this;
	    };
	
	    this.init = function(state){
	        init = init || {};
	        nv.utils.deepExtend(init, state);
	    };
	
	    var _set = function(){
	        var settings = _getState();
	
	        if (JSON.stringify(settings) === JSON.stringify(state)) {
	            return false;
	        }
	
	        for (var key in settings) {
	            if (state[key] === undefined) {
	                state[key] = {};
	            }
	            state[key] = settings[key];
	            changed = true;
	        }
	        return true;
	    };
	
	    this.update = function(){
	        if (init) {
	            _setState(init, false);
	            init = null;
	        }
	        if (_set.call(this)) {
	            this.dispatch.change(state);
	        }
	    };
	
	};
	
	
	/*
	Snippet of code you can insert into each nv.models.* to give you the ability to
	do things like:
	chart.options({
	  showXAxis: true,
	  tooltips: true
	});
	
	To enable in the chart:
	chart.options = nv.utils.optionsFunc.bind(chart);
	*/
	nv.utils.optionsFunc = function(args) {
	    if (args) {
	        d3.map(args).forEach((function(key,value) {
	            if (nv.utils.isFunction(this[key])) {
	                this[key](value);
	            }
	        }).bind(this));
	    }
	    return this;
	};
	
	
	/*
	numTicks:  requested number of ticks
	data:  the chart data
	
	returns the number of ticks to actually use on X axis, based on chart data
	to avoid duplicate ticks with the same value
	*/
	nv.utils.calcTicksX = function(numTicks, data) {
	    // find max number of values from all data streams
	    var numValues = 1;
	    var i = 0;
	    for (i; i < data.length; i += 1) {
	        var stream_len = data[i] && data[i].values ? data[i].values.length : 0;
	        numValues = stream_len > numValues ? stream_len : numValues;
	    }
	    nv.log("Requested number of ticks: ", numTicks);
	    nv.log("Calculated max values to be: ", numValues);
	    // make sure we don't have more ticks than values to avoid duplicates
	    numTicks = numTicks > numValues ? numTicks = numValues - 1 : numTicks;
	    // make sure we have at least one tick
	    numTicks = numTicks < 1 ? 1 : numTicks;
	    // make sure it's an integer
	    numTicks = Math.floor(numTicks);
	    nv.log("Calculating tick count as: ", numTicks);
	    return numTicks;
	};
	
	
	/*
	returns number of ticks to actually use on Y axis, based on chart data
	*/
	nv.utils.calcTicksY = function(numTicks, data) {
	    // currently uses the same logic but we can adjust here if needed later
	    return nv.utils.calcTicksX(numTicks, data);
	};
	
	
	/*
	Add a particular option from an options object onto chart
	Options exposed on a chart are a getter/setter function that returns chart
	on set to mimic typical d3 option chaining, e.g. svg.option1('a').option2('b');
	
	option objects should be generated via Object.create() to provide
	the option of manipulating data via get/set functions.
	*/
	nv.utils.initOption = function(chart, name) {
	    // if it's a call option, just call it directly, otherwise do get/set
	    if (chart._calls && chart._calls[name]) {
	        chart[name] = chart._calls[name];
	    } else {
	        chart[name] = function (_) {
	            if (!arguments.length) return chart._options[name];
	            chart._overrides[name] = true;
	            chart._options[name] = _;
	            return chart;
	        };
	        // calling the option as _option will ignore if set by option already
	        // so nvd3 can set options internally but the stop if set manually
	        chart['_' + name] = function(_) {
	            if (!arguments.length) return chart._options[name];
	            if (!chart._overrides[name]) {
	                chart._options[name] = _;
	            }
	            return chart;
	        }
	    }
	};
	
	
	/*
	Add all options in an options object to the chart
	*/
	nv.utils.initOptions = function(chart) {
	    chart._overrides = chart._overrides || {};
	    var ops = Object.getOwnPropertyNames(chart._options || {});
	    var calls = Object.getOwnPropertyNames(chart._calls || {});
	    ops = ops.concat(calls);
	    for (var i in ops) {
	        nv.utils.initOption(chart, ops[i]);
	    }
	};
	
	
	/*
	Inherit options from a D3 object
	d3.rebind makes calling the function on target actually call it on source
	Also use _d3options so we can track what we inherit for documentation and chained inheritance
	*/
	nv.utils.inheritOptionsD3 = function(target, d3_source, oplist) {
	    target._d3options = oplist.concat(target._d3options || []);
	    oplist.unshift(d3_source);
	    oplist.unshift(target);
	    d3.rebind.apply(this, oplist);
	};
	
	
	/*
	Remove duplicates from an array
	*/
	nv.utils.arrayUnique = function(a) {
	    return a.sort().filter(function(item, pos) {
	        return !pos || item != a[pos - 1];
	    });
	};
	
	
	/*
	Keeps a list of custom symbols to draw from in addition to d3.svg.symbol
	Necessary since d3 doesn't let you extend its list -_-
	Add new symbols by doing nv.utils.symbols.set('name', function(size){...});
	*/
	nv.utils.symbolMap = d3.map();
	
	
	/*
	Replaces d3.svg.symbol so that we can look both there and our own map
	 */
	nv.utils.symbol = function() {
	    var type,
	        size = 64;
	    function symbol(d,i) {
	        var t = type.call(this,d,i);
	        var s = size.call(this,d,i);
	        if (d3.svg.symbolTypes.indexOf(t) !== -1) {
	            return d3.svg.symbol().type(t).size(s)();
	        } else {
	            return nv.utils.symbolMap.get(t)(s);
	        }
	    }
	    symbol.type = function(_) {
	        if (!arguments.length) return type;
	        type = d3.functor(_);
	        return symbol;
	    };
	    symbol.size = function(_) {
	        if (!arguments.length) return size;
	        size = d3.functor(_);
	        return symbol;
	    };
	    return symbol;
	};
	
	
	/*
	Inherit option getter/setter functions from source to target
	d3.rebind makes calling the function on target actually call it on source
	Also track via _inherited and _d3options so we can track what we inherit
	for documentation generation purposes and chained inheritance
	*/
	nv.utils.inheritOptions = function(target, source) {
	    // inherit all the things
	    var ops = Object.getOwnPropertyNames(source._options || {});
	    var calls = Object.getOwnPropertyNames(source._calls || {});
	    var inherited = source._inherited || [];
	    var d3ops = source._d3options || [];
	    var args = ops.concat(calls).concat(inherited).concat(d3ops);
	    args.unshift(source);
	    args.unshift(target);
	    d3.rebind.apply(this, args);
	    // pass along the lists to keep track of them, don't allow duplicates
	    target._inherited = nv.utils.arrayUnique(ops.concat(calls).concat(inherited).concat(ops).concat(target._inherited || []));
	    target._d3options = nv.utils.arrayUnique(d3ops.concat(target._d3options || []));
	};
	
	
	/*
	Runs common initialize code on the svg before the chart builds
	*/
	nv.utils.initSVG = function(svg) {
	    svg.classed({'nvd3-svg':true});
	};
	
	
	/*
	Sanitize and provide default for the container height.
	*/
	nv.utils.sanitizeHeight = function(height, container) {
	    return (height || parseInt(container.style('height'), 10) || 400);
	};
	
	
	/*
	Sanitize and provide default for the container width.
	*/
	nv.utils.sanitizeWidth = function(width, container) {
	    return (width || parseInt(container.style('width'), 10) || 960);
	};
	
	
	/*
	Calculate the available height for a chart.
	*/
	nv.utils.availableHeight = function(height, container, margin) {
	    return Math.max(0,nv.utils.sanitizeHeight(height, container) - margin.top - margin.bottom);
	};
	
	/*
	Calculate the available width for a chart.
	*/
	nv.utils.availableWidth = function(width, container, margin) {
	    return Math.max(0,nv.utils.sanitizeWidth(width, container) - margin.left - margin.right);
	};
	
	/*
	Clear any rendered chart components and display a chart's 'noData' message
	*/
	nv.utils.noData = function(chart, container) {
	    var opt = chart.options(),
	        margin = opt.margin(),
	        noData = opt.noData(),
	        data = (noData == null) ? ["No Data Available."] : [noData],
	        height = nv.utils.availableHeight(null, container, margin),
	        width = nv.utils.availableWidth(null, container, margin),
	        x = margin.left + width/2,
	        y = margin.top + height/2;
	
	    //Remove any previously created chart components
	    container.selectAll('g').remove();
	
	    var noDataText = container.selectAll('.nv-noData').data(data);
	
	    noDataText.enter().append('text')
	        .attr('class', 'nvd3 nv-noData')
	        .attr('dy', '-.7em')
	        .style('text-anchor', 'middle');
	
	    noDataText
	        .attr('x', x)
	        .attr('y', y)
	        .text(function(t){ return t; });
	};
	
	/*
	 Wrap long labels.
	 */
	nv.utils.wrapTicks = function (text, width) {
	    text.each(function() {
	        var text = d3.select(this),
	            words = text.text().split(/\s+/).reverse(),
	            word,
	            line = [],
	            lineNumber = 0,
	            lineHeight = 1.1,
	            y = text.attr("y"),
	            dy = parseFloat(text.attr("dy")),
	            tspan = text.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
	        while (word = words.pop()) {
	            line.push(word);
	            tspan.text(line.join(" "));
	            if (tspan.node().getComputedTextLength() > width) {
	                line.pop();
	                tspan.text(line.join(" "));
	                line = [word];
	                tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
	            }
	        }
	    });
	};
	
	/*
	Check equality of 2 array
	*/
	nv.utils.arrayEquals = function (array1, array2) {
	    if (array1 === array2)
	        return true;
	
	    if (!array1 || !array2)
	        return false;
	
	    // compare lengths - can save a lot of time
	    if (array1.length != array2.length)
	        return false;
	
	    for (var i = 0,
	        l = array1.length; i < l; i++) {
	        // Check if we have nested arrays
	        if (array1[i] instanceof Array && array2[i] instanceof Array) {
	            // recurse into the nested arrays
	            if (!nv.arrayEquals(array1[i], array2[i]))
	                return false;
	        } else if (array1[i] != array2[i]) {
	            // Warning - two different object instances will never be equal: {x:20} != {x:20}
	            return false;
	        }
	    }
	    return true;
	};
	nv.models.axis = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var axis = d3.svg.axis();
	    var scale = d3.scale.linear();
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 75 //only used for tickLabel currently
	        , height = 60 //only used for tickLabel currently
	        , axisLabelText = null
	        , showMaxMin = true //TODO: showMaxMin should be disabled on all ordinal scaled axes
	        , rotateLabels = 0
	        , rotateYLabel = true
	        , staggerLabels = false
	        , isOrdinal = false
	        , ticks = null
	        , axisLabelDistance = 0
	        , fontSize = undefined
	        , duration = 250
	        , dispatch = d3.dispatch('renderEnd')
	        ;
	    axis
	        .scale(scale)
	        .orient('bottom')
	        .tickFormat(function(d) { return d })
	    ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var scale0;
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-axis').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-axis');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            if (ticks !== null)
	                axis.ticks(ticks);
	            else if (axis.orient() == 'top' || axis.orient() == 'bottom')
	                axis.ticks(Math.abs(scale.range()[1] - scale.range()[0]) / 100);
	
	            //TODO: consider calculating width/height based on whether or not label is added, for reference in charts using this component
	            g.watchTransition(renderWatch, 'axis').call(axis);
	
	            scale0 = scale0 || axis.scale();
	
	            var fmt = axis.tickFormat();
	            if (fmt == null) {
	                fmt = scale0.tickFormat();
	            }
	
	            var axisLabel = g.selectAll('text.nv-axislabel')
	                .data([axisLabelText || null]);
	            axisLabel.exit().remove();
	
	            //only skip when fontSize is undefined so it can be cleared with a null or blank string
	            if (fontSize !== undefined) {
	                g.selectAll('g').select("text").style('font-size', fontSize);
	            }
	
	            var xLabelMargin;
	            var axisMaxMin;
	            var w;
	            switch (axis.orient()) {
	                case 'top':
	                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
	                  w = 0;
	                  if (scale.range().length === 1) {
	                    w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
	                  } else if (scale.range().length === 2) {
	                    w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
	                  } else if ( scale.range().length > 2){
	                    w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);
	                  };
	                    axisLabel
	                        .attr('text-anchor', 'middle')
	                        .attr('y', 0)
	                        .attr('x', w/2);
	                    if (showMaxMin) {
	                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
	                            .data(scale.domain());
	                        axisMaxMin.enter().append('g').attr('class',function(d,i){
	                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
	                        }).append('text');
	                        axisMaxMin.exit().remove();
	                        axisMaxMin
	                            .attr('transform', function(d,i) {
	                                return 'translate(' + nv.utils.NaNtoZero(scale(d)) + ',0)'
	                            })
	                            .select('text')
	                            .attr('dy', '-0.5em')
	                            .attr('y', -axis.tickPadding())
	                            .attr('text-anchor', 'middle')
	                            .text(function(d,i) {
	                                var v = fmt(d);
	                                return ('' + v).match('NaN') ? '' : v;
	                            });
	                        axisMaxMin.watchTransition(renderWatch, 'min-max top')
	                            .attr('transform', function(d,i) {
	                                return 'translate(' + nv.utils.NaNtoZero(scale.range()[i]) + ',0)'
	                            });
	                    }
	                    break;
	                case 'bottom':
	                    xLabelMargin = axisLabelDistance + 36;
	                    var maxTextWidth = 30;
	                    var textHeight = 0;
	                    var xTicks = g.selectAll('g').select("text");
	                    var rotateLabelsRule = '';
	                    if (rotateLabels%360) {
	                        //Reset transform on ticks so textHeight can be calculated correctly
	                        xTicks.attr('transform', ''); 
	                        //Calculate the longest xTick width
	                        xTicks.each(function(d,i){
	                            var box = this.getBoundingClientRect();
	                            var width = box.width;
	                            textHeight = box.height;
	                            if(width > maxTextWidth) maxTextWidth = width;
	                        });
	                        rotateLabelsRule = 'rotate(' + rotateLabels + ' 0,' + (textHeight/2 + axis.tickPadding()) + ')';
	                        //Convert to radians before calculating sin. Add 30 to margin for healthy padding.
	                        var sin = Math.abs(Math.sin(rotateLabels*Math.PI/180));
	                        xLabelMargin = (sin ? sin*maxTextWidth : maxTextWidth)+30;
	                        //Rotate all xTicks
	                        xTicks
	                            .attr('transform', rotateLabelsRule)
	                            .style('text-anchor', rotateLabels%360 > 0 ? 'start' : 'end');
	                    } else {
	                        if (staggerLabels) {
	                            xTicks
	                                .attr('transform', function(d,i) {
	                                    return 'translate(0,' + (i % 2 == 0 ? '0' : '12') + ')'
	                                });
	                        } else {
	                            xTicks.attr('transform', "translate(0,0)");
	                        }
	                    }
	                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
	                    w = 0;
	                    if (scale.range().length === 1) {
	                        w = isOrdinal ? scale.range()[0] * 2 + scale.rangeBand() : 0;
	                    } else if (scale.range().length === 2) {
	                        w = isOrdinal ? scale.range()[0] + scale.range()[1] + scale.rangeBand() : scale.range()[1];
	                    } else if ( scale.range().length > 2){
	                        w = scale.range()[scale.range().length-1]+(scale.range()[1]-scale.range()[0]);
	                    };
	                    axisLabel
	                        .attr('text-anchor', 'middle')
	                        .attr('y', xLabelMargin)
	                        .attr('x', w/2);
	                    if (showMaxMin) {
	                        //if (showMaxMin && !isOrdinal) {
	                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
	                            //.data(scale.domain())
	                            .data([scale.domain()[0], scale.domain()[scale.domain().length - 1]]);
	                        axisMaxMin.enter().append('g').attr('class',function(d,i){
	                                return ['nv-axisMaxMin','nv-axisMaxMin-x',(i == 0 ? 'nv-axisMin-x':'nv-axisMax-x')].join(' ')
	                        }).append('text');
	                        axisMaxMin.exit().remove();
	                        axisMaxMin
	                            .attr('transform', function(d,i) {
	                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
	                            })
	                            .select('text')
	                            .attr('dy', '.71em')
	                            .attr('y', axis.tickPadding())
	                            .attr('transform', rotateLabelsRule)
	                            .style('text-anchor', rotateLabels ? (rotateLabels%360 > 0 ? 'start' : 'end') : 'middle')
	                            .text(function(d,i) {
	                                var v = fmt(d);
	                                return ('' + v).match('NaN') ? '' : v;
	                            });
	                        axisMaxMin.watchTransition(renderWatch, 'min-max bottom')
	                            .attr('transform', function(d,i) {
	                                return 'translate(' + nv.utils.NaNtoZero((scale(d) + (isOrdinal ? scale.rangeBand() / 2 : 0))) + ',0)'
	                            });
	                    }
	
	                    break;
	                case 'right':
	                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
	                    axisLabel
	                        .style('text-anchor', rotateYLabel ? 'middle' : 'begin')
	                        .attr('transform', rotateYLabel ? 'rotate(90)' : '')
	                        .attr('y', rotateYLabel ? (-Math.max(margin.right, width) + 12 - (axisLabelDistance || 0)) : -10) //TODO: consider calculating this based on largest tick width... OR at least expose this on chart
	                        .attr('x', rotateYLabel ? (d3.max(scale.range()) / 2) : axis.tickPadding());
	                    if (showMaxMin) {
	                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
	                            .data(scale.domain());
	                       	axisMaxMin.enter().append('g').attr('class',function(d,i){
	                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
	                        }).append('text')
	                            .style('opacity', 0);
	                        axisMaxMin.exit().remove();
	                        axisMaxMin
	                            .attr('transform', function(d,i) {
	                                return 'translate(0,' + nv.utils.NaNtoZero(scale(d)) + ')'
	                            })
	                            .select('text')
	                            .attr('dy', '.32em')
	                            .attr('y', 0)
	                            .attr('x', axis.tickPadding())
	                            .style('text-anchor', 'start')
	                            .text(function(d, i) {
	                                var v = fmt(d);
	                                return ('' + v).match('NaN') ? '' : v;
	                            });
	                        axisMaxMin.watchTransition(renderWatch, 'min-max right')
	                            .attr('transform', function(d,i) {
	                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'
	                            })
	                            .select('text')
	                            .style('opacity', 1);
	                    }
	                    break;
	                case 'left':
	                    /*
	                     //For dynamically placing the label. Can be used with dynamically-sized chart axis margins
	                     var yTicks = g.selectAll('g').select("text");
	                     yTicks.each(function(d,i){
	                     var labelPadding = this.getBoundingClientRect().width + axis.tickPadding() + 16;
	                     if(labelPadding > width) width = labelPadding;
	                     });
	                     */
	                    axisLabel.enter().append('text').attr('class', 'nv-axislabel');
	                    axisLabel
	                        .style('text-anchor', rotateYLabel ? 'middle' : 'end')
	                        .attr('transform', rotateYLabel ? 'rotate(-90)' : '')
	                        .attr('y', rotateYLabel ? (-Math.max(margin.left, width) + 25 - (axisLabelDistance || 0)) : -10)
	                        .attr('x', rotateYLabel ? (-d3.max(scale.range()) / 2) : -axis.tickPadding());
	                    if (showMaxMin) {
	                        axisMaxMin = wrap.selectAll('g.nv-axisMaxMin')
	                            .data(scale.domain());
	                        axisMaxMin.enter().append('g').attr('class',function(d,i){
	                                return ['nv-axisMaxMin','nv-axisMaxMin-y',(i == 0 ? 'nv-axisMin-y':'nv-axisMax-y')].join(' ')
	                        }).append('text')
	                            .style('opacity', 0);
	                        axisMaxMin.exit().remove();
	                        axisMaxMin
	                            .attr('transform', function(d,i) {
	                                return 'translate(0,' + nv.utils.NaNtoZero(scale0(d)) + ')'
	                            })
	                            .select('text')
	                            .attr('dy', '.32em')
	                            .attr('y', 0)
	                            .attr('x', -axis.tickPadding())
	                            .attr('text-anchor', 'end')
	                            .text(function(d,i) {
	                                var v = fmt(d);
	                                return ('' + v).match('NaN') ? '' : v;
	                            });
	                        axisMaxMin.watchTransition(renderWatch, 'min-max right')
	                            .attr('transform', function(d,i) {
	                                return 'translate(0,' + nv.utils.NaNtoZero(scale.range()[i]) + ')'
	                            })
	                            .select('text')
	                            .style('opacity', 1);
	                    }
	                    break;
	            }
	            axisLabel.text(function(d) { return d });
	
	            if (showMaxMin && (axis.orient() === 'left' || axis.orient() === 'right')) {
	                //check if max and min overlap other values, if so, hide the values that overlap
	                g.selectAll('g') // the g's wrapping each tick
	                    .each(function(d,i) {
	                        d3.select(this).select('text').attr('opacity', 1);
	                        if (scale(d) < scale.range()[1] + 10 || scale(d) > scale.range()[0] - 10) { // 10 is assuming text height is 16... if d is 0, leave it!
	                            if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
	                                d3.select(this).attr('opacity', 0);
	
	                            d3.select(this).select('text').attr('opacity', 0); // Don't remove the ZERO line!!
	                        }
	                    });
	
	                //if Max and Min = 0 only show min, Issue #281
	                if (scale.domain()[0] == scale.domain()[1] && scale.domain()[0] == 0) {
	                    wrap.selectAll('g.nv-axisMaxMin').style('opacity', function (d, i) {
	                        return !i ? 1 : 0
	                    });
	                }
	            }
	
	            if (showMaxMin && (axis.orient() === 'top' || axis.orient() === 'bottom')) {
	                var maxMinRange = [];
	                wrap.selectAll('g.nv-axisMaxMin')
	                    .each(function(d,i) {
	                        try {
	                            if (i) // i== 1, max position
	                                maxMinRange.push(scale(d) - this.getBoundingClientRect().width - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
	                            else // i==0, min position
	                                maxMinRange.push(scale(d) + this.getBoundingClientRect().width + 4)
	                        }catch (err) {
	                            if (i) // i== 1, max position
	                                maxMinRange.push(scale(d) - 4);  //assuming the max and min labels are as wide as the next tick (with an extra 4 pixels just in case)
	                            else // i==0, min position
	                                maxMinRange.push(scale(d) + 4);
	                        }
	                    });
	                // the g's wrapping each tick
	                g.selectAll('g').each(function(d, i) {
	                    if (scale(d) < maxMinRange[0] || scale(d) > maxMinRange[1]) {
	                        if (d > 1e-10 || d < -1e-10) // accounts for minor floating point errors... though could be problematic if the scale is EXTREMELY SMALL
	                            d3.select(this).remove();
	                        else
	                            d3.select(this).select('text').remove(); // Don't remove the ZERO line!!
	                    }
	                });
	            }
	
	            //Highlight zero tick line
	            g.selectAll('.tick')
	                .filter(function (d) {
	                    /*
	                    The filter needs to return only ticks at or near zero.
	                    Numbers like 0.00001 need to count as zero as well,
	                    and the arithmetic trick below solves that.
	                    */
	                    return !parseFloat(Math.round(d * 100000) / 1000000) && (d !== undefined)
	                }) 
	                .classed('zero', true);
	            
	            //store old scales for use in transitions on update
	            scale0 = scale.copy();
	
	        });
	
	        renderWatch.renderEnd('axis immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.axis = axis;
	    chart.dispatch = dispatch;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        axisLabelDistance: {get: function(){return axisLabelDistance;}, set: function(_){axisLabelDistance=_;}},
	        staggerLabels:     {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
	        rotateLabels:      {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
	        rotateYLabel:      {get: function(){return rotateYLabel;}, set: function(_){rotateYLabel=_;}},
	        showMaxMin:        {get: function(){return showMaxMin;}, set: function(_){showMaxMin=_;}},
	        axisLabel:         {get: function(){return axisLabelText;}, set: function(_){axisLabelText=_;}},
	        height:            {get: function(){return height;}, set: function(_){height=_;}},
	        ticks:             {get: function(){return ticks;}, set: function(_){ticks=_;}},
	        width:             {get: function(){return width;}, set: function(_){width=_;}},
	        fontSize:          {get: function(){return fontSize;}, set: function(_){fontSize=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top !== undefined    ? _.top    : margin.top;
	            margin.right  = _.right !== undefined  ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left !== undefined   ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration=_;
	            renderWatch.reset(duration);
	        }},
	        scale: {get: function(){return scale;}, set: function(_){
	            scale = _;
	            axis.scale(scale);
	            isOrdinal = typeof scale.rangeBands === 'function';
	            nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    nv.utils.inheritOptionsD3(chart, axis, ['orient', 'tickValues', 'tickSubdivide', 'tickSize', 'tickPadding', 'tickFormat']);
	    nv.utils.inheritOptionsD3(chart, scale, ['domain', 'range', 'rangeBand', 'rangeBands']);
	
	    return chart;
	};
	nv.models.boxPlot = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0},
	        width = 960,
	        height = 500,
	        id = Math.floor(Math.random() * 10000), // Create semi-unique ID in case user doesn't select one
	        xScale = d3.scale.ordinal(),
	        yScale = d3.scale.linear(),
	        getX  = function(d) { return d.label }, // Default data model selectors.
	        getQ1 = function(d) { return d.values.Q1 },
	        getQ2 = function(d) { return d.values.Q2 },
	        getQ3 = function(d) { return d.values.Q3 },
	        getWl = function(d) { return d.values.whisker_low },
	        getWh = function(d) { return d.values.whisker_high },
	        getColor = function(d) { return d.color },
	        getOlItems  = function(d) { return d.values.outliers },
	        getOlValue = function(d, i, j) { return d },
	        getOlLabel = function(d, i, j) { return d },
	        getOlColor = function(d, i, j) { return undefined },
	        color = nv.utils.defaultColor(),
	        container = null,
	        xDomain, xRange,
	        yDomain, yRange,
	        dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd'),
	        duration = 250,
	        maxBoxWidth = null;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var xScale0, yScale0;
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup Scales
	            xScale.domain(xDomain || data.map(function(d,i) { return getX(d,i); }))
	                .rangeBands(xRange || [0, availableWidth], 0.1);
	
	            // if we know yDomain, no need to calculate
	            var yData = []
	            if (!yDomain) {
	                // (y-range is based on quartiles, whiskers and outliers)
	                var values = [], yMin, yMax;
	                data.forEach(function (d, i) {
	                    var q1 = getQ1(d), q3 = getQ3(d), wl = getWl(d), wh = getWh(d);
	                    var olItems = getOlItems(d);
	                    if (olItems) {
	                        olItems.forEach(function (e, i) {
	                            values.push(getOlValue(e, i, undefined));
	                        });
	                    }
	                    if (wl) { values.push(wl) }
	                    if (q1) { values.push(q1) }
	                    if (q3) { values.push(q3) }
	                    if (wh) { values.push(wh) }
	                });
	                yMin = d3.min(values);
	                yMax = d3.max(values);
	                yData = [ yMin, yMax ] ;
	            }
	
	            yScale.domain(yDomain || yData);
	            yScale.range(yRange || [availableHeight, 0]);
	
	            //store old scales if they exist
	            xScale0 = xScale0 || xScale;
	            yScale0 = yScale0 || yScale.copy().range([yScale(0),yScale(0)]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap');
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var boxplots = wrap.selectAll('.nv-boxplot').data(function(d) { return d });
	            var boxEnter = boxplots.enter().append('g').style('stroke-opacity', 1e-6).style('fill-opacity', 1e-6);
	            boxplots
	                .attr('class', 'nv-boxplot')
	                .attr('transform', function(d,i,j) { return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)'; })
	                .classed('hover', function(d) { return d.hover });
	            boxplots
	                .watchTransition(renderWatch, 'nv-boxplot: boxplots')
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', 0.75)
	                .delay(function(d,i) { return i * duration / data.length })
	                .attr('transform', function(d,i) {
	                    return 'translate(' + (xScale(getX(d,i)) + xScale.rangeBand() * 0.05) + ', 0)';
	                });
	            boxplots.exit().remove();
	
	            // ----- add the SVG elements for each boxPlot -----
	
	            // conditionally append whisker lines
	            boxEnter.each(function(d,i) {
	                var box = d3.select(this);
	                [getWl, getWh].forEach(function (f) {
	                    if (f(d)) {
	                        var key = (f === getWl) ? 'low' : 'high';
	                        box.append('line')
	                          .style('stroke', getColor(d) || color(d,i))
	                          .attr('class', 'nv-boxplot-whisker nv-boxplot-' + key);
	                        box.append('line')
	                          .style('stroke', getColor(d) || color(d,i))
	                          .attr('class', 'nv-boxplot-tick nv-boxplot-' + key);
	                    }
	                });
	            });
	
	            var box_width = function() { return (maxBoxWidth === null ? xScale.rangeBand() * 0.9 : Math.min(75, xScale.rangeBand() * 0.9)); };
	            var box_left  = function() { return xScale.rangeBand() * 0.45 - box_width()/2; };
	            var box_right = function() { return xScale.rangeBand() * 0.45 + box_width()/2; };
	
	            // update whisker lines and ticks
	            [getWl, getWh].forEach(function (f) {
	                var key = (f === getWl) ? 'low' : 'high';
	                var endpoint = (f === getWl) ? getQ1 : getQ3;
	                boxplots.select('line.nv-boxplot-whisker.nv-boxplot-' + key)
	                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')
	                    .attr('x1', xScale.rangeBand() * 0.45 )
	                    .attr('y1', function(d,i) { return yScale(f(d)); })
	                    .attr('x2', xScale.rangeBand() * 0.45 )
	                    .attr('y2', function(d,i) { return yScale(endpoint(d)); });
	                boxplots.select('line.nv-boxplot-tick.nv-boxplot-' + key)
	                  .watchTransition(renderWatch, 'nv-boxplot: boxplots')
	                    .attr('x1', box_left )
	                    .attr('y1', function(d,i) { return yScale(f(d)); })
	                    .attr('x2', box_right )
	                    .attr('y2', function(d,i) { return yScale(f(d)); });
	            });
	
	            [getWl, getWh].forEach(function (f) {
	                var key = (f === getWl) ? 'low' : 'high';
	                boxEnter.selectAll('.nv-boxplot-' + key)
	                  .on('mouseover', function(d,i,j) {
	                      d3.select(this).classed('hover', true);
	                      dispatch.elementMouseover({
	                          series: { key: f(d), color: getColor(d) || color(d,j) },
	                          e: d3.event
	                      });
	                  })
	                  .on('mouseout', function(d,i,j) {
	                      d3.select(this).classed('hover', false);
	                      dispatch.elementMouseout({
	                          series: { key: f(d), color: getColor(d) || color(d,j) },
	                          e: d3.event
	                      });
	                  })
	                  .on('mousemove', function(d,i) {
	                      dispatch.elementMousemove({e: d3.event});
	                  });
	            });
	
	            // boxes
	            boxEnter.append('rect')
	                .attr('class', 'nv-boxplot-box')
	                // tooltip events
	                .on('mouseover', function(d,i) {
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        key: getX(d),
	                        value: getX(d),
	                        series: [
	                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },
	                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },
	                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }
	                        ],
	                        data: d,
	                        index: i,
	                        e: d3.event
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        key: getX(d),
	                        value: getX(d),
	                        series: [
	                            { key: 'Q3', value: getQ3(d), color: getColor(d) || color(d,i) },
	                            { key: 'Q2', value: getQ2(d), color: getColor(d) || color(d,i) },
	                            { key: 'Q1', value: getQ1(d), color: getColor(d) || color(d,i) }
	                        ],
	                        data: d,
	                        index: i,
	                        e: d3.event
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    dispatch.elementMousemove({e: d3.event});
	                });
	
	            // box transitions
	            boxplots.select('rect.nv-boxplot-box')
	              .watchTransition(renderWatch, 'nv-boxplot: boxes')
	                .attr('y', function(d,i) { return yScale(getQ3(d)); })
	                .attr('width', box_width)
	                .attr('x', box_left )
	                .attr('height', function(d,i) { return Math.abs(yScale(getQ3(d)) - yScale(getQ1(d))) || 1 })
	                .style('fill', function(d,i) { return getColor(d) || color(d,i) })
	                .style('stroke', function(d,i) { return getColor(d) || color(d,i) });
	
	            // median line
	            boxEnter.append('line').attr('class', 'nv-boxplot-median');
	
	            boxplots.select('line.nv-boxplot-median')
	              .watchTransition(renderWatch, 'nv-boxplot: boxplots line')
	                .attr('x1', box_left)
	                .attr('y1', function(d,i) { return yScale(getQ2(d)); })
	                .attr('x2', box_right)
	                .attr('y2', function(d,i) { return yScale(getQ2(d)); });
	
	            // outliers
	            var outliers = boxplots.selectAll('.nv-boxplot-outlier').data(function(d) {
	                return getOlItems(d) || [];
	            });
	            outliers.enter().append('circle')
	                .style('fill', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })
	                .style('stroke', function(d,i,j) { return getOlColor(d,i,j) || color(d,j) })
	                .style('z-index', 9000)
	                .on('mouseover', function(d,i,j) {
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },
	                        e: d3.event
	                    });
	                })
	                .on('mouseout', function(d,i,j) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        series: { key: getOlLabel(d,i,j), color: getOlColor(d,i,j) || color(d,j) },
	                        e: d3.event
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    dispatch.elementMousemove({e: d3.event});
	                });
	            outliers.attr('class', 'nv-boxplot-outlier');
	            outliers
	              .watchTransition(renderWatch, 'nv-boxplot: nv-boxplot-outlier')
	                .attr('cx', xScale.rangeBand() * 0.45)
	                .attr('cy', function(d,i,j) { return yScale(getOlValue(d,i,j)); })
	                .attr('r', '3');
	            outliers.exit().remove();
	
	            //store old scales for use in transitions on update
	            xScale0 = xScale.copy();
	            yScale0 = yScale.copy();
	        });
	
	        renderWatch.renderEnd('nv-boxplot immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:       {get: function(){return width;}, set: function(_){width=_;}},
	        height:      {get: function(){return height;}, set: function(_){height=_;}},
	        maxBoxWidth: {get: function(){return maxBoxWidth;}, set: function(_){maxBoxWidth=_;}},
	        x:           {get: function(){return getX;}, set: function(_){getX=_;}},
	        q1: {get: function(){return getQ1;}, set: function(_){getQ1=_;}},
	        q2: {get: function(){return getQ2;}, set: function(_){getQ2=_;}},
	        q3: {get: function(){return getQ3;}, set: function(_){getQ3=_;}},
	        wl: {get: function(){return getWl;}, set: function(_){getWl=_;}},
	        wh: {get: function(){return getWh;}, set: function(_){getWh=_;}},
	        itemColor:    {get: function(){return getColor;}, set: function(_){getColor=_;}},
	        outliers:     {get: function(){return getOlItems;}, set: function(_){getOlItems=_;}},
	        outlierValue: {get: function(){return getOlValue;}, set: function(_){getOlValue=_;}},
	        outlierLabel: {get: function(){return getOlLabel;}, set: function(_){getOlLabel=_;}},
	        outlierColor: {get: function(){return getOlColor;}, set: function(_){getOlColor=_;}},
	        xScale:  {get: function(){return xScale;}, set: function(_){xScale=_;}},
	        yScale:  {get: function(){return yScale;}, set: function(_){yScale=_;}},
	        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        id:          {get: function(){return id;}, set: function(_){id=_;}},
	        // rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},
	        y: {
	            get: function() {
	                console.warn('BoxPlot \'y\' chart option is deprecated. Please use model overrides instead.');
	                return {};
	            },
	            set: function(_) {
	                console.warn('BoxPlot \'y\' chart option is deprecated. Please use model overrides instead.');
	            }
	        },
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	nv.models.boxPlotChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var boxplot = nv.models.boxPlot(),
	        xAxis = nv.models.axis(),
	        yAxis = nv.models.axis();
	
	    var margin = {top: 15, right: 10, bottom: 50, left: 60},
	        width = null,
	        height = null,
	        color = nv.utils.getColor(),
	        showXAxis = true,
	        showYAxis = true,
	        rightAlignYAxis = false,
	        staggerLabels = false,
	        tooltip = nv.models.tooltip(),
	        x, y,
	        noData = 'No Data Available.',
	        dispatch = d3.dispatch('beforeUpdate', 'renderEnd'),
	        duration = 250;
	
	    xAxis
	        .orient('bottom')
	        .showMaxMin(false)
	        .tickFormat(function(d) { return d })
	    ;
	    yAxis
	        .orient((rightAlignYAxis) ? 'right' : 'left')
	        .tickFormat(d3.format(',.1f'))
	    ;
	
	    tooltip.duration(0);
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(boxplot);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this), that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = (width  || parseInt(container.style('width')) || 960) - margin.left - margin.right;
	            var availableHeight = (height || parseInt(container.style('height')) || 400) - margin.top - margin.bottom;
	
	            chart.update = function() {
	                dispatch.beforeUpdate();
	                container.transition().duration(duration).call(chart);
	            };
	            chart.container = this;
	
	            // TODO still need to find a way to validate quartile data presence using boxPlot callbacks.
	            // Display No Data message if there's nothing to show. (quartiles required at minimum).
	            if (!data || !data.length) {
	                var noDataText = container.selectAll('.nv-noData').data([noData]);
	
	                noDataText.enter().append('text')
	                    .attr('class', 'nvd3 nv-noData')
	                    .attr('dy', '-.7em')
	                    .style('text-anchor', 'middle');
	
	                noDataText
	                    .attr('x', margin.left + availableWidth / 2)
	                    .attr('y', margin.top + availableHeight / 2)
	                    .text(function(d) { return d });
	
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = boxplot.xScale();
	            y = boxplot.yScale().clamp(true);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-boxPlotWithAxes').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-boxPlotWithAxes').append('g');
	            var defsEnter = gEnter.append('defs');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis')
	                .append('g').attr('class', 'nv-zeroLine')
	                .append('line');
	
	            gEnter.append('g').attr('class', 'nv-barsWrap');
	            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            if (rightAlignYAxis) {
	                g.select('.nv-y.nv-axis')
	                    .attr('transform', 'translate(' + availableWidth + ',0)');
	            }
	
	            // Main Chart Component(s)
	            boxplot.width(availableWidth).height(availableHeight);
	
	            var barsWrap = g.select('.nv-barsWrap')
	                .datum(data.filter(function(d) { return !d.disabled }))
	
	            barsWrap.transition().call(boxplot);
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-x-label-clip-' + boxplot.id())
	                .append('rect');
	
	            g.select('#nv-x-label-clip-' + boxplot.id() + ' rect')
	                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))
	                .attr('height', 16)
	                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    .ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	
	                g.select('.nv-x.nv-axis').attr('transform', 'translate(0,' + y.range()[0] + ')');
	                g.select('.nv-x.nv-axis').call(xAxis);
	
	                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
	                if (staggerLabels) {
	                    xTicks
	                        .selectAll('text')
	                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 === 0 ? '5' : '17') + ')' })
	                }
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    .ticks( Math.floor(availableHeight/36) ) // can't use nv.utils.calcTicksY with Object data
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis').call(yAxis);
	            }
	
	            // Zero line
	            g.select('.nv-zeroLine line')
	                .attr('x1',0)
	                .attr('x2',availableWidth)
	                .attr('y1', y(0))
	                .attr('y2', y(0))
	            ;
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	        });
	
	        renderWatch.renderEnd('nv-boxplot chart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    boxplot.dispatch.on('elementMouseover.tooltip', function(evt) {
	        tooltip.data(evt).hidden(false);
	    });
	
	    boxplot.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.data(evt).hidden(true);
	    });
	
	    boxplot.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.boxplot = boxplot;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
	        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        tooltipContent:    {get: function(){return tooltip;}, set: function(_){tooltip=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            boxplot.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            boxplot.color(color);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( (_) ? 'right' : 'left');
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, boxplot);
	    nv.utils.initOptions(chart);
	
	    return chart;
	}
	
	// Chart design based on the recommendations of Stephen Few. Implementation
	// based on the work of Clint Ivy, Jamie Love, and Jason Davies.
	// http://projects.instantcognition.com/protovis/bulletchart/
	
	nv.models.bullet = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , orient = 'left' // TODO top & bottom
	        , reverse = false
	        , ranges = function(d) { return d.ranges }
	        , markers = function(d) { return d.markers ? d.markers : [] }
	        , markerLines = function(d) { return d.markerLines ? d.markerLines : [0] }
	        , measures = function(d) { return d.measures }
	        , rangeLabels = function(d) { return d.rangeLabels ? d.rangeLabels : [] }
	        , markerLabels = function(d) { return d.markerLabels ? d.markerLabels : []  }
	        , markerLineLabels = function(d) { return d.markerLineLabels ? d.markerLineLabels : []  }
	        , measureLabels = function(d) { return d.measureLabels ? d.measureLabels : []  }
	        , forceX = [0] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)
	        , width = 380
	        , height = 30
	        , container = null
	        , tickFormat = null
	        , color = nv.utils.getColor(['#1f77b4'])
	        , dispatch = d3.dispatch('elementMouseover', 'elementMouseout', 'elementMousemove')
	        , defaultRangeLabels = ["Maximum", "Mean", "Minimum"]
	        , legacyRangeClassNames = ["Max", "Avg", "Min"]
	        ;
	
	    function sortLabels(labels, values){
	        var lz = labels.slice();
	        labels.sort(function(a, b){
	            var iA = lz.indexOf(a);
	            var iB = lz.indexOf(b);
	            return d3.descending(values[iA], values[iB]);
	        });
	    };
	
	    function chart(selection) {
	        selection.each(function(d, i) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            var rangez = ranges.call(this, d, i).slice(),
	                markerz = markers.call(this, d, i).slice(),
	                markerLinez = markerLines.call(this, d, i).slice().sort(d3.descending),
	                measurez = measures.call(this, d, i).slice(),
	                rangeLabelz = rangeLabels.call(this, d, i).slice(),
	                markerLabelz = markerLabels.call(this, d, i).slice(),
	                markerLineLabelz = markerLineLabels.call(this, d, i).slice(),
	                measureLabelz = measureLabels.call(this, d, i).slice();
	
	            // Sort labels according to their sorted values
	            sortLabels(rangeLabelz, rangez);
	            sortLabels(markerLabelz, markerz);
	            sortLabels(markerLineLabelz, markerLinez);
	            sortLabels(measureLabelz, measurez);
	
	            // sort values descending
	            rangez.sort(d3.descending);
	            markerz.sort(d3.descending);
	            measurez.sort(d3.descending);
	
	            // Setup Scales
	            // Compute the new x-scale.
	            var x1 = d3.scale.linear()
	                .domain( d3.extent(d3.merge([forceX, rangez])) )
	                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);
	
	            // Retrieve the old x-scale, if this is an update.
	            var x0 = this.__chart__ || d3.scale.linear()
	                .domain([0, Infinity])
	                .range(x1.range());
	
	            // Stash the new scale.
	            this.__chart__ = x1;
	
	            var rangeMin = d3.min(rangez), //rangez[2]
	                rangeMax = d3.max(rangez), //rangez[0]
	                rangeAvg = rangez[1];
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-bullet').data([d]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bullet');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            for(var i=0,il=rangez.length; i<il; i++){
	                var rangeClassNames = 'nv-range nv-range'+i;
	                if(i <= 2){
	                    rangeClassNames = rangeClassNames + ' nv-range'+legacyRangeClassNames[i];
	                }
	                gEnter.append('rect').attr('class', rangeClassNames);
	            }
	
	            gEnter.append('rect').attr('class', 'nv-measure');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
	                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };
	            var xp0 = function(d) { return d < 0 ? x0(d) : x0(0) },
	                xp1 = function(d) { return d < 0 ? x1(d) : x1(0) };
	
	            for(var i=0,il=rangez.length; i<il; i++){
	                var range = rangez[i];
	                g.select('rect.nv-range'+i)
	                    .attr('height', availableHeight)
	                    .attr('width', w1(range))
	                    .attr('x', xp1(range))
	                    .datum(range)
	            }
	
	            g.select('rect.nv-measure')
	                .style('fill', color)
	                .attr('height', availableHeight / 3)
	                .attr('y', availableHeight / 3)
	                .attr('width', measurez < 0 ?
	                    x1(0) - x1(measurez[0])
	                    : x1(measurez[0]) - x1(0))
	                .attr('x', xp1(measurez))
	                .on('mouseover', function() {
	                    dispatch.elementMouseover({
	                        value: measurez[0],
	                        label: measureLabelz[0] || 'Current',
	                        color: d3.select(this).style("fill")
	                    })
	                })
	                .on('mousemove', function() {
	                    dispatch.elementMousemove({
	                        value: measurez[0],
	                        label: measureLabelz[0] || 'Current',
	                        color: d3.select(this).style("fill")
	                    })
	                })
	                .on('mouseout', function() {
	                    dispatch.elementMouseout({
	                        value: measurez[0],
	                        label: measureLabelz[0] || 'Current',
	                        color: d3.select(this).style("fill")
	                    })
	                });
	
	            var h3 =  availableHeight / 6;
	
	            var markerData = markerz.map( function(marker, index) {
	                return {value: marker, label: markerLabelz[index]}
	            });
	            gEnter
	              .selectAll("path.nv-markerTriangle")
	              .data(markerData)
	              .enter()
	              .append('path')
	              .attr('class', 'nv-markerTriangle')
	              .attr('d', 'M0,' + h3 + 'L' + h3 + ',' + (-h3) + ' ' + (-h3) + ',' + (-h3) + 'Z')
	              .on('mouseover', function(d) {
	                dispatch.elementMouseover({
	                  value: d.value,
	                  label: d.label || 'Previous',
	                  color: d3.select(this).style("fill"),
	                  pos: [x1(d.value), availableHeight/2]
	                })
	
	              })
	              .on('mousemove', function(d) {
	                  dispatch.elementMousemove({
	                      value: d.value,
	                      label: d.label || 'Previous',
	                      color: d3.select(this).style("fill")
	                  })
	              })
	              .on('mouseout', function(d, i) {
	                  dispatch.elementMouseout({
	                      value: d.value,
	                      label: d.label || 'Previous',
	                      color: d3.select(this).style("fill")
	                  })
	              });
	
	            g.selectAll("path.nv-markerTriangle")
	              .data(markerData)
	              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });
	
	            var markerLinesData = markerLinez.map( function(marker, index) {
	                return {value: marker, label: markerLineLabelz[index]}
	            });
	            gEnter
	              .selectAll("path.nv-markerLine")
	              .data(markerLinesData)
	              .enter()
	              .append('line')
	              .attr('cursor', '')
	              .attr('class', 'nv-markerLine')
	              .attr('x1', function(d) { return x1(d.value) })
	              .attr('y1', '2')
	              .attr('x2', function(d) { return x1(d.value) })
	              .attr('y2', availableHeight - 2)
	              .on('mouseover', function(d) {
	                dispatch.elementMouseover({
	                  value: d.value,
	                  label: d.label || 'Previous',
	                  color: d3.select(this).style("fill"),
	                  pos: [x1(d.value), availableHeight/2]
	                })
	
	              })
	              .on('mousemove', function(d) {
	                  dispatch.elementMousemove({
	                      value: d.value,
	                      label: d.label || 'Previous',
	                      color: d3.select(this).style("fill")
	                  })
	              })
	              .on('mouseout', function(d, i) {
	                  dispatch.elementMouseout({
	                      value: d.value,
	                      label: d.label || 'Previous',
	                      color: d3.select(this).style("fill")
	                  })
	              });
	
	            g.selectAll("path.nv-markerLines")
	              .data(markerLinesData)
	              .attr('transform', function(d) { return 'translate(' + x1(d.value) + ',' + (availableHeight / 2) + ')' });
	
	            wrap.selectAll('.nv-range')
	                .on('mouseover', function(d,i) {
	                    var label = rangeLabelz[i] || defaultRangeLabels[i];
	                    dispatch.elementMouseover({
	                        value: d,
	                        label: label,
	                        color: d3.select(this).style("fill")
	                    })
	                })
	                .on('mousemove', function() {
	                    dispatch.elementMousemove({
	                        value: measurez[0],
	                        label: measureLabelz[0] || 'Previous',
	                        color: d3.select(this).style("fill")
	                    })
	                })
	                .on('mouseout', function(d,i) {
	                    var label = rangeLabelz[i] || defaultRangeLabels[i];
	                    dispatch.elementMouseout({
	                        value: d,
	                        label: label,
	                        color: d3.select(this).style("fill")
	                    })
	                });
	        });
	
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
	        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)
	        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)
	        forceX:      {get: function(){return forceX;}, set: function(_){forceX=_;}},
	        width:    {get: function(){return width;}, set: function(_){width=_;}},
	        height:    {get: function(){return height;}, set: function(_){height=_;}},
	        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom
	            orient = _;
	            reverse = orient == 'right' || orient == 'bottom';
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	
	
	// Chart design based on the recommendations of Stephen Few. Implementation
	// based on the work of Clint Ivy, Jamie Love, and Jason Davies.
	// http://projects.instantcognition.com/protovis/bulletchart/
	nv.models.bulletChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var bullet = nv.models.bullet();
	    var tooltip = nv.models.tooltip();
	
	    var orient = 'left' // TODO top & bottom
	        , reverse = false
	        , margin = {top: 5, right: 40, bottom: 20, left: 120}
	        , ranges = function(d) { return d.ranges }
	        , markers = function(d) { return d.markers ? d.markers : [] }
	        , measures = function(d) { return d.measures }
	        , width = null
	        , height = 55
	        , tickFormat = null
		, ticks = null
	        , noData = null
	        , dispatch = d3.dispatch()
	        ;
	
	    tooltip
	        .duration(0)
	        .headerEnabled(false);
	
	    function chart(selection) {
	        selection.each(function(d, i) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = height - margin.top - margin.bottom,
	                that = this;
	
	            chart.update = function() { chart(selection) };
	            chart.container = this;
	
	            // Display No Data message if there's nothing to show.
	            if (!d || !ranges.call(this, d, i)) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            var rangez = ranges.call(this, d, i).slice().sort(d3.descending),
	                markerz = markers.call(this, d, i).slice().sort(d3.descending),
	                measurez = measures.call(this, d, i).slice().sort(d3.descending);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-bulletChart').data([d]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-bulletChart');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-bulletWrap');
	            gEnter.append('g').attr('class', 'nv-titles');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Compute the new x-scale.
	            var x1 = d3.scale.linear()
	                .domain([0, Math.max(rangez[0], (markerz[0] || 0), measurez[0])])  // TODO: need to allow forceX and forceY, and xDomain, yDomain
	                .range(reverse ? [availableWidth, 0] : [0, availableWidth]);
	
	            // Retrieve the old x-scale, if this is an update.
	            var x0 = this.__chart__ || d3.scale.linear()
	                .domain([0, Infinity])
	                .range(x1.range());
	
	            // Stash the new scale.
	            this.__chart__ = x1;
	
	            var w0 = function(d) { return Math.abs(x0(d) - x0(0)) }, // TODO: could optimize by precalculating x0(0) and x1(0)
	                w1 = function(d) { return Math.abs(x1(d) - x1(0)) };
	
	            var title = gEnter.select('.nv-titles').append('g')
	                .attr('text-anchor', 'end')
	                .attr('transform', 'translate(-6,' + (height - margin.top - margin.bottom) / 2 + ')');
	            title.append('text')
	                .attr('class', 'nv-title')
	                .text(function(d) { return d.title; });
	
	            title.append('text')
	                .attr('class', 'nv-subtitle')
	                .attr('dy', '1em')
	                .text(function(d) { return d.subtitle; });
	
	            bullet
	                .width(availableWidth)
	                .height(availableHeight)
	
	            var bulletWrap = g.select('.nv-bulletWrap');
	            d3.transition(bulletWrap).call(bullet);
	
	            // Compute the tick format.
	            var format = tickFormat || x1.tickFormat( availableWidth / 100 );
	
	            // Update the tick groups.
	            var tick = g.selectAll('g.nv-tick')
	                .data(x1.ticks( ticks ? ticks : (availableWidth / 50) ), function(d) {
	                    return this.textContent || format(d);
	                });
	
	            // Initialize the ticks with the old scale, x0.
	            var tickEnter = tick.enter().append('g')
	                .attr('class', 'nv-tick')
	                .attr('transform', function(d) { return 'translate(' + x0(d) + ',0)' })
	                .style('opacity', 1e-6);
	
	            tickEnter.append('line')
	                .attr('y1', availableHeight)
	                .attr('y2', availableHeight * 7 / 6);
	
	            tickEnter.append('text')
	                .attr('text-anchor', 'middle')
	                .attr('dy', '1em')
	                .attr('y', availableHeight * 7 / 6)
	                .text(format);
	
	            // Transition the updating ticks to the new scale, x1.
	            var tickUpdate = d3.transition(tick)
	                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })
	                .style('opacity', 1);
	
	            tickUpdate.select('line')
	                .attr('y1', availableHeight)
	                .attr('y2', availableHeight * 7 / 6);
	
	            tickUpdate.select('text')
	                .attr('y', availableHeight * 7 / 6);
	
	            // Transition the exiting ticks to the new scale, x1.
	            d3.transition(tick.exit())
	                .attr('transform', function(d) { return 'translate(' + x1(d) + ',0)' })
	                .style('opacity', 1e-6)
	                .remove();
	        });
	
	        d3.timer.flush();
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    bullet.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt['series'] = {
	            key: evt.label,
	            value: evt.value,
	            color: evt.color
	        };
	        tooltip.data(evt).hidden(false);
	    });
	
	    bullet.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    bullet.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.bullet = bullet;
	    chart.dispatch = dispatch;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        ranges:      {get: function(){return ranges;}, set: function(_){ranges=_;}}, // ranges (bad, satisfactory, good)
	        markers:     {get: function(){return markers;}, set: function(_){markers=_;}}, // markers (previous, goal)
	        measures: {get: function(){return measures;}, set: function(_){measures=_;}}, // measures (actual, forecast)
	        width:    {get: function(){return width;}, set: function(_){width=_;}},
	        height:    {get: function(){return height;}, set: function(_){height=_;}},
	        tickFormat:    {get: function(){return tickFormat;}, set: function(_){tickFormat=_;}},
	        ticks:    {get: function(){return ticks;}, set: function(_){ticks=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        orient: {get: function(){return orient;}, set: function(_){ // left, right, top, bottom
	            orient = _;
	            reverse = orient == 'right' || orient == 'bottom';
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, bullet);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	
	
	nv.models.candlestickBar = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = null
	        , height = null
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container
	        , x = d3.scale.linear()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , getOpen = function(d) { return d.open }
	        , getClose = function(d) { return d.close }
	        , getHigh = function(d) { return d.high }
	        , getLow = function(d) { return d.low }
	        , forceX = []
	        , forceY = []
	        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
	        , clipEdge = true
	        , color = nv.utils.defaultColor()
	        , interactive = false
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    function chart(selection) {
	        selection.each(function(data) {
	            container = d3.select(this);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            nv.utils.initSVG(container);
	
	            // Width of the candlestick bars.
	            var barWidth = (availableWidth / data[0].values.length) * .45;
	
	            // Setup Scales
	            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));
	
	            if (padData)
	                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
	            else
	                x.range(xRange || [5 + barWidth / 2, availableWidth - barWidth / 2 - 5]);
	
	            y.domain(yDomain || [
	                    d3.min(data[0].values.map(getLow).concat(forceY)),
	                    d3.max(data[0].values.map(getHigh).concat(forceY))
	                ]
	            ).range(yRange || [availableHeight, 0]);
	
	            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
	            if (x.domain()[0] === x.domain()[1])
	                x.domain()[0] ?
	                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
	                    : x.domain([-1,1]);
	
	            if (y.domain()[0] === y.domain()[1])
	                y.domain()[0] ?
	                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
	                    : y.domain([-1,1]);
	
	            // Setup containers and skeleton of chart
	            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-candlestickBar').data([data[0].values]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-candlestickBar');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-ticks');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            container
	                .on('click', function(d,i) {
	                    dispatch.chartClick({
	                        data: d,
	                        index: i,
	                        pos: d3.event,
	                        id: id
	                    });
	                });
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-chart-clip-path-' + id)
	                .append('rect');
	
	            wrap.select('#nv-chart-clip-path-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
	
	            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')
	                .data(function(d) { return d });
	            ticks.exit().remove();
	
	            var tickGroups = ticks.enter().append('g');
	
	            // The colors are currently controlled by CSS.
	            ticks
	                .attr('class', function(d, i, j) { return (getOpen(d, i) > getClose(d, i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i});
	
	            var lines = tickGroups.append('line')
	                .attr('class', 'nv-candlestick-lines')
	                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })
	                .attr('x1', 0)
	                .attr('y1', function(d, i) { return y(getHigh(d, i)); })
	                .attr('x2', 0)
	                .attr('y2', function(d, i) { return y(getLow(d, i)); });
	
	            var rects = tickGroups.append('rect')
	                .attr('class', 'nv-candlestick-rects nv-bars')
	                .attr('transform', function(d, i) {
	                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','
	                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))
	                    + ')';
	                })
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('width', barWidth)
	                .attr('height', function(d, i) {
	                    var open = getOpen(d, i);
	                    var close = getClose(d, i);
	                    return open > close ? y(close) - y(open) : y(open) - y(close);
	                });
	
	            ticks.select('.nv-candlestick-lines').transition()
	                .attr('transform', function(d, i) { return 'translate(' + x(getX(d, i)) + ',0)'; })
	                .attr('x1', 0)
	                .attr('y1', function(d, i) { return y(getHigh(d, i)); })
	                .attr('x2', 0)
	                .attr('y2', function(d, i) { return y(getLow(d, i)); });
	
	            ticks.select('.nv-candlestick-rects').transition()
	                .attr('transform', function(d, i) {
	                    return 'translate(' + (x(getX(d, i)) - barWidth/2) + ','
	                    + (y(getY(d, i)) - (getOpen(d, i) > getClose(d, i) ? (y(getClose(d, i)) - y(getOpen(d, i))) : 0))
	                    + ')';
	                })
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('width', barWidth)
	                .attr('height', function(d, i) {
	                    var open = getOpen(d, i);
	                    var close = getClose(d, i);
	                    return open > close ? y(close) - y(open) : y(open) - y(close);
	                });
	        });
	
	        return chart;
	    }
	
	
	    //Create methods to allow outside functions to highlight a specific bar.
	    chart.highlightPoint = function(pointIndex, isHoverOver) {
	        chart.clearHighlights();
	        container.select(".nv-candlestickBar .nv-tick-0-" + pointIndex)
	            .classed("hover", isHoverOver)
	        ;
	    };
	
	    chart.clearHighlights = function() {
	        container.select(".nv-candlestickBar .nv-tick.hover")
	            .classed("hover", false)
	        ;
	    };
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:    {get: function(){return width;}, set: function(_){width=_;}},
	        height:   {get: function(){return height;}, set: function(_){height=_;}},
	        xScale:   {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:   {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},
	        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},
	        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        id:       {get: function(){return id;}, set: function(_){id=_;}},
	        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},
	
	        x:     {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:     {get: function(){return getY;}, set: function(_){getY=_;}},
	        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},
	        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},
	        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},
	        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    != undefined ? _.top    : margin.top;
	            margin.right  = _.right  != undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   != undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	nv.models.cumulativeLineChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var lines = nv.models.line()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , legend = nv.models.legend()
	        , controls = nv.models.legend()
	        , interactiveLayer = nv.interactiveGuideline()
	        , tooltip = nv.models.tooltip()
	        ;
	
	    var margin = {top: 30, right: 30, bottom: 50, left: 60}
	        , color = nv.utils.defaultColor()
	        , width = null
	        , height = null
	        , showLegend = true
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , showControls = true
	        , useInteractiveGuideline = false
	        , rescaleY = true
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , id = lines.id()
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , average = function(d) { return d.average }
	        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
	        , transitionDuration = 250
	        , duration = 250
	        , noErrorCheck = false  //if set to TRUE, will bypass an error check in the indexify function.
	        ;
	
	    state.index = 0;
	    state.rescaleY = rescaleY;
	
	    xAxis.orient('bottom').tickPadding(7);
	    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');
	
	    tooltip.valueFormatter(function(d, i) {
	        return yAxis.tickFormat()(d, i);
	    }).headerFormatter(function(d, i) {
	        return xAxis.tickFormat()(d, i);
	    });
	
	    controls.updateState(false);
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var dx = d3.scale.linear()
	        , index = {i: 0, x: 0}
	        , renderWatch = nv.utils.renderWatch(dispatch, duration)
	        ;
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled }),
	                index: index.i,
	                rescaleY: rescaleY
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.index !== undefined)
	                index.i = state.index;
	            if (state.rescaleY !== undefined)
	                rescaleY = state.rescaleY;
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(lines);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	            container.classed('nv-chart-' + id, true);
	            var that = this;
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() {
	                if (duration === 0)
	                    container.call(chart);
	                else
	                    container.transition().duration(duration).call(chart)
	            };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disableddisabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            var indexDrag = d3.behavior.drag()
	                .on('dragstart', dragStart)
	                .on('drag', dragMove)
	                .on('dragend', dragEnd);
	
	
	            function dragStart(d,i) {
	                d3.select(chart.container)
	                    .style('cursor', 'ew-resize');
	            }
	
	            function dragMove(d,i) {
	                index.x = d3.event.x;
	                index.i = Math.round(dx.invert(index.x));
	                updateZero();
	            }
	
	            function dragEnd(d,i) {
	                d3.select(chart.container)
	                    .style('cursor', 'auto');
	
	                // update state and send stateChange with new index
	                state.index = index.i;
	                dispatch.stateChange(state);
	            }
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = lines.xScale();
	            y = lines.yScale();
	
	            if (!rescaleY) {
	                var seriesDomains = data
	                    .filter(function(series) { return !series.disabled })
	                    .map(function(series,i) {
	                        var initialDomain = d3.extent(series.values, lines.y());
	
	                        //account for series being disabled when losing 95% or more
	                        if (initialDomain[0] < -.95) initialDomain[0] = -.95;
	
	                        return [
	                                (initialDomain[0] - initialDomain[1]) / (1 + initialDomain[1]),
	                                (initialDomain[1] - initialDomain[0]) / (1 + initialDomain[0])
	                        ];
	                    });
	
	                var completeDomain = [
	                    d3.min(seriesDomains, function(d) { return d[0] }),
	                    d3.max(seriesDomains, function(d) { return d[1] })
	                ];
	
	                lines.yDomain(completeDomain);
	            } else {
	                lines.yDomain(null);
	            }
	
	            dx.domain([0, data[0].values.length - 1]) //Assumes all series have same length
	                .range([0, availableWidth])
	                .clamp(true);
	
	            var data = indexify(index.i, data);
	
	            // Setup containers and skeleton of chart
	            var interactivePointerEvents = (useInteractiveGuideline) ? "none" : "all";
	            var wrap = container.selectAll('g.nv-wrap.nv-cumulativeLine').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-cumulativeLine').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-interactive');
	            gEnter.append('g').attr('class', 'nv-x nv-axis').style("pointer-events","none");
	            gEnter.append('g').attr('class', 'nv-y nv-axis');
	            gEnter.append('g').attr('class', 'nv-background');
	            gEnter.append('g').attr('class', 'nv-linesWrap').style("pointer-events",interactivePointerEvents);
	            gEnter.append('g').attr('class', 'nv-avgLinesWrap').style("pointer-events","none");
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	            gEnter.append('g').attr('class', 'nv-controlsWrap');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth);
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                g.select('.nv-legendWrap')
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	            }
	
	            // Controls
	            if (!showControls) {
	                 g.select('.nv-controlsWrap').selectAll('*').remove();
	            } else {
	                var controlsData = [
	                    { key: 'Re-scale y-axis', disabled: !rescaleY }
	                ];
	
	                controls
	                    .width(140)
	                    .color(['#444', '#444', '#444'])
	                    .rightAlign(false)
	                    .margin({top: 5, right: 0, bottom: 5, left: 20})
	                ;
	
	                g.select('.nv-controlsWrap')
	                    .datum(controlsData)
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	                    .call(controls);
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            // Show error if series goes below 100%
	            var tempDisabled = data.filter(function(d) { return d.tempDisabled });
	
	            wrap.select('.tempDisabled').remove(); //clean-up and prevent duplicates
	            if (tempDisabled.length) {
	                wrap.append('text').attr('class', 'tempDisabled')
	                    .attr('x', availableWidth / 2)
	                    .attr('y', '-.71em')
	                    .style('text-anchor', 'end')
	                    .text(tempDisabled.map(function(d) { return d.key }).join(', ') + ' values cannot be calculated for this time period.');
	            }
	
	            //Set up interactive layer
	            if (useInteractiveGuideline) {
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left:margin.left,top:margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	
	            gEnter.select('.nv-background')
	                .append('rect');
	
	            g.select('.nv-background rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            lines
	                //.x(function(d) { return d.x })
	                .y(function(d) { return d.display.y })
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled && !data[i].tempDisabled; }));
	
	            var linesWrap = g.select('.nv-linesWrap')
	                .datum(data.filter(function(d) { return  !d.disabled && !d.tempDisabled }));
	
	            linesWrap.call(lines);
	
	            //Store a series index number in the data array.
	            data.forEach(function(d,i) {
	                d.seriesIndex = i;
	            });
	
	            var avgLineData = data.filter(function(d) {
	                return !d.disabled && !!average(d);
	            });
	
	            var avgLines = g.select(".nv-avgLinesWrap").selectAll("line")
	                .data(avgLineData, function(d) { return d.key; });
	
	            var getAvgLineY = function(d) {
	                //If average lines go off the svg element, clamp them to the svg bounds.
	                var yVal = y(average(d));
	                if (yVal < 0) return 0;
	                if (yVal > availableHeight) return availableHeight;
	                return yVal;
	            };
	
	            avgLines.enter()
	                .append('line')
	                .style('stroke-width',2)
	                .style('stroke-dasharray','10,10')
	                .style('stroke',function (d,i) {
	                    return lines.color()(d,d.seriesIndex);
	                })
	                .attr('x1',0)
	                .attr('x2',availableWidth)
	                .attr('y1', getAvgLineY)
	                .attr('y2', getAvgLineY);
	
	            avgLines
	                .style('stroke-opacity',function(d){
	                    //If average lines go offscreen, make them transparent
	                    var yVal = y(average(d));
	                    if (yVal < 0 || yVal > availableHeight) return 0;
	                    return 1;
	                })
	                .attr('x1',0)
	                .attr('x2',availableWidth)
	                .attr('y1', getAvgLineY)
	                .attr('y2', getAvgLineY);
	
	            avgLines.exit().remove();
	
	            //Create index line
	            var indexLine = linesWrap.selectAll('.nv-indexLine')
	                .data([index]);
	            indexLine.enter().append('rect').attr('class', 'nv-indexLine')
	                .attr('width', 3)
	                .attr('x', -2)
	                .attr('fill', 'red')
	                .attr('fill-opacity', .5)
	                .style("pointer-events","all")
	                .call(indexDrag);
	
	            indexLine
	                .attr('transform', function(d) { return 'translate(' + dx(d.i) + ',0)' })
	                .attr('height', availableHeight);
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/70, data) )
	                    .tickSize(-availableHeight, 0);
	
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
	                g.select('.nv-x.nv-axis')
	                    .call(xAxis);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis')
	                    .call(yAxis);
	            }
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            function updateZero() {
	                indexLine
	                    .data([index]);
	
	                //When dragging the index line, turn off line transitions.
	                // Then turn them back on when done dragging.
	                var oldDuration = chart.duration();
	                chart.duration(0);
	                chart.update();
	                chart.duration(oldDuration);
	            }
	
	            g.select('.nv-background rect')
	                .on('click', function() {
	                    index.x = d3.mouse(this)[0];
	                    index.i = Math.round(dx.invert(index.x));
	
	                    // update state and send stateChange with new index
	                    state.index = index.i;
	                    dispatch.stateChange(state);
	
	                    updateZero();
	                });
	
	            lines.dispatch.on('elementClick', function(e) {
	                index.i = e.pointIndex;
	                index.x = dx(index.i);
	
	                // update state and send stateChange with new index
	                state.index = index.i;
	                dispatch.stateChange(state);
	
	                updateZero();
	            });
	
	            controls.dispatch.on('legendClick', function(d,i) {
	                d.disabled = !d.disabled;
	                rescaleY = !d.disabled;
	
	                state.rescaleY = rescaleY;
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                lines.clearHighlights();
	                var singlePoint, pointIndex, pointXLocation, allData = [];
	
	                data
	                    .filter(function(series, i) {
	                        series.seriesIndex = i;
	                        return !series.disabled;
	                    })
	                    .forEach(function(series,i) {
	                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
	                        lines.highlightPoint(i, pointIndex, true);
	                        var point = series.values[pointIndex];
	                        if (typeof point === 'undefined') return;
	                        if (typeof singlePoint === 'undefined') singlePoint = point;
	                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
	                        allData.push({
	                            key: series.key,
	                            value: chart.y()(point, pointIndex),
	                            color: color(series,series.seriesIndex)
	                        });
	                    });
	
	                //Highlight the tooltip entry based on which point the mouse is closest to.
	                if (allData.length > 2) {
	                    var yValue = chart.yScale().invert(e.mouseY);
	                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
	                    var threshold = 0.03 * domainExtent;
	                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value}),yValue,threshold);
	                    if (indexToHighlight !== null)
	                        allData[indexToHighlight].highlight = true;
	                }
	
	                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex), pointIndex);
	                interactiveLayer.tooltip
	                    .valueFormatter(function(d,i) {
	                        return yAxis.tickFormat()(d);
	                    })
	                    .data(
	                    {
	                        value: xValue,
	                        series: allData
	                    }
	                )();
	
	                interactiveLayer.renderGuideLine(pointXLocation);
	            });
	
	            interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                lines.clearHighlights();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	
	                    state.disabled = e.disabled;
	                }
	
	                if (typeof e.index !== 'undefined') {
	                    index.i = e.index;
	                    index.x = dx(index.i);
	
	                    state.index = e.index;
	
	                    indexLine
	                        .data([index]);
	                }
	
	                if (typeof e.rescaleY !== 'undefined') {
	                    rescaleY = e.rescaleY;
	                }
	
	                chart.update();
	            });
	
	        });
	
	        renderWatch.renderEnd('cumulativeLineChart immediate');
	
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
	        var point = {
	            x: chart.x()(evt.point),
	            y: chart.y()(evt.point),
	            color: evt.point.color
	        };
	        evt.point = point;
	        tooltip.data(evt).hidden(false);
	    });
	
	    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true)
	    });
	
	    //============================================================
	    // Functions
	    //------------------------------------------------------------
	
	    var indexifyYGetter = null;
	    /* Normalize the data according to an index point. */
	    function indexify(idx, data) {
	        if (!indexifyYGetter) indexifyYGetter = lines.y();
	        return data.map(function(line, i) {
	            if (!line.values) {
	                return line;
	            }
	            var indexValue = line.values[idx];
	            if (indexValue == null) {
	                return line;
	            }
	            var v = indexifyYGetter(indexValue, idx);
	
	            //TODO: implement check below, and disable series if series loses 100% or more cause divide by 0 issue
	            if (v < -.95 && !noErrorCheck) {
	                //if a series loses more than 100%, calculations fail.. anything close can cause major distortion (but is mathematically correct till it hits 100)
	
	                line.tempDisabled = true;
	                return line;
	            }
	
	            line.tempDisabled = false;
	
	            line.values = line.values.map(function(point, pointIndex) {
	                point.display = {'y': (indexifyYGetter(point, pointIndex) - v) / (1 + v) };
	                return point;
	            });
	
	            return line;
	        })
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.lines = lines;
	    chart.legend = legend;
	    chart.controls = controls;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.interactiveLayer = interactiveLayer;
	    chart.state = state;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        rescaleY:     {get: function(){return rescaleY;}, set: function(_){rescaleY=_;}},
	        showControls:     {get: function(){return showControls;}, set: function(_){showControls=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        average: {get: function(){return average;}, set: function(_){average=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        showXAxis:    {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        noErrorCheck:    {get: function(){return noErrorCheck;}, set: function(_){noErrorCheck=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	        }},
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = _;
	            if (_ === true) {
	                chart.interactive(false);
	                chart.useVoronoi(false);
	            }
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( (_) ? 'right' : 'left');
	        }},
	        duration:    {get: function(){return duration;}, set: function(_){
	            duration = _;
	            lines.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	            renderWatch.reset(duration);
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, lines);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	//TODO: consider deprecating by adding necessary features to multiBar model
	nv.models.discreteBar = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 960
	        , height = 500
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container
	        , x = d3.scale.ordinal()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
	        , color = nv.utils.defaultColor()
	        , showValues = false
	        , valueFormat = d3.format(',.2f')
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
	        , rectClass = 'discreteBar'
	        , duration = 250
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0;
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            //add series index to each data point for reference
	            data.forEach(function(series, i) {
	                series.values.forEach(function(point) {
	                    point.series = i;
	                });
	            });
	
	            // Setup Scales
	            // remap and flatten the data for use in calculating the scales' domains
	            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
	                data.map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d,i), y: getY(d,i), y0: d.y0 }
	                    })
	                });
	
	            x   .domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
	                .rangeBands(xRange || [0, availableWidth], .1);
	            y   .domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return d.y }).concat(forceY)));
	
	            // If showValues, pad the Y axis range to account for label height
	            if (showValues) y.range(yRange || [availableHeight - (y.domain()[0] < 0 ? 12 : 0), y.domain()[1] > 0 ? 12 : 0]);
	            else y.range(yRange || [availableHeight, 0]);
	
	            //store old scales if they exist
	            x0 = x0 || x;
	            y0 = y0 || y.copy().range([y(0),y(0)]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-discretebar').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discretebar');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-groups');
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            //TODO: by definition, the discrete bar should not have multiple groups, will modify/remove later
	            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
	                .data(function(d) { return d }, function(d) { return d.key });
	            groups.enter().append('g')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6);
	            groups.exit()
	                .watchTransition(renderWatch, 'discreteBar: exit groups')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6)
	                .remove();
	            groups
	                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
	                .classed('hover', function(d) { return d.hover });
	            groups
	                .watchTransition(renderWatch, 'discreteBar: groups')
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', .75);
	
	            var bars = groups.selectAll('g.nv-bar')
	                .data(function(d) { return d.values });
	            bars.exit().remove();
	
	            var barsEnter = bars.enter().append('g')
	                .attr('transform', function(d,i,j) {
	                    return 'translate(' + (x(getX(d,i)) + x.rangeBand() * .05 ) + ', ' + y(0) + ')'
	                })
	                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    dispatch.elementMousemove({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('click', function(d,i) {
	                    var element = this;
	                    dispatch.elementClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill"),
	                        event: d3.event,
	                        element: element
	                    });
	                    d3.event.stopPropagation();
	                })
	                .on('dblclick', function(d,i) {
	                    dispatch.elementDblClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                    d3.event.stopPropagation();
	                });
	
	            barsEnter.append('rect')
	                .attr('height', 0)
	                .attr('width', x.rangeBand() * .9 / data.length )
	
	            if (showValues) {
	                barsEnter.append('text')
	                    .attr('text-anchor', 'middle')
	                ;
	
	                bars.select('text')
	                    .text(function(d,i) { return valueFormat(getY(d,i)) })
	                    .watchTransition(renderWatch, 'discreteBar: bars text')
	                    .attr('x', x.rangeBand() * .9 / 2)
	                    .attr('y', function(d,i) { return getY(d,i) < 0 ? y(getY(d,i)) - y(0) + 12 : -4 })
	
	                ;
	            } else {
	                bars.selectAll('text').remove();
	            }
	
	            bars
	                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive' })
	                .style('fill', function(d,i) { return d.color || color(d,i) })
	                .style('stroke', function(d,i) { return d.color || color(d,i) })
	                .select('rect')
	                .attr('class', rectClass)
	                .watchTransition(renderWatch, 'discreteBar: bars rect')
	                .attr('width', x.rangeBand() * .9 / data.length);
	            bars.watchTransition(renderWatch, 'discreteBar: bars')
	                //.delay(function(d,i) { return i * 1200 / data[0].values.length })
	                .attr('transform', function(d,i) {
	                    var left = x(getX(d,i)) + x.rangeBand() * .05,
	                        top = getY(d,i) < 0 ?
	                            y(0) :
	                                y(0) - y(getY(d,i)) < 1 ?
	                            y(0) - 1 : //make 1 px positive bars show up above y=0
	                            y(getY(d,i));
	
	                    return 'translate(' + left + ', ' + top + ')'
	                })
	                .select('rect')
	                .attr('height', function(d,i) {
	                    return  Math.max(Math.abs(y(getY(d,i)) - y(0)), 1)
	                });
	
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	
	        });
	
	        renderWatch.renderEnd('discreteBar immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:   {get: function(){return width;}, set: function(_){width=_;}},
	        height:  {get: function(){return height;}, set: function(_){height=_;}},
	        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},
	        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
	        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
	        id:          {get: function(){return id;}, set: function(_){id=_;}},
	        rectClass: {get: function(){return rectClass;}, set: function(_){rectClass=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.discreteBarChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var discretebar = nv.models.discreteBar()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
		, legend = nv.models.legend()
	        , tooltip = nv.models.tooltip()
	        ;
	
	    var margin = {top: 15, right: 10, bottom: 50, left: 60}
	        , width = null
	        , height = null
	        , color = nv.utils.getColor()
		, showLegend = false
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , staggerLabels = false
	        , wrapLabels = false
	        , rotateLabels = 0
	        , x
	        , y
	        , noData = null
	        , dispatch = d3.dispatch('beforeUpdate','renderEnd')
	        , duration = 250
	        ;
	
	    xAxis
	        .orient('bottom')
	        .showMaxMin(false)
	        .tickFormat(function(d) { return d })
	    ;
	    yAxis
	        .orient((rightAlignYAxis) ? 'right' : 'left')
	        .tickFormat(d3.format(',.1f'))
	    ;
	
	    tooltip
	        .duration(0)
	        .headerEnabled(false)
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        })
	        .keyFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        });
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(discretebar);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() {
	                dispatch.beforeUpdate();
	                container.transition().duration(duration).call(chart);
	            };
	            chart.container = this;
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container);
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = discretebar.xScale();
	            y = discretebar.yScale().clamp(true);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-discreteBarWithAxes').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-discreteBarWithAxes').append('g');
	            var defsEnter = gEnter.append('defs');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis')
	                .append('g').attr('class', 'nv-zeroLine')
	                .append('line');
	
	            gEnter.append('g').attr('class', 'nv-barsWrap');
		    gEnter.append('g').attr('class', 'nv-legendWrap');
	
	            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth);
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                wrap.select('.nv-legendWrap')
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	            }
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            // Main Chart Component(s)
	            discretebar
	                .width(availableWidth)
	                .height(availableHeight);
	
	            var barsWrap = g.select('.nv-barsWrap')
	                .datum(data.filter(function(d) { return !d.disabled }));
	
	            barsWrap.transition().call(discretebar);
	
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-x-label-clip-' + discretebar.id())
	                .append('rect');
	
	            g.select('#nv-x-label-clip-' + discretebar.id() + ' rect')
	                .attr('width', x.rangeBand() * (staggerLabels ? 2 : 1))
	                .attr('height', 16)
	                .attr('x', -x.rangeBand() / (staggerLabels ? 1 : 2 ));
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + (y.range()[0] + ((discretebar.showValues() && y.domain()[0] < 0) ? 16 : 0)) + ')');
	                g.select('.nv-x.nv-axis').call(xAxis);
	
	                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
	                if (staggerLabels) {
	                    xTicks
	                        .selectAll('text')
	                        .attr('transform', function(d,i,j) { return 'translate(0,' + (j % 2 == 0 ? '5' : '17') + ')' })
	                }
	
	                if (rotateLabels) {
	                    xTicks
	                        .selectAll('.tick text')
	                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')
	                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
	                }
	
	                if (wrapLabels) {
	                    g.selectAll('.tick text')
	                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())
	                }
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis').call(yAxis);
	            }
	
	            // Zero line
	            g.select(".nv-zeroLine line")
	                .attr("x1",0)
	                .attr("x2",(rightAlignYAxis) ? -availableWidth : availableWidth)
	                .attr("y1", y(0))
	                .attr("y2", y(0))
	            ;
	        });
	
	        renderWatch.renderEnd('discreteBar chart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    discretebar.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt['series'] = {
	            key: chart.x()(evt.data),
	            value: chart.y()(evt.data),
	            color: evt.color
	        };
	        tooltip.data(evt).hidden(false);
	    });
	
	    discretebar.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    discretebar.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.discretebar = discretebar;
	    chart.legend = legend;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
		showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        staggerLabels: {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
	        rotateLabels:  {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
	        wrapLabels:  {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},
	        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            discretebar.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            discretebar.color(color);
		    legend.color(color);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( (_) ? 'right' : 'left');
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, discretebar);
	    nv.utils.initOptions(chart);
	
	    return chart;
	}
	
	nv.models.distribution = function() {
	    "use strict";
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 400 //technically width or height depending on x or y....
	        , size = 8
	        , axis = 'x' // 'x' or 'y'... horizontal or vertical
	        , getData = function(d) { return d[axis] }  // defaults d.x or d.y
	        , color = nv.utils.defaultColor()
	        , scale = d3.scale.linear()
	        , domain
	        , duration = 250
	        , dispatch = d3.dispatch('renderEnd')
	        ;
	
	    //============================================================
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var scale0;
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    //============================================================
	
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableLength = width - (axis === 'x' ? margin.left + margin.right : margin.top + margin.bottom),
	                naxis = axis == 'x' ? 'y' : 'x',
	                container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            //------------------------------------------------------------
	            // Setup Scales
	
	            scale0 = scale0 || scale;
	
	            //------------------------------------------------------------
	
	
	            //------------------------------------------------------------
	            // Setup containers and skeleton of chart
	
	            var wrap = container.selectAll('g.nv-distribution').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-distribution');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
	
	            //------------------------------------------------------------
	
	
	            var distWrap = g.selectAll('g.nv-dist')
	                .data(function(d) { return d }, function(d) { return d.key });
	
	            distWrap.enter().append('g');
	            distWrap
	                .attr('class', function(d,i) { return 'nv-dist nv-series-' + i })
	                .style('stroke', function(d,i) { return color(d, i) });
	
	            var dist = distWrap.selectAll('line.nv-dist' + axis)
	                .data(function(d) { return d.values })
	            dist.enter().append('line')
	                .attr(axis + '1', function(d,i) { return scale0(getData(d,i)) })
	                .attr(axis + '2', function(d,i) { return scale0(getData(d,i)) })
	            renderWatch.transition(distWrap.exit().selectAll('line.nv-dist' + axis), 'dist exit')
	                // .transition()
	                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })
	                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })
	                .style('stroke-opacity', 0)
	                .remove();
	            dist
	                .attr('class', function(d,i) { return 'nv-dist' + axis + ' nv-dist' + axis + '-' + i })
	                .attr(naxis + '1', 0)
	                .attr(naxis + '2', size);
	            renderWatch.transition(dist, 'dist')
	                // .transition()
	                .attr(axis + '1', function(d,i) { return scale(getData(d,i)) })
	                .attr(axis + '2', function(d,i) { return scale(getData(d,i)) })
	
	
	            scale0 = scale.copy();
	
	        });
	        renderWatch.renderEnd('distribution immediate');
	        return chart;
	    }
	
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	    chart.options = nv.utils.optionsFunc.bind(chart);
	    chart.dispatch = dispatch;
	
	    chart.margin = function(_) {
	        if (!arguments.length) return margin;
	        margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
	        margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
	        margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
	        margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
	        return chart;
	    };
	
	    chart.width = function(_) {
	        if (!arguments.length) return width;
	        width = _;
	        return chart;
	    };
	
	    chart.axis = function(_) {
	        if (!arguments.length) return axis;
	        axis = _;
	        return chart;
	    };
	
	    chart.size = function(_) {
	        if (!arguments.length) return size;
	        size = _;
	        return chart;
	    };
	
	    chart.getData = function(_) {
	        if (!arguments.length) return getData;
	        getData = d3.functor(_);
	        return chart;
	    };
	
	    chart.scale = function(_) {
	        if (!arguments.length) return scale;
	        scale = _;
	        return chart;
	    };
	
	    chart.color = function(_) {
	        if (!arguments.length) return color;
	        color = nv.utils.getColor(_);
	        return chart;
	    };
	
	    chart.duration = function(_) {
	        if (!arguments.length) return duration;
	        duration = _;
	        renderWatch.reset(duration);
	        return chart;
	    };
	    //============================================================
	
	
	    return chart;
	}
	nv.models.focus = function(content) {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var content = content || nv.models.line()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , brush = d3.svg.brush()
	        ;
	
	    var margin = {top: 10, right: 0, bottom: 30, left: 0}
	        , color = nv.utils.defaultColor()
	        , width = null
	        , height = 70
	        , showXAxis = true
	        , showYAxis = false
	        , rightAlignYAxis = false
	        , ticks = null
	        , x
	        , y
	        , brushExtent = null
	        , duration = 250
	        , dispatch = d3.dispatch('brush', 'onBrush', 'renderEnd')
	        ;
	
	    content.interactive(false);
	    content.pointActive(function(d) { return false; });
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(content);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = height - margin.top - margin.bottom;
	
	            chart.update = function() { 
	                if( duration === 0 ) {
	                    container.call( chart );
	                } else {
	                    container.transition().duration(duration).call(chart);
	                }
	            };
	            chart.container = this;
	
	            // Setup Scales
	            x = content.xScale();
	            y = content.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-focus').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-focus').append('g');
	            var g = wrap.select('g');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            gEnter.append('g').attr('class', 'nv-background').append('rect');
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis');
	            gEnter.append('g').attr('class', 'nv-contentWrap');
	            gEnter.append('g').attr('class', 'nv-brushBackground');
	            gEnter.append('g').attr('class', 'nv-x nv-brush');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            g.select('.nv-background rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	                
	            content
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled; }));
	
	            var contentWrap = g.select('.nv-contentWrap')
	                .datum(data.filter(function(d) { return !d.disabled; }));
	
	            d3.transition(contentWrap).call(content);
	            
	            // Setup Brush
	            brush
	                .x(x)
	                .on('brush', function() {
	                    onBrush();
	                });
	
	            if (brushExtent) brush.extent(brushExtent);
	
	            var brushBG = g.select('.nv-brushBackground').selectAll('g')
	                .data([brushExtent || brush.extent()]);
	    
	            var brushBGenter = brushBG.enter()
	                .append('g');
	
	            brushBGenter.append('rect')
	                .attr('class', 'left')
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('height', availableHeight);
	
	            brushBGenter.append('rect')
	                .attr('class', 'right')
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('height', availableHeight);
	
	            var gBrush = g.select('.nv-x.nv-brush')
	                .call(brush);
	            gBrush.selectAll('rect')
	                .attr('height', availableHeight);
	            gBrush.selectAll('.resize').append('path').attr('d', resizePath);
	
	            onBrush();
	
	            g.select('.nv-background rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            if (showXAxis) {
	                xAxis.scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	  
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
	                d3.transition(g.select('.nv-x.nv-axis'))
	                    .call(xAxis);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                d3.transition(g.select('.nv-y.nv-axis'))
	                    .call(yAxis);
	            }
	            
	            g.select('.nv-x.nv-axis')
	                .attr('transform', 'translate(0,' + y.range()[0] + ')');
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            //============================================================
	            // Functions
	            //------------------------------------------------------------
	    
	            // Taken from crossfilter (http://square.github.com/crossfilter/)
	            function resizePath(d) {
	                var e = +(d == 'e'),
	                    x = e ? 1 : -1,
	                    y = availableHeight / 3;
	                return 'M' + (0.5 * x) + ',' + y
	                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
	                    + 'V' + (2 * y - 6)
	                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)
	                    + 'Z'
	                    + 'M' + (2.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8)
	                    + 'M' + (4.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8);
	            }
	    
	    
	            function updateBrushBG() {
	                if (!brush.empty()) brush.extent(brushExtent);
	                brushBG
	                    .data([brush.empty() ? x.domain() : brushExtent])
	                    .each(function(d,i) {
	                        var leftWidth = x(d[0]) - x.range()[0],
	                            rightWidth = availableWidth - x(d[1]);
	                        d3.select(this).select('.left')
	                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);
	    
	                        d3.select(this).select('.right')
	                            .attr('x', x(d[1]))
	                            .attr('width', rightWidth < 0 ? 0 : rightWidth);
	                    });
	            }
	    
	    
	            function onBrush() {
	                brushExtent = brush.empty() ? null : brush.extent();
	                var extent = brush.empty() ? x.domain() : brush.extent();
	    
	                //The brush extent cannot be less than one.  If it is, don't update the line chart.
	                if (Math.abs(extent[0] - extent[1]) <= 1) {
	                    return;
	                }
	    
	                dispatch.brush({extent: extent, brush: brush});
	 
	                updateBrushBG();
	                dispatch.onBrush(extent);
	            }
	
	
	        });
	
	        renderWatch.renderEnd('focus immediate');
	        return chart;
	    }
	
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.content = content;
	    chart.brush = brush;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        brushExtent: {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            content.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            content.color(color);
	        }},
	        interpolate: {get: function(){return content.interpolate();}, set: function(_){
	            content.interpolate(_);
	        }},
	        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){
	            xAxis.tickFormat(_);
	        }},
	        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){
	            yAxis.tickFormat(_);
	        }},
	        x: {get: function(){return content.x();}, set: function(_){
	            content.x(_);
	        }},
	        y: {get: function(){return content.y();}, set: function(_){
	            content.y(_);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
	        }},
	    });
	
	    nv.utils.inheritOptions(chart, content);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	nv.models.forceDirectedGraph = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	    var margin = {top: 2, right: 0, bottom: 2, left: 0}
	        , width = 400
	        , height = 32
	        , container = null
	        , dispatch = d3.dispatch('renderEnd')
	        , color = nv.utils.getColor(['#000'])
	        , tooltip      = nv.models.tooltip()
	        , noData = null
	        // Force directed graph specific parameters [default values]
	        , linkStrength = 0.1
	        , friction = 0.9
	        , linkDist = 30
	        , charge = -120
	        , gravity = 0.1
	        , theta = 0.8
	        , alpha = 0.1
	        , radius = 5
	        // These functions allow to add extra attributes to ndes and links
	        ,nodeExtras = function(nodes) { /* Do nothing */ }
	        ,linkExtras = function(links) { /* Do nothing */ }
	        ;
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    function chart(selection) {
	        renderWatch.reset();
	
	        selection.each(function(data) {
	          container = d3.select(this);
	          nv.utils.initSVG(container);
	
	          var availableWidth = nv.utils.availableWidth(width, container, margin),
	              availableHeight = nv.utils.availableHeight(height, container, margin);
	
	          container
	                  .attr("width", availableWidth)
	                  .attr("height", availableHeight);
	
	          // Display No Data message if there's nothing to show.
	          if (!data || !data.links || !data.nodes) {
	              nv.utils.noData(chart, container)
	              return chart;
	          } else {
	              container.selectAll('.nv-noData').remove();
	          }
	          container.selectAll('*').remove();
	
	          // Collect names of all fields in the nodes
	          var nodeFieldSet = new Set();
	          data.nodes.forEach(function(node) {
	            var keys = Object.keys(node);
	            keys.forEach(function(key) {
	              nodeFieldSet.add(key);
	            });
	          });
	
	          var force = d3.layout.force()
	                .nodes(data.nodes)
	                .links(data.links)
	                .size([availableWidth, availableHeight])
	                .linkStrength(linkStrength)
	                .friction(friction)
	                .linkDistance(linkDist)
	                .charge(charge)
	                .gravity(gravity)
	                .theta(theta)
	                .alpha(alpha)
	                .start();
	
	          var link = container.selectAll(".link")
	                .data(data.links)
	                .enter().append("line")
	                .attr("class", "nv-force-link")
	                .style("stroke-width", function(d) { return Math.sqrt(d.value); });
	
	          var node = container.selectAll(".node")
	                .data(data.nodes)
	                .enter()
	                .append("g")
	                .attr("class", "nv-force-node")
	                .call(force.drag);
	
	          node
	            .append("circle")
	            .attr("r", radius)
	            .style("fill", function(d) { return color(d) } )
	            .on("mouseover", function(evt) {
	              container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
	                  .attr('y1', evt.py);
	              container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
	                  .attr('x2', evt.px);
	
	              // Add 'series' object to
	              var nodeColor = color(evt);
	              evt.series = [];
	              nodeFieldSet.forEach(function(field) {
	                evt.series.push({
	                  color: nodeColor,
	                  key:   field,
	                  value: evt[field]
	                });
	              });
	              tooltip.data(evt).hidden(false);
	            })
	            .on("mouseout",  function(d) {
	              tooltip.hidden(true);
	            });
	
	          tooltip.headerFormatter(function(d) {return "Node";});
	
	          // Apply extra attributes to nodes and links (if any)
	          linkExtras(link);
	          nodeExtras(node);
	
	          force.on("tick", function() {
	              link.attr("x1", function(d) { return d.source.x; })
	                  .attr("y1", function(d) { return d.source.y; })
	                  .attr("x2", function(d) { return d.target.x; })
	                  .attr("y2", function(d) { return d.target.y; });
	
	              node.attr("transform", function(d) {
	                return "translate(" + d.x + ", " + d.y + ")";
	              });
	            });
	        });
	
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:     {get: function(){return width;}, set: function(_){width=_;}},
	        height:    {get: function(){return height;}, set: function(_){height=_;}},
	
	        // Force directed graph specific parameters
	        linkStrength:{get: function(){return linkStrength;}, set: function(_){linkStrength=_;}},
	        friction:    {get: function(){return friction;}, set: function(_){friction=_;}},
	        linkDist:    {get: function(){return linkDist;}, set: function(_){linkDist=_;}},
	        charge:      {get: function(){return charge;}, set: function(_){charge=_;}},
	        gravity:     {get: function(){return gravity;}, set: function(_){gravity=_;}},
	        theta:       {get: function(){return theta;}, set: function(_){theta=_;}},
	        alpha:       {get: function(){return alpha;}, set: function(_){alpha=_;}},
	        radius:      {get: function(){return radius;}, set: function(_){radius=_;}},
	
	        //functor options
	        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},
	        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        nodeExtras: {get: function(){return nodeExtras;}, set: function(_){
	            nodeExtras = _;
	        }},
	        linkExtras: {get: function(){return linkExtras;}, set: function(_){
	            linkExtras = _;
	        }}
	    });
	
	    chart.dispatch = dispatch;
	    chart.tooltip = tooltip;
	    nv.utils.initOptions(chart);
	    return chart;
	};
	nv.models.furiousLegend = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 5, right: 0, bottom: 5, left: 0}
	        , width = 400
	        , height = 20
	        , getKey = function(d) { return d.key }
	        , keyFormatter = function (d) { return d }
	        , color = nv.utils.getColor()
	        , maxKeyLength = 20 //default value for key lengths
	        , align = true
	        , padding = 28 //define how much space between legend items. - recommend 32 for furious version
	        , rightAlign = true
	        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.
	        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
	        , expanded = false
	        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')
	        , vers = 'classic' //Options are "classic" and "furious"
	        ;
	
	    function chart(selection) {
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-legend').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
	            var g = wrap.select('g');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var series = g.selectAll('.nv-series')
	                .data(function(d) {
	                    if(vers != 'furious') return d;
	
	                    return d.filter(function(n) {
	                        return expanded ? true : !n.disengaged;
	                    });
	                });
	            var seriesEnter = series.enter().append('g').attr('class', 'nv-series')
	
	            var seriesShape;
	
	            if(vers == 'classic') {
	                seriesEnter.append('circle')
	                    .style('stroke-width', 2)
	                    .attr('class','nv-legend-symbol')
	                    .attr('r', 5);
	
	                seriesShape = series.select('circle');
	            } else if (vers == 'furious') {
	                seriesEnter.append('rect')
	                    .style('stroke-width', 2)
	                    .attr('class','nv-legend-symbol')
	                    .attr('rx', 3)
	                    .attr('ry', 3);
	
	                seriesShape = series.select('rect');
	
	                seriesEnter.append('g')
	                    .attr('class', 'nv-check-box')
	                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
	                    .attr('transform', 'translate(-10,-8)scale(0.5)');
	
	                var seriesCheckbox = series.select('.nv-check-box');
	
	                seriesCheckbox.each(function(d,i) {
	                    d3.select(this).selectAll('path')
	                        .attr('stroke', setTextColor(d,i));
	                });
	            }
	
	            seriesEnter.append('text')
	                .attr('text-anchor', 'start')
	                .attr('class','nv-legend-text')
	                .attr('dy', '.32em')
	                .attr('dx', '8');
	
	            var seriesText = series.select('text.nv-legend-text');
	
	            series
	                .on('mouseover', function(d,i) {
	                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects
	                })
	                .on('mouseout', function(d,i) {
	                    dispatch.legendMouseout(d,i);
	                })
	                .on('click', function(d,i) {
	                    dispatch.legendClick(d,i);
	                    // make sure we re-get data in case it was modified
	                    var data = series.data();
	                    if (updateState) {
	                        if(vers =='classic') {
	                            if (radioButtonMode) {
	                                //Radio button mode: set every series to disabled,
	                                //  and enable the clicked series.
	                                data.forEach(function(series) { series.disabled = true});
	                                d.disabled = false;
	                            }
	                            else {
	                                d.disabled = !d.disabled;
	                                if (data.every(function(series) { return series.disabled})) {
	                                    //the default behavior of NVD3 legends is, if every single series
	                                    // is disabled, turn all series' back on.
	                                    data.forEach(function(series) { series.disabled = false});
	                                }
	                            }
	                        } else if(vers == 'furious') {
	                            if(expanded) {
	                                d.disengaged = !d.disengaged;
	                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
	                                d.disabled = d.disengaged || d.userDisabled;
	                            } else if (!expanded) {
	                                d.disabled = !d.disabled;
	                                d.userDisabled = d.disabled;
	                                var engaged = data.filter(function(d) { return !d.disengaged; });
	                                if (engaged.every(function(series) { return series.userDisabled })) {
	                                    //the default behavior of NVD3 legends is, if every single series
	                                    // is disabled, turn all series' back on.
	                                    data.forEach(function(series) {
	                                        series.disabled = series.userDisabled = false;
	                                    });
	                                }
	                            }
	                        }
	                        dispatch.stateChange({
	                            disabled: data.map(function(d) { return !!d.disabled }),
	                            disengaged: data.map(function(d) { return !!d.disengaged })
	                        });
	
	                    }
	                })
	                .on('dblclick', function(d,i) {
	                    if(vers == 'furious' && expanded) return;
	                    dispatch.legendDblclick(d,i);
	                    if (updateState) {
	                        // make sure we re-get data in case it was modified
	                        var data = series.data();
	                        //the default behavior of NVD3 legends, when double clicking one,
	                        // is to set all other series' to false, and make the double clicked series enabled.
	                        data.forEach(function(series) {
	                            series.disabled = true;
	                            if(vers == 'furious') series.userDisabled = series.disabled;
	                        });
	                        d.disabled = false;
	                        if(vers == 'furious') d.userDisabled = d.disabled;
	                        dispatch.stateChange({
	                            disabled: data.map(function(d) { return !!d.disabled })
	                        });
	                    }
	                });
	
	            series.classed('nv-disabled', function(d) { return d.userDisabled });
	            series.exit().remove();
	
	            seriesText
	                .attr('fill', setTextColor)
	                .text(function (d) { return keyFormatter(getKey(d)) });
	
	            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)
	            // NEW ALIGNING CODE, TODO: clean up
	
	            var versPadding;
	            switch(vers) {
	                case 'furious' :
	                    versPadding = 23;
	                    break;
	                case 'classic' :
	                    versPadding = 20;
	            }
	
	            if (align) {
	
	                var seriesWidths = [];
	                series.each(function(d,i) {
	                    var legendText;
	                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {
	                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);
	                        legendText = d3.select(this).select('text').text(trimmedKey + "...");
	                        d3.select(this).append("svg:title").text(keyFormatter(getKey(d)));
	                    } else {
	                        legendText = d3.select(this).select('text');
	                    }
	                    var nodeTextLength;
	                    try {
	                        nodeTextLength = legendText.node().getComputedTextLength();
	                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
	                        if(nodeTextLength <= 0) throw Error();
	                    }
	                    catch(e) {
	                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
	                    }
	
	                    seriesWidths.push(nodeTextLength + padding);
	                });
	
	                var seriesPerRow = 0;
	                var legendWidth = 0;
	                var columnWidths = [];
	
	                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
	                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
	                    legendWidth += seriesWidths[seriesPerRow++];
	                }
	                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row
	
	                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {
	                    columnWidths = [];
	                    seriesPerRow--;
	
	                    for (var k = 0; k < seriesWidths.length; k++) {
	                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )
	                            columnWidths[k % seriesPerRow] = seriesWidths[k];
	                    }
	
	                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {
	                        return prev + cur;
	                    });
	                }
	
	                var xPositions = [];
	                for (var i = 0, curX = 0; i < seriesPerRow; i++) {
	                    xPositions[i] = curX;
	                    curX += columnWidths[i];
	                }
	
	                series
	                    .attr('transform', function(d, i) {
	                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
	                    });
	
	                //position legend as far right as possible within the total width
	                if (rightAlign) {
	                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
	                }
	                else {
	                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');
	                }
	
	                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);
	
	            } else {
	
	                var ypos = 5,
	                    newxpos = 5,
	                    maxwidth = 0,
	                    xpos;
	                series
	                    .attr('transform', function(d, i) {
	                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
	                        xpos = newxpos;
	
	                        if (width < margin.left + margin.right + xpos + length) {
	                            newxpos = xpos = 5;
	                            ypos += versPadding;
	                        }
	
	                        newxpos += length;
	                        if (newxpos > maxwidth) maxwidth = newxpos;
	
	                        return 'translate(' + xpos + ',' + ypos + ')';
	                    });
	
	                //position legend as far right as possible within the total width
	                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');
	
	                height = margin.top + margin.bottom + ypos + 15;
	            }
	
	            if(vers == 'furious') {
	                // Size rectangles after text is placed
	                seriesShape
	                    .attr('width', function(d,i) {
	                        return seriesText[0][i].getComputedTextLength() + 27;
	                    })
	                    .attr('height', 18)
	                    .attr('y', -9)
	                    .attr('x', -15)
	            }
	
	            seriesShape
	                .style('fill', setBGColor)
	                .style('stroke', function(d,i) { return d.color || color(d, i) });
	        });
	
	        function setTextColor(d,i) {
	            if(vers != 'furious') return '#000';
	            if(expanded) {
	                return d.disengaged ? color(d,i) : '#fff';
	            } else if (!expanded) {
	                return !!d.disabled ? color(d,i) : '#fff';
	            }
	        }
	
	        function setBGColor(d,i) {
	            if(expanded && vers == 'furious') {
	                return d.disengaged ? '#fff' : color(d,i);
	            } else {
	                return !!d.disabled ? '#fff' : color(d,i);
	            }
	        }
	
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:          {get: function(){return width;}, set: function(_){width=_;}},
	        height:         {get: function(){return height;}, set: function(_){height=_;}},
	        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},
	        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},
	        align:          {get: function(){return align;}, set: function(_){align=_;}},
	        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},
	        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},
	        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},
	        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},
	        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},
	        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},
	        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	//TODO: consider deprecating and using multibar with single series for this
	nv.models.historicalBar = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = null
	        , height = null
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , x = d3.scale.linear()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , forceX = []
	        , forceY = [0]
	        , padData = false
	        , clipEdge = true
	        , color = nv.utils.defaultColor()
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
	        , interactive = true
	        ;
	
	    var renderWatch = nv.utils.renderWatch(dispatch, 0);
	
	    function chart(selection) {
	        selection.each(function(data) {
	            renderWatch.reset();
	
	            container = d3.select(this);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            nv.utils.initSVG(container);
	
	            // Setup Scales
	            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));
	
	            if (padData)
	                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
	            else
	                x.range(xRange || [0, availableWidth]);
	
	            y.domain(yDomain || d3.extent(data[0].values.map(getY).concat(forceY) ))
	                .range(yRange || [availableHeight, 0]);
	
	            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
	            if (x.domain()[0] === x.domain()[1])
	                x.domain()[0] ?
	                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
	                    : x.domain([-1,1]);
	
	            if (y.domain()[0] === y.domain()[1])
	                y.domain()[0] ?
	                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
	                    : y.domain([-1,1]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-historicalBar-' + id).data([data[0].values]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBar-' + id);
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-bars');
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            container
	                .on('click', function(d,i) {
	                    dispatch.chartClick({
	                        data: d,
	                        index: i,
	                        pos: d3.event,
	                        id: id
	                    });
	                });
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-chart-clip-path-' + id)
	                .append('rect');
	
	            wrap.select('#nv-chart-clip-path-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            g.attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
	
	            var bars = wrap.select('.nv-bars').selectAll('.nv-bar')
	                .data(function(d) { return d }, function(d,i) {return getX(d,i)});
	            bars.exit().remove();
	
	            bars.enter().append('rect')
	                .attr('x', 0 )
	                .attr('y', function(d,i) {  return nv.utils.NaNtoZero(y(Math.max(0, getY(d,i)))) })
	                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.abs(y(getY(d,i)) - y(0))) })
	                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
	                .on('mouseover', function(d,i) {
	                    if (!interactive) return;
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	
	                })
	                .on('mouseout', function(d,i) {
	                    if (!interactive) return;
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    if (!interactive) return;
	                    dispatch.elementMousemove({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('click', function(d,i) {
	                    if (!interactive) return;
	                    dispatch.elementClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                    d3.event.stopPropagation();
	                })
	                .on('dblclick', function(d,i) {
	                    if (!interactive) return;
	                    dispatch.elementDblClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                    d3.event.stopPropagation();
	                });
	
	            bars
	                .attr('fill', function(d,i) { return color(d, i); })
	                .attr('class', function(d,i,j) { return (getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive') + ' nv-bar-' + j + '-' + i })
	                .watchTransition(renderWatch, 'bars')
	                .attr('transform', function(d,i) { return 'translate(' + (x(getX(d,i)) - availableWidth / data[0].values.length * .45) + ',0)'; })
	                //TODO: better width calculations that don't assume always uniform data spacing;w
	                .attr('width', (availableWidth / data[0].values.length) * .9 );
	
	            bars.watchTransition(renderWatch, 'bars')
	                .attr('y', function(d,i) {
	                    var rval = getY(d,i) < 0 ?
	                        y(0) :
	                            y(0) - y(getY(d,i)) < 1 ?
	                        y(0) - 1 :
	                        y(getY(d,i));
	                    return nv.utils.NaNtoZero(rval);
	                })
	                .attr('height', function(d,i) { return nv.utils.NaNtoZero(Math.max(Math.abs(y(getY(d,i)) - y(0)),1)) });
	
	        });
	
	        renderWatch.renderEnd('historicalBar immediate');
	        return chart;
	    }
	
	    //Create methods to allow outside functions to highlight a specific bar.
	    chart.highlightPoint = function(pointIndex, isHoverOver) {
	        container
	            .select(".nv-bars .nv-bar-0-" + pointIndex)
	            .classed("hover", isHoverOver)
	        ;
	    };
	
	    chart.clearHighlights = function() {
	        container
	            .select(".nv-bars .nv-bar.hover")
	            .classed("hover", false)
	        ;
	    };
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:   {get: function(){return width;}, set: function(_){width=_;}},
	        height:  {get: function(){return height;}, set: function(_){height=_;}},
	        forceX:  {get: function(){return forceX;}, set: function(_){forceX=_;}},
	        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        padData: {get: function(){return padData;}, set: function(_){padData=_;}},
	        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
	        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        id:          {get: function(){return id;}, set: function(_){id=_;}},
	        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.historicalBarChart = function(bar_model) {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var bars = bar_model || nv.models.historicalBar()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , legend = nv.models.legend()
	        , interactiveLayer = nv.interactiveGuideline()
	        , tooltip = nv.models.tooltip()
	        ;
	
	
	    var margin = {top: 30, right: 90, bottom: 50, left: 90}
	        , color = nv.utils.defaultColor()
	        , width = null
	        , height = null
	        , showLegend = false
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , useInteractiveGuideline = false
	        , x
	        , y
	        , state = {}
	        , defaultState = null
	        , noData = null
	        , dispatch = d3.dispatch('tooltipHide', 'stateChange', 'changeState', 'renderEnd')
	        , transitionDuration = 250
	        ;
	
	    xAxis.orient('bottom').tickPadding(7);
	    yAxis.orient( (rightAlignYAxis) ? 'right' : 'left');
	    tooltip
	        .duration(0)
	        .headerEnabled(false)
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        })
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        });
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch, 0);
	
	    function chart(selection) {
	        selection.each(function(data) {
	            renderWatch.reset();
	            renderWatch.models(bars);
	            if (showXAxis) renderWatch.models(xAxis);
	            if (showYAxis) renderWatch.models(yAxis);
	
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() { container.transition().duration(transitionDuration).call(chart) };
	            chart.container = this;
	
	            //set state.disabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display noData message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = bars.xScale();
	            y = bars.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-historicalBarChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-historicalBarChart').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis');
	            gEnter.append('g').attr('class', 'nv-barsWrap');
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	            gEnter.append('g').attr('class', 'nv-interactive');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth);
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                wrap.select('.nv-legendWrap')
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	            }
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            //Set up interactive layer
	            if (useInteractiveGuideline) {
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left:margin.left, top:margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	            bars
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled }));
	
	            var barsWrap = g.select('.nv-barsWrap')
	                .datum(data.filter(function(d) { return !d.disabled }));
	            barsWrap.transition().call(bars);
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
	                g.select('.nv-x.nv-axis')
	                    .transition()
	                    .call(xAxis);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis')
	                    .transition()
	                    .call(yAxis);
	            }
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                bars.clearHighlights();
	
	                var singlePoint, pointIndex, pointXLocation, allData = [];
	                data
	                    .filter(function(series, i) {
	                        series.seriesIndex = i;
	                        return !series.disabled;
	                    })
	                    .forEach(function(series,i) {
	                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
	                        bars.highlightPoint(pointIndex,true);
	                        var point = series.values[pointIndex];
	                        if (point === undefined) return;
	                        if (singlePoint === undefined) singlePoint = point;
	                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
	                        allData.push({
	                            key: series.key,
	                            value: chart.y()(point, pointIndex),
	                            color: color(series,series.seriesIndex),
	                            data: series.values[pointIndex]
	                        });
	                    });
	
	                var xValue = xAxis.tickFormat()(chart.x()(singlePoint,pointIndex));
	                interactiveLayer.tooltip
	                    .valueFormatter(function(d,i) {
	                        return yAxis.tickFormat()(d);
	                    })
	                    .data({
	                        value: xValue,
	                        index: pointIndex,
	                        series: allData
	                    })();
	
	                interactiveLayer.renderGuideLine(pointXLocation);
	
	            });
	
	            interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                dispatch.tooltipHide();
	                bars.clearHighlights();
	            });
	
	            legend.dispatch.on('legendClick', function(d,i) {
	                d.disabled = !d.disabled;
	
	                if (!data.filter(function(d) { return !d.disabled }).length) {
	                    data.map(function(d) {
	                        d.disabled = false;
	                        wrap.selectAll('.nv-series').classed('disabled', false);
	                        return d;
	                    });
	                }
	
	                state.disabled = data.map(function(d) { return !!d.disabled });
	                dispatch.stateChange(state);
	
	                selection.transition().call(chart);
	            });
	
	            legend.dispatch.on('legendDblclick', function(d) {
	                //Double clicking should always enable current series, and disabled all others.
	                data.forEach(function(d) {
	                    d.disabled = true;
	                });
	                d.disabled = false;
	
	                state.disabled = data.map(function(d) { return !!d.disabled });
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	
	                    state.disabled = e.disabled;
	                }
	
	                chart.update();
	            });
	        });
	
	        renderWatch.renderEnd('historicalBarChart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    bars.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt['series'] = {
	            key: chart.x()(evt.data),
	            value: chart.y()(evt.data),
	            color: evt.color
	        };
	        tooltip.data(evt).hidden(false);
	    });
	
	    bars.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    bars.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.bars = bars;
	    chart.legend = legend;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.interactiveLayer = interactiveLayer;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        showXAxis: {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis: {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	            bars.color(color);
	        }},
	        duration:    {get: function(){return transitionDuration;}, set: function(_){
	            transitionDuration=_;
	            renderWatch.reset(transitionDuration);
	            yAxis.duration(transitionDuration);
	            xAxis.duration(transitionDuration);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( (_) ? 'right' : 'left');
	        }},
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = _;
	            if (_ === true) {
	                chart.interactive(false);
	            }
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, bars);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	
	// ohlcChart is just a historical chart with ohlc bars and some tweaks
	nv.models.ohlcBarChart = function() {
	    var chart = nv.models.historicalBarChart(nv.models.ohlcBar());
	
	    // special default tooltip since we show multiple values per x
	    chart.useInteractiveGuideline(true);
	    chart.interactiveLayer.tooltip.contentGenerator(function(data) {
	        // we assume only one series exists for this chart
	        var d = data.series[0].data;
	        // match line colors as defined in nv.d3.css
	        var color = d.open < d.close ? "2ca02c" : "d62728";
	        return '' +
	            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +
	            '<table>' +
	            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +
	            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +
	            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +
	            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +
	            '</table>';
	    });
	    return chart;
	};
	
	// candlestickChart is just a historical chart with candlestick bars and some tweaks
	nv.models.candlestickBarChart = function() {
	    var chart = nv.models.historicalBarChart(nv.models.candlestickBar());
	
	    // special default tooltip since we show multiple values per x
	    chart.useInteractiveGuideline(true);
	    chart.interactiveLayer.tooltip.contentGenerator(function(data) {
	        // we assume only one series exists for this chart
	        var d = data.series[0].data;
	        // match line colors as defined in nv.d3.css
	        var color = d.open < d.close ? "2ca02c" : "d62728";
	        return '' +
	            '<h3 style="color: #' + color + '">' + data.value + '</h3>' +
	            '<table>' +
	            '<tr><td>open:</td><td>' + chart.yAxis.tickFormat()(d.open) + '</td></tr>' +
	            '<tr><td>close:</td><td>' + chart.yAxis.tickFormat()(d.close) + '</td></tr>' +
	            '<tr><td>high</td><td>' + chart.yAxis.tickFormat()(d.high) + '</td></tr>' +
	            '<tr><td>low:</td><td>' + chart.yAxis.tickFormat()(d.low) + '</td></tr>' +
	            '</table>';
	    });
	    return chart;
	};
	nv.models.legend = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 5, right: 0, bottom: 5, left: 0}
	        , width = 400
	        , height = 20
	        , getKey = function(d) { return d.key }
	        , keyFormatter = function (d) { return d }
	        , color = nv.utils.getColor()
	        , maxKeyLength = 20 //default value for key lengths
	        , align = true
	        , padding = 32 //define how much space between legend items. - recommend 32 for furious version
	        , rightAlign = true
	        , updateState = true   //If true, legend will update data.disabled and trigger a 'stateChange' dispatch.
	        , radioButtonMode = false   //If true, clicking legend items will cause it to behave like a radio button. (only one can be selected at a time)
	        , expanded = false
	        , dispatch = d3.dispatch('legendClick', 'legendDblclick', 'legendMouseover', 'legendMouseout', 'stateChange')
	        , vers = 'classic' //Options are "classic" and "furious"
	        ;
	
	    function chart(selection) {
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-legend').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-legend').append('g');
	            var g = wrap.select('g');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var series = g.selectAll('.nv-series')
	                .data(function(d) {
	                    if(vers != 'furious') return d;
	
	                    return d.filter(function(n) {
	                        return expanded ? true : !n.disengaged;
	                    });
	                });
	
	            var seriesEnter = series.enter().append('g').attr('class', 'nv-series');
	            var seriesShape;
	
	            var versPadding;
	            switch(vers) {
	                case 'furious' :
	                    versPadding = 23;
	                    break;
	                case 'classic' :
	                    versPadding = 20;
	            }
	
	            if(vers == 'classic') {
	                seriesEnter.append('circle')
	                    .style('stroke-width', 2)
	                    .attr('class','nv-legend-symbol')
	                    .attr('r', 5);
	
	                seriesShape = series.select('.nv-legend-symbol');
	            } else if (vers == 'furious') {
	                seriesEnter.append('rect')
	                    .style('stroke-width', 2)
	                    .attr('class','nv-legend-symbol')
	                    .attr('rx', 3)
	                    .attr('ry', 3);
	                seriesShape = series.select('.nv-legend-symbol');
	
	                seriesEnter.append('g')
	                    .attr('class', 'nv-check-box')
	                    .property('innerHTML','<path d="M0.5,5 L22.5,5 L22.5,26.5 L0.5,26.5 L0.5,5 Z" class="nv-box"></path><path d="M5.5,12.8618467 L11.9185089,19.2803556 L31,0.198864511" class="nv-check"></path>')
	                    .attr('transform', 'translate(-10,-8)scale(0.5)');
	
	                var seriesCheckbox = series.select('.nv-check-box');
	
	                seriesCheckbox.each(function(d,i) {
	                    d3.select(this).selectAll('path')
	                        .attr('stroke', setTextColor(d,i));
	                });
	            }
	
	            seriesEnter.append('text')
	                .attr('text-anchor', 'start')
	                .attr('class','nv-legend-text')
	                .attr('dy', '.32em')
	                .attr('dx', '8');
	
	            var seriesText = series.select('text.nv-legend-text');
	
	            series
	                .on('mouseover', function(d,i) {
	                    dispatch.legendMouseover(d,i);  //TODO: Make consistent with other event objects
	                })
	                .on('mouseout', function(d,i) {
	                    dispatch.legendMouseout(d,i);
	                })
	                .on('click', function(d,i) {
	                    dispatch.legendClick(d,i);
	                    // make sure we re-get data in case it was modified
	                    var data = series.data();
	                    if (updateState) {
	                        if(vers =='classic') {
	                            if (radioButtonMode) {
	                                //Radio button mode: set every series to disabled,
	                                //  and enable the clicked series.
	                                data.forEach(function(series) { series.disabled = true});
	                                d.disabled = false;
	                            }
	                            else {
	                                d.disabled = !d.disabled;
	                                if (data.every(function(series) { return series.disabled})) {
	                                    //the default behavior of NVD3 legends is, if every single series
	                                    // is disabled, turn all series' back on.
	                                    data.forEach(function(series) { series.disabled = false});
	                                }
	                            }
	                        } else if(vers == 'furious') {
	                            if(expanded) {
	                                d.disengaged = !d.disengaged;
	                                d.userDisabled = d.userDisabled == undefined ? !!d.disabled : d.userDisabled;
	                                d.disabled = d.disengaged || d.userDisabled;
	                            } else if (!expanded) {
	                                d.disabled = !d.disabled;
	                                d.userDisabled = d.disabled;
	                                var engaged = data.filter(function(d) { return !d.disengaged; });
	                                if (engaged.every(function(series) { return series.userDisabled })) {
	                                    //the default behavior of NVD3 legends is, if every single series
	                                    // is disabled, turn all series' back on.
	                                    data.forEach(function(series) {
	                                        series.disabled = series.userDisabled = false;
	                                    });
	                                }
	                            }
	                        }
	                        dispatch.stateChange({
	                            disabled: data.map(function(d) { return !!d.disabled }),
	                            disengaged: data.map(function(d) { return !!d.disengaged })
	                        });
	
	                    }
	                })
	                .on('dblclick', function(d,i) {
	                    if(vers == 'furious' && expanded) return;
	                    dispatch.legendDblclick(d,i);
	                    if (updateState) {
	                        // make sure we re-get data in case it was modified
	                        var data = series.data();
	                        //the default behavior of NVD3 legends, when double clicking one,
	                        // is to set all other series' to false, and make the double clicked series enabled.
	                        data.forEach(function(series) {
	                            series.disabled = true;
	                            if(vers == 'furious') series.userDisabled = series.disabled;
	                        });
	                        d.disabled = false;
	                        if(vers == 'furious') d.userDisabled = d.disabled;
	                        dispatch.stateChange({
	                            disabled: data.map(function(d) { return !!d.disabled })
	                        });
	                    }
	                });
	
	            series.classed('nv-disabled', function(d) { return d.userDisabled });
	            series.exit().remove();
	
	            seriesText
	                .attr('fill', setTextColor)
	                .text(function (d) { return keyFormatter(getKey(d)) });
	
	            //TODO: implement fixed-width and max-width options (max-width is especially useful with the align option)
	            // NEW ALIGNING CODE, TODO: clean up
	            var legendWidth = 0;
	            if (align) {
	
	                var seriesWidths = [];
	                series.each(function(d,i) {
	                    var legendText;
	                    if (keyFormatter(getKey(d)) && keyFormatter(getKey(d)).length > maxKeyLength) {
	                        var trimmedKey = keyFormatter(getKey(d)).substring(0, maxKeyLength);
	                        legendText = d3.select(this).select('text').text(trimmedKey + "...");
	                        d3.select(this).append("svg:title").text(keyFormatter(getKey(d)));
	                    } else {
	                        legendText = d3.select(this).select('text');
	                    }
	                    var nodeTextLength;
	                    try {
	                        nodeTextLength = legendText.node().getComputedTextLength();
	                        // If the legendText is display:none'd (nodeTextLength == 0), simulate an error so we approximate, instead
	                        if(nodeTextLength <= 0) throw Error();
	                    }
	                    catch(e) {
	                        nodeTextLength = nv.utils.calcApproxTextWidth(legendText);
	                    }
	
	                    seriesWidths.push(nodeTextLength + padding);
	                });
	
	                var seriesPerRow = 0;
	                var columnWidths = [];
	                legendWidth = 0;
	
	                while ( legendWidth < availableWidth && seriesPerRow < seriesWidths.length) {
	                    columnWidths[seriesPerRow] = seriesWidths[seriesPerRow];
	                    legendWidth += seriesWidths[seriesPerRow++];
	                }
	                if (seriesPerRow === 0) seriesPerRow = 1; //minimum of one series per row
	
	                while ( legendWidth > availableWidth && seriesPerRow > 1 ) {
	                    columnWidths = [];
	                    seriesPerRow--;
	
	                    for (var k = 0; k < seriesWidths.length; k++) {
	                        if (seriesWidths[k] > (columnWidths[k % seriesPerRow] || 0) )
	                            columnWidths[k % seriesPerRow] = seriesWidths[k];
	                    }
	
	                    legendWidth = columnWidths.reduce(function(prev, cur, index, array) {
	                        return prev + cur;
	                    });
	                }
	
	                var xPositions = [];
	                for (var i = 0, curX = 0; i < seriesPerRow; i++) {
	                    xPositions[i] = curX;
	                    curX += columnWidths[i];
	                }
	
	                series
	                    .attr('transform', function(d, i) {
	                        return 'translate(' + xPositions[i % seriesPerRow] + ',' + (5 + Math.floor(i / seriesPerRow) * versPadding) + ')';
	                    });
	
	                //position legend as far right as possible within the total width
	                if (rightAlign) {
	                    g.attr('transform', 'translate(' + (width - margin.right - legendWidth) + ',' + margin.top + ')');
	                }
	                else {
	                    g.attr('transform', 'translate(0' + ',' + margin.top + ')');
	                }
	
	                height = margin.top + margin.bottom + (Math.ceil(seriesWidths.length / seriesPerRow) * versPadding);
	
	            } else {
	
	                var ypos = 5,
	                    newxpos = 5,
	                    maxwidth = 0,
	                    xpos;
	                series
	                    .attr('transform', function(d, i) {
	                        var length = d3.select(this).select('text').node().getComputedTextLength() + padding;
	                        xpos = newxpos;
	
	                        if (width < margin.left + margin.right + xpos + length) {
	                            newxpos = xpos = 5;
	                            ypos += versPadding;
	                        }
	
	                        newxpos += length;
	                        if (newxpos > maxwidth) maxwidth = newxpos;
	
	                        if(legendWidth < xpos + maxwidth) {
	                            legendWidth = xpos + maxwidth;
	                        }
	                        return 'translate(' + xpos + ',' + ypos + ')';
	                    });
	
	                //position legend as far right as possible within the total width
	                g.attr('transform', 'translate(' + (width - margin.right - maxwidth) + ',' + margin.top + ')');
	
	                height = margin.top + margin.bottom + ypos + 15;
	            }
	
	            if(vers == 'furious') {
	                // Size rectangles after text is placed
	                seriesShape
	                    .attr('width', function(d,i) {
	                        return seriesText[0][i].getComputedTextLength() + 27;
	                    })
	                    .attr('height', 18)
	                    .attr('y', -9)
	                    .attr('x', -15);
	
	                // The background for the expanded legend (UI)
	                gEnter.insert('rect',':first-child')
	                    .attr('class', 'nv-legend-bg')
	                    .attr('fill', '#eee')
	                    // .attr('stroke', '#444')
	                    .attr('opacity',0);
	
	                var seriesBG = g.select('.nv-legend-bg');
	
	                seriesBG
	                .transition().duration(300)
	                    .attr('x', -versPadding )
	                    .attr('width', legendWidth + versPadding - 12)
	                    .attr('height', height + 10)
	                    .attr('y', -margin.top - 10)
	                    .attr('opacity', expanded ? 1 : 0);
	
	
	            }
	
	            seriesShape
	                .style('fill', setBGColor)
	                .style('fill-opacity', setBGOpacity)
	                .style('stroke', setBGColor);
	        });
	
	        function setTextColor(d,i) {
	            if(vers != 'furious') return '#000';
	            if(expanded) {
	                return d.disengaged ? '#000' : '#fff';
	            } else if (!expanded) {
	                if(!d.color) d.color = color(d,i);
	                return !!d.disabled ? d.color : '#fff';
	            }
	        }
	
	        function setBGColor(d,i) {
	            if(expanded && vers == 'furious') {
	                return d.disengaged ? '#eee' : d.color || color(d,i);
	            } else {
	                return d.color || color(d,i);
	            }
	        }
	
	
	        function setBGOpacity(d,i) {
	            if(expanded && vers == 'furious') {
	                return 1;
	            } else {
	                return !!d.disabled ? 0 : 1;
	            }
	        }
	
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:          {get: function(){return width;}, set: function(_){width=_;}},
	        height:         {get: function(){return height;}, set: function(_){height=_;}},
	        key:            {get: function(){return getKey;}, set: function(_){getKey=_;}},
	        keyFormatter:   {get: function(){return keyFormatter;}, set: function(_){keyFormatter=_;}},
	        align:          {get: function(){return align;}, set: function(_){align=_;}},
	        maxKeyLength:   {get: function(){return maxKeyLength;}, set: function(_){maxKeyLength=_;}},
	        rightAlign:     {get: function(){return rightAlign;}, set: function(_){rightAlign=_;}},
	        padding:        {get: function(){return padding;}, set: function(_){padding=_;}},
	        updateState:    {get: function(){return updateState;}, set: function(_){updateState=_;}},
	        radioButtonMode:{get: function(){return radioButtonMode;}, set: function(_){radioButtonMode=_;}},
	        expanded:       {get: function(){return expanded;}, set: function(_){expanded=_;}},
	        vers:           {get: function(){return vers;}, set: function(_){vers=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.line = function() {
	    "use strict";
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var  scatter = nv.models.scatter()
	        ;
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 960
	        , height = 500
	        , container = null
	        , strokeWidth = 1.5
	        , color = nv.utils.defaultColor() // a function that returns a color
	        , getX = function(d) { return d.x } // accessor to get the x value from a data point
	        , getY = function(d) { return d.y } // accessor to get the y value from a data point
	        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined
	        , isArea = function(d) { return d.area } // decides if a line is an area or just a line
	        , clipEdge = false // if true, masks lines within x and y scale
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , interpolate = "linear" // controls the line interpolation
	        , duration = 250
	        , dispatch = d3.dispatch('elementClick', 'elementMouseover', 'elementMouseout', 'renderEnd')
	        ;
	
	    scatter
	        .pointSize(16) // default size
	        .pointDomain([16,256]) //set to speed up calculation, needs to be unset if there is a custom size accessor
	    ;
	
	    //============================================================
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0 //used to store previous scales
	        , renderWatch = nv.utils.renderWatch(dispatch, duration)
	        ;
	
	    //============================================================
	
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(scatter);
	        selection.each(function(data) {
	            container = d3.select(this);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	            nv.utils.initSVG(container);
	
	            // Setup Scales
	            x = scatter.xScale();
	            y = scatter.yScale();
	
	            x0 = x0 || x;
	            y0 = y0 || y;
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-line').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-line');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-groups');
	            gEnter.append('g').attr('class', 'nv-scatterWrap');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            scatter
	                .width(availableWidth)
	                .height(availableHeight);
	
	            var scatterWrap = wrap.select('.nv-scatterWrap');
	            scatterWrap.call(scatter);
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-edge-clip-' + scatter.id())
	                .append('rect');
	
	            wrap.select('#nv-edge-clip-' + scatter.id() + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', (availableHeight > 0) ? availableHeight : 0);
	
	            g   .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
	            scatterWrap
	                .attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + scatter.id() + ')' : '');
	
	            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
	                .data(function(d) { return d }, function(d) { return d.key });
	            groups.enter().append('g')
	                .style('stroke-opacity', 1e-6)
	                .style('stroke-width', function(d) { return d.strokeWidth || strokeWidth })
	                .style('fill-opacity', 1e-6);
	
	            groups.exit().remove();
	
	            groups
	                .attr('class', function(d,i) {
	                    return (d.classed || '') + ' nv-group nv-series-' + i;
	                })
	                .classed('hover', function(d) { return d.hover })
	                .style('fill', function(d,i){ return color(d, i) })
	                .style('stroke', function(d,i){ return color(d, i)});
	            groups.watchTransition(renderWatch, 'line: groups')
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', function(d) { return d.fillOpacity || .5});
	
	            var areaPaths = groups.selectAll('path.nv-area')
	                .data(function(d) { return isArea(d) ? [d] : [] }); // this is done differently than lines because I need to check if series is an area
	            areaPaths.enter().append('path')
	                .attr('class', 'nv-area')
	                .attr('d', function(d) {
	                    return d3.svg.area()
	                        .interpolate(interpolate)
	                        .defined(defined)
	                        .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })
	                        .y0(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })
	                        .y1(function(d,i) { return y0( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
	                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this
	                        .apply(this, [d.values])
	                });
	            groups.exit().selectAll('path.nv-area')
	                .remove();
	
	            areaPaths.watchTransition(renderWatch, 'line: areaPaths')
	                .attr('d', function(d) {
	                    return d3.svg.area()
	                        .interpolate(interpolate)
	                        .defined(defined)
	                        .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })
	                        .y0(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })
	                        .y1(function(d,i) { return y( y.domain()[0] <= 0 ? y.domain()[1] >= 0 ? 0 : y.domain()[1] : y.domain()[0] ) })
	                        //.y1(function(d,i) { return y0(0) }) //assuming 0 is within y domain.. may need to tweak this
	                        .apply(this, [d.values])
	                });
	
	            var linePaths = groups.selectAll('path.nv-line')
	                .data(function(d) { return [d.values] });
	
	            linePaths.enter().append('path')
	                .attr('class', 'nv-line')
	                .attr('d',
	                    d3.svg.line()
	                    .interpolate(interpolate)
	                    .defined(defined)
	                    .x(function(d,i) { return nv.utils.NaNtoZero(x0(getX(d,i))) })
	                    .y(function(d,i) { return nv.utils.NaNtoZero(y0(getY(d,i))) })
	            );
	
	            linePaths.watchTransition(renderWatch, 'line: linePaths')
	                .attr('d',
	                    d3.svg.line()
	                    .interpolate(interpolate)
	                    .defined(defined)
	                    .x(function(d,i) { return nv.utils.NaNtoZero(x(getX(d,i))) })
	                    .y(function(d,i) { return nv.utils.NaNtoZero(y(getY(d,i))) })
	            );
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	        });
	        renderWatch.renderEnd('line immediate');
	        return chart;
	    }
	
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.scatter = scatter;
	    // Pass through events
	    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });
	    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });
	    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        defined: {get: function(){return defined;}, set: function(_){defined=_;}},
	        interpolate:      {get: function(){return interpolate;}, set: function(_){interpolate=_;}},
	        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            scatter.duration(duration);
	        }},
	        isArea: {get: function(){return isArea;}, set: function(_){
	            isArea = d3.functor(_);
	        }},
	        x: {get: function(){return getX;}, set: function(_){
	            getX = _;
	            scatter.x(_);
	        }},
	        y: {get: function(){return getY;}, set: function(_){
	            getY = _;
	            scatter.y(_);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            scatter.color(color);
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, scatter);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	nv.models.lineChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var lines = nv.models.line()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , legend = nv.models.legend()
	        , interactiveLayer = nv.interactiveGuideline()
	        , tooltip = nv.models.tooltip()
	        , focus = nv.models.focus(nv.models.line())
	        ;
	
	    var margin = {top: 30, right: 20, bottom: 50, left: 60}
	        , color = nv.utils.defaultColor()
	        , width = null
	        , height = null
	        , showLegend = true
	        , legendPosition = 'top'
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , useInteractiveGuideline = false
	        , x
	        , y
	        , focusEnable = false
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , dispatch = d3.dispatch('tooltipShow', 'tooltipHide', 'stateChange', 'changeState', 'renderEnd')
	        , duration = 250
	        ;
	
	    // set options on sub-objects for this chart
	    xAxis.orient('bottom').tickPadding(7);
	    yAxis.orient(rightAlignYAxis ? 'right' : 'left');
	
	    lines.clipEdge(true).duration(0);
	
	    tooltip.valueFormatter(function(d, i) {
	        return yAxis.tickFormat()(d, i);
	    }).headerFormatter(function(d, i) {
	        return xAxis.tickFormat()(d, i);
	    });
	
	    interactiveLayer.tooltip.valueFormatter(function(d, i) {
	        return yAxis.tickFormat()(d, i);
	    }).headerFormatter(function(d, i) {
	        return xAxis.tickFormat()(d, i);
	    });
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled; })
	            };
	        };
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        };
	    };
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(lines);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);
	            chart.update = function() {
	                if( duration === 0 ) {
	                    container.call( chart );
	                } else {
	                    container.transition().duration(duration).call(chart);
	                }
	            };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disabled
	            state.disabled = data.map(function(d) { return !!d.disabled; });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display noData message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length; }).length) {
	                nv.utils.noData(chart, container);
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            /* Update `main' graph on brush update. */
	            focus.dispatch.on("onBrush", function(extent) {
	                onBrush(extent);
	            });
	
	            // Setup Scales
	            x = lines.xScale();
	            y = lines.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-lineChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-lineChart').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	
	            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
	            focusEnter.append('g').attr('class', 'nv-background').append('rect');
	            focusEnter.append('g').attr('class', 'nv-x nv-axis');
	            focusEnter.append('g').attr('class', 'nv-y nv-axis');
	            focusEnter.append('g').attr('class', 'nv-linesWrap');
	            focusEnter.append('g').attr('class', 'nv-interactive');
	
	            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth);
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legendPosition === 'bottom') {
	                    wrap.select('.nv-legendWrap')
	                        .attr('transform', 'translate(0,' + availableHeight +')');
	                } else if (legendPosition === 'top') {
	                    if (legend.height() > margin.top) {
	                        margin.top = legend.height();
	                        availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);
	                    }
	
	                    wrap.select('.nv-legendWrap')
	                        .attr('transform', 'translate(0,' + (-margin.top) +')');
	                }
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            //Set up interactive layer
	            if (useInteractiveGuideline) {
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left:margin.left, top:margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	
	            g.select('.nv-focus .nv-background rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            lines
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled; }));
	
	            var linesWrap = g.select('.nv-linesWrap')
	                .datum(data.filter(function(d) { return !d.disabled; }));
	
	
	            // Setup Main (Focus) Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks(nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	            }
	
	            //============================================================
	            // Update Axes
	            //============================================================
	            function updateXAxis() {
	              if(showXAxis) {
	                g.select('.nv-focus .nv-x.nv-axis')
	                  .transition()
	                  .duration(duration)
	                  .call(xAxis)
	                ;
	              }
	            }
	
	            function updateYAxis() {
	              if(showYAxis) {
	                g.select('.nv-focus .nv-y.nv-axis')
	                  .transition()
	                  .duration(duration)
	                  .call(yAxis)
	                ;
	              }
	            }
	
	            g.select('.nv-focus .nv-x.nv-axis')
	                .attr('transform', 'translate(0,' + availableHeight + ')');
	
	            //============================================================
	            // Update Focus
	            //============================================================
	            if(!focusEnable) {
	                linesWrap.call(lines);
	                updateXAxis();
	                updateYAxis();
	            } else {
	                focus.width(availableWidth);
	                g.select('.nv-focusWrap')
	                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')
	                    .datum(data.filter(function(d) { return !d.disabled; }))
	                    .call(focus);
	                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();
	                if(extent !== null){
	                    onBrush(extent);
	                }
	            }
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                lines.clearHighlights();
	                var singlePoint, pointIndex, pointXLocation, allData = [];
	                data
	                    .filter(function(series, i) {
	                        series.seriesIndex = i;
	                        return !series.disabled && !series.disableTooltip;
	                    })
	                    .forEach(function(series,i) {
	                        var extent = focusEnable ? (focus.brush.empty() ? focus.xScale().domain() : focus.brush.extent()) : x.domain();
	                        var currentValues = series.values.filter(function(d,i) {
	                            return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
	                        });
	
	                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, lines.x());
	                        var point = currentValues[pointIndex];
	                        var pointYValue = chart.y()(point, pointIndex);
	                        if (pointYValue !== null) {
	                            lines.highlightPoint(series.seriesIndex, pointIndex, true);
	                        }
	                        if (point === undefined) return;
	                        if (singlePoint === undefined) singlePoint = point;
	                        if (pointXLocation === undefined) pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
	                        allData.push({
	                            key: series.key,
	                            value: pointYValue,
	                            color: color(series,series.seriesIndex),
	                            data: point
	                        });
	                    });
	                //Highlight the tooltip entry based on which point the mouse is closest to.
	                if (allData.length > 2) {
	                    var yValue = chart.yScale().invert(e.mouseY);
	                    var domainExtent = Math.abs(chart.yScale().domain()[0] - chart.yScale().domain()[1]);
	                    var threshold = 0.03 * domainExtent;
	                    var indexToHighlight = nv.nearestValueIndex(allData.map(function(d){return d.value;}),yValue,threshold);
	                    if (indexToHighlight !== null)
	                        allData[indexToHighlight].highlight = true;
	                }
	
	                var defaultValueFormatter = function(d,i) {
	                    return d == null ? "N/A" : yAxis.tickFormat()(d);
	                };
	
	                interactiveLayer.tooltip
	                    .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)
	                    .data({
	                        value: chart.x()( singlePoint,pointIndex ),
	                        index: pointIndex,
	                        series: allData
	                    })();
	
	                interactiveLayer.renderGuideLine(pointXLocation);
	
	            });
	
	            interactiveLayer.dispatch.on('elementClick', function(e) {
	                var pointXLocation, allData = [];
	
	                data.filter(function(series, i) {
	                    series.seriesIndex = i;
	                    return !series.disabled;
	                }).forEach(function(series) {
	                    var pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
	                    var point = series.values[pointIndex];
	                    if (typeof point === 'undefined') return;
	                    if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
	                    var yPos = chart.yScale()(chart.y()(point,pointIndex));
	                    allData.push({
	                        point: point,
	                        pointIndex: pointIndex,
	                        pos: [pointXLocation, yPos],
	                        seriesIndex: series.seriesIndex,
	                        series: series
	                    });
	                });
	
	                lines.dispatch.elementClick(allData);
	            });
	
	            interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                lines.clearHighlights();
	            });
	
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	
	                    state.disabled = e.disabled;
	                }
	                chart.update();
	            });
	
	            //============================================================
	            // Functions
	            //------------------------------------------------------------
	
	            // Taken from crossfilter (http://square.github.com/crossfilter/)
	            function resizePath(d) {
	                var e = +(d == 'e'),
	                    x = e ? 1 : -1,
	                    y = availableHeight / 3;
	                return 'M' + (0.5 * x) + ',' + y
	                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
	                    + 'V' + (2 * y - 6)
	                    + 'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y)
	                    + 'Z'
	                    + 'M' + (2.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8)
	                    + 'M' + (4.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8);
	            }
	
	            function onBrush(extent) {
	                // Update Main (Focus)
	                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')
	                    .datum(
	                    data.filter(function(d) { return !d.disabled; })
	                        .map(function(d,i) {
	                            return {
	                                key: d.key,
	                                area: d.area,
	                                classed: d.classed,
	                                values: d.values.filter(function(d,i) {
	                                    return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
	                                }),
	                                disableTooltip: d.disableTooltip
	                            };
	                        })
	                );
	                focusLinesWrap.transition().duration(duration).call(lines);
	
	                // Update Main (Focus) Axes
	                updateXAxis();
	                updateYAxis();
	            }
	        });
	
	        renderWatch.renderEnd('lineChart immediate');
	        return chart;
	    }
	
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
	        if(!evt.series.disableTooltip){
	            tooltip.data(evt).hidden(false);
	        }
	    });
	
	    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.lines = lines;
	    chart.legend = legend;
	    chart.focus = focus;
	    chart.xAxis = xAxis;
	    chart.x2Axis = focus.xAxis
	    chart.yAxis = yAxis;
	    chart.y2Axis = focus.yAxis
	    chart.interactiveLayer = interactiveLayer;
	    chart.tooltip = tooltip;
	    chart.state = state;
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        legendPosition: {get: function(){return legendPosition;}, set: function(_){legendPosition=_;}},
	        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        // Focus options, mostly passed onto focus model.
	        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},
	        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},
	        focusShowAxisX:    {get: function(){return focus.showXAxis();}, set: function(_){focus.showXAxis(_);}},
	        focusShowAxisY:    {get: function(){return focus.showYAxis();}, set: function(_){focus.showYAxis(_);}},
	        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},
	
	        // options that require extra logic in the setter
	        focusMargin: {get: function(){return focus.margin}, set: function(_){
	            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;
	            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;
	            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;
	            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;
	        }},
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            lines.duration(duration);
	            focus.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	            lines.color(color);
	            focus.color(color);
	        }},
	        interpolate: {get: function(){return lines.interpolate();}, set: function(_){
	            lines.interpolate(_);
	            focus.interpolate(_);
	        }},
	        xTickFormat: {get: function(){return xAxis.tickFormat();}, set: function(_){
	            xAxis.tickFormat(_);
	            focus.xTickFormat(_);
	        }},
	        yTickFormat: {get: function(){return yAxis.tickFormat();}, set: function(_){
	            yAxis.tickFormat(_);
	            focus.yTickFormat(_);
	        }},
	        x: {get: function(){return lines.x();}, set: function(_){
	            lines.x(_);
	            focus.x(_);
	        }},
	        y: {get: function(){return lines.y();}, set: function(_){
	            lines.y(_);
	            focus.y(_);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
	        }},
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = _;
	            if (useInteractiveGuideline) {
	                lines.interactive(false);
	                lines.useVoronoi(false);
	            }
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, lines);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.lineWithFocusChart = function() {
	  return nv.models.lineChart()
	    .margin({ bottom: 30 })
	    .focusEnable( true );
	};
	nv.models.linePlusBarChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var lines = nv.models.line()
	        , lines2 = nv.models.line()
	        , bars = nv.models.historicalBar()
	        , bars2 = nv.models.historicalBar()
	        , xAxis = nv.models.axis()
	        , x2Axis = nv.models.axis()
	        , y1Axis = nv.models.axis()
	        , y2Axis = nv.models.axis()
	        , y3Axis = nv.models.axis()
	        , y4Axis = nv.models.axis()
	        , legend = nv.models.legend()
	        , brush = d3.svg.brush()
	        , tooltip = nv.models.tooltip()
	        ;
	
	    var margin = {top: 30, right: 30, bottom: 30, left: 60}
	        , margin2 = {top: 0, right: 30, bottom: 20, left: 60}
	        , width = null
	        , height = null
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , color = nv.utils.defaultColor()
	        , showLegend = true
	        , focusEnable = true
	        , focusShowAxisY = false
	        , focusShowAxisX = true
	        , focusHeight = 50
	        , extent
	        , brushExtent = null
	        , x
	        , x2
	        , y1
	        , y2
	        , y3
	        , y4
	        , noData = null
	        , dispatch = d3.dispatch('brush', 'stateChange', 'changeState')
	        , transitionDuration = 0
	        , state = nv.utils.state()
	        , defaultState = null
	        , legendLeftAxisHint = ' (left axis)'
	        , legendRightAxisHint = ' (right axis)'
	        , switchYAxisOrder = false
	        ;
	
	    lines.clipEdge(true);
	    lines2.interactive(false);
	    // We don't want any points emitted for the focus chart's scatter graph.
	    lines2.pointActive(function(d) { return false });
	    xAxis.orient('bottom').tickPadding(5);
	    y1Axis.orient('left');
	    y2Axis.orient('right');
	    x2Axis.orient('bottom').tickPadding(5);
	    y3Axis.orient('left');
	    y4Axis.orient('right');
	
	    tooltip.headerEnabled(true).headerFormatter(function(d, i) {
	        return xAxis.tickFormat()(d, i);
	    });
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var getBarsAxis = function() {
	        return switchYAxisOrder
	            ? { main: y2Axis, focus: y4Axis }
	            : { main: y1Axis, focus: y3Axis }
	    }
	
	    var getLinesAxis = function() {
	        return switchYAxisOrder
	            ? { main: y1Axis, focus: y3Axis }
	            : { main: y2Axis, focus: y4Axis }
	    }
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled })
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    var allDisabled = function(data) {
	      return data.every(function(series) {
	        return series.disabled;
	      });
	    }
	
	    function chart(selection) {
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight1 = nv.utils.availableHeight(height, container, margin)
	                    - (focusEnable ? focusHeight : 0),
	                availableHeight2 = focusHeight - margin2.top - margin2.bottom;
	
	            chart.update = function() { container.transition().duration(transitionDuration).call(chart); };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disableddisabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            var dataBars = data.filter(function(d) { return !d.disabled && d.bar });
	            var dataLines = data.filter(function(d) { return !d.bar }); // removed the !d.disabled clause here to fix Issue #240
	
	            if (dataBars.length && !switchYAxisOrder) {
	                x = bars.xScale();
	            } else {
	                x = lines.xScale();
	            }
	
	            x2 = x2Axis.scale();
	
	            // select the scales and series based on the position of the yAxis
	            y1 = switchYAxisOrder ? lines.yScale() : bars.yScale();
	            y2 = switchYAxisOrder ? bars.yScale() : lines.yScale();
	            y3 = switchYAxisOrder ? lines2.yScale() : bars2.yScale();
	            y4 = switchYAxisOrder ? bars2.yScale() : lines2.yScale();
	
	            var series1 = data
	                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? !d.bar : d.bar) })
	                .map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d,i), y: getY(d,i) }
	                    })
	                });
	
	            var series2 = data
	                .filter(function(d) { return !d.disabled && (switchYAxisOrder ? d.bar : !d.bar) })
	                .map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d,i), y: getY(d,i) }
	                    })
	                });
	
	            x.range([0, availableWidth]);
	
	            x2  .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x } ))
	                .range([0, availableWidth]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-linePlusBar').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-linePlusBar').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	
	            // this is the main chart
	            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
	            focusEnter.append('g').attr('class', 'nv-x nv-axis');
	            focusEnter.append('g').attr('class', 'nv-y1 nv-axis');
	            focusEnter.append('g').attr('class', 'nv-y2 nv-axis');
	            focusEnter.append('g').attr('class', 'nv-barsWrap');
	            focusEnter.append('g').attr('class', 'nv-linesWrap');
	
	            // context chart is where you can focus in
	            var contextEnter = gEnter.append('g').attr('class', 'nv-context');
	            contextEnter.append('g').attr('class', 'nv-x nv-axis');
	            contextEnter.append('g').attr('class', 'nv-y1 nv-axis');
	            contextEnter.append('g').attr('class', 'nv-y2 nv-axis');
	            contextEnter.append('g').attr('class', 'nv-barsWrap');
	            contextEnter.append('g').attr('class', 'nv-linesWrap');
	            contextEnter.append('g').attr('class', 'nv-brushBackground');
	            contextEnter.append('g').attr('class', 'nv-x nv-brush');
	
	            //============================================================
	            // Legend
	            //------------------------------------------------------------
	
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
	                var legendXPosition = legend.align() ? legendWidth : 0;
	
	                legend.width(legendWidth);
	
	                g.select('.nv-legendWrap')
	                    .datum(data.map(function(series) {
	                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
	                        if(switchYAxisOrder) {
	                            series.key = series.originalKey + (series.bar ? legendRightAxisHint : legendLeftAxisHint);
	                        } else {
	                            series.key = series.originalKey + (series.bar ? legendLeftAxisHint : legendRightAxisHint);
	                        }
	                        return series;
	                    }))
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    // FIXME: shouldn't this be "- (focusEnabled ? focusHeight : 0)"?
	                    availableHeight1 = nv.utils.availableHeight(height, container, margin) - focusHeight;
	                }
	
	                g.select('.nv-legendWrap')
	                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            //============================================================
	            // Context chart (focus chart) components
	            //------------------------------------------------------------
	
	            // hide or show the focus context chart
	            g.select('.nv-context').style('display', focusEnable ? 'initial' : 'none');
	
	            bars2
	                .width(availableWidth)
	                .height(availableHeight2)
	                .color(data.map(function (d, i) {
	                    return d.color || color(d, i);
	                }).filter(function (d, i) {
	                    return !data[i].disabled && data[i].bar
	                }));
	            lines2
	                .width(availableWidth)
	                .height(availableHeight2)
	                .color(data.map(function (d, i) {
	                    return d.color || color(d, i);
	                }).filter(function (d, i) {
	                    return !data[i].disabled && !data[i].bar
	                }));
	
	            var bars2Wrap = g.select('.nv-context .nv-barsWrap')
	                .datum(dataBars.length ? dataBars : [
	                    {values: []}
	                ]);
	            var lines2Wrap = g.select('.nv-context .nv-linesWrap')
	                .datum(allDisabled(dataLines) ?
	                       [{values: []}] :
	                       dataLines.filter(function(dataLine) {
	                         return !dataLine.disabled;
	                       }));
	
	            g.select('.nv-context')
	                .attr('transform', 'translate(0,' + ( availableHeight1 + margin.bottom + margin2.top) + ')');
	
	            bars2Wrap.transition().call(bars2);
	            lines2Wrap.transition().call(lines2);
	
	            // context (focus chart) axis controls
	            if (focusShowAxisX) {
	                x2Axis
	                    ._ticks( nv.utils.calcTicksX(availableWidth / 100, data))
	                    .tickSize(-availableHeight2, 0);
	                g.select('.nv-context .nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y3.range()[0] + ')');
	                g.select('.nv-context .nv-x.nv-axis').transition()
	                    .call(x2Axis);
	            }
	
	            if (focusShowAxisY) {
	                y3Axis
	                    .scale(y3)
	                    ._ticks( availableHeight2 / 36 )
	                    .tickSize( -availableWidth, 0);
	                y4Axis
	                    .scale(y4)
	                    ._ticks( availableHeight2 / 36 )
	                    .tickSize(dataBars.length ? 0 : -availableWidth, 0); // Show the y2 rules only if y1 has none
	
	                g.select('.nv-context .nv-y3.nv-axis')
	                    .style('opacity', dataBars.length ? 1 : 0)
	                    .attr('transform', 'translate(0,' + x2.range()[0] + ')');
	                g.select('.nv-context .nv-y2.nv-axis')
	                    .style('opacity', dataLines.length ? 1 : 0)
	                    .attr('transform', 'translate(' + x2.range()[1] + ',0)');
	
	                g.select('.nv-context .nv-y1.nv-axis').transition()
	                    .call(y3Axis);
	                g.select('.nv-context .nv-y2.nv-axis').transition()
	                    .call(y4Axis);
	            }
	
	            // Setup Brush
	            brush.x(x2).on('brush', onBrush);
	
	            if (brushExtent) brush.extent(brushExtent);
	
	            var brushBG = g.select('.nv-brushBackground').selectAll('g')
	                .data([brushExtent || brush.extent()]);
	
	            var brushBGenter = brushBG.enter()
	                .append('g');
	
	            brushBGenter.append('rect')
	                .attr('class', 'left')
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('height', availableHeight2);
	
	            brushBGenter.append('rect')
	                .attr('class', 'right')
	                .attr('x', 0)
	                .attr('y', 0)
	                .attr('height', availableHeight2);
	
	            var gBrush = g.select('.nv-x.nv-brush')
	                .call(brush);
	            gBrush.selectAll('rect')
	                //.attr('y', -5)
	                .attr('height', availableHeight2);
	            gBrush.selectAll('.resize').append('path').attr('d', resizePath);
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	                    state.disabled = e.disabled;
	                }
	                chart.update();
	            });
	
	            //============================================================
	            // Functions
	            //------------------------------------------------------------
	
	            // Taken from crossfilter (http://square.github.com/crossfilter/)
	            function resizePath(d) {
	                var e = +(d == 'e'),
	                    x = e ? 1 : -1,
	                    y = availableHeight2 / 3;
	                return 'M' + (.5 * x) + ',' + y
	                    + 'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6)
	                    + 'V' + (2 * y - 6)
	                    + 'A6,6 0 0 ' + e + ' ' + (.5 * x) + ',' + (2 * y)
	                    + 'Z'
	                    + 'M' + (2.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8)
	                    + 'M' + (4.5 * x) + ',' + (y + 8)
	                    + 'V' + (2 * y - 8);
	            }
	
	
	            function updateBrushBG() {
	                if (!brush.empty()) brush.extent(brushExtent);
	                brushBG
	                    .data([brush.empty() ? x2.domain() : brushExtent])
	                    .each(function(d,i) {
	                        var leftWidth = x2(d[0]) - x2.range()[0],
	                            rightWidth = x2.range()[1] - x2(d[1]);
	                        d3.select(this).select('.left')
	                            .attr('width',  leftWidth < 0 ? 0 : leftWidth);
	
	                        d3.select(this).select('.right')
	                            .attr('x', x2(d[1]))
	                            .attr('width', rightWidth < 0 ? 0 : rightWidth);
	                    });
	            }
	
	            function onBrush() {
	                brushExtent = brush.empty() ? null : brush.extent();
	                extent = brush.empty() ? x2.domain() : brush.extent();
	                dispatch.brush({extent: extent, brush: brush});
	                updateBrushBG();
	
	                // Prepare Main (Focus) Bars and Lines
	                bars
	                    .width(availableWidth)
	                    .height(availableHeight1)
	                    .color(data.map(function(d,i) {
	                        return d.color || color(d, i);
	                    }).filter(function(d,i) { return !data[i].disabled && data[i].bar }));
	
	                lines
	                    .width(availableWidth)
	                    .height(availableHeight1)
	                    .color(data.map(function(d,i) {
	                        return d.color || color(d, i);
	                    }).filter(function(d,i) { return !data[i].disabled && !data[i].bar }));
	
	                var focusBarsWrap = g.select('.nv-focus .nv-barsWrap')
	                    .datum(!dataBars.length ? [{values:[]}] :
	                        dataBars
	                            .map(function(d,i) {
	                                return {
	                                    key: d.key,
	                                    values: d.values.filter(function(d,i) {
	                                        return bars.x()(d,i) >= extent[0] && bars.x()(d,i) <= extent[1];
	                                    })
	                                }
	                            })
	                );
	
	                var focusLinesWrap = g.select('.nv-focus .nv-linesWrap')
	                    .datum(allDisabled(dataLines) ? [{values:[]}] :
	                           dataLines
	                           .filter(function(dataLine) { return !dataLine.disabled; })
	                           .map(function(d,i) {
	                                return {
	                                    area: d.area,
	                                    fillOpacity: d.fillOpacity,
	                                    strokeWidth: d.strokeWidth,
	                                    key: d.key,
	                                    values: d.values.filter(function(d,i) {
	                                        return lines.x()(d,i) >= extent[0] && lines.x()(d,i) <= extent[1];
	                                    })
	                                }
	                            })
	                );
	
	                // Update Main (Focus) X Axis
	                if (dataBars.length && !switchYAxisOrder) {
	                    x = bars.xScale();
	                } else {
	                    x = lines.xScale();
	                }
	
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight1, 0);
	
	                xAxis.domain([Math.ceil(extent[0]), Math.floor(extent[1])]);
	
	                g.select('.nv-x.nv-axis').transition().duration(transitionDuration)
	                    .call(xAxis);
	
	                // Update Main (Focus) Bars and Lines
	                focusBarsWrap.transition().duration(transitionDuration).call(bars);
	                focusLinesWrap.transition().duration(transitionDuration).call(lines);
	
	                // Setup and Update Main (Focus) Y Axes
	                g.select('.nv-focus .nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y1.range()[0] + ')');
	
	                y1Axis
	                    .scale(y1)
	                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) )
	                    .tickSize(-availableWidth, 0);
	                y2Axis
	                    .scale(y2)
	                    ._ticks( nv.utils.calcTicksY(availableHeight1/36, data) );
	
	                // Show the y2 rules only if y1 has none
	                if(!switchYAxisOrder) {
	                    y2Axis.tickSize(dataBars.length ? 0 : -availableWidth, 0);
	                } else {
	                    y2Axis.tickSize(dataLines.length ? 0 : -availableWidth, 0);
	                }
	
	                // Calculate opacity of the axis
	                var barsOpacity = dataBars.length ? 1 : 0;
	                var linesOpacity = dataLines.length && !allDisabled(dataLines) ? 1 : 0;
	
	                var y1Opacity = switchYAxisOrder ? linesOpacity : barsOpacity;
	                var y2Opacity = switchYAxisOrder ? barsOpacity : linesOpacity;
	
	                g.select('.nv-focus .nv-y1.nv-axis')
	                    .style('opacity', y1Opacity);
	                g.select('.nv-focus .nv-y2.nv-axis')
	                    .style('opacity', y2Opacity)
	                    .attr('transform', 'translate(' + x.range()[1] + ',0)');
	
	                g.select('.nv-focus .nv-y1.nv-axis').transition().duration(transitionDuration)
	                    .call(y1Axis);
	                g.select('.nv-focus .nv-y2.nv-axis').transition().duration(transitionDuration)
	                    .call(y2Axis);
	            }
	
	            onBrush();
	
	        });
	
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    lines.dispatch.on('elementMouseover.tooltip', function(evt) {
	        tooltip
	            .duration(100)
	            .valueFormatter(function(d, i) {
	                return getLinesAxis().main.tickFormat()(d, i);
	            })
	            .data(evt)
	            .hidden(false);
	    });
	
	    lines.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true)
	    });
	
	    bars.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt.value = chart.x()(evt.data);
	        evt['series'] = {
	            value: chart.y()(evt.data),
	            color: evt.color
	        };
	        tooltip
	            .duration(0)
	            .valueFormatter(function(d, i) {
	                return getBarsAxis().main.tickFormat()(d, i);
	            })
	            .data(evt)
	            .hidden(false);
	    });
	
	    bars.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    bars.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.legend = legend;
	    chart.lines = lines;
	    chart.lines2 = lines2;
	    chart.bars = bars;
	    chart.bars2 = bars2;
	    chart.xAxis = xAxis;
	    chart.x2Axis = x2Axis;
	    chart.y1Axis = y1Axis;
	    chart.y2Axis = y2Axis;
	    chart.y3Axis = y3Axis;
	    chart.y4Axis = y4Axis;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        brushExtent:    {get: function(){return brushExtent;}, set: function(_){brushExtent=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},
	        focusHeight:    {get: function(){return focusHeight;}, set: function(_){focusHeight=_;}},
	        focusShowAxisX:    {get: function(){return focusShowAxisX;}, set: function(_){focusShowAxisX=_;}},
	        focusShowAxisY:    {get: function(){return focusShowAxisY;}, set: function(_){focusShowAxisY=_;}},
	        legendLeftAxisHint:    {get: function(){return legendLeftAxisHint;}, set: function(_){legendLeftAxisHint=_;}},
	        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        focusMargin: {get: function(){return margin2;}, set: function(_){
	            margin2.top    = _.top    !== undefined ? _.top    : margin2.top;
	            margin2.right  = _.right  !== undefined ? _.right  : margin2.right;
	            margin2.bottom = _.bottom !== undefined ? _.bottom : margin2.bottom;
	            margin2.left   = _.left   !== undefined ? _.left   : margin2.left;
	        }},
	        duration: {get: function(){return transitionDuration;}, set: function(_){
	            transitionDuration = _;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	        }},
	        x: {get: function(){return getX;}, set: function(_){
	            getX = _;
	            lines.x(_);
	            lines2.x(_);
	            bars.x(_);
	            bars2.x(_);
	        }},
	        y: {get: function(){return getY;}, set: function(_){
	            getY = _;
	            lines.y(_);
	            lines2.y(_);
	            bars.y(_);
	            bars2.y(_);
	        }},
	        switchYAxisOrder:    {get: function(){return switchYAxisOrder;}, set: function(_){
	            // Switch the tick format for the yAxis
	            if(switchYAxisOrder !== _) {
	                var y1 = y1Axis;
	                y1Axis = y2Axis;
	                y2Axis = y1;
	
	                var y3 = y3Axis;
	                y3Axis = y4Axis;
	                y4Axis = y3;
	            }
	            switchYAxisOrder=_;
	
	            y1Axis.orient('left');
	            y2Axis.orient('right');
	            y3Axis.orient('left');
	            y4Axis.orient('right');
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, lines);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.multiBar = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 960
	        , height = 500
	        , x = d3.scale.ordinal()
	        , y = d3.scale.linear()
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
	        , clipEdge = true
	        , stacked = false
	        , stackOffset = 'zero' // options include 'silhouette', 'wiggle', 'expand', 'zero', or a custom function
	        , color = nv.utils.defaultColor()
	        , hideable = false
	        , barColor = null // adding the ability to set the color for each rather than the whole group
	        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
	        , duration = 500
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , groupSpacing = 0.1
	        , fillOpacity = 0.75
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0 //used to store previous scales
	        , renderWatch = nv.utils.renderWatch(dispatch, duration)
	        ;
	
	    var last_datalength = 0;
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	            var nonStackableCount = 0;
	            // This function defines the requirements for render complete
	            var endFn = function(d, i) {
	                if (d.series === data.length - 1 && i === data[0].values.length - 1)
	                    return true;
	                return false;
	            };
	
	            if(hideable && data.length) hideable = [{
	                values: data[0].values.map(function(d) {
	                        return {
	                            x: d.x,
	                            y: 0,
	                            series: d.series,
	                            size: 0.01
	                        };}
	                )}];
	
	            if (stacked) {
	                var parsed = d3.layout.stack()
	                    .offset(stackOffset)
	                    .values(function(d){ return d.values })
	                    .y(getY)
	                (!data.length && hideable ? hideable : data);
	
	                parsed.forEach(function(series, i){
	                    // if series is non-stackable, use un-parsed data
	                    if (series.nonStackable) {
	                        data[i].nonStackableSeries = nonStackableCount++;
	                        parsed[i] = data[i];
	                    } else {
	                        // don't stack this seires on top of the nonStackable seriees
	                        if (i > 0 && parsed[i - 1].nonStackable){
	                            parsed[i].values.map(function(d,j){
	                                d.y0 -= parsed[i - 1].values[j].y;
	                                d.y1 = d.y0 + d.y;
	                            });
	                        }
	                    }
	                });
	                data = parsed;
	            }
	            //add series index and key to each data point for reference
	            data.forEach(function(series, i) {
	                series.values.forEach(function(point) {
	                    point.series = i;
	                    point.key = series.key;
	                });
	            });
	
	            // HACK for negative value stacking
	            if (stacked && data.length > 0) {
	                data[0].values.map(function(d,i) {
	                    var posBase = 0, negBase = 0;
	                    data.map(function(d, idx) {
	                        if (!data[idx].nonStackable) {
	                            var f = d.values[i]
	                            f.size = Math.abs(f.y);
	                            if (f.y<0)  {
	                                f.y1 = negBase;
	                                negBase = negBase - f.size;
	                            } else
	                            {
	                                f.y1 = f.size + posBase;
	                                posBase = posBase + f.size;
	                            }
	                        }
	
	                    });
	                });
	            }
	            // Setup Scales
	            // remap and flatten the data for use in calculating the scales' domains
	            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
	                data.map(function(d, idx) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1, idx:idx }
	                    })
	                });
	
	            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
	                .rangeBands(xRange || [0, availableWidth], groupSpacing);
	
	            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) {
	                var domain = d.y;
	                // increase the domain range if this series is stackable
	                if (stacked && !data[d.idx].nonStackable) {
	                    if (d.y > 0){
	                        domain = d.y1
	                    } else {
	                        domain = d.y1 + d.y
	                    }
	                }
	                return domain;
	            }).concat(forceY)))
	            .range(yRange || [availableHeight, 0]);
	
	            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
	            if (x.domain()[0] === x.domain()[1])
	                x.domain()[0] ?
	                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
	                    : x.domain([-1,1]);
	
	            if (y.domain()[0] === y.domain()[1])
	                y.domain()[0] ?
	                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
	                    : y.domain([-1,1]);
	
	            x0 = x0 || x;
	            y0 = y0 || y;
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-multibar').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibar');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-groups');
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-edge-clip-' + id)
	                .append('rect');
	            wrap.select('#nv-edge-clip-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
	
	            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
	                .data(function(d) { return d }, function(d,i) { return i });
	            groups.enter().append('g')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6);
	
	            var exitTransition = renderWatch
	                .transition(groups.exit().selectAll('rect.nv-bar'), 'multibarExit', Math.min(100, duration))
	                .attr('y', function(d, i, j) {
	                    var yVal = y0(0) || 0;
	                    if (stacked) {
	                        if (data[d.series] && !data[d.series].nonStackable) {
	                            yVal = y0(d.y0);
	                        }
	                    }
	                    return yVal;
	                })
	                .attr('height', 0)
	                .remove();
	            if (exitTransition.delay)
	                exitTransition.delay(function(d,i) {
	                    var delay = i * (duration / (last_datalength + 1)) - i;
	                    return delay;
	                });
	            groups
	                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
	                .classed('hover', function(d) { return d.hover })
	                .style('fill', function(d,i){ return color(d, i) })
	                .style('stroke', function(d,i){ return color(d, i) });
	            groups
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', fillOpacity);
	
	            var bars = groups.selectAll('rect.nv-bar')
	                .data(function(d) { return (hideable && !data.length) ? hideable.values : d.values });
	            bars.exit().remove();
	
	            var barsEnter = bars.enter().append('rect')
	                    .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})
	                    .attr('x', function(d,i,j) {
	                        return stacked && !data[j].nonStackable ? 0 : (j * x.rangeBand() / data.length )
	                    })
	                    .attr('y', function(d,i,j) { return y0(stacked && !data[j].nonStackable ? d.y0 : 0) || 0 })
	                    .attr('height', 0)
	                    .attr('width', function(d,i,j) { return x.rangeBand() / (stacked && !data[j].nonStackable ? 1 : data.length) })
	                    .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })
	                ;
	            bars
	                .style('fill', function(d,i,j){ return color(d, j, i);  })
	                .style('stroke', function(d,i,j){ return color(d, j, i); })
	                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    dispatch.elementMousemove({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('click', function(d,i) {
	                    var element = this;
	                    dispatch.elementClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill"),
	                        event: d3.event,
	                        element: element
	                    });
	                    d3.event.stopPropagation();
	                })
	                .on('dblclick', function(d,i) {
	                    dispatch.elementDblClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                    d3.event.stopPropagation();
	                });
	            bars
	                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})
	                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',0)'; })
	
	            if (barColor) {
	                if (!disabled) disabled = data.map(function() { return true });
	                bars
	                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
	                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
	            }
	
	            var barSelection =
	                bars.watchTransition(renderWatch, 'multibar', Math.min(250, duration))
	                    .delay(function(d,i) {
	                        return i * duration / data[0].values.length;
	                    });
	            if (stacked){
	                barSelection
	                    .attr('y', function(d,i,j) {
	                        var yVal = 0;
	                        // if stackable, stack it on top of the previous series
	                        if (!data[j].nonStackable) {
	                            yVal = y(d.y1);
	                        } else {
	                            if (getY(d,i) < 0){
	                                yVal = y(0);
	                            } else {
	                                if (y(0) - y(getY(d,i)) < -1){
	                                    yVal = y(0) - 1;
	                                } else {
	                                    yVal = y(getY(d, i)) || 0;
	                                }
	                            }
	                        }
	                        return yVal;
	                    })
	                    .attr('height', function(d,i,j) {
	                        if (!data[j].nonStackable) {
	                            return Math.max(Math.abs(y(d.y+d.y0) - y(d.y0)), 0);
	                        } else {
	                            return Math.max(Math.abs(y(getY(d,i)) - y(0)), 0) || 0;
	                        }
	                    })
	                    .attr('x', function(d,i,j) {
	                        var width = 0;
	                        if (data[j].nonStackable) {
	                            width = d.series * x.rangeBand() / data.length;
	                            if (data.length !== nonStackableCount){
	                                width = data[j].nonStackableSeries * x.rangeBand()/(nonStackableCount*2);
	                            }
	                        }
	                        return width;
	                    })
	                    .attr('width', function(d,i,j){
	                        if (!data[j].nonStackable) {
	                            return x.rangeBand();
	                        } else {
	                            // if all series are nonStacable, take the full width
	                            var width = (x.rangeBand() / nonStackableCount);
	                            // otherwise, nonStackable graph will be only taking the half-width
	                            // of the x rangeBand
	                            if (data.length !== nonStackableCount) {
	                                width = x.rangeBand()/(nonStackableCount*2);
	                            }
	                            return width;
	                        }
	                    });
	            }
	            else {
	                barSelection
	                    .attr('x', function(d,i) {
	                        return d.series * x.rangeBand() / data.length;
	                    })
	                    .attr('width', x.rangeBand() / data.length)
	                    .attr('y', function(d,i) {
	                        return getY(d,i) < 0 ?
	                            y(0) :
	                                y(0) - y(getY(d,i)) < 1 ?
	                            y(0) - 1 :
	                            y(getY(d,i)) || 0;
	                    })
	                    .attr('height', function(d,i) {
	                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0;
	                    });
	            }
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	
	            // keep track of the last data value length for transition calculations
	            if (data[0] && data[0].values) {
	                last_datalength = data[0].values.length;
	            }
	
	        });
	
	        renderWatch.renderEnd('multibar immediate');
	
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:   {get: function(){return width;}, set: function(_){width=_;}},
	        height:  {get: function(){return height;}, set: function(_){height=_;}},
	        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
	        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},
	        stackOffset: {get: function(){return stackOffset;}, set: function(_){stackOffset=_;}},
	        clipEdge:    {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        disabled:    {get: function(){return disabled;}, set: function(_){disabled=_;}},
	        id:          {get: function(){return id;}, set: function(_){id=_;}},
	        hideable:    {get: function(){return hideable;}, set: function(_){hideable=_;}},
	        groupSpacing:{get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},
	        fillOpacity: {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        barColor:  {get: function(){return barColor;}, set: function(_){
	            barColor = _ ? nv.utils.getColor(_) : null;
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	nv.models.multiBarChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var multibar = nv.models.multiBar()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , interactiveLayer = nv.interactiveGuideline()
	        , legend = nv.models.legend()
	        , controls = nv.models.legend()
	        , tooltip = nv.models.tooltip()
	        ;
	
	    var margin = {top: 30, right: 20, bottom: 50, left: 60}
	        , width = null
	        , height = null
	        , color = nv.utils.defaultColor()
	        , showControls = true
	        , controlLabels = {}
	        , showLegend = true
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , reduceXTicks = true // if false a tick will show for every data point
	        , staggerLabels = false
	        , wrapLabels = false
	        , rotateLabels = 0
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
	        , controlWidth = function() { return showControls ? 180 : 0 }
	        , duration = 250
	        , useInteractiveGuideline = false
	        ;
	
	    state.stacked = false // DEPRECATED Maintained for backward compatibility
	
	    multibar.stacked(false);
	    xAxis
	        .orient('bottom')
	        .tickPadding(7)
	        .showMaxMin(false)
	        .tickFormat(function(d) { return d })
	    ;
	    yAxis
	        .orient((rightAlignYAxis) ? 'right' : 'left')
	        .tickFormat(d3.format(',.1f'))
	    ;
	
	    tooltip
	        .duration(0)
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        })
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        });
	
	    controls.updateState(false);
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	    var stacked = false;
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled }),
	                stacked: stacked
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.stacked !== undefined)
	                stacked = state.stacked;
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(multibar);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() {
	                if (duration === 0)
	                    container.call(chart);
	                else
	                    container.transition()
	                        .duration(duration)
	                        .call(chart);
	            };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disableddisabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display noData message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = multibar.xScale();
	            y = multibar.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-multiBarWithLegend').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarWithLegend').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis');
	            gEnter.append('g').attr('class', 'nv-barsWrap');
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	            gEnter.append('g').attr('class', 'nv-controlsWrap');
	            gEnter.append('g').attr('class', 'nv-interactive');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth - controlWidth());
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                g.select('.nv-legendWrap')
	                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');
	            }
	
	            // Controls
	            if (!showControls) {
	                 g.select('.nv-controlsWrap').selectAll('*').remove();
	            } else {
	                var controlsData = [
	                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },
	                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }
	                ];
	
	                controls.width(controlWidth()).color(['#444', '#444', '#444']);
	                g.select('.nv-controlsWrap')
	                    .datum(controlsData)
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	                    .call(controls);
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            // Main Chart Component(s)
	            multibar
	                .disabled(data.map(function(series) { return series.disabled }))
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled }));
	
	
	            var barsWrap = g.select('.nv-barsWrap')
	                .datum(data.filter(function(d) { return !d.disabled }));
	
	            barsWrap.call(multibar);
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize(-availableHeight, 0);
	
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')');
	                g.select('.nv-x.nv-axis')
	                    .call(xAxis);
	
	                var xTicks = g.select('.nv-x.nv-axis > g').selectAll('g');
	
	                xTicks
	                    .selectAll('line, text')
	                    .style('opacity', 1)
	
	                if (staggerLabels) {
	                    var getTranslate = function(x,y) {
	                        return "translate(" + x + "," + y + ")";
	                    };
	
	                    var staggerUp = 5, staggerDown = 17;  //pixels to stagger by
	                    // Issue #140
	                    xTicks
	                        .selectAll("text")
	                        .attr('transform', function(d,i,j) {
	                            return  getTranslate(0, (j % 2 == 0 ? staggerUp : staggerDown));
	                        });
	
	                    var totalInBetweenTicks = d3.selectAll(".nv-x.nv-axis .nv-wrap g g text")[0].length;
	                    g.selectAll(".nv-x.nv-axis .nv-axisMaxMin text")
	                        .attr("transform", function(d,i) {
	                            return getTranslate(0, (i === 0 || totalInBetweenTicks % 2 !== 0) ? staggerDown : staggerUp);
	                        });
	                }
	
	                if (wrapLabels) {
	                    g.selectAll('.tick text')
	                        .call(nv.utils.wrapTicks, chart.xAxis.rangeBand())
	                }
	
	                if (reduceXTicks)
	                    xTicks
	                        .filter(function(d,i) {
	                            return i % Math.ceil(data[0].values.length / (availableWidth / 100)) !== 0;
	                        })
	                        .selectAll('text, line')
	                        .style('opacity', 0);
	
	                if(rotateLabels)
	                    xTicks
	                        .selectAll('.tick text')
	                        .attr('transform', 'rotate(' + rotateLabels + ' 0,0)')
	                        .style('text-anchor', rotateLabels > 0 ? 'start' : 'end');
	
	                g.select('.nv-x.nv-axis').selectAll('g.nv-axisMaxMin text')
	                    .style('opacity', 1);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis')
	                    .call(yAxis);
	            }
	
	            //Set up interactive layer
	            if (useInteractiveGuideline) {
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left:margin.left, top:margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            controls.dispatch.on('legendClick', function(d,i) {
	                if (!d.disabled) return;
	                controlsData = controlsData.map(function(s) {
	                    s.disabled = true;
	                    return s;
	                });
	                d.disabled = false;
	
	                switch (d.key) {
	                    case 'Grouped':
	                    case controlLabels.grouped:
	                        multibar.stacked(false);
	                        break;
	                    case 'Stacked':
	                    case controlLabels.stacked:
	                        multibar.stacked(true);
	                        break;
	                }
	
	                state.stacked = multibar.stacked();
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	                    state.disabled = e.disabled;
	                }
	                if (typeof e.stacked !== 'undefined') {
	                    multibar.stacked(e.stacked);
	                    state.stacked = e.stacked;
	                    stacked = e.stacked;
	                }
	                chart.update();
	            });
	
	            if (useInteractiveGuideline) {
	                interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                    if (e.pointXValue == undefined) return;
	
	                    var singlePoint, pointIndex, pointXLocation, xValue, allData = [];
	                    data
	                        .filter(function(series, i) {
	                            series.seriesIndex = i;
	                            return !series.disabled;
	                        })
	                        .forEach(function(series,i) {
	                            pointIndex = x.domain().indexOf(e.pointXValue)
	
	                            var point = series.values[pointIndex];
	                            if (point === undefined) return;
	
	                            xValue = point.x;
	                            if (singlePoint === undefined) singlePoint = point;
	                            if (pointXLocation === undefined) pointXLocation = e.mouseX
	                            allData.push({
	                                key: series.key,
	                                value: chart.y()(point, pointIndex),
	                                color: color(series,series.seriesIndex),
	                                data: series.values[pointIndex]
	                            });
	                        });
	
	                    interactiveLayer.tooltip
	                        .data({
	                            value: xValue,
	                            index: pointIndex,
	                            series: allData
	                        })();
	
	                    interactiveLayer.renderGuideLine(pointXLocation);
	                });
	
	                interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                    interactiveLayer.tooltip.hidden(true);
	                });
	            }
	            else {
	                multibar.dispatch.on('elementMouseover.tooltip', function(evt) {
	                    evt.value = chart.x()(evt.data);
	                    evt['series'] = {
	                        key: evt.data.key,
	                        value: chart.y()(evt.data),
	                        color: evt.color
	                    };
	                    tooltip.data(evt).hidden(false);
	                });
	
	                multibar.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true);
	                });
	
	                multibar.dispatch.on('elementMousemove.tooltip', function(evt) {
	                    tooltip();
	                });
	            }
	        });
	
	        renderWatch.renderEnd('multibarchart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.multibar = multibar;
	    chart.legend = legend;
	    chart.controls = controls;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.state = state;
	    chart.tooltip = tooltip;
	    chart.interactiveLayer = interactiveLayer;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},
	        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
	        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        reduceXTicks:    {get: function(){return reduceXTicks;}, set: function(_){reduceXTicks=_;}},
	        rotateLabels:    {get: function(){return rotateLabels;}, set: function(_){rotateLabels=_;}},
	        staggerLabels:    {get: function(){return staggerLabels;}, set: function(_){staggerLabels=_;}},
	        wrapLabels:   {get: function(){return wrapLabels;}, set: function(_){wrapLabels=!!_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            multibar.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	            renderWatch.reset(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
	        }},
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = _;
	        }},
	        barColor:  {get: function(){return multibar.barColor;}, set: function(_){
	            multibar.barColor(_);
	            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, multibar);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.multiBarHorizontal = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 960
	        , height = 500
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , x = d3.scale.ordinal()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , getYerr = function(d) { return d.yErr }
	        , forceY = [0] // 0 is forced by default.. this makes sense for the majority of bar graphs... user can always do chart.forceY([]) to remove
	        , color = nv.utils.defaultColor()
	        , barColor = null // adding the ability to set the color for each rather than the whole group
	        , disabled // used in conjunction with barColor to communicate from multiBarHorizontalChart what series are disabled
	        , stacked = false
	        , showValues = false
	        , showBarLabels = false
	        , valuePadding = 60
	        , groupSpacing = 0.1
	        , fillOpacity = 0.75
	        , valueFormat = d3.format(',.2f')
	        , delay = 1200
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , duration = 250
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0; //used to store previous scales
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            if (stacked)
	                data = d3.layout.stack()
	                    .offset('zero')
	                    .values(function(d){ return d.values })
	                    .y(getY)
	                (data);
	
	            //add series index and key to each data point for reference
	            data.forEach(function(series, i) {
	                series.values.forEach(function(point) {
	                    point.series = i;
	                    point.key = series.key;
	                });
	            });
	
	            // HACK for negative value stacking
	            if (stacked)
	                data[0].values.map(function(d,i) {
	                    var posBase = 0, negBase = 0;
	                    data.map(function(d) {
	                        var f = d.values[i]
	                        f.size = Math.abs(f.y);
	                        if (f.y<0)  {
	                            f.y1 = negBase - f.size;
	                            negBase = negBase - f.size;
	                        } else
	                        {
	                            f.y1 = posBase;
	                            posBase = posBase + f.size;
	                        }
	                    });
	                });
	
	            // Setup Scales
	            // remap and flatten the data for use in calculating the scales' domains
	            var seriesData = (xDomain && yDomain) ? [] : // if we know xDomain and yDomain, no need to calculate
	                data.map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d,i), y: getY(d,i), y0: d.y0, y1: d.y1 }
	                    })
	                });
	
	            x.domain(xDomain || d3.merge(seriesData).map(function(d) { return d.x }))
	                .rangeBands(xRange || [0, availableHeight], groupSpacing);
	
	            y.domain(yDomain || d3.extent(d3.merge(seriesData).map(function(d) { return stacked ? (d.y > 0 ? d.y1 + d.y : d.y1 ) : d.y }).concat(forceY)))
	
	            if (showValues && !stacked)
	                y.range(yRange || [(y.domain()[0] < 0 ? valuePadding : 0), availableWidth - (y.domain()[1] > 0 ? valuePadding : 0) ]);
	            else
	                y.range(yRange || [0, availableWidth]);
	
	            x0 = x0 || x;
	            y0 = y0 || d3.scale.linear().domain(y.domain()).range([y(0),y(0)]);
	
	            // Setup containers and skeleton of chart
	            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-multibarHorizontal').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multibarHorizontal');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-groups');
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
	                .data(function(d) { return d }, function(d,i) { return i });
	            groups.enter().append('g')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6);
	            groups.exit().watchTransition(renderWatch, 'multibarhorizontal: exit groups')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6)
	                .remove();
	            groups
	                .attr('class', function(d,i) { return 'nv-group nv-series-' + i })
	                .classed('hover', function(d) { return d.hover })
	                .style('fill', function(d,i){ return color(d, i) })
	                .style('stroke', function(d,i){ return color(d, i) });
	            groups.watchTransition(renderWatch, 'multibarhorizontal: groups')
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', fillOpacity);
	
	            var bars = groups.selectAll('g.nv-bar')
	                .data(function(d) { return d.values });
	            bars.exit().remove();
	
	            var barsEnter = bars.enter().append('g')
	                .attr('transform', function(d,i,j) {
	                    return 'translate(' + y0(stacked ? d.y0 : 0) + ',' + (stacked ? 0 : (j * x.rangeBand() / data.length ) + x(getX(d,i))) + ')'
	                });
	
	            barsEnter.append('rect')
	                .attr('width', 0)
	                .attr('height', x.rangeBand() / (stacked ? 1 : data.length) )
	
	            bars
	                .on('mouseover', function(d,i) { //TODO: figure out why j works above, but not here
	                    d3.select(this).classed('hover', true);
	                    dispatch.elementMouseover({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.elementMouseout({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    dispatch.elementMouseout({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('mousemove', function(d,i) {
	                    dispatch.elementMousemove({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                })
	                .on('click', function(d,i) {
	                    var element = this;
	                    dispatch.elementClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill"),
	                        event: d3.event,
	                        element: element
	                    });
	                    d3.event.stopPropagation();
	                })
	                .on('dblclick', function(d,i) {
	                    dispatch.elementDblClick({
	                        data: d,
	                        index: i,
	                        color: d3.select(this).style("fill")
	                    });
	                    d3.event.stopPropagation();
	                });
	
	            if (getYerr(data[0],0)) {
	                barsEnter.append('polyline');
	
	                bars.select('polyline')
	                    .attr('fill', 'none')
	                    .attr('points', function(d,i) {
	                        var xerr = getYerr(d,i)
	                            , mid = 0.8 * x.rangeBand() / ((stacked ? 1 : data.length) * 2);
	                        xerr = xerr.length ? xerr : [-Math.abs(xerr), Math.abs(xerr)];
	                        xerr = xerr.map(function(e) { return y(e) - y(0); });
	                        var a = [[xerr[0],-mid], [xerr[0],mid], [xerr[0],0], [xerr[1],0], [xerr[1],-mid], [xerr[1],mid]];
	                        return a.map(function (path) { return path.join(',') }).join(' ');
	                    })
	                    .attr('transform', function(d,i) {
	                        var mid = x.rangeBand() / ((stacked ? 1 : data.length) * 2);
	                        return 'translate(' + (getY(d,i) < 0 ? 0 : y(getY(d,i)) - y(0)) + ', ' + mid + ')'
	                    });
	            }
	
	            barsEnter.append('text');
	
	            if (showValues && !stacked) {
	                bars.select('text')
	                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'end' : 'start' })
	                    .attr('y', x.rangeBand() / (data.length * 2))
	                    .attr('dy', '.32em')
	                    .text(function(d,i) {
	                        var t = valueFormat(getY(d,i))
	                            , yerr = getYerr(d,i);
	                        if (yerr === undefined)
	                            return t;
	                        if (!yerr.length)
	                            return t + '±' + valueFormat(Math.abs(yerr));
	                        return t + '+' + valueFormat(Math.abs(yerr[1])) + '-' + valueFormat(Math.abs(yerr[0]));
	                    });
	                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
	                    .select('text')
	                    .attr('x', function(d,i) { return getY(d,i) < 0 ? -4 : y(getY(d,i)) - y(0) + 4 })
	            } else {
	                bars.selectAll('text').text('');
	            }
	
	            if (showBarLabels && !stacked) {
	                barsEnter.append('text').classed('nv-bar-label',true);
	                bars.select('text.nv-bar-label')
	                    .attr('text-anchor', function(d,i) { return getY(d,i) < 0 ? 'start' : 'end' })
	                    .attr('y', x.rangeBand() / (data.length * 2))
	                    .attr('dy', '.32em')
	                    .text(function(d,i) { return getX(d,i) });
	                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
	                    .select('text.nv-bar-label')
	                    .attr('x', function(d,i) { return getY(d,i) < 0 ? y(0) - y(getY(d,i)) + 4 : -4 });
	            }
	            else {
	                bars.selectAll('text.nv-bar-label').text('');
	            }
	
	            bars
	                .attr('class', function(d,i) { return getY(d,i) < 0 ? 'nv-bar negative' : 'nv-bar positive'})
	
	            if (barColor) {
	                if (!disabled) disabled = data.map(function() { return true });
	                bars
	                    .style('fill', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); })
	                    .style('stroke', function(d,i,j) { return d3.rgb(barColor(d,i)).darker(  disabled.map(function(d,i) { return i }).filter(function(d,i){ return !disabled[i]  })[j]   ).toString(); });
	            }
	
	            if (stacked)
	                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
	                    .attr('transform', function(d,i) {
	                        return 'translate(' + y(d.y1) + ',' + x(getX(d,i)) + ')'
	                    })
	                    .select('rect')
	                    .attr('width', function(d,i) {
	                        return Math.abs(y(getY(d,i) + d.y0) - y(d.y0)) || 0
	                    })
	                    .attr('height', x.rangeBand() );
	            else
	                bars.watchTransition(renderWatch, 'multibarhorizontal: bars')
	                    .attr('transform', function(d,i) {
	                        //TODO: stacked must be all positive or all negative, not both?
	                        return 'translate(' +
	                            (getY(d,i) < 0 ? y(getY(d,i)) : y(0))
	                            + ',' +
	                            (d.series * x.rangeBand() / data.length
	                                +
	                                x(getX(d,i)) )
	                            + ')'
	                    })
	                    .select('rect')
	                    .attr('height', x.rangeBand() / data.length )
	                    .attr('width', function(d,i) {
	                        return Math.max(Math.abs(y(getY(d,i)) - y(0)),1) || 0
	                    });
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	
	        });
	
	        renderWatch.renderEnd('multibarHorizontal immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:   {get: function(){return width;}, set: function(_){width=_;}},
	        height:  {get: function(){return height;}, set: function(_){height=_;}},
	        x:       {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:       {get: function(){return getY;}, set: function(_){getY=_;}},
	        yErr:       {get: function(){return getYerr;}, set: function(_){getYerr=_;}},
	        xScale:  {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:  {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain: {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain: {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:  {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:  {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        forceY:  {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        stacked: {get: function(){return stacked;}, set: function(_){stacked=_;}},
	        showValues: {get: function(){return showValues;}, set: function(_){showValues=_;}},
	        // this shows the group name, seems pointless?
	        //showBarLabels:    {get: function(){return showBarLabels;}, set: function(_){showBarLabels=_;}},
	        disabled:     {get: function(){return disabled;}, set: function(_){disabled=_;}},
	        id:           {get: function(){return id;}, set: function(_){id=_;}},
	        valueFormat:  {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
	        valuePadding: {get: function(){return valuePadding;}, set: function(_){valuePadding=_;}},
	        groupSpacing: {get: function(){return groupSpacing;}, set: function(_){groupSpacing=_;}},
	        fillOpacity:  {get: function(){return fillOpacity;}, set: function(_){fillOpacity=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        barColor:  {get: function(){return barColor;}, set: function(_){
	            barColor = _ ? nv.utils.getColor(_) : null;
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.multiBarHorizontalChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var multibar = nv.models.multiBarHorizontal()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , legend = nv.models.legend().height(30)
	        , controls = nv.models.legend().height(30)
	        , tooltip = nv.models.tooltip()
	        ;
	
	    var margin = {top: 30, right: 20, bottom: 50, left: 60}
	        , width = null
	        , height = null
	        , color = nv.utils.defaultColor()
	        , showControls = true
	        , controlLabels = {}
	        , showLegend = true
	        , showXAxis = true
	        , showYAxis = true
	        , stacked = false
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
	        , controlWidth = function() { return showControls ? 180 : 0 }
	        , duration = 250
	        ;
	
	    state.stacked = false; // DEPRECATED Maintained for backward compatibility
	
	    multibar.stacked(stacked);
	
	    xAxis
	        .orient('left')
	        .tickPadding(5)
	        .showMaxMin(false)
	        .tickFormat(function(d) { return d })
	    ;
	    yAxis
	        .orient('bottom')
	        .tickFormat(d3.format(',.1f'))
	    ;
	
	    tooltip
	        .duration(0)
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        })
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        });
	
	    controls.updateState(false);
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled }),
	                stacked: stacked
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.stacked !== undefined)
	                stacked = state.stacked;
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(multibar);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() { container.transition().duration(duration).call(chart) };
	            chart.container = this;
	
	            stacked = multibar.stacked();
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disableddisabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = multibar.xScale();
	            y = multibar.yScale().clamp(true);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-multiBarHorizontalChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-multiBarHorizontalChart').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis')
	                .append('g').attr('class', 'nv-zeroLine')
	                .append('line');
	            gEnter.append('g').attr('class', 'nv-barsWrap');
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	            gEnter.append('g').attr('class', 'nv-controlsWrap');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                legend.width(availableWidth - controlWidth());
	
	                g.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                g.select('.nv-legendWrap')
	                    .attr('transform', 'translate(' + controlWidth() + ',' + (-margin.top) +')');
	            }
	
	            // Controls
	            if (!showControls) {
	                 g.select('.nv-controlsWrap').selectAll('*').remove();
	            } else {
	                var controlsData = [
	                    { key: controlLabels.grouped || 'Grouped', disabled: multibar.stacked() },
	                    { key: controlLabels.stacked || 'Stacked', disabled: !multibar.stacked() }
	                ];
	
	                controls.width(controlWidth()).color(['#444', '#444', '#444']);
	                g.select('.nv-controlsWrap')
	                    .datum(controlsData)
	                    .attr('transform', 'translate(0,' + (-margin.top) +')')
	                    .call(controls);
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Main Chart Component(s)
	            multibar
	                .disabled(data.map(function(series) { return series.disabled }))
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled }));
	
	            var barsWrap = g.select('.nv-barsWrap')
	                .datum(data.filter(function(d) { return !d.disabled }));
	
	            barsWrap.transition().call(multibar);
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/24, data) )
	                    .tickSize(-availableWidth, 0);
	
	                g.select('.nv-x.nv-axis').call(xAxis);
	
	                var xTicks = g.select('.nv-x.nv-axis').selectAll('g');
	
	                xTicks
	                    .selectAll('line, text');
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize( -availableHeight, 0);
	
	                g.select('.nv-y.nv-axis')
	                    .attr('transform', 'translate(0,' + availableHeight + ')');
	                g.select('.nv-y.nv-axis').call(yAxis);
	            }
	
	            // Zero line
	            g.select(".nv-zeroLine line")
	                .attr("x1", y(0))
	                .attr("x2", y(0))
	                .attr("y1", 0)
	                .attr("y2", -availableHeight)
	            ;
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            controls.dispatch.on('legendClick', function(d,i) {
	                if (!d.disabled) return;
	                controlsData = controlsData.map(function(s) {
	                    s.disabled = true;
	                    return s;
	                });
	                d.disabled = false;
	
	                switch (d.key) {
	                    case 'Grouped':
	                    case controlLabels.grouped:
	                        multibar.stacked(false);
	                        break;
	                    case 'Stacked':
	                    case controlLabels.stacked:
	                        multibar.stacked(true);
	                        break;
	                }
	
	                state.stacked = multibar.stacked();
	                dispatch.stateChange(state);
	                stacked = multibar.stacked();
	
	                chart.update();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	
	                    state.disabled = e.disabled;
	                }
	
	                if (typeof e.stacked !== 'undefined') {
	                    multibar.stacked(e.stacked);
	                    state.stacked = e.stacked;
	                    stacked = e.stacked;
	                }
	
	                chart.update();
	            });
	        });
	        renderWatch.renderEnd('multibar horizontal chart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    multibar.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt.value = chart.x()(evt.data);
	        evt['series'] = {
	            key: evt.data.key,
	            value: chart.y()(evt.data),
	            color: evt.color
	        };
	        tooltip.data(evt).hidden(false);
	    });
	
	    multibar.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    multibar.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.multibar = multibar;
	    chart.legend = legend;
	    chart.controls = controls;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.state = state;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        showControls: {get: function(){return showControls;}, set: function(_){showControls=_;}},
	        controlLabels: {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
	        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            multibar.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	        }},
	        barColor:  {get: function(){return multibar.barColor;}, set: function(_){
	            multibar.barColor(_);
	            legend.color(function(d,i) {return d3.rgb('#ccc').darker(i * 1.5).toString();})
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, multibar);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	nv.models.multiChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 30, right: 20, bottom: 50, left: 60},
	        color = nv.utils.defaultColor(),
	        width = null,
	        height = null,
	        showLegend = true,
	        noData = null,
	        yDomain1,
	        yDomain2,
	        getX = function(d) { return d.x },
	        getY = function(d) { return d.y},
	        interpolate = 'linear',
	        useVoronoi = true,
	        interactiveLayer = nv.interactiveGuideline(),
	        useInteractiveGuideline = false,
	        legendRightAxisHint = ' (right axis)'
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x = d3.scale.linear(),
	        yScale1 = d3.scale.linear(),
	        yScale2 = d3.scale.linear(),
	
	        lines1 = nv.models.line().yScale(yScale1),
	        lines2 = nv.models.line().yScale(yScale2),
	
	        scatters1 = nv.models.scatter().yScale(yScale1),
	        scatters2 = nv.models.scatter().yScale(yScale2),
	
	        bars1 = nv.models.multiBar().stacked(false).yScale(yScale1),
	        bars2 = nv.models.multiBar().stacked(false).yScale(yScale2),
	
	        stack1 = nv.models.stackedArea().yScale(yScale1),
	        stack2 = nv.models.stackedArea().yScale(yScale2),
	
	        xAxis = nv.models.axis().scale(x).orient('bottom').tickPadding(5),
	        yAxis1 = nv.models.axis().scale(yScale1).orient('left'),
	        yAxis2 = nv.models.axis().scale(yScale2).orient('right'),
	
	        legend = nv.models.legend().height(30),
	        tooltip = nv.models.tooltip(),
	        dispatch = d3.dispatch();
	
	    var charts = [lines1, lines2, scatters1, scatters2, bars1, bars2, stack1, stack2];
	
	    function chart(selection) {
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	
	            chart.update = function() { container.transition().call(chart); };
	            chart.container = this;
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            var dataLines1 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 1});
	            var dataLines2 = data.filter(function(d) {return d.type == 'line' && d.yAxis == 2});
	            var dataScatters1 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 1});
	            var dataScatters2 = data.filter(function(d) {return d.type == 'scatter' && d.yAxis == 2});
	            var dataBars1 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 1});
	            var dataBars2 =  data.filter(function(d) {return d.type == 'bar'  && d.yAxis == 2});
	            var dataStack1 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 1});
	            var dataStack2 = data.filter(function(d) {return d.type == 'area' && d.yAxis == 2});
	
	            // Display noData message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container);
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            var series1 = data.filter(function(d) {return !d.disabled && d.yAxis == 1})
	                .map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d), y: getY(d) }
	                    })
	                });
	
	            var series2 = data.filter(function(d) {return !d.disabled && d.yAxis == 2})
	                .map(function(d) {
	                    return d.values.map(function(d,i) {
	                        return { x: getX(d), y: getY(d) }
	                    })
	                });
	
	            x   .domain(d3.extent(d3.merge(series1.concat(series2)), function(d) { return d.x }))
	                .range([0, availableWidth]);
	
	            var wrap = container.selectAll('g.wrap.multiChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'wrap nvd3 multiChart').append('g');
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y1 nv-axis');
	            gEnter.append('g').attr('class', 'nv-y2 nv-axis');
	            gEnter.append('g').attr('class', 'stack1Wrap');
	            gEnter.append('g').attr('class', 'stack2Wrap');
	            gEnter.append('g').attr('class', 'bars1Wrap');
	            gEnter.append('g').attr('class', 'bars2Wrap');
	            gEnter.append('g').attr('class', 'scatters1Wrap');
	            gEnter.append('g').attr('class', 'scatters2Wrap');
	            gEnter.append('g').attr('class', 'lines1Wrap');
	            gEnter.append('g').attr('class', 'lines2Wrap');
	            gEnter.append('g').attr('class', 'legendWrap');
	            gEnter.append('g').attr('class', 'nv-interactive');
	
	            var g = wrap.select('g');
	
	            var color_array = data.map(function(d,i) {
	                return data[i].color || color(d, i);
	            });
	
	            // Legend
	            if (!showLegend) {
	                g.select('.legendWrap').selectAll('*').remove();
	            } else {
	                var legendWidth = legend.align() ? availableWidth / 2 : availableWidth;
	                var legendXPosition = legend.align() ? legendWidth : 0;
	
	                legend.width(legendWidth);
	                legend.color(color_array);
	
	                g.select('.legendWrap')
	                    .datum(data.map(function(series) {
	                        series.originalKey = series.originalKey === undefined ? series.key : series.originalKey;
	                        series.key = series.originalKey + (series.yAxis == 1 ? '' : legendRightAxisHint);
	                        return series;
	                    }))
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                g.select('.legendWrap')
	                    .attr('transform', 'translate(' + legendXPosition + ',' + (-margin.top) +')');
	            }
	
	            lines1
	                .width(availableWidth)
	                .height(availableHeight)
	                .interpolate(interpolate)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'line'}));
	            lines2
	                .width(availableWidth)
	                .height(availableHeight)
	                .interpolate(interpolate)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'line'}));
	            scatters1
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'scatter'}));
	            scatters2
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'scatter'}));
	            bars1
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'bar'}));
	            bars2
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'bar'}));
	            stack1
	                .width(availableWidth)
	                .height(availableHeight)
	                .interpolate(interpolate)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 1 && data[i].type == 'area'}));
	            stack2
	                .width(availableWidth)
	                .height(availableHeight)
	                .interpolate(interpolate)
	                .color(color_array.filter(function(d,i) { return !data[i].disabled && data[i].yAxis == 2 && data[i].type == 'area'}));
	
	            g.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            var lines1Wrap = g.select('.lines1Wrap')
	                .datum(dataLines1.filter(function(d){return !d.disabled}));
	            var scatters1Wrap = g.select('.scatters1Wrap')
	                .datum(dataScatters1.filter(function(d){return !d.disabled}));
	            var bars1Wrap = g.select('.bars1Wrap')
	                .datum(dataBars1.filter(function(d){return !d.disabled}));
	            var stack1Wrap = g.select('.stack1Wrap')
	                .datum(dataStack1.filter(function(d){return !d.disabled}));
	            var lines2Wrap = g.select('.lines2Wrap')
	                .datum(dataLines2.filter(function(d){return !d.disabled}));
	            var scatters2Wrap = g.select('.scatters2Wrap')
	                .datum(dataScatters2.filter(function(d){return !d.disabled}));
	            var bars2Wrap = g.select('.bars2Wrap')
	                .datum(dataBars2.filter(function(d){return !d.disabled}));
	            var stack2Wrap = g.select('.stack2Wrap')
	                .datum(dataStack2.filter(function(d){return !d.disabled}));
	
	            var extraValue1 = dataStack1.length ? dataStack1.map(function(a){return a.values}).reduce(function(a,b){
	                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})
	            }).concat([{x:0, y:0}]) : [];
	            var extraValue2 = dataStack2.length ? dataStack2.map(function(a){return a.values}).reduce(function(a,b){
	                return a.map(function(aVal,i){return {x: aVal.x, y: aVal.y + b[i].y}})
	            }).concat([{x:0, y:0}]) : [];
	
	            yScale1 .domain(yDomain1 || d3.extent(d3.merge(series1).concat(extraValue1), function(d) { return d.y } ))
	                .range([0, availableHeight]);
	
	            yScale2 .domain(yDomain2 || d3.extent(d3.merge(series2).concat(extraValue2), function(d) { return d.y } ))
	                .range([0, availableHeight]);
	
	            lines1.yDomain(yScale1.domain());
	            scatters1.yDomain(yScale1.domain());
	            bars1.yDomain(yScale1.domain());
	            stack1.yDomain(yScale1.domain());
	
	            lines2.yDomain(yScale2.domain());
	            scatters2.yDomain(yScale2.domain());
	            bars2.yDomain(yScale2.domain());
	            stack2.yDomain(yScale2.domain());
	
	            if(dataStack1.length){d3.transition(stack1Wrap).call(stack1);}
	            if(dataStack2.length){d3.transition(stack2Wrap).call(stack2);}
	
	            if(dataBars1.length){d3.transition(bars1Wrap).call(bars1);}
	            if(dataBars2.length){d3.transition(bars2Wrap).call(bars2);}
	
	            if(dataLines1.length){d3.transition(lines1Wrap).call(lines1);}
	            if(dataLines2.length){d3.transition(lines2Wrap).call(lines2);}
	
	            if(dataScatters1.length){d3.transition(scatters1Wrap).call(scatters1);}
	            if(dataScatters2.length){d3.transition(scatters2Wrap).call(scatters2);}
	
	            xAxis
	                ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                .tickSize(-availableHeight, 0);
	
	            g.select('.nv-x.nv-axis')
	                .attr('transform', 'translate(0,' + availableHeight + ')');
	            d3.transition(g.select('.nv-x.nv-axis'))
	                .call(xAxis);
	
	            yAxis1
	                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                .tickSize( -availableWidth, 0);
	
	
	            d3.transition(g.select('.nv-y1.nv-axis'))
	                .call(yAxis1);
	
	            yAxis2
	                ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                .tickSize( -availableWidth, 0);
	
	            d3.transition(g.select('.nv-y2.nv-axis'))
	                .call(yAxis2);
	
	            g.select('.nv-y1.nv-axis')
	                .classed('nv-disabled', series1.length ? false : true)
	                .attr('transform', 'translate(' + x.range()[0] + ',0)');
	
	            g.select('.nv-y2.nv-axis')
	                .classed('nv-disabled', series2.length ? false : true)
	                .attr('transform', 'translate(' + x.range()[1] + ',0)');
	
	            legend.dispatch.on('stateChange', function(newState) {
	                chart.update();
	            });
	
	            if(useInteractiveGuideline){
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left:margin.left, top:margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	
	            //============================================================
	            // Event Handling/Dispatching
	            //------------------------------------------------------------
	
	            function mouseover_line(evt) {
	                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
	                evt.value = evt.point.x;
	                evt.series = {
	                    value: evt.point.y,
	                    color: evt.point.color,
	                    key: evt.series.key
	                };
	                tooltip
	                    .duration(0)
	                    .headerFormatter(function(d, i) {
	                    	return xAxis.tickFormat()(d, i);
	                    })
	                    .valueFormatter(function(d, i) {
	                        return yaxis.tickFormat()(d, i);
	                    })
	                    .data(evt)
	                    .hidden(false);
	            }
	
	            function mouseover_scatter(evt) {
	                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
	                evt.value = evt.point.x;
	                evt.series = {
	                    value: evt.point.y,
	                    color: evt.point.color,
	                    key: evt.series.key
	                };
	                tooltip
	                    .duration(100)
	                    .headerFormatter(function(d, i) {
	                    	return xAxis.tickFormat()(d, i);
	                    })
	                    .valueFormatter(function(d, i) {
	                        return yaxis.tickFormat()(d, i);
	                    })
	                    .data(evt)
	                    .hidden(false);
	            }
	
	            function mouseover_stack(evt) {
	                var yaxis = data[evt.seriesIndex].yAxis === 2 ? yAxis2 : yAxis1;
	                evt.point['x'] = stack1.x()(evt.point);
	                evt.point['y'] = stack1.y()(evt.point);
	                tooltip
	                    .duration(0)
	                    .headerFormatter(function(d, i) {
	                    	return xAxis.tickFormat()(d, i);
	                    })
	                    .valueFormatter(function(d, i) {
	                        return yaxis.tickFormat()(d, i);
	                    })
	                    .data(evt)
	                    .hidden(false);
	            }
	
	            function mouseover_bar(evt) {
	                var yaxis = data[evt.data.series].yAxis === 2 ? yAxis2 : yAxis1;
	
	                evt.value = bars1.x()(evt.data);
	                evt['series'] = {
	                    value: bars1.y()(evt.data),
	                    color: evt.color,
	                    key: evt.data.key
	                };
	                tooltip
	                    .duration(0)
	                    .headerFormatter(function(d, i) {
	                    	return xAxis.tickFormat()(d, i);
	                    })
	                    .valueFormatter(function(d, i) {
	                        return yaxis.tickFormat()(d, i);
	                    })
	                    .data(evt)
	                    .hidden(false);
	            }
	
	
	
	            function clearHighlights() {
	              for(var i=0, il=charts.length; i < il; i++){
	                var chart = charts[i];
	                try {
	                  chart.clearHighlights();
	                } catch(e){}
	              }
	            }
	
	            function highlightPoint(serieIndex, pointIndex, b){
	              for(var i=0, il=charts.length; i < il; i++){
	                var chart = charts[i];
	                try {
	                  chart.highlightPoint(serieIndex, pointIndex, b);
	                } catch(e){}
	              }
	            }
	
	            if(useInteractiveGuideline){
	                interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                    clearHighlights();
	                    var singlePoint, pointIndex, pointXLocation, allData = [];
	                    data
	                    .filter(function(series, i) {
	                        series.seriesIndex = i;
	                        return !series.disabled;
	                    })
	                    .forEach(function(series,i) {
	                        var extent = x.domain();
	                        var currentValues = series.values.filter(function(d,i) {
	                            return chart.x()(d,i) >= extent[0] && chart.x()(d,i) <= extent[1];
	                        });
	
	                        pointIndex = nv.interactiveBisect(currentValues, e.pointXValue, chart.x());
	                        var point = currentValues[pointIndex];
	                        var pointYValue = chart.y()(point, pointIndex);
	                        if (pointYValue !== null) {
	                            highlightPoint(i, pointIndex, true);
	                        }
	                        if (point === undefined) return;
	                        if (singlePoint === undefined) singlePoint = point;
	                        if (pointXLocation === undefined) pointXLocation = x(chart.x()(point,pointIndex));
	                        allData.push({
	                            key: series.key,
	                            value: pointYValue,
	                            color: color(series,series.seriesIndex),
	                            data: point,
	                            yAxis: series.yAxis == 2 ? yAxis2 : yAxis1
	                        });
	                    });
	
	                    var defaultValueFormatter = function(d,i) {
	                        var yAxis = allData[i].yAxis;
	                        return d == null ? "N/A" : yAxis.tickFormat()(d);
	                    };
	
	                    interactiveLayer.tooltip
	                        .headerFormatter(function(d, i) {
	                            return xAxis.tickFormat()(d, i);
	                        })
	                        .valueFormatter(interactiveLayer.tooltip.valueFormatter() || defaultValueFormatter)
	                        .data({
	                            value: chart.x()( singlePoint,pointIndex ),
	                            index: pointIndex,
	                            series: allData
	                        })();
	
	                    interactiveLayer.renderGuideLine(pointXLocation);
	                });
	
	                interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                    clearHighlights();
	                });
	            } else {
	                lines1.dispatch.on('elementMouseover.tooltip', mouseover_line);
	                lines2.dispatch.on('elementMouseover.tooltip', mouseover_line);
	                lines1.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	                lines2.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	
	                scatters1.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
	                scatters2.dispatch.on('elementMouseover.tooltip', mouseover_scatter);
	                scatters1.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	                scatters2.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	
	                stack1.dispatch.on('elementMouseover.tooltip', mouseover_stack);
	                stack2.dispatch.on('elementMouseover.tooltip', mouseover_stack);
	                stack1.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	                stack2.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true)
	                });
	
	                bars1.dispatch.on('elementMouseover.tooltip', mouseover_bar);
	                bars2.dispatch.on('elementMouseover.tooltip', mouseover_bar);
	
	                bars1.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true);
	                });
	                bars2.dispatch.on('elementMouseout.tooltip', function(evt) {
	                    tooltip.hidden(true);
	                });
	                bars1.dispatch.on('elementMousemove.tooltip', function(evt) {
	                    tooltip();
	                });
	                bars2.dispatch.on('elementMousemove.tooltip', function(evt) {
	                    tooltip();
	                });
	            }
	        });
	
	        return chart;
	    }
	
	    //============================================================
	    // Global getters and setters
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.legend = legend;
	    chart.lines1 = lines1;
	    chart.lines2 = lines2;
	    chart.scatters1 = scatters1;
	    chart.scatters2 = scatters2;
	    chart.bars1 = bars1;
	    chart.bars2 = bars2;
	    chart.stack1 = stack1;
	    chart.stack2 = stack2;
	    chart.xAxis = xAxis;
	    chart.yAxis1 = yAxis1;
	    chart.yAxis2 = yAxis2;
	    chart.tooltip = tooltip;
	    chart.interactiveLayer = interactiveLayer;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        yDomain1:      {get: function(){return yDomain1;}, set: function(_){yDomain1=_;}},
	        yDomain2:    {get: function(){return yDomain2;}, set: function(_){yDomain2=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},
	        legendRightAxisHint:    {get: function(){return legendRightAxisHint;}, set: function(_){legendRightAxisHint=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        x: {get: function(){return getX;}, set: function(_){
	            getX = _;
	            lines1.x(_);
	            lines2.x(_);
	            scatters1.x(_);
	            scatters2.x(_);
	            bars1.x(_);
	            bars2.x(_);
	            stack1.x(_);
	            stack2.x(_);
	        }},
	        y: {get: function(){return getY;}, set: function(_){
	            getY = _;
	            lines1.y(_);
	            lines2.y(_);
	            scatters1.y(_);
	            scatters2.y(_);
	            stack1.y(_);
	            stack2.y(_);
	            bars1.y(_);
	            bars2.y(_);
	        }},
	        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){
	            useVoronoi=_;
	            lines1.useVoronoi(_);
	            lines2.useVoronoi(_);
	            stack1.useVoronoi(_);
	            stack2.useVoronoi(_);
	        }},
	
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = _;
	            if (useInteractiveGuideline) {
	                lines1.interactive(false);
	                lines1.useVoronoi(false);
	                lines2.interactive(false);
	                lines2.useVoronoi(false);
	                stack1.interactive(false);
	                stack1.useVoronoi(false);
	                stack2.interactive(false);
	                stack2.useVoronoi(false);
	                scatters1.interactive(false);
	                scatters2.interactive(false);
	            }
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.ohlcBar = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = null
	        , height = null
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , x = d3.scale.linear()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , getOpen = function(d) { return d.open }
	        , getClose = function(d) { return d.close }
	        , getHigh = function(d) { return d.high }
	        , getLow = function(d) { return d.low }
	        , forceX = []
	        , forceY = []
	        , padData     = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
	        , clipEdge = true
	        , color = nv.utils.defaultColor()
	        , interactive = false
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd', 'chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    function chart(selection) {
	        selection.each(function(data) {
	            container = d3.select(this);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            nv.utils.initSVG(container);
	
	            // ohlc bar width.
	            var w = (availableWidth / data[0].values.length) * .9;
	
	            // Setup Scales
	            x.domain(xDomain || d3.extent(data[0].values.map(getX).concat(forceX) ));
	
	            if (padData)
	                x.range(xRange || [availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
	            else
	                x.range(xRange || [5 + w/2, availableWidth - w/2 - 5]);
	
	            y.domain(yDomain || [
	                    d3.min(data[0].values.map(getLow).concat(forceY)),
	                    d3.max(data[0].values.map(getHigh).concat(forceY))
	                ]
	            ).range(yRange || [availableHeight, 0]);
	
	            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
	            if (x.domain()[0] === x.domain()[1])
	                x.domain()[0] ?
	                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
	                    : x.domain([-1,1]);
	
	            if (y.domain()[0] === y.domain()[1])
	                y.domain()[0] ?
	                    y.domain([y.domain()[0] + y.domain()[0] * 0.01, y.domain()[1] - y.domain()[1] * 0.01])
	                    : y.domain([-1,1]);
	
	            // Setup containers and skeleton of chart
	            var wrap = d3.select(this).selectAll('g.nv-wrap.nv-ohlcBar').data([data[0].values]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-ohlcBar');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-ticks');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            container
	                .on('click', function(d,i) {
	                    dispatch.chartClick({
	                        data: d,
	                        index: i,
	                        pos: d3.event,
	                        id: id
	                    });
	                });
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-chart-clip-path-' + id)
	                .append('rect');
	
	            wrap.select('#nv-chart-clip-path-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            g   .attr('clip-path', clipEdge ? 'url(#nv-chart-clip-path-' + id + ')' : '');
	
	            var ticks = wrap.select('.nv-ticks').selectAll('.nv-tick')
	                .data(function(d) { return d });
	            ticks.exit().remove();
	
	            ticks.enter().append('path')
	                .attr('class', function(d,i,j) { return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i })
	                .attr('d', function(d,i) {
	                    return 'm0,0l0,'
	                        + (y(getOpen(d,i))
	                            - y(getHigh(d,i)))
	                        + 'l'
	                        + (-w/2)
	                        + ',0l'
	                        + (w/2)
	                        + ',0l0,'
	                        + (y(getLow(d,i)) - y(getOpen(d,i)))
	                        + 'l0,'
	                        + (y(getClose(d,i))
	                            - y(getLow(d,i)))
	                        + 'l'
	                        + (w/2)
	                        + ',0l'
	                        + (-w/2)
	                        + ',0z';
	                })
	                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
	                .attr('fill', function(d,i) { return color[0]; })
	                .attr('stroke', function(d,i) { return color[0]; })
	                .attr('x', 0 )
	                .attr('y', function(d,i) {  return y(Math.max(0, getY(d,i))) })
	                .attr('height', function(d,i) { return Math.abs(y(getY(d,i)) - y(0)) });
	
	            // the bar colors are controlled by CSS currently
	            ticks.attr('class', function(d,i,j) {
	                return (getOpen(d,i) > getClose(d,i) ? 'nv-tick negative' : 'nv-tick positive') + ' nv-tick-' + j + '-' + i;
	            });
	
	            d3.transition(ticks)
	                .attr('transform', function(d,i) { return 'translate(' + x(getX(d,i)) + ',' + y(getHigh(d,i)) + ')'; })
	                .attr('d', function(d,i) {
	                    var w = (availableWidth / data[0].values.length) * .9;
	                    return 'm0,0l0,'
	                        + (y(getOpen(d,i))
	                            - y(getHigh(d,i)))
	                        + 'l'
	                        + (-w/2)
	                        + ',0l'
	                        + (w/2)
	                        + ',0l0,'
	                        + (y(getLow(d,i))
	                            - y(getOpen(d,i)))
	                        + 'l0,'
	                        + (y(getClose(d,i))
	                            - y(getLow(d,i)))
	                        + 'l'
	                        + (w/2)
	                        + ',0l'
	                        + (-w/2)
	                        + ',0z';
	                });
	        });
	
	        return chart;
	    }
	
	
	    //Create methods to allow outside functions to highlight a specific bar.
	    chart.highlightPoint = function(pointIndex, isHoverOver) {
	        chart.clearHighlights();
	        container.select(".nv-ohlcBar .nv-tick-0-" + pointIndex)
	            .classed("hover", isHoverOver)
	        ;
	    };
	
	    chart.clearHighlights = function() {
	        container.select(".nv-ohlcBar .nv-tick.hover")
	            .classed("hover", false)
	        ;
	    };
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:    {get: function(){return width;}, set: function(_){width=_;}},
	        height:   {get: function(){return height;}, set: function(_){height=_;}},
	        xScale:   {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:   {get: function(){return y;}, set: function(_){y=_;}},
	        xDomain:  {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain:  {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:   {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:   {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        forceX:   {get: function(){return forceX;}, set: function(_){forceX=_;}},
	        forceY:   {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        padData:  {get: function(){return padData;}, set: function(_){padData=_;}},
	        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        id:       {get: function(){return id;}, set: function(_){id=_;}},
	        interactive: {get: function(){return interactive;}, set: function(_){interactive=_;}},
	
	        x:     {get: function(){return getX;}, set: function(_){getX=_;}},
	        y:     {get: function(){return getY;}, set: function(_){getY=_;}},
	        open:  {get: function(){return getOpen();}, set: function(_){getOpen=_;}},
	        close: {get: function(){return getClose();}, set: function(_){getClose=_;}},
	        high:  {get: function(){return getHigh;}, set: function(_){getHigh=_;}},
	        low:   {get: function(){return getLow;}, set: function(_){getLow=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    != undefined ? _.top    : margin.top;
	            margin.right  = _.right  != undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   != undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	// Code adapted from Jason Davies' "Parallel Coordinates"
	// http://bl.ocks.org/jasondavies/1341281
	nv.models.parallelCoordinates = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 30, right: 0, bottom: 10, left: 0}
	        , width = null
	        , height = null
	        , availableWidth = null
	        , availableHeight = null
	        , x = d3.scale.ordinal()
	        , y = {}
	        , undefinedValuesLabel = "undefined values"
	        , dimensionData = []
	        , enabledDimensions = []
	        , dimensionNames = []
	        , displayBrush = true
	        , color = nv.utils.defaultColor()
	        , filters = []
	        , active = []
	        , dragging = []
	        , axisWithUndefinedValues = []
	        , lineTension = 1
	        , foreground
	        , background
	        , dimensions
	        , line = d3.svg.line()
	        , axis = d3.svg.axis()
	        , dispatch = d3.dispatch('brushstart', 'brush', 'brushEnd', 'dimensionsOrder', "stateChange", 'elementClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd', 'activeChanged')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var container = d3.select(this);
	            availableWidth = nv.utils.availableWidth(width, container, margin);
	            availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            nv.utils.initSVG(container);
	
	           //Convert old data to new format (name, values)
	            if (data[0].values === undefined) {
	                var newData = [];
	                data.forEach(function (d) {
	                        var val = {};
	                        var key = Object.keys(d);
	                        key.forEach(function (k) { if (k !== "name") val[k] = d[k] });
	                        newData.push({ key: d.name, values: val });
	                });
	                data = newData;
	            }
	
	            var dataValues = data.map(function (d) {return d.values});
	            if (active.length === 0) {
	                active = data;
	            }; //set all active before first brush call
	            
	            dimensionNames = dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; }).map(function (d) { return d.key });
	            enabledDimensions = dimensionData.filter(function (d) { return !d.disabled; });
	            
	            // Setup Scales
	            x.rangePoints([0, availableWidth], 1).domain(enabledDimensions.map(function (d) { return d.key; }));
	
	            //Set as true if all values on an axis are missing.
	            // Extract the list of dimensions and create a scale for each.
	            var oldDomainMaxValue = {};
	            var displayMissingValuesline = false;
	            var currentTicks = [];
	            
	            dimensionNames.forEach(function(d) {
	                var extent = d3.extent(dataValues, function (p) { return +p[d]; });
	                var min = extent[0];
	                var max = extent[1];
	                var onlyUndefinedValues = false;
	                //If there is no values to display on an axis, set the extent to 0
	                if (isNaN(min) || isNaN(max)) {
	                    onlyUndefinedValues = true;
	                    min = 0;
	                    max = 0;
	                }
	                //Scale axis if there is only one value
	                if (min === max) {
	                    min = min - 1;
	                    max = max + 1;
	                }
	                var f = filters.filter(function (k) { return k.dimension == d; });
	                if (f.length !== 0) {
	                    //If there is only NaN values, keep the existing domain.
	                    if (onlyUndefinedValues) {
	                        min = y[d].domain()[0];
	                        max = y[d].domain()[1];
	                    }
	                        //If the brush extent is > max (< min), keep the extent value.
	                    else if (!f[0].hasOnlyNaN && displayBrush) {
	                        min = min > f[0].extent[0] ? f[0].extent[0] : min;
	                        max = max < f[0].extent[1] ? f[0].extent[1] : max;
	                    }
	                        //If there is NaN values brushed be sure the brush extent is on the domain.
	                    else if (f[0].hasNaN) {
	                        max = max < f[0].extent[1] ? f[0].extent[1] : max;
	                        oldDomainMaxValue[d] = y[d].domain()[1];
	                        displayMissingValuesline = true;
	                    }
	                }
	                //Use 90% of (availableHeight - 12) for the axis range, 12 reprensenting the space necessary to display "undefined values" text.
	                //The remaining 10% are used to display the missingValue line.
	                y[d] = d3.scale.linear()
	                    .domain([min, max])
	                    .range([(availableHeight - 12) * 0.9, 0]);
	
	                axisWithUndefinedValues = [];
	                y[d].brush = d3.svg.brush().y(y[d]).on('brushstart', brushstart).on('brush', brush).on('brushend', brushend);
	            });
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinates').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinates');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-parallelCoordinates background');
	            gEnter.append('g').attr('class', 'nv-parallelCoordinates foreground');
	            gEnter.append('g').attr('class', 'nv-parallelCoordinates missingValuesline');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            line.interpolate('cardinal').tension(lineTension);
	            axis.orient('left');
	            var axisDrag = d3.behavior.drag()
	                        .on('dragstart', dragStart)
	                        .on('drag', dragMove)
	                        .on('dragend', dragEnd);
	
	            //Add missing value line at the bottom of the chart
	            var missingValuesline, missingValueslineText;
	            var step = x.range()[1] - x.range()[0];
	            if (!isNaN(step)) {
	                var lineData = [0 + step / 2, availableHeight - 12, availableWidth - step / 2, availableHeight - 12];
	                missingValuesline = wrap.select('.missingValuesline').selectAll('line').data([lineData]);
	                missingValuesline.enter().append('line');
	                missingValuesline.exit().remove();
	                missingValuesline.attr("x1", function(d) { return d[0]; })
	                        .attr("y1", function(d) { return d[1]; })
	                        .attr("x2", function(d) { return d[2]; })
	                        .attr("y2", function(d) { return d[3]; });
	    
	                //Add the text "undefined values" under the missing value line
	                missingValueslineText = wrap.select('.missingValuesline').selectAll('text').data([undefinedValuesLabel]);
	                missingValueslineText.append('text').data([undefinedValuesLabel]);
	                missingValueslineText.enter().append('text');
	                missingValueslineText.exit().remove();
	                missingValueslineText.attr("y", availableHeight)
	                        //To have the text right align with the missingValues line, substract 92 representing the text size.
	                        .attr("x", availableWidth - 92 - step / 2)
	                        .text(function(d) { return d; });
	            }
	            // Add grey background lines for context.
	            background = wrap.select('.background').selectAll('path').data(data);
	            background.enter().append('path');
	            background.exit().remove();
	            background.attr('d', path);
	
	            // Add blue foreground lines for focus.
	            foreground = wrap.select('.foreground').selectAll('path').data(data);
	            foreground.enter().append('path')
	            foreground.exit().remove();
	            foreground.attr('d', path)
	                .style("stroke-width", function (d, i) {
	                if (isNaN(d.strokeWidth)) { d.strokeWidth = 1;} return d.strokeWidth;})
	                .attr('stroke', function (d, i) { return d.color || color(d, i); });
	            foreground.on("mouseover", function (d, i) {
	                d3.select(this).classed('hover', true).style("stroke-width", d.strokeWidth + 2 + "px").style("stroke-opacity", 1);
	                dispatch.elementMouseover({
	                    label: d.name,
	                    color: d.color || color(d, i),
	                    values: d.values,
	                    dimensions: enabledDimensions
	                });
	
	            });
	            foreground.on("mouseout", function (d, i) {
	                d3.select(this).classed('hover', false).style("stroke-width", d.strokeWidth + "px").style("stroke-opacity", 0.7);
	                dispatch.elementMouseout({
	                    label: d.name,
	                    index: i
	                });
	            });
	            foreground.on('mousemove', function (d, i) {
	                dispatch.elementMousemove();
	            });
	            foreground.on('click', function (d) {
	                dispatch.elementClick({
	                    id: d.id
	                });
	            });
	            // Add a group element for each dimension.
	            dimensions = g.selectAll('.dimension').data(enabledDimensions);
	            var dimensionsEnter = dimensions.enter().append('g').attr('class', 'nv-parallelCoordinates dimension');
	
	            dimensions.attr('transform', function(d) { return 'translate(' + x(d.key) + ',0)'; });
	            dimensionsEnter.append('g').attr('class', 'nv-axis');
	
	            // Add an axis and title.
	            dimensionsEnter.append('text')
	                .attr('class', 'nv-label')
	                .style("cursor", "move")
	                .attr('dy', '-1em')
	                .attr('text-anchor', 'middle')
	                .on("mouseover", function(d, i) {
	                    dispatch.elementMouseover({
	                        label: d.tooltip || d.key,
	                        color: d.color 
	                    });
	                })
	                .on("mouseout", function(d, i) {
	                    dispatch.elementMouseout({
	                        label: d.tooltip
	                    });
	                })
	                .on('mousemove', function (d, i) {
	                    dispatch.elementMousemove();
	                })
	                .call(axisDrag);
	
	            dimensionsEnter.append('g').attr('class', 'nv-brushBackground');
	            dimensions.exit().remove();
	            dimensions.select('.nv-label').text(function (d) { return d.key });
	
	            // Add and store a brush for each axis.
	            restoreBrush(displayBrush);
	
	            var actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); }),
	                    extents = actives.map(function (p) { return y[p].brush.extent(); });
	            var formerActive = active.slice(0);
	
	            //Restore active values
	            active = [];
	            foreground.style("display", function (d) {
	                var isActive = actives.every(function (p, i) {
	                    if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) {
	                        return true;
	                    }
	                    return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));
	                });
	                if (isActive)
	                    active.push(d);
	                return !isActive ? "none" : null;
	
	            });
	
	            if (filters.length > 0 || !nv.utils.arrayEquals(active, formerActive)) {
	               dispatch.activeChanged(active);
	            }
	
	            // Returns the path for a given data point.
	            function path(d) {
	                return line(enabledDimensions.map(function (p) {
	                    //If value if missing, put the value on the missing value line
	                    if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key])) || displayMissingValuesline) {
	                        var domain = y[p.key].domain();
	                        var range = y[p.key].range();
	                        var min = domain[0] - (domain[1] - domain[0]) / 9;
	
	                        //If it's not already the case, allow brush to select undefined values
	                        if (axisWithUndefinedValues.indexOf(p.key) < 0) {
	
	                            var newscale = d3.scale.linear().domain([min, domain[1]]).range([availableHeight - 12, range[1]]);
	                            y[p.key].brush.y(newscale);
	                            axisWithUndefinedValues.push(p.key);
	                        }
	                        if (isNaN(d.values[p.key]) || isNaN(parseFloat(d.values[p.key]))) {
	                            return [x(p.key), y[p.key](min)];
	                        }
	                    }
	
	                    //If parallelCoordinate contain missing values show the missing values line otherwise, hide it.
	                    if (missingValuesline !== undefined) {
	                        if (axisWithUndefinedValues.length > 0 || displayMissingValuesline) {
	                            missingValuesline.style("display", "inline");
	                            missingValueslineText.style("display", "inline");
	                        } else {
	                            missingValuesline.style("display", "none");
	                            missingValueslineText.style("display", "none");
	                        }
	                    }
	                    return [x(p.key), y[p.key](d.values[p.key])];
	                }));
	            }
	
	            function restoreBrush(visible) {
	                filters.forEach(function (f) {
	                    //If filter brushed NaN values, keep the brush on the bottom of the axis.
	                    var brushDomain = y[f.dimension].brush.y().domain();
	                    if (f.hasOnlyNaN) {
	                        f.extent[1] = (y[f.dimension].domain()[1] - brushDomain[0]) * (f.extent[1] - f.extent[0]) / (oldDomainMaxValue[f.dimension] - f.extent[0]) + brushDomain[0];
	                    }
	                    if (f.hasNaN) {
	                        f.extent[0] = brushDomain[0];
	                    }
	                    if (visible)
	                        y[f.dimension].brush.extent(f.extent);
	                });
	                
	                dimensions.select('.nv-brushBackground')
	                    .each(function (d) {
	                        d3.select(this).call(y[d.key].brush);
	
	                    })
	                    .selectAll('rect')
	                    .attr('x', -8)
	                    .attr('width', 16);
	                
	                updateTicks();
	            }
	            
	            // Handles a brush event, toggling the display of foreground lines.
	            function brushstart() {
	                //If brush aren't visible, show it before brushing again.
	                if (displayBrush === false) {
	                    displayBrush = true;
	                    restoreBrush(true);
	                }
	            }
	            
	            // Handles a brush event, toggling the display of foreground lines.
	            function brush() {
	                actives = dimensionNames.filter(function (p) { return !y[p].brush.empty(); });
	                extents = actives.map(function(p) { return y[p].brush.extent(); });
	
	                filters = []; //erase current filters
	                actives.forEach(function(d,i) {
	                    filters[i] = {
	                        dimension: d,
	                        extent: extents[i],
	                        hasNaN: false,
	                        hasOnlyNaN: false
	                    }
	                });
	
	                active = []; //erase current active list
	                foreground.style('display', function(d) {
	                    var isActive = actives.every(function(p, i) {
	                        if ((isNaN(d.values[p]) || isNaN(parseFloat(d.values[p]))) && extents[i][0] == y[p].brush.y().domain()[0]) return true;
	                        return (extents[i][0] <= d.values[p] && d.values[p] <= extents[i][1]) && !isNaN(parseFloat(d.values[p]));
	                    });
	                    if (isActive) active.push(d);
	                    return isActive ? null : 'none';
	                });
	                
	                updateTicks();
	                
	                dispatch.brush({
	                    filters: filters,
	                    active: active
	                });
	            }
	            function brushend() {
	                var hasActiveBrush = actives.length > 0 ? true : false;
	                filters.forEach(function (f) {
	                    if (f.extent[0] === y[f.dimension].brush.y().domain()[0] && axisWithUndefinedValues.indexOf(f.dimension) >= 0)
	                        f.hasNaN = true;
	                    if (f.extent[1] < y[f.dimension].domain()[0])
	                        f.hasOnlyNaN = true;
	                });
	                dispatch.brushEnd(active, hasActiveBrush);
	            }           
	            function updateTicks() {
	                dimensions.select('.nv-axis')
	                    .each(function (d, i) {
	                        var f = filters.filter(function (k) { return k.dimension == d.key; });
	                        currentTicks[d.key] = y[d.key].domain();
	                        
	                        //If brush are available, display brush extent
	                        if (f.length != 0 && displayBrush)
	                        {
	                            currentTicks[d.key] = [];
	                            if (f[0].extent[1] > y[d.key].domain()[0]) 
	                                currentTicks[d.key] = [f[0].extent[1]];
	                            if (f[0].extent[0] >= y[d.key].domain()[0])
	                                currentTicks[d.key].push(f[0].extent[0]);    
	                        }
	                            
	                        d3.select(this).call(axis.scale(y[d.key]).tickFormat(d.format).tickValues(currentTicks[d.key]));
	                });
	            }
	            function dragStart(d) {
	                dragging[d.key] = this.parentNode.__origin__ = x(d.key);
	                background.attr("visibility", "hidden");
	            }
	            function dragMove(d) {
	                dragging[d.key] = Math.min(availableWidth, Math.max(0, this.parentNode.__origin__ += d3.event.x));
	                foreground.attr("d", path);
	                enabledDimensions.sort(function (a, b) { return dimensionPosition(a.key) - dimensionPosition(b.key); });
	                enabledDimensions.forEach(function (d, i) { return d.currentPosition = i; });
	                x.domain(enabledDimensions.map(function (d) { return d.key; }));
	                dimensions.attr("transform", function(d) { return "translate(" + dimensionPosition(d.key) + ")"; });
	            }
	            function dragEnd(d, i) {
	                delete this.parentNode.__origin__;
	                delete dragging[d.key];
	                d3.select(this.parentNode).attr("transform", "translate(" + x(d.key) + ")");
	                foreground
	                  .attr("d", path);
	                background
	                  .attr("d", path)
	                  .attr("visibility", null);
	
	                dispatch.dimensionsOrder(enabledDimensions);
	            }
	            function dimensionPosition(d) {
	                var v = dragging[d];
	                return v == null ? x(d) : v;
	            }
	        });
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:         {get: function(){return width;},           set: function(_){width= _;}},
	        height:        {get: function(){return height;},          set: function(_){height= _;}},
	        dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },
	        displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },
	        filters: { get: function () { return filters; }, set: function (_) { filters = _; } },
	        active: { get: function () { return active; }, set: function (_) { active = _; } },
	        lineTension:   {get: function(){return lineTension;},     set: function(_){lineTension = _;}},
	        undefinedValuesLabel : {get: function(){return undefinedValuesLabel;}, set: function(_){undefinedValuesLabel=_;}},
	        
	        // deprecated options
	        dimensions: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {
	            // deprecated after 1.8.1
	            nv.deprecated('dimensions', 'use dimensionData instead');
	            if (dimensionData.length === 0) {
	                _.forEach(function (k) { dimensionData.push({ key: k }) })
	            } else {
	                _.forEach(function (k, i) { dimensionData[i].key= k })
	            }
	        }},
	        dimensionNames: {get: function () { return dimensionData.map(function (d){return d.key}); }, set: function (_) {
	            // deprecated after 1.8.1
	            nv.deprecated('dimensionNames', 'use dimensionData instead');
	            dimensionNames = [];
	            if (dimensionData.length === 0) {
	                _.forEach(function (k) { dimensionData.push({ key: k }) })
	            } else {
	                _.forEach(function (k, i) { dimensionData[i].key = k })
	            }
	 
	        }},
	        dimensionFormats: {get: function () { return dimensionData.map(function (d) { return d.format }); }, set: function (_) {
	            // deprecated after 1.8.1
	            nv.deprecated('dimensionFormats', 'use dimensionData instead');
	            if (dimensionData.length === 0) {
	                _.forEach(function (f) { dimensionData.push({ format: f }) })
	            } else {
	                _.forEach(function (f, i) { dimensionData[i].format = f })
	            }
	
	        }},
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    =  _.top    !== undefined ? _.top    : margin.top;
	            margin.right  =  _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom =  _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   =  _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	    nv.utils.initOptions(chart);
	    return chart;
	};
	nv.models.parallelCoordinatesChart = function () {
	        "use strict";
	        //============================================================
	        // Public Variables with Default Settings
	        //------------------------------------------------------------
	
	        var parallelCoordinates = nv.models.parallelCoordinates()
	        var legend = nv.models.legend()
	        var tooltip = nv.models.tooltip();
	        var dimensionTooltip = nv.models.tooltip();
	
	        var margin = { top: 0, right: 0, bottom: 0, left: 0 }
	        , width = null
			, height = null
	        , showLegend = true
			, color = nv.utils.defaultColor()
	        , state = nv.utils.state()
	        , dimensionData = []
	        , displayBrush = true
	        , defaultState = null
	        , noData = null
	        , nanValue = "undefined"
	        , dispatch = d3.dispatch('dimensionsOrder', 'brushEnd', 'stateChange', 'changeState', 'renderEnd')
	        , controlWidth = function () { return showControls ? 180 : 0 }
	        ;
	
		    //============================================================
	
			//============================================================
	        // Private Variables
	        //------------------------------------------------------------
	
	        var renderWatch = nv.utils.renderWatch(dispatch);
	
	        var stateGetter = function(data) {
	            return function() {
	                return {
	                    active: data.map(function(d) { return !d.disabled })
	                };
	            }
	        };
	
	        var stateSetter = function(data) {
	            return function(state) {
	                if(state.active !== undefined) {
	                    data.forEach(function(series, i) {
	                        series.disabled = !state.active[i];
	                    });
	                }
	            }
	        };
	
	        tooltip.contentGenerator(function(data) {
	            var str = '<table><thead><tr><td class="legend-color-guide"><div style="background-color:' + data.color + '"></div></td><td><strong>' + data.key + '</strong></td></tr></thead>';
	            if(data.series.length !== 0)
	            {
	                str = str + '<tbody><tr><td height ="10px"></td></tr>';
	                data.series.forEach(function(d){
	                    str = str + '<tr><td class="legend-color-guide"><div style="background-color:' + d.color + '"></div></td><td class="key">' + d.key + '</td><td class="value">' + d.value + '</td></tr>';
	                });
	                str = str + '</tbody>';
	            }
	            str = str + '</table>';
	            return str;
	        });
	
	        //============================================================
	        // Chart function
	        //------------------------------------------------------------
	
	        function chart(selection) {
	            renderWatch.reset();
	            renderWatch.models(parallelCoordinates);
	
	            selection.each(function(data) {
	                var container = d3.select(this);
	                nv.utils.initSVG(container);
	
	                var that = this;
	
	                var availableWidth = nv.utils.availableWidth(width, container, margin),
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	
	                chart.update = function() { container.call(chart); };
	                chart.container = this;
	
	                state.setter(stateSetter(dimensionData), chart.update)
	                    .getter(stateGetter(dimensionData))
	                    .update();
	
	                //set state.disabled
	                state.disabled = dimensionData.map(function (d) { return !!d.disabled });
	
	                //Keep dimensions position in memory
	                dimensionData = dimensionData.map(function (d) {d.disabled = !!d.disabled; return d});
	                dimensionData.forEach(function (d, i) {
	                    d.originalPosition = isNaN(d.originalPosition) ? i : d.originalPosition;
	                    d.currentPosition = isNaN(d.currentPosition) ? i : d.currentPosition;
	                });
	
	               if (!defaultState) {
	                    var key;
	                    defaultState = {};
	                    for(key in state) {
	                        if(state[key] instanceof Array)
	                            defaultState[key] = state[key].slice(0);
	                        else
	                            defaultState[key] = state[key];
	                    }
	                }
	
	                // Display No Data message if there's nothing to show.
	                if(!data || !data.length) {
	                    nv.utils.noData(chart, container);
	                    return chart;
	                } else {
	                    container.selectAll('.nv-noData').remove();
	                }
	
	                //------------------------------------------------------------
	                // Setup containers and skeleton of chart
	
	                var wrap = container.selectAll('g.nv-wrap.nv-parallelCoordinatesChart').data([data]);
	                var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-parallelCoordinatesChart').append('g');
	
	                var g = wrap.select('g');
	
	                gEnter.append('g').attr('class', 'nv-parallelCoordinatesWrap');
	                gEnter.append('g').attr('class', 'nv-legendWrap');
	
	                g.select("rect")
	                    .attr("width", availableWidth)
	                    .attr("height", (availableHeight > 0) ? availableHeight : 0);
	
	                // Legend
	                if (!showLegend) {
	                    g.select('.nv-legendWrap').selectAll('*').remove();
	                } else {
	                    legend.width(availableWidth)
	                        .color(function (d) { return "rgb(188,190,192)"; });
	
	                    g.select('.nv-legendWrap')
	                        .datum(dimensionData.sort(function (a, b) { return a.originalPosition - b.originalPosition; }))
	                        .call(legend);
	
	                    if (legend.height() > margin.top) {
	                        margin.top = legend.height();
	                        availableHeight = nv.utils.availableHeight(height, container, margin);
	                    }
	                    wrap.select('.nv-legendWrap')
	                       .attr('transform', 'translate( 0 ,' + (-margin.top) + ')');
	                }
	                wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	                // Main Chart Component(s)
	                parallelCoordinates
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .dimensionData(dimensionData)
	                    .displayBrush(displayBrush);
	
			        var parallelCoordinatesWrap = g.select('.nv-parallelCoordinatesWrap ')
	                  .datum(data);
	
			        parallelCoordinatesWrap.transition().call(parallelCoordinates);
	
					//============================================================
	                // Event Handling/Dispatching (in chart's scope)
	                //------------------------------------------------------------
	                //Display reset brush button
			        parallelCoordinates.dispatch.on('brushEnd', function (active, hasActiveBrush) {
			            if (hasActiveBrush) {
			                displayBrush = true;
			                dispatch.brushEnd(active);
			            } else {
	
			                displayBrush = false;
			            }
			        });
	
			        legend.dispatch.on('stateChange', function(newState) {
			            for(var key in newState) {
			                state[key] = newState[key];
			            }
			            dispatch.stateChange(state);
			            chart.update();
			        });
	
	                //Update dimensions order and display reset sorting button
			        parallelCoordinates.dispatch.on('dimensionsOrder', function (e) {
			            dimensionData.sort(function (a, b) { return a.currentPosition - b.currentPosition; });
			            var isSorted = false;
			            dimensionData.forEach(function (d, i) {
			                d.currentPosition = i;
			                if (d.currentPosition !== d.originalPosition)
			                    isSorted = true;
			            });
			            dispatch.dimensionsOrder(dimensionData, isSorted);
			        });
	
					// Update chart from a state object passed to event handler
	                dispatch.on('changeState', function (e) {
	
	                    if (typeof e.disabled !== 'undefined') {
	                        dimensionData.forEach(function (series, i) {
	                            series.disabled = e.disabled[i];
	                        });
	                        state.disabled = e.disabled;
	                    }
	                    chart.update();
	                });
	            });
	
	            renderWatch.renderEnd('parraleleCoordinateChart immediate');
	            return chart;
	        }
	
			//============================================================
	        // Event Handling/Dispatching (out of chart's scope)
	        //------------------------------------------------------------
	
	        parallelCoordinates.dispatch.on('elementMouseover.tooltip', function (evt) {
	            var tp = {
	                key: evt.label,
	                color: evt.color,
	                series: []
	             }
	            if(evt.values){
	                Object.keys(evt.values).forEach(function (d) {
	                    var dim = evt.dimensions.filter(function (dd) {return dd.key === d;})[0];
	                    if(dim){
	                        var v;
	                        if (isNaN(evt.values[d]) || isNaN(parseFloat(evt.values[d]))) {
	                            v = nanValue;
	                        } else {
	                            v = dim.format(evt.values[d]);
	                        }
	                        tp.series.push({ idx: dim.currentPosition, key: d, value: v, color: dim.color });
	                    }
	                });
	                tp.series.sort(function(a,b) {return a.idx - b.idx});
	             }
	            tooltip.data(tp).hidden(false);
	        });
	
	        parallelCoordinates.dispatch.on('elementMouseout.tooltip', function(evt) {
	            tooltip.hidden(true)
	        });
	
	        parallelCoordinates.dispatch.on('elementMousemove.tooltip', function () {
	            tooltip();
	        });
			 //============================================================
	        // Expose Public Variables
	        //------------------------------------------------------------
	
			// expose chart's sub-components
	        chart.dispatch = dispatch;
	        chart.parallelCoordinates = parallelCoordinates;
	        chart.legend = legend;
	        chart.tooltip = tooltip;
	        chart.options = nv.utils.optionsFunc.bind(chart);
	
	        chart._options = Object.create({}, {
	            // simple options, just get/set the necessary values
	            width: { get: function () { return width; }, set: function (_) { width = _; } },
	            height: { get: function () { return height; }, set: function (_) { height = _; } },
	            showLegend: { get: function () { return showLegend; }, set: function (_) { showLegend = _; } },
	            defaultState: { get: function () { return defaultState; }, set: function (_) { defaultState = _; } },
	            dimensionData: { get: function () { return dimensionData; }, set: function (_) { dimensionData = _; } },
	            displayBrush: { get: function () { return displayBrush; }, set: function (_) { displayBrush = _; } },
	            noData: { get: function () { return noData; }, set: function (_) { noData = _; } },
	            nanValue: { get: function () { return nanValue; }, set: function (_) { nanValue = _; } },
	
	            // options that require extra logic in the setter
	            margin: {
	                get: function () { return margin; },
	                set: function (_) {
	                    margin.top = _.top !== undefined ? _.top : margin.top;
	                    margin.right = _.right !== undefined ? _.right : margin.right;
	                    margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	                    margin.left = _.left !== undefined ? _.left : margin.left;
	                }
	            },
	            color: {get: function(){return color;}, set: function(_){
	                    color = nv.utils.getColor(_);
	                    legend.color(color);
	                    parallelCoordinates.color(color);
	                }}
	        });
	
	        nv.utils.inheritOptions(chart, parallelCoordinates);
	        nv.utils.initOptions(chart);
	
	        return chart;
	    };
	nv.models.pie = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 500
	        , height = 500
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , color = nv.utils.defaultColor()
	        , valueFormat = d3.format(',.2f')
	        , showLabels = true
	        , labelsOutside = false
	        , labelType = "key"
	        , labelThreshold = .02 //if slice percentage is under this, don't show label
	        , donut = false
	        , title = false
	        , growOnHover = true
	        , titleOffset = 0
	        , labelSunbeamLayout = false
	        , startAngle = false
	        , padAngle = false
	        , endAngle = false
	        , cornerRadius = 0
	        , donutRatio = 0.5
	        , duration = 250
	        , arcsRadius = []
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'elementMousemove', 'renderEnd')
	        ;
	
	    var arcs = [];
	    var arcsOver = [];
	
	    //============================================================
	    // chart function
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right
	                , availableHeight = height - margin.top - margin.bottom
	                , radius = Math.min(availableWidth, availableHeight) / 2
	                , arcsRadiusOuter = []
	                , arcsRadiusInner = []
	                ;
	
	            container = d3.select(this)
	            if (arcsRadius.length === 0) {
	                var outer = radius - radius / 5;
	                var inner = donutRatio * radius;
	                for (var i = 0; i < data[0].length; i++) {
	                    arcsRadiusOuter.push(outer);
	                    arcsRadiusInner.push(inner);
	                }
	            } else {
	                if(growOnHover){
	                    arcsRadiusOuter = arcsRadius.map(function (d) { return (d.outer - d.outer / 5) * radius; });
	                    arcsRadiusInner = arcsRadius.map(function (d) { return (d.inner - d.inner / 5) * radius; });
	                    donutRatio = d3.min(arcsRadius.map(function (d) { return (d.inner - d.inner / 5); }));
	                } else {
	                    arcsRadiusOuter = arcsRadius.map(function (d) { return d.outer * radius; });
	                    arcsRadiusInner = arcsRadius.map(function (d) { return d.inner * radius; });
	                    donutRatio = d3.min(arcsRadius.map(function (d) { return d.inner; }));
	                }
	            }
	            nv.utils.initSVG(container);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('.nv-wrap.nv-pie').data(data);
	            var wrapEnter = wrap.enter().append('g').attr('class','nvd3 nv-wrap nv-pie nv-chart-' + id);
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	            var g_pie = gEnter.append('g').attr('class', 'nv-pie');
	            gEnter.append('g').attr('class', 'nv-pieLabels');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	            g.select('.nv-pie').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
	            g.select('.nv-pieLabels').attr('transform', 'translate(' + availableWidth / 2 + ',' + availableHeight / 2 + ')');
	
	            //
	            container.on('click', function(d,i) {
	                dispatch.chartClick({
	                    data: d,
	                    index: i,
	                    pos: d3.event,
	                    id: id
	                });
	            });
	
	            arcs = [];
	            arcsOver = [];
	            for (var i = 0; i < data[0].length; i++) {
	
	                var arc = d3.svg.arc().outerRadius(arcsRadiusOuter[i]);
	                var arcOver = d3.svg.arc().outerRadius(arcsRadiusOuter[i] + 5);
	
	                if (startAngle !== false) {
	                    arc.startAngle(startAngle);
	                    arcOver.startAngle(startAngle);
	                }
	                if (endAngle !== false) {
	                    arc.endAngle(endAngle);
	                    arcOver.endAngle(endAngle);
	                }
	                if (donut) {
	                    arc.innerRadius(arcsRadiusInner[i]);
	                    arcOver.innerRadius(arcsRadiusInner[i]);
	                }
	
	                if (arc.cornerRadius && cornerRadius) {
	                    arc.cornerRadius(cornerRadius);
	                    arcOver.cornerRadius(cornerRadius);
	                }
	
	                arcs.push(arc);
	                arcsOver.push(arcOver);
	            }
	
	            // Setup the Pie chart and choose the data element
	            var pie = d3.layout.pie()
	                .sort(null)
	                .value(function(d) { return d.disabled ? 0 : getY(d) });
	
	            // padAngle added in d3 3.5
	            if (pie.padAngle && padAngle) {
	                pie.padAngle(padAngle);
	            }
	
	            // if title is specified and donut, put it in the middle
	            if (donut && title) {
	                g_pie.append("text").attr('class', 'nv-pie-title');
	
	                wrap.select('.nv-pie-title')
	                    .style("text-anchor", "middle")
	                    .text(function (d) {
	                        return title;
	                    })
	                    .style("font-size", (Math.min(availableWidth, availableHeight)) * donutRatio * 2 / (title.length + 2) + "px")
	                    .attr("dy", "0.35em") // trick to vertically center text
	                    .attr('transform', function(d, i) {
	                        return 'translate(0, '+ titleOffset + ')';
	                    });
	            }
	
	            var slices = wrap.select('.nv-pie').selectAll('.nv-slice').data(pie);
	            var pieLabels = wrap.select('.nv-pieLabels').selectAll('.nv-label').data(pie);
	
	            slices.exit().remove();
	            pieLabels.exit().remove();
	
	            var ae = slices.enter().append('g');
	            ae.attr('class', 'nv-slice');
	            ae.on('mouseover', function(d, i) {
	                d3.select(this).classed('hover', true);
	                if (growOnHover) {
	                    d3.select(this).select("path").transition()
	                        .duration(70)
	                        .attr("d", arcsOver[i]);
	                }
	                dispatch.elementMouseover({
	                    data: d.data,
	                    index: i,
	                    color: d3.select(this).style("fill"),
	                    percent: (d.endAngle - d.startAngle) / (2 * Math.PI)
	                });
	            });
	            ae.on('mouseout', function(d, i) {
	                d3.select(this).classed('hover', false);
	                if (growOnHover) {
	                    d3.select(this).select("path").transition()
	                        .duration(50)
	                        .attr("d", arcs[i]);
	                }
	                dispatch.elementMouseout({data: d.data, index: i});
	            });
	            ae.on('mousemove', function(d, i) {
	                dispatch.elementMousemove({data: d.data, index: i});
	            });
	            ae.on('click', function(d, i) {
	                var element = this;
	                dispatch.elementClick({
	                    data: d.data,
	                    index: i,
	                    color: d3.select(this).style("fill"),
	                    event: d3.event,
	                    element: element
	                });
	            });
	            ae.on('dblclick', function(d, i) {
	                dispatch.elementDblClick({
	                    data: d.data,
	                    index: i,
	                    color: d3.select(this).style("fill")
	                });
	            });
	
	            slices.attr('fill', function(d,i) { return color(d.data, i); });
	            slices.attr('stroke', function(d,i) { return color(d.data, i); });
	
	            var paths = ae.append('path').each(function(d) {
	                this._current = d;
	            });
	
	            slices.select('path')
	                .transition()
	                .duration(duration)
	                .attr('d', function (d, i) { return arcs[i](d); })
	                .attrTween('d', arcTween);
	
	            if (showLabels) {
	                // This does the normal label
	                var labelsArc = [];
	                for (var i = 0; i < data[0].length; i++) {
	                    labelsArc.push(arcs[i]);
	
	                    if (labelsOutside) {
	                        if (donut) {
	                            labelsArc[i] = d3.svg.arc().outerRadius(arcs[i].outerRadius());
	                            if (startAngle !== false) labelsArc[i].startAngle(startAngle);
	                            if (endAngle !== false) labelsArc[i].endAngle(endAngle);
	                        }
	                    } else if (!donut) {
	                            labelsArc[i].innerRadius(0);
	                    }
	                }
	
	                pieLabels.enter().append("g").classed("nv-label",true).each(function(d,i) {
	                    var group = d3.select(this);
	
	                    group.attr('transform', function (d, i) {
	                        if (labelSunbeamLayout) {
	                            d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate
	                            d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate
	                            var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
	                            if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
	                                rotateAngle -= 90;
	                            } else {
	                                rotateAngle += 90;
	                            }
	                            return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
	                        } else {
	                            d.outerRadius = radius + 10; // Set Outer Coordinate
	                            d.innerRadius = radius + 15; // Set Inner Coordinate
	                            return 'translate(' + labelsArc[i].centroid(d) + ')'
	                        }
	                    });
	
	                    group.append('rect')
	                        .style('stroke', '#fff')
	                        .style('fill', '#fff')
	                        .attr("rx", 3)
	                        .attr("ry", 3);
	
	                    group.append('text')
	                        .style('text-anchor', labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle') //center the text on it's origin or begin/end if orthogonal aligned
	                        .style('fill', '#000')
	                });
	
	                var labelLocationHash = {};
	                var avgHeight = 14;
	                var avgWidth = 140;
	                var createHashKey = function(coordinates) {
	                    return Math.floor(coordinates[0]/avgWidth) * avgWidth + ',' + Math.floor(coordinates[1]/avgHeight) * avgHeight;
	                };
	                var getSlicePercentage = function(d) {
	                    return (d.endAngle - d.startAngle) / (2 * Math.PI);
	                };
	
	                pieLabels.watchTransition(renderWatch, 'pie labels').attr('transform', function (d, i) {
	                    if (labelSunbeamLayout) {
	                        d.outerRadius = arcsRadiusOuter[i] + 10; // Set Outer Coordinate
	                        d.innerRadius = arcsRadiusOuter[i] + 15; // Set Inner Coordinate
	                        var rotateAngle = (d.startAngle + d.endAngle) / 2 * (180 / Math.PI);
	                        if ((d.startAngle + d.endAngle) / 2 < Math.PI) {
	                            rotateAngle -= 90;
	                        } else {
	                            rotateAngle += 90;
	                        }
	                        return 'translate(' + labelsArc[i].centroid(d) + ') rotate(' + rotateAngle + ')';
	                    } else {
	                        d.outerRadius = radius + 10; // Set Outer Coordinate
	                        d.innerRadius = radius + 15; // Set Inner Coordinate
	
	                        /*
	                        Overlapping pie labels are not good. What this attempts to do is, prevent overlapping.
	                        Each label location is hashed, and if a hash collision occurs, we assume an overlap.
	                        Adjust the label's y-position to remove the overlap.
	                        */
	                        var center = labelsArc[i].centroid(d);
	                        var percent = getSlicePercentage(d);
	                        if (d.value && percent >= labelThreshold) {
	                            var hashKey = createHashKey(center);
	                            if (labelLocationHash[hashKey]) {
	                                center[1] -= avgHeight;
	                            }
	                            labelLocationHash[createHashKey(center)] = true;
	                        }
	                        return 'translate(' + center + ')'
	                    }
	                });
	
	                pieLabels.select(".nv-label text")
	                    .style('text-anchor', function(d,i) {
	                        //center the text on it's origin or begin/end if orthogonal aligned
	                        return labelSunbeamLayout ? ((d.startAngle + d.endAngle) / 2 < Math.PI ? 'start' : 'end') : 'middle';
	                    })
	                    .text(function(d, i) {
	                        var percent = getSlicePercentage(d);
	                        var label = '';
	                        if (!d.value || percent < labelThreshold) return '';
	
	                        if(typeof labelType === 'function') {
	                            label = labelType(d, i, {
	                                'key': getX(d.data),
	                                'value': getY(d.data),
	                                'percent': valueFormat(percent)
	                            });
	                        } else {
	                            switch (labelType) {
	                                case 'key':
	                                    label = getX(d.data);
	                                    break;
	                                case 'value':
	                                    label = valueFormat(getY(d.data));
	                                    break;
	                                case 'percent':
	                                    label = d3.format('%')(percent);
	                                    break;
	                            }
	                        }
	                        return label;
	                    })
	                ;
	            }
	
	
	            // Computes the angle of an arc, converting from radians to degrees.
	            function angle(d) {
	                var a = (d.startAngle + d.endAngle) * 90 / Math.PI - 90;
	                return a > 90 ? a - 180 : a;
	            }
	
	            function arcTween(a, idx) {
	                a.endAngle = isNaN(a.endAngle) ? 0 : a.endAngle;
	                a.startAngle = isNaN(a.startAngle) ? 0 : a.startAngle;
	                if (!donut) a.innerRadius = 0;
	                var i = d3.interpolate(this._current, a);
	                this._current = i(0);
	                return function (t) {
	                    return arcs[idx](i(t));
	                };
	            }
	        });
	
	        renderWatch.renderEnd('pie immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        arcsRadius: { get: function () { return arcsRadius; }, set: function (_) { arcsRadius = _; } },
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},
	        title:      {get: function(){return title;}, set: function(_){title=_;}},
	        titleOffset:    {get: function(){return titleOffset;}, set: function(_){titleOffset=_;}},
	        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_;}},
	        valueFormat:    {get: function(){return valueFormat;}, set: function(_){valueFormat=_;}},
	        x:          {get: function(){return getX;}, set: function(_){getX=_;}},
	        id:         {get: function(){return id;}, set: function(_){id=_;}},
	        endAngle:   {get: function(){return endAngle;}, set: function(_){endAngle=_;}},
	        startAngle: {get: function(){return startAngle;}, set: function(_){startAngle=_;}},
	        padAngle:   {get: function(){return padAngle;}, set: function(_){padAngle=_;}},
	        cornerRadius: {get: function(){return cornerRadius;}, set: function(_){cornerRadius=_;}},
	        donutRatio:   {get: function(){return donutRatio;}, set: function(_){donutRatio=_;}},
	        labelsOutside: {get: function(){return labelsOutside;}, set: function(_){labelsOutside=_;}},
	        labelSunbeamLayout: {get: function(){return labelSunbeamLayout;}, set: function(_){labelSunbeamLayout=_;}},
	        donut:              {get: function(){return donut;}, set: function(_){donut=_;}},
	        growOnHover:        {get: function(){return growOnHover;}, set: function(_){growOnHover=_;}},
	
	        // depreciated after 1.7.1
	        pieLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){
	            labelsOutside=_;
	            nv.deprecated('pieLabelsOutside', 'use labelsOutside instead');
	        }},
	        // depreciated after 1.7.1
	        donutLabelsOutside: {get: function(){return labelsOutside;}, set: function(_){
	            labelsOutside=_;
	            nv.deprecated('donutLabelsOutside', 'use labelsOutside instead');
	        }},
	        // deprecated after 1.7.1
	        labelFormat: {get: function(){ return valueFormat;}, set: function(_) {
	            valueFormat=_;
	            nv.deprecated('labelFormat','use valueFormat instead');
	        }},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = typeof _.top    != 'undefined' ? _.top    : margin.top;
	            margin.right  = typeof _.right  != 'undefined' ? _.right  : margin.right;
	            margin.bottom = typeof _.bottom != 'undefined' ? _.bottom : margin.bottom;
	            margin.left   = typeof _.left   != 'undefined' ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }},
	        y: {get: function(){return getY;}, set: function(_){
	            getY=d3.functor(_);
	        }},
	        color: {get: function(){return color;}, set: function(_){
	            color=nv.utils.getColor(_);
	        }},
	        labelType:          {get: function(){return labelType;}, set: function(_){
	            labelType= _ || 'key';
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	nv.models.pieChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var pie = nv.models.pie();
	    var legend = nv.models.legend();
	    var tooltip = nv.models.tooltip();
	
	    var margin = {top: 30, right: 20, bottom: 20, left: 20}
	        , width = null
	        , height = null
	        , showTooltipPercent = false
	        , showLegend = true
	        , legendPosition = "top"
	        , color = nv.utils.defaultColor()
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , duration = 250
	        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
	        ;
	
	    tooltip
	        .duration(0)
	        .headerEnabled(false)
	        .valueFormatter(function(d, i) {
	            return pie.valueFormat()(d, i);
	        });
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled })
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.active !== undefined) {
	                data.forEach(function (series, i) {
	                    series.disabled = !state.active[i];
	                });
	            }
	        }
	    };
	
	    //============================================================
	    // Chart function
	    //------------------------------------------------------------
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(pie);
	
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            var that = this;
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() { container.transition().call(chart); };
	            chart.container = this;
	
	            state.setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            //set state.disabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length) {
	                nv.utils.noData(chart, container);
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-pieChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-pieChart').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-pieWrap');
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                if (legendPosition === "top") {
	                    legend.width( availableWidth ).key(pie.x());
	
	                    wrap.select('.nv-legendWrap')
	                        .datum(data)
	                        .call(legend);
	
	                    if (legend.height() > margin.top) {
	                        margin.top = legend.height();
	                        availableHeight = nv.utils.availableHeight(height, container, margin);
	                    }
	
	                    wrap.select('.nv-legendWrap')
	                        .attr('transform', 'translate(0,' + (-margin.top) +')');
	                } else if (legendPosition === "right") {
	                    var legendWidth = nv.models.legend().width();
	                    if (availableWidth / 2 < legendWidth) {
	                        legendWidth = (availableWidth / 2)
	                    }
	                    legend.height(availableHeight).key(pie.x());
	                    legend.width(legendWidth);
	                    availableWidth -= legend.width();
	
	                    wrap.select('.nv-legendWrap')
	                        .datum(data)
	                        .call(legend)
	                        .attr('transform', 'translate(' + (availableWidth) +',0)');
	                }
	            }
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Main Chart Component(s)
	            pie.width(availableWidth).height(availableHeight);
	            var pieWrap = g.select('.nv-pieWrap').datum([data]);
	            d3.transition(pieWrap).call(pie);
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState) {
	                    state[key] = newState[key];
	                }
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	                    state.disabled = e.disabled;
	                }
	                chart.update();
	            });
	        });
	
	        renderWatch.renderEnd('pieChart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    pie.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt['series'] = {
	            key: chart.x()(evt.data),
	            value: chart.y()(evt.data),
	            color: evt.color,
	            percent: evt.percent
	        };
	        if (!showTooltipPercent) {
	            delete evt.percent;
	            delete evt.series.percent;
	        }
	        tooltip.data(evt).hidden(false);
	    });
	
	    pie.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    pie.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.legend = legend;
	    chart.dispatch = dispatch;
	    chart.pie = pie;
	    chart.tooltip = tooltip;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    // use Object get/set functionality to map between vars and chart functions
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:              {get: function(){return width;},                set: function(_){width=_;}},
	        height:             {get: function(){return height;},               set: function(_){height=_;}},
	        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},
	        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},
	        showLegend:         {get: function(){return showLegend;},           set: function(_){showLegend=_;}},
	        legendPosition:     {get: function(){return legendPosition;},       set: function(_){legendPosition=_;}},
	        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},
	
	        // options that require extra logic in the setter
	        color: {get: function(){return color;}, set: function(_){
	            color = _;
	            legend.color(color);
	            pie.color(color);
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            pie.duration(duration);
	        }},
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }}
	    });
	    nv.utils.inheritOptions(chart, pie);
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	nv.models.scatter = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin       = {top: 0, right: 0, bottom: 0, left: 0}
	        , width        = null
	        , height       = null
	        , color        = nv.utils.defaultColor() // chooses color
	        , id           = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't select one
	        , container    = null
	        , x            = d3.scale.linear()
	        , y            = d3.scale.linear()
	        , z            = d3.scale.linear() //linear because d3.svg.shape.size is treated as area
	        , getX         = function(d) { return d.x } // accessor to get the x value
	        , getY         = function(d) { return d.y } // accessor to get the y value
	        , getSize      = function(d) { return d.size || 1} // accessor to get the point size
	        , getShape     = function(d) { return d.shape || 'circle' } // accessor to get point shape
	        , forceX       = [] // List of numbers to Force into the X scale (ie. 0, or a max / min, etc.)
	        , forceY       = [] // List of numbers to Force into the Y scale
	        , forceSize    = [] // List of numbers to Force into the Size scale
	        , interactive  = true // If true, plots a voronoi overlay for advanced point intersection
	        , pointActive  = function(d) { return !d.notActive } // any points that return false will be filtered out
	        , padData      = false // If true, adds half a data points width to front and back, for lining up a line chart with a bar chart
	        , padDataOuter = .1 //outerPadding to imitate ordinal scale outer padding
	        , clipEdge     = false // if true, masks points within x and y scale
	        , clipVoronoi  = true // if true, masks each point with a circle... can turn off to slightly increase performance
	        , showVoronoi  = false // display the voronoi areas
	        , clipRadius   = function() { return 25 } // function to get the radius for voronoi point clips
	        , xDomain      = null // Override x domain (skips the calculation from data)
	        , yDomain      = null // Override y domain
	        , xRange       = null // Override x range
	        , yRange       = null // Override y range
	        , sizeDomain   = null // Override point size domain
	        , sizeRange    = null
	        , singlePoint  = false
	        , dispatch     = d3.dispatch('elementClick', 'elementDblClick', 'elementMouseover', 'elementMouseout', 'renderEnd')
	        , useVoronoi   = true
	        , duration     = 250
	        , interactiveUpdateDelay = 300
	        , showLabels    = false 
	        ;
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0, z0 // used to store previous scales
	        , timeoutID
	        , needsUpdate = false // Flag for when the points are visually updating, but the interactive layer is behind, to disable tooltips
	        , renderWatch = nv.utils.renderWatch(dispatch, duration)
	        , _sizeRange_def = [16, 256]
	        , _caches
	        ;
	
	    function getCache(d) {
	        var cache, i;
	        cache = _caches = _caches || {};
	        i = d[0].series;
	        cache = cache[i] = cache[i] || {};
	        i = d[1];
	        cache = cache[i] = cache[i] || {};
	        return cache;
	    }
	
	    function getDiffs(d) {
	        var i, key,
	            point = d[0],
	            cache = getCache(d),
	            diffs = false;
	        for (i = 1; i < arguments.length; i ++) {
	            key = arguments[i];
	            if (cache[key] !== point[key] || !cache.hasOwnProperty(key)) {
	                cache[key] = point[key];
	                diffs = true;
	            }
	        }
	        return diffs;
	    }
	
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            container = d3.select(this);
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            nv.utils.initSVG(container);
	
	            //add series index to each data point for reference
	            data.forEach(function(series, i) {
	                series.values.forEach(function(point) {
	                    point.series = i;
	                });
	            });
	
	            // Setup Scales
	            var logScale = chart.yScale().name === d3.scale.log().name ? true : false; 
	            // remap and flatten the data for use in calculating the scales' domains
	            var seriesData = (xDomain && yDomain && sizeDomain) ? [] : // if we know xDomain and yDomain and sizeDomain, no need to calculate.... if Size is constant remember to set sizeDomain to speed up performance
	                d3.merge(
	                    data.map(function(d) {
	                        return d.values.map(function(d,i) {
	                            return { x: getX(d,i), y: getY(d,i), size: getSize(d,i) }
	                        })
	                    })
	                );
	
	            x   .domain(xDomain || d3.extent(seriesData.map(function(d) { return d.x; }).concat(forceX)))
	
	            if (padData && data[0])
	                x.range(xRange || [(availableWidth * padDataOuter +  availableWidth) / (2 *data[0].values.length), availableWidth - availableWidth * (1 + padDataOuter) / (2 * data[0].values.length)  ]);
	            //x.range([availableWidth * .5 / data[0].values.length, availableWidth * (data[0].values.length - .5)  / data[0].values.length ]);
	            else
	                x.range(xRange || [0, availableWidth]);
	
	             if (logScale) {
	                    var min = d3.min(seriesData.map(function(d) { if (d.y !== 0) return d.y; }));
	                    y.clamp(true)
	                        .domain(yDomain || d3.extent(seriesData.map(function(d) {
	                            if (d.y !== 0) return d.y;
	                            else return min * 0.1;
	                        }).concat(forceY)))
	                        .range(yRange || [availableHeight, 0]);
	                } else {
	                        y.domain(yDomain || d3.extent(seriesData.map(function (d) { return d.y;}).concat(forceY)))
	                        .range(yRange || [availableHeight, 0]);
	                }
	
	            z   .domain(sizeDomain || d3.extent(seriesData.map(function(d) { return d.size }).concat(forceSize)))
	                .range(sizeRange || _sizeRange_def);
	
	            // If scale's domain don't have a range, slightly adjust to make one... so a chart can show a single data point
	            singlePoint = x.domain()[0] === x.domain()[1] || y.domain()[0] === y.domain()[1];
	
	            if (x.domain()[0] === x.domain()[1])
	                x.domain()[0] ?
	                    x.domain([x.domain()[0] - x.domain()[0] * 0.01, x.domain()[1] + x.domain()[1] * 0.01])
	                    : x.domain([-1,1]);
	
	            if (y.domain()[0] === y.domain()[1])
	                y.domain()[0] ?
	                    y.domain([y.domain()[0] - y.domain()[0] * 0.01, y.domain()[1] + y.domain()[1] * 0.01])
	                    : y.domain([-1,1]);
	
	            if ( isNaN(x.domain()[0])) {
	                x.domain([-1,1]);
	            }
	
	            if ( isNaN(y.domain()[0])) {
	                y.domain([-1,1]);
	            }
	
	            x0 = x0 || x;
	            y0 = y0 || y;
	            z0 = z0 || z;
	
	            var scaleDiff = x(1) !== x0(1) || y(1) !== y0(1) || z(1) !== z0(1);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-scatter').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatter nv-chart-' + id);
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            wrap.classed('nv-single-point', singlePoint);
	            gEnter.append('g').attr('class', 'nv-groups');
	            gEnter.append('g').attr('class', 'nv-point-paths');
	            wrapEnter.append('g').attr('class', 'nv-point-clips');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-edge-clip-' + id)
	                .append('rect');
	
	            wrap.select('#nv-edge-clip-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', (availableHeight > 0) ? availableHeight : 0);
	
	            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
	
	            function updateInteractiveLayer() {
	                // Always clear needs-update flag regardless of whether or not
	                // we will actually do anything (avoids needless invocations).
	                needsUpdate = false;
	
	                if (!interactive) return false;
	
	                // inject series and point index for reference into voronoi
	                if (useVoronoi === true) {
	                    var vertices = d3.merge(data.map(function(group, groupIndex) {
	                            return group.values
	                                .map(function(point, pointIndex) {
	                                    // *Adding noise to make duplicates very unlikely
	                                    // *Injecting series and point index for reference
	                                    /* *Adding a 'jitter' to the points, because there's an issue in d3.geom.voronoi.
	                                     */
	                                    var pX = getX(point,pointIndex);
	                                    var pY = getY(point,pointIndex);
	
	                                    return [nv.utils.NaNtoZero(x(pX))+ Math.random() * 1e-4,
	                                            nv.utils.NaNtoZero(y(pY))+ Math.random() * 1e-4,
	                                        groupIndex,
	                                        pointIndex, point]; //temp hack to add noise until I think of a better way so there are no duplicates
	                                })
	                                .filter(function(pointArray, pointIndex) {
	                                    return pointActive(pointArray[4], pointIndex); // Issue #237.. move filter to after map, so pointIndex is correct!
	                                })
	                        })
	                    );
	
	                    if (vertices.length == 0) return false;  // No active points, we're done
	                    if (vertices.length < 3) {
	                        // Issue #283 - Adding 2 dummy points to the voronoi b/c voronoi requires min 3 points to work
	                        vertices.push([x.range()[0] - 20, y.range()[0] - 20, null, null]);
	                        vertices.push([x.range()[1] + 20, y.range()[1] + 20, null, null]);
	                        vertices.push([x.range()[0] - 20, y.range()[0] + 20, null, null]);
	                        vertices.push([x.range()[1] + 20, y.range()[1] - 20, null, null]);
	                    }
	
	                    // keep voronoi sections from going more than 10 outside of graph
	                    // to avoid overlap with other things like legend etc
	                    var bounds = d3.geom.polygon([
	                        [-10,-10],
	                        [-10,height + 10],
	                        [width + 10,height + 10],
	                        [width + 10,-10]
	                    ]);
	
	                    var voronoi = d3.geom.voronoi(vertices).map(function(d, i) {
	                        return {
	                            'data': bounds.clip(d),
	                            'series': vertices[i][2],
	                            'point': vertices[i][3]
	                        }
	                    });
	
	                    // nuke all voronoi paths on reload and recreate them
	                    wrap.select('.nv-point-paths').selectAll('path').remove();
	                    var pointPaths = wrap.select('.nv-point-paths').selectAll('path').data(voronoi);
	                    var vPointPaths = pointPaths
	                        .enter().append("svg:path")
	                        .attr("d", function(d) {
	                            if (!d || !d.data || d.data.length === 0)
	                                return 'M 0 0';
	                            else
	                                return "M" + d.data.join(",") + "Z";
	                        })
	                        .attr("id", function(d,i) {
	                            return "nv-path-"+i; })
	                        .attr("clip-path", function(d,i) { return "url(#nv-clip-"+id+"-"+i+")"; })
	                        ;
	
	                    // good for debugging point hover issues
	                    if (showVoronoi) {
	                        vPointPaths.style("fill", d3.rgb(230, 230, 230))
	                            .style('fill-opacity', 0.4)
	                            .style('stroke-opacity', 1)
	                            .style("stroke", d3.rgb(200,200,200));
	                    }
	
	                    if (clipVoronoi) {
	                        // voronoi sections are already set to clip,
	                        // just create the circles with the IDs they expect
	                        wrap.select('.nv-point-clips').selectAll('*').remove(); // must do * since it has sub-dom
	                        var pointClips = wrap.select('.nv-point-clips').selectAll('clipPath').data(vertices);
	                        var vPointClips = pointClips
	                            .enter().append("svg:clipPath")
	                            .attr("id", function(d, i) { return "nv-clip-"+id+"-"+i;})
	                            .append("svg:circle")
	                            .attr('cx', function(d) { return d[0]; })
	                            .attr('cy', function(d) { return d[1]; })
	                            .attr('r', clipRadius);
	                    }
	
	                    var mouseEventCallback = function(d, mDispatch) {
	                        if (needsUpdate) return 0;
	                        var series = data[d.series];
	                        if (series === undefined) return;
	                        var point  = series.values[d.point];
	                        point['color'] = color(series, d.series);
	
	                        // standardize attributes for tooltip.
	                        point['x'] = getX(point);
	                        point['y'] = getY(point);
	
	                        // can't just get box of event node since it's actually a voronoi polygon
	                        var box = container.node().getBoundingClientRect();
	                        var scrollTop  = window.pageYOffset || document.documentElement.scrollTop;
	                        var scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;
	
	                        var pos = {
	                            left: x(getX(point, d.point)) + box.left + scrollLeft + margin.left + 10,
	                            top: y(getY(point, d.point)) + box.top + scrollTop + margin.top + 10
	                        };
	
	                        mDispatch({
	                            point: point,
	                            series: series,
	                            pos: pos,
	                            relativePos: [x(getX(point, d.point)) + margin.left, y(getY(point, d.point)) + margin.top],
	                            seriesIndex: d.series,
	                            pointIndex: d.point
	                        });
	                    };
	
	                    pointPaths
	                        .on('click', function(d) {
	                            mouseEventCallback(d, dispatch.elementClick);
	                        })
	                        .on('dblclick', function(d) {
	                            mouseEventCallback(d, dispatch.elementDblClick);
	                        })
	                        .on('mouseover', function(d) {
	                            mouseEventCallback(d, dispatch.elementMouseover);
	                        })
	                        .on('mouseout', function(d, i) {
	                            mouseEventCallback(d, dispatch.elementMouseout);
	                        });
	
	                } else {
	                    // add event handlers to points instead voronoi paths
	                    wrap.select('.nv-groups').selectAll('.nv-group')
	                        .selectAll('.nv-point')
	                        //.data(dataWithPoints)
	                        //.style('pointer-events', 'auto') // recativate events, disabled by css
	                        .on('click', function(d,i) {
	                            //nv.log('test', d, i);
	                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
	                            var series = data[d.series],
	                                point  = series.values[i];
	                            var element = this;
	                            dispatch.elementClick({
	                                point: point,
	                                series: series,
	                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top], //TODO: make this pos base on the page
	                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
	                                seriesIndex: d.series,
	                                pointIndex: i,
	                                event: d3.event,
	                                element: element
	                            });
	                        })
	                        .on('dblclick', function(d,i) {
	                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
	                            var series = data[d.series],
	                                point  = series.values[i];
	
	                            dispatch.elementDblClick({
	                                point: point,
	                                series: series,
	                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
	                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
	                                seriesIndex: d.series,
	                                pointIndex: i
	                            });
	                        })
	                        .on('mouseover', function(d,i) {
	                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
	                            var series = data[d.series],
	                                point  = series.values[i];
	
	                            dispatch.elementMouseover({
	                                point: point,
	                                series: series,
	                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
	                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
	                                seriesIndex: d.series,
	                                pointIndex: i,
	                                color: color(d, i)
	                            });
	                        })
	                        .on('mouseout', function(d,i) {
	                            if (needsUpdate || !data[d.series]) return 0; //check if this is a dummy point
	                            var series = data[d.series],
	                                point  = series.values[i];
	
	                            dispatch.elementMouseout({
	                                point: point,
	                                series: series,
	                                pos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],//TODO: make this pos base on the page
	                                relativePos: [x(getX(point, i)) + margin.left, y(getY(point, i)) + margin.top],
	                                seriesIndex: d.series,
	                                pointIndex: i,
	                                color: color(d, i)
	                            });
	                        });
	                }
	            }
	
	            needsUpdate = true;
	            var groups = wrap.select('.nv-groups').selectAll('.nv-group')
	                .data(function(d) { return d }, function(d) { return d.key });
	            groups.enter().append('g')
	                .style('stroke-opacity', 1e-6)
	                .style('fill-opacity', 1e-6);
	            groups.exit()
	                .remove();
	            groups
	                .attr('class', function(d,i) {
	                    return (d.classed || '') + ' nv-group nv-series-' + i;
	                })
	                .classed('nv-noninteractive', !interactive)
	                .classed('hover', function(d) { return d.hover });
	            groups.watchTransition(renderWatch, 'scatter: groups')
	                .style('fill', function(d,i) { return color(d, i) })
	                .style('stroke', function(d,i) { return color(d, i) })
	                .style('stroke-opacity', 1)
	                .style('fill-opacity', .5);
	
	            // create the points, maintaining their IDs from the original data set
	            var points = groups.selectAll('path.nv-point')
	                .data(function(d) {
	                    return d.values.map(
	                        function (point, pointIndex) {
	                            return [point, pointIndex]
	                        }).filter(
	                            function(pointArray, pointIndex) {
	                                return pointActive(pointArray[0], pointIndex)
	                            })
	                    });
	            points.enter().append('path')
	                .attr('class', function (d) {
	                    return 'nv-point nv-point-' + d[1];
	                })
	                .style('fill', function (d) { return d.color })
	                .style('stroke', function (d) { return d.color })
	                .attr('transform', function(d) {
	                    return 'translate(' + nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')'
	                })
	                .attr('d',
	                    nv.utils.symbol()
	                    .type(function(d) { return getShape(d[0]); })
	                    .size(function(d) { return z(getSize(d[0],d[1])) })
	            );
	            points.exit().remove();
	            groups.exit().selectAll('path.nv-point')
	                .watchTransition(renderWatch, 'scatter exit')
	                .attr('transform', function(d) {
	                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'
	                })
	                .remove();
	            points.filter(function (d) { return scaleDiff || getDiffs(d, 'x', 'y'); })
	                .watchTransition(renderWatch, 'scatter points')
	                .attr('transform', function(d) {
	                    //nv.log(d, getX(d[0],d[1]), x(getX(d[0],d[1])));
	                    return 'translate(' + nv.utils.NaNtoZero(x(getX(d[0],d[1]))) + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'
	                });
	            points.filter(function (d) { return scaleDiff || getDiffs(d, 'shape', 'size'); })
	                .watchTransition(renderWatch, 'scatter points')
	                .attr('d',
	                    nv.utils.symbol()
	                    .type(function(d) { return getShape(d[0]); })
	                    .size(function(d) { return z(getSize(d[0],d[1])) })
	            );
	            
	            // add label a label to scatter chart 
	            if(showLabels)
	            {      
	                var titles =  groups.selectAll('.nv-label')
	                    .data(function(d) {
	                        return d.values.map(
	                            function (point, pointIndex) {
	                                return [point, pointIndex]
	                            }).filter(
	                                function(pointArray, pointIndex) {
	                                    return pointActive(pointArray[0], pointIndex)
	                                })
	                        });
	
	                titles.enter().append('text')
	                    .style('fill', function (d,i) { 
	                        return d.color })
	                    .style('stroke-opacity', 0)
	                    .style('fill-opacity', 1)
	                    .attr('transform', function(d) {
	                        var dx = nv.utils.NaNtoZero(x0(getX(d[0],d[1]))) + Math.sqrt(z(getSize(d[0],d[1]))/Math.PI) + 2;
	                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y0(getY(d[0],d[1]))) + ')';
	                    })
	                    .text(function(d,i){
	                        return d[0].label;});
	
	                titles.exit().remove();
	                groups.exit().selectAll('path.nv-label')
	                    .watchTransition(renderWatch, 'scatter exit')
	                    .attr('transform', function(d) {
	                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;
	                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')';
	                    })
	                    .remove();
	               titles.each(function(d) {
	                  d3.select(this)
	                    .classed('nv-label', true)
	                    .classed('nv-label-' + d[1], false)
	                    .classed('hover',false);
	                });
	                titles.watchTransition(renderWatch, 'scatter labels')
	                    .attr('transform', function(d) {
	                        var dx = nv.utils.NaNtoZero(x(getX(d[0],d[1])))+ Math.sqrt(z(getSize(d[0],d[1]))/Math.PI)+2;
	                        return 'translate(' + dx + ',' + nv.utils.NaNtoZero(y(getY(d[0],d[1]))) + ')'
	                    });
	            }
	
	            // Delay updating the invisible interactive layer for smoother animation
	            if( interactiveUpdateDelay )
	            {
	                clearTimeout(timeoutID); // stop repeat calls to updateInteractiveLayer
	                timeoutID = setTimeout(updateInteractiveLayer, interactiveUpdateDelay );
	            }
	            else
	            {
	                updateInteractiveLayer();
	            }
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	            z0 = z.copy();
	
	        });
	        renderWatch.renderEnd('scatter immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    // utility function calls provided by this chart
	    chart._calls = new function() {
	        this.clearHighlights = function () {
	            nv.dom.write(function() {
	                container.selectAll(".nv-point.hover").classed("hover", false);
	            });
	            return null;
	        };
	        this.highlightPoint = function (seriesIndex, pointIndex, isHoverOver) {
	            nv.dom.write(function() {
	                container.select('.nv-groups')
	                  .selectAll(".nv-series-" + seriesIndex)
	                  .selectAll(".nv-point-" + pointIndex)
	                  .classed("hover", isHoverOver);
	            });
	        };
	    };
	
	    // trigger calls from events too
	    dispatch.on('elementMouseover.point', function(d) {
	        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,true);
	    });
	
	    dispatch.on('elementMouseout.point', function(d) {
	        if (interactive) chart._calls.highlightPoint(d.seriesIndex,d.pointIndex,false);
	    });
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:        {get: function(){return width;}, set: function(_){width=_;}},
	        height:       {get: function(){return height;}, set: function(_){height=_;}},
	        xScale:       {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:       {get: function(){return y;}, set: function(_){y=_;}},
	        pointScale:   {get: function(){return z;}, set: function(_){z=_;}},
	        xDomain:      {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain:      {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        pointDomain:  {get: function(){return sizeDomain;}, set: function(_){sizeDomain=_;}},
	        xRange:       {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:       {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        pointRange:   {get: function(){return sizeRange;}, set: function(_){sizeRange=_;}},
	        forceX:       {get: function(){return forceX;}, set: function(_){forceX=_;}},
	        forceY:       {get: function(){return forceY;}, set: function(_){forceY=_;}},
	        forcePoint:   {get: function(){return forceSize;}, set: function(_){forceSize=_;}},
	        interactive:  {get: function(){return interactive;}, set: function(_){interactive=_;}},
	        pointActive:  {get: function(){return pointActive;}, set: function(_){pointActive=_;}},
	        padDataOuter: {get: function(){return padDataOuter;}, set: function(_){padDataOuter=_;}},
	        padData:      {get: function(){return padData;}, set: function(_){padData=_;}},
	        clipEdge:     {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        clipVoronoi:  {get: function(){return clipVoronoi;}, set: function(_){clipVoronoi=_;}},
	        clipRadius:   {get: function(){return clipRadius;}, set: function(_){clipRadius=_;}},
	        showVoronoi:   {get: function(){return showVoronoi;}, set: function(_){showVoronoi=_;}},
	        id:           {get: function(){return id;}, set: function(_){id=_;}},
	        interactiveUpdateDelay: {get:function(){return interactiveUpdateDelay;}, set: function(_){interactiveUpdateDelay=_;}},
	        showLabels: {get: function(){return showLabels;}, set: function(_){ showLabels = _;}},
	
	        // simple functor options
	        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},
	        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},
	        pointSize: {get: function(){return getSize;}, set: function(_){getSize = d3.functor(_);}},
	        pointShape: {get: function(){return getShape;}, set: function(_){getShape = d3.functor(_);}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	        }},
	        color: {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        useVoronoi: {get: function(){return useVoronoi;}, set: function(_){
	            useVoronoi = _;
	            if (useVoronoi === false) {
	                clipVoronoi = false;
	            }
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	nv.models.scatterChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var scatter      = nv.models.scatter()
	        , xAxis        = nv.models.axis()
	        , yAxis        = nv.models.axis()
	        , legend       = nv.models.legend()
	        , distX        = nv.models.distribution()
	        , distY        = nv.models.distribution()
	        , tooltip      = nv.models.tooltip()
	        ;
	
	    var margin       = {top: 30, right: 20, bottom: 50, left: 75}
	        , width        = null
	        , height       = null
	        , container    = null
	        , color        = nv.utils.defaultColor()
	        , x            = scatter.xScale()
	        , y            = scatter.yScale()
	        , showDistX    = false
	        , showDistY    = false
	        , showLegend   = true
	        , showXAxis    = true
	        , showYAxis    = true
	        , rightAlignYAxis = false
	        , state = nv.utils.state()
	        , defaultState = null
	        , dispatch = d3.dispatch('stateChange', 'changeState', 'renderEnd')
	        , noData       = null
	        , duration = 250
	        , showLabels    = false
	        ;
	
	    scatter.xScale(x).yScale(y);
	    xAxis.orient('bottom').tickPadding(10);
	    yAxis
	        .orient((rightAlignYAxis) ? 'right' : 'left')
	        .tickPadding(10)
	    ;
	    distX.axis('x');
	    distY.axis('y');
	    tooltip
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        })
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        });
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var x0, y0
	        , renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled })
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(scatter);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	        if (showDistX) renderWatch.models(distX);
	        if (showDistY) renderWatch.models(distY);
	
	        selection.each(function(data) {
	            var that = this;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() {
	                if (duration === 0)
	                    container.call(chart);
	                else
	                    container.transition().duration(duration).call(chart);
	            };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disableddisabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display noData message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container);
	                renderWatch.renderEnd('scatter immediate');
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            // Setup Scales
	            x = scatter.xScale();
	            y = scatter.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-scatterChart').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-scatterChart nv-chart-' + scatter.id());
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            // background for pointer events
	            gEnter.append('rect').attr('class', 'nvd3 nv-background').style("pointer-events","none");
	
	            gEnter.append('g').attr('class', 'nv-x nv-axis');
	            gEnter.append('g').attr('class', 'nv-y nv-axis');
	            gEnter.append('g').attr('class', 'nv-scatterWrap');
	            gEnter.append('g').attr('class', 'nv-regressionLinesWrap');
	            gEnter.append('g').attr('class', 'nv-distWrap');
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                var legendWidth = availableWidth;
	                legend.width(legendWidth);
	
	                wrap.select('.nv-legendWrap')
	                    .datum(data)
	                    .call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                wrap.select('.nv-legendWrap')
	                    .attr('transform', 'translate(0' + ',' + (-margin.top) +')');
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Main Chart Component(s)
	            scatter
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    d.color = d.color || color(d, i);
	                    return d.color;
	                }).filter(function(d,i) { return !data[i].disabled }))
	                .showLabels(showLabels);
	
	            wrap.select('.nv-scatterWrap')
	                .datum(data.filter(function(d) { return !d.disabled }))
	                .call(scatter);
	
	
	            wrap.select('.nv-regressionLinesWrap')
	                .attr('clip-path', 'url(#nv-edge-clip-' + scatter.id() + ')');
	
	            var regWrap = wrap.select('.nv-regressionLinesWrap').selectAll('.nv-regLines')
	                .data(function (d) {
	                    return d;
	                });
	
	            regWrap.enter().append('g').attr('class', 'nv-regLines');
	
	            var regLine = regWrap.selectAll('.nv-regLine')
	                .data(function (d) {
	                    return [d]
	                });
	
	            regLine.enter()
	                .append('line').attr('class', 'nv-regLine')
	                .style('stroke-opacity', 0);
	
	            // don't add lines unless we have slope and intercept to use
	            regLine.filter(function(d) {
	                return d.intercept && d.slope;
	            })
	                .watchTransition(renderWatch, 'scatterPlusLineChart: regline')
	                .attr('x1', x.range()[0])
	                .attr('x2', x.range()[1])
	                .attr('y1', function (d, i) {
	                    return y(x.domain()[0] * d.slope + d.intercept)
	                })
	                .attr('y2', function (d, i) {
	                    return y(x.domain()[1] * d.slope + d.intercept)
	                })
	                .style('stroke', function (d, i, j) {
	                    return color(d, j)
	                })
	                .style('stroke-opacity', function (d, i) {
	                    return (d.disabled || typeof d.slope === 'undefined' || typeof d.intercept === 'undefined') ? 0 : 1
	                });
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis
	                    .scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize( -availableHeight , 0);
	
	                g.select('.nv-x.nv-axis')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')')
	                    .call(xAxis);
	            }
	
	            if (showYAxis) {
	                yAxis
	                    .scale(y)
	                    ._ticks( nv.utils.calcTicksY(availableHeight/36, data) )
	                    .tickSize( -availableWidth, 0);
	
	                g.select('.nv-y.nv-axis')
	                    .call(yAxis);
	            }
	
	            // Setup Distribution
	            if (showDistX) {
	                distX
	                    .getData(scatter.x())
	                    .scale(x)
	                    .width(availableWidth)
	                    .color(data.map(function(d,i) {
	                        return d.color || color(d, i);
	                    }).filter(function(d,i) { return !data[i].disabled }));
	                gEnter.select('.nv-distWrap').append('g')
	                    .attr('class', 'nv-distributionX');
	                g.select('.nv-distributionX')
	                    .attr('transform', 'translate(0,' + y.range()[0] + ')')
	                    .datum(data.filter(function(d) { return !d.disabled }))
	                    .call(distX);
	            }
	
	            if (showDistY) {
	                distY
	                    .getData(scatter.y())
	                    .scale(y)
	                    .width(availableHeight)
	                    .color(data.map(function(d,i) {
	                        return d.color || color(d, i);
	                    }).filter(function(d,i) { return !data[i].disabled }));
	                gEnter.select('.nv-distWrap').append('g')
	                    .attr('class', 'nv-distributionY');
	                g.select('.nv-distributionY')
	                    .attr('transform', 'translate(' + (rightAlignYAxis ? availableWidth : -distY.size() ) + ',0)')
	                    .datum(data.filter(function(d) { return !d.disabled }))
	                    .call(distY);
	            }
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	                if (typeof e.disabled !== 'undefined') {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	                    state.disabled = e.disabled;
	                }
	                chart.update();
	            });
	
	            // mouseover needs availableHeight so we just keep scatter mouse events inside the chart block
	            scatter.dispatch.on('elementMouseout.tooltip', function(evt) {
	                tooltip.hidden(true);
	                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
	                    .attr('y1', 0);
	                container.select('.nv-chart-' + scatter.id() + ' .nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
	                    .attr('x2', distY.size());
	            });
	
	            scatter.dispatch.on('elementMouseover.tooltip', function(evt) {
	                container.select('.nv-series-' + evt.seriesIndex + ' .nv-distx-' + evt.pointIndex)
	                    .attr('y1', evt.relativePos[1] - availableHeight);
	                container.select('.nv-series-' + evt.seriesIndex + ' .nv-disty-' + evt.pointIndex)
	                    .attr('x2', evt.relativePos[0] + distX.size());
	                tooltip.data(evt).hidden(false);
	            });
	
	            //store old scales for use in transitions on update
	            x0 = x.copy();
	            y0 = y.copy();
	
	        });
	
	        renderWatch.renderEnd('scatter with line immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.scatter = scatter;
	    chart.legend = legend;
	    chart.xAxis = xAxis;
	    chart.yAxis = yAxis;
	    chart.distX = distX;
	    chart.distY = distY;
	    chart.tooltip = tooltip;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        container:  {get: function(){return container;}, set: function(_){container=_;}},
	        showDistX:  {get: function(){return showDistX;}, set: function(_){showDistX=_;}},
	        showDistY:  {get: function(){return showDistY;}, set: function(_){showDistY=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        showXAxis:  {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:  {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:     {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:     {get: function(){return noData;}, set: function(_){noData=_;}},
	        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},
	        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( (_) ? 'right' : 'left');
	        }},
	        color: {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	            distX.color(color);
	            distY.color(color);
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, scatter);
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	nv.models.sparkline = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 2, right: 0, bottom: 2, left: 0}
	        , width = 400
	        , height = 32
	        , container = null
	        , animate = true
	        , x = d3.scale.linear()
	        , y = d3.scale.linear()
	        , getX = function(d) { return d.x }
	        , getY = function(d) { return d.y }
	        , color = nv.utils.getColor(['#000'])
	        , xDomain
	        , yDomain
	        , xRange
	        , yRange
	        , showMinMaxPoints = true
	        , showCurrentPoint = true
	        , dispatch = d3.dispatch('renderEnd')
	        ;
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	    
	    function chart(selection) {
	        renderWatch.reset();
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup Scales
	            x   .domain(xDomain || d3.extent(data, getX ))
	                .range(xRange || [0, availableWidth]);
	
	            y   .domain(yDomain || d3.extent(data, getY ))
	                .range(yRange || [availableHeight, 0]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-sparkline').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparkline');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')
	
	            var paths = wrap.selectAll('path')
	                .data(function(d) { return [d] });
	            paths.enter().append('path');
	            paths.exit().remove();
	            paths
	                .style('stroke', function(d,i) { return d.color || color(d, i) })
	                .attr('d', d3.svg.line()
	                    .x(function(d,i) { return x(getX(d,i)) })
	                    .y(function(d,i) { return y(getY(d,i)) })
	            );
	
	            // TODO: Add CURRENT data point (Need Min, Mac, Current / Most recent)
	            var points = wrap.selectAll('circle.nv-point')
	                .data(function(data) {
	                    var yValues = data.map(function(d, i) { return getY(d,i); });
	                    function pointIndex(index) {
	                        if (index != -1) {
	                            var result = data[index];
	                            result.pointIndex = index;
	                            return result;
	                        } else {
	                            return null;
	                        }
	                    }
	                    var maxPoint = pointIndex(yValues.lastIndexOf(y.domain()[1])),
	                        minPoint = pointIndex(yValues.indexOf(y.domain()[0])),
	                        currentPoint = pointIndex(yValues.length - 1);
	                    return [(showMinMaxPoints ? minPoint : null), (showMinMaxPoints ? maxPoint : null), (showCurrentPoint ? currentPoint : null)].filter(function (d) {return d != null;});
	                });
	            points.enter().append('circle');
	            points.exit().remove();
	            points
	                .attr('cx', function(d,i) { return x(getX(d,d.pointIndex)) })
	                .attr('cy', function(d,i) { return y(getY(d,d.pointIndex)) })
	                .attr('r', 2)
	                .attr('class', function(d,i) {
	                    return getX(d, d.pointIndex) == x.domain()[1] ? 'nv-point nv-currentValue' :
	                            getY(d, d.pointIndex) == y.domain()[0] ? 'nv-point nv-minValue' : 'nv-point nv-maxValue'
	                });
	        });
	        
	        renderWatch.renderEnd('sparkline immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:            {get: function(){return width;}, set: function(_){width=_;}},
	        height:           {get: function(){return height;}, set: function(_){height=_;}},
	        xDomain:          {get: function(){return xDomain;}, set: function(_){xDomain=_;}},
	        yDomain:          {get: function(){return yDomain;}, set: function(_){yDomain=_;}},
	        xRange:           {get: function(){return xRange;}, set: function(_){xRange=_;}},
	        yRange:           {get: function(){return yRange;}, set: function(_){yRange=_;}},
	        xScale:           {get: function(){return x;}, set: function(_){x=_;}},
	        yScale:           {get: function(){return y;}, set: function(_){y=_;}},
	        animate:          {get: function(){return animate;}, set: function(_){animate=_;}},
	        showMinMaxPoints: {get: function(){return showMinMaxPoints;}, set: function(_){showMinMaxPoints=_;}},
	        showCurrentPoint: {get: function(){return showCurrentPoint;}, set: function(_){showCurrentPoint=_;}},
	
	        //functor options
	        x: {get: function(){return getX;}, set: function(_){getX=d3.functor(_);}},
	        y: {get: function(){return getY;}, set: function(_){getY=d3.functor(_);}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }}
	    });
	
	    chart.dispatch = dispatch;
	    nv.utils.initOptions(chart);
	    return chart;
	};
	
	nv.models.sparklinePlus = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var sparkline = nv.models.sparkline();
	
	    var margin = {top: 15, right: 100, bottom: 10, left: 50}
	        , width = null
	        , height = null
	        , x
	        , y
	        , index = []
	        , paused = false
	        , xTickFormat = d3.format(',r')
	        , yTickFormat = d3.format(',.2f')
	        , showLastValue = true
	        , alignValue = true
	        , rightAlignValue = false
	        , noData = null
	        , dispatch = d3.dispatch('renderEnd')
	        ;
	        
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(sparkline);
	        selection.each(function(data) {
	            var container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() { container.call(chart); };
	            chart.container = this;
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            var currentValue = sparkline.y()(data[data.length-1], data.length-1);
	
	            // Setup Scales
	            x = sparkline.xScale();
	            y = sparkline.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-sparklineplus').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-sparklineplus');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-sparklineWrap');
	            gEnter.append('g').attr('class', 'nv-valueWrap');
	            gEnter.append('g').attr('class', 'nv-hoverArea');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            // Main Chart Component(s)
	            var sparklineWrap = g.select('.nv-sparklineWrap');
	
	            sparkline.width(availableWidth).height(availableHeight);
	            sparklineWrap.call(sparkline);
	
	            if (showLastValue) {
	                var valueWrap = g.select('.nv-valueWrap');
	                var value = valueWrap.selectAll('.nv-currentValue')
	                    .data([currentValue]);
	
	                value.enter().append('text').attr('class', 'nv-currentValue')
	                    .attr('dx', rightAlignValue ? -8 : 8)
	                    .attr('dy', '.9em')
	                    .style('text-anchor', rightAlignValue ? 'end' : 'start');
	
	                value
	                    .attr('x', availableWidth + (rightAlignValue ? margin.right : 0))
	                    .attr('y', alignValue ? function (d) {
	                        return y(d)
	                    } : 0)
	                    .style('fill', sparkline.color()(data[data.length - 1], data.length - 1))
	                    .text(yTickFormat(currentValue));
	            }
	
	            gEnter.select('.nv-hoverArea').append('rect')
	                .on('mousemove', sparklineHover)
	                .on('click', function() { paused = !paused })
	                .on('mouseout', function() { index = []; updateValueLine(); });
	
	            g.select('.nv-hoverArea rect')
	                .attr('transform', function(d) { return 'translate(' + -margin.left + ',' + -margin.top + ')' })
	                .attr('width', availableWidth + margin.left + margin.right)
	                .attr('height', availableHeight + margin.top);
	
	            //index is currently global (within the chart), may or may not keep it that way
	            function updateValueLine() {
	                if (paused) return;
	
	                var hoverValue = g.selectAll('.nv-hoverValue').data(index);
	
	                var hoverEnter = hoverValue.enter()
	                    .append('g').attr('class', 'nv-hoverValue')
	                    .style('stroke-opacity', 0)
	                    .style('fill-opacity', 0);
	
	                hoverValue.exit()
	                    .transition().duration(250)
	                    .style('stroke-opacity', 0)
	                    .style('fill-opacity', 0)
	                    .remove();
	
	                hoverValue
	                    .attr('transform', function(d) { return 'translate(' + x(sparkline.x()(data[d],d)) + ',0)' })
	                    .transition().duration(250)
	                    .style('stroke-opacity', 1)
	                    .style('fill-opacity', 1);
	
	                if (!index.length) return;
	
	                hoverEnter.append('line')
	                    .attr('x1', 0)
	                    .attr('y1', -margin.top)
	                    .attr('x2', 0)
	                    .attr('y2', availableHeight);
	
	                hoverEnter.append('text').attr('class', 'nv-xValue')
	                    .attr('x', -6)
	                    .attr('y', -margin.top)
	                    .attr('text-anchor', 'end')
	                    .attr('dy', '.9em');
	
	                g.select('.nv-hoverValue .nv-xValue')
	                    .text(xTickFormat(sparkline.x()(data[index[0]], index[0])));
	
	                hoverEnter.append('text').attr('class', 'nv-yValue')
	                    .attr('x', 6)
	                    .attr('y', -margin.top)
	                    .attr('text-anchor', 'start')
	                    .attr('dy', '.9em');
	
	                g.select('.nv-hoverValue .nv-yValue')
	                    .text(yTickFormat(sparkline.y()(data[index[0]], index[0])));
	            }
	
	            function sparklineHover() {
	                if (paused) return;
	
	                var pos = d3.mouse(this)[0] - margin.left;
	
	                function getClosestIndex(data, x) {
	                    var distance = Math.abs(sparkline.x()(data[0], 0) - x);
	                    var closestIndex = 0;
	                    for (var i = 0; i < data.length; i++){
	                        if (Math.abs(sparkline.x()(data[i], i) - x) < distance) {
	                            distance = Math.abs(sparkline.x()(data[i], i) - x);
	                            closestIndex = i;
	                        }
	                    }
	                    return closestIndex;
	                }
	
	                index = [getClosestIndex(data, Math.round(x.invert(pos)))];
	                updateValueLine();
	            }
	
	        });
	        renderWatch.renderEnd('sparklinePlus immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.sparkline = sparkline;
	
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:           {get: function(){return width;}, set: function(_){width=_;}},
	        height:          {get: function(){return height;}, set: function(_){height=_;}},
	        xTickFormat:     {get: function(){return xTickFormat;}, set: function(_){xTickFormat=_;}},
	        yTickFormat:     {get: function(){return yTickFormat;}, set: function(_){yTickFormat=_;}},
	        showLastValue:   {get: function(){return showLastValue;}, set: function(_){showLastValue=_;}},
	        alignValue:      {get: function(){return alignValue;}, set: function(_){alignValue=_;}},
	        rightAlignValue: {get: function(){return rightAlignValue;}, set: function(_){rightAlignValue=_;}},
	        noData:          {get: function(){return noData;}, set: function(_){noData=_;}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, sparkline);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.stackedArea = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 960
	        , height = 500
	        , color = nv.utils.defaultColor() // a function that computes the color
	        , id = Math.floor(Math.random() * 100000) //Create semi-unique ID incase user doesn't selet one
	        , container = null
	        , getX = function(d) { return d.x } // accessor to get the x value from a data point
	        , getY = function(d) { return d.y } // accessor to get the y value from a data point
	        , defined = function(d,i) { return !isNaN(getY(d,i)) && getY(d,i) !== null } // allows a line to be not continuous when it is not defined
	        , style = 'stack'
	        , offset = 'zero'
	        , order = 'default'
	        , interpolate = 'linear'  // controls the line interpolation
	        , clipEdge = false // if true, masks lines within x and y scale
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , scatter = nv.models.scatter()
	        , duration = 250
	        , dispatch =  d3.dispatch('areaClick', 'areaMouseover', 'areaMouseout','renderEnd', 'elementClick', 'elementMouseover', 'elementMouseout')
	        ;
	
	    scatter
	        .pointSize(2.2) // default size
	        .pointDomain([2.2, 2.2]) // all the same size by default
	    ;
	
	    /************************************
	     * offset:
	     *   'wiggle' (stream)
	     *   'zero' (stacked)
	     *   'expand' (normalize to 100%)
	     *   'silhouette' (simple centered)
	     *
	     * order:
	     *   'inside-out' (stream)
	     *   'default' (input order)
	     ************************************/
	
	    var renderWatch = nv.utils.renderWatch(dispatch, duration);
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(scatter);
	        selection.each(function(data) {
	            var availableWidth = width - margin.left - margin.right,
	                availableHeight = height - margin.top - margin.bottom;
	
	            container = d3.select(this);
	            nv.utils.initSVG(container);
	
	            // Setup Scales
	            x = scatter.xScale();
	            y = scatter.yScale();
	
	            var dataRaw = data;
	            // Injecting point index into each point because d3.layout.stack().out does not give index
	            data.forEach(function(aseries, i) {
	                aseries.seriesIndex = i;
	                aseries.values = aseries.values.map(function(d, j) {
	                    d.index = j;
	                    d.seriesIndex = i;
	                    return d;
	                });
	            });
	
	            var dataFiltered = data.filter(function(series) {
	                return !series.disabled;
	            });
	
	            data = d3.layout.stack()
	                .order(order)
	                .offset(offset)
	                .values(function(d) { return d.values })  //TODO: make values customizeable in EVERY model in this fashion
	                .x(getX)
	                .y(getY)
	                .out(function(d, y0, y) {
	                    d.display = {
	                        y: y,
	                        y0: y0
	                    };
	                })
	            (dataFiltered);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-stackedarea').data([data]);
	            var wrapEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedarea');
	            var defsEnter = wrapEnter.append('defs');
	            var gEnter = wrapEnter.append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-areaWrap');
	            gEnter.append('g').attr('class', 'nv-scatterWrap');
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	            
	            // If the user has not specified forceY, make sure 0 is included in the domain
	            // Otherwise, use user-specified values for forceY
	            if (scatter.forceY().length == 0) {
	                scatter.forceY().push(0);
	            }
	            
	            scatter
	                .width(availableWidth)
	                .height(availableHeight)
	                .x(getX)
	                .y(function(d) {
	                    if (d.display !== undefined) { return d.display.y + d.display.y0; }
	                })
	                .color(data.map(function(d,i) {
	                    d.color = d.color || color(d, d.seriesIndex);
	                    return d.color;
	                }));
	
	            var scatterWrap = g.select('.nv-scatterWrap')
	                .datum(data);
	
	            scatterWrap.call(scatter);
	
	            defsEnter.append('clipPath')
	                .attr('id', 'nv-edge-clip-' + id)
	                .append('rect');
	
	            wrap.select('#nv-edge-clip-' + id + ' rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            g.attr('clip-path', clipEdge ? 'url(#nv-edge-clip-' + id + ')' : '');
	
	            var area = d3.svg.area()
	                .defined(defined)
	                .x(function(d,i)  { return x(getX(d,i)) })
	                .y0(function(d) {
	                    return y(d.display.y0)
	                })
	                .y1(function(d) {
	                    return y(d.display.y + d.display.y0)
	                })
	                .interpolate(interpolate);
	
	            var zeroArea = d3.svg.area()
	                .defined(defined)
	                .x(function(d,i)  { return x(getX(d,i)) })
	                .y0(function(d) { return y(d.display.y0) })
	                .y1(function(d) { return y(d.display.y0) });
	
	            var path = g.select('.nv-areaWrap').selectAll('path.nv-area')
	                .data(function(d) { return d });
	
	            path.enter().append('path').attr('class', function(d,i) { return 'nv-area nv-area-' + i })
	                .attr('d', function(d,i){
	                    return zeroArea(d.values, d.seriesIndex);
	                })
	                .on('mouseover', function(d,i) {
	                    d3.select(this).classed('hover', true);
	                    dispatch.areaMouseover({
	                        point: d,
	                        series: d.key,
	                        pos: [d3.event.pageX, d3.event.pageY],
	                        seriesIndex: d.seriesIndex
	                    });
	                })
	                .on('mouseout', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.areaMouseout({
	                        point: d,
	                        series: d.key,
	                        pos: [d3.event.pageX, d3.event.pageY],
	                        seriesIndex: d.seriesIndex
	                    });
	                })
	                .on('click', function(d,i) {
	                    d3.select(this).classed('hover', false);
	                    dispatch.areaClick({
	                        point: d,
	                        series: d.key,
	                        pos: [d3.event.pageX, d3.event.pageY],
	                        seriesIndex: d.seriesIndex
	                    });
	                });
	
	            path.exit().remove();
	            path.style('fill', function(d,i){
	                    return d.color || color(d, d.seriesIndex)
	                })
	                .style('stroke', function(d,i){ return d.color || color(d, d.seriesIndex) });
	            path.watchTransition(renderWatch,'stackedArea path')
	                .attr('d', function(d,i) {
	                    return area(d.values,i)
	                });
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            scatter.dispatch.on('elementMouseover.area', function(e) {
	                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', true);
	            });
	            scatter.dispatch.on('elementMouseout.area', function(e) {
	                g.select('.nv-chart-' + id + ' .nv-area-' + e.seriesIndex).classed('hover', false);
	            });
	
	            //Special offset functions
	            chart.d3_stackedOffset_stackPercent = function(stackData) {
	                var n = stackData.length,    //How many series
	                    m = stackData[0].length,     //how many points per series
	                    i,
	                    j,
	                    o,
	                    y0 = [];
	
	                for (j = 0; j < m; ++j) { //Looping through all points
	                    for (i = 0, o = 0; i < dataRaw.length; i++) { //looping through all series
	                        o += getY(dataRaw[i].values[j]); //total y value of all series at a certian point in time.
	                    }
	
	                    if (o) for (i = 0; i < n; i++) { //(total y value of all series at point in time i) != 0
	                        stackData[i][j][1] /= o;
	                    } else { //(total y value of all series at point in time i) == 0
	                        for (i = 0; i < n; i++) {
	                            stackData[i][j][1] = 0;
	                        }
	                    }
	                }
	                for (j = 0; j < m; ++j) y0[j] = 0;
	                return y0;
	            };
	
	        });
	
	        renderWatch.renderEnd('stackedArea immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Global getters and setters
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.scatter = scatter;
	
	    scatter.dispatch.on('elementClick', function(){ dispatch.elementClick.apply(this, arguments); });
	    scatter.dispatch.on('elementMouseover', function(){ dispatch.elementMouseover.apply(this, arguments); });
	    scatter.dispatch.on('elementMouseout', function(){ dispatch.elementMouseout.apply(this, arguments); });
	
	    chart.interpolate = function(_) {
	        if (!arguments.length) return interpolate;
	        interpolate = _;
	        return chart;
	    };
	
	    chart.duration = function(_) {
	        if (!arguments.length) return duration;
	        duration = _;
	        renderWatch.reset(duration);
	        scatter.duration(duration);
	        return chart;
	    };
	
	    chart.dispatch = dispatch;
	    chart.scatter = scatter;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        defined: {get: function(){return defined;}, set: function(_){defined=_;}},
	        clipEdge: {get: function(){return clipEdge;}, set: function(_){clipEdge=_;}},
	        offset:      {get: function(){return offset;}, set: function(_){offset=_;}},
	        order:    {get: function(){return order;}, set: function(_){order=_;}},
	        interpolate:    {get: function(){return interpolate;}, set: function(_){interpolate=_;}},
	
	        // simple functor options
	        x:     {get: function(){return getX;}, set: function(_){getX = d3.functor(_);}},
	        y:     {get: function(){return getY;}, set: function(_){getY = d3.functor(_);}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	        }},
	        style: {get: function(){return style;}, set: function(_){
	            style = _;
	            switch (style) {
	                case 'stack':
	                    chart.offset('zero');
	                    chart.order('default');
	                    break;
	                case 'stream':
	                    chart.offset('wiggle');
	                    chart.order('inside-out');
	                    break;
	                case 'stream-center':
	                    chart.offset('silhouette');
	                    chart.order('inside-out');
	                    break;
	                case 'expand':
	                    chart.offset('expand');
	                    chart.order('default');
	                    break;
	                case 'stack_percent':
	                    chart.offset(chart.d3_stackedOffset_stackPercent);
	                    chart.order('default');
	                    break;
	            }
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            scatter.duration(duration);
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, scatter);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.stackedAreaChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var stacked = nv.models.stackedArea()
	        , xAxis = nv.models.axis()
	        , yAxis = nv.models.axis()
	        , legend = nv.models.legend()
	        , controls = nv.models.legend()
	        , interactiveLayer = nv.interactiveGuideline()
	        , tooltip = nv.models.tooltip()
	        , focus = nv.models.focus(nv.models.stackedArea())
	        ;
	
	    var margin = {top: 30, right: 25, bottom: 50, left: 60}
	        , width = null
	        , height = null
	        , color = nv.utils.defaultColor()
	        , showControls = true
	        , showLegend = true
	        , showXAxis = true
	        , showYAxis = true
	        , rightAlignYAxis = false
	        , focusEnable = false
	        , useInteractiveGuideline = false
	        , showTotalInTooltip = true
	        , totalLabel = 'TOTAL'
	        , x //can be accessed via chart.xScale()
	        , y //can be accessed via chart.yScale()
	        , state = nv.utils.state()
	        , defaultState = null
	        , noData = null
	        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd')
	        , controlWidth = 250
	        , controlOptions = ['Stacked','Stream','Expanded']
	        , controlLabels = {}
	        , duration = 250
	        ;
	
	    state.style = stacked.style();
	    xAxis.orient('bottom').tickPadding(7);
	    yAxis.orient((rightAlignYAxis) ? 'right' : 'left');
	
	    tooltip
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        })
	        .valueFormatter(function(d, i) {
	            return yAxis.tickFormat()(d, i);
	        });
	
	    interactiveLayer.tooltip
	        .headerFormatter(function(d, i) {
	            return xAxis.tickFormat()(d, i);
	        })
	        .valueFormatter(function(d, i) {
	            return d == null ? "N/A" : yAxis.tickFormat()(d, i);
	        });
	
	    var oldYTickFormat = null,
	        oldValueFormatter = null;
	
	    controls.updateState(false);
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	    var style = stacked.style();
	
	    var stateGetter = function(data) {
	        return function(){
	            return {
	                active: data.map(function(d) { return !d.disabled }),
	                style: stacked.style()
	            };
	        }
	    };
	
	    var stateSetter = function(data) {
	        return function(state) {
	            if (state.style !== undefined)
	                style = state.style;
	            if (state.active !== undefined)
	                data.forEach(function(series,i) {
	                    series.disabled = !state.active[i];
	                });
	        }
	    };
	
	    var percentFormatter = d3.format('%');
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(stacked);
	        if (showXAxis) renderWatch.models(xAxis);
	        if (showYAxis) renderWatch.models(yAxis);
	
	        selection.each(function(data) {
	            var container = d3.select(this),
	                that = this;
	            nv.utils.initSVG(container);
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin),
	                availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);
	
	            chart.update = function() { container.transition().duration(duration).call(chart); };
	            chart.container = this;
	
	            state
	                .setter(stateSetter(data), chart.update)
	                .getter(stateGetter(data))
	                .update();
	
	            // DEPRECATED set state.disabled
	            state.disabled = data.map(function(d) { return !!d.disabled });
	
	            if (!defaultState) {
	                var key;
	                defaultState = {};
	                for (key in state) {
	                    if (state[key] instanceof Array)
	                        defaultState[key] = state[key].slice(0);
	                    else
	                        defaultState[key] = state[key];
	                }
	            }
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length || !data.filter(function(d) { return d.values.length }).length) {
	                nv.utils.noData(chart, container)
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	            // Setup Scales
	            x = stacked.xScale();
	            y = stacked.yScale();
	
	            // Setup containers and skeleton of chart
	            var wrap = container.selectAll('g.nv-wrap.nv-stackedAreaChart').data([data]);
	            var gEnter = wrap.enter().append('g').attr('class', 'nvd3 nv-wrap nv-stackedAreaChart').append('g');
	            var g = wrap.select('g');
	
	            gEnter.append('g').attr('class', 'nv-legendWrap');
	            gEnter.append('g').attr('class', 'nv-controlsWrap');
	
	            var focusEnter = gEnter.append('g').attr('class', 'nv-focus');
	            focusEnter.append('g').attr('class', 'nv-background').append('rect');
	            focusEnter.append('g').attr('class', 'nv-x nv-axis');
	            focusEnter.append('g').attr('class', 'nv-y nv-axis');
	            focusEnter.append('g').attr('class', 'nv-stackedWrap');
	            focusEnter.append('g').attr('class', 'nv-interactive');
	
	            // g.select("rect").attr("width",availableWidth).attr("height",availableHeight);
	
	            var contextEnter = gEnter.append('g').attr('class', 'nv-focusWrap');
	
	            // Legend
	            if (!showLegend) {
	                g.select('.nv-legendWrap').selectAll('*').remove();
	            } else {
	                var legendWidth = (showControls) ? availableWidth - controlWidth : availableWidth;
	
	                legend.width(legendWidth);
	                g.select('.nv-legendWrap').datum(data).call(legend);
	
	                if (legend.height() > margin.top) {
	                    margin.top = legend.height();
	                    availableHeight = nv.utils.availableHeight(height, container, margin) - (focusEnable ? focus.height() : 0);
	                }
	
	                g.select('.nv-legendWrap')
	                    .attr('transform', 'translate(' + (availableWidth-legendWidth) + ',' + (-margin.top) +')');
	            }
	
	            // Controls
	            if (!showControls) {
	                 g.select('.nv-controlsWrap').selectAll('*').remove();
	            } else {
	                var controlsData = [
	                    {
	                        key: controlLabels.stacked || 'Stacked',
	                        metaKey: 'Stacked',
	                        disabled: stacked.style() != 'stack',
	                        style: 'stack'
	                    },
	                    {
	                        key: controlLabels.stream || 'Stream',
	                        metaKey: 'Stream',
	                        disabled: stacked.style() != 'stream',
	                        style: 'stream'
	                    },
	                    {
	                        key: controlLabels.expanded || 'Expanded',
	                        metaKey: 'Expanded',
	                        disabled: stacked.style() != 'expand',
	                        style: 'expand'
	                    },
	                    {
	                        key: controlLabels.stack_percent || 'Stack %',
	                        metaKey: 'Stack_Percent',
	                        disabled: stacked.style() != 'stack_percent',
	                        style: 'stack_percent'
	                    }
	                ];
	
	                controlWidth = (controlOptions.length/3) * 260;
	                controlsData = controlsData.filter(function(d) {
	                    return controlOptions.indexOf(d.metaKey) !== -1;
	                });
	
	                controls
	                    .width( controlWidth )
	                    .color(['#444', '#444', '#444']);
	
	                g.select('.nv-controlsWrap')
	                    .datum(controlsData)
	                    .call(controls);
	
	                if (Math.max(controls.height(), legend.height()) > margin.top) {
	                    margin.top = Math.max(controls.height(), legend.height());
	                    availableHeight = nv.utils.availableHeight(height, container, margin);
	                }
	
	                g.select('.nv-controlsWrap')
	                    .attr('transform', 'translate(0,' + (-margin.top) +')');
	            }
	
	            wrap.attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');
	
	            if (rightAlignYAxis) {
	                g.select(".nv-y.nv-axis")
	                    .attr("transform", "translate(" + availableWidth + ",0)");
	            }
	
	            //Set up interactive layer
	            if (useInteractiveGuideline) {
	                interactiveLayer
	                    .width(availableWidth)
	                    .height(availableHeight)
	                    .margin({left: margin.left, top: margin.top})
	                    .svgContainer(container)
	                    .xScale(x);
	                wrap.select(".nv-interactive").call(interactiveLayer);
	            }
	
	            g.select('.nv-focus .nv-background rect')
	                .attr('width', availableWidth)
	                .attr('height', availableHeight);
	
	            stacked
	                .width(availableWidth)
	                .height(availableHeight)
	                .color(data.map(function(d,i) {
	                    return d.color || color(d, i);
	                }).filter(function(d,i) { return !data[i].disabled; }));
	
	            var stackedWrap = g.select('.nv-focus .nv-stackedWrap')
	                .datum(data.filter(function(d) { return !d.disabled; }));
	
	            // Setup Axes
	            if (showXAxis) {
	                xAxis.scale(x)
	                    ._ticks( nv.utils.calcTicksX(availableWidth/100, data) )
	                    .tickSize( -availableHeight, 0);
	            }
	
	            if (showYAxis) {
	                var ticks;
	                if (stacked.offset() === 'wiggle') {
	                    ticks = 0;
	                }
	                else {
	                    ticks = nv.utils.calcTicksY(availableHeight/36, data);
	                }
	                yAxis.scale(y)
	                    ._ticks(ticks)
	                    .tickSize(-availableWidth, 0);
	            }
	
	            //============================================================
	            // Update Axes
	            //============================================================
	            function updateXAxis() {
	                if(showXAxis) {
	                    g.select('.nv-focus .nv-x.nv-axis')
	                        .attr('transform', 'translate(0,' + availableHeight + ')')
	                        .transition()
	                        .duration(duration)
	                        .call(xAxis)
	                        ;
	                }
	            }
	
	            function updateYAxis() {
	                if(showYAxis) {
	                    if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
	                        var currentFormat = yAxis.tickFormat();
	
	                        if ( !oldYTickFormat || currentFormat !== percentFormatter )
	                            oldYTickFormat = currentFormat;
	
	                        //Forces the yAxis to use percentage in 'expand' mode.
	                        yAxis.tickFormat(percentFormatter);
	                    }
	                    else {
	                        if (oldYTickFormat) {
	                            yAxis.tickFormat(oldYTickFormat);
	                            oldYTickFormat = null;
	                        }
	                    }
	
	                    g.select('.nv-focus .nv-y.nv-axis')
	                    .transition().duration(0)
	                    .call(yAxis);
	                }
	            }
	
	            //============================================================
	            // Update Focus
	            //============================================================
	            if(!focusEnable) {
	                stackedWrap.transition().call(stacked);
	                updateXAxis();
	                updateYAxis();
	            } else {
	                focus.width(availableWidth);
	                g.select('.nv-focusWrap')
	                    .attr('transform', 'translate(0,' + ( availableHeight + margin.bottom + focus.margin().top) + ')')
	                    .datum(data.filter(function(d) { return !d.disabled; }))
	                    .call(focus);
	                var extent = focus.brush.empty() ? focus.xDomain() : focus.brush.extent();
	                if(extent !== null){
	                    onBrush(extent);
	                }
	            }
	
	            //============================================================
	            // Event Handling/Dispatching (in chart's scope)
	            //------------------------------------------------------------
	
	            stacked.dispatch.on('areaClick.toggle', function(e) {
	                if (data.filter(function(d) { return !d.disabled }).length === 1)
	                    data.forEach(function(d) {
	                        d.disabled = false;
	                    });
	                else
	                    data.forEach(function(d,i) {
	                        d.disabled = (i != e.seriesIndex);
	                    });
	
	                state.disabled = data.map(function(d) { return !!d.disabled });
	                dispatch.stateChange(state);
	
	                chart.update();
	            });
	
	            legend.dispatch.on('stateChange', function(newState) {
	                for (var key in newState)
	                    state[key] = newState[key];
	                dispatch.stateChange(state);
	                chart.update();
	            });
	
	            controls.dispatch.on('legendClick', function(d,i) {
	                if (!d.disabled) return;
	
	                controlsData = controlsData.map(function(s) {
	                    s.disabled = true;
	                    return s;
	                });
	                d.disabled = false;
	
	                stacked.style(d.style);
	
	
	                state.style = stacked.style();
	                dispatch.stateChange(state);
	
	                chart.update();
	            });
	
	            interactiveLayer.dispatch.on('elementMousemove', function(e) {
	                stacked.clearHighlights();
	                var singlePoint, pointIndex, pointXLocation, allData = [], valueSum = 0, allNullValues = true;
	                data
	                    .filter(function(series, i) {
	                        series.seriesIndex = i;
	                        return !series.disabled;
	                    })
	                    .forEach(function(series,i) {
	                        pointIndex = nv.interactiveBisect(series.values, e.pointXValue, chart.x());
	                        var point = series.values[pointIndex];
	                        var pointYValue = chart.y()(point, pointIndex);
	                        if (pointYValue != null) {
	                            stacked.highlightPoint(i, pointIndex, true);
	                        }
	                        if (typeof point === 'undefined') return;
	                        if (typeof singlePoint === 'undefined') singlePoint = point;
	                        if (typeof pointXLocation === 'undefined') pointXLocation = chart.xScale()(chart.x()(point,pointIndex));
	
	                        //If we are in 'expand' mode, use the stacked percent value instead of raw value.
	                        var tooltipValue = (stacked.style() == 'expand') ? point.display.y : chart.y()(point,pointIndex);
	                        allData.push({
	                            key: series.key,
	                            value: tooltipValue,
	                            color: color(series,series.seriesIndex),
	                            point: point
	                        });
	
	                        if (showTotalInTooltip && stacked.style() != 'expand' && tooltipValue != null) {
	                          valueSum += tooltipValue;
	                          allNullValues = false;
	                        };
	                    });
	
	                allData.reverse();
	
	                //Highlight the tooltip entry based on which stack the mouse is closest to.
	                if (allData.length > 2) {
	                    var yValue = chart.yScale().invert(e.mouseY);
	                    var yDistMax = Infinity, indexToHighlight = null;
	                    allData.forEach(function(series,i) {
	
	                        //To handle situation where the stacked area chart is negative, we need to use absolute values
	                        //when checking if the mouse Y value is within the stack area.
	                        yValue = Math.abs(yValue);
	                        var stackedY0 = Math.abs(series.point.display.y0);
	                        var stackedY = Math.abs(series.point.display.y);
	                        if ( yValue >= stackedY0 && yValue <= (stackedY + stackedY0))
	                        {
	                            indexToHighlight = i;
	                            return;
	                        }
	                    });
	                    if (indexToHighlight != null)
	                        allData[indexToHighlight].highlight = true;
	                }
	
	                //If we are not in 'expand' mode, add a 'Total' row to the tooltip.
	                if (showTotalInTooltip && stacked.style() != 'expand' && allData.length >= 2 && !allNullValues) {
	                    allData.push({
	                        key: totalLabel,
	                        value: valueSum,
	                        total: true
	                    });
	                }
	
	                var xValue = chart.x()(singlePoint,pointIndex);
	
	                var valueFormatter = interactiveLayer.tooltip.valueFormatter();
	                // Keeps track of the tooltip valueFormatter if the chart changes to expanded view
	                if (stacked.style() === 'expand' || stacked.style() === 'stack_percent') {
	                    if ( !oldValueFormatter ) {
	                        oldValueFormatter = valueFormatter;
	                    }
	                    //Forces the tooltip to use percentage in 'expand' mode.
	                    valueFormatter = d3.format(".1%");
	                }
	                else {
	                    if (oldValueFormatter) {
	                        valueFormatter = oldValueFormatter;
	                        oldValueFormatter = null;
	                    }
	                }
	
	                interactiveLayer.tooltip
	                    .valueFormatter(valueFormatter)
	                    .data(
	                    {
	                        value: xValue,
	                        series: allData
	                    }
	                )();
	
	                interactiveLayer.renderGuideLine(pointXLocation);
	
	            });
	
	            interactiveLayer.dispatch.on("elementMouseout",function(e) {
	                stacked.clearHighlights();
	            });
	
	            /* Update `main' graph on brush update. */
	            focus.dispatch.on("onBrush", function(extent) {
	                onBrush(extent);
	            });
	
	            // Update chart from a state object passed to event handler
	            dispatch.on('changeState', function(e) {
	
	                if (typeof e.disabled !== 'undefined' && data.length === e.disabled.length) {
	                    data.forEach(function(series,i) {
	                        series.disabled = e.disabled[i];
	                    });
	
	                    state.disabled = e.disabled;
	                }
	
	                if (typeof e.style !== 'undefined') {
	                    stacked.style(e.style);
	                    style = e.style;
	                }
	
	                chart.update();
	            });
	
	            //============================================================
	            // Functions
	            //------------------------------------------------------------
	
	            function onBrush(extent) {
	                // Update Main (Focus)
	                var stackedWrap = g.select('.nv-focus .nv-stackedWrap')
	                    .datum(
	                    data.filter(function(d) { return !d.disabled; })
	                        .map(function(d,i) {
	                            return {
	                                key: d.key,
	                                area: d.area,
	                                classed: d.classed,
	                                values: d.values.filter(function(d,i) {
	                                    return stacked.x()(d,i) >= extent[0] && stacked.x()(d,i) <= extent[1];
	                                }),
	                                disableTooltip: d.disableTooltip
	                            };
	                        })
	                );
	                stackedWrap.transition().duration(duration).call(stacked);
	
	                // Update Main (Focus) Axes
	                updateXAxis();
	                updateYAxis();
	            }
	
	        });
	
	        renderWatch.renderEnd('stacked Area chart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    stacked.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt.point['x'] = stacked.x()(evt.point);
	        evt.point['y'] = stacked.y()(evt.point);
	        tooltip.data(evt).hidden(false);
	    });
	
	    stacked.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true)
	    });
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.stacked = stacked;
	    chart.legend = legend;
	    chart.controls = controls;
	    chart.xAxis = xAxis;
	    chart.x2Axis = focus.xAxis;
	    chart.yAxis = yAxis;
	    chart.y2Axis = focus.yAxis;
	    chart.interactiveLayer = interactiveLayer;
	    chart.tooltip = tooltip;
	    chart.focus = focus;
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        showLegend: {get: function(){return showLegend;}, set: function(_){showLegend=_;}},
	        showXAxis:      {get: function(){return showXAxis;}, set: function(_){showXAxis=_;}},
	        showYAxis:    {get: function(){return showYAxis;}, set: function(_){showYAxis=_;}},
	        defaultState:    {get: function(){return defaultState;}, set: function(_){defaultState=_;}},
	        noData:    {get: function(){return noData;}, set: function(_){noData=_;}},
	        showControls:    {get: function(){return showControls;}, set: function(_){showControls=_;}},
	        controlLabels:    {get: function(){return controlLabels;}, set: function(_){controlLabels=_;}},
	        controlOptions:    {get: function(){return controlOptions;}, set: function(_){controlOptions=_;}},
	        showTotalInTooltip:      {get: function(){return showTotalInTooltip;}, set: function(_){showTotalInTooltip=_;}},
	        totalLabel:      {get: function(){return totalLabel;}, set: function(_){totalLabel=_;}},
	        focusEnable:    {get: function(){return focusEnable;}, set: function(_){focusEnable=_;}},
	        focusHeight:     {get: function(){return focus.height();}, set: function(_){focus.height(_);}},
	        brushExtent: {get: function(){return focus.brushExtent();}, set: function(_){focus.brushExtent(_);}},
	
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	        }},
	        focusMargin: {get: function(){return focus.margin}, set: function(_){
	            focus.margin.top    = _.top    !== undefined ? _.top    : focus.margin.top;
	            focus.margin.right  = _.right  !== undefined ? _.right  : focus.margin.right;
	            focus.margin.bottom = _.bottom !== undefined ? _.bottom : focus.margin.bottom;
	            focus.margin.left   = _.left   !== undefined ? _.left   : focus.margin.left;
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            stacked.duration(duration);
	            xAxis.duration(duration);
	            yAxis.duration(duration);
	        }},
	        color:  {get: function(){return color;}, set: function(_){
	            color = nv.utils.getColor(_);
	            legend.color(color);
	            stacked.color(color);
	            focus.color(color);
	        }},
	        x: {get: function(){return stacked.x();}, set: function(_){
	            stacked.x(_);
	            focus.x(_);
	        }},
	        y: {get: function(){return stacked.y();}, set: function(_){
	            stacked.y(_);
	            focus.y(_);
	        }},
	        rightAlignYAxis: {get: function(){return rightAlignYAxis;}, set: function(_){
	            rightAlignYAxis = _;
	            yAxis.orient( rightAlignYAxis ? 'right' : 'left');
	        }},
	        useInteractiveGuideline: {get: function(){return useInteractiveGuideline;}, set: function(_){
	            useInteractiveGuideline = !!_;
	            chart.interactive(!_);
	            chart.useVoronoi(!_);
	            stacked.scatter.interactive(!_);
	        }}
	    });
	
	    nv.utils.inheritOptions(chart, stacked);
	    nv.utils.initOptions(chart);
	
	    return chart;
	};
	
	nv.models.stackedAreaWithFocusChart = function() {
	  return nv.models.stackedAreaChart()
	    .margin({ bottom: 30 })
	    .focusEnable( true );
	};
	// based on http://bl.ocks.org/kerryrodden/477c1bfb081b783f80ad
	nv.models.sunburst = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var margin = {top: 0, right: 0, bottom: 0, left: 0}
	        , width = 600
	        , height = 600
	        , mode = "count"
	        , modes = {count: function(d) { return 1; }, value: function(d) { return d.value || d.size }, size: function(d) { return d.value || d.size }}
	        , id = Math.floor(Math.random() * 10000) //Create semi-unique ID in case user doesn't select one
	        , container = null
	        , color = nv.utils.defaultColor()
	        , showLabels = false
	        , labelFormat = function(d){if(mode === 'count'){return d.name + ' #' + d.value}else{return d.name + ' ' + (d.value || d.size)}}
	        , labelThreshold = 0.02
	        , sort = function(d1, d2){return d1.name > d2.name;}
	        , key = function(d,i){return d.name;}
	        , groupColorByParent = true
	        , duration = 500
	        , dispatch = d3.dispatch('chartClick', 'elementClick', 'elementDblClick', 'elementMousemove', 'elementMouseover', 'elementMouseout', 'renderEnd');
	
	    //============================================================
	    // aux functions and setup
	    //------------------------------------------------------------
	
	    var x = d3.scale.linear().range([0, 2 * Math.PI]);
	    var y = d3.scale.sqrt();
	
	    var partition = d3.layout.partition().sort(sort);
	
	    var node, availableWidth, availableHeight, radius;
	    var prevPositions = {};
	
	    var arc = d3.svg.arc()
	        .startAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x))) })
	        .endAngle(function(d) {return Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx))) })
	        .innerRadius(function(d) {return Math.max(0, y(d.y)) })
	        .outerRadius(function(d) {return Math.max(0, y(d.y + d.dy)) });
	
	    function rotationToAvoidUpsideDown(d) {
	        var centerAngle = computeCenterAngle(d);
	        if(centerAngle > 90){
	            return 180;
	        }
	        else {
	            return 0;
	        }
	    }
	
	    function computeCenterAngle(d) {
	        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));
	        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
	        var centerAngle = (((startAngle + endAngle) / 2) * (180 / Math.PI)) - 90;
	        return centerAngle;
	    }
	
	    function computeNodePercentage(d) {
	        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));
	        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
	        return (endAngle - startAngle) / (2 * Math.PI);
	    }
	
	    function labelThresholdMatched(d) {
	        var startAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x)));
	        var endAngle = Math.max(0, Math.min(2 * Math.PI, x(d.x + d.dx)));
	
	        var size = endAngle - startAngle;
	        return size > labelThreshold;
	    }
	
	    // When zooming: interpolate the scales.
	    function arcTweenZoom(e,i) {
	        var xd = d3.interpolate(x.domain(), [node.x, node.x + node.dx]),
	        yd = d3.interpolate(y.domain(), [node.y, 1]),
	        yr = d3.interpolate(y.range(), [node.y ? 20 : 0, radius]);
	
	        if (i === 0) {
	            return function() {return arc(e);}
	        }
	        else {
	            return function (t) {
	                x.domain(xd(t));
	                y.domain(yd(t)).range(yr(t));
	                return arc(e);
	            }
	        };
	    }
	
	    function arcTweenUpdate(d) {
	        var ipo = d3.interpolate({x: d.x0, dx: d.dx0, y: d.y0, dy: d.dy0}, d);
	
	        return function (t) {
	            var b = ipo(t);
	
	            d.x0 = b.x;
	            d.dx0 = b.dx;
	            d.y0 = b.y;
	            d.dy0 = b.dy;
	
	            return arc(b);
	        };
	    }
	
	    function updatePrevPosition(node) {
	        var k = key(node);
	        if(! prevPositions[k]) prevPositions[k] = {};
	        var pP = prevPositions[k];
	        pP.dx = node.dx;
	        pP.x = node.x;
	        pP.dy = node.dy;
	        pP.y = node.y;
	    }
	
	    function storeRetrievePrevPositions(nodes) {
	        nodes.forEach(function(n){
	            var k = key(n);
	            var pP = prevPositions[k];
	            //console.log(k,n,pP);
	            if( pP ){
	                n.dx0 = pP.dx;
	                n.x0 = pP.x;
	                n.dy0 = pP.dy;
	                n.y0 = pP.y;
	            }
	            else {
	                n.dx0 = n.dx;
	                n.x0 = n.x;
	                n.dy0 = n.dy;
	                n.y0 = n.y;
	            }
	            updatePrevPosition(n);
	        });
	    }
	
	    function zoomClick(d) {
	        var labels = container.selectAll('text')
	        var path = container.selectAll('path')
	
	        // fade out all text elements
	        labels.transition().attr("opacity",0);
	
	        // to allow reference to the new center node
	        node = d;
	
	        path.transition()
	            .duration(duration)
	            .attrTween("d", arcTweenZoom)
	            .each('end', function(e) {
	                // partially taken from here: http://bl.ocks.org/metmajer/5480307
	                // check if the animated element's data e lies within the visible angle span given in d
	                if(e.x >= d.x && e.x < (d.x + d.dx) ){
	                    if(e.depth >= d.depth){
	                        // get a selection of the associated text element
	                        var parentNode = d3.select(this.parentNode);
	                        var arcText = parentNode.select('text');
	
	                        // fade in the text element and recalculate positions
	                        arcText.transition().duration(duration)
	                        .text( function(e){return labelFormat(e) })
	                        .attr("opacity", function(d){
	                            if(labelThresholdMatched(d)) {
	                                return 1;
	                            }
	                            else {
	                                return 0;
	                            }
	                        })
	                        .attr("transform", function() {
	                            var width = this.getBBox().width;
	                            if(e.depth === 0)
	                            return "translate(" + (width / 2 * - 1) + ",0)";
	                            else if(e.depth === d.depth){
	                                return "translate(" + (y(e.y) + 5) + ",0)";
	                            }
	                            else {
	                                var centerAngle = computeCenterAngle(e);
	                                var rotation = rotationToAvoidUpsideDown(e);
	                                if (rotation === 0) {
	                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + 5) + ',0)';
	                                }
	                                else {
	                                    return 'rotate('+ centerAngle +')translate(' + (y(e.y) + width + 5) + ',0)rotate(' + rotation + ')';
	                                }
	                            }
	                        });
	                    }
	                }
	            })
	    }
	
	    //============================================================
	    // chart function
	    //------------------------------------------------------------
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    function chart(selection) {
	        renderWatch.reset();
	
	        selection.each(function(data) {
	            container = d3.select(this);
	            availableWidth = nv.utils.availableWidth(width, container, margin);
	            availableHeight = nv.utils.availableHeight(height, container, margin);
	            radius = Math.min(availableWidth, availableHeight) / 2;
	
	            y.range([0, radius]);
	
	            // Setup containers and skeleton of chart
	            var wrap = container.select('g.nvd3.nv-wrap.nv-sunburst');
	            if( !wrap[0][0] ) {
	                wrap = container.append('g')
	                    .attr('class', 'nvd3 nv-wrap nv-sunburst nv-chart-' + id)
	                    .attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');
	            } else {
	                wrap.attr('transform', 'translate(' + ((availableWidth / 2) + margin.left + margin.right) + ',' + ((availableHeight / 2) + margin.top + margin.bottom) + ')');
	            }
	
	            container.on('click', function (d, i) {
	                dispatch.chartClick({
	                    data: d,
	                    index: i,
	                    pos: d3.event,
	                    id: id
	                });
	            });
	
	            partition.value(modes[mode] || modes["count"]);
	
	            //reverse the drawing order so that the labels of inner
	            //arcs are drawn on top of the outer arcs.
	            var nodes = partition.nodes(data[0]).reverse()
	
	            storeRetrievePrevPositions(nodes);
	            var cG = wrap.selectAll('.arc-container').data(nodes, key)
	
	            //handle new datapoints
	            var cGE = cG.enter()
	                .append("g")
	                .attr("class",'arc-container')
	
	            cGE.append("path")
	                .attr("d", arc)
	                .style("fill", function (d) {
	                    if (d.color) {
	                        return d.color;
	                    }
	                    else if (groupColorByParent) {
	                        return color((d.children ? d : d.parent).name);
	                    }
	                    else {
	                        return color(d.name);
	                    }
	                })
	                .style("stroke", "#FFF")
	                .on("click", zoomClick)
	                .on('mouseover', function(d,i){
	                    d3.select(this).classed('hover', true).style('opacity', 0.8);
	                    dispatch.elementMouseover({
	                        data: d,
	                        color: d3.select(this).style("fill"),
	                        percent: computeNodePercentage(d)
	                    });
	                })
	                .on('mouseout', function(d,i){
	                    d3.select(this).classed('hover', false).style('opacity', 1);
	                    dispatch.elementMouseout({
	                        data: d
	                    });
	                })
	                .on('mousemove', function(d,i){
	                    dispatch.elementMousemove({
	                        data: d
	                    });
	                });
	
	            ///Iterating via each and selecting based on the this
	            ///makes it work ... a cG.selectAll('path') doesn't.
	            ///Without iteration the data (in the element) didn't update.
	            cG.each(function(d){
	                d3.select(this).select('path')
	                    .transition()
	                    .duration(duration)
	                    .attrTween('d', arcTweenUpdate);
	            });
	
	            if(showLabels){
	                //remove labels first and add them back
	                cG.selectAll('text').remove();
	
	                //this way labels are on top of newly added arcs
	                cG.append('text')
	                    .text( function(e){ return labelFormat(e)})
	                    .transition()
	                    .duration(duration)
	                    .attr("opacity", function(d){
	                        if(labelThresholdMatched(d)) {
	                            return 1;
	                        }
	                        else {
	                            return 0;
	                        }
	                    })
	                    .attr("transform", function(d) {
	                        var width = this.getBBox().width;
	                        if(d.depth === 0){
	                            return "rotate(0)translate(" + (width / 2 * -1) + ",0)";
	                        }
	                        else {
	                            var centerAngle = computeCenterAngle(d);
	                            var rotation = rotationToAvoidUpsideDown(d);
	                            if (rotation === 0) {
	                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + 5) + ',0)';
	                            }
	                            else {
	                                return 'rotate('+ centerAngle +')translate(' + (y(d.y) + width + 5) + ',0)rotate(' + rotation + ')';
	                            }
	                        }
	                    });
	            }
	
	            //zoom out to the center when the data is updated.
	            zoomClick(nodes[nodes.length - 1])
	
	
	            //remove unmatched elements ...
	            cG.exit()
	                .transition()
	                .duration(duration)
	                .attr('opacity',0)
	                .each('end',function(d){
	                    var k = key(d);
	                    prevPositions[k] = undefined;
	                })
	                .remove();
	        });
	
	
	        renderWatch.renderEnd('sunburst immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    chart.dispatch = dispatch;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        width:      {get: function(){return width;}, set: function(_){width=_;}},
	        height:     {get: function(){return height;}, set: function(_){height=_;}},
	        mode:       {get: function(){return mode;}, set: function(_){mode=_;}},
	        id:         {get: function(){return id;}, set: function(_){id=_;}},
	        duration:   {get: function(){return duration;}, set: function(_){duration=_;}},
	        groupColorByParent: {get: function(){return groupColorByParent;}, set: function(_){groupColorByParent=!!_;}},
	        showLabels: {get: function(){return showLabels;}, set: function(_){showLabels=!!_}},
	        labelFormat: {get: function(){return labelFormat;}, set: function(_){labelFormat=_}},
	        labelThreshold: {get: function(){return labelThreshold;}, set: function(_){labelThreshold=_}},
	        sort: {get: function(){return sort;}, set: function(_){sort=_}},
	        key: {get: function(){return key;}, set: function(_){key=_}},
	        // options that require extra logic in the setter
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    != undefined ? _.top    : margin.top;
	            margin.right  = _.right  != undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom != undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   != undefined ? _.left   : margin.left;
	        }},
	        color: {get: function(){return color;}, set: function(_){
	            color=nv.utils.getColor(_);
	        }}
	    });
	
	    nv.utils.initOptions(chart);
	    return chart;
	};
	nv.models.sunburstChart = function() {
	    "use strict";
	
	    //============================================================
	    // Public Variables with Default Settings
	    //------------------------------------------------------------
	
	    var sunburst = nv.models.sunburst();
	    var tooltip = nv.models.tooltip();
	
	    var margin = {top: 30, right: 20, bottom: 20, left: 20}
	        , width = null
	        , height = null
	        , color = nv.utils.defaultColor()
	        , showTooltipPercent = false
	        , id = Math.round(Math.random() * 100000)
	        , defaultState = null
	        , noData = null
	        , duration = 250
	        , dispatch = d3.dispatch('stateChange', 'changeState','renderEnd');
	
	
	    //============================================================
	    // Private Variables
	    //------------------------------------------------------------
	
	    var renderWatch = nv.utils.renderWatch(dispatch);
	
	    tooltip
	        .duration(0)
	        .headerEnabled(false)
	        .valueFormatter(function(d){return d;});
	
	    //============================================================
	    // Chart function
	    //------------------------------------------------------------
	
	    function chart(selection) {
	        renderWatch.reset();
	        renderWatch.models(sunburst);
	
	        selection.each(function(data) {
	            var container = d3.select(this);
	
	            nv.utils.initSVG(container);
	
	            var availableWidth = nv.utils.availableWidth(width, container, margin);
	            var availableHeight = nv.utils.availableHeight(height, container, margin);
	
	            chart.update = function() {
	                if (duration === 0) {
	                    container.call(chart);
	                } else {
	                    container.transition().duration(duration).call(chart);
	                }
	            };
	            chart.container = container;
	
	            // Display No Data message if there's nothing to show.
	            if (!data || !data.length) {
	                nv.utils.noData(chart, container);
	                return chart;
	            } else {
	                container.selectAll('.nv-noData').remove();
	            }
	
	            sunburst.width(availableWidth).height(availableHeight).margin(margin);
	            container.call(sunburst);
	        });
	
	        renderWatch.renderEnd('sunburstChart immediate');
	        return chart;
	    }
	
	    //============================================================
	    // Event Handling/Dispatching (out of chart's scope)
	    //------------------------------------------------------------
	
	    sunburst.dispatch.on('elementMouseover.tooltip', function(evt) {
	        evt.series = {
	            key: evt.data.name,
	            value: (evt.data.value || evt.data.size),
	            color: evt.color,
	            percent: evt.percent
	        };
	        if (!showTooltipPercent) {
	            delete evt.percent;
	            delete evt.series.percent;
	        }
	        tooltip.data(evt).hidden(false);
	    });
	
	    sunburst.dispatch.on('elementMouseout.tooltip', function(evt) {
	        tooltip.hidden(true);
	    });
	
	    sunburst.dispatch.on('elementMousemove.tooltip', function(evt) {
	        tooltip();
	    });
	
	    //============================================================
	    // Expose Public Variables
	    //------------------------------------------------------------
	
	    // expose chart's sub-components
	    chart.dispatch = dispatch;
	    chart.sunburst = sunburst;
	    chart.tooltip = tooltip;
	    chart.options = nv.utils.optionsFunc.bind(chart);
	
	    // use Object get/set functionality to map between vars and chart functions
	    chart._options = Object.create({}, {
	        // simple options, just get/set the necessary values
	        noData:             {get: function(){return noData;},               set: function(_){noData=_;}},
	        defaultState:       {get: function(){return defaultState;},         set: function(_){defaultState=_;}},
	        showTooltipPercent: {get: function(){return showTooltipPercent;},   set: function(_){showTooltipPercent=_;}},
	
	        // options that require extra logic in the setter
	        color: {get: function(){return color;}, set: function(_){
	            color = _;
	            sunburst.color(color);
	        }},
	        duration: {get: function(){return duration;}, set: function(_){
	            duration = _;
	            renderWatch.reset(duration);
	            sunburst.duration(duration);
	        }},
	        margin: {get: function(){return margin;}, set: function(_){
	            margin.top    = _.top    !== undefined ? _.top    : margin.top;
	            margin.right  = _.right  !== undefined ? _.right  : margin.right;
	            margin.bottom = _.bottom !== undefined ? _.bottom : margin.bottom;
	            margin.left   = _.left   !== undefined ? _.left   : margin.left;
	            sunburst.margin(margin);
	        }}
	    });
	    nv.utils.inheritOptions(chart, sunburst);
	    nv.utils.initOptions(chart);
	    return chart;
	
	};
	
	nv.version = "1.8.4";
	})();

/***/ },
/* 243 */
/***/ function(module, exports) {

	module.exports = "\n\n<div id=\"content\">\n    \n    <div v-show=\"videoSource.src\" >\n        <video id=\"moocVideo\" class=\"video-js vjs-16-9 vjs-default-skin  vjs-big-play-centered\" controls></video>\n    </div>\n    \n    <div id=\"content-video-progress-bar\"></div>    \n    <div v-show=\"seekData\" id=\"seekline-graph\">\n        <canvas v-seekline=\"seekData\" \n        style=\"height: 200px; left:0; z-index:1; width:100% \"> </canvas>\n    </div>\n\n    <div v-show=\"chartData\" id=\"stacked-area-graph\" >\n        <svg v-nvd3stackchart=\"chartData\" :course-id=\"selectedCourseId\" :config=\"chartConfig\" ></svg>\n    </div>\n</div>\n\n\n";

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(245)
	__vue_script__ = __webpack_require__(247)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\ToolList.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(273)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(246);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolList.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolList.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n    \r\n.vistoolkit {\r\n\ttext-align: center;\r\n\tpadding-right: 0px; \r\n\tpadding-left: 0px; \r\n\tpadding-top: 0px;\r\n}    \r\n    \r\n\r\n.statisitc-icon{\r\n    cursor:hand;\r\n    color: #aaaaaa;\r\n    width: 100%;\r\n    padding-top: 10px;\r\n    padding-bottom: 10px;\r\n    margin: 10px auto;\r\n    text-align: center;\r\n    font-size: 12px;\r\n}\r\n\r\n.statisitc-icon > span{\r\n    font-size: 40px;\r\n}\r\n\r\n.statisitc-icon:hover{\r\n    color: #ffffff;\r\n    background-color: #428bca;\r\n}    \r\n    \r\n.dash-category-label{\r\n    color: #ffffff;\r\n    margin-top: -6px;\r\n    background: #aaaaaa;\r\n\r\n}\r\n\r\n.dash-category-label > hr{\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n}\r\n\r\n    .modal-less-lg {\r\n        width: 800px;\r\n    }\r\n    \r\n    .modal-more-lg {\r\n        width: 1200px;\r\n    }\r\n    \r\n.brush .extent {\r\n    stroke: #fff;\r\n    fill-opacity: .125;\r\n    shape-rendering: crispEdges;\r\n}\r\n", ""]);
	
	// exports


/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _ToolListCourseInfo = __webpack_require__(248);
	
	var _ToolListCourseInfo2 = _interopRequireDefault(_ToolListCourseInfo);
	
	var _ToolListDemographicInfo = __webpack_require__(253);
	
	var _ToolListDemographicInfo2 = _interopRequireDefault(_ToolListDemographicInfo);
	
	var _ToolListVideopopInfo = __webpack_require__(260);
	
	var _ToolListVideopopInfo2 = _interopRequireDefault(_ToolListVideopopInfo);
	
	var _ToolListTemporalInfo = __webpack_require__(266);
	
	var _ToolListTemporalInfo2 = _interopRequireDefault(_ToolListTemporalInfo);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// import ToolListSentiment from './ToolListSentiment.vue';
	// import ToolListSocialNetwork from './ToolListSocialNetwork.vue';
	// import ToolListFlowmap from './ToolListFlowmap.vue';
	// import ToolListCoorelation from './ToolListCoorelation.vue';
	// import ToolListMdsGlyph from './ToolListMdsGlyph.vue';
	
	// <template>
	//
	//     <div class="dash-category-label">
	//         <hr>Course
	//         <hr>
	//     </div>
	//
	//     <tl-course-info></tl-course-info>
	//     <tl-videopop-info></tl-videopop-info>
	//     <tl-demographic-info></tl-demographic-info>
	//
	//     <!-- video -->
	//     <div class="dash-category-label">
	//         <hr> Video
	//         <hr>
	//     </div>
	//
	//     <tl-temporal-info></tl-temporal-info>
	//
	//     <!-- forum -->
	//     <!--<div class="dash-category-label">
	//         <hr> Forum
	//         <hr>
	//     </div>
	//
	//     <tl-sentiment></tl-sentiment>
	//     <tl-social-network></tl-social-network>-->
	//
	//     <!-- peak analysis -->
	//     <!--<div class="dash-category-label">
	//         <hr> Peak
	//         <hr>
	//     </div>
	//
	//     <tl-flowmap></tl-flowmap>
	//     <tl-mds-glyph></tl-mds-glyph>
	//     <tl-coorelation></tl-coorelation>
	//     -->
	// </template>
	//
	// <script>
	//Components
	exports.default = {
	    components: {
	        tlCourseInfo: _ToolListCourseInfo2.default,
	        tlDemographicInfo: _ToolListDemographicInfo2.default,
	        tlVideopopInfo: _ToolListVideopopInfo2.default,
	        tlTemporalInfo: _ToolListTemporalInfo2.default
	    }
	};
	
	// </script>
	//
	// <style>
	//
	// .vistoolkit {
	// 	text-align: center;
	// 	padding-right: 0px; 
	// 	padding-left: 0px; 
	// 	padding-top: 0px;
	// }    
	//
	//
	// .statisitc-icon{
	//     cursor:hand;
	//     color: #aaaaaa;
	//     width: 100%;
	//     padding-top: 10px;
	//     padding-bottom: 10px;
	//     margin: 10px auto;
	//     text-align: center;
	//     font-size: 12px;
	// }
	//
	// .statisitc-icon > span{
	//     font-size: 40px;
	// }
	//
	// .statisitc-icon:hover{
	//     color: #ffffff;
	//     background-color: #428bca;
	// }    
	//
	// .dash-category-label{
	//     color: #ffffff;
	//     margin-top: -6px;
	//     background: #aaaaaa;
	//
	// }
	//
	// .dash-category-label > hr{
	//     margin-top: 5px;
	//     margin-bottom: 5px;
	// }
	//
	//     .modal-less-lg {
	//         width: 800px;
	//     }
	//
	//     .modal-more-lg {
	//         width: 1200px;
	//     }
	//
	// .brush .extent {
	//     stroke: #fff;
	//     fill-opacity: .125;
	//     shape-rendering: crispEdges;
	// }
	// </style>
	/* generated by vue-loader */

/***/ },
/* 248 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(249)
	__vue_script__ = __webpack_require__(251)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\ToolListCourseInfo.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(252)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(250);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListCourseInfo.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListCourseInfo.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 250 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);
	
	// exports


/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	// <template>
	//     <!--Modal-->
	//     <div id="course-info-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="course-info-modal-label" aria-hidden="true">
	//         <div class="modal-dialog" role="document">
	//             <div class="modal-content">
	//                 <div class="modal-header">
	//                     <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
	//                     <h3 id="course-info-modal-label" class="modal-title">Course Information</h3>
	//                 </div>
	//                 <div class="modal-body">
	//                     <div style="width: 60%; float:left">
	//                         <h3>Course Name:</h3>
	//                         <strong>{{ courseInfo.courseName }}</strong>
	//                         <h3>Instructor(s):</h3>
	//                         <strong>{{ courseInfo.instructor }}</strong>
	//                     </div>
	//                     <div style="width: 30%; float:left; margin-top: 30px">
	//                         <img :src="courseInfo.img" style="width:150px" />
	//                     </div>
	//                     <div class="clearfix"></div>
	//                     <h3>Description:</h3>
	//                     <p>
	//                         {{courseInfo.description}}
	//                     </p>
	//                 </div>
	//                 <div class="modal-footer">
	//                     <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
	//                 </div>
	//             </div>
	//         </div>
	//     </div>
	//     <!--Button-->
	//     <div v-show="courseId!=-1" class="statisitc-icon" data-toggle="modal" data-target="#course-info-modal">
	//         <span class="fa fa-info-circle"></span>
	//         <br/>Course Info
	//     </div>
	// </template>
	// <script>
	//service
	exports.default = {
	    ready: function ready() {
	        var _this = this;
	
	        //select the modal then append it to the last of <body>
	        $("#course-info-modal").appendTo("body");
	
	        (0, _communicator2.default)(this).onChangeCourse(function (courseId) {
	            if (courseId) {
	                _datamanager2.default.getCourseInfo(courseId, function (response) {
	                    _this.courseId = response.data.courseId;
	                    _this.courseInfo = response.data;
	                });
	            }
	        });
	    },
	    data: function data() {
	        return {
	            courseId: -1,
	            courseInfo: { courseName: "", instructor: "", description: "", img: "" }
	        };
	    }
	};
	
	// </script>
	// <style>
	//
	// </style>
	/* generated by vue-loader */
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 252 */
/***/ function(module, exports) {

	module.exports = "\n<!--Modal-->\n<div id=\"course-info-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"course-info-modal-label\" aria-hidden=\"true\">\n    <div class=\"modal-dialog\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">&times;</button>\n                <h3 id=\"course-info-modal-label\" class=\"modal-title\">Course Information</h3>\n            </div>\n            <div class=\"modal-body\">\n                <div style=\"width: 60%; float:left\">\n                    <h3>Course Name:</h3>\n                    <strong>{{ courseInfo.courseName }}</strong>\n                    <h3>Instructor(s):</h3>\n                    <strong>{{ courseInfo.instructor }}</strong>\n                </div>\n                <div style=\"width: 30%; float:left; margin-top: 30px\">\n                    <img :src=\"courseInfo.img\" style=\"width:150px\" />\n                </div>\n                <div class=\"clearfix\"></div>\n                <h3>Description:</h3>\n                <p>\n                    {{courseInfo.description}}\n                </p>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>\n<!--Button-->\n<div v-show=\"courseId!=-1\" class=\"statisitc-icon\" data-toggle=\"modal\" data-target=\"#course-info-modal\">\n    <span class=\"fa fa-info-circle\"></span>\n    <br/>Course Info\n</div>\n";

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(254)
	__vue_script__ = __webpack_require__(256)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\ToolListDemographicInfo.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(259)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 254 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(255);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListDemographicInfo.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListDemographicInfo.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 255 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);
	
	// exports


/***/ },
/* 256 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _d = __webpack_require__(238);
	
	var _d2 = _interopRequireDefault(_d);
	
	var _topojson = __webpack_require__(257);
	
	var _topojson2 = _interopRequireDefault(_topojson);
	
	var _datamaps = __webpack_require__(258);
	
	var _datamaps2 = _interopRequireDefault(_datamaps);
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//service
	exports.default = {
	    ready: function ready() {
	        var _this = this;
	
	        this.complexObject = {};
	        //select the modal then append it to the last of <body>
	        $(this.$el.nextElementSibling).appendTo("body");
	
	        (0, _communicator2.default)(this).onChangeCourse(function (courseId) {
	            if (courseId) {
	                _this.courseId = courseId;
	                _datamanager2.default.getDemographicData(courseId, function (response) {
	                    _this.demographicInfo = response.data;
	                });
	            }
	        });
	    },
	    data: function data() {
	        return {
	            courseId: -1,
	            demographicInfo: null,
	            modalBodyWidth: 768,
	            modalBodyHeight: 300
	        };
	    },
	
	    //map data
	    complexObject: {
	        map: null
	    },
	    methods: {
	        filterByCountry: function filterByCountry(countryID) {
	            (0, _communicator2.default)(this).emitFilterCountry(countryID);
	        },
	        createMap: function createMap() {
	
	            var self = this;
	            var datas = this.demographicInfo;
	            var color = _d2.default.scale.linear().range(['#edf8b1', '#2c7fb8']);
	            color.domain([0, Math.log(_d2.default.max(datas.map(function (d) {
	                return d.count;
	            })))]);
	
	            var geoData = {};
	            datas.forEach(function (d) {
	                if (d.code3.length != 3) return;
	                geoData[d.code3] = { id: d.code3, count: d.count, fillColor: color(Math.log(d.count)) };
	            });
	
	            if (!this.complexObject.map) {
	                this.complexObject.map = new _datamaps2.default({ element: document.getElementById('demographic-info-modal-body'),
	                    height: this.modalBodyHeight, width: this.modalBodyWidth,
	                    fills: {
	                        defaultFill: '#edf8b1'
	                    },
	                    data: geoData,
	                    geographyConfig: {
	                        borderColor: '#dddddd',
	                        popupTemplate: function popupTemplate(geo, data) {
	                            return ['<div class="hoverinfo"><strong>', geo.properties.name + ' : ' + data.count, '</strong></div>'].join('');
	                        }
	                    },
	                    done: function done(datamap) {
	                        datamap.svg.selectAll('.datamaps-subunit').on('click', function (d) {
	                            self.filterByCountry(d.id);
	                        });
	                    }
	                });
	            } else {
	                this.complexObject.map.updateChoropleth(geoData);
	            }
	        }
	    }
	
	};
	
	// </script>
	// <style>
	//
	// </style>
	/* generated by vue-loader */
	// <template>
	//     <!--Modal-->
	//     <div id="demographic-info-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="demographic-info-modal-label"
	//         aria-hidden="true">
	//         <div class="modal-dialog modal-less-lg" role="document">
	//             <div class="modal-content">
	//                 <div class="modal-header">
	//                     <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
	//                     <h3 id="demographic-info-modal-label" class="modal-title">Demographic Distribution Information</h3>
	//                 </div>
	//                 <div class="modal-body">
	//                     <div id="demographic-info-modal-body" :style="{height:modalBodyHeight}"></div>
	//                 </div>
	//                 <div class="modal-footer">
	//                     <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
	//                 </div>
	//             </div>
	//         </div>
	//     </div>
	//     <!--Button-->
	//     <div v-show="courseId!=-1" class="statisitc-icon" @click="createMap()" data-toggle="modal" data-target="#demographic-info-modal">
	//         <span class="fa fa-globe"></span>
	//         <br/>Demographic Info
	//     </div>
	// </template>
	// <script>
	//thrid party
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 257 */
/***/ function(module, exports, __webpack_require__) {

	(function (global, factory) {
	   true ? factory(exports) :
	  typeof define === 'function' && define.amd ? define(['exports'], factory) :
	  (factory((global.topojson = global.topojson || {})));
	}(this, (function (exports) { 'use strict';
	
	function noop() {}
	
	function transformAbsolute(transform) {
	  if (!transform) return noop;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(point, i) {
	    if (!i) x0 = y0 = 0;
	    point[0] = (x0 += point[0]) * kx + dx;
	    point[1] = (y0 += point[1]) * ky + dy;
	  };
	}
	
	function transformRelative(transform) {
	  if (!transform) return noop;
	  var x0,
	      y0,
	      kx = transform.scale[0],
	      ky = transform.scale[1],
	      dx = transform.translate[0],
	      dy = transform.translate[1];
	  return function(point, i) {
	    if (!i) x0 = y0 = 0;
	    var x1 = Math.round((point[0] - dx) / kx),
	        y1 = Math.round((point[1] - dy) / ky);
	    point[0] = x1 - x0;
	    point[1] = y1 - y0;
	    x0 = x1;
	    y0 = y1;
	  };
	}
	
	function reverse(array, n) {
	  var t, j = array.length, i = j - n;
	  while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
	}
	
	function bisect(a, x) {
	  var lo = 0, hi = a.length;
	  while (lo < hi) {
	    var mid = lo + hi >>> 1;
	    if (a[mid] < x) lo = mid + 1;
	    else hi = mid;
	  }
	  return lo;
	}
	
	function feature(topology, o) {
	  return o.type === "GeometryCollection" ? {
	    type: "FeatureCollection",
	    features: o.geometries.map(function(o) { return feature$1(topology, o); })
	  } : feature$1(topology, o);
	}
	
	function feature$1(topology, o) {
	  var f = {
	    type: "Feature",
	    id: o.id,
	    properties: o.properties || {},
	    geometry: object(topology, o)
	  };
	  if (o.id == null) delete f.id;
	  return f;
	}
	
	function object(topology, o) {
	  var absolute = transformAbsolute(topology.transform),
	      arcs = topology.arcs;
	
	  function arc(i, points) {
	    if (points.length) points.pop();
	    for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length, p; k < n; ++k) {
	      points.push(p = a[k].slice());
	      absolute(p, k);
	    }
	    if (i < 0) reverse(points, n);
	  }
	
	  function point(p) {
	    p = p.slice();
	    absolute(p, 0);
	    return p;
	  }
	
	  function line(arcs) {
	    var points = [];
	    for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
	    if (points.length < 2) points.push(points[0].slice());
	    return points;
	  }
	
	  function ring(arcs) {
	    var points = line(arcs);
	    while (points.length < 4) points.push(points[0].slice());
	    return points;
	  }
	
	  function polygon(arcs) {
	    return arcs.map(ring);
	  }
	
	  function geometry(o) {
	    var t = o.type;
	    return t === "GeometryCollection" ? {type: t, geometries: o.geometries.map(geometry)}
	        : t in geometryType ? {type: t, coordinates: geometryType[t](o)}
	        : null;
	  }
	
	  var geometryType = {
	    Point: function(o) { return point(o.coordinates); },
	    MultiPoint: function(o) { return o.coordinates.map(point); },
	    LineString: function(o) { return line(o.arcs); },
	    MultiLineString: function(o) { return o.arcs.map(line); },
	    Polygon: function(o) { return polygon(o.arcs); },
	    MultiPolygon: function(o) { return o.arcs.map(polygon); }
	  };
	
	  return geometry(o);
	}
	
	function stitchArcs(topology, arcs) {
	  var stitchedArcs = {},
	      fragmentByStart = {},
	      fragmentByEnd = {},
	      fragments = [],
	      emptyIndex = -1;
	
	  // Stitch empty arcs first, since they may be subsumed by other arcs.
	  arcs.forEach(function(i, j) {
	    var arc = topology.arcs[i < 0 ? ~i : i], t;
	    if (arc.length < 3 && !arc[1][0] && !arc[1][1]) {
	      t = arcs[++emptyIndex], arcs[emptyIndex] = i, arcs[j] = t;
	    }
	  });
	
	  arcs.forEach(function(i) {
	    var e = ends(i),
	        start = e[0],
	        end = e[1],
	        f, g;
	
	    if (f = fragmentByEnd[start]) {
	      delete fragmentByEnd[f.end];
	      f.push(i);
	      f.end = end;
	      if (g = fragmentByStart[end]) {
	        delete fragmentByStart[g.start];
	        var fg = g === f ? f : f.concat(g);
	        fragmentByStart[fg.start = f.start] = fragmentByEnd[fg.end = g.end] = fg;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else if (f = fragmentByStart[end]) {
	      delete fragmentByStart[f.start];
	      f.unshift(i);
	      f.start = start;
	      if (g = fragmentByEnd[start]) {
	        delete fragmentByEnd[g.end];
	        var gf = g === f ? f : g.concat(f);
	        fragmentByStart[gf.start = g.start] = fragmentByEnd[gf.end = f.end] = gf;
	      } else {
	        fragmentByStart[f.start] = fragmentByEnd[f.end] = f;
	      }
	    } else {
	      f = [i];
	      fragmentByStart[f.start = start] = fragmentByEnd[f.end = end] = f;
	    }
	  });
	
	  function ends(i) {
	    var arc = topology.arcs[i < 0 ? ~i : i], p0 = arc[0], p1;
	    if (topology.transform) p1 = [0, 0], arc.forEach(function(dp) { p1[0] += dp[0], p1[1] += dp[1]; });
	    else p1 = arc[arc.length - 1];
	    return i < 0 ? [p1, p0] : [p0, p1];
	  }
	
	  function flush(fragmentByEnd, fragmentByStart) {
	    for (var k in fragmentByEnd) {
	      var f = fragmentByEnd[k];
	      delete fragmentByStart[f.start];
	      delete f.start;
	      delete f.end;
	      f.forEach(function(i) { stitchedArcs[i < 0 ? ~i : i] = 1; });
	      fragments.push(f);
	    }
	  }
	
	  flush(fragmentByEnd, fragmentByStart);
	  flush(fragmentByStart, fragmentByEnd);
	  arcs.forEach(function(i) { if (!stitchedArcs[i < 0 ? ~i : i]) fragments.push([i]); });
	
	  return fragments;
	}
	
	function mesh(topology) {
	  return object(topology, meshArcs.apply(this, arguments));
	}
	
	function meshArcs(topology, o, filter) {
	  var arcs = [];
	
	  function arc(i) {
	    var j = i < 0 ? ~i : i;
	    (geomsByArc[j] || (geomsByArc[j] = [])).push({i: i, g: geom});
	  }
	
	  function line(arcs) {
	    arcs.forEach(arc);
	  }
	
	  function polygon(arcs) {
	    arcs.forEach(line);
	  }
	
	  function geometry(o) {
	    if (o.type === "GeometryCollection") o.geometries.forEach(geometry);
	    else if (o.type in geometryType) geom = o, geometryType[o.type](o.arcs);
	  }
	
	  if (arguments.length > 1) {
	    var geomsByArc = [],
	        geom;
	
	    var geometryType = {
	      LineString: line,
	      MultiLineString: polygon,
	      Polygon: polygon,
	      MultiPolygon: function(arcs) { arcs.forEach(polygon); }
	    };
	
	    geometry(o);
	
	    geomsByArc.forEach(arguments.length < 3
	        ? function(geoms) { arcs.push(geoms[0].i); }
	        : function(geoms) { if (filter(geoms[0].g, geoms[geoms.length - 1].g)) arcs.push(geoms[0].i); });
	  } else {
	    for (var i = 0, n = topology.arcs.length; i < n; ++i) arcs.push(i);
	  }
	
	  return {type: "MultiLineString", arcs: stitchArcs(topology, arcs)};
	}
	
	function cartesianTriangleArea(triangle) {
	  var a = triangle[0], b = triangle[1], c = triangle[2];
	  return Math.abs((a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]));
	}
	
	function ring(ring) {
	  var i = -1,
	      n = ring.length,
	      a,
	      b = ring[n - 1],
	      area = 0;
	
	  while (++i < n) {
	    a = b;
	    b = ring[i];
	    area += a[0] * b[1] - a[1] * b[0];
	  }
	
	  return area / 2;
	}
	
	function merge(topology) {
	  return object(topology, mergeArcs.apply(this, arguments));
	}
	
	function mergeArcs(topology, objects) {
	  var polygonsByArc = {},
	      polygons = [],
	      components = [];
	
	  objects.forEach(function(o) {
	    if (o.type === "Polygon") register(o.arcs);
	    else if (o.type === "MultiPolygon") o.arcs.forEach(register);
	  });
	
	  function register(polygon) {
	    polygon.forEach(function(ring$$) {
	      ring$$.forEach(function(arc) {
	        (polygonsByArc[arc = arc < 0 ? ~arc : arc] || (polygonsByArc[arc] = [])).push(polygon);
	      });
	    });
	    polygons.push(polygon);
	  }
	
	  function area(ring$$) {
	    return Math.abs(ring(object(topology, {type: "Polygon", arcs: [ring$$]}).coordinates[0]));
	  }
	
	  polygons.forEach(function(polygon) {
	    if (!polygon._) {
	      var component = [],
	          neighbors = [polygon];
	      polygon._ = 1;
	      components.push(component);
	      while (polygon = neighbors.pop()) {
	        component.push(polygon);
	        polygon.forEach(function(ring$$) {
	          ring$$.forEach(function(arc) {
	            polygonsByArc[arc < 0 ? ~arc : arc].forEach(function(polygon) {
	              if (!polygon._) {
	                polygon._ = 1;
	                neighbors.push(polygon);
	              }
	            });
	          });
	        });
	      }
	    }
	  });
	
	  polygons.forEach(function(polygon) {
	    delete polygon._;
	  });
	
	  return {
	    type: "MultiPolygon",
	    arcs: components.map(function(polygons) {
	      var arcs = [], n;
	
	      // Extract the exterior (unique) arcs.
	      polygons.forEach(function(polygon) {
	        polygon.forEach(function(ring$$) {
	          ring$$.forEach(function(arc) {
	            if (polygonsByArc[arc < 0 ? ~arc : arc].length < 2) {
	              arcs.push(arc);
	            }
	          });
	        });
	      });
	
	      // Stitch the arcs into one or more rings.
	      arcs = stitchArcs(topology, arcs);
	
	      // If more than one ring is returned,
	      // at most one of these rings can be the exterior;
	      // choose the one with the greatest absolute area.
	      if ((n = arcs.length) > 1) {
	        for (var i = 1, k = area(arcs[0]), ki, t; i < n; ++i) {
	          if ((ki = area(arcs[i])) > k) {
	            t = arcs[0], arcs[0] = arcs[i], arcs[i] = t, k = ki;
	          }
	        }
	      }
	
	      return arcs;
	    })
	  };
	}
	
	function neighbors(objects) {
	  var indexesByArc = {}, // arc index -> array of object indexes
	      neighbors = objects.map(function() { return []; });
	
	  function line(arcs, i) {
	    arcs.forEach(function(a) {
	      if (a < 0) a = ~a;
	      var o = indexesByArc[a];
	      if (o) o.push(i);
	      else indexesByArc[a] = [i];
	    });
	  }
	
	  function polygon(arcs, i) {
	    arcs.forEach(function(arc) { line(arc, i); });
	  }
	
	  function geometry(o, i) {
	    if (o.type === "GeometryCollection") o.geometries.forEach(function(o) { geometry(o, i); });
	    else if (o.type in geometryType) geometryType[o.type](o.arcs, i);
	  }
	
	  var geometryType = {
	    LineString: line,
	    MultiLineString: polygon,
	    Polygon: polygon,
	    MultiPolygon: function(arcs, i) { arcs.forEach(function(arc) { polygon(arc, i); }); }
	  };
	
	  objects.forEach(geometry);
	
	  for (var i in indexesByArc) {
	    for (var indexes = indexesByArc[i], m = indexes.length, j = 0; j < m; ++j) {
	      for (var k = j + 1; k < m; ++k) {
	        var ij = indexes[j], ik = indexes[k], n;
	        if ((n = neighbors[ij])[i = bisect(n, ik)] !== ik) n.splice(i, 0, ik);
	        if ((n = neighbors[ik])[i = bisect(n, ij)] !== ij) n.splice(i, 0, ij);
	      }
	    }
	  }
	
	  return neighbors;
	}
	
	function compareArea(a, b) {
	  return a[1][2] - b[1][2];
	}
	
	function minAreaHeap() {
	  var heap = {},
	      array = [],
	      size = 0;
	
	  heap.push = function(object) {
	    up(array[object._ = size] = object, size++);
	    return size;
	  };
	
	  heap.pop = function() {
	    if (size <= 0) return;
	    var removed = array[0], object;
	    if (--size > 0) object = array[size], down(array[object._ = 0] = object, 0);
	    return removed;
	  };
	
	  heap.remove = function(removed) {
	    var i = removed._, object;
	    if (array[i] !== removed) return; // invalid request
	    if (i !== --size) object = array[size], (compareArea(object, removed) < 0 ? up : down)(array[object._ = i] = object, i);
	    return i;
	  };
	
	  function up(object, i) {
	    while (i > 0) {
	      var j = ((i + 1) >> 1) - 1,
	          parent = array[j];
	      if (compareArea(object, parent) >= 0) break;
	      array[parent._ = i] = parent;
	      array[object._ = i = j] = object;
	    }
	  }
	
	  function down(object, i) {
	    while (true) {
	      var r = (i + 1) << 1,
	          l = r - 1,
	          j = i,
	          child = array[j];
	      if (l < size && compareArea(array[l], child) < 0) child = array[j = l];
	      if (r < size && compareArea(array[r], child) < 0) child = array[j = r];
	      if (j === i) break;
	      array[child._ = i] = child;
	      array[object._ = i = j] = object;
	    }
	  }
	
	  return heap;
	}
	
	function presimplify(topology, triangleArea) {
	  var absolute = transformAbsolute(topology.transform),
	      relative = transformRelative(topology.transform),
	      heap = minAreaHeap();
	
	  if (!triangleArea) triangleArea = cartesianTriangleArea;
	
	  topology.arcs.forEach(function(arc) {
	    var triangles = [],
	        maxArea = 0,
	        triangle,
	        i,
	        n,
	        p;
	
	    // To store each point’s effective area, we create a new array rather than
	    // extending the passed-in point to workaround a Chrome/V8 bug (getting
	    // stuck in smi mode). For midpoints, the initial effective area of
	    // Infinity will be computed in the next step.
	    for (i = 0, n = arc.length; i < n; ++i) {
	      p = arc[i];
	      absolute(arc[i] = [p[0], p[1], Infinity], i);
	    }
	
	    for (i = 1, n = arc.length - 1; i < n; ++i) {
	      triangle = arc.slice(i - 1, i + 2);
	      triangle[1][2] = triangleArea(triangle);
	      triangles.push(triangle);
	      heap.push(triangle);
	    }
	
	    for (i = 0, n = triangles.length; i < n; ++i) {
	      triangle = triangles[i];
	      triangle.previous = triangles[i - 1];
	      triangle.next = triangles[i + 1];
	    }
	
	    while (triangle = heap.pop()) {
	      var previous = triangle.previous,
	          next = triangle.next;
	
	      // If the area of the current point is less than that of the previous point
	      // to be eliminated, use the latter's area instead. This ensures that the
	      // current point cannot be eliminated without eliminating previously-
	      // eliminated points.
	      if (triangle[1][2] < maxArea) triangle[1][2] = maxArea;
	      else maxArea = triangle[1][2];
	
	      if (previous) {
	        previous.next = next;
	        previous[2] = triangle[2];
	        update(previous);
	      }
	
	      if (next) {
	        next.previous = previous;
	        next[0] = triangle[0];
	        update(next);
	      }
	    }
	
	    arc.forEach(relative);
	  });
	
	  function update(triangle) {
	    heap.remove(triangle);
	    triangle[1][2] = triangleArea(triangle);
	    heap.push(triangle);
	  }
	
	  return topology;
	}
	
	var version = "1.6.27";
	
	exports.version = version;
	exports.mesh = mesh;
	exports.meshArcs = meshArcs;
	exports.merge = merge;
	exports.mergeArcs = mergeArcs;
	exports.feature = feature;
	exports.neighbors = neighbors;
	exports.presimplify = presimplify;
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	})));

/***/ },
/* 258 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery) {(function() {
	  var svg;
	
	  //save off default references
	  var d3 = window.d3, topojson = window.topojson;
	
	  var defaultOptions = {
	    scope: 'world',
	    responsive: false,
	    aspectRatio: 0.5625,
	    setProjection: setProjection,
	    projection: 'equirectangular',
	    dataType: 'json',
	    data: {},
	    done: function() {},
	    fills: {
	      defaultFill: '#ABDDA4'
	    },
	    filters: {},
	    geographyConfig: {
	        dataUrl: null,
	        hideAntarctica: true,
	        hideHawaiiAndAlaska : false,
	        borderWidth: 1,
	        borderOpacity: 1,
	        borderColor: '#FDFDFD',
	        popupTemplate: function(geography, data) {
	          return '<div class="hoverinfo"><strong>' + geography.properties.name + '</strong></div>';
	        },
	        popupOnHover: true,
	        highlightOnHover: true,
	        highlightFillColor: '#FC8D59',
	        highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
	        highlightBorderWidth: 2,
	        highlightBorderOpacity: 1
	    },
	    projectionConfig: {
	      rotation: [97, 0]
	    },
	    bubblesConfig: {
	        borderWidth: 2,
	        borderOpacity: 1,
	        borderColor: '#FFFFFF',
	        popupOnHover: true,
	        radius: null,
	        popupTemplate: function(geography, data) {
	          return '<div class="hoverinfo"><strong>' + data.name + '</strong></div>';
	        },
	        fillOpacity: 0.75,
	        animate: true,
	        highlightOnHover: true,
	        highlightFillColor: '#FC8D59',
	        highlightBorderColor: 'rgba(250, 15, 160, 0.2)',
	        highlightBorderWidth: 2,
	        highlightBorderOpacity: 1,
	        highlightFillOpacity: 0.85,
	        exitDelay: 100,
	        key: JSON.stringify
	    },
	    arcConfig: {
	      strokeColor: '#DD1C77',
	      strokeWidth: 1,
	      arcSharpness: 1,
	      animationSpeed: 600
	    }
	  };
	
	  /*
	    Getter for value. If not declared on datumValue, look up the chain into optionsValue
	  */
	  function val( datumValue, optionsValue, context ) {
	    if ( typeof context === 'undefined' ) {
	      context = optionsValue;
	      optionsValues = undefined;
	    }
	    var value = typeof datumValue !== 'undefined' ? datumValue : optionsValue;
	
	    if (typeof value === 'undefined') {
	      return  null;
	    }
	
	    if ( typeof value === 'function' ) {
	      var fnContext = [context];
	      if ( context.geography ) {
	        fnContext = [context.geography, context.data];
	      }
	      return value.apply(null, fnContext);
	    }
	    else {
	      return value;
	    }
	  }
	
	  function addContainer( element, height, width ) {
	    this.svg = d3.select( element ).append('svg')
	      .attr('width', width || element.offsetWidth)
	      .attr('data-width', width || element.offsetWidth)
	      .attr('class', 'datamap')
	      .attr('height', height || element.offsetHeight)
	      .style('overflow', 'hidden'); // IE10+ doesn't respect height/width when map is zoomed in
	
	    if (this.options.responsive) {
	      d3.select(this.options.element).style({'position': 'relative', 'padding-bottom': (this.options.aspectRatio*100) + '%'});
	      d3.select(this.options.element).select('svg').style({'position': 'absolute', 'width': '100%', 'height': '100%'});
	      d3.select(this.options.element).select('svg').select('g').selectAll('path').style('vector-effect', 'non-scaling-stroke');
	
	    }
	
	    return this.svg;
	  }
	
	  // setProjection takes the svg element and options
	  function setProjection( element, options ) {
	    var width = options.width || element.offsetWidth;
	    var height = options.height || element.offsetHeight;
	    var projection, path;
	    var svg = this.svg;
	
	    if ( options && typeof options.scope === 'undefined') {
	      options.scope = 'world';
	    }
	
	    if ( options.scope === 'usa' ) {
	      projection = d3.geo.albersUsa()
	        .scale(width)
	        .translate([width / 2, height / 2]);
	    }
	    else if ( options.scope === 'world' ) {
	      projection = d3.geo[options.projection]()
	        .scale((width + 1) / 2 / Math.PI)
	        .translate([width / 2, height / (options.projection === "mercator" ? 1.45 : 1.8)]);
	    }
	
	    if ( options.projection === 'orthographic' ) {
	
	      svg.append("defs").append("path")
	        .datum({type: "Sphere"})
	        .attr("id", "sphere")
	        .attr("d", path);
	
	      svg.append("use")
	          .attr("class", "stroke")
	          .attr("xlink:href", "#sphere");
	
	      svg.append("use")
	          .attr("class", "fill")
	          .attr("xlink:href", "#sphere");
	      projection.scale(250).clipAngle(90).rotate(options.projectionConfig.rotation)
	    }
	
	    path = d3.geo.path()
	      .projection( projection );
	
	    return {path: path, projection: projection};
	  }
	
	  function addStyleBlock() {
	    if ( d3.select('.datamaps-style-block').empty() ) {
	      d3.select('head').append('style').attr('class', 'datamaps-style-block')
	      .html('.datamap path.datamaps-graticule { fill: none; stroke: #777; stroke-width: 0.5px; stroke-opacity: .5; pointer-events: none; } .datamap .labels {pointer-events: none;} .datamap path {stroke: #FFFFFF; stroke-width: 1px;} .datamaps-legend dt, .datamaps-legend dd { float: left; margin: 0 3px 0 0;} .datamaps-legend dd {width: 20px; margin-right: 6px; border-radius: 3px;} .datamaps-legend {padding-bottom: 20px; z-index: 1001; position: absolute; left: 4px; font-size: 12px; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;} .datamaps-hoverover {display: none; font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; } .hoverinfo {padding: 4px; border-radius: 1px; background-color: #FFF; box-shadow: 1px 1px 5px #CCC; font-size: 12px; border: 1px solid #CCC; } .hoverinfo hr {border:1px dotted #CCC; }');
	    }
	  }
	
	  function drawSubunits( data ) {
	    var fillData = this.options.fills,
	        colorCodeData = this.options.data || {},
	        geoConfig = this.options.geographyConfig;
	
	
	    var subunits = this.svg.select('g.datamaps-subunits');
	    if ( subunits.empty() ) {
	      subunits = this.addLayer('datamaps-subunits', null, true);
	    }
	
	    var geoData = topojson.feature( data, data.objects[ this.options.scope ] ).features;
	    if ( geoConfig.hideAntarctica ) {
	      geoData = geoData.filter(function(feature) {
	        return feature.id !== "ATA";
	      });
	    }
	
	    if ( geoConfig.hideHawaiiAndAlaska ) {
	      geoData = geoData.filter(function(feature) {
	        return feature.id !== "HI" && feature.id !== 'AK';
	      });
	    }
	
	    var geo = subunits.selectAll('path.datamaps-subunit').data( geoData );
	
	    geo.enter()
	      .append('path')
	      .attr('d', this.path)
	      .attr('class', function(d) {
	        return 'datamaps-subunit ' + d.id;
	      })
	      .attr('data-info', function(d) {
	        return JSON.stringify( colorCodeData[d.id]);
	      })
	      .style('fill', function(d) {
	        //if fillKey - use that
	        //otherwise check 'fill'
	        //otherwise check 'defaultFill'
	        var fillColor;
	
	        var datum = colorCodeData[d.id];
	        if ( datum && datum.fillKey ) {
	          fillColor = fillData[ val(datum.fillKey, {data: colorCodeData[d.id], geography: d}) ];
	        }
	
	        if ( typeof fillColor === 'undefined' ) {
	          fillColor = val(datum && datum.fillColor, fillData.defaultFill, {data: colorCodeData[d.id], geography: d});
	        }
	
	        return fillColor;
	      })
	      .style('stroke-width', geoConfig.borderWidth)
	      .style('stroke-opacity', geoConfig.borderOpacity)
	      .style('stroke', geoConfig.borderColor);
	  }
	
	  function handleGeographyConfig () {
	    var hoverover;
	    var svg = this.svg;
	    var self = this;
	    var options = this.options.geographyConfig;
	
	    if ( options.highlightOnHover || options.popupOnHover ) {
	      svg.selectAll('.datamaps-subunit')
	        .on('mouseover', function(d) {
	          var $this = d3.select(this);
	          var datum = self.options.data[d.id] || {};
	          if ( options.highlightOnHover ) {
	            var previousAttributes = {
	              'fill':  $this.style('fill'),
	              'stroke': $this.style('stroke'),
	              'stroke-width': $this.style('stroke-width'),
	              'fill-opacity': $this.style('fill-opacity')
	            };
	
	            $this
	              .style('fill', val(datum.highlightFillColor, options.highlightFillColor, datum))
	              .style('stroke', val(datum.highlightBorderColor, options.highlightBorderColor, datum))
	              .style('stroke-width', val(datum.highlightBorderWidth, options.highlightBorderWidth, datum))
	              .style('stroke-opacity', val(datum.highlightBorderOpacity, options.highlightBorderOpacity, datum))
	              .style('fill-opacity', val(datum.highlightFillOpacity, options.highlightFillOpacity, datum))
	              .attr('data-previousAttributes', JSON.stringify(previousAttributes));
	
	            //as per discussion on https://github.com/markmarkoh/datamaps/issues/19
	            if ( ! /((MSIE)|(Trident))/.test(navigator.userAgent) ) {
	             moveToFront.call(this);
	            }
	          }
	
	          if ( options.popupOnHover ) {
	            self.updatePopup($this, d, options, svg);
	          }
	        })
	        .on('mouseout', function() {
	          var $this = d3.select(this);
	
	          if (options.highlightOnHover) {
	            //reapply previous attributes
	            var previousAttributes = JSON.parse( $this.attr('data-previousAttributes') );
	            for ( var attr in previousAttributes ) {
	              $this.style(attr, previousAttributes[attr]);
	            }
	          }
	          $this.on('mousemove', null);
	          d3.selectAll('.datamaps-hoverover').style('display', 'none');
	        });
	    }
	
	    function moveToFront() {
	      this.parentNode.appendChild(this);
	    }
	  }
	
	  //plugin to add a simple map legend
	  function addLegend(layer, data, options) {
	    data = data || {};
	    if ( !this.options.fills ) {
	      return;
	    }
	
	    var html = '<dl>';
	    var label = '';
	    if ( data.legendTitle ) {
	      html = '<h2>' + data.legendTitle + '</h2>' + html;
	    }
	    for ( var fillKey in this.options.fills ) {
	
	      if ( fillKey === 'defaultFill') {
	        if (! data.defaultFillName ) {
	          continue;
	        }
	        label = data.defaultFillName;
	      } else {
	        if (data.labels && data.labels[fillKey]) {
	          label = data.labels[fillKey];
	        } else {
	          label= fillKey + ': ';
	        }
	      }
	      html += '<dt>' + label + '</dt>';
	      html += '<dd style="background-color:' +  this.options.fills[fillKey] + '">&nbsp;</dd>';
	    }
	    html += '</dl>';
	
	    var hoverover = d3.select( this.options.element ).append('div')
	      .attr('class', 'datamaps-legend')
	      .html(html);
	  }
	
	    function addGraticule ( layer, options ) {
	      var graticule = d3.geo.graticule();
	      this.svg.insert("path", '.datamaps-subunits')
	        .datum(graticule)
	        .attr("class", "datamaps-graticule")
	        .attr("d", this.path);
	  }
	
	  function handleArcs (layer, data, options) {
	    var self = this,
	        svg = this.svg;
	
	    if ( !data || (data && !data.slice) ) {
	      throw "Datamaps Error - arcs must be an array";
	    }
	
	    // For some reason arc options were put in an `options` object instead of the parent arc
	    // I don't like this, so to match bubbles and other plugins I'm moving it
	    // This is to keep backwards compatability
	    for ( var i = 0; i < data.length; i++ ) {
	      data[i] = defaults(data[i], data[i].options);
	      delete data[i].options;
	    }
	
	    if ( typeof options === "undefined" ) {
	      options = defaultOptions.arcConfig;
	    }
	
	    var arcs = layer.selectAll('path.datamaps-arc').data( data, JSON.stringify );
	
	    var path = d3.geo.path()
	        .projection(self.projection);
	
	    arcs
	      .enter()
	        .append('svg:path')
	        .attr('class', 'datamaps-arc')
	        .style('stroke-linecap', 'round')
	        .style('stroke', function(datum) {
	          return val(datum.strokeColor, options.strokeColor, datum);
	        })
	        .style('fill', 'none')
	        .style('stroke-width', function(datum) {
	            return val(datum.strokeWidth, options.strokeWidth, datum);
	        })
	        .attr('d', function(datum) {
	            var originXY = self.latLngToXY(val(datum.origin.latitude, datum), val(datum.origin.longitude, datum))
	            var destXY = self.latLngToXY(val(datum.destination.latitude, datum), val(datum.destination.longitude, datum));
	            var midXY = [ (originXY[0] + destXY[0]) / 2, (originXY[1] + destXY[1]) / 2];
	            if (options.greatArc) {
	                  // TODO: Move this to inside `if` clause when setting attr `d`
	              var greatArc = d3.geo.greatArc()
	                  .source(function(d) { return [val(d.origin.longitude, d), val(d.origin.latitude, d)]; })
	                  .target(function(d) { return [val(d.destination.longitude, d), val(d.destination.latitude, d)]; });
	
	              return path(greatArc(datum))
	            }
	            var sharpness = val(datum.arcSharpness, options.arcSharpness, datum);
	            return "M" + originXY[0] + ',' + originXY[1] + "S" + (midXY[0] + (50 * sharpness)) + "," + (midXY[1] - (75 * sharpness)) + "," + destXY[0] + "," + destXY[1];
	        })
	        .attr('data-info', function(datum) {
	          return JSON.stringify(datum);
	        })
	        .transition()
	          .delay(100)
	          .style('fill', function(datum) {
	            /*
	              Thank you Jake Archibald, this is awesome.
	              Source: http://jakearchibald.com/2013/animated-line-drawing-svg/
	            */
	            var length = this.getTotalLength();
	            this.style.transition = this.style.WebkitTransition = 'none';
	            this.style.strokeDasharray = length + ' ' + length;
	            this.style.strokeDashoffset = length;
	            this.getBoundingClientRect();
	            this.style.transition = this.style.WebkitTransition = 'stroke-dashoffset ' + val(datum.animationSpeed, options.animationSpeed, datum) + 'ms ease-out';
	            this.style.strokeDashoffset = '0';
	            return 'none';
	          })
	
	    arcs.exit()
	      .transition()
	      .style('opacity', 0)
	      .remove();
	  }
	
	  function handleLabels ( layer, options ) {
	    var self = this;
	    options = options || {};
	    var labelStartCoodinates = this.projection([-67.707617, 42.722131]);
	    this.svg.selectAll(".datamaps-subunit")
	      .attr("data-foo", function(d) {
	        var center = self.path.centroid(d);
	        var xOffset = 7.5, yOffset = 5;
	
	        if ( ["FL", "KY", "MI"].indexOf(d.id) > -1 ) xOffset = -2.5;
	        if ( d.id === "NY" ) xOffset = -1;
	        if ( d.id === "MI" ) yOffset = 18;
	        if ( d.id === "LA" ) xOffset = 13;
	
	        var x,y;
	
	        x = center[0] - xOffset;
	        y = center[1] + yOffset;
	
	        var smallStateIndex = ["VT", "NH", "MA", "RI", "CT", "NJ", "DE", "MD", "DC"].indexOf(d.id);
	        if ( smallStateIndex > -1) {
	          var yStart = labelStartCoodinates[1];
	          x = labelStartCoodinates[0];
	          y = yStart + (smallStateIndex * (2+ (options.fontSize || 12)));
	          layer.append("line")
	            .attr("x1", x - 3)
	            .attr("y1", y - 5)
	            .attr("x2", center[0])
	            .attr("y2", center[1])
	            .style("stroke", options.labelColor || "#000")
	            .style("stroke-width", options.lineWidth || 1)
	        }
	
	          layer.append("text")
	              .attr("x", x)
	              .attr("y", y)
	              .style("font-size", (options.fontSize || 10) + 'px')
	              .style("font-family", options.fontFamily || "Verdana")
	              .style("fill", options.labelColor || "#000")
	              .text(function() {
	                  if (options.customLabelText && options.customLabelText[d.id]) {
	                      return options.customLabelText[d.id]
	                  } else {
	                      return d.id
	                  }
	              });
	
	        return "bar";
	      });
	  }
	
	
	  function handleBubbles (layer, data, options ) {
	    var self = this,
	        fillData = this.options.fills,
	        filterData = this.options.filters,
	        svg = this.svg;
	
	    if ( !data || (data && !data.slice) ) {
	      throw "Datamaps Error - bubbles must be an array";
	    }
	
	    var bubbles = layer.selectAll('circle.datamaps-bubble').data( data, options.key );
	
	    bubbles
	      .enter()
	        .append('svg:circle')
	        .attr('class', 'datamaps-bubble')
	        .attr('cx', function ( datum ) {
	          var latLng;
	          if ( datumHasCoords(datum) ) {
	            latLng = self.latLngToXY(datum.latitude, datum.longitude);
	          }
	          else if ( datum.centered ) {
	            latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);
	          }
	          if ( latLng ) return latLng[0];
	        })
	        .attr('cy', function ( datum ) {
	          var latLng;
	          if ( datumHasCoords(datum) ) {
	            latLng = self.latLngToXY(datum.latitude, datum.longitude);
	          }
	          else if ( datum.centered ) {
	            latLng = self.path.centroid(svg.select('path.' + datum.centered).data()[0]);
	          }
	          if ( latLng ) return latLng[1];
	        })
	        .attr('r', function(datum) {
	          // if animation enabled start with radius 0, otherwise use full size.
	          return options.animate ? 0 : val(datum.radius, options.radius, datum);
	        })
	        .attr('data-info', function(datum) {
	          return JSON.stringify(datum);
	        })
	        .attr('filter', function (datum) {
	          var filterKey = filterData[ val(datum.filterKey, options.filterKey, datum) ];
	
	          if (filterKey) {
	            return filterKey;
	          }
	        })
	        .style('stroke', function ( datum ) {
	          return val(datum.borderColor, options.borderColor, datum);
	        })
	        .style('stroke-width', function ( datum ) {
	          return val(datum.borderWidth, options.borderWidth, datum);
	        })
	        .style('stroke-opacity', function ( datum ) {
	          return val(datum.borderOpacity, options.borderOpacity, datum);
	        })
	        .style('fill-opacity', function ( datum ) {
	          return val(datum.fillOpacity, options.fillOpacity, datum);
	        })
	        .style('fill', function ( datum ) {
	          var fillColor = fillData[ val(datum.fillKey, options.fillKey, datum) ];
	          return fillColor || fillData.defaultFill;
	        })
	        .on('mouseover', function ( datum ) {
	          var $this = d3.select(this);
	
	          if (options.highlightOnHover) {
	            //save all previous attributes for mouseout
	            var previousAttributes = {
	              'fill':  $this.style('fill'),
	              'stroke': $this.style('stroke'),
	              'stroke-width': $this.style('stroke-width'),
	              'fill-opacity': $this.style('fill-opacity')
	            };
	
	            $this
	              .style('fill', val(datum.highlightFillColor, options.highlightFillColor, datum))
	              .style('stroke', val(datum.highlightBorderColor, options.highlightBorderColor, datum))
	              .style('stroke-width', val(datum.highlightBorderWidth, options.highlightBorderWidth, datum))
	              .style('stroke-opacity', val(datum.highlightBorderOpacity, options.highlightBorderOpacity, datum))
	              .style('fill-opacity', val(datum.highlightFillOpacity, options.highlightFillOpacity, datum))
	              .attr('data-previousAttributes', JSON.stringify(previousAttributes));
	          }
	
	          if (options.popupOnHover) {
	            self.updatePopup($this, datum, options, svg);
	          }
	        })
	        .on('mouseout', function ( datum ) {
	          var $this = d3.select(this);
	
	          if (options.highlightOnHover) {
	            //reapply previous attributes
	            var previousAttributes = JSON.parse( $this.attr('data-previousAttributes') );
	            for ( var attr in previousAttributes ) {
	              $this.style(attr, previousAttributes[attr]);
	            }
	          }
	
	          d3.selectAll('.datamaps-hoverover').style('display', 'none');
	        })
	
	    bubbles.transition()
	      .duration(400)
	      .attr('r', function ( datum ) {
	        return val(datum.radius, options.radius, datum);
	      })
	    .transition()
	      .duration(0)
	      .attr('data-info', function(d) {
	        return JSON.stringify(d);
	      });
	
	    bubbles.exit()
	      .transition()
	        .delay(options.exitDelay)
	        .attr("r", 0)
	        .remove();
	
	    function datumHasCoords (datum) {
	      return typeof datum !== 'undefined' && typeof datum.latitude !== 'undefined' && typeof datum.longitude !== 'undefined';
	    }
	  }
	
	  //stolen from underscore.js
	  function defaults(obj) {
	    Array.prototype.slice.call(arguments, 1).forEach(function(source) {
	      if (source) {
	        for (var prop in source) {
	          if (obj[prop] == null) obj[prop] = source[prop];
	        }
	      }
	    });
	    return obj;
	  }
	  /**************************************
	             Public Functions
	  ***************************************/
	
	  function Datamap( options ) {
	
	    if ( typeof d3 === 'undefined' || typeof topojson === 'undefined' ) {
	      throw new Error('Include d3.js (v3.0.3 or greater) and topojson on this page before creating a new map');
	   }
	    //set options for global use
	    this.options = defaults(options, defaultOptions);
	    this.options.geographyConfig = defaults(options.geographyConfig, defaultOptions.geographyConfig);
	    this.options.projectionConfig = defaults(options.projectionConfig, defaultOptions.projectionConfig);
	    this.options.bubblesConfig = defaults(options.bubblesConfig, defaultOptions.bubblesConfig);
	    this.options.arcConfig = defaults(options.arcConfig, defaultOptions.arcConfig);
	
	    //add the SVG container
	    if ( d3.select( this.options.element ).select('svg').length > 0 ) {
	      addContainer.call(this, this.options.element, this.options.height, this.options.width );
	    }
	
	    /* Add core plugins to this instance */
	    this.addPlugin('bubbles', handleBubbles);
	    this.addPlugin('legend', addLegend);
	    this.addPlugin('arc', handleArcs);
	    this.addPlugin('labels', handleLabels);
	    this.addPlugin('graticule', addGraticule);
	
	    //append style block with basic hoverover styles
	    if ( ! this.options.disableDefaultStyles ) {
	      addStyleBlock();
	    }
	
	    return this.draw();
	  }
	
	  // resize map
	  Datamap.prototype.resize = function () {
	
	    var self = this;
	    var options = self.options;
	
	    if (options.responsive) {
	      var newsize = options.element.clientWidth,
	          oldsize = d3.select( options.element).select('svg').attr('data-width');
	
	      d3.select(options.element).select('svg').selectAll('g').attr('transform', 'scale(' + (newsize / oldsize) + ')');
	    }
	  }
	
	  // actually draw the features(states & countries)
	  Datamap.prototype.draw = function() {
	    //save off in a closure
	    var self = this;
	    var options = self.options;
	
	    //set projections and paths based on scope
	    var pathAndProjection = options.setProjection.apply(self, [options.element, options] );
	
	    this.path = pathAndProjection.path;
	    this.projection = pathAndProjection.projection;
	
	    //if custom URL for topojson data, retrieve it and render
	    if ( options.geographyConfig.dataUrl ) {
	      d3.json( options.geographyConfig.dataUrl, function(error, results) {
	        if ( error ) throw new Error(error);
	        self.customTopo = results;
	        draw( results );
	      });
	    }
	    else {
	      draw( this[options.scope + 'Topo'] || options.geographyConfig.dataJson);
	    }
	
	    return this;
	
	      function draw (data) {
	        // if fetching remote data, draw the map first then call `updateChoropleth`
	        if ( self.options.dataUrl ) {
	          //allow for csv or json data types
	          d3[self.options.dataType](self.options.dataUrl, function(data) {
	            //in the case of csv, transform data to object
	            if ( self.options.dataType === 'csv' && (data && data.slice) ) {
	              var tmpData = {};
	              for(var i = 0; i < data.length; i++) {
	                tmpData[data[i].id] = data[i];
	              }
	              data = tmpData;
	            }
	            Datamaps.prototype.updateChoropleth.call(self, data);
	          });
	        }
	        drawSubunits.call(self, data);
	        handleGeographyConfig.call(self);
	
	        if ( self.options.geographyConfig.popupOnHover || self.options.bubblesConfig.popupOnHover) {
	          hoverover = d3.select( self.options.element ).append('div')
	            .attr('class', 'datamaps-hoverover')
	            .style('z-index', 10001)
	            .style('position', 'absolute');
	        }
	
	        //fire off finished callback
	        self.options.done(self);
	      }
	  };
	  /**************************************
	                TopoJSON
	  ***************************************/
	  Datamap.prototype.worldTopo = {
	    "type": "Topology",
	    "objects": {
	        "world": {
	            "type": "GeometryCollection",
	            "geometries": [{
	                "type": "Polygon",
	                "properties": {
	                    "name": "Afghanistan"
	                },
	                "id": "AFG",
	                "arcs": [
	                    [0, 1, 2, 3, 4, 5]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Angola"
	                },
	                "id": "AGO",
	                "arcs": [
	                    [
	                        [6, 7, 8, 9]
	                    ],
	                    [
	                        [10, 11, 12]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Albania"
	                },
	                "id": "ALB",
	                "arcs": [
	                    [13, 14, 15, 16, 17]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "United Arab Emirates"
	                },
	                "id": "ARE",
	                "arcs": [
	                    [18, 19, 20, 21, 22]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Argentina"
	                },
	                "id": "ARG",
	                "arcs": [
	                    [
	                        [23, 24]
	                    ],
	                    [
	                        [25, 26, 27, 28, 29, 30]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Armenia"
	                },
	                "id": "ARM",
	                "arcs": [
	                    [31, 32, 33, 34, 35]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Antarctica"
	                },
	                "id": "ATA",
	                "arcs": [
	                    [
	                        [36]
	                    ],
	                    [
	                        [37]
	                    ],
	                    [
	                        [38]
	                    ],
	                    [
	                        [39]
	                    ],
	                    [
	                        [40]
	                    ],
	                    [
	                        [41]
	                    ],
	                    [
	                        [42]
	                    ],
	                    [
	                        [43]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "French Southern and Antarctic Lands"
	                },
	                "id": "ATF",
	                "arcs": [
	                    [44]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Australia"
	                },
	                "id": "AUS",
	                "arcs": [
	                    [
	                        [45]
	                    ],
	                    [
	                        [46]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Austria"
	                },
	                "id": "AUT",
	                "arcs": [
	                    [47, 48, 49, 50, 51, 52, 53]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Azerbaijan"
	                },
	                "id": "AZE",
	                "arcs": [
	                    [
	                        [54, -35]
	                    ],
	                    [
	                        [55, 56, -33, 57, 58]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Burundi"
	                },
	                "id": "BDI",
	                "arcs": [
	                    [59, 60, 61]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Belgium"
	                },
	                "id": "BEL",
	                "arcs": [
	                    [62, 63, 64, 65, 66]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Benin"
	                },
	                "id": "BEN",
	                "arcs": [
	                    [67, 68, 69, 70, 71]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Burkina Faso"
	                },
	                "id": "BFA",
	                "arcs": [
	                    [72, 73, 74, -70, 75, 76]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Bangladesh"
	                },
	                "id": "BGD",
	                "arcs": [
	                    [77, 78, 79]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Bulgaria"
	                },
	                "id": "BGR",
	                "arcs": [
	                    [80, 81, 82, 83, 84, 85]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "The Bahamas"
	                },
	                "id": "BHS",
	                "arcs": [
	                    [
	                        [86]
	                    ],
	                    [
	                        [87]
	                    ],
	                    [
	                        [88]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Bosnia and Herzegovina"
	                },
	                "id": "BIH",
	                "arcs": [
	                    [89, 90, 91]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Belarus"
	                },
	                "id": "BLR",
	                "arcs": [
	                    [92, 93, 94, 95, 96]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Belize"
	                },
	                "id": "BLZ",
	                "arcs": [
	                    [97, 98, 99]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Bolivia"
	                },
	                "id": "BOL",
	                "arcs": [
	                    [100, 101, 102, 103, -31]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Brazil"
	                },
	                "id": "BRA",
	                "arcs": [
	                    [-27, 104, -103, 105, 106, 107, 108, 109, 110, 111, 112]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Brunei"
	                },
	                "id": "BRN",
	                "arcs": [
	                    [113, 114]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Bhutan"
	                },
	                "id": "BTN",
	                "arcs": [
	                    [115, 116]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Botswana"
	                },
	                "id": "BWA",
	                "arcs": [
	                    [117, 118, 119, 120]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Central African Republic"
	                },
	                "id": "CAF",
	                "arcs": [
	                    [121, 122, 123, 124, 125, 126, 127]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Canada"
	                },
	                "id": "CAN",
	                "arcs": [
	                    [
	                        [128]
	                    ],
	                    [
	                        [129]
	                    ],
	                    [
	                        [130]
	                    ],
	                    [
	                        [131]
	                    ],
	                    [
	                        [132]
	                    ],
	                    [
	                        [133]
	                    ],
	                    [
	                        [134]
	                    ],
	                    [
	                        [135]
	                    ],
	                    [
	                        [136]
	                    ],
	                    [
	                        [137]
	                    ],
	                    [
	                        [138, 139, 140, 141]
	                    ],
	                    [
	                        [142]
	                    ],
	                    [
	                        [143]
	                    ],
	                    [
	                        [144]
	                    ],
	                    [
	                        [145]
	                    ],
	                    [
	                        [146]
	                    ],
	                    [
	                        [147]
	                    ],
	                    [
	                        [148]
	                    ],
	                    [
	                        [149]
	                    ],
	                    [
	                        [150]
	                    ],
	                    [
	                        [151]
	                    ],
	                    [
	                        [152]
	                    ],
	                    [
	                        [153]
	                    ],
	                    [
	                        [154]
	                    ],
	                    [
	                        [155]
	                    ],
	                    [
	                        [156]
	                    ],
	                    [
	                        [157]
	                    ],
	                    [
	                        [158]
	                    ],
	                    [
	                        [159]
	                    ],
	                    [
	                        [160]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Switzerland"
	                },
	                "id": "CHE",
	                "arcs": [
	                    [-51, 161, 162, 163]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Chile"
	                },
	                "id": "CHL",
	                "arcs": [
	                    [
	                        [-24, 164]
	                    ],
	                    [
	                        [-30, 165, 166, -101]
	                    ]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "China"
	                },
	                "id": "CHN",
	                "arcs": [
	                    [
	                        [167]
	                    ],
	                    [
	                        [168, 169, 170, 171, 172, 173, -117, 174, 175, 176, 177, -4, 178, 179, 180, 181, 182, 183]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ivory Coast"
	                },
	                "id": "CIV",
	                "arcs": [
	                    [184, 185, 186, 187, -73, 188]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Cameroon"
	                },
	                "id": "CMR",
	                "arcs": [
	                    [189, 190, 191, 192, 193, 194, -128, 195]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Democratic Republic of the Congo"
	                },
	                "id": "COD",
	                "arcs": [
	                    [196, 197, -60, 198, 199, -10, 200, -13, 201, -126, 202]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Republic of the Congo"
	                },
	                "id": "COG",
	                "arcs": [
	                    [-12, 203, 204, -196, -127, -202]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Colombia"
	                },
	                "id": "COL",
	                "arcs": [
	                    [205, 206, 207, 208, 209, -107, 210]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Costa Rica"
	                },
	                "id": "CRI",
	                "arcs": [
	                    [211, 212, 213, 214]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Cuba"
	                },
	                "id": "CUB",
	                "arcs": [
	                    [215]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Northern Cyprus"
	                },
	                "id": "-99",
	                "arcs": [
	                    [216, 217]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Cyprus"
	                },
	                "id": "CYP",
	                "arcs": [
	                    [218, -218]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Czech Republic"
	                },
	                "id": "CZE",
	                "arcs": [
	                    [-53, 219, 220, 221]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Germany"
	                },
	                "id": "DEU",
	                "arcs": [
	                    [222, 223, -220, -52, -164, 224, 225, -64, 226, 227, 228]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Djibouti"
	                },
	                "id": "DJI",
	                "arcs": [
	                    [229, 230, 231, 232]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Denmark"
	                },
	                "id": "DNK",
	                "arcs": [
	                    [
	                        [233]
	                    ],
	                    [
	                        [-229, 234]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Dominican Republic"
	                },
	                "id": "DOM",
	                "arcs": [
	                    [235, 236]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Algeria"
	                },
	                "id": "DZA",
	                "arcs": [
	                    [237, 238, 239, 240, 241, 242, 243, 244]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ecuador"
	                },
	                "id": "ECU",
	                "arcs": [
	                    [245, -206, 246]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Egypt"
	                },
	                "id": "EGY",
	                "arcs": [
	                    [247, 248, 249, 250, 251]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Eritrea"
	                },
	                "id": "ERI",
	                "arcs": [
	                    [252, 253, 254, -233]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Spain"
	                },
	                "id": "ESP",
	                "arcs": [
	                    [255, 256, 257, 258]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Estonia"
	                },
	                "id": "EST",
	                "arcs": [
	                    [259, 260, 261]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ethiopia"
	                },
	                "id": "ETH",
	                "arcs": [
	                    [-232, 262, 263, 264, 265, 266, 267, -253]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Finland"
	                },
	                "id": "FIN",
	                "arcs": [
	                    [268, 269, 270, 271]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Fiji"
	                },
	                "id": "FJI",
	                "arcs": [
	                    [
	                        [272]
	                    ],
	                    [
	                        [273, 274]
	                    ],
	                    [
	                        [275, -275]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Falkland Islands"
	                },
	                "id": "FLK",
	                "arcs": [
	                    [276]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "France"
	                },
	                "id": "FRA",
	                "arcs": [
	                    [
	                        [277]
	                    ],
	                    [
	                        [278, -225, -163, 279, 280, -257, 281, -66]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "French Guiana"
	                },
	                "id": "GUF",
	                "arcs": [
	                    [282, 283, 284, 285, -111]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Gabon"
	                },
	                "id": "GAB",
	                "arcs": [
	                    [286, 287, -190, -205]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "United Kingdom"
	                },
	                "id": "GBR",
	                "arcs": [
	                    [
	                        [288, 289]
	                    ],
	                    [
	                        [290]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Georgia"
	                },
	                "id": "GEO",
	                "arcs": [
	                    [291, 292, -58, -32, 293]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ghana"
	                },
	                "id": "GHA",
	                "arcs": [
	                    [294, -189, -77, 295]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Guinea"
	                },
	                "id": "GIN",
	                "arcs": [
	                    [296, 297, 298, 299, 300, 301, -187]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Gambia"
	                },
	                "id": "GMB",
	                "arcs": [
	                    [302, 303]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Guinea Bissau"
	                },
	                "id": "GNB",
	                "arcs": [
	                    [304, 305, -300]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Equatorial Guinea"
	                },
	                "id": "GNQ",
	                "arcs": [
	                    [306, -191, -288]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Greece"
	                },
	                "id": "GRC",
	                "arcs": [
	                    [
	                        [307]
	                    ],
	                    [
	                        [308, -15, 309, -84, 310]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Greenland"
	                },
	                "id": "GRL",
	                "arcs": [
	                    [311]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Guatemala"
	                },
	                "id": "GTM",
	                "arcs": [
	                    [312, 313, -100, 314, 315, 316]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Guyana"
	                },
	                "id": "GUY",
	                "arcs": [
	                    [317, 318, -109, 319]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Honduras"
	                },
	                "id": "HND",
	                "arcs": [
	                    [320, 321, -316, 322, 323]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Croatia"
	                },
	                "id": "HRV",
	                "arcs": [
	                    [324, -92, 325, 326, 327, 328]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Haiti"
	                },
	                "id": "HTI",
	                "arcs": [
	                    [-237, 329]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Hungary"
	                },
	                "id": "HUN",
	                "arcs": [
	                    [-48, 330, 331, 332, 333, -329, 334]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Indonesia"
	                },
	                "id": "IDN",
	                "arcs": [
	                    [
	                        [335]
	                    ],
	                    [
	                        [336, 337]
	                    ],
	                    [
	                        [338]
	                    ],
	                    [
	                        [339]
	                    ],
	                    [
	                        [340]
	                    ],
	                    [
	                        [341]
	                    ],
	                    [
	                        [342]
	                    ],
	                    [
	                        [343]
	                    ],
	                    [
	                        [344, 345]
	                    ],
	                    [
	                        [346]
	                    ],
	                    [
	                        [347]
	                    ],
	                    [
	                        [348, 349]
	                    ],
	                    [
	                        [350]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "India"
	                },
	                "id": "IND",
	                "arcs": [
	                    [-177, 351, -175, -116, -174, 352, -80, 353, 354]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ireland"
	                },
	                "id": "IRL",
	                "arcs": [
	                    [355, -289]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Iran"
	                },
	                "id": "IRN",
	                "arcs": [
	                    [356, -6, 357, 358, 359, 360, -55, -34, -57, 361]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Iraq"
	                },
	                "id": "IRQ",
	                "arcs": [
	                    [362, 363, 364, 365, 366, 367, -360]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Iceland"
	                },
	                "id": "ISL",
	                "arcs": [
	                    [368]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Israel"
	                },
	                "id": "ISR",
	                "arcs": [
	                    [369, 370, 371, -252, 372, 373, 374]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Italy"
	                },
	                "id": "ITA",
	                "arcs": [
	                    [
	                        [375]
	                    ],
	                    [
	                        [376]
	                    ],
	                    [
	                        [377, 378, -280, -162, -50]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Jamaica"
	                },
	                "id": "JAM",
	                "arcs": [
	                    [379]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Jordan"
	                },
	                "id": "JOR",
	                "arcs": [
	                    [-370, 380, -366, 381, 382, -372, 383]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Japan"
	                },
	                "id": "JPN",
	                "arcs": [
	                    [
	                        [384]
	                    ],
	                    [
	                        [385]
	                    ],
	                    [
	                        [386]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Kazakhstan"
	                },
	                "id": "KAZ",
	                "arcs": [
	                    [387, 388, 389, 390, -181, 391]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Kenya"
	                },
	                "id": "KEN",
	                "arcs": [
	                    [392, 393, 394, 395, -265, 396]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Kyrgyzstan"
	                },
	                "id": "KGZ",
	                "arcs": [
	                    [-392, -180, 397, 398]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Cambodia"
	                },
	                "id": "KHM",
	                "arcs": [
	                    [399, 400, 401, 402]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "South Korea"
	                },
	                "id": "KOR",
	                "arcs": [
	                    [403, 404]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Kosovo"
	                },
	                "id": "-99",
	                "arcs": [
	                    [-18, 405, 406, 407]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Kuwait"
	                },
	                "id": "KWT",
	                "arcs": [
	                    [408, 409, -364]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Laos"
	                },
	                "id": "LAO",
	                "arcs": [
	                    [410, 411, -172, 412, -401]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Lebanon"
	                },
	                "id": "LBN",
	                "arcs": [
	                    [-374, 413, 414]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Liberia"
	                },
	                "id": "LBR",
	                "arcs": [
	                    [415, 416, -297, -186]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Libya"
	                },
	                "id": "LBY",
	                "arcs": [
	                    [417, -245, 418, 419, -250, 420, 421]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Sri Lanka"
	                },
	                "id": "LKA",
	                "arcs": [
	                    [422]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Lesotho"
	                },
	                "id": "LSO",
	                "arcs": [
	                    [423]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Lithuania"
	                },
	                "id": "LTU",
	                "arcs": [
	                    [424, 425, 426, -93, 427]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Luxembourg"
	                },
	                "id": "LUX",
	                "arcs": [
	                    [-226, -279, -65]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Latvia"
	                },
	                "id": "LVA",
	                "arcs": [
	                    [428, -262, 429, -94, -427]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Morocco"
	                },
	                "id": "MAR",
	                "arcs": [
	                    [-242, 430, 431]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Moldova"
	                },
	                "id": "MDA",
	                "arcs": [
	                    [432, 433]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Madagascar"
	                },
	                "id": "MDG",
	                "arcs": [
	                    [434]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Mexico"
	                },
	                "id": "MEX",
	                "arcs": [
	                    [435, -98, -314, 436, 437]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Macedonia"
	                },
	                "id": "MKD",
	                "arcs": [
	                    [-408, 438, -85, -310, -14]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Mali"
	                },
	                "id": "MLI",
	                "arcs": [
	                    [439, -239, 440, -74, -188, -302, 441]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Myanmar"
	                },
	                "id": "MMR",
	                "arcs": [
	                    [442, -78, -353, -173, -412, 443]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Montenegro"
	                },
	                "id": "MNE",
	                "arcs": [
	                    [444, -326, -91, 445, -406, -17]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Mongolia"
	                },
	                "id": "MNG",
	                "arcs": [
	                    [446, -183]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Mozambique"
	                },
	                "id": "MOZ",
	                "arcs": [
	                    [447, 448, 449, 450, 451, 452, 453, 454]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Mauritania"
	                },
	                "id": "MRT",
	                "arcs": [
	                    [455, 456, 457, -240, -440]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Malawi"
	                },
	                "id": "MWI",
	                "arcs": [
	                    [-455, 458, 459]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Malaysia"
	                },
	                "id": "MYS",
	                "arcs": [
	                    [
	                        [460, 461]
	                    ],
	                    [
	                        [-349, 462, -115, 463]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Namibia"
	                },
	                "id": "NAM",
	                "arcs": [
	                    [464, -8, 465, -119, 466]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "New Caledonia"
	                },
	                "id": "NCL",
	                "arcs": [
	                    [467]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Niger"
	                },
	                "id": "NER",
	                "arcs": [
	                    [-75, -441, -238, -418, 468, -194, 469, -71]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Nigeria"
	                },
	                "id": "NGA",
	                "arcs": [
	                    [470, -72, -470, -193]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Nicaragua"
	                },
	                "id": "NIC",
	                "arcs": [
	                    [471, -324, 472, -213]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Netherlands"
	                },
	                "id": "NLD",
	                "arcs": [
	                    [-227, -63, 473]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Norway"
	                },
	                "id": "NOR",
	                "arcs": [
	                    [
	                        [474, -272, 475, 476]
	                    ],
	                    [
	                        [477]
	                    ],
	                    [
	                        [478]
	                    ],
	                    [
	                        [479]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Nepal"
	                },
	                "id": "NPL",
	                "arcs": [
	                    [-352, -176]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "New Zealand"
	                },
	                "id": "NZL",
	                "arcs": [
	                    [
	                        [480]
	                    ],
	                    [
	                        [481]
	                    ]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Oman"
	                },
	                "id": "OMN",
	                "arcs": [
	                    [
	                        [482, 483, -22, 484]
	                    ],
	                    [
	                        [-20, 485]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Pakistan"
	                },
	                "id": "PAK",
	                "arcs": [
	                    [-178, -355, 486, -358, -5]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Panama"
	                },
	                "id": "PAN",
	                "arcs": [
	                    [487, -215, 488, -208]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Peru"
	                },
	                "id": "PER",
	                "arcs": [
	                    [-167, 489, -247, -211, -106, -102]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Philippines"
	                },
	                "id": "PHL",
	                "arcs": [
	                    [
	                        [490]
	                    ],
	                    [
	                        [491]
	                    ],
	                    [
	                        [492]
	                    ],
	                    [
	                        [493]
	                    ],
	                    [
	                        [494]
	                    ],
	                    [
	                        [495]
	                    ],
	                    [
	                        [496]
	                    ]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Papua New Guinea"
	                },
	                "id": "PNG",
	                "arcs": [
	                    [
	                        [497]
	                    ],
	                    [
	                        [498]
	                    ],
	                    [
	                        [-345, 499]
	                    ],
	                    [
	                        [500]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Poland"
	                },
	                "id": "POL",
	                "arcs": [
	                    [-224, 501, 502, -428, -97, 503, 504, -221]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Puerto Rico"
	                },
	                "id": "PRI",
	                "arcs": [
	                    [505]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "North Korea"
	                },
	                "id": "PRK",
	                "arcs": [
	                    [506, 507, -405, 508, -169]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Portugal"
	                },
	                "id": "PRT",
	                "arcs": [
	                    [-259, 509]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Paraguay"
	                },
	                "id": "PRY",
	                "arcs": [
	                    [-104, -105, -26]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Qatar"
	                },
	                "id": "QAT",
	                "arcs": [
	                    [510, 511]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Romania"
	                },
	                "id": "ROU",
	                "arcs": [
	                    [512, -434, 513, 514, -81, 515, -333]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Russia"
	                },
	                "id": "RUS",
	                "arcs": [
	                    [
	                        [516]
	                    ],
	                    [
	                        [-503, 517, -425]
	                    ],
	                    [
	                        [518, 519]
	                    ],
	                    [
	                        [520]
	                    ],
	                    [
	                        [521]
	                    ],
	                    [
	                        [522]
	                    ],
	                    [
	                        [523]
	                    ],
	                    [
	                        [524]
	                    ],
	                    [
	                        [525]
	                    ],
	                    [
	                        [526, -507, -184, -447, -182, -391, 527, -59, -293, 528, 529, -95, -430, -261, 530, -269, -475, 531, -520]
	                    ],
	                    [
	                        [532]
	                    ],
	                    [
	                        [533]
	                    ],
	                    [
	                        [534]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Rwanda"
	                },
	                "id": "RWA",
	                "arcs": [
	                    [535, -61, -198, 536]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Western Sahara"
	                },
	                "id": "ESH",
	                "arcs": [
	                    [-241, -458, 537, -431]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Saudi Arabia"
	                },
	                "id": "SAU",
	                "arcs": [
	                    [538, -382, -365, -410, 539, -512, 540, -23, -484, 541]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Sudan"
	                },
	                "id": "SDN",
	                "arcs": [
	                    [542, 543, -123, 544, -421, -249, 545, -254, -268, 546]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "South Sudan"
	                },
	                "id": "SSD",
	                "arcs": [
	                    [547, -266, -396, 548, -203, -125, 549, -543]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Senegal"
	                },
	                "id": "SEN",
	                "arcs": [
	                    [550, -456, -442, -301, -306, 551, -304]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Solomon Islands"
	                },
	                "id": "SLB",
	                "arcs": [
	                    [
	                        [552]
	                    ],
	                    [
	                        [553]
	                    ],
	                    [
	                        [554]
	                    ],
	                    [
	                        [555]
	                    ],
	                    [
	                        [556]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Sierra Leone"
	                },
	                "id": "SLE",
	                "arcs": [
	                    [557, -298, -417]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "El Salvador"
	                },
	                "id": "SLV",
	                "arcs": [
	                    [558, -317, -322]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Somaliland"
	                },
	                "id": "-99",
	                "arcs": [
	                    [-263, -231, 559, 560]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Somalia"
	                },
	                "id": "SOM",
	                "arcs": [
	                    [-397, -264, -561, 561]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Republic of Serbia"
	                },
	                "id": "SRB",
	                "arcs": [
	                    [-86, -439, -407, -446, -90, -325, -334, -516]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Suriname"
	                },
	                "id": "SUR",
	                "arcs": [
	                    [562, -285, 563, -283, -110, -319]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Slovakia"
	                },
	                "id": "SVK",
	                "arcs": [
	                    [-505, 564, -331, -54, -222]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Slovenia"
	                },
	                "id": "SVN",
	                "arcs": [
	                    [-49, -335, -328, 565, -378]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Sweden"
	                },
	                "id": "SWE",
	                "arcs": [
	                    [-476, -271, 566]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Swaziland"
	                },
	                "id": "SWZ",
	                "arcs": [
	                    [567, -451]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Syria"
	                },
	                "id": "SYR",
	                "arcs": [
	                    [-381, -375, -415, 568, 569, -367]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Chad"
	                },
	                "id": "TCD",
	                "arcs": [
	                    [-469, -422, -545, -122, -195]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Togo"
	                },
	                "id": "TGO",
	                "arcs": [
	                    [570, -296, -76, -69]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Thailand"
	                },
	                "id": "THA",
	                "arcs": [
	                    [571, -462, 572, -444, -411, -400]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Tajikistan"
	                },
	                "id": "TJK",
	                "arcs": [
	                    [-398, -179, -3, 573]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Turkmenistan"
	                },
	                "id": "TKM",
	                "arcs": [
	                    [-357, 574, -389, 575, -1]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "East Timor"
	                },
	                "id": "TLS",
	                "arcs": [
	                    [576, -337]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Trinidad and Tobago"
	                },
	                "id": "TTO",
	                "arcs": [
	                    [577]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Tunisia"
	                },
	                "id": "TUN",
	                "arcs": [
	                    [-244, 578, -419]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Turkey"
	                },
	                "id": "TUR",
	                "arcs": [
	                    [
	                        [-294, -36, -361, -368, -570, 579]
	                    ],
	                    [
	                        [-311, -83, 580]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Taiwan"
	                },
	                "id": "TWN",
	                "arcs": [
	                    [581]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "United Republic of Tanzania"
	                },
	                "id": "TZA",
	                "arcs": [
	                    [-394, 582, -448, -460, 583, -199, -62, -536, 584]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Uganda"
	                },
	                "id": "UGA",
	                "arcs": [
	                    [-537, -197, -549, -395, -585]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Ukraine"
	                },
	                "id": "UKR",
	                "arcs": [
	                    [-530, 585, -514, -433, -513, -332, -565, -504, -96]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Uruguay"
	                },
	                "id": "URY",
	                "arcs": [
	                    [-113, 586, -28]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "United States of America"
	                },
	                "id": "USA",
	                "arcs": [
	                    [
	                        [587]
	                    ],
	                    [
	                        [588]
	                    ],
	                    [
	                        [589]
	                    ],
	                    [
	                        [590]
	                    ],
	                    [
	                        [591]
	                    ],
	                    [
	                        [592, -438, 593, -139]
	                    ],
	                    [
	                        [594]
	                    ],
	                    [
	                        [595]
	                    ],
	                    [
	                        [596]
	                    ],
	                    [
	                        [-141, 597]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Uzbekistan"
	                },
	                "id": "UZB",
	                "arcs": [
	                    [-576, -388, -399, -574, -2]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Venezuela"
	                },
	                "id": "VEN",
	                "arcs": [
	                    [598, -320, -108, -210]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Vietnam"
	                },
	                "id": "VNM",
	                "arcs": [
	                    [599, -402, -413, -171]
	                ]
	            }, {
	                "type": "MultiPolygon",
	                "properties": {
	                    "name": "Vanuatu"
	                },
	                "id": "VUT",
	                "arcs": [
	                    [
	                        [600]
	                    ],
	                    [
	                        [601]
	                    ]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "West Bank"
	                },
	                "id": "PSE",
	                "arcs": [
	                    [-384, -371]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Yemen"
	                },
	                "id": "YEM",
	                "arcs": [
	                    [602, -542, -483]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "South Africa"
	                },
	                "id": "ZAF",
	                "arcs": [
	                    [-467, -118, 603, -452, -568, -450, 604],
	                    [-424]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Zambia"
	                },
	                "id": "ZMB",
	                "arcs": [
	                    [-459, -454, 605, -120, -466, -7, -200, -584]
	                ]
	            }, {
	                "type": "Polygon",
	                "properties": {
	                    "name": "Zimbabwe"
	                },
	                "id": "ZWE",
	                "arcs": [
	                    [-604, -121, -606, -453]
	                ]
	            }]
	        }
	    },
	    "arcs": [
	        [
	            [6700, 7164],
	            [28, -23],
	            [21, 8],
	            [6, 27],
	            [22, 9],
	            [15, 18],
	            [6, 47],
	            [23, 11],
	            [5, 21],
	            [13, -15],
	            [8, -2]
	        ],
	        [
	            [6847, 7265],
	            [16, -1],
	            [20, -12]
	        ],
	        [
	            [6883, 7252],
	            [9, -7],
	            [20, 19],
	            [9, -12],
	            [9, 27],
	            [17, -1],
	            [4, 9],
	            [3, 24],
	            [12, 20],
	            [15, -13],
	            [-3, -18],
	            [9, -3],
	            [-3, -50],
	            [11, -19],
	            [10, 12],
	            [12, 6],
	            [17, 27],
	            [19, -5],
	            [29, 0]
	        ],
	        [
	            [7082, 7268],
	            [5, -17]
	        ],
	        [
	            [7087, 7251],
	            [-16, -6],
	            [-14, -11],
	            [-32, -7],
	            [-30, -13],
	            [-16, -25],
	            [6, -25],
	            [4, -30],
	            [-14, -25],
	            [1, -22],
	            [-8, -22],
	            [-26, 2],
	            [11, -39],
	            [-18, -15],
	            [-12, -35],
	            [2, -36],
	            [-11, -16],
	            [-10, 5],
	            [-22, -8],
	            [-3, -16],
	            [-20, 0],
	            [-16, -34],
	            [-1, -50],
	            [-36, -24],
	            [-19, 5],
	            [-6, -13],
	            [-16, 7],
	            [-28, -8],
	            [-47, 30]
	        ],
	        [
	            [6690, 6820],
	            [25, 53],
	            [-2, 38],
	            [-21, 10],
	            [-2, 38],
	            [-9, 47],
	            [12, 32],
	            [-12, 9],
	            [7, 43],
	            [12, 74]
	        ],
	        [
	            [5664, 4412],
	            [3, -18],
	            [-4, -29],
	            [5, -28],
	            [-4, -22],
	            [3, -20],
	            [-58, 1],
	            [-2, -188],
	            [19, -49],
	            [18, -37]
	        ],
	        [
	            [5644, 4022],
	            [-51, -24],
	            [-67, 9],
	            [-19, 28],
	            [-113, -3],
	            [-4, -4],
	            [-17, 27],
	            [-18, 2],
	            [-16, -10],
	            [-14, -12]
	        ],
	        [
	            [5325, 4035],
	            [-2, 38],
	            [4, 51],
	            [9, 55],
	            [2, 25],
	            [9, 53],
	            [6, 24],
	            [16, 39],
	            [9, 26],
	            [3, 44],
	            [-1, 34],
	            [-9, 21],
	            [-7, 36],
	            [-7, 35],
	            [2, 12],
	            [8, 24],
	            [-8, 57],
	            [-6, 39],
	            [-14, 38],
	            [3, 11]
	        ],
	        [
	            [5342, 4697],
	            [11, 8],
	            [8, -1],
	            [10, 7],
	            [82, -1],
	            [7, -44],
	            [8, -35],
	            [6, -19],
	            [11, -31],
	            [18, 5],
	            [9, 8],
	            [16, -8],
	            [4, 14],
	            [7, 35],
	            [17, 2],
	            [2, 10],
	            [14, 1],
	            [-3, -22],
	            [34, 1],
	            [1, -37],
	            [5, -23],
	            [-4, -36],
	            [2, -36],
	            [9, -22],
	            [-1, -70],
	            [7, 5],
	            [12, -1],
	            [17, 8],
	            [13, -3]
	        ],
	        [
	            [5338, 4715],
	            [-8, 45]
	        ],
	        [
	            [5330, 4760],
	            [12, 25],
	            [8, 10],
	            [10, -20]
	        ],
	        [
	            [5360, 4775],
	            [-10, -12],
	            [-4, -16],
	            [-1, -25],
	            [-7, -7]
	        ],
	        [
	            [5571, 7530],
	            [-3, -20],
	            [4, -25],
	            [11, -15]
	        ],
	        [
	            [5583, 7470],
	            [0, -15],
	            [-9, -9],
	            [-2, -19],
	            [-13, -29]
	        ],
	        [
	            [5559, 7398],
	            [-5, 5],
	            [0, 13],
	            [-15, 19],
	            [-3, 29],
	            [2, 40],
	            [4, 18],
	            [-4, 10]
	        ],
	        [
	            [5538, 7532],
	            [-2, 18],
	            [12, 29],
	            [1, -11],
	            [8, 6]
	        ],
	        [
	            [5557, 7574],
	            [6, -16],
	            [7, -6],
	            [1, -22]
	        ],
	        [
	            [6432, 6490],
	            [5, 3],
	            [1, -16],
	            [22, 9],
	            [23, -2],
	            [17, -1],
	            [19, 39],
	            [20, 38],
	            [18, 37]
	        ],
	        [
	            [6557, 6597],
	            [5, -20]
	        ],
	        [
	            [6562, 6577],
	            [4, -47]
	        ],
	        [
	            [6566, 6530],
	            [-14, 0],
	            [-3, -39],
	            [5, -8],
	            [-12, -12],
	            [0, -24],
	            [-8, -24],
	            [-1, -24]
	        ],
	        [
	            [6533, 6399],
	            [-6, -12],
	            [-83, 29],
	            [-11, 60],
	            [-1, 14]
	        ],
	        [
	            [3140, 1814],
	            [-17, 2],
	            [-30, 0],
	            [0, 132]
	        ],
	        [
	            [3093, 1948],
	            [11, -27],
	            [14, -45],
	            [36, -35],
	            [39, -15],
	            [-13, -30],
	            [-26, -2],
	            [-14, 20]
	        ],
	        [
	            [3258, 3743],
	            [51, -96],
	            [23, -9],
	            [34, -44],
	            [29, -23],
	            [4, -26],
	            [-28, -90],
	            [28, -16],
	            [32, -9],
	            [22, 10],
	            [25, 45],
	            [4, 52]
	        ],
	        [
	            [3482, 3537],
	            [14, 11],
	            [14, -34],
	            [-1, -47],
	            [-23, -33],
	            [-19, -24],
	            [-31, -57],
	            [-37, -81]
	        ],
	        [
	            [3399, 3272],
	            [-7, -47],
	            [-7, -61],
	            [0, -58],
	            [-6, -14],
	            [-2, -38]
	        ],
	        [
	            [3377, 3054],
	            [-2, -31],
	            [35, -50],
	            [-4, -41],
	            [18, -26],
	            [-2, -29],
	            [-26, -75],
	            [-42, -32],
	            [-55, -12],
	            [-31, 6],
	            [6, -36],
	            [-6, -44],
	            [5, -30],
	            [-16, -20],
	            [-29, -8],
	            [-26, 21],
	            [-11, -15],
	            [4, -59],
	            [18, -18],
	            [16, 19],
	            [8, -31],
	            [-26, -18],
	            [-22, -37],
	            [-4, -59],
	            [-7, -32],
	            [-26, 0],
	            [-22, -31],
	            [-8, -44],
	            [28, -43],
	            [26, -12],
	            [-9, -53],
	            [-33, -33],
	            [-18, -70],
	            [-25, -23],
	            [-12, -28],
	            [9, -61],
	            [19, -34],
	            [-12, 3]
	        ],
	        [
	            [3095, 1968],
	            [-26, 9],
	            [-67, 8],
	            [-11, 34],
	            [0, 45],
	            [-18, -4],
	            [-10, 21],
	            [-3, 63],
	            [22, 26],
	            [9, 37],
	            [-4, 30],
	            [15, 51],
	            [10, 78],
	            [-3, 35],
	            [12, 11],
	            [-3, 22],
	            [-13, 12],
	            [10, 25],
	            [-13, 22],
	            [-6, 68],
	            [11, 12],
	            [-5, 72],
	            [7, 61],
	            [7, 52],
	            [17, 22],
	            [-9, 58],
	            [0, 54],
	            [21, 38],
	            [-1, 50],
	            [16, 57],
	            [0, 55],
	            [-7, 11],
	            [-13, 102],
	            [17, 60],
	            [-2, 58],
	            [10, 53],
	            [18, 56],
	            [20, 36],
	            [-9, 24],
	            [6, 19],
	            [-1, 98],
	            [30, 29],
	            [10, 62],
	            [-3, 14]
	        ],
	        [
	            [3136, 3714],
	            [23, 54],
	            [36, -15],
	            [16, -42],
	            [11, 47],
	            [32, -2],
	            [4, -13]
	        ],
	        [
	            [6210, 7485],
	            [39, 9]
	        ],
	        [
	            [6249, 7494],
	            [5, -15],
	            [11, -10],
	            [-6, -15],
	            [15, -21],
	            [-8, -18],
	            [12, -16],
	            [13, -10],
	            [0, -41]
	        ],
	        [
	            [6291, 7348],
	            [-10, -2]
	        ],
	        [
	            [6281, 7346],
	            [-11, 34],
	            [0, 10],
	            [-12, -1],
	            [-9, 16],
	            [-5, -1]
	        ],
	        [
	            [6244, 7404],
	            [-11, 17],
	            [-21, 15],
	            [3, 28],
	            [-5, 21]
	        ],
	        [
	            [3345, 329],
	            [-8, -30],
	            [-8, -27],
	            [-59, 8],
	            [-62, -3],
	            [-34, 20],
	            [0, 2],
	            [-16, 17],
	            [63, -2],
	            [60, -6],
	            [20, 24],
	            [15, 21],
	            [29, -24]
	        ],
	        [
	            [577, 361],
	            [-53, -8],
	            [-36, 21],
	            [-17, 21],
	            [-1, 3],
	            [-18, 16],
	            [17, 22],
	            [52, -9],
	            [28, -18],
	            [21, -21],
	            [7, -27]
	        ],
	        [
	            [3745, 447],
	            [35, -26],
	            [12, -36],
	            [3, -25],
	            [1, -30],
	            [-43, -19],
	            [-45, -15],
	            [-52, -14],
	            [-59, -11],
	            [-65, 3],
	            [-37, 20],
	            [5, 24],
	            [59, 16],
	            [24, 20],
	            [18, 26],
	            [12, 22],
	            [17, 20],
	            [18, 25],
	            [14, 0],
	            [41, 12],
	            [42, -12]
	        ],
	        [
	            [1633, 715],
	            [36, -9],
	            [33, 10],
	            [-16, -20],
	            [-26, -15],
	            [-39, 4],
	            [-27, 21],
	            [6, 20],
	            [33, -11]
	        ],
	        [
	            [1512, 716],
	            [43, -23],
	            [-17, 3],
	            [-36, 5],
	            [-38, 17],
	            [20, 12],
	            [28, -14]
	        ],
	        [
	            [2250, 808],
	            [31, -8],
	            [30, 7],
	            [17, -34],
	            [-22, 5],
	            [-34, -2],
	            [-34, 2],
	            [-38, -4],
	            [-28, 12],
	            [-15, 24],
	            [18, 11],
	            [35, -8],
	            [40, -5]
	        ],
	        [
	            [3098, 866],
	            [4, -27],
	            [-5, -23],
	            [-8, -22],
	            [-33, -8],
	            [-31, -12],
	            [-36, 1],
	            [14, 24],
	            [-33, -9],
	            [-31, -8],
	            [-21, 18],
	            [-2, 24],
	            [30, 23],
	            [20, 7],
	            [32, -2],
	            [8, 30],
	            [1, 22],
	            [0, 47],
	            [16, 28],
	            [25, 9],
	            [15, -22],
	            [6, -22],
	            [12, -26],
	            [10, -26],
	            [7, -26]
	        ],
	        [
	            [3371, 1268],
	            [-11, -13],
	            [-21, 9],
	            [-23, -6],
	            [-19, -14],
	            [-20, -15],
	            [-14, -17],
	            [-4, -23],
	            [2, -22],
	            [13, -20],
	            [-19, -14],
	            [-26, -4],
	            [-15, -20],
	            [-17, -19],
	            [-17, -25],
	            [-4, -22],
	            [9, -24],
	            [15, -19],
	            [23, -14],
	            [21, -18],
	            [12, -23],
	            [6, -22],
	            [8, -24],
	            [13, -19],
	            [8, -22],
	            [4, -55],
	            [8, -22],
	            [2, -23],
	            [9, -23],
	            [-4, -31],
	            [-15, -24],
	            [-17, -20],
	            [-37, -8],
	            [-12, -21],
	            [-17, -20],
	            [-42, -22],
	            [-37, -9],
	            [-35, -13],
	            [-37, -13],
	            [-22, -24],
	            [-45, -2],
	            [-49, 2],
	            [-44, -4],
	            [-47, 0],
	            [9, -24],
	            [42, -10],
	            [31, -16],
	            [18, -21],
	            [-31, -19],
	            [-48, 6],
	            [-40, -15],
	            [-2, -24],
	            [-1, -23],
	            [33, -20],
	            [6, -22],
	            [35, -22],
	            [59, -9],
	            [50, -16],
	            [40, -19],
	            [50, -18],
	            [70, -10],
	            [68, -16],
	            [47, -17],
	            [52, -20],
	            [27, -28],
	            [13, -22],
	            [34, 21],
	            [46, 17],
	            [48, 19],
	            [58, 15],
	            [49, 16],
	            [69, 1],
	            [68, -8],
	            [56, -14],
	            [18, 26],
	            [39, 17],
	            [70, 1],
	            [55, 13],
	            [52, 13],
	            [58, 8],
	            [62, 10],
	            [43, 15],
	            [-20, 21],
	            [-12, 21],
	            [0, 22],
	            [-54, -2],
	            [-57, -10],
	            [-54, 0],
	            [-8, 22],
	            [4, 44],
	            [12, 13],
	            [40, 14],
	            [47, 14],
	            [34, 17],
	            [33, 18],
	            [25, 23],
	            [38, 10],
	            [38, 8],
	            [19, 5],
	            [43, 2],
	            [41, 8],
	            [34, 12],
	            [34, 14],
	            [30, 14],
	            [39, 18],
	            [24, 20],
	            [26, 17],
	            [9, 24],
	            [-30, 13],
	            [10, 25],
	            [18, 18],
	            [29, 12],
	            [31, 14],
	            [28, 18],
	            [22, 23],
	            [13, 28],
	            [21, 16],
	            [33, -3],
	            [13, -20],
	            [34, -2],
	            [1, 22],
	            [14, 23],
	            [30, -6],
	            [7, -22],
	            [33, -3],
	            [36, 10],
	            [35, 7],
	            [31, -3],
	            [12, -25],
	            [31, 20],
	            [28, 10],
	            [31, 9],
	            [31, 8],
	            [29, 14],
	            [31, 9],
	            [24, 13],
	            [17, 20],
	            [20, -15],
	            [29, 8],
	            [20, -27],
	            [16, -21],
	            [32, 11],
	            [12, 24],
	            [28, 16],
	            [37, -4],
	            [11, -22],
	            [22, 22],
	            [30, 7],
	            [33, 3],
	            [29, -2],
	            [31, -7],
	            [30, -3],
	            [13, -20],
	            [18, -17],
	            [31, 10],
	            [32, 3],
	            [32, 0],
	            [31, 1],
	            [28, 8],
	            [29, 7],
	            [25, 16],
	            [26, 11],
	            [28, 5],
	            [21, 17],
	            [15, 32],
	            [16, 20],
	            [29, -10],
	            [11, -21],
	            [24, -13],
	            [29, 4],
	            [19, -21],
	            [21, -15],
	            [28, 14],
	            [10, 26],
	            [25, 10],
	            [29, 20],
	            [27, 8],
	            [33, 11],
	            [22, 13],
	            [22, 14],
	            [22, 13],
	            [26, -7],
	            [25, 21],
	            [18, 16],
	            [26, -1],
	            [23, 14],
	            [6, 21],
	            [23, 16],
	            [23, 11],
	            [28, 10],
	            [25, 4],
	            [25, -3],
	            [26, -6],
	            [22, -16],
	            [3, -26],
	            [24, -19],
	            [17, -17],
	            [33, -7],
	            [19, -16],
	            [23, -16],
	            [26, -3],
	            [23, 11],
	            [24, 24],
	            [26, -12],
	            [27, -7],
	            [26, -7],
	            [27, -5],
	            [28, 0],
	            [23, -61],
	            [-1, -15],
	            [-4, -27],
	            [-26, -15],
	            [-22, -22],
	            [4, -23],
	            [31, 1],
	            [-4, -23],
	            [-14, -22],
	            [-13, -24],
	            [21, -19],
	            [32, -6],
	            [32, 11],
	            [15, 23],
	            [10, 22],
	            [15, 18],
	            [17, 18],
	            [7, 21],
	            [15, 29],
	            [18, 5],
	            [31, 3],
	            [28, 7],
	            [28, 9],
	            [14, 23],
	            [8, 22],
	            [19, 22],
	            [27, 15],
	            [23, 12],
	            [16, 19],
	            [15, 11],
	            [21, 9],
	            [27, -6],
	            [25, 6],
	            [28, 7],
	            [30, -4],
	            [20, 17],
	            [14, 39],
	            [11, -16],
	            [13, -28],
	            [23, -12],
	            [27, -4],
	            [26, 7],
	            [29, -5],
	            [26, -1],
	            [17, 6],
	            [24, -4],
	            [21, -12],
	            [25, 8],
	            [30, 0],
	            [25, 8],
	            [29, -8],
	            [19, 19],
	            [14, 20],
	            [19, 16],
	            [35, 44],
	            [18, -8],
	            [21, -16],
	            [18, -21],
	            [36, -36],
	            [27, -1],
	            [25, 0],
	            [30, 7],
	            [30, 8],
	            [23, 16],
	            [19, 18],
	            [31, 2],
	            [21, 13],
	            [22, -12],
	            [14, -18],
	            [19, -19],
	            [31, 2],
	            [19, -15],
	            [33, -15],
	            [35, -5],
	            [29, 4],
	            [21, 19],
	            [19, 18],
	            [25, 5],
	            [25, -8],
	            [29, -6],
	            [26, 9],
	            [25, 0],
	            [24, -6],
	            [26, -5],
	            [25, 10],
	            [30, 9],
	            [28, 3],
	            [32, 0],
	            [25, 5],
	            [25, 5],
	            [8, 29],
	            [1, 24],
	            [17, -16],
	            [5, -27],
	            [10, -24],
	            [11, -20],
	            [23, -10],
	            [32, 4],
	            [36, 1],
	            [25, 3],
	            [37, 0],
	            [26, 1],
	            [36, -2],
	            [31, -5],
	            [20, -18],
	            [-5, -22],
	            [18, -18],
	            [30, -13],
	            [31, -15],
	            [35, -11],
	            [38, -9],
	            [28, -9],
	            [32, -2],
	            [18, 20],
	            [24, -16],
	            [21, -19],
	            [25, -13],
	            [34, -6],
	            [32, -7],
	            [13, -23],
	            [32, -14],
	            [21, -21],
	            [31, -9],
	            [32, 1],
	            [30, -4],
	            [33, 1],
	            [34, -4],
	            [31, -8],
	            [28, -14],
	            [29, -12],
	            [20, -17],
	            [-3, -23],
	            [-15, -21],
	            [-13, -27],
	            [-9, -21],
	            [-14, -24],
	            [-36, -9],
	            [-16, -21],
	            [-36, -13],
	            [-13, -23],
	            [-19, -22],
	            [-20, -18],
	            [-11, -25],
	            [-7, -22],
	            [-3, -26],
	            [0, -22],
	            [16, -23],
	            [6, -22],
	            [13, -21],
	            [52, -8],
	            [11, -26],
	            [-50, -9],
	            [-43, -13],
	            [-52, -2],
	            [-24, -34],
	            [-5, -27],
	            [-12, -22],
	            [-14, -22],
	            [37, -20],
	            [14, -24],
	            [24, -22],
	            [33, -20],
	            [39, -19],
	            [42, -18],
	            [64, -19],
	            [14, -29],
	            [80, -12],
	            [5, -5],
	            [21, -17],
	            [77, 15],
	            [63, -19],
	            [48, -14],
	            [-9997, -1],
	            [24, 35],
	            [50, -19],
	            [3, 2],
	            [30, 19],
	            [4, 0],
	            [3, -1],
	            [40, -25],
	            [35, 25],
	            [7, 3],
	            [81, 11],
	            [27, -14],
	            [13, -7],
	            [41, -20],
	            [79, -15],
	            [63, -18],
	            [107, -14],
	            [80, 16],
	            [118, -11],
	            [67, -19],
	            [73, 17],
	            [78, 17],
	            [6, 27],
	            [-110, 3],
	            [-89, 14],
	            [-24, 23],
	            [-74, 12],
	            [5, 27],
	            [10, 24],
	            [10, 22],
	            [-5, 25],
	            [-46, 16],
	            [-22, 21],
	            [-43, 18],
	            [68, -3],
	            [64, 9],
	            [40, -20],
	            [50, 18],
	            [45, 22],
	            [23, 19],
	            [-10, 25],
	            [-36, 16],
	            [-41, 17],
	            [-57, 4],
	            [-50, 8],
	            [-54, 6],
	            [-18, 22],
	            [-36, 18],
	            [-21, 21],
	            [-9, 67],
	            [14, -6],
	            [25, -18],
	            [45, 6],
	            [44, 8],
	            [23, -26],
	            [44, 6],
	            [37, 13],
	            [35, 16],
	            [32, 20],
	            [41, 5],
	            [-1, 22],
	            [-9, 22],
	            [8, 21],
	            [36, 11],
	            [16, -20],
	            [42, 12],
	            [32, 15],
	            [40, 1],
	            [38, 6],
	            [37, 13],
	            [30, 13],
	            [34, 13],
	            [22, -4],
	            [19, -4],
	            [41, 8],
	            [37, -10],
	            [38, 1],
	            [37, 8],
	            [37, -6],
	            [41, -6],
	            [39, 3],
	            [40, -2],
	            [42, -1],
	            [38, 3],
	            [28, 17],
	            [34, 9],
	            [35, -13],
	            [33, 11],
	            [30, 21],
	            [18, -19],
	            [9, -21],
	            [18, -19],
	            [29, 17],
	            [33, -22],
	            [38, -7],
	            [32, -16],
	            [39, 3],
	            [36, 11],
	            [41, -3],
	            [38, -8],
	            [38, -10],
	            [15, 25],
	            [-18, 20],
	            [-14, 21],
	            [-36, 5],
	            [-15, 22],
	            [-6, 22],
	            [-10, 43],
	            [21, -8],
	            [36, -3],
	            [36, 3],
	            [33, -9],
	            [28, -17],
	            [12, -21],
	            [38, -4],
	            [36, 9],
	            [38, 11],
	            [34, 7],
	            [28, -14],
	            [37, 5],
	            [24, 45],
	            [23, -27],
	            [32, -10],
	            [34, 6],
	            [23, -23],
	            [37, -3],
	            [33, -7],
	            [34, -12],
	            [21, 22],
	            [11, 20],
	            [28, -23],
	            [38, 6],
	            [28, -13],
	            [19, -19],
	            [37, 5],
	            [29, 13],
	            [29, 15],
	            [33, 8],
	            [39, 7],
	            [36, 8],
	            [27, 13],
	            [16, 19],
	            [7, 25],
	            [-3, 24],
	            [-9, 24],
	            [-10, 23],
	            [-9, 23],
	            [-7, 21],
	            [-1, 23],
	            [2, 23],
	            [13, 22],
	            [11, 24],
	            [5, 23],
	            [-6, 26],
	            [-3, 23],
	            [14, 27],
	            [15, 17],
	            [18, 22],
	            [19, 19],
	            [22, 17],
	            [11, 25],
	            [15, 17],
	            [18, 15],
	            [26, 3],
	            [18, 19],
	            [19, 11],
	            [23, 7],
	            [20, 15],
	            [16, 19],
	            [22, 7],
	            [16, -15],
	            [-10, -20],
	            [-29, -17]
	        ],
	        [
	            [6914, 2185],
	            [18, -19],
	            [26, -7],
	            [1, -11],
	            [-7, -27],
	            [-43, -4],
	            [-1, 31],
	            [4, 25],
	            [2, 12]
	        ],
	        [
	            [9038, 2648],
	            [27, -21],
	            [15, 8],
	            [22, 12],
	            [16, -4],
	            [2, -70],
	            [-9, -21],
	            [-3, -47],
	            [-10, 16],
	            [-19, -41],
	            [-6, 3],
	            [-17, 2],
	            [-17, 50],
	            [-4, 39],
	            [-16, 52],
	            [1, 27],
	            [18, -5]
	        ],
	        [
	            [8987, 4244],
	            [10, -46],
	            [18, 22],
	            [9, -25],
	            [13, -23],
	            [-3, -26],
	            [6, -51],
	            [5, -29],
	            [7, -7],
	            [7, -51],
	            [-3, -30],
	            [9, -40],
	            [31, -31],
	            [19, -28],
	            [19, -26],
	            [-4, -14],
	            [16, -37],
	            [11, -64],
	            [11, 13],
	            [11, -26],
	            [7, 9],
	            [5, -63],
	            [19, -36],
	            [13, -22],
	            [22, -48],
	            [8, -48],
	            [1, -33],
	            [-2, -37],
	            [13, -50],
	            [-2, -52],
	            [-5, -28],
	            [-7, -52],
	            [1, -34],
	            [-6, -43],
	            [-12, -53],
	            [-21, -29],
	            [-10, -46],
	            [-9, -29],
	            [-8, -51],
	            [-11, -30],
	            [-7, -44],
	            [-4, -41],
	            [2, -18],
	            [-16, -21],
	            [-31, -2],
	            [-26, -24],
	            [-13, -23],
	            [-17, -26],
	            [-23, 27],
	            [-17, 10],
	            [5, 31],
	            [-15, -11],
	            [-25, -43],
	            [-24, 16],
	            [-15, 9],
	            [-16, 4],
	            [-27, 17],
	            [-18, 37],
	            [-5, 45],
	            [-7, 30],
	            [-13, 24],
	            [-27, 7],
	            [9, 28],
	            [-7, 44],
	            [-13, -41],
	            [-25, -11],
	            [14, 33],
	            [5, 34],
	            [10, 29],
	            [-2, 44],
	            [-22, -50],
	            [-18, -21],
	            [-10, -47],
	            [-22, 25],
	            [1, 31],
	            [-18, 43],
	            [-14, 22],
	            [5, 14],
	            [-36, 35],
	            [-19, 2],
	            [-27, 29],
	            [-50, -6],
	            [-36, -21],
	            [-31, -20],
	            [-27, 4],
	            [-29, -30],
	            [-24, -14],
	            [-6, -31],
	            [-10, -24],
	            [-23, -1],
	            [-18, -5],
	            [-24, 10],
	            [-20, -6],
	            [-19, -3],
	            [-17, -31],
	            [-8, 2],
	            [-14, -16],
	            [-13, -19],
	            [-21, 2],
	            [-18, 0],
	            [-30, 38],
	            [-15, 11],
	            [1, 34],
	            [14, 8],
	            [4, 14],
	            [-1, 21],
	            [4, 41],
	            [-3, 35],
	            [-15, 60],
	            [-4, 33],
	            [1, 34],
	            [-11, 38],
	            [-1, 18],
	            [-12, 23],
	            [-4, 47],
	            [-16, 46],
	            [-4, 26],
	            [13, -26],
	            [-10, 55],
	            [14, -17],
	            [8, -23],
	            [0, 30],
	            [-14, 47],
	            [-3, 18],
	            [-6, 18],
	            [3, 34],
	            [6, 15],
	            [4, 29],
	            [-3, 35],
	            [11, 42],
	            [2, -45],
	            [12, 41],
	            [22, 20],
	            [14, 25],
	            [21, 22],
	            [13, 4],
	            [7, -7],
	            [22, 22],
	            [17, 6],
	            [4, 13],
	            [8, 6],
	            [15, -2],
	            [29, 18],
	            [15, 26],
	            [7, 31],
	            [17, 30],
	            [1, 24],
	            [1, 32],
	            [19, 50],
	            [12, -51],
	            [12, 12],
	            [-10, 28],
	            [9, 29],
	            [12, -13],
	            [3, 45],
	            [15, 29],
	            [7, 23],
	            [14, 10],
	            [0, 17],
	            [13, -7],
	            [0, 15],
	            [12, 8],
	            [14, 8],
	            [20, -27],
	            [16, -35],
	            [17, 0],
	            [18, -6],
	            [-6, 33],
	            [13, 47],
	            [13, 15],
	            [-5, 15],
	            [12, 34],
	            [17, 21],
	            [14, -7],
	            [24, 11],
	            [-1, 30],
	            [-20, 19],
	            [15, 9],
	            [18, -15],
	            [15, -24],
	            [23, -15],
	            [8, 6],
	            [17, -18],
	            [17, 17],
	            [10, -5],
	            [7, 11],
	            [12, -29],
	            [-7, -32],
	            [-11, -24],
	            [-9, -2],
	            [3, -23],
	            [-8, -30],
	            [-10, -29],
	            [2, -17],
	            [22, -32],
	            [21, -19],
	            [15, -20],
	            [20, -35],
	            [8, 0],
	            [14, -15],
	            [4, -19],
	            [27, -20],
	            [18, 20],
	            [6, 32],
	            [5, 26],
	            [4, 33],
	            [8, 47],
	            [-4, 28],
	            [2, 17],
	            [-3, 34],
	            [4, 45],
	            [5, 12],
	            [-4, 20],
	            [7, 31],
	            [5, 32],
	            [1, 17],
	            [10, 22],
	            [8, -29],
	            [2, -37],
	            [7, -7],
	            [1, -25],
	            [10, -30],
	            [2, -33],
	            [-1, -22]
	        ],
	        [
	            [5471, 7900],
	            [-2, -24],
	            [-16, 0],
	            [6, -13],
	            [-9, -38]
	        ],
	        [
	            [5450, 7825],
	            [-6, -10],
	            [-24, -1],
	            [-14, -13],
	            [-23, 4]
	        ],
	        [
	            [5383, 7805],
	            [-40, 15],
	            [-6, 21],
	            [-27, -10],
	            [-4, -12],
	            [-16, 9]
	        ],
	        [
	            [5290, 7828],
	            [-15, 1],
	            [-12, 11],
	            [4, 15],
	            [-1, 10]
	        ],
	        [
	            [5266, 7865],
	            [8, 3],
	            [14, -16],
	            [4, 16],
	            [25, -3],
	            [20, 11],
	            [13, -2],
	            [9, -12],
	            [2, 10],
	            [-4, 38],
	            [10, 8],
	            [10, 27]
	        ],
	        [
	            [5377, 7945],
	            [21, -19],
	            [15, 24],
	            [10, 5],
	            [22, -18],
	            [13, 3],
	            [13, -12]
	        ],
	        [
	            [5471, 7928],
	            [-3, -7],
	            [3, -21]
	        ],
	        [
	            [6281, 7346],
	            [-19, 8],
	            [-14, 27],
	            [-4, 23]
	        ],
	        [
	            [6349, 7527],
	            [15, -31],
	            [14, -42],
	            [13, -2],
	            [8, -16],
	            [-23, -5],
	            [-5, -46],
	            [-4, -21],
	            [-11, -13],
	            [1, -30]
	        ],
	        [
	            [6357, 7321],
	            [-7, -3],
	            [-17, 31],
	            [10, 30],
	            [-9, 17],
	            [-10, -4],
	            [-33, -44]
	        ],
	        [
	            [6249, 7494],
	            [6, 10],
	            [21, -17],
	            [15, -4],
	            [4, 7],
	            [-14, 32],
	            [7, 9]
	        ],
	        [
	            [6288, 7531],
	            [8, -2],
	            [19, -36],
	            [13, -4],
	            [4, 15],
	            [17, 23]
	        ],
	        [
	            [5814, 4792],
	            [-1, 71],
	            [-7, 27]
	        ],
	        [
	            [5806, 4890],
	            [17, -5],
	            [8, 34],
	            [15, -4]
	        ],
	        [
	            [5846, 4915],
	            [1, -23],
	            [6, -14],
	            [1, -19],
	            [-7, -12],
	            [-11, -31],
	            [-10, -22],
	            [-12, -2]
	        ],
	        [
	            [5092, 8091],
	            [20, -5],
	            [26, 12],
	            [17, -25],
	            [16, -14]
	        ],
	        [
	            [5171, 8059],
	            [-4, -40]
	        ],
	        [
	            [5167, 8019],
	            [-7, -2],
	            [-3, -33]
	        ],
	        [
	            [5157, 7984],
	            [-24, 26],
	            [-14, -4],
	            [-20, 28],
	            [-13, 23],
	            [-13, 1],
	            [-4, 21]
	        ],
	        [
	            [5069, 8079],
	            [23, 12]
	        ],
	        [
	            [5074, 5427],
	            [-23, -7]
	        ],
	        [
	            [5051, 5420],
	            [-7, 41],
	            [2, 136],
	            [-6, 12],
	            [-1, 29],
	            [-10, 21],
	            [-8, 17],
	            [3, 31]
	        ],
	        [
	            [5024, 5707],
	            [10, 7],
	            [6, 26],
	            [13, 5],
	            [6, 18]
	        ],
	        [
	            [5059, 5763],
	            [10, 17],
	            [10, 0],
	            [21, -34]
	        ],
	        [
	            [5100, 5746],
	            [-1, -19],
	            [6, -35],
	            [-6, -24],
	            [3, -16],
	            [-13, -37],
	            [-9, -18],
	            [-5, -37],
	            [1, -38],
	            [-2, -95]
	        ],
	        [
	            [4921, 5627],
	            [-19, 15],
	            [-13, -2],
	            [-10, -15],
	            [-12, 13],
	            [-5, 19],
	            [-13, 13]
	        ],
	        [
	            [4849, 5670],
	            [-1, 34],
	            [7, 26],
	            [-1, 20],
	            [23, 48],
	            [4, 41],
	            [7, 14],
	            [14, -8],
	            [11, 12],
	            [4, 16],
	            [22, 26],
	            [5, 19],
	            [26, 24],
	            [15, 9],
	            [7, -12],
	            [18, 0]
	        ],
	        [
	            [5010, 5939],
	            [-2, -28],
	            [3, -27],
	            [16, -39],
	            [1, -28],
	            [32, -14],
	            [-1, -40]
	        ],
	        [
	            [5024, 5707],
	            [-24, 1]
	        ],
	        [
	            [5000, 5708],
	            [-13, 5],
	            [-9, -9],
	            [-12, 4],
	            [-48, -3],
	            [-1, -33],
	            [4, -45]
	        ],
	        [
	            [7573, 6360],
	            [0, -43],
	            [-10, 9],
	            [2, -47]
	        ],
	        [
	            [7565, 6279],
	            [-8, 30],
	            [-1, 31],
	            [-6, 28],
	            [-11, 34],
	            [-26, 3],
	            [3, -25],
	            [-9, -32],
	            [-12, 12],
	            [-4, -11],
	            [-8, 6],
	            [-11, 5]
	        ],
	        [
	            [7472, 6360],
	            [-4, 49],
	            [-10, 45],
	            [5, 35],
	            [-17, 16],
	            [6, 22],
	            [18, 22],
	            [-20, 31],
	            [9, 40],
	            [22, -26],
	            [14, -3],
	            [2, -41],
	            [26, -8],
	            [26, 1],
	            [16, -10],
	            [-13, -50],
	            [-12, -3],
	            [-9, -34],
	            [16, -31],
	            [4, 38],
	            [8, 0],
	            [14, -93]
	        ],
	        [
	            [5629, 7671],
	            [8, -25],
	            [11, 5],
	            [21, -9],
	            [41, -4],
	            [13, 16],
	            [33, 13],
	            [20, -21],
	            [17, -6]
	        ],
	        [
	            [5793, 7640],
	            [-15, -25],
	            [-10, -42],
	            [9, -34]
	        ],
	        [
	            [5777, 7539],
	            [-24, 8],
	            [-28, -18]
	        ],
	        [
	            [5725, 7529],
	            [0, -30],
	            [-26, -5],
	            [-19, 20],
	            [-22, -16],
	            [-21, 2]
	        ],
	        [
	            [5637, 7500],
	            [-2, 39],
	            [-14, 19]
	        ],
	        [
	            [5621, 7558],
	            [5, 8],
	            [-3, 7],
	            [4, 19],
	            [11, 18],
	            [-14, 26],
	            [-2, 21],
	            [7, 14]
	        ],
	        [
	            [2846, 6461],
	            [-7, -3],
	            [-7, 34],
	            [-10, 17],
	            [6, 38],
	            [8, -3],
	            [10, -49],
	            [0, -34]
	        ],
	        [
	            [2838, 6628],
	            [-30, -10],
	            [-2, 22],
	            [13, 5],
	            [18, -2],
	            [1, -15]
	        ],
	        [
	            [2861, 6628],
	            [-5, -42],
	            [-5, 8],
	            [0, 31],
	            [-12, 23],
	            [0, 7],
	            [22, -27]
	        ],
	        [
	            [5527, 7708],
	            [10, 0],
	            [-7, -26],
	            [14, -23],
	            [-4, -28],
	            [-7, -2]
	        ],
	        [
	            [5533, 7629],
	            [-5, -6],
	            [-9, -13],
	            [-4, -33]
	        ],
	        [
	            [5515, 7577],
	            [-25, 23],
	            [-10, 24],
	            [-11, 13],
	            [-12, 22],
	            [-6, 19],
	            [-14, 27],
	            [6, 25],
	            [10, -14],
	            [6, 12],
	            [13, 2],
	            [24, -10],
	            [19, 1],
	            [12, -13]
	        ],
	        [
	            [5652, 8242],
	            [27, 0],
	            [30, 22],
	            [6, 34],
	            [23, 19],
	            [-3, 26]
	        ],
	        [
	            [5735, 8343],
	            [17, 10],
	            [30, 23]
	        ],
	        [
	            [5782, 8376],
	            [29, -15],
	            [4, -15],
	            [15, 7],
	            [27, -14],
	            [3, -27],
	            [-6, -16],
	            [17, -39],
	            [12, -11],
	            [-2, -11],
	            [19, -10],
	            [8, -16],
	            [-11, -13],
	            [-23, 2],
	            [-5, -5],
	            [7, -20],
	            [6, -37]
	        ],
	        [
	            [5882, 8136],
	            [-23, -4],
	            [-9, -13],
	            [-2, -30],
	            [-11, 6],
	            [-25, -3],
	            [-7, 14],
	            [-11, -10],
	            [-10, 8],
	            [-22, 1],
	            [-31, 15],
	            [-28, 4],
	            [-22, -1],
	            [-15, -16],
	            [-13, -2]
	        ],
	        [
	            [5653, 8105],
	            [-1, 26],
	            [-8, 27],
	            [17, 12],
	            [0, 24],
	            [-8, 22],
	            [-1, 26]
	        ],
	        [
	            [2524, 6110],
	            [-1, 8],
	            [4, 3],
	            [5, -7],
	            [10, 36],
	            [5, 0]
	        ],
	        [
	            [2547, 6150],
	            [0, -8],
	            [5, -1],
	            [0, -16],
	            [-5, -25],
	            [3, -9],
	            [-3, -21],
	            [2, -6],
	            [-4, -30],
	            [-5, -16],
	            [-5, -1],
	            [-6, -21]
	        ],
	        [
	            [2529, 5996],
	            [-8, 0],
	            [2, 67],
	            [1, 47]
	        ],
	        [
	            [3136, 3714],
	            [-20, -8],
	            [-11, 82],
	            [-15, 66],
	            [9, 57],
	            [-15, 25],
	            [-4, 43],
	            [-13, 40]
	        ],
	        [
	            [3067, 4019],
	            [17, 64],
	            [-12, 49],
	            [7, 20],
	            [-5, 22],
	            [10, 30],
	            [1, 50],
	            [1, 41],
	            [6, 20],
	            [-24, 96]
	        ],
	        [
	            [3068, 4411],
	            [21, -5],
	            [14, 1],
	            [6, 18],
	            [25, 24],
	            [14, 22],
	            [37, 10],
	            [-3, -44],
	            [3, -23],
	            [-2, -40],
	            [30, -53],
	            [31, -9],
	            [11, -23],
	            [19, -11],
	            [11, -17],
	            [18, 0],
	            [16, -17],
	            [1, -34],
	            [6, -18],
	            [0, -25],
	            [-8, -1],
	            [11, -69],
	            [53, -2],
	            [-4, -35],
	            [3, -23],
	            [15, -16],
	            [6, -37],
	            [-4, -47],
	            [-8, -26],
	            [3, -33],
	            [-9, -12]
	        ],
	        [
	            [3384, 3866],
	            [-1, 18],
	            [-25, 30],
	            [-26, 1],
	            [-49, -17],
	            [-13, -52],
	            [-1, -32],
	            [-11, -71]
	        ],
	        [
	            [3482, 3537],
	            [6, 34],
	            [3, 35],
	            [1, 32],
	            [-10, 11],
	            [-11, -9],
	            [-10, 2],
	            [-4, 23],
	            [-2, 54],
	            [-5, 18],
	            [-19, 16],
	            [-11, -12],
	            [-30, 11],
	            [2, 81],
	            [-8, 33]
	        ],
	        [
	            [3068, 4411],
	            [-15, -11],
	            [-13, 7],
	            [2, 90],
	            [-23, -35],
	            [-24, 2],
	            [-11, 31],
	            [-18, 4],
	            [5, 25],
	            [-15, 36],
	            [-11, 53],
	            [7, 11],
	            [0, 25],
	            [17, 17],
	            [-3, 32],
	            [7, 20],
	            [2, 28],
	            [32, 40],
	            [22, 11],
	            [4, 9],
	            [25, -2]
	        ],
	        [
	            [3058, 4804],
	            [13, 162],
	            [0, 25],
	            [-4, 34],
	            [-12, 22],
	            [0, 42],
	            [15, 10],
	            [6, -6],
	            [1, 23],
	            [-16, 6],
	            [-1, 37],
	            [54, -2],
	            [10, 21],
	            [7, -19],
	            [6, -35],
	            [5, 8]
	        ],
	        [
	            [3142, 5132],
	            [15, -32],
	            [22, 4],
	            [5, 18],
	            [21, 14],
	            [11, 10],
	            [4, 25],
	            [19, 17],
	            [-1, 12],
	            [-24, 5],
	            [-3, 37],
	            [1, 40],
	            [-13, 15],
	            [5, 6],
	            [21, -8],
	            [22, -15],
	            [8, 14],
	            [20, 9],
	            [31, 23],
	            [10, 22],
	            [-3, 17]
	        ],
	        [
	            [3313, 5365],
	            [14, 2],
	            [7, -13],
	            [-4, -26],
	            [9, -9],
	            [7, -28],
	            [-8, -20],
	            [-4, -51],
	            [7, -30],
	            [2, -27],
	            [17, -28],
	            [14, -3],
	            [3, 12],
	            [8, 3],
	            [13, 10],
	            [9, 16],
	            [15, -5],
	            [7, 2]
	        ],
	        [
	            [3429, 5170],
	            [15, -5],
	            [3, 12],
	            [-5, 12],
	            [3, 17],
	            [11, -5],
	            [13, 6],
	            [16, -13]
	        ],
	        [
	            [3485, 5194],
	            [12, -12],
	            [9, 16],
	            [6, -3],
	            [4, -16],
	            [13, 4],
	            [11, 22],
	            [8, 44],
	            [17, 54]
	        ],
	        [
	            [3565, 5303],
	            [9, 3],
	            [7, -33],
	            [16, -103],
	            [14, -10],
	            [1, -41],
	            [-21, -48],
	            [9, -18],
	            [49, -9],
	            [1, -60],
	            [21, 39],
	            [35, -21],
	            [46, -36],
	            [14, -35],
	            [-5, -32],
	            [33, 18],
	            [54, -32],
	            [41, 3],
	            [41, -49],
	            [36, -66],
	            [21, -17],
	            [24, -3],
	            [10, -18],
	            [9, -76],
	            [5, -35],
	            [-11, -98],
	            [-14, -39],
	            [-39, -82],
	            [-18, -67],
	            [-21, -51],
	            [-7, -1],
	            [-7, -43],
	            [2, -111],
	            [-8, -91],
	            [-3, -39],
	            [-9, -23],
	            [-5, -79],
	            [-28, -77],
	            [-5, -61],
	            [-22, -26],
	            [-7, -35],
	            [-30, 0],
	            [-44, -23],
	            [-19, -26],
	            [-31, -18],
	            [-33, -47],
	            [-23, -58],
	            [-5, -44],
	            [5, -33],
	            [-5, -60],
	            [-6, -28],
	            [-20, -33],
	            [-31, -104],
	            [-24, -47],
	            [-19, -27],
	            [-13, -57],
	            [-18, -33]
	        ],
	        [
	            [3517, 3063],
	            [-8, 33],
	            [13, 28],
	            [-16, 40],
	            [-22, 33],
	            [-29, 38],
	            [-10, -2],
	            [-28, 46],
	            [-18, -7]
	        ],
	        [
	            [8172, 5325],
	            [11, 22],
	            [23, 32]
	        ],
	        [
	            [8206, 5379],
	            [-1, -29],
	            [-2, -37],
	            [-13, 1],
	            [-6, -20],
	            [-12, 31]
	        ],
	        [
	            [7546, 6698],
	            [12, -19],
	            [-2, -36],
	            [-23, -2],
	            [-23, 4],
	            [-18, -9],
	            [-25, 22],
	            [-1, 12]
	        ],
	        [
	            [7466, 6670],
	            [19, 44],
	            [15, 15],
	            [20, -14],
	            [14, -1],
	            [12, -16]
	        ],
	        [
	            [5817, 3752],
	            [-39, -43],
	            [-25, -44],
	            [-10, -40],
	            [-8, -22],
	            [-15, -4],
	            [-5, -29],
	            [-3, -18],
	            [-17, -14],
	            [-23, 3],
	            [-13, 17],
	            [-12, 7],
	            [-14, -14],
	            [-6, -28],
	            [-14, -18],
	            [-13, -26],
	            [-20, -6],
	            [-6, 20],
	            [2, 36],
	            [-16, 56],
	            [-8, 9]
	        ],
	        [
	            [5552, 3594],
	            [0, 173],
	            [27, 2],
	            [1, 210],
	            [21, 2],
	            [43, 21],
	            [10, -24],
	            [18, 23],
	            [9, 0],
	            [15, 13]
	        ],
	        [
	            [5696, 4014],
	            [5, -4]
	        ],
	        [
	            [5701, 4010],
	            [11, -48],
	            [5, -10],
	            [9, -34],
	            [32, -65],
	            [12, -7],
	            [0, -20],
	            [8, -38],
	            [21, -9],
	            [18, -27]
	        ],
	        [
	            [5424, 5496],
	            [23, 4],
	            [5, 16],
	            [5, -2],
	            [7, -13],
	            [34, 23],
	            [12, 23],
	            [15, 20],
	            [-3, 21],
	            [8, 6],
	            [27, -4],
	            [26, 27],
	            [20, 65],
	            [14, 24],
	            [18, 10]
	        ],
	        [
	            [5635, 5716],
	            [3, -26],
	            [16, -36],
	            [0, -25],
	            [-5, -24],
	            [2, -18],
	            [10, -18]
	        ],
	        [
	            [5661, 5569],
	            [21, -25]
	        ],
	        [
	            [5682, 5544],
	            [15, -24],
	            [0, -19],
	            [19, -31],
	            [12, -26],
	            [7, -35],
	            [20, -24],
	            [5, -18]
	        ],
	        [
	            [5760, 5367],
	            [-9, -7],
	            [-18, 2],
	            [-21, 6],
	            [-10, -5],
	            [-5, -14],
	            [-9, -2],
	            [-10, 12],
	            [-31, -29],
	            [-13, 6],
	            [-4, -5],
	            [-8, -35],
	            [-21, 11],
	            [-20, 6],
	            [-18, 22],
	            [-23, 20],
	            [-15, -19],
	            [-10, -30],
	            [-3, -41]
	        ],
	        [
	            [5512, 5265],
	            [-18, 3],
	            [-19, 10],
	            [-16, -32],
	            [-15, -55]
	        ],
	        [
	            [5444, 5191],
	            [-3, 18],
	            [-1, 27],
	            [-13, 19],
	            [-10, 30],
	            [-2, 21],
	            [-13, 31],
	            [2, 18],
	            [-3, 25],
	            [2, 45],
	            [7, 11],
	            [14, 60]
	        ],
	        [
	            [3231, 7808],
	            [20, -8],
	            [26, 1],
	            [-14, -24],
	            [-10, -4],
	            [-35, 25],
	            [-7, 20],
	            [10, 18],
	            [10, -28]
	        ],
	        [
	            [3283, 7958],
	            [-14, -1],
	            [-36, 19],
	            [-26, 28],
	            [10, 5],
	            [37, -15],
	            [28, -25],
	            [1, -11]
	        ],
	        [
	            [1569, 7923],
	            [-14, -8],
	            [-46, 27],
	            [-8, 21],
	            [-25, 21],
	            [-5, 16],
	            [-28, 11],
	            [-11, 32],
	            [2, 14],
	            [30, -13],
	            [17, -9],
	            [26, -6],
	            [9, -21],
	            [14, -28],
	            [28, -24],
	            [11, -33]
	        ],
	        [
	            [3440, 8052],
	            [-18, -52],
	            [18, 20],
	            [19, -12],
	            [-10, -21],
	            [25, -16],
	            [12, 14],
	            [28, -18],
	            [-8, -43],
	            [19, 10],
	            [4, -32],
	            [8, -36],
	            [-11, -52],
	            [-13, -2],
	            [-18, 11],
	            [6, 48],
	            [-8, 8],
	            [-32, -52],
	            [-17, 2],
	            [20, 28],
	            [-27, 14],
	            [-30, -3],
	            [-54, 2],
	            [-4, 17],
	            [17, 21],
	            [-12, 16],
	            [24, 36],
	            [28, 94],
	            [18, 33],
	            [24, 21],
	            [13, -3],
	            [-6, -16],
	            [-15, -37]
	        ],
	        [
	            [1313, 8250],
	            [27, 5],
	            [-8, -67],
	            [24, -48],
	            [-11, 0],
	            [-17, 27],
	            [-10, 27],
	            [-14, 19],
	            [-5, 26],
	            [1, 19],
	            [13, -8]
	        ],
	        [
	            [2798, 8730],
	            [-11, -31],
	            [-12, 5],
	            [-8, 17],
	            [2, 4],
	            [10, 18],
	            [12, -1],
	            [7, -12]
	        ],
	        [
	            [2725, 8762],
	            [-33, -32],
	            [-19, 1],
	            [-6, 16],
	            [20, 27],
	            [38, 0],
	            [0, -12]
	        ],
	        [
	            [2634, 8936],
	            [5, -26],
	            [15, 9],
	            [16, -15],
	            [30, -20],
	            [32, -19],
	            [2, -28],
	            [21, 5],
	            [20, -20],
	            [-25, -18],
	            [-43, 14],
	            [-16, 26],
	            [-27, -31],
	            [-40, -31],
	            [-9, 35],
	            [-38, -6],
	            [24, 30],
	            [4, 46],
	            [9, 54],
	            [20, -5]
	        ],
	        [
	            [2892, 9024],
	            [-31, -3],
	            [-7, 29],
	            [12, 34],
	            [26, 8],
	            [21, -17],
	            [1, -25],
	            [-4, -8],
	            [-18, -18]
	        ],
	        [
	            [2343, 9140],
	            [-17, -21],
	            [-38, 18],
	            [-22, -6],
	            [-38, 26],
	            [24, 19],
	            [19, 25],
	            [30, -16],
	            [17, -11],
	            [8, -11],
	            [17, -23]
	        ],
	        [
	            [3135, 7724],
	            [-18, 33],
	            [0, 81],
	            [-13, 17],
	            [-18, -10],
	            [-10, 16],
	            [-21, -45],
	            [-8, -46],
	            [-10, -27],
	            [-12, -9],
	            [-9, -3],
	            [-3, -15],
	            [-51, 0],
	            [-42, 0],
	            [-12, -11],
	            [-30, -42],
	            [-3, -5],
	            [-9, -23],
	            [-26, 0],
	            [-27, 0],
	            [-12, -10],
	            [4, -11],
	            [2, -18],
	            [0, -6],
	            [-36, -30],
	            [-29, -9],
	            [-32, -31],
	            [-7, 0],
	            [-10, 9],
	            [-3, 8],
	            [1, 6],
	            [6, 21],
	            [13, 33],
	            [8, 35],
	            [-5, 51],
	            [-6, 53],
	            [-29, 28],
	            [3, 11],
	            [-4, 7],
	            [-8, 0],
	            [-5, 9],
	            [-2, 14],
	            [-5, -6],
	            [-7, 2],
	            [1, 6],
	            [-6, 6],
	            [-3, 15],
	            [-21, 19],
	            [-23, 20],
	            [-27, 23],
	            [-26, 21],
	            [-25, -17],
	            [-9, 0],
	            [-34, 15],
	            [-23, -8],
	            [-27, 19],
	            [-28, 9],
	            [-19, 4],
	            [-9, 10],
	            [-5, 32],
	            [-9, 0],
	            [-1, -23],
	            [-57, 0],
	            [-95, 0],
	            [-94, 0],
	            [-84, 0],
	            [-83, 0],
	            [-82, 0],
	            [-85, 0],
	            [-27, 0],
	            [-82, 0],
	            [-79, 0]
	        ],
	        [
	            [1588, 7952],
	            [-4, 0],
	            [-54, 58],
	            [-20, 26],
	            [-50, 24],
	            [-15, 53],
	            [3, 36],
	            [-35, 25],
	            [-5, 48],
	            [-34, 43],
	            [0, 30]
	        ],
	        [
	            [1374, 8295],
	            [15, 29],
	            [0, 37],
	            [-48, 37],
	            [-28, 68],
	            [-17, 42],
	            [-26, 27],
	            [-19, 24],
	            [-14, 31],
	            [-28, -20],
	            [-27, -33],
	            [-25, 39],
	            [-19, 26],
	            [-27, 16],
	            [-28, 2],
	            [0, 337],
	            [1, 219]
	        ],
	        [
	            [1084, 9176],
	            [51, -14],
	            [44, -29],
	            [29, -5],
	            [24, 24],
	            [34, 19],
	            [41, -7],
	            [42, 26],
	            [45, 14],
	            [20, -24],
	            [20, 14],
	            [6, 27],
	            [20, -6],
	            [47, -53],
	            [37, 40],
	            [3, -45],
	            [34, 10],
	            [11, 17],
	            [34, -3],
	            [42, -25],
	            [65, -22],
	            [38, -10],
	            [28, 4],
	            [37, -30],
	            [-39, -29],
	            [50, -13],
	            [75, 7],
	            [24, 11],
	            [29, -36],
	            [31, 30],
	            [-29, 25],
	            [18, 20],
	            [34, 3],
	            [22, 6],
	            [23, -14],
	            [28, -32],
	            [31, 5],
	            [49, -27],
	            [43, 9],
	            [40, -1],
	            [-3, 37],
	            [25, 10],
	            [43, -20],
	            [0, -56],
	            [17, 47],
	            [23, -1],
	            [12, 59],
	            [-30, 36],
	            [-32, 24],
	            [2, 65],
	            [33, 43],
	            [37, -9],
	            [28, -26],
	            [38, -67],
	            [-25, -29],
	            [52, -12],
	            [-1, -60],
	            [38, 46],
	            [33, -38],
	            [-9, -44],
	            [27, -40],
	            [29, 43],
	            [21, 51],
	            [1, 65],
	            [40, -5],
	            [41, -8],
	            [37, -30],
	            [2, -29],
	            [-21, -31],
	            [20, -32],
	            [-4, -29],
	            [-54, -41],
	            [-39, -9],
	            [-29, 18],
	            [-8, -30],
	            [-27, -50],
	            [-8, -26],
	            [-32, -40],
	            [-40, -4],
	            [-22, -25],
	            [-2, -38],
	            [-32, -7],
	            [-34, -48],
	            [-30, -67],
	            [-11, -46],
	            [-1, -69],
	            [40, -10],
	            [13, -55],
	            [13, -45],
	            [39, 12],
	            [51, -26],
	            [28, -22],
	            [20, -28],
	            [35, -17],
	            [29, -24],
	            [46, -4],
	            [30, -6],
	            [-4, -51],
	            [8, -59],
	            [21, -66],
	            [41, -56],
	            [21, 19],
	            [15, 61],
	            [-14, 93],
	            [-20, 31],
	            [45, 28],
	            [31, 41],
	            [16, 41],
	            [-3, 40],
	            [-19, 50],
	            [-33, 44],
	            [32, 62],
	            [-12, 54],
	            [-9, 92],
	            [19, 14],
	            [48, -16],
	            [29, -6],
	            [23, 15],
	            [25, -20],
	            [35, -34],
	            [8, -23],
	            [50, -4],
	            [-1, -50],
	            [9, -74],
	            [25, -10],
	            [21, -35],
	            [40, 33],
	            [26, 65],
	            [19, 28],
	            [21, -53],
	            [36, -75],
	            [31, -71],
	            [-11, -37],
	            [37, -33],
	            [25, -34],
	            [44, -15],
	            [18, -19],
	            [11, -50],
	            [22, -8],
	            [11, -22],
	            [2, -67],
	            [-20, -22],
	            [-20, -21],
	            [-46, -21],
	            [-35, -48],
	            [-47, -10],
	            [-59, 13],
	            [-42, 0],
	            [-29, -4],
	            [-23, -43],
	            [-35, -26],
	            [-40, -78],
	            [-32, -54],
	            [23, 9],
	            [45, 78],
	            [58, 49],
	            [42, 6],
	            [24, -29],
	            [-26, -40],
	            [9, -63],
	            [9, -45],
	            [36, -29],
	            [46, 8],
	            [28, 67],
	            [2, -43],
	            [17, -22],
	            [-34, -38],
	            [-61, -36],
	            [-28, -23],
	            [-31, -43],
	            [-21, 4],
	            [-1, 50],
	            [48, 49],
	            [-44, -2],
	            [-31, -7]
	        ],
	        [
	            [1829, 9377],
	            [-14, -27],
	            [61, 17],
	            [39, -29],
	            [31, 30],
	            [26, -20],
	            [23, -58],
	            [14, 25],
	            [-20, 60],
	            [24, 9],
	            [28, -9],
	            [31, -24],
	            [17, -58],
	            [9, -41],
	            [47, -30],
	            [50, -28],
	            [-3, -26],
	            [-46, -4],
	            [18, -23],
	            [-9, -22],
	            [-51, 9],
	            [-48, 16],
	            [-32, -3],
	            [-52, -20],
	            [-70, -9],
	            [-50, -6],
	            [-15, 28],
	            [-38, 16],
	            [-24, -6],
	            [-35, 47],
	            [19, 6],
	            [43, 10],
	            [39, -3],
	            [36, 11],
	            [-54, 13],
	            [-59, -4],
	            [-39, 1],
	            [-15, 22],
	            [64, 23],
	            [-42, -1],
	            [-49, 16],
	            [23, 44],
	            [20, 24],
	            [74, 36],
	            [29, -12]
	        ],
	        [
	            [2097, 9395],
	            [-24, -39],
	            [-44, 41],
	            [10, 9],
	            [37, 2],
	            [21, -13]
	        ],
	        [
	            [2879, 9376],
	            [3, -16],
	            [-30, 2],
	            [-30, 1],
	            [-30, -8],
	            [-8, 3],
	            [-31, 32],
	            [1, 21],
	            [14, 4],
	            [63, -6],
	            [48, -33]
	        ],
	        [
	            [2595, 9379],
	            [22, -36],
	            [26, 47],
	            [70, 24],
	            [48, -61],
	            [-4, -38],
	            [55, 17],
	            [26, 23],
	            [62, -30],
	            [38, -28],
	            [3, -25],
	            [52, 13],
	            [29, -38],
	            [67, -23],
	            [24, -24],
	            [26, -55],
	            [-51, -28],
	            [66, -38],
	            [44, -13],
	            [40, -55],
	            [44, -3],
	            [-9, -42],
	            [-49, -69],
	            [-34, 26],
	            [-44, 57],
	            [-36, -8],
	            [-3, -34],
	            [29, -34],
	            [38, -27],
	            [11, -16],
	            [18, -58],
	            [-9, -43],
	            [-35, 16],
	            [-70, 47],
	            [39, -51],
	            [29, -35],
	            [5, -21],
	            [-76, 24],
	            [-59, 34],
	            [-34, 29],
	            [10, 17],
	            [-42, 30],
	            [-40, 29],
	            [0, -18],
	            [-80, -9],
	            [-23, 20],
	            [18, 44],
	            [52, 1],
	            [57, 7],
	            [-9, 21],
	            [10, 30],
	            [36, 57],
	            [-8, 27],
	            [-11, 20],
	            [-42, 29],
	            [-57, 20],
	            [18, 15],
	            [-29, 36],
	            [-25, 4],
	            [-22, 20],
	            [-14, -18],
	            [-51, -7],
	            [-101, 13],
	            [-59, 17],
	            [-45, 9],
	            [-23, 21],
	            [29, 27],
	            [-39, 0],
	            [-9, 60],
	            [21, 53],
	            [29, 24],
	            [72, 16],
	            [-21, -39]
	        ],
	        [
	            [2212, 9420],
	            [33, -12],
	            [50, 7],
	            [7, -17],
	            [-26, -28],
	            [42, -26],
	            [-5, -53],
	            [-45, -23],
	            [-27, 5],
	            [-19, 23],
	            [-69, 45],
	            [0, 19],
	            [57, -7],
	            [-31, 38],
	            [33, 29]
	        ],
	        [
	            [2411, 9357],
	            [-30, -45],
	            [-32, 3],
	            [-17, 52],
	            [1, 29],
	            [14, 25],
	            [28, 16],
	            [58, -2],
	            [53, -14],
	            [-42, -53],
	            [-33, -11]
	        ],
	        [
	            [1654, 9275],
	            [-73, -29],
	            [-15, 26],
	            [-64, 31],
	            [12, 25],
	            [19, 43],
	            [24, 39],
	            [-27, 36],
	            [94, 10],
	            [39, -13],
	            [71, -3],
	            [27, -17],
	            [30, -25],
	            [-35, -15],
	            [-68, -41],
	            [-34, -42],
	            [0, -25]
	        ],
	        [
	            [2399, 9487],
	            [-15, -23],
	            [-40, 5],
	            [-34, 15],
	            [15, 27],
	            [40, 16],
	            [24, -21],
	            [10, -19]
	        ],
	        [
	            [2264, 9590],
	            [21, -27],
	            [1, -31],
	            [-13, -44],
	            [-46, -6],
	            [-30, 10],
	            [1, 34],
	            [-45, -4],
	            [-2, 45],
	            [30, -2],
	            [41, 21],
	            [40, -4],
	            [2, 8]
	        ],
	        [
	            [1994, 9559],
	            [11, -21],
	            [25, 10],
	            [29, -2],
	            [5, -29],
	            [-17, -28],
	            [-94, -10],
	            [-70, -25],
	            [-43, -2],
	            [-3, 20],
	            [57, 26],
	            [-125, -7],
	            [-39, 10],
	            [38, 58],
	            [26, 17],
	            [78, -20],
	            [50, -35],
	            [48, -5],
	            [-40, 57],
	            [26, 21],
	            [29, -7],
	            [9, -28]
	        ],
	        [
	            [2370, 9612],
	            [30, -19],
	            [55, 0],
	            [24, -19],
	            [-6, -22],
	            [32, -14],
	            [17, -14],
	            [38, -2],
	            [40, -5],
	            [44, 13],
	            [57, 5],
	            [45, -5],
	            [30, -22],
	            [6, -24],
	            [-17, -16],
	            [-42, -13],
	            [-35, 8],
	            [-80, -10],
	            [-57, -1],
	            [-45, 8],
	            [-74, 19],
	            [-9, 32],
	            [-4, 29],
	            [-27, 26],
	            [-58, 7],
	            [-32, 19],
	            [10, 24],
	            [58, -4]
	        ],
	        [
	            [1772, 9645],
	            [-4, -46],
	            [-21, -20],
	            [-26, -3],
	            [-52, -26],
	            [-44, -9],
	            [-38, 13],
	            [47, 44],
	            [57, 39],
	            [43, -1],
	            [38, 9]
	        ],
	        [
	            [2393, 9637],
	            [-13, -2],
	            [-52, 4],
	            [-7, 17],
	            [56, -1],
	            [19, -11],
	            [-3, -7]
	        ],
	        [
	            [1939, 9648],
	            [-52, -17],
	            [-41, 19],
	            [23, 19],
	            [40, 6],
	            [39, -10],
	            [-9, -17]
	        ],
	        [
	            [1954, 9701],
	            [-34, -11],
	            [-46, 0],
	            [0, 8],
	            [29, 18],
	            [14, -3],
	            [37, -12]
	        ],
	        [
	            [2338, 9669],
	            [-41, -12],
	            [-23, 13],
	            [-12, 23],
	            [-2, 24],
	            [36, -2],
	            [16, -4],
	            [33, -21],
	            [-7, -21]
	        ],
	        [
	            [2220, 9685],
	            [11, -25],
	            [-45, 7],
	            [-46, 19],
	            [-62, 2],
	            [27, 18],
	            [-34, 14],
	            [-2, 22],
	            [55, -8],
	            [75, -21],
	            [21, -28]
	        ],
	        [
	            [2583, 9764],
	            [33, -20],
	            [-38, -17],
	            [-51, -45],
	            [-50, -4],
	            [-57, 8],
	            [-30, 24],
	            [0, 21],
	            [22, 16],
	            [-50, 0],
	            [-31, 19],
	            [-18, 27],
	            [20, 26],
	            [19, 18],
	            [28, 4],
	            [-12, 14],
	            [65, 3],
	            [35, -32],
	            [47, -12],
	            [46, -11],
	            [22, -39]
	        ],
	        [
	            [3097, 9967],
	            [74, -4],
	            [60, -8],
	            [51, -16],
	            [-2, -16],
	            [-67, -25],
	            [-68, -12],
	            [-25, -14],
	            [61, 1],
	            [-66, -36],
	            [-45, -17],
	            [-48, -48],
	            [-57, -10],
	            [-18, -12],
	            [-84, -6],
	            [39, -8],
	            [-20, -10],
	            [23, -29],
	            [-26, -21],
	            [-43, -16],
	            [-13, -24],
	            [-39, -17],
	            [4, -14],
	            [48, 3],
	            [0, -15],
	            [-74, -35],
	            [-73, 16],
	            [-81, -9],
	            [-42, 7],
	            [-52, 3],
	            [-4, 29],
	            [52, 13],
	            [-14, 43],
	            [17, 4],
	            [74, -26],
	            [-38, 38],
	            [-45, 11],
	            [23, 23],
	            [49, 14],
	            [8, 21],
	            [-39, 23],
	            [-12, 31],
	            [76, -3],
	            [22, -6],
	            [43, 21],
	            [-62, 7],
	            [-98, -4],
	            [-49, 20],
	            [-23, 24],
	            [-32, 17],
	            [-6, 21],
	            [41, 11],
	            [32, 2],
	            [55, 9],
	            [41, 22],
	            [34, -3],
	            [30, -16],
	            [21, 32],
	            [37, 9],
	            [50, 7],
	            [85, 2],
	            [14, -6],
	            [81, 10],
	            [60, -4],
	            [60, -4]
	        ],
	        [
	            [5290, 7828],
	            [-3, -24],
	            [-12, -10],
	            [-20, 7],
	            [-6, -24],
	            [-14, -2],
	            [-5, 10],
	            [-15, -20],
	            [-13, -3],
	            [-12, 13]
	        ],
	        [
	            [5190, 7775],
	            [-10, 25],
	            [-13, -9],
	            [0, 27],
	            [21, 33],
	            [-1, 15],
	            [12, -5],
	            [8, 10]
	        ],
	        [
	            [5207, 7871],
	            [24, -1],
	            [5, 13],
	            [30, -18]
	        ],
	        [
	            [3140, 1814],
	            [-10, -24],
	            [-23, -18],
	            [-14, 2],
	            [-16, 5],
	            [-21, 18],
	            [-29, 8],
	            [-35, 33],
	            [-28, 32],
	            [-38, 66],
	            [23, -12],
	            [39, -40],
	            [36, -21],
	            [15, 27],
	            [9, 41],
	            [25, 24],
	            [20, -7]
	        ],
	        [
	            [3095, 1968],
	            [-25, 0],
	            [-13, -14],
	            [-25, -22],
	            [-5, -55],
	            [-11, -1],
	            [-32, 19],
	            [-32, 41],
	            [-34, 34],
	            [-9, 37],
	            [8, 35],
	            [-14, 39],
	            [-4, 101],
	            [12, 57],
	            [30, 45],
	            [-43, 18],
	            [27, 52],
	            [9, 98],
	            [31, -21],
	            [15, 123],
	            [-19, 15],
	            [-9, -73],
	            [-17, 8],
	            [9, 84],
	            [9, 110],
	            [13, 40],
	            [-8, 58],
	            [-2, 66],
	            [11, 2],
	            [17, 96],
	            [20, 94],
	            [11, 88],
	            [-6, 89],
	            [8, 49],
	            [-3, 72],
	            [16, 73],
	            [5, 114],
	            [9, 123],
	            [9, 132],
	            [-2, 96],
	            [-6, 84]
	        ],
	        [
	            [3045, 3974],
	            [14, 15],
	            [8, 30]
	        ],
	        [
	            [8064, 6161],
	            [-24, -28],
	            [-23, 18],
	            [0, 51],
	            [13, 26],
	            [31, 17],
	            [16, -1],
	            [6, -23],
	            [-12, -26],
	            [-7, -34]
	        ],
	        [
	            [8628, 7562],
	            [-18, 35],
	            [-11, -33],
	            [-43, -26],
	            [4, -31],
	            [-24, 2],
	            [-13, 19],
	            [-19, -42],
	            [-30, -32],
	            [-23, -38]
	        ],
	        [
	            [8451, 7416],
	            [-39, -17],
	            [-20, -27],
	            [-30, -17],
	            [15, 28],
	            [-6, 23],
	            [22, 40],
	            [-15, 30],
	            [-24, -20],
	            [-32, -41],
	            [-17, -39],
	            [-27, -2],
	            [-14, -28],
	            [15, -40],
	            [22, -10],
	            [1, -26],
	            [22, -17],
	            [31, 42],
	            [25, -23],
	            [18, -2],
	            [4, -31],
	            [-39, -16],
	            [-13, -32],
	            [-27, -30],
	            [-14, -41],
	            [30, -33],
	            [11, -58],
	            [17, -54],
	            [18, -45],
	            [0, -44],
	            [-17, -16],
	            [6, -32],
	            [17, -18],
	            [-5, -48],
	            [-7, -47],
	            [-15, -5],
	            [-21, -64],
	            [-22, -78],
	            [-26, -70],
	            [-38, -55],
	            [-39, -50],
	            [-31, -6],
	            [-17, -27],
	            [-10, 20],
	            [-15, -30],
	            [-39, -29],
	            [-29, -9],
	            [-10, -63],
	            [-15, -3],
	            [-8, 43],
	            [7, 22],
	            [-37, 19],
	            [-13, -9]
	        ],
	        [
	            [8001, 6331],
	            [-28, 15],
	            [-14, 24],
	            [5, 34],
	            [-26, 11],
	            [-13, 22],
	            [-24, -31],
	            [-27, -7],
	            [-22, 0],
	            [-15, -14]
	        ],
	        [
	            [7837, 6385],
	            [-14, -9],
	            [4, -68],
	            [-15, 2],
	            [-2, 14]
	        ],
	        [
	            [7810, 6324],
	            [-1, 24],
	            [-20, -17],
	            [-12, 11],
	            [-21, 22],
	            [8, 49],
	            [-18, 12],
	            [-6, 54],
	            [-30, -10],
	            [4, 70],
	            [26, 50],
	            [1, 48],
	            [-1, 46],
	            [-12, 14],
	            [-9, 35],
	            [-16, -5]
	        ],
	        [
	            [7703, 6727],
	            [-30, 9],
	            [9, 25],
	            [-13, 36],
	            [-20, -24],
	            [-23, 14],
	            [-32, -37],
	            [-25, -44],
	            [-23, -8]
	        ],
	        [
	            [7466, 6670],
	            [-2, 47],
	            [-17, -13]
	        ],
	        [
	            [7447, 6704],
	            [-32, 6],
	            [-32, 14],
	            [-22, 26],
	            [-22, 11],
	            [-9, 29],
	            [-16, 8],
	            [-28, 39],
	            [-22, 18],
	            [-12, -14]
	        ],
	        [
	            [7252, 6841],
	            [-38, 41],
	            [-28, 37],
	            [-7, 65],
	            [20, -7],
	            [1, 30],
	            [-12, 30],
	            [3, 48],
	            [-30, 69]
	        ],
	        [
	            [7161, 7154],
	            [-45, 24],
	            [-8, 46],
	            [-21, 27]
	        ],
	        [
	            [7082, 7268],
	            [-4, 34],
	            [1, 23],
	            [-17, 13],
	            [-9, -6],
	            [-7, 55]
	        ],
	        [
	            [7046, 7387],
	            [8, 13],
	            [-4, 14],
	            [26, 28],
	            [20, 12],
	            [29, -8],
	            [11, 38],
	            [35, 7],
	            [10, 23],
	            [44, 32],
	            [4, 13]
	        ],
	        [
	            [7229, 7559],
	            [-2, 34],
	            [19, 15],
	            [-25, 103],
	            [55, 24],
	            [14, 13],
	            [20, 106],
	            [55, -20],
	            [15, 27],
	            [2, 59],
	            [23, 6],
	            [21, 39]
	        ],
	        [
	            [7426, 7965],
	            [11, 5]
	        ],
	        [
	            [7437, 7970],
	            [7, -41],
	            [23, -32],
	            [40, -22],
	            [19, -47],
	            [-10, -70],
	            [10, -25],
	            [33, -10],
	            [37, -8],
	            [33, -37],
	            [18, -7],
	            [12, -54],
	            [17, -35],
	            [30, 1],
	            [58, -13],
	            [36, 8],
	            [28, -9],
	            [41, -36],
	            [34, 0],
	            [12, -18],
	            [32, 32],
	            [45, 20],
	            [42, 2],
	            [32, 21],
	            [20, 32],
	            [20, 20],
	            [-5, 19],
	            [-9, 23],
	            [15, 38],
	            [15, -5],
	            [29, -12],
	            [28, 31],
	            [42, 23],
	            [20, 39],
	            [20, 17],
	            [40, 8],
	            [22, -7],
	            [3, 21],
	            [-25, 41],
	            [-22, 19],
	            [-22, -22],
	            [-27, 10],
	            [-16, -8],
	            [-7, 24],
	            [20, 59],
	            [13, 45]
	        ],
	        [
	            [8240, 8005],
	            [34, -23],
	            [39, 38],
	            [-1, 26],
	            [26, 62],
	            [15, 19],
	            [0, 33],
	            [-16, 14],
	            [23, 29],
	            [35, 11],
	            [37, 2],
	            [41, -18],
	            [25, -22],
	            [17, -59],
	            [10, -26],
	            [10, -36],
	            [10, -58],
	            [49, -19],
	            [32, -42],
	            [12, -55],
	            [42, 0],
	            [24, 23],
	            [46, 17],
	            [-15, -53],
	            [-11, -21],
	            [-9, -65],
	            [-19, -58],
	            [-33, 11],
	            [-24, -21],
	            [7, -51],
	            [-4, -69],
	            [-14, -2],
	            [0, -30]
	        ],
	        [
	            [4920, 5353],
	            [-12, -1],
	            [-20, 12],
	            [-18, -1],
	            [-33, -10],
	            [-19, -18],
	            [-27, -21],
	            [-6, 1]
	        ],
	        [
	            [4785, 5315],
	            [2, 49],
	            [3, 7],
	            [-1, 24],
	            [-12, 24],
	            [-8, 4],
	            [-8, 17],
	            [6, 26],
	            [-3, 28],
	            [1, 18]
	        ],
	        [
	            [4765, 5512],
	            [5, 0],
	            [1, 25],
	            [-2, 12],
	            [3, 8],
	            [10, 7],
	            [-7, 47],
	            [-6, 25],
	            [2, 20],
	            [5, 4]
	        ],
	        [
	            [4776, 5660],
	            [4, 6],
	            [8, -9],
	            [21, -1],
	            [5, 18],
	            [5, -1],
	            [8, 6],
	            [4, -25],
	            [7, 7],
	            [11, 9]
	        ],
	        [
	            [4921, 5627],
	            [7, -84],
	            [-11, -50],
	            [-8, -66],
	            [12, -51],
	            [-1, -23]
	        ],
	        [
	            [5363, 5191],
	            [-4, 4],
	            [-16, -8],
	            [-17, 8],
	            [-13, -4]
	        ],
	        [
	            [5313, 5191],
	            [-45, 1]
	        ],
	        [
	            [5268, 5192],
	            [4, 47],
	            [-11, 39],
	            [-13, 10],
	            [-6, 27],
	            [-7, 8],
	            [1, 16]
	        ],
	        [
	            [5236, 5339],
	            [7, 42],
	            [13, 57],
	            [8, 1],
	            [17, 34],
	            [10, 1],
	            [16, -24],
	            [19, 20],
	            [2, 25],
	            [7, 23],
	            [4, 30],
	            [15, 25],
	            [5, 41],
	            [6, 13],
	            [4, 31],
	            [7, 37],
	            [24, 46],
	            [1, 20],
	            [3, 10],
	            [-11, 24]
	        ],
	        [
	            [5393, 5795],
	            [1, 19],
	            [8, 3]
	        ],
	        [
	            [5402, 5817],
	            [11, -38],
	            [2, -39],
	            [-1, -39],
	            [15, -54],
	            [-15, 1],
	            [-8, -4],
	            [-13, 6],
	            [-6, -28],
	            [16, -35],
	            [13, -10],
	            [3, -24],
	            [9, -41],
	            [-4, -16]
	        ],
	        [
	            [5444, 5191],
	            [-2, -31],
	            [-22, 14],
	            [-22, 15],
	            [-35, 2]
	        ],
	        [
	            [5856, 5265],
	            [-2, -69],
	            [11, -8],
	            [-9, -21],
	            [-10, -16],
	            [-11, -31],
	            [-6, -27],
	            [-1, -48],
	            [-7, -22],
	            [0, -45]
	        ],
	        [
	            [5821, 4978],
	            [-8, -16],
	            [-1, -35],
	            [-4, -5],
	            [-2, -32]
	        ],
	        [
	            [5814, 4792],
	            [5, -55],
	            [-2, -30],
	            [5, -35],
	            [16, -33],
	            [15, -74]
	        ],
	        [
	            [5853, 4565],
	            [-11, 6],
	            [-37, -10],
	            [-7, -7],
	            [-8, -38],
	            [6, -26],
	            [-5, -70],
	            [-3, -59],
	            [7, -11],
	            [19, -23],
	            [8, 11],
	            [2, -64],
	            [-21, 1],
	            [-11, 32],
	            [-10, 25],
	            [-22, 9],
	            [-6, 31],
	            [-17, -19],
	            [-22, 8],
	            [-10, 27],
	            [-17, 6],
	            [-13, -2],
	            [-2, 19],
	            [-9, 1]
	        ],
	        [
	            [5342, 4697],
	            [-4, 18]
	        ],
	        [
	            [5360, 4775],
	            [8, -6],
	            [9, 23],
	            [15, -1],
	            [2, -17],
	            [11, -10],
	            [16, 37],
	            [16, 29],
	            [7, 19],
	            [-1, 48],
	            [12, 58],
	            [13, 30],
	            [18, 29],
	            [3, 18],
	            [1, 22],
	            [5, 21],
	            [-2, 33],
	            [4, 52],
	            [5, 37],
	            [8, 32],
	            [2, 36]
	        ],
	        [
	            [5760, 5367],
	            [17, -49],
	            [12, -7],
	            [8, 10],
	            [12, -4],
	            [16, 12],
	            [6, -25],
	            [25, -39]
	        ],
	        [
	            [5330, 4760],
	            [-22, 62]
	        ],
	        [
	            [5308, 4822],
	            [21, 33],
	            [-11, 39],
	            [10, 15],
	            [19, 7],
	            [2, 26],
	            [15, -28],
	            [24, -2],
	            [9, 27],
	            [3, 40],
	            [-3, 46],
	            [-13, 35],
	            [12, 68],
	            [-7, 12],
	            [-21, -5],
	            [-7, 31],
	            [2, 25]
	        ],
	        [
	            [2906, 5049],
	            [-12, 14],
	            [-14, 19],
	            [-7, -9],
	            [-24, 8],
	            [-7, 25],
	            [-5, -1],
	            [-28, 34]
	        ],
	        [
	            [2809, 5139],
	            [-3, 18],
	            [10, 5],
	            [-1, 29],
	            [6, 22],
	            [14, 4],
	            [12, 37],
	            [10, 31],
	            [-10, 14],
	            [5, 34],
	            [-6, 54],
	            [6, 16],
	            [-4, 50],
	            [-12, 31]
	        ],
	        [
	            [2836, 5484],
	            [4, 29],
	            [9, -4],
	            [5, 17],
	            [-6, 35],
	            [3, 9]
	        ],
	        [
	            [2851, 5570],
	            [14, -2],
	            [21, 41],
	            [12, 6],
	            [0, 20],
	            [5, 50],
	            [16, 27],
	            [17, 1],
	            [3, 13],
	            [21, -5],
	            [22, 30],
	            [11, 13],
	            [14, 28],
	            [9, -3],
	            [8, -16],
	            [-6, -20]
	        ],
	        [
	            [3018, 5753],
	            [-18, -10],
	            [-7, -29],
	            [-10, -17],
	            [-8, -22],
	            [-4, -42],
	            [-8, -35],
	            [15, -4],
	            [3, -27],
	            [6, -13],
	            [3, -24],
	            [-4, -22],
	            [1, -12],
	            [7, -5],
	            [7, -20],
	            [36, 5],
	            [16, -7],
	            [19, -51],
	            [11, 6],
	            [20, -3],
	            [16, 7],
	            [10, -10],
	            [-5, -32],
	            [-6, -20],
	            [-2, -42],
	            [5, -40],
	            [8, -17],
	            [1, -13],
	            [-14, -30],
	            [10, -13],
	            [8, -21],
	            [8, -58]
	        ],
	        [
	            [3058, 4804],
	            [-14, 31],
	            [-8, 1],
	            [18, 61],
	            [-21, 27],
	            [-17, -5],
	            [-10, 10],
	            [-15, -15],
	            [-21, 7],
	            [-16, 62],
	            [-13, 15],
	            [-9, 28],
	            [-19, 28],
	            [-7, -5]
	        ],
	        [
	            [2695, 5543],
	            [-15, 14],
	            [-6, 12],
	            [4, 10],
	            [-1, 13],
	            [-8, 14],
	            [-11, 12],
	            [-10, 8],
	            [-1, 17],
	            [-8, 10],
	            [2, -17],
	            [-5, -14],
	            [-7, 17],
	            [-9, 5],
	            [-4, 12],
	            [1, 18],
	            [3, 19],
	            [-8, 8],
	            [7, 12]
	        ],
	        [
	            [2619, 5713],
	            [4, 7],
	            [18, -15],
	            [7, 7],
	            [9, -5],
	            [4, -12],
	            [8, -4],
	            [7, 13]
	        ],
	        [
	            [2676, 5704],
	            [7, -32],
	            [11, -24],
	            [13, -25]
	        ],
	        [
	            [2707, 5623],
	            [-11, -6],
	            [0, -23],
	            [6, -9],
	            [-4, -7],
	            [1, -11],
	            [-2, -12],
	            [-2, -12]
	        ],
	        [
	            [2715, 6427],
	            [23, -4],
	            [22, 0],
	            [26, -21],
	            [11, -21],
	            [26, 6],
	            [10, -13],
	            [24, -37],
	            [17, -27],
	            [9, 1],
	            [17, -12],
	            [-2, -17],
	            [20, -2],
	            [21, -24],
	            [-3, -14],
	            [-19, -7],
	            [-18, -3],
	            [-19, 4],
	            [-40, -5],
	            [18, 32],
	            [-11, 16],
	            [-18, 4],
	            [-9, 17],
	            [-7, 33],
	            [-16, -2],
	            [-26, 16],
	            [-8, 12],
	            [-36, 10],
	            [-10, 11],
	            [11, 15],
	            [-28, 3],
	            [-20, -31],
	            [-11, -1],
	            [-4, -14],
	            [-14, -7],
	            [-12, 6],
	            [15, 18],
	            [6, 22],
	            [13, 13],
	            [14, 11],
	            [21, 6],
	            [7, 6]
	        ],
	        [
	            [5909, 7133],
	            [2, 1],
	            [4, 14],
	            [20, -1],
	            [25, 18],
	            [-19, -25],
	            [2, -11]
	        ],
	        [
	            [5943, 7129],
	            [-3, 2],
	            [-5, -5],
	            [-4, 1],
	            [-2, -2],
	            [0, 6],
	            [-2, 4],
	            [-6, 0],
	            [-7, -5],
	            [-5, 3]
	        ],
	        [
	            [5943, 7129],
	            [1, -5],
	            [-28, -24],
	            [-14, 8],
	            [-7, 23],
	            [14, 2]
	        ],
	        [
	            [5377, 7945],
	            [-16, 25],
	            [-14, 15],
	            [-3, 25],
	            [-5, 17],
	            [21, 13],
	            [10, 15],
	            [20, 11],
	            [7, 11],
	            [7, -6],
	            [13, 6]
	        ],
	        [
	            [5417, 8077],
	            [13, -19],
	            [21, -5],
	            [-2, -17],
	            [15, -12],
	            [4, 15],
	            [19, -6],
	            [3, -19],
	            [20, -3],
	            [13, -29]
	        ],
	        [
	            [5523, 7982],
	            [-8, 0],
	            [-4, -11],
	            [-7, -3],
	            [-2, -13],
	            [-5, -3],
	            [-1, -5],
	            [-9, -7],
	            [-12, 1],
	            [-4, -13]
	        ],
	        [
	            [5275, 8306],
	            [1, -23],
	            [28, -14],
	            [-1, -21],
	            [29, 11],
	            [15, 16],
	            [32, -23],
	            [13, -19]
	        ],
	        [
	            [5392, 8233],
	            [6, -30],
	            [-8, -16],
	            [11, -21],
	            [6, -31],
	            [-2, -21],
	            [12, -37]
	        ],
	        [
	            [5207, 7871],
	            [3, 42],
	            [14, 40],
	            [-40, 11],
	            [-13, 16]
	        ],
	        [
	            [5171, 7980],
	            [2, 26],
	            [-6, 13]
	        ],
	        [
	            [5171, 8059],
	            [-5, 62],
	            [17, 0],
	            [7, 22],
	            [6, 54],
	            [-5, 20]
	        ],
	        [
	            [5191, 8217],
	            [6, 13],
	            [23, 3],
	            [5, -13],
	            [19, 29],
	            [-6, 22],
	            [-2, 34]
	        ],
	        [
	            [5236, 8305],
	            [21, -8],
	            [18, 9]
	        ],
	        [
	            [6196, 5808],
	            [7, -19],
	            [-1, -24],
	            [-16, -14],
	            [12, -16]
	        ],
	        [
	            [6198, 5735],
	            [-10, -32]
	        ],
	        [
	            [6188, 5703],
	            [-7, 11],
	            [-6, -5],
	            [-16, 1],
	            [0, 18],
	            [-2, 17],
	            [9, 27],
	            [10, 26]
	        ],
	        [
	            [6176, 5798],
	            [12, -5],
	            [8, 15]
	        ],
	        [
	            [5352, 8343],
	            [-17, -48],
	            [-29, 33],
	            [-4, 25],
	            [41, 19],
	            [9, -29]
	        ],
	        [
	            [5236, 8305],
	            [-11, 32],
	            [-1, 61],
	            [5, 16],
	            [8, 17],
	            [24, 4],
	            [10, 16],
	            [22, 17],
	            [-1, -30],
	            [-8, -20],
	            [4, -16],
	            [15, -9],
	            [-7, -22],
	            [-8, 6],
	            [-20, -42],
	            [7, -29]
	        ],
	        [
	            [3008, 6222],
	            [3, 10],
	            [22, 0],
	            [16, -15],
	            [8, 1],
	            [5, -21],
	            [15, 1],
	            [-1, -17],
	            [12, -2],
	            [14, -22],
	            [-10, -24],
	            [-14, 13],
	            [-12, -3],
	            [-9, 3],
	            [-5, -11],
	            [-11, -3],
	            [-4, 14],
	            [-10, -8],
	            [-11, -41],
	            [-7, 10],
	            [-1, 17]
	        ],
	        [
	            [3008, 6124],
	            [0, 16],
	            [-7, 17],
	            [7, 10],
	            [2, 23],
	            [-2, 32]
	        ],
	        [
	            [5333, 6444],
	            [-95, -112],
	            [-81, -117],
	            [-39, -26]
	        ],
	        [
	            [5118, 6189],
	            [-31, -6],
	            [0, 38],
	            [-13, 10],
	            [-17, 16],
	            [-7, 28],
	            [-94, 129],
	            [-93, 129]
	        ],
	        [
	            [4863, 6533],
	            [-105, 143]
	        ],
	        [
	            [4758, 6676],
	            [1, 11],
	            [0, 4]
	        ],
	        [
	            [4759, 6691],
	            [0, 70],
	            [44, 44],
	            [28, 9],
	            [23, 16],
	            [11, 29],
	            [32, 24],
	            [1, 44],
	            [16, 5],
	            [13, 22],
	            [36, 9],
	            [5, 23],
	            [-7, 13],
	            [-10, 62],
	            [-1, 36],
	            [-11, 38]
	        ],
	        [
	            [4939, 7135],
	            [27, 32],
	            [30, 11],
	            [17, 24],
	            [27, 18],
	            [47, 11],
	            [46, 4],
	            [14, -8],
	            [26, 23],
	            [30, 0],
	            [11, -13],
	            [19, 3]
	        ],
	        [
	            [5233, 7240],
	            [-5, -30],
	            [4, -56],
	            [-6, -49],
	            [-18, -33],
	            [3, -45],
	            [23, -35],
	            [0, -14],
	            [17, -24],
	            [12, -106]
	        ],
	        [
	            [5263, 6848],
	            [9, -52],
	            [1, -28],
	            [-5, -48],
	            [2, -27],
	            [-3, -32],
	            [2, -37],
	            [-11, -25],
	            [17, -43],
	            [1, -25],
	            [10, -33],
	            [13, 11],
	            [22, -28],
	            [12, -37]
	        ],
	        [
	            [2769, 4856],
	            [15, 45],
	            [-6, 25],
	            [-11, -27],
	            [-16, 26],
	            [5, 16],
	            [-4, 54],
	            [9, 9],
	            [5, 37],
	            [11, 38],
	            [-2, 24],
	            [15, 13],
	            [19, 23]
	        ],
	        [
	            [2906, 5049],
	            [4, -45],
	            [-9, -39],
	            [-30, -62],
	            [-33, -23],
	            [-17, -51],
	            [-6, -40],
	            [-15, -24],
	            [-12, 29],
	            [-11, 7],
	            [-12, -5],
	            [-1, 22],
	            [8, 14],
	            [-3, 24]
	        ],
	        [
	            [5969, 6800],
	            [-7, -23],
	            [-6, -45],
	            [-8, -31],
	            [-6, -10],
	            [-10, 19],
	            [-12, 26],
	            [-20, 85],
	            [-3, -5],
	            [12, -63],
	            [17, -59],
	            [21, -92],
	            [10, -32],
	            [9, -34],
	            [25, -65],
	            [-6, -10],
	            [1, -39],
	            [33, -53],
	            [4, -12]
	        ],
	        [
	            [6023, 6357],
	            [-110, 0],
	            [-107, 0],
	            [-112, 0]
	        ],
	        [
	            [5694, 6357],
	            [0, 218],
	            [0, 210],
	            [-8, 47],
	            [7, 37],
	            [-5, 25],
	            [10, 29]
	        ],
	        [
	            [5698, 6923],
	            [37, 0],
	            [27, -15],
	            [28, -18],
	            [13, -9],
	            [21, 19],
	            [11, 17],
	            [25, 5],
	            [20, -8],
	            [7, -29],
	            [7, 19],
	            [22, -14],
	            [22, -3],
	            [13, 15]
	        ],
	        [
	            [5951, 6902],
	            [18, -102]
	        ],
	        [
	            [6176, 5798],
	            [-10, 20],
	            [-11, 34],
	            [-12, 19],
	            [-8, 21],
	            [-24, 23],
	            [-19, 1],
	            [-7, 12],
	            [-16, -14],
	            [-17, 27],
	            [-8, -44],
	            [-33, 13]
	        ],
	        [
	            [6011, 5910],
	            [-3, 23],
	            [12, 87],
	            [3, 39],
	            [9, 18],
	            [20, 10],
	            [14, 34]
	        ],
	        [
	            [6066, 6121],
	            [16, -69],
	            [8, -54],
	            [15, -29],
	            [38, -55],
	            [16, -34],
	            [15, -34],
	            [8, -20],
	            [14, -18]
	        ],
	        [
	            [4749, 7532],
	            [1, 42],
	            [-11, 25],
	            [39, 43],
	            [34, -11],
	            [37, 1],
	            [30, -10],
	            [23, 3],
	            [45, -2]
	        ],
	        [
	            [4947, 7623],
	            [11, -23],
	            [51, -27],
	            [10, 13],
	            [31, -27],
	            [32, 8]
	        ],
	        [
	            [5082, 7567],
	            [2, -35],
	            [-26, -39],
	            [-36, -12],
	            [-2, -20],
	            [-18, -33],
	            [-10, -48],
	            [11, -34],
	            [-16, -26],
	            [-6, -39],
	            [-21, -11],
	            [-20, -46],
	            [-35, -1],
	            [-27, 1],
	            [-17, -21],
	            [-11, -22],
	            [-13, 5],
	            [-11, 20],
	            [-8, 34],
	            [-26, 9]
	        ],
	        [
	            [4792, 7249],
	            [-2, 20],
	            [10, 22],
	            [4, 16],
	            [-9, 17],
	            [7, 39],
	            [-11, 36],
	            [12, 5],
	            [1, 27],
	            [5, 9],
	            [0, 46],
	            [13, 16],
	            [-8, 30],
	            [-16, 2],
	            [-5, -8],
	            [-16, 0],
	            [-7, 29],
	            [-11, -8],
	            [-10, -15]
	        ],
	        [
	            [5675, 8472],
	            [3, 35],
	            [-10, -8],
	            [-18, 21],
	            [-2, 34],
	            [35, 17],
	            [35, 8],
	            [30, -10],
	            [29, 2]
	        ],
	        [
	            [5777, 8571],
	            [4, -10],
	            [-20, -34],
	            [8, -55],
	            [-12, -19]
	        ],
	        [
	            [5757, 8453],
	            [-22, 0],
	            [-24, 22],
	            [-13, 7],
	            [-23, -10]
	        ],
	        [
	            [6188, 5703],
	            [-6, -21],
	            [10, -32],
	            [10, -29],
	            [11, -21],
	            [90, -70],
	            [24, 0]
	        ],
	        [
	            [6327, 5530],
	            [-79, -177],
	            [-36, -3],
	            [-25, -41],
	            [-17, -1],
	            [-8, -19]
	        ],
	        [
	            [6162, 5289],
	            [-19, 0],
	            [-11, 20],
	            [-26, -25],
	            [-8, -24],
	            [-18, 4],
	            [-6, 7],
	            [-7, -1],
	            [-9, 0],
	            [-35, 50],
	            [-19, 0],
	            [-10, 20],
	            [0, 33],
	            [-14, 10]
	        ],
	        [
	            [5980, 5383],
	            [-17, 64],
	            [-12, 14],
	            [-5, 23],
	            [-14, 29],
	            [-17, 4],
	            [9, 34],
	            [15, 2],
	            [4, 18]
	        ],
	        [
	            [5943, 5571],
	            [0, 53]
	        ],
	        [
	            [5943, 5624],
	            [8, 62],
	            [13, 16],
	            [3, 24],
	            [12, 45],
	            [17, 30],
	            [11, 58],
	            [4, 51]
	        ],
	        [
	            [5794, 9138],
	            [-4, -42],
	            [42, -39],
	            [-26, -45],
	            [33, -67],
	            [-19, -51],
	            [25, -43],
	            [-11, -39],
	            [41, -40],
	            [-11, -31],
	            [-25, -34],
	            [-60, -75]
	        ],
	        [
	            [5779, 8632],
	            [-50, -5],
	            [-49, -21],
	            [-45, -13],
	            [-16, 32],
	            [-27, 20],
	            [6, 58],
	            [-14, 53],
	            [14, 35],
	            [25, 37],
	            [63, 64],
	            [19, 12],
	            [-3, 25],
	            [-39, 28]
	        ],
	        [
	            [5663, 8957],
	            [-9, 23],
	            [-1, 91],
	            [-43, 40],
	            [-37, 29]
	        ],
	        [
	            [5573, 9140],
	            [17, 16],
	            [30, -32],
	            [37, 3],
	            [30, -14],
	            [26, 26],
	            [14, 44],
	            [43, 20],
	            [35, -24],
	            [-11, -41]
	        ],
	        [
	            [9954, 4033],
	            [9, -17],
	            [-4, -31],
	            [-17, -8],
	            [-16, 7],
	            [-2, 26],
	            [10, 21],
	            [13, -8],
	            [7, 10]
	        ],
	        [
	            [0, 4079],
	            [9981, -14],
	            [-17, -13],
	            [-4, 23],
	            [14, 12],
	            [9, 3],
	            [-9983, 18]
	        ],
	        [
	            [0, 4108],
	            [0, -29]
	        ],
	        [
	            [0, 4108],
	            [6, 3],
	            [-4, -28],
	            [-2, -4]
	        ],
	        [
	            [3300, 1994],
	            [33, 36],
	            [24, -15],
	            [16, 24],
	            [22, -27],
	            [-8, -21],
	            [-37, -17],
	            [-13, 20],
	            [-23, -26],
	            [-14, 26]
	        ],
	        [
	            [5265, 7548],
	            [-9, -46],
	            [-13, 12],
	            [-6, 40],
	            [5, 22],
	            [18, 22],
	            [5, -50]
	        ],
	        [
	            [5157, 7984],
	            [6, -6],
	            [8, 2]
	        ],
	        [
	            [5190, 7775],
	            [-2, -17],
	            [9, -22],
	            [-10, -18],
	            [7, -46],
	            [15, -8],
	            [-3, -25]
	        ],
	        [
	            [5206, 7639],
	            [-25, -34],
	            [-55, 16],
	            [-40, -19],
	            [-4, -35]
	        ],
	        [
	            [4947, 7623],
	            [14, 35],
	            [5, 118],
	            [-28, 62],
	            [-21, 30],
	            [-42, 23],
	            [-3, 43],
	            [36, 12],
	            [47, -15],
	            [-9, 67],
	            [26, -25],
	            [65, 46],
	            [8, 48],
	            [24, 12]
	        ],
	        [
	            [3485, 5194],
	            [7, 25],
	            [3, 27]
	        ],
	        [
	            [3495, 5246],
	            [4, 26],
	            [-10, 34]
	        ],
	        [
	            [3489, 5306],
	            [-3, 41],
	            [15, 51]
	        ],
	        [
	            [3501, 5398],
	            [9, -7],
	            [21, -14],
	            [29, -50],
	            [5, -24]
	        ],
	        [
	            [5308, 4822],
	            [-29, 60],
	            [-18, 49],
	            [-17, 61],
	            [1, 19],
	            [6, 19],
	            [7, 43],
	            [5, 44]
	        ],
	        [
	            [5263, 5117],
	            [10, 4],
	            [40, -1],
	            [0, 71]
	        ],
	        [
	            [4827, 8240],
	            [-21, 12],
	            [-17, -1],
	            [6, 32],
	            [-6, 32]
	        ],
	        [
	            [4789, 8315],
	            [23, 2],
	            [30, -37],
	            [-15, -40]
	        ],
	        [
	            [4916, 8521],
	            [-30, -63],
	            [29, 8],
	            [30, -1],
	            [-7, -48],
	            [-25, -53],
	            [29, -4],
	            [2, -6],
	            [25, -69],
	            [19, -10],
	            [17, -67],
	            [8, -24],
	            [33, -11],
	            [-3, -38],
	            [-14, -17],
	            [11, -30],
	            [-25, -31],
	            [-37, 0],
	            [-48, -16],
	            [-13, 12],
	            [-18, -28],
	            [-26, 7],
	            [-19, -23],
	            [-15, 12],
	            [41, 62],
	            [25, 13],
	            [-1, 0],
	            [-43, 9],
	            [-8, 24],
	            [29, 18],
	            [-15, 32],
	            [5, 39],
	            [42, -6],
	            [4, 35],
	            [-19, 36],
	            [0, 1],
	            [-34, 10],
	            [-7, 16],
	            [10, 27],
	            [-9, 16],
	            [-15, -28],
	            [-1, 57],
	            [-14, 30],
	            [10, 61],
	            [21, 48],
	            [23, -4],
	            [33, 4]
	        ],
	        [
	            [6154, 7511],
	            [4, 26],
	            [-7, 40],
	            [-16, 22],
	            [-16, 6],
	            [-10, 19]
	        ],
	        [
	            [6109, 7624],
	            [4, 6],
	            [23, -10],
	            [41, -9],
	            [38, -28],
	            [5, -11],
	            [17, 9],
	            [25, -13],
	            [9, -24],
	            [17, -13]
	        ],
	        [
	            [6210, 7485],
	            [-27, 29],
	            [-29, -3]
	        ],
	        [
	            [5029, 5408],
	            [-44, -35],
	            [-15, -20],
	            [-25, -17],
	            [-25, 17]
	        ],
	        [
	            [5000, 5708],
	            [-2, -18],
	            [12, -30],
	            [0, -43],
	            [2, -47],
	            [7, -21],
	            [-6, -54],
	            [2, -29],
	            [8, -37],
	            [6, -21]
	        ],
	        [
	            [4765, 5512],
	            [-8, 1],
	            [-5, -24],
	            [-8, 1],
	            [-6, 12],
	            [2, 24],
	            [-11, 36],
	            [-8, -7],
	            [-6, -1]
	        ],
	        [
	            [4715, 5554],
	            [-7, -3],
	            [0, 21],
	            [-4, 16],
	            [0, 17],
	            [-6, 25],
	            [-7, 21],
	            [-23, 0],
	            [-6, -11],
	            [-8, -1],
	            [-4, -13],
	            [-4, -17],
	            [-14, -26]
	        ],
	        [
	            [4632, 5583],
	            [-13, 35],
	            [-10, 24],
	            [-8, 7],
	            [-6, 12],
	            [-4, 26],
	            [-4, 13],
	            [-8, 10]
	        ],
	        [
	            [4579, 5710],
	            [13, 29],
	            [8, -2],
	            [7, 10],
	            [6, 0],
	            [5, 8],
	            [-3, 20],
	            [3, 6],
	            [1, 20]
	        ],
	        [
	            [4619, 5801],
	            [13, -1],
	            [20, -14],
	            [6, 1],
	            [3, 7],
	            [15, -5],
	            [4, 4]
	        ],
	        [
	            [4680, 5793],
	            [1, -22],
	            [5, 0],
	            [7, 8],
	            [5, -2],
	            [7, -15],
	            [12, -5],
	            [8, 13],
	            [9, 8],
	            [6, 8],
	            [6, -1],
	            [6, -13],
	            [3, -17],
	            [12, -24],
	            [-6, -16],
	            [-1, -19],
	            [6, 6],
	            [3, -7],
	            [-1, -17],
	            [8, -18]
	        ],
	        [
	            [4532, 5834],
	            [3, 27]
	        ],
	        [
	            [4535, 5861],
	            [31, 1],
	            [6, 14],
	            [9, 1],
	            [11, -14],
	            [8, -1],
	            [9, 10],
	            [6, -17],
	            [-12, -13],
	            [-12, 1],
	            [-12, 13],
	            [-10, -14],
	            [-5, -1],
	            [-7, -8],
	            [-25, 1]
	        ],
	        [
	            [4579, 5710],
	            [-15, 24],
	            [-11, 4],
	            [-7, 17],
	            [1, 9],
	            [-9, 13],
	            [-2, 12]
	        ],
	        [
	            [4536, 5789],
	            [15, 10],
	            [9, -2],
	            [8, 7],
	            [51, -3]
	        ],
	        [
	            [5263, 5117],
	            [-5, 9],
	            [10, 66]
	        ],
	        [
	            [5658, 7167],
	            [15, -20],
	            [22, 3],
	            [20, -4],
	            [0, -10],
	            [15, 7],
	            [-4, -18],
	            [-40, -5],
	            [1, 10],
	            [-34, 12],
	            [5, 25]
	        ],
	        [
	            [5723, 7469],
	            [-17, 2],
	            [-14, 6],
	            [-34, -16],
	            [19, -33],
	            [-14, -10],
	            [-15, 0],
	            [-15, 31],
	            [-5, -13],
	            [6, -36],
	            [14, -27],
	            [-10, -13],
	            [15, -27],
	            [14, -18],
	            [0, -33],
	            [-25, 16],
	            [8, -30],
	            [-18, -7],
	            [11, -52],
	            [-19, -1],
	            [-23, 26],
	            [-10, 47],
	            [-5, 40],
	            [-11, 27],
	            [-14, 34],
	            [-2, 16]
	        ],
	        [
	            [5583, 7470],
	            [18, 6],
	            [11, 13],
	            [15, -2],
	            [5, 11],
	            [5, 2]
	        ],
	        [
	            [5725, 7529],
	            [13, -16],
	            [-8, -37],
	            [-7, -7]
	        ],
	        [
	            [3701, 9939],
	            [93, 35],
	            [97, -2],
	            [36, 21],
	            [98, 6],
	            [222, -7],
	            [174, -47],
	            [-52, -23],
	            [-106, -3],
	            [-150, -5],
	            [14, -11],
	            [99, 7],
	            [83, -21],
	            [54, 18],
	            [23, -21],
	            [-30, -34],
	            [71, 22],
	            [135, 23],
	            [83, -12],
	            [15, -25],
	            [-113, -42],
	            [-16, -14],
	            [-88, -10],
	            [64, -3],
	            [-32, -43],
	            [-23, -38],
	            [1, -66],
	            [33, -38],
	            [-43, -3],
	            [-46, -19],
	            [52, -31],
	            [6, -50],
	            [-30, -6],
	            [36, -50],
	            [-61, -5],
	            [32, -24],
	            [-9, -20],
	            [-39, -10],
	            [-39, 0],
	            [35, -40],
	            [0, -26],
	            [-55, 24],
	            [-14, -15],
	            [37, -15],
	            [37, -36],
	            [10, -48],
	            [-49, -11],
	            [-22, 22],
	            [-34, 34],
	            [10, -40],
	            [-33, -31],
	            [73, -2],
	            [39, -3],
	            [-75, -52],
	            [-75, -46],
	            [-81, -21],
	            [-31, 0],
	            [-29, -23],
	            [-38, -62],
	            [-60, -42],
	            [-19, -2],
	            [-37, -15],
	            [-40, -13],
	            [-24, -37],
	            [0, -41],
	            [-15, -39],
	            [-45, -47],
	            [11, -47],
	            [-12, -48],
	            [-14, -58],
	            [-39, -4],
	            [-41, 49],
	            [-56, 0],
	            [-27, 32],
	            [-18, 58],
	            [-49, 73],
	            [-14, 39],
	            [-3, 53],
	            [-39, 54],
	            [10, 44],
	            [-18, 21],
	            [27, 69],
	            [42, 22],
	            [11, 25],
	            [6, 46],
	            [-32, -21],
	            [-15, -9],
	            [-25, -8],
	            [-34, 19],
	            [-2, 40],
	            [11, 31],
	            [25, 1],
	            [57, -15],
	            [-48, 37],
	            [-24, 20],
	            [-28, -8],
	            [-23, 15],
	            [31, 55],
	            [-17, 22],
	            [-22, 41],
	            [-34, 62],
	            [-35, 23],
	            [0, 25],
	            [-74, 34],
	            [-59, 5],
	            [-74, -3],
	            [-68, -4],
	            [-32, 19],
	            [-49, 37],
	            [73, 19],
	            [56, 3],
	            [-119, 15],
	            [-62, 24],
	            [3, 23],
	            [106, 28],
	            [101, 29],
	            [11, 21],
	            [-75, 22],
	            [24, 23],
	            [97, 41],
	            [40, 7],
	            [-12, 26],
	            [66, 16],
	            [86, 9],
	            [85, 1],
	            [30, -19],
	            [74, 33],
	            [66, -22],
	            [39, -5],
	            [58, -19],
	            [-66, 32],
	            [4, 25]
	        ],
	        [
	            [2497, 5869],
	            [-14, 10],
	            [-17, 1],
	            [-13, 12],
	            [-15, 24]
	        ],
	        [
	            [2438, 5916],
	            [1, 18],
	            [3, 13],
	            [-4, 12],
	            [13, 48],
	            [36, 0],
	            [1, 20],
	            [-5, 4],
	            [-3, 12],
	            [-10, 14],
	            [-11, 20],
	            [13, 0],
	            [0, 33],
	            [26, 0],
	            [26, 0]
	        ],
	        [
	            [2529, 5996],
	            [10, -11],
	            [2, 9],
	            [8, -7]
	        ],
	        [
	            [2549, 5987],
	            [-13, -23],
	            [-13, -16],
	            [-2, -12],
	            [2, -11],
	            [-5, -15]
	        ],
	        [
	            [2518, 5910],
	            [-7, -4],
	            [2, -7],
	            [-6, -6],
	            [-9, -15],
	            [-1, -9]
	        ],
	        [
	            [3340, 5552],
	            [18, -22],
	            [17, -38],
	            [1, -31],
	            [10, -1],
	            [15, -29],
	            [11, -21]
	        ],
	        [
	            [3412, 5410],
	            [-4, -53],
	            [-17, -15],
	            [1, -14],
	            [-5, -31],
	            [13, -42],
	            [9, -1],
	            [3, -33],
	            [17, -51]
	        ],
	        [
	            [3313, 5365],
	            [-19, 45],
	            [7, 16],
	            [0, 27],
	            [17, 10],
	            [7, 11],
	            [-10, 22],
	            [3, 21],
	            [22, 35]
	        ],
	        [
	            [2574, 5825],
	            [-5, 18],
	            [-8, 5]
	        ],
	        [
	            [2561, 5848],
	            [2, 24],
	            [-4, 6],
	            [-6, 4],
	            [-12, -7],
	            [-1, 8],
	            [-8, 10],
	            [-6, 12],
	            [-8, 5]
	        ],
	        [
	            [2549, 5987],
	            [3, -3],
	            [6, 11],
	            [8, 1],
	            [3, -5],
	            [4, 3],
	            [13, -6],
	            [13, 2],
	            [9, 6],
	            [3, 7],
	            [9, -3],
	            [6, -4],
	            [8, 1],
	            [5, 5],
	            [13, -8],
	            [4, -1],
	            [9, -11],
	            [8, -13],
	            [10, -9],
	            [7, -17]
	        ],
	        [
	            [2690, 5943],
	            [-9, 2],
	            [-4, -8],
	            [-10, -8],
	            [-7, 0],
	            [-6, -8],
	            [-6, 3],
	            [-4, 9],
	            [-3, -2],
	            [-4, -14],
	            [-3, 1],
	            [0, -12],
	            [-10, -17],
	            [-5, -7],
	            [-3, -7],
	            [-8, 12],
	            [-6, -16],
	            [-6, 1],
	            [-6, -2],
	            [0, -29],
	            [-4, 0],
	            [-3, -14],
	            [-9, -2]
	        ],
	        [
	            [5522, 7770],
	            [7, -23],
	            [9, -17],
	            [-11, -22]
	        ],
	        [
	            [5515, 7577],
	            [-3, -10]
	        ],
	        [
	            [5512, 7567],
	            [-26, 22],
	            [-16, 21],
	            [-26, 18],
	            [-23, 43],
	            [6, 5],
	            [-13, 25],
	            [-1, 19],
	            [-17, 10],
	            [-9, -26],
	            [-8, 20],
	            [0, 21],
	            [1, 1]
	        ],
	        [
	            [5380, 7746],
	            [20, -2],
	            [5, 9],
	            [9, -9],
	            [11, -1],
	            [0, 16],
	            [10, 6],
	            [2, 24],
	            [23, 16]
	        ],
	        [
	            [5460, 7805],
	            [8, -7],
	            [21, -26],
	            [23, -11],
	            [10, 9]
	        ],
	        [
	            [3008, 6124],
	            [-19, 10],
	            [-13, -5],
	            [-17, 5],
	            [-13, -11],
	            [-15, 18],
	            [3, 19],
	            [25, -8],
	            [21, -5],
	            [10, 13],
	            [-12, 26],
	            [0, 23],
	            [-18, 9],
	            [7, 16],
	            [17, -3],
	            [24, -9]
	        ],
	        [
	            [5471, 7900],
	            [14, -15],
	            [10, -6],
	            [24, 7],
	            [2, 12],
	            [11, 2],
	            [14, 9],
	            [3, -4],
	            [13, 8],
	            [6, 13],
	            [9, 4],
	            [30, -18],
	            [6, 6]
	        ],
	        [
	            [5613, 7918],
	            [15, -16],
	            [2, -16]
	        ],
	        [
	            [5630, 7886],
	            [-17, -12],
	            [-13, -40],
	            [-17, -40],
	            [-22, -11]
	        ],
	        [
	            [5561, 7783],
	            [-17, 2],
	            [-22, -15]
	        ],
	        [
	            [5460, 7805],
	            [-6, 20],
	            [-4, 0]
	        ],
	        [
	            [8352, 4453],
	            [-11, -2],
	            [-37, 42],
	            [26, 11],
	            [14, -18],
	            [10, -17],
	            [-2, -16]
	        ],
	        [
	            [8471, 4532],
	            [2, -11],
	            [1, -18]
	        ],
	        [
	            [8474, 4503],
	            [-18, -45],
	            [-24, -13],
	            [-3, 8],
	            [2, 20],
	            [12, 36],
	            [28, 23]
	        ],
	        [
	            [8274, 4579],
	            [10, -16],
	            [17, 5],
	            [7, -25],
	            [-32, -12],
	            [-19, -8],
	            [-15, 1],
	            [10, 34],
	            [15, 0],
	            [7, 21]
	        ],
	        [
	            [8413, 4579],
	            [-4, -32],
	            [-42, -17],
	            [-37, 7],
	            [0, 22],
	            [22, 12],
	            [18, -18],
	            [18, 5],
	            [25, 21]
	        ],
	        [
	            [8017, 4657],
	            [53, -6],
	            [6, 25],
	            [51, -29],
	            [10, -38],
	            [42, -11],
	            [34, -35],
	            [-31, -23],
	            [-31, 24],
	            [-25, -1],
	            [-29, 4],
	            [-26, 11],
	            [-32, 22],
	            [-21, 6],
	            [-11, -7],
	            [-51, 24],
	            [-5, 25],
	            [-25, 5],
	            [19, 56],
	            [34, -3],
	            [22, -23],
	            [12, -5],
	            [4, -21]
	        ],
	        [
	            [8741, 4690],
	            [-14, -40],
	            [-3, 45],
	            [5, 21],
	            [6, 20],
	            [7, -17],
	            [-1, -29]
	        ],
	        [
	            [8534, 4853],
	            [-11, -19],
	            [-19, 10],
	            [-5, 26],
	            [28, 3],
	            [7, -20]
	        ],
	        [
	            [8623, 4875],
	            [10, -45],
	            [-23, 24],
	            [-23, 5],
	            [-16, -4],
	            [-19, 2],
	            [6, 33],
	            [35, 2],
	            [30, -17]
	        ],
	        [
	            [8916, 4904],
	            [0, -193],
	            [1, -192]
	        ],
	        [
	            [8917, 4519],
	            [-25, 48],
	            [-28, 12],
	            [-7, -17],
	            [-35, -1],
	            [12, 48],
	            [17, 16],
	            [-7, 64],
	            [-14, 50],
	            [-53, 50],
	            [-23, 5],
	            [-42, 54],
	            [-8, -28],
	            [-11, -5],
	            [-6, 21],
	            [0, 26],
	            [-21, 29],
	            [29, 21],
	            [20, -1],
	            [-2, 16],
	            [-41, 0],
	            [-11, 35],
	            [-25, 11],
	            [-11, 29],
	            [37, 14],
	            [14, 20],
	            [45, -25],
	            [4, -22],
	            [8, -95],
	            [29, -35],
	            [23, 62],
	            [32, 36],
	            [25, 0],
	            [23, -21],
	            [21, -21],
	            [30, -11]
	        ],
	        [
	            [8478, 5141],
	            [-22, -58],
	            [-21, -12],
	            [-27, 12],
	            [-46, -3],
	            [-24, -8],
	            [-4, -45],
	            [24, -53],
	            [15, 27],
	            [52, 20],
	            [-2, -27],
	            [-12, 9],
	            [-12, -35],
	            [-25, -23],
	            [27, -76],
	            [-5, -20],
	            [25, -68],
	            [-1, -39],
	            [-14, -17],
	            [-11, 20],
	            [13, 49],
	            [-27, -23],
	            [-7, 16],
	            [3, 23],
	            [-20, 35],
	            [3, 57],
	            [-19, -18],
	            [2, -69],
	            [1, -84],
	            [-17, -9],
	            [-12, 18],
	            [8, 54],
	            [-4, 57],
	            [-12, 1],
	            [-9, 40],
	            [12, 39],
	            [4, 47],
	            [14, 89],
	            [5, 24],
	            [24, 44],
	            [22, -18],
	            [35, -8],
	            [32, 3],
	            [27, 43],
	            [5, -14]
	        ],
	        [
	            [8574, 5124],
	            [-2, -51],
	            [-14, 6],
	            [-4, -36],
	            [11, -32],
	            [-8, -7],
	            [-11, 38],
	            [-8, 75],
	            [6, 47],
	            [9, 22],
	            [2, -32],
	            [16, -5],
	            [3, -25]
	        ],
	        [
	            [8045, 5176],
	            [5, -39],
	            [19, -34],
	            [18, 12],
	            [18, -4],
	            [16, 30],
	            [13, 5],
	            [26, -17],
	            [23, 13],
	            [14, 82],
	            [11, 21],
	            [10, 67],
	            [32, 0],
	            [24, -10]
	        ],
	        [
	            [8274, 5302],
	            [-16, -53],
	            [20, -56],
	            [-5, -28],
	            [32, -54],
	            [-33, -7],
	            [-10, -40],
	            [2, -54],
	            [-27, -40],
	            [-1, -59],
	            [-10, -91],
	            [-5, 21],
	            [-31, -26],
	            [-11, 36],
	            [-20, 3],
	            [-14, 19],
	            [-33, -21],
	            [-10, 29],
	            [-18, -4],
	            [-23, 7],
	            [-4, 79],
	            [-14, 17],
	            [-13, 50],
	            [-4, 52],
	            [3, 55],
	            [16, 39]
	        ],
	        [
	            [7939, 4712],
	            [-31, -1],
	            [-24, 49],
	            [-35, 48],
	            [-12, 36],
	            [-21, 48],
	            [-14, 44],
	            [-21, 83],
	            [-24, 49],
	            [-9, 51],
	            [-10, 46],
	            [-25, 37],
	            [-14, 51],
	            [-21, 33],
	            [-29, 65],
	            [-3, 30],
	            [18, -2],
	            [43, -12],
	            [25, -57],
	            [21, -40],
	            [16, -25],
	            [26, -63],
	            [28, -1],
	            [23, -41],
	            [16, -49],
	            [22, -27],
	            [-12, -49],
	            [16, -20],
	            [10, -2],
	            [5, -41],
	            [10, -33],
	            [20, -5],
	            [14, -37],
	            [-7, -74],
	            [-1, -91]
	        ],
	        [
	            [7252, 6841],
	            [-17, -27],
	            [-11, -55],
	            [27, -23],
	            [26, -29],
	            [36, -33],
	            [38, -8],
	            [16, -30],
	            [22, -5],
	            [33, -14],
	            [23, 1],
	            [4, 23],
	            [-4, 38],
	            [2, 25]
	        ],
	        [
	            [7703, 6727],
	            [2, -22],
	            [-10, -11],
	            [2, -36],
	            [-19, 10],
	            [-36, -41],
	            [0, -33],
	            [-15, -50],
	            [-1, -29],
	            [-13, -48],
	            [-21, 13],
	            [-1, -61],
	            [-7, -20],
	            [3, -25],
	            [-14, -14]
	        ],
	        [
	            [7472, 6360],
	            [-4, -21],
	            [-19, 1],
	            [-34, -13],
	            [2, -44],
	            [-15, -35],
	            [-40, -40],
	            [-31, -69],
	            [-21, -38],
	            [-28, -38],
	            [0, -27],
	            [-13, -15],
	            [-26, -21],
	            [-12, -3],
	            [-9, -45],
	            [6, -77],
	            [1, -49],
	            [-11, -56],
	            [0, -101],
	            [-15, -2],
	            [-12, -46],
	            [8, -19],
	            [-25, -17],
	            [-10, -40],
	            [-11, -17],
	            [-26, 55],
	            [-13, 83],
	            [-11, 60],
	            [-9, 28],
	            [-15, 56],
	            [-7, 74],
	            [-5, 37],
	            [-25, 81],
	            [-12, 115],
	            [-8, 75],
	            [0, 72],
	            [-5, 55],
	            [-41, -35],
	            [-19, 7],
	            [-36, 71],
	            [13, 22],
	            [-8, 23],
	            [-33, 50]
	        ],
	        [
	            [6893, 6457],
	            [19, 40],
	            [61, -1],
	            [-6, 51],
	            [-15, 30],
	            [-4, 46],
	            [-18, 26],
	            [31, 62],
	            [32, -4],
	            [29, 61],
	            [18, 60],
	            [27, 60],
	            [-1, 42],
	            [24, 34],
	            [-23, 29],
	            [-9, 40],
	            [-10, 52],
	            [14, 25],
	            [42, -14],
	            [31, 9],
	            [26, 49]
	        ],
	        [
	            [4827, 8240],
	            [5, -42],
	            [-21, -53],
	            [-49, -35],
	            [-40, 9],
	            [23, 62],
	            [-15, 60],
	            [38, 46],
	            [21, 28]
	        ],
	        [
	            [6497, 7255],
	            [25, 12],
	            [19, 33],
	            [19, -1],
	            [12, 11],
	            [20, -6],
	            [31, -30],
	            [22, -6],
	            [31, -53],
	            [21, -2],
	            [3, -49]
	        ],
	        [
	            [6690, 6820],
	            [14, -31],
	            [11, -36],
	            [27, -26],
	            [1, -52],
	            [13, -10],
	            [2, -27],
	            [-40, -30],
	            [-10, -69]
	        ],
	        [
	            [6708, 6539],
	            [-53, 18],
	            [-30, 13],
	            [-31, 8],
	            [-12, 73],
	            [-13, 10],
	            [-22, -11],
	            [-28, -28],
	            [-34, 20],
	            [-28, 45],
	            [-27, 17],
	            [-18, 56],
	            [-21, 79],
	            [-15, -10],
	            [-17, 20],
	            [-11, -24]
	        ],
	        [
	            [6348, 6825],
	            [-15, 32],
	            [0, 31],
	            [-9, 0],
	            [5, 43],
	            [-15, 45],
	            [-34, 32],
	            [-19, 56],
	            [6, 46],
	            [14, 21],
	            [-2, 34],
	            [-18, 18],
	            [-18, 70]
	        ],
	        [
	            [6243, 7253],
	            [-15, 48],
	            [5, 18],
	            [-8, 68],
	            [19, 17]
	        ],
	        [
	            [6357, 7321],
	            [9, -43],
	            [26, -13],
	            [20, -29],
	            [39, -10],
	            [44, 15],
	            [2, 14]
	        ],
	        [
	            [6348, 6825],
	            [-16, 3]
	        ],
	        [
	            [6332, 6828],
	            [-19, 5],
	            [-20, -56]
	        ],
	        [
	            [6293, 6777],
	            [-52, 4],
	            [-78, 119],
	            [-41, 41],
	            [-34, 16]
	        ],
	        [
	            [6088, 6957],
	            [-11, 72]
	        ],
	        [
	            [6077, 7029],
	            [61, 62],
	            [11, 71],
	            [-3, 43],
	            [16, 15],
	            [14, 37]
	        ],
	        [
	            [6176, 7257],
	            [12, 9],
	            [32, -8],
	            [10, -15],
	            [13, 10]
	        ],
	        [
	            [4597, 8984],
	            [-7, -39],
	            [31, -40],
	            [-36, -45],
	            [-80, -41],
	            [-24, -10],
	            [-36, 8],
	            [-78, 19],
	            [28, 26],
	            [-61, 29],
	            [49, 12],
	            [-1, 17],
	            [-58, 14],
	            [19, 38],
	            [42, 9],
	            [43, -40],
	            [42, 32],
	            [35, -17],
	            [45, 32],
	            [47, -4]
	        ],
	        [
	            [5992, 6990],
	            [-5, -19]
	        ],
	        [
	            [5987, 6971],
	            [-10, 8],
	            [-6, -39],
	            [7, -7],
	            [-7, -8],
	            [-1, -15],
	            [13, 8]
	        ],
	        [
	            [5983, 6918],
	            [0, -23],
	            [-14, -95]
	        ],
	        [
	            [5951, 6902],
	            [8, 19],
	            [-2, 4],
	            [8, 27],
	            [5, 45],
	            [4, 15],
	            [1, 0]
	        ],
	        [
	            [5975, 7012],
	            [9, 0],
	            [3, 11],
	            [7, 0]
	        ],
	        [
	            [5994, 7023],
	            [1, -24],
	            [-4, -9],
	            [1, 0]
	        ],
	        [
	            [5431, 7316],
	            [-10, -46],
	            [4, -19],
	            [-6, -30],
	            [-21, 22],
	            [-14, 7],
	            [-39, 30],
	            [4, 30],
	            [32, -6],
	            [28, 7],
	            [22, 5]
	        ],
	        [
	            [5255, 7492],
	            [17, -42],
	            [-4, -78],
	            [-13, 4],
	            [-11, -20],
	            [-10, 16],
	            [-2, 71],
	            [-6, 34],
	            [15, -3],
	            [14, 18]
	        ],
	        [
	            [5383, 7805],
	            [-3, -29],
	            [7, -25]
	        ],
	        [
	            [5387, 7751],
	            [-22, 8],
	            [-23, -20],
	            [1, -30],
	            [-3, -17],
	            [9, -30],
	            [26, -29],
	            [14, -49],
	            [31, -48],
	            [22, 0],
	            [7, -13],
	            [-8, -11],
	            [25, -22],
	            [20, -18],
	            [24, -30],
	            [3, -11],
	            [-5, -22],
	            [-16, 28],
	            [-24, 10],
	            [-12, -39],
	            [20, -21],
	            [-3, -31],
	            [-11, -4],
	            [-15, -50],
	            [-12, -5],
	            [0, 18],
	            [6, 32],
	            [6, 12],
	            [-11, 35],
	            [-8, 29],
	            [-12, 8],
	            [-8, 25],
	            [-18, 11],
	            [-12, 24],
	            [-21, 4],
	            [-21, 26],
	            [-26, 39],
	            [-19, 34],
	            [-8, 58],
	            [-14, 7],
	            [-23, 20],
	            [-12, -8],
	            [-16, -28],
	            [-12, -4]
	        ],
	        [
	            [2845, 6150],
	            [19, -5],
	            [14, -15],
	            [5, -16],
	            [-19, -1],
	            [-9, -10],
	            [-15, 10],
	            [-16, 21],
	            [3, 14],
	            [12, 4],
	            [6, -2]
	        ],
	        [
	            [5992, 6990],
	            [31, -24],
	            [54, 63]
	        ],
	        [
	            [6088, 6957],
	            [-5, -8],
	            [-56, -30],
	            [28, -59],
	            [-9, -10],
	            [-5, -20],
	            [-21, -8],
	            [-7, -21],
	            [-12, -19],
	            [-31, 10]
	        ],
	        [
	            [5970, 6792],
	            [-1, 8]
	        ],
	        [
	            [5983, 6918],
	            [4, 17],
	            [0, 36]
	        ],
	        [
	            [8739, 7075],
	            [4, -20],
	            [-16, -36],
	            [-11, 19],
	            [-15, -14],
	            [-7, -34],
	            [-18, 16],
	            [0, 28],
	            [15, 36],
	            [16, -7],
	            [12, 25],
	            [20, -13]
	        ],
	        [
	            [8915, 7252],
	            [-10, -47],
	            [4, -30],
	            [-14, -42],
	            [-35, -27],
	            [-49, -4],
	            [-40, -67],
	            [-19, 22],
	            [-1, 44],
	            [-48, -13],
	            [-33, -27],
	            [-32, -2],
	            [28, -43],
	            [-19, -101],
	            [-18, -24],
	            [-13, 23],
	            [7, 53],
	            [-18, 17],
	            [-11, 41],
	            [26, 18],
	            [15, 37],
	            [28, 30],
	            [20, 41],
	            [55, 17],
	            [30, -12],
	            [29, 105],
	            [19, -28],
	            [40, 59],
	            [16, 23],
	            [18, 72],
	            [-5, 67],
	            [11, 37],
	            [30, 11],
	            [15, -82],
	            [-1, -48],
	            [-25, -59],
	            [0, -61]
	        ],
	        [
	            [8997, 7667],
	            [19, -12],
	            [20, 25],
	            [6, -67],
	            [-41, -16],
	            [-25, -59],
	            [-43, 41],
	            [-15, -65],
	            [-31, -1],
	            [-4, 59],
	            [14, 46],
	            [29, 3],
	            [8, 82],
	            [9, 46],
	            [32, -62],
	            [22, -20]
	        ],
	        [
	            [6970, 7554],
	            [-15, -10],
	            [-37, -42],
	            [-12, -42],
	            [-11, 0],
	            [-7, 28],
	            [-36, 2],
	            [-5, 48],
	            [-14, 0],
	            [2, 60],
	            [-33, 43],
	            [-48, -5],
	            [-32, -8],
	            [-27, 53],
	            [-22, 22],
	            [-43, 43],
	            [-6, 5],
	            [-71, -35],
	            [1, -218]
	        ],
	        [
	            [6554, 7498],
	            [-14, -3],
	            [-20, 46],
	            [-18, 17],
	            [-32, -12],
	            [-12, -20]
	        ],
	        [
	            [6458, 7526],
	            [-2, 14],
	            [7, 25],
	            [-5, 21],
	            [-32, 20],
	            [-13, 53],
	            [-15, 15],
	            [-1, 19],
	            [27, -6],
	            [1, 44],
	            [23, 9],
	            [25, -9],
	            [5, 58],
	            [-5, 36],
	            [-28, -2],
	            [-24, 14],
	            [-32, -26],
	            [-26, -12]
	        ],
	        [
	            [6363, 7799],
	            [-14, 9],
	            [3, 31],
	            [-18, 39],
	            [-20, -2],
	            [-24, 40],
	            [16, 45],
	            [-8, 12],
	            [22, 65],
	            [29, -34],
	            [3, 43],
	            [58, 64],
	            [43, 2],
	            [61, -41],
	            [33, -24],
	            [30, 25],
	            [44, 1],
	            [35, -30],
	            [8, 17],
	            [39, -2],
	            [7, 28],
	            [-45, 40],
	            [27, 29],
	            [-5, 16],
	            [26, 15],
	            [-20, 41],
	            [13, 20],
	            [104, 21],
	            [13, 14],
	            [70, 22],
	            [25, 24],
	            [50, -12],
	            [9, -61],
	            [29, 14],
	            [35, -20],
	            [-2, -32],
	            [27, 3],
	            [69, 56],
	            [-10, -19],
	            [35, -46],
	            [62, -150],
	            [15, 31],
	            [39, -34],
	            [39, 16],
	            [16, -11],
	            [13, -34],
	            [20, -12],
	            [11, -25],
	            [36, 8],
	            [15, -36]
	        ],
	        [
	            [7229, 7559],
	            [-17, 9],
	            [-14, 21],
	            [-42, 6],
	            [-46, 2],
	            [-10, -6],
	            [-39, 24],
	            [-16, -12],
	            [-4, -35],
	            [-46, 21],
	            [-18, -9],
	            [-7, -26]
	        ],
	        [
	            [6155, 4958],
	            [-20, -24],
	            [-7, -24],
	            [-10, -4],
	            [-4, -42],
	            [-9, -24],
	            [-5, -39],
	            [-12, -20]
	        ],
	        [
	            [6088, 4781],
	            [-40, 59],
	            [-1, 35],
	            [-101, 120],
	            [-5, 6]
	        ],
	        [
	            [5941, 5001],
	            [0, 63],
	            [8, 24],
	            [14, 39],
	            [10, 43],
	            [-13, 68],
	            [-3, 30],
	            [-13, 41]
	        ],
	        [
	            [5944, 5309],
	            [17, 35],
	            [19, 39]
	        ],
	        [
	            [6162, 5289],
	            [-24, -67],
	            [0, -215],
	            [17, -49]
	        ],
	        [
	            [7046, 7387],
	            [-53, -9],
	            [-34, 19],
	            [-30, -4],
	            [3, 34],
	            [30, -10],
	            [10, 18]
	        ],
	        [
	            [6972, 7435],
	            [21, -6],
	            [36, 43],
	            [-33, 31],
	            [-20, -15],
	            [-21, 22],
	            [24, 39],
	            [-9, 5]
	        ],
	        [
	            [7849, 5777],
	            [-7, 72],
	            [18, 49],
	            [36, 11],
	            [26, -8]
	        ],
	        [
	            [7922, 5901],
	            [23, -23],
	            [12, 40],
	            [25, -21]
	        ],
	        [
	            [7982, 5897],
	            [6, -40],
	            [-3, -71],
	            [-47, -45],
	            [13, -36],
	            [-30, -4],
	            [-24, -24]
	        ],
	        [
	            [7897, 5677],
	            [-23, 9],
	            [-11, 30],
	            [-14, 61]
	        ],
	        [
	            [8564, 7339],
	            [24, -70],
	            [7, -38],
	            [0, -68],
	            [-10, -33],
	            [-25, -11],
	            [-22, -25],
	            [-25, -5],
	            [-3, 32],
	            [5, 45],
	            [-13, 61],
	            [21, 10],
	            [-19, 51]
	        ],
	        [
	            [8504, 7288],
	            [2, 5],
	            [12, -2],
	            [11, 27],
	            [20, 2],
	            [11, 4],
	            [4, 15]
	        ],
	        [
	            [5557, 7574],
	            [5, 13]
	        ],
	        [
	            [5562, 7587],
	            [7, 4],
	            [4, 20],
	            [5, 3],
	            [4, -8],
	            [5, -4],
	            [3, -10],
	            [5, -2],
	            [5, -11],
	            [4, 0],
	            [-3, -14],
	            [-3, -7],
	            [1, -5]
	        ],
	        [
	            [5599, 7553],
	            [-6, -2],
	            [-17, -9],
	            [-1, -12],
	            [-4, 0]
	        ],
	        [
	            [6332, 6828],
	            [6, -26],
	            [-3, -13],
	            [9, -45]
	        ],
	        [
	            [6344, 6744],
	            [-19, -1],
	            [-7, 28],
	            [-25, 6]
	        ],
	        [
	            [7922, 5901],
	            [9, 26],
	            [1, 50],
	            [-22, 52],
	            [-2, 58],
	            [-21, 48],
	            [-21, 4],
	            [-6, -20],
	            [-16, -2],
	            [-8, 10],
	            [-30, -35],
	            [0, 53],
	            [7, 62],
	            [-19, 3],
	            [-2, 36],
	            [-12, 18]
	        ],
	        [
	            [7780, 6264],
	            [6, 21],
	            [24, 39]
	        ],
	        [
	            [7837, 6385],
	            [17, -47],
	            [12, -54],
	            [34, 0],
	            [11, -52],
	            [-18, -15],
	            [-8, -21],
	            [34, -36],
	            [23, -70],
	            [17, -52],
	            [21, -41],
	            [7, -41],
	            [-5, -59]
	        ],
	        [
	            [5975, 7012],
	            [10, 49],
	            [14, 41],
	            [0, 2]
	        ],
	        [
	            [5999, 7104],
	            [13, -3],
	            [4, -23],
	            [-15, -22],
	            [-7, -33]
	        ],
	        [
	            [4785, 5315],
	            [-7, 0],
	            [-29, 28],
	            [-25, 45],
	            [-24, 32],
	            [-18, 38]
	        ],
	        [
	            [4682, 5458],
	            [6, 19],
	            [2, 17],
	            [12, 33],
	            [13, 27]
	        ],
	        [
	            [5412, 6408],
	            [-20, -22],
	            [-15, 33],
	            [-44, 25]
	        ],
	        [
	            [5263, 6848],
	            [13, 14],
	            [3, 25],
	            [-3, 24],
	            [19, 23],
	            [8, 19],
	            [14, 17],
	            [2, 45]
	        ],
	        [
	            [5319, 7015],
	            [32, -20],
	            [12, 5],
	            [23, -10],
	            [37, -26],
	            [13, -53],
	            [25, -11],
	            [39, -25],
	            [30, -29],
	            [13, 15],
	            [13, 27],
	            [-6, 45],
	            [9, 29],
	            [20, 28],
	            [19, 8],
	            [37, -12],
	            [10, -27],
	            [10, 0],
	            [9, -10],
	            [28, -7],
	            [6, -19]
	        ],
	        [
	            [5694, 6357],
	            [0, -118],
	            [-32, 0],
	            [0, -25]
	        ],
	        [
	            [5662, 6214],
	            [-111, 113],
	            [-111, 113],
	            [-28, -32]
	        ],
	        [
	            [7271, 5502],
	            [-4, -62],
	            [-12, -16],
	            [-24, -14],
	            [-13, 47],
	            [-5, 85],
	            [13, 96],
	            [19, -33],
	            [13, -42],
	            [13, -61]
	        ],
	        [
	            [5804, 3347],
	            [10, -18],
	            [-9, -29],
	            [-4, -19],
	            [-16, -9],
	            [-5, -19],
	            [-10, -6],
	            [-21, 46],
	            [15, 37],
	            [15, 23],
	            [13, 12],
	            [12, -18]
	        ],
	        [
	            [5631, 8267],
	            [-2, 15],
	            [3, 16],
	            [-13, 10],
	            [-29, 10]
	        ],
	        [
	            [5590, 8318],
	            [-6, 50]
	        ],
	        [
	            [5584, 8368],
	            [32, 18],
	            [47, -4],
	            [27, 6],
	            [4, -12],
	            [15, -4],
	            [26, -29]
	        ],
	        [
	            [5652, 8242],
	            [-7, 19],
	            [-14, 6]
	        ],
	        [
	            [5584, 8368],
	            [1, 44],
	            [14, 37],
	            [26, 20],
	            [22, -44],
	            [22, 1],
	            [6, 46]
	        ],
	        [
	            [5757, 8453],
	            [14, -14],
	            [2, -28],
	            [9, -35]
	        ],
	        [
	            [4759, 6691],
	            [-4, 0],
	            [0, -31],
	            [-17, -2],
	            [-9, -14],
	            [-13, 0],
	            [-10, 8],
	            [-23, -6],
	            [-9, -46],
	            [-9, -5],
	            [-13, -74],
	            [-38, -64],
	            [-9, -81],
	            [-12, -27],
	            [-3, -21],
	            [-63, -5]
	        ],
	        [
	            [4527, 6323],
	            [1, 27],
	            [11, 17],
	            [9, 30],
	            [-2, 20],
	            [10, 42],
	            [15, 38],
	            [9, 9],
	            [8, 35],
	            [0, 31],
	            [10, 37],
	            [19, 21],
	            [18, 60],
	            [0, 1],
	            [14, 23],
	            [26, 6],
	            [22, 41],
	            [14, 16],
	            [23, 49],
	            [-7, 73],
	            [10, 51],
	            [4, 31],
	            [18, 40],
	            [28, 27],
	            [21, 25],
	            [18, 61],
	            [9, 36],
	            [20, 0],
	            [17, -25],
	            [26, 4],
	            [29, -13],
	            [12, -1]
	        ],
	        [
	            [5739, 7906],
	            [6, 9],
	            [19, 6],
	            [20, -19],
	            [12, -2],
	            [12, -16],
	            [-2, -20],
	            [11, -9],
	            [4, -25],
	            [9, -15],
	            [-2, -9],
	            [5, -6],
	            [-7, -4],
	            [-16, 1],
	            [-3, 9],
	            [-6, -5],
	            [2, -11],
	            [-7, -19],
	            [-5, -20],
	            [-7, -6]
	        ],
	        [
	            [5784, 7745],
	            [-5, 27],
	            [3, 25],
	            [-1, 26],
	            [-16, 35],
	            [-9, 25],
	            [-9, 17],
	            [-8, 6]
	        ],
	        [
	            [6376, 4321],
	            [7, -25],
	            [7, -39],
	            [4, -71],
	            [7, -28],
	            [-2, -28],
	            [-5, -18],
	            [-10, 35],
	            [-5, -18],
	            [5, -43],
	            [-2, -25],
	            [-8, -14],
	            [-1, -50],
	            [-11, -69],
	            [-14, -81],
	            [-17, -112],
	            [-11, -82],
	            [-12, -69],
	            [-23, -14],
	            [-24, -25],
	            [-16, 15],
	            [-22, 21],
	            [-8, 31],
	            [-2, 53],
	            [-10, 47],
	            [-2, 42],
	            [5, 43],
	            [13, 10],
	            [0, 20],
	            [13, 45],
	            [2, 37],
	            [-6, 28],
	            [-5, 38],
	            [-2, 54],
	            [9, 33],
	            [4, 38],
	            [14, 2],
	            [15, 12],
	            [11, 10],
	            [12, 1],
	            [16, 34],
	            [23, 36],
	            [8, 30],
	            [-4, 25],
	            [12, -7],
	            [15, 41],
	            [1, 36],
	            [9, 26],
	            [10, -25]
	        ],
	        [
	            [2301, 6586],
	            [-10, -52],
	            [-5, -43],
	            [-2, -79],
	            [-3, -29],
	            [5, -32],
	            [9, -29],
	            [5, -45],
	            [19, -44],
	            [6, -34],
	            [11, -29],
	            [29, -16],
	            [12, -25],
	            [24, 17],
	            [21, 6],
	            [21, 11],
	            [18, 10],
	            [17, 24],
	            [7, 34],
	            [2, 50],
	            [5, 17],
	            [19, 16],
	            [29, 13],
	            [25, -2],
	            [17, 5],
	            [6, -12],
	            [-1, -29],
	            [-15, -35],
	            [-6, -36],
	            [5, -10],
	            [-4, -26],
	            [-7, -46],
	            [-7, 15],
	            [-6, -1]
	        ],
	        [
	            [2438, 5916],
	            [-32, 64],
	            [-14, 19],
	            [-23, 16],
	            [-15, -5],
	            [-22, -22],
	            [-14, -6],
	            [-20, 16],
	            [-21, 11],
	            [-26, 27],
	            [-21, 8],
	            [-31, 28],
	            [-23, 28],
	            [-7, 16],
	            [-16, 3],
	            [-28, 19],
	            [-12, 27],
	            [-30, 34],
	            [-14, 37],
	            [-6, 29],
	            [9, 5],
	            [-3, 17],
	            [7, 16],
	            [0, 20],
	            [-10, 27],
	            [-2, 23],
	            [-9, 30],
	            [-25, 59],
	            [-28, 46],
	            [-13, 37],
	            [-24, 24],
	            [-5, 14],
	            [4, 37],
	            [-14, 13],
	            [-17, 29],
	            [-7, 41],
	            [-14, 5],
	            [-17, 31],
	            [-13, 29],
	            [-1, 19],
	            [-15, 44],
	            [-10, 45],
	            [1, 23],
	            [-20, 23],
	            [-10, -2],
	            [-15, 16],
	            [-5, -24],
	            [5, -28],
	            [2, -45],
	            [10, -24],
	            [21, -41],
	            [4, -14],
	            [4, -4],
	            [4, -20],
	            [5, 1],
	            [6, -38],
	            [8, -15],
	            [6, -21],
	            [17, -30],
	            [10, -55],
	            [8, -26],
	            [8, -28],
	            [1, -31],
	            [13, -2],
	            [12, -27],
	            [10, -26],
	            [-1, -11],
	            [-12, -21],
	            [-5, 0],
	            [-7, 36],
	            [-18, 33],
	            [-20, 29],
	            [-14, 15],
	            [1, 43],
	            [-5, 32],
	            [-13, 19],
	            [-19, 26],
	            [-4, -8],
	            [-7, 16],
	            [-17, 14],
	            [-16, 34],
	            [2, 5],
	            [11, -4],
	            [11, 22],
	            [1, 27],
	            [-22, 42],
	            [-16, 17],
	            [-10, 36],
	            [-11, 39],
	            [-12, 47],
	            [-12, 54]
	        ],
	        [
	            [1746, 6980],
	            [32, 4],
	            [35, 7],
	            [-2, -12],
	            [41, -29],
	            [64, -41],
	            [55, 0],
	            [22, 0],
	            [0, 24],
	            [48, 0],
	            [10, -20],
	            [15, -19],
	            [16, -26],
	            [9, -31],
	            [7, -32],
	            [15, -18],
	            [23, -18],
	            [17, 47],
	            [23, 1],
	            [19, -24],
	            [14, -40],
	            [10, -35],
	            [16, -34],
	            [6, -41],
	            [8, -28],
	            [22, -18],
	            [20, -13],
	            [10, 2]
	        ],
	        [
	            [5599, 7553],
	            [9, 4],
	            [13, 1]
	        ],
	        [
	            [4661, 5921],
	            [10, 11],
	            [4, 35],
	            [9, 1],
	            [20, -16],
	            [15, 11],
	            [11, -4],
	            [4, 13],
	            [112, 1],
	            [6, 42],
	            [-5, 7],
	            [-13, 255],
	            [-14, 255],
	            [43, 1]
	        ],
	        [
	            [5118, 6189],
	            [0, -136],
	            [-15, -39],
	            [-2, -37],
	            [-25, -9],
	            [-38, -5],
	            [-10, -21],
	            [-18, -3]
	        ],
	        [
	            [4680, 5793],
	            [1, 18],
	            [-2, 23],
	            [-11, 16],
	            [-5, 34],
	            [-2, 37]
	        ],
	        [
	            [7737, 5644],
	            [-3, 44],
	            [9, 45],
	            [-10, 35],
	            [3, 65],
	            [-12, 30],
	            [-9, 71],
	            [-5, 75],
	            [-12, 49],
	            [-18, -30],
	            [-32, -42],
	            [-15, 5],
	            [-17, 14],
	            [9, 73],
	            [-6, 56],
	            [-21, 68],
	            [3, 21],
	            [-16, 7],
	            [-20, 49]
	        ],
	        [
	            [7780, 6264],
	            [-16, -14],
	            [-16, -26],
	            [-20, -2],
	            [-12, -64],
	            [-12, -11],
	            [14, -52],
	            [17, -43],
	            [12, -39],
	            [-11, -51],
	            [-9, -11],
	            [6, -30],
	            [19, -47],
	            [3, -33],
	            [0, -27],
	            [11, -54],
	            [-16, -55],
	            [-13, -61]
	        ],
	        [
	            [5538, 7532],
	            [-6, 4],
	            [-8, 19],
	            [-12, 12]
	        ],
	        [
	            [5533, 7629],
	            [8, -10],
	            [4, -9],
	            [9, -6],
	            [10, -12],
	            [-2, -5]
	        ],
	        [
	            [7437, 7970],
	            [29, 10],
	            [53, 51],
	            [42, 28],
	            [24, -18],
	            [29, -1],
	            [19, -28],
	            [28, -2],
	            [40, -15],
	            [27, 41],
	            [-11, 35],
	            [28, 61],
	            [31, -24],
	            [26, -7],
	            [32, -15],
	            [6, -44],
	            [39, -25],
	            [26, 11],
	            [36, 7],
	            [27, -7],
	            [28, -29],
	            [16, -30],
	            [26, 1],
	            [35, -10],
	            [26, 15],
	            [36, 9],
	            [41, 42],
	            [17, -6],
	            [14, -20],
	            [33, 5]
	        ],
	        [
	            [5959, 4377],
	            [21, 5],
	            [34, -17],
	            [7, 8],
	            [19, 1],
	            [10, 18],
	            [17, -1],
	            [30, 23],
	            [22, 34]
	        ],
	        [
	            [6119, 4448],
	            [5, -26],
	            [-1, -59],
	            [3, -52],
	            [1, -92],
	            [5, -29],
	            [-8, -43],
	            [-11, -41],
	            [-18, -36],
	            [-25, -23],
	            [-31, -28],
	            [-32, -64],
	            [-10, -11],
	            [-20, -42],
	            [-11, -13],
	            [-3, -42],
	            [14, -45],
	            [5, -35],
	            [0, -17],
	            [5, 3],
	            [-1, -58],
	            [-4, -28],
	            [6, -10],
	            [-4, -25],
	            [-11, -21],
	            [-23, -20],
	            [-34, -32],
	            [-12, -21],
	            [3, -25],
	            [7, -4],
	            [-3, -31]
	        ],
	        [
	            [5911, 3478],
	            [-21, 0]
	        ],
	        [
	            [5890, 3478],
	            [-2, 26],
	            [-4, 27]
	        ],
	        [
	            [5884, 3531],
	            [-3, 21],
	            [5, 66],
	            [-7, 42],
	            [-13, 83]
	        ],
	        [
	            [5866, 3743],
	            [29, 67],
	            [7, 43],
	            [5, 5],
	            [3, 35],
	            [-5, 17],
	            [1, 44],
	            [6, 41],
	            [0, 75],
	            [-15, 19],
	            [-13, 4],
	            [-6, 15],
	            [-13, 12],
	            [-23, -1],
	            [-2, 22]
	        ],
	        [
	            [5840, 4141],
	            [-2, 42],
	            [84, 49]
	        ],
	        [
	            [5922, 4232],
	            [16, -28],
	            [8, 5],
	            [11, -15],
	            [1, -23],
	            [-6, -28],
	            [2, -42],
	            [19, -36],
	            [8, 41],
	            [12, 12],
	            [-2, 76],
	            [-12, 43],
	            [-10, 19],
	            [-10, -1],
	            [-7, 77],
	            [7, 45]
	        ],
	        [
	            [4661, 5921],
	            [-18, 41],
	            [-17, 43],
	            [-18, 16],
	            [-13, 17],
	            [-16, -1],
	            [-13, -12],
	            [-14, 5],
	            [-10, -19]
	        ],
	        [
	            [4542, 6011],
	            [-2, 32],
	            [8, 29],
	            [3, 55],
	            [-3, 59],
	            [-3, 29],
	            [2, 30],
	            [-7, 28],
	            [-14, 25]
	        ],
	        [
	            [4526, 6298],
	            [6, 20],
	            [108, -1],
	            [-5, 86],
	            [7, 30],
	            [26, 5],
	            [-1, 152],
	            [91, -4],
	            [0, 90]
	        ],
	        [
	            [5922, 4232],
	            [-15, 15],
	            [9, 55],
	            [9, 21],
	            [-6, 49],
	            [6, 48],
	            [5, 16],
	            [-7, 50],
	            [-14, 26]
	        ],
	        [
	            [5909, 4512],
	            [28, -11],
	            [5, -16],
	            [10, -28],
	            [7, -80]
	        ],
	        [
	            [7836, 5425],
	            [7, -5],
	            [16, -36],
	            [12, -40],
	            [2, -39],
	            [-3, -27],
	            [2, -21],
	            [2, -35],
	            [10, -16],
	            [11, -52],
	            [-1, -20],
	            [-19, -4],
	            [-27, 44],
	            [-32, 47],
	            [-4, 30],
	            [-16, 39],
	            [-4, 49],
	            [-10, 32],
	            [4, 43],
	            [-7, 25]
	        ],
	        [
	            [7779, 5439],
	            [5, 11],
	            [23, -26],
	            [2, -30],
	            [18, 7],
	            [9, 24]
	        ],
	        [
	            [8045, 5176],
	            [21, -20],
	            [21, 11],
	            [6, 50],
	            [12, 11],
	            [33, 13],
	            [20, 47],
	            [14, 37]
	        ],
	        [
	            [8206, 5379],
	            [22, 41],
	            [14, 47],
	            [11, 0],
	            [14, -30],
	            [1, -26],
	            [19, -16],
	            [23, -18],
	            [-2, -23],
	            [-19, -3],
	            [5, -29],
	            [-20, -20]
	        ],
	        [
	            [5453, 3369],
	            [-20, 45],
	            [-11, 43],
	            [-6, 58],
	            [-7, 42],
	            [-9, 91],
	            [-1, 71],
	            [-3, 32],
	            [-11, 25],
	            [-15, 48],
	            [-14, 71],
	            [-6, 37],
	            [-23, 58],
	            [-2, 45]
	        ],
	        [
	            [5644, 4022],
	            [23, 14],
	            [18, -4],
	            [11, -13],
	            [0, -5]
	        ],
	        [
	            [5552, 3594],
	            [0, -218],
	            [-25, -30],
	            [-15, -4],
	            [-17, 11],
	            [-13, 4],
	            [-4, 25],
	            [-11, 17],
	            [-14, -30]
	        ],
	        [
	            [9604, 3812],
	            [23, -36],
	            [14, -28],
	            [-10, -14],
	            [-16, 16],
	            [-19, 27],
	            [-18, 31],
	            [-19, 42],
	            [-4, 20],
	            [12, -1],
	            [16, -20],
	            [12, -20],
	            [9, -17]
	        ],
	        [
	            [5412, 6408],
	            [7, -92],
	            [10, -15],
	            [1, -19],
	            [11, -20],
	            [-6, -25],
	            [-11, -120],
	            [-1, -77],
	            [-35, -56],
	            [-12, -78],
	            [11, -22],
	            [0, -38],
	            [18, -1],
	            [-3, -28]
	        ],
	        [
	            [5393, 5795],
	            [-5, -1],
	            [-19, 64],
	            [-6, 3],
	            [-22, -33],
	            [-21, 17],
	            [-15, 3],
	            [-8, -8],
	            [-17, 2],
	            [-16, -25],
	            [-14, -2],
	            [-34, 31],
	            [-13, -15],
	            [-14, 1],
	            [-10, 23],
	            [-28, 22],
	            [-30, -7],
	            [-7, -13],
	            [-4, -34],
	            [-8, -24],
	            [-2, -53]
	        ],
	        [
	            [5236, 5339],
	            [-29, -21],
	            [-11, 3],
	            [-10, -13],
	            [-23, 1],
	            [-15, 37],
	            [-9, 43],
	            [-19, 39],
	            [-21, -1],
	            [-25, 0]
	        ],
	        [
	            [2619, 5713],
	            [-10, 18],
	            [-13, 24],
	            [-6, 20],
	            [-12, 19],
	            [-13, 26],
	            [3, 9],
	            [4, -9],
	            [2, 5]
	        ],
	        [
	            [2690, 5943],
	            [-2, -5],
	            [-2, -13],
	            [3, -22],
	            [-6, -20],
	            [-3, -24],
	            [-1, -26],
	            [1, -15],
	            [1, -27],
	            [-4, -6],
	            [-3, -25],
	            [2, -15],
	            [-6, -16],
	            [2, -16],
	            [4, -9]
	        ],
	        [
	            [5092, 8091],
	            [14, 16],
	            [24, 87],
	            [38, 25],
	            [23, -2]
	        ],
	        [
	            [5863, 9167],
	            [-47, -24],
	            [-22, -5]
	        ],
	        [
	            [5573, 9140],
	            [-17, -2],
	            [-4, -39],
	            [-53, 9],
	            [-7, -33],
	            [-27, 1],
	            [-18, -42],
	            [-28, -66],
	            [-43, -83],
	            [10, -20],
	            [-10, -24],
	            [-27, 1],
	            [-18, -55],
	            [2, -79],
	            [17, -29],
	            [-9, -70],
	            [-23, -40],
	            [-12, -34]
	        ],
	        [
	            [5306, 8535],
	            [-19, 36],
	            [-55, -69],
	            [-37, -13],
	            [-38, 30],
	            [-10, 63],
	            [-9, 137],
	            [26, 38],
	            [73, 49],
	            [55, 61],
	            [51, 82],
	            [66, 115],
	            [47, 44],
	            [76, 74],
	            [61, 26],
	            [46, -3],
	            [42, 49],
	            [51, -3],
	            [50, 12],
	            [87, -43],
	            [-36, -16],
	            [30, -37]
	        ],
	        [
	            [5686, 9657],
	            [-62, -24],
	            [-49, 13],
	            [19, 16],
	            [-16, 19],
	            [57, 11],
	            [11, -22],
	            [40, -13]
	        ],
	        [
	            [5506, 9766],
	            [92, -44],
	            [-70, -23],
	            [-15, -44],
	            [-25, -11],
	            [-13, -49],
	            [-34, -2],
	            [-59, 36],
	            [25, 21],
	            [-42, 17],
	            [-54, 50],
	            [-21, 46],
	            [75, 21],
	            [16, -20],
	            [39, 0],
	            [11, 21],
	            [40, 2],
	            [35, -21]
	        ],
	        [
	            [5706, 9808],
	            [55, -21],
	            [-41, -32],
	            [-81, -7],
	            [-82, 10],
	            [-5, 16],
	            [-40, 1],
	            [-30, 27],
	            [86, 17],
	            [40, -14],
	            [28, 17],
	            [70, -14]
	        ],
	        [
	            [9805, 2640],
	            [6, -24],
	            [20, 24],
	            [8, -25],
	            [0, -25],
	            [-10, -27],
	            [-18, -44],
	            [-14, -24],
	            [10, -28],
	            [-22, -1],
	            [-23, -22],
	            [-8, -39],
	            [-16, -60],
	            [-21, -26],
	            [-14, -17],
	            [-26, 1],
	            [-18, 20],
	            [-30, 4],
	            [-5, 22],
	            [15, 43],
	            [35, 59],
	            [18, 11],
	            [20, 22],
	            [24, 31],
	            [16, 31],
	            [13, 44],
	            [10, 15],
	            [5, 33],
	            [19, 27],
	            [6, -25]
	        ],
	        [
	            [9849, 2922],
	            [20, -63],
	            [1, 41],
	            [13, -16],
	            [4, -45],
	            [22, -19],
	            [19, -5],
	            [16, 22],
	            [14, -6],
	            [-7, -53],
	            [-8, -34],
	            [-22, 1],
	            [-7, -18],
	            [3, -25],
	            [-4, -11],
	            [-11, -32],
	            [-14, -41],
	            [-21, -23],
	            [-5, 15],
	            [-12, 9],
	            [16, 48],
	            [-9, 33],
	            [-30, 23],
	            [1, 22],
	            [20, 20],
	            [5, 46],
	            [-1, 38],
	            [-12, 40],
	            [1, 10],
	            [-13, 25],
	            [-22, 52],
	            [-12, 42],
	            [11, 4],
	            [15, -33],
	            [21, -15],
	            [8, -52]
	        ],
	        [
	            [6475, 6041],
	            [-9, 41],
	            [-22, 98]
	        ],
	        [
	            [6444, 6180],
	            [83, 59],
	            [19, 118],
	            [-13, 42]
	        ],
	        [
	            [6566, 6530],
	            [12, -40],
	            [16, -22],
	            [20, -8],
	            [17, -10],
	            [12, -34],
	            [8, -20],
	            [10, -7],
	            [0, -13],
	            [-10, -36],
	            [-5, -16],
	            [-12, -19],
	            [-10, -41],
	            [-13, 3],
	            [-5, -14],
	            [-5, -30],
	            [4, -39],
	            [-3, -7],
	            [-13, 0],
	            [-17, -22],
	            [-3, -29],
	            [-6, -12],
	            [-18, 0],
	            [-10, -15],
	            [0, -24],
	            [-14, -16],
	            [-15, 5],
	            [-19, -19],
	            [-12, -4]
	        ],
	        [
	            [6557, 6597],
	            [8, 20],
	            [3, -5],
	            [-2, -25],
	            [-4, -10]
	        ],
	        [
	            [6893, 6457],
	            [-20, 15],
	            [-9, 43],
	            [-21, 45],
	            [-51, -12],
	            [-45, -1],
	            [-39, -8]
	        ],
	        [
	            [2836, 5484],
	            [-9, 17],
	            [-6, 32],
	            [7, 16],
	            [-7, 4],
	            [-5, 20],
	            [-14, 16],
	            [-12, -4],
	            [-6, -20],
	            [-11, -15],
	            [-6, -2],
	            [-3, -13],
	            [13, -32],
	            [-7, -7],
	            [-4, -9],
	            [-13, -3],
	            [-5, 35],
	            [-4, -10],
	            [-9, 4],
	            [-5, 24],
	            [-12, 3],
	            [-7, 7],
	            [-12, 0],
	            [-1, -13],
	            [-3, 9]
	        ],
	        [
	            [2707, 5623],
	            [10, -22],
	            [-1, -12],
	            [11, -3],
	            [3, 5],
	            [8, -14],
	            [13, 4],
	            [12, 15],
	            [17, 12],
	            [9, 17],
	            [16, -3],
	            [-1, -6],
	            [15, -2],
	            [12, -10],
	            [10, -18],
	            [10, -16]
	        ],
	        [
	            [3045, 3974],
	            [-28, 33],
	            [-2, 25],
	            [-55, 59],
	            [-50, 65],
	            [-22, 36],
	            [-11, 49],
	            [4, 17],
	            [-23, 77],
	            [-28, 109],
	            [-26, 118],
	            [-11, 27],
	            [-9, 43],
	            [-21, 39],
	            [-20, 24],
	            [9, 26],
	            [-14, 57],
	            [9, 41],
	            [22, 37]
	        ],
	        [
	            [8510, 5555],
	            [2, -40],
	            [2, -33],
	            [-9, -54],
	            [-11, 60],
	            [-13, -30],
	            [9, -43],
	            [-8, -28],
	            [-32, 35],
	            [-8, 42],
	            [8, 28],
	            [-17, 28],
	            [-9, -24],
	            [-13, 2],
	            [-21, -33],
	            [-4, 17],
	            [11, 50],
	            [17, 17],
	            [15, 22],
	            [10, -27],
	            [21, 17],
	            [5, 26],
	            [19, 1],
	            [-1, 46],
	            [22, -28],
	            [3, -30],
	            [2, -21]
	        ],
	        [
	            [8443, 5665],
	            [-10, -20],
	            [-9, -37],
	            [-8, -17],
	            [-17, 40],
	            [5, 16],
	            [7, 17],
	            [3, 36],
	            [16, 4],
	            [-5, -40],
	            [21, 57],
	            [-3, -56]
	        ],
	        [
	            [8291, 5608],
	            [-37, -56],
	            [14, 41],
	            [20, 37],
	            [16, 41],
	            [15, 58],
	            [5, -48],
	            [-18, -33],
	            [-15, -40]
	        ],
	        [
	            [8385, 5760],
	            [16, -18],
	            [18, 0],
	            [0, -25],
	            [-13, -25],
	            [-18, -18],
	            [-1, 28],
	            [2, 30],
	            [-4, 28]
	        ],
	        [
	            [8485, 5776],
	            [8, -66],
	            [-21, 16],
	            [0, -20],
	            [7, -37],
	            [-13, -13],
	            [-1, 42],
	            [-9, 3],
	            [-4, 36],
	            [16, -5],
	            [0, 22],
	            [-17, 45],
	            [27, -1],
	            [7, -22]
	        ],
	        [
	            [8375, 5830],
	            [-7, -51],
	            [-12, 29],
	            [-15, 45],
	            [24, -2],
	            [10, -21]
	        ],
	        [
	            [8369, 6151],
	            [17, -17],
	            [9, 15],
	            [2, -15],
	            [-4, -24],
	            [9, -43],
	            [-7, -49],
	            [-16, -19],
	            [-5, -48],
	            [7, -47],
	            [14, -7],
	            [13, 7],
	            [34, -32],
	            [-2, -32],
	            [9, -15],
	            [-3, -27],
	            [-22, 29],
	            [-10, 31],
	            [-7, -22],
	            [-18, 36],
	            [-25, -9],
	            [-14, 13],
	            [1, 25],
	            [9, 15],
	            [-8, 13],
	            [-4, -21],
	            [-14, 34],
	            [-4, 26],
	            [-1, 56],
	            [11, -19],
	            [3, 92],
	            [9, 54],
	            [17, 0]
	        ],
	        [
	            [9329, 4655],
	            [-8, -6],
	            [-12, 22],
	            [-12, 38],
	            [-6, 45],
	            [4, 6],
	            [3, -18],
	            [8, -13],
	            [14, -38],
	            [13, -20],
	            [-4, -16]
	        ],
	        [
	            [9221, 4734],
	            [-15, -5],
	            [-4, -17],
	            [-15, -14],
	            [-15, -14],
	            [-14, 0],
	            [-23, 18],
	            [-16, 16],
	            [2, 18],
	            [25, -8],
	            [15, 4],
	            [5, 29],
	            [4, 1],
	            [2, -31],
	            [16, 4],
	            [8, 20],
	            [16, 21],
	            [-4, 35],
	            [17, 1],
	            [6, -9],
	            [-1, -33],
	            [-9, -36]
	        ],
	        [
	            [8916, 4904],
	            [48, -41],
	            [51, -34],
	            [19, -30],
	            [16, -30],
	            [4, -34],
	            [46, -37],
	            [7, -31],
	            [-25, -7],
	            [6, -39],
	            [25, -39],
	            [18, -62],
	            [15, 2],
	            [-1, -27],
	            [22, -10],
	            [-9, -11],
	            [30, -25],
	            [-3, -17],
	            [-18, -4],
	            [-7, 16],
	            [-24, 6],
	            [-28, 9],
	            [-22, 38],
	            [-16, 32],
	            [-14, 52],
	            [-36, 26],
	            [-24, -17],
	            [-17, -20],
	            [4, -43],
	            [-22, -20],
	            [-16, 9],
	            [-28, 3]
	        ],
	        [
	            [9253, 4792],
	            [-9, -16],
	            [-5, 35],
	            [-6, 23],
	            [-13, 19],
	            [-16, 25],
	            [-20, 18],
	            [8, 14],
	            [15, -17],
	            [9, -13],
	            [12, -14],
	            [11, -25],
	            [11, -19],
	            [3, -30]
	        ],
	        [
	            [5392, 8233],
	            [19, 18],
	            [43, 27],
	            [35, 20],
	            [28, -10],
	            [2, -14],
	            [27, -1]
	        ],
	        [
	            [5546, 8273],
	            [34, -7],
	            [51, 1]
	        ],
	        [
	            [5653, 8105],
	            [14, -52],
	            [-3, -17],
	            [-14, -6],
	            [-25, -50],
	            [7, -26],
	            [-6, 3]
	        ],
	        [
	            [5626, 7957],
	            [-26, 23],
	            [-20, -8],
	            [-13, 6],
	            [-17, -13],
	            [-14, 21],
	            [-11, -8],
	            [-2, 4]
	        ],
	        [
	            [3159, 6151],
	            [14, -5],
	            [5, -12],
	            [-7, -15],
	            [-21, 1],
	            [-17, -2],
	            [-1, 25],
	            [4, 9],
	            [23, -1]
	        ],
	        [
	            [8628, 7562],
	            [4, -10]
	        ],
	        [
	            [8632, 7552],
	            [-11, 3],
	            [-12, -20],
	            [-8, -20],
	            [1, -42],
	            [-14, -13],
	            [-5, -11],
	            [-11, -17],
	            [-18, -10],
	            [-12, -16],
	            [-1, -25],
	            [-3, -7],
	            [11, -9],
	            [15, -26]
	        ],
	        [
	            [8504, 7288],
	            [-13, 11],
	            [-4, -11],
	            [-8, -5],
	            [-1, 11],
	            [-7, 5],
	            [-8, 10],
	            [8, 26],
	            [7, 7],
	            [-3, 11],
	            [7, 31],
	            [-2, 10],
	            [-16, 7],
	            [-13, 15]
	        ],
	        [
	            [4792, 7249],
	            [-11, -15],
	            [-14, 8],
	            [-15, -6],
	            [5, 46],
	            [-3, 36],
	            [-12, 6],
	            [-7, 22],
	            [2, 39],
	            [11, 21],
	            [2, 24],
	            [6, 36],
	            [-1, 25],
	            [-5, 21],
	            [-1, 20]
	        ],
	        [
	            [6411, 6520],
	            [-2, 43],
	            [7, 31],
	            [8, 6],
	            [8, -18],
	            [1, -35],
	            [-6, -35]
	        ],
	        [
	            [6427, 6512],
	            [-8, -4],
	            [-8, 12]
	        ],
	        [
	            [5630, 7886],
	            [12, 13],
	            [17, -7],
	            [18, 0],
	            [13, -14],
	            [10, 9],
	            [20, 5],
	            [7, 14],
	            [12, 0]
	        ],
	        [
	            [5784, 7745],
	            [12, -11],
	            [13, 9],
	            [13, -10]
	        ],
	        [
	            [5822, 7733],
	            [0, -15],
	            [-13, -13],
	            [-9, 6],
	            [-7, -71]
	        ],
	        [
	            [5629, 7671],
	            [-5, 10],
	            [6, 10],
	            [-7, 7],
	            [-8, -13],
	            [-17, 17],
	            [-2, 25],
	            [-17, 14],
	            [-3, 18],
	            [-15, 24]
	        ],
	        [
	            [8989, 8056],
	            [28, -105],
	            [-41, 19],
	            [-17, -85],
	            [27, -61],
	            [-1, -41],
	            [-21, 36],
	            [-18, -46],
	            [-5, 50],
	            [3, 57],
	            [-3, 64],
	            [6, 45],
	            [2, 79],
	            [-17, 58],
	            [3, 80],
	            [25, 28],
	            [-11, 27],
	            [13, 8],
	            [7, -39],
	            [10, -57],
	            [-1, -58],
	            [11, -59]
	        ],
	        [
	            [5546, 8273],
	            [6, 26],
	            [38, 19]
	        ],
	        [
	            [0, 9132],
	            [68, -45],
	            [73, -59],
	            [-3, -37],
	            [19, -15],
	            [-6, 43],
	            [75, -8],
	            [55, -56],
	            [-28, -26],
	            [-46, -6],
	            [0, -57],
	            [-11, -13],
	            [-26, 2],
	            [-22, 21],
	            [-36, 17],
	            [-7, 26],
	            [-28, 9],
	            [-31, -7],
	            [-16, 20],
	            [6, 22],
	            [-33, -14],
	            [13, -28],
	            [-16, -25]
	        ],
	        [
	            [0, 8896],
	            [0, 236]
	        ],
	        [
	            [0, 9282],
	            [9999, -40],
	            [-30, -3],
	            [-5, 19],
	            [-9964, 24]
	        ],
	        [
	            [0, 9282],
	            [4, 3],
	            [23, 0],
	            [40, -17],
	            [-2, -8],
	            [-29, -14],
	            [-36, -4],
	            [0, 40]
	        ],
	        [
	            [8988, 9383],
	            [-42, -1],
	            [-57, 7],
	            [-5, 3],
	            [27, 23],
	            [34, 6],
	            [40, -23],
	            [3, -15]
	        ],
	        [
	            [9186, 9493],
	            [-32, -23],
	            [-44, 5],
	            [-52, 23],
	            [7, 20],
	            [51, -9],
	            [70, -16]
	        ],
	        [
	            [9029, 9522],
	            [-22, -44],
	            [-102, 1],
	            [-46, -14],
	            [-55, 39],
	            [15, 40],
	            [37, 11],
	            [73, -2],
	            [100, -31]
	        ],
	        [
	            [6598, 9235],
	            [-17, -5],
	            [-91, 8],
	            [-7, 26],
	            [-50, 16],
	            [-4, 32],
	            [28, 13],
	            [-1, 32],
	            [55, 50],
	            [-25, 7],
	            [66, 52],
	            [-7, 27],
	            [62, 31],
	            [91, 38],
	            [93, 11],
	            [48, 22],
	            [54, 8],
	            [19, -23],
	            [-19, -19],
	            [-98, -29],
	            [-85, -28],
	            [-86, -57],
	            [-42, -57],
	            [-43, -57],
	            [5, -49],
	            [54, -49]
	        ],
	        [
	            [0, 8896],
	            [9963, -26],
	            [-36, 4],
	            [25, -31],
	            [17, -49],
	            [13, -16],
	            [3, -24],
	            [-7, -16],
	            [-52, 13],
	            [-78, -44],
	            [-25, -7],
	            [-42, -42],
	            [-40, -36],
	            [-11, -27],
	            [-39, 41],
	            [-73, -46],
	            [-12, 22],
	            [-27, -26],
	            [-37, 8],
	            [-9, -38],
	            [-33, -58],
	            [1, -24],
	            [31, -13],
	            [-4, -86],
	            [-25, -2],
	            [-12, -49],
	            [11, -26],
	            [-48, -30],
	            [-10, -67],
	            [-41, -15],
	            [-9, -60],
	            [-40, -55],
	            [-10, 41],
	            [-12, 86],
	            [-15, 131],
	            [13, 82],
	            [23, 35],
	            [2, 28],
	            [43, 13],
	            [50, 75],
	            [47, 60],
	            [50, 48],
	            [23, 83],
	            [-34, -5],
	            [-17, -49],
	            [-70, -65],
	            [-23, 73],
	            [-72, -20],
	            [-69, -99],
	            [23, -36],
	            [-62, -16],
	            [-43, -6],
	            [2, 43],
	            [-43, 9],
	            [-35, -29],
	            [-85, 10],
	            [-91, -18],
	            [-90, -115],
	            [-106, -139],
	            [43, -8],
	            [14, -37],
	            [27, -13],
	            [18, 30],
	            [30, -4],
	            [40, -65],
	            [1, -50],
	            [-21, -59],
	            [-3, -71],
	            [-12, -94],
	            [-42, -86],
	            [-9, -41],
	            [-38, -69],
	            [-38, -68],
	            [-18, -35],
	            [-37, -34],
	            [-17, -1],
	            [-17, 29],
	            [-38, -44],
	            [-4, -19]
	        ],
	        [
	            [6363, 7799],
	            [-12, -35],
	            [-27, -10],
	            [-28, -61],
	            [25, -56],
	            [-2, -40],
	            [30, -70]
	        ],
	        [
	            [6109, 7624],
	            [-35, 49],
	            [-32, 23],
	            [-24, 34],
	            [20, 10],
	            [23, 49],
	            [-15, 24],
	            [41, 24],
	            [-1, 13],
	            [-25, -10]
	        ],
	        [
	            [6061, 7840],
	            [1, 26],
	            [14, 17],
	            [27, 4],
	            [5, 20],
	            [-7, 33],
	            [12, 30],
	            [-1, 18],
	            [-41, 19],
	            [-16, -1],
	            [-17, 28],
	            [-21, -9],
	            [-35, 20],
	            [0, 12],
	            [-10, 26],
	            [-22, 3],
	            [-2, 18],
	            [7, 12],
	            [-18, 33],
	            [-29, -5],
	            [-8, 3],
	            [-7, -14],
	            [-11, 3]
	        ],
	        [
	            [5777, 8571],
	            [31, 33],
	            [-29, 28]
	        ],
	        [
	            [5863, 9167],
	            [29, 20],
	            [46, -35],
	            [76, -14],
	            [105, -67],
	            [21, -28],
	            [2, -40],
	            [-31, -31],
	            [-45, -15],
	            [-124, 44],
	            [-21, -7],
	            [45, -43],
	            [2, -28],
	            [2, -60],
	            [36, -18],
	            [22, -15],
	            [3, 28],
	            [-17, 26],
	            [18, 22],
	            [67, -37],
	            [24, 15],
	            [-19, 43],
	            [65, 58],
	            [25, -4],
	            [26, -20],
	            [16, 40],
	            [-23, 35],
	            [14, 36],
	            [-21, 36],
	            [78, -18],
	            [16, -34],
	            [-35, -7],
	            [0, -33],
	            [22, -20],
	            [43, 13],
	            [7, 38],
	            [58, 28],
	            [97, 50],
	            [20, -3],
	            [-27, -35],
	            [35, -7],
	            [19, 21],
	            [52, 1],
	            [42, 25],
	            [31, -36],
	            [32, 39],
	            [-29, 35],
	            [14, 19],
	            [82, -18],
	            [39, -18],
	            [100, -68],
	            [19, 31],
	            [-28, 31],
	            [-1, 13],
	            [-34, 6],
	            [10, 28],
	            [-15, 46],
	            [-1, 19],
	            [51, 53],
	            [18, 54],
	            [21, 11],
	            [74, -15],
	            [5, -33],
	            [-26, -48],
	            [17, -19],
	            [9, -41],
	            [-6, -81],
	            [31, -36],
	            [-12, -40],
	            [-55, -84],
	            [32, -8],
	            [11, 21],
	            [31, 15],
	            [7, 29],
	            [24, 29],
	            [-16, 33],
	            [13, 39],
	            [-31, 5],
	            [-6, 33],
	            [22, 59],
	            [-36, 48],
	            [50, 40],
	            [-7, 42],
	            [14, 2],
	            [15, -33],
	            [-11, -57],
	            [29, -11],
	            [-12, 43],
	            [46, 23],
	            [58, 3],
	            [51, -34],
	            [-25, 49],
	            [-2, 63],
	            [48, 12],
	            [67, -2],
	            [60, 7],
	            [-23, 31],
	            [33, 39],
	            [31, 2],
	            [54, 29],
	            [74, 8],
	            [9, 16],
	            [73, 6],
	            [23, -14],
	            [62, 32],
	            [51, -1],
	            [8, 25],
	            [26, 25],
	            [66, 25],
	            [48, -19],
	            [-38, -15],
	            [63, -9],
	            [7, -29],
	            [25, 14],
	            [82, -1],
	            [62, -29],
	            [23, -22],
	            [-7, -30],
	            [-31, -18],
	            [-73, -33],
	            [-21, -17],
	            [35, -8],
	            [41, -15],
	            [25, 11],
	            [14, -38],
	            [12, 15],
	            [44, 10],
	            [90, -10],
	            [6, -28],
	            [116, -9],
	            [2, 46],
	            [59, -11],
	            [44, 1],
	            [45, -32],
	            [13, -37],
	            [-17, -25],
	            [35, -47],
	            [44, -24],
	            [27, 62],
	            [44, -26],
	            [48, 16],
	            [53, -18],
	            [21, 16],
	            [45, -8],
	            [-20, 55],
	            [37, 25],
	            [251, -38],
	            [24, -35],
	            [72, -45],
	            [112, 11],
	            [56, -10],
	            [23, -24],
	            [-4, -44],
	            [35, -16],
	            [37, 12],
	            [49, 1],
	            [52, -11],
	            [53, 6],
	            [49, -52],
	            [34, 19],
	            [-23, 37],
	            [13, 27],
	            [88, -17],
	            [58, 4],
	            [80, -29],
	            [-9960, -25]
	        ],
	        [
	            [7918, 9684],
	            [-157, -23],
	            [51, 77],
	            [23, 7],
	            [21, -4],
	            [70, -33],
	            [-8, -24]
	        ],
	        [
	            [6420, 9816],
	            [-37, -8],
	            [-25, -4],
	            [-4, -10],
	            [-33, -10],
	            [-30, 14],
	            [16, 19],
	            [-62, 2],
	            [54, 10],
	            [43, 1],
	            [5, -16],
	            [16, 14],
	            [26, 10],
	            [42, -13],
	            [-11, -9]
	        ],
	        [
	            [7775, 9718],
	            [-60, -8],
	            [-78, 17],
	            [-46, 23],
	            [-21, 42],
	            [-38, 12],
	            [72, 40],
	            [60, 14],
	            [54, -30],
	            [64, -57],
	            [-7, -53]
	        ],
	        [
	            [5844, 4990],
	            [11, -33],
	            [-1, -35],
	            [-8, -7]
	        ],
	        [
	            [5821, 4978],
	            [7, -6],
	            [16, 18]
	        ],
	        [
	            [4526, 6298],
	            [1, 25]
	        ],
	        [
	            [6188, 6023],
	            [-4, 26],
	            [-8, 17],
	            [-2, 24],
	            [-15, 21],
	            [-15, 50],
	            [-7, 48],
	            [-20, 40],
	            [-12, 10],
	            [-18, 56],
	            [-4, 41],
	            [2, 35],
	            [-16, 66],
	            [-13, 23],
	            [-15, 12],
	            [-10, 34],
	            [2, 13],
	            [-8, 31],
	            [-8, 13],
	            [-11, 44],
	            [-17, 48],
	            [-14, 40],
	            [-14, 0],
	            [5, 33],
	            [1, 20],
	            [3, 24]
	        ],
	        [
	            [6344, 6744],
	            [11, -51],
	            [14, -13],
	            [5, -21],
	            [18, -25],
	            [2, -24],
	            [-3, -20],
	            [4, -20],
	            [8, -16],
	            [4, -20],
	            [4, -14]
	        ],
	        [
	            [6427, 6512],
	            [5, -22]
	        ],
	        [
	            [6444, 6180],
	            [-80, -23],
	            [-26, -26],
	            [-20, -62],
	            [-13, -10],
	            [-7, 20],
	            [-11, -3],
	            [-27, 6],
	            [-5, 5],
	            [-32, -1],
	            [-7, -5],
	            [-12, 15],
	            [-7, -29],
	            [3, -25],
	            [-12, -19]
	        ],
	        [
	            [5943, 5617],
	            [-4, 1],
	            [0, 29],
	            [-3, 20],
	            [-14, 24],
	            [-4, 42],
	            [4, 44],
	            [-13, 4],
	            [-2, -13],
	            [-17, -3],
	            [7, -17],
	            [2, -36],
	            [-15, -32],
	            [-14, -43],
	            [-14, -6],
	            [-23, 34],
	            [-11, -12],
	            [-3, -17],
	            [-14, -11],
	            [-1, -12],
	            [-28, 0],
	            [-3, 12],
	            [-20, 2],
	            [-10, -10],
	            [-8, 5],
	            [-14, 34],
	            [-5, 17],
	            [-20, -9],
	            [-8, -27],
	            [-7, -53],
	            [-10, -11],
	            [-8, -6]
	        ],
	        [
	            [5663, 5567],
	            [-2, 2]
	        ],
	        [
	            [5635, 5716],
	            [0, 14],
	            [-10, 17],
	            [-1, 35],
	            [-5, 23],
	            [-10, -4],
	            [3, 22],
	            [7, 25],
	            [-3, 24],
	            [9, 18],
	            [-6, 14],
	            [7, 36],
	            [13, 44],
	            [24, -4],
	            [-1, 234]
	        ],
	        [
	            [6023, 6357],
	            [9, -58],
	            [-6, -10],
	            [4, -61],
	            [11, -71],
	            [10, -14],
	            [15, -22]
	        ],
	        [
	            [5943, 5624],
	            [0, -7]
	        ],
	        [
	            [5943, 5617],
	            [0, -46]
	        ],
	        [
	            [5944, 5309],
	            [-17, -28],
	            [-20, 1],
	            [-22, -14],
	            [-18, 13],
	            [-11, -16]
	        ],
	        [
	            [5682, 5544],
	            [-19, 23]
	        ],
	        [
	            [4535, 5861],
	            [-11, 46],
	            [-14, 21],
	            [12, 11],
	            [14, 41],
	            [6, 31]
	        ],
	        [
	            [4536, 5789],
	            [-4, 45]
	        ],
	        [
	            [9502, 4438],
	            [8, -20],
	            [-19, 0],
	            [-11, 37],
	            [17, -15],
	            [5, -2]
	        ],
	        [
	            [9467, 4474],
	            [-11, -1],
	            [-17, 6],
	            [-5, 9],
	            [1, 23],
	            [19, -9],
	            [9, -12],
	            [4, -16]
	        ],
	        [
	            [9490, 4490],
	            [-4, -11],
	            [-21, 52],
	            [-5, 35],
	            [9, 0],
	            [10, -47],
	            [11, -29]
	        ],
	        [
	            [9440, 4565],
	            [1, -12],
	            [-22, 25],
	            [-15, 21],
	            [-10, 20],
	            [4, 6],
	            [13, -14],
	            [23, -27],
	            [6, -19]
	        ],
	        [
	            [9375, 4623],
	            [-5, -3],
	            [-13, 14],
	            [-11, 24],
	            [1, 10],
	            [17, -25],
	            [11, -20]
	        ],
	        [
	            [4682, 5458],
	            [-8, 5],
	            [-20, 24],
	            [-14, 31],
	            [-5, 22],
	            [-3, 43]
	        ],
	        [
	            [2561, 5848],
	            [-3, -14],
	            [-16, 1],
	            [-10, 6],
	            [-12, 12],
	            [-15, 3],
	            [-8, 13]
	        ],
	        [
	            [6198, 5735],
	            [9, -11],
	            [5, -25],
	            [13, -24],
	            [14, -1],
	            [26, 16],
	            [30, 7],
	            [25, 18],
	            [13, 4],
	            [10, 11],
	            [16, 2]
	        ],
	        [
	            [6359, 5732],
	            [0, -1],
	            [0, -25],
	            [0, -59],
	            [0, -31],
	            [-13, -36],
	            [-19, -50]
	        ],
	        [
	            [6359, 5732],
	            [9, 1],
	            [13, 9],
	            [14, 6],
	            [14, 20],
	            [10, 0],
	            [1, -16],
	            [-3, -35],
	            [0, -31],
	            [-6, -21],
	            [-7, -64],
	            [-14, -66],
	            [-17, -75],
	            [-24, -87],
	            [-23, -66],
	            [-33, -81],
	            [-28, -48],
	            [-42, -58],
	            [-25, -45],
	            [-31, -72],
	            [-6, -31],
	            [-6, -14]
	        ],
	        [
	            [3412, 5410],
	            [34, -11],
	            [2, 10],
	            [23, 4],
	            [30, -15]
	        ],
	        [
	            [3489, 5306],
	            [10, -35],
	            [-4, -25]
	        ],
	        [
	            [5626, 7957],
	            [-8, -15],
	            [-5, -24]
	        ],
	        [
	            [5380, 7746],
	            [7, 5]
	        ],
	        [
	            [5663, 8957],
	            [-47, -17],
	            [-27, -41],
	            [4, -36],
	            [-44, -48],
	            [-54, -50],
	            [-20, -84],
	            [20, -41],
	            [26, -33],
	            [-25, -67],
	            [-29, -14],
	            [-11, -99],
	            [-15, -55],
	            [-34, 6],
	            [-16, -47],
	            [-32, -3],
	            [-9, 56],
	            [-23, 67],
	            [-21, 84]
	        ],
	        [
	            [5890, 3478],
	            [-5, -26],
	            [-17, -6],
	            [-16, 32],
	            [0, 20],
	            [7, 22],
	            [3, 17],
	            [8, 5],
	            [14, -11]
	        ],
	        [
	            [5999, 7104],
	            [-2, 45],
	            [7, 25]
	        ],
	        [
	            [6004, 7174],
	            [7, 13],
	            [7, 13],
	            [2, 33],
	            [9, -12],
	            [31, 17],
	            [14, -12],
	            [23, 1],
	            [32, 22],
	            [15, -1],
	            [32, 9]
	        ],
	        [
	            [5051, 5420],
	            [-22, -12]
	        ],
	        [
	            [7849, 5777],
	            [-25, 28],
	            [-24, -2],
	            [4, 47],
	            [-24, 0],
	            [-2, -65],
	            [-15, -87],
	            [-10, -52],
	            [2, -43],
	            [18, -2],
	            [12, -53],
	            [5, -52],
	            [15, -33],
	            [17, -7],
	            [14, -31]
	        ],
	        [
	            [7779, 5439],
	            [-11, 23],
	            [-4, 29],
	            [-15, 34],
	            [-14, 28],
	            [-4, -35],
	            [-5, 33],
	            [3, 37],
	            [8, 56]
	        ],
	        [
	            [6883, 7252],
	            [16, 60],
	            [-6, 44],
	            [-20, 14],
	            [7, 26],
	            [23, -3],
	            [13, 33],
	            [9, 38],
	            [37, 13],
	            [-6, -27],
	            [4, -17],
	            [12, 2]
	        ],
	        [
	            [6497, 7255],
	            [-5, 42],
	            [4, 62],
	            [-22, 20],
	            [8, 40],
	            [-19, 4],
	            [6, 49],
	            [26, -14],
	            [25, 19],
	            [-20, 35],
	            [-8, 34],
	            [-23, -15],
	            [-3, -43],
	            [-8, 38]
	        ],
	        [
	            [6554, 7498],
	            [31, 1],
	            [-4, 29],
	            [24, 21],
	            [23, 34],
	            [37, -31],
	            [3, -47],
	            [11, -12],
	            [30, 2],
	            [9, -10],
	            [14, -61],
	            [32, -41],
	            [18, -28],
	            [29, -29],
	            [37, -25],
	            [-1, -36]
	        ],
	        [
	            [8471, 4532],
	            [3, 14],
	            [24, 13],
	            [19, 2],
	            [9, 8],
	            [10, -8],
	            [-10, -16],
	            [-29, -25],
	            [-23, -17]
	        ],
	        [
	            [3286, 5693],
	            [16, 8],
	            [6, -2],
	            [-1, -44],
	            [-23, -7],
	            [-5, 6],
	            [8, 16],
	            [-1, 23]
	        ],
	        [
	            [5233, 7240],
	            [31, 24],
	            [19, -7],
	            [-1, -30],
	            [24, 22],
	            [2, -12],
	            [-14, -29],
	            [0, -27],
	            [9, -15],
	            [-3, -51],
	            [-19, -29],
	            [6, -33],
	            [14, -1],
	            [7, -28],
	            [11, -9]
	        ],
	        [
	            [6004, 7174],
	            [-11, 27],
	            [11, 22],
	            [-17, -5],
	            [-23, 13],
	            [-19, -34],
	            [-43, -6],
	            [-22, 31],
	            [-30, 2],
	            [-6, -24],
	            [-20, -7],
	            [-26, 31],
	            [-31, -1],
	            [-16, 59],
	            [-21, 33],
	            [14, 46],
	            [-18, 28],
	            [31, 56],
	            [43, 3],
	            [12, 45],
	            [53, -8],
	            [33, 38],
	            [32, 17],
	            [46, 1],
	            [49, -42],
	            [40, -22],
	            [32, 9],
	            [24, -6],
	            [33, 31]
	        ],
	        [
	            [5777, 7539],
	            [3, -23],
	            [25, -19],
	            [-5, -14],
	            [-33, -3],
	            [-12, -19],
	            [-23, -31],
	            [-9, 27],
	            [0, 12]
	        ],
	        [
	            [8382, 6499],
	            [-17, -95],
	            [-12, -49],
	            [-14, 50],
	            [-4, 44],
	            [17, 58],
	            [22, 45],
	            [13, -18],
	            [-5, -35]
	        ],
	        [
	            [6088, 4781],
	            [-12, -73],
	            [1, -33],
	            [18, -22],
	            [1, -15],
	            [-8, -36],
	            [2, -18],
	            [-2, -28],
	            [10, -37],
	            [11, -58],
	            [10, -13]
	        ],
	        [
	            [5909, 4512],
	            [-15, 18],
	            [-18, 10],
	            [-11, 10],
	            [-12, 15]
	        ],
	        [
	            [5844, 4990],
	            [10, 8],
	            [31, -1],
	            [56, 4]
	        ],
	        [
	            [6061, 7840],
	            [-22, -5],
	            [-18, -19],
	            [-26, -3],
	            [-24, -22],
	            [1, -37],
	            [14, -14],
	            [28, 4],
	            [-5, -21],
	            [-31, -11],
	            [-37, -34],
	            [-16, 12],
	            [6, 28],
	            [-30, 17],
	            [5, 12],
	            [26, 19],
	            [-8, 14],
	            [-43, 15],
	            [-2, 22],
	            [-25, -8],
	            [-11, -32],
	            [-21, -44]
	        ],
	        [
	            [3517, 3063],
	            [-12, -38],
	            [-31, -32],
	            [-21, 11],
	            [-15, -6],
	            [-26, 25],
	            [-18, -1],
	            [-17, 32]
	        ],
	        [
	            [679, 6185],
	            [-4, -10],
	            [-7, 8],
	            [1, 17],
	            [-4, 21],
	            [1, 7],
	            [5, 10],
	            [-2, 11],
	            [1, 6],
	            [3, -1],
	            [10, -10],
	            [5, -5],
	            [5, -8],
	            [7, -21],
	            [-1, -3],
	            [-11, -13],
	            [-9, -9]
	        ],
	        [
	            [664, 6277],
	            [-9, -4],
	            [-5, 12],
	            [-3, 5],
	            [0, 4],
	            [3, 5],
	            [9, -6],
	            [8, -9],
	            [-3, -7]
	        ],
	        [
	            [646, 6309],
	            [-1, -7],
	            [-15, 2],
	            [2, 7],
	            [14, -2]
	        ],
	        [
	            [621, 6317],
	            [-2, -3],
	            [-2, 1],
	            [-9, 2],
	            [-4, 13],
	            [-1, 2],
	            [7, 8],
	            [3, -3],
	            [8, -20]
	        ],
	        [
	            [574, 6356],
	            [-4, -6],
	            [-9, 11],
	            [1, 4],
	            [5, 6],
	            [6, -1],
	            [1, -14]
	        ],
	        [
	            [3135, 7724],
	            [5, -19],
	            [-30, -29],
	            [-29, -20],
	            [-29, -18],
	            [-15, -35],
	            [-4, -13],
	            [-1, -31],
	            [10, -32],
	            [11, -1],
	            [-3, 21],
	            [8, -13],
	            [-2, -17],
	            [-19, -9],
	            [-13, 1],
	            [-20, -10],
	            [-12, -3],
	            [-17, -3],
	            [-23, -17],
	            [41, 11],
	            [8, -11],
	            [-39, -18],
	            [-17, 0],
	            [0, 7],
	            [-8, -16],
	            [8, -3],
	            [-6, -43],
	            [-20, -45],
	            [-2, 15],
	            [-6, 3],
	            [-9, 15],
	            [5, -32],
	            [7, -10],
	            [1, -23],
	            [-9, -23],
	            [-16, -47],
	            [-2, 3],
	            [8, 40],
	            [-14, 22],
	            [-3, 49],
	            [-5, -25],
	            [5, -38],
	            [-18, 10],
	            [19, -19],
	            [1, -57],
	            [8, -4],
	            [3, -20],
	            [4, -59],
	            [-17, -44],
	            [-29, -18],
	            [-18, -34],
	            [-14, -4],
	            [-14, -22],
	            [-4, -20],
	            [-31, -38],
	            [-16, -28],
	            [-13, -35],
	            [-4, -42],
	            [5, -41],
	            [9, -51],
	            [13, -41],
	            [0, -26],
	            [13, -69],
	            [-1, -39],
	            [-1, -23],
	            [-7, -36],
	            [-8, -8],
	            [-14, 7],
	            [-4, 26],
	            [-11, 14],
	            [-15, 51],
	            [-13, 45],
	            [-4, 23],
	            [6, 39],
	            [-8, 33],
	            [-22, 49],
	            [-10, 9],
	            [-28, -27],
	            [-5, 3],
	            [-14, 28],
	            [-17, 14],
	            [-32, -7],
	            [-24, 7],
	            [-21, -5],
	            [-12, -9],
	            [5, -15],
	            [0, -24],
	            [5, -12],
	            [-5, -8],
	            [-10, 9],
	            [-11, -11],
	            [-20, 2],
	            [-20, 31],
	            [-25, -8],
	            [-20, 14],
	            [-17, -4],
	            [-24, -14],
	            [-25, -44],
	            [-27, -25],
	            [-16, -28],
	            [-6, -27],
	            [0, -41],
	            [1, -28],
	            [5, -20]
	        ],
	        [
	            [1746, 6980],
	            [-4, 30],
	            [-18, 34],
	            [-13, 7],
	            [-3, 17],
	            [-16, 3],
	            [-10, 16],
	            [-26, 6],
	            [-7, 9],
	            [-3, 32],
	            [-27, 60],
	            [-23, 82],
	            [1, 14],
	            [-13, 19],
	            [-21, 50],
	            [-4, 48],
	            [-15, 32],
	            [6, 49],
	            [-1, 51],
	            [-8, 45],
	            [10, 56],
	            [4, 53],
	            [3, 54],
	            [-5, 79],
	            [-9, 51],
	            [-8, 27],
	            [4, 12],
	            [40, -20],
	            [15, -56],
	            [7, 15],
	            [-5, 49],
	            [-9, 48]
	        ],
	        [
	            [750, 8432],
	            [-28, -23],
	            [-14, 15],
	            [-4, 28],
	            [25, 21],
	            [15, 9],
	            [18, -4],
	            [12, -18],
	            [-24, -28]
	        ],
	        [
	            [401, 8597],
	            [-18, -9],
	            [-18, 11],
	            [-17, 16],
	            [28, 10],
	            [22, -6],
	            [3, -22]
	        ],
	        [
	            [230, 8826],
	            [17, -12],
	            [17, 6],
	            [23, -15],
	            [27, -8],
	            [-2, -7],
	            [-21, -12],
	            [-21, 13],
	            [-11, 11],
	            [-24, -4],
	            [-7, 5],
	            [2, 23]
	        ],
	        [
	            [1374, 8295],
	            [-15, 22],
	            [-25, 19],
	            [-8, 52],
	            [-36, 47],
	            [-15, 56],
	            [-26, 4],
	            [-44, 2],
	            [-33, 17],
	            [-57, 61],
	            [-27, 11],
	            [-49, 21],
	            [-38, -5],
	            [-55, 27],
	            [-33, 25],
	            [-30, -12],
	            [5, -41],
	            [-15, -4],
	            [-32, -12],
	            [-25, -20],
	            [-30, -13],
	            [-4, 35],
	            [12, 58],
	            [30, 18],
	            [-8, 15],
	            [-35, -33],
	            [-19, -39],
	            [-40, -42],
	            [20, -29],
	            [-26, -42],
	            [-30, -25],
	            [-28, -18],
	            [-7, -26],
	            [-43, -31],
	            [-9, -28],
	            [-32, -25],
	            [-20, 5],
	            [-25, -17],
	            [-29, -20],
	            [-23, -20],
	            [-47, -16],
	            [-5, 9],
	            [31, 28],
	            [27, 18],
	            [29, 33],
	            [35, 6],
	            [14, 25],
	            [38, 35],
	            [6, 12],
	            [21, 21],
	            [5, 44],
	            [14, 35],
	            [-32, -18],
	            [-9, 11],
	            [-15, -22],
	            [-18, 30],
	            [-8, -21],
	            [-10, 29],
	            [-28, -23],
	            [-17, 0],
	            [-3, 35],
	            [5, 21],
	            [-17, 22],
	            [-37, -12],
	            [-23, 28],
	            [-19, 14],
	            [0, 34],
	            [-22, 25],
	            [11, 34],
	            [23, 33],
	            [10, 30],
	            [22, 4],
	            [19, -9],
	            [23, 28],
	            [20, -5],
	            [21, 19],
	            [-5, 27],
	            [-16, 10],
	            [21, 23],
	            [-17, -1],
	            [-30, -13],
	            [-8, -13],
	            [-22, 13],
	            [-39, -6],
	            [-41, 14],
	            [-12, 24],
	            [-35, 34],
	            [39, 25],
	            [62, 29],
	            [23, 0],
	            [-4, -30],
	            [59, 2],
	            [-23, 37],
	            [-34, 23],
	            [-20, 29],
	            [-26, 25],
	            [-38, 19],
	            [15, 31],
	            [49, 2],
	            [35, 27],
	            [7, 29],
	            [28, 28],
	            [28, 6],
	            [52, 27],
	            [26, -4],
	            [42, 31],
	            [42, -12],
	            [21, -27],
	            [12, 11],
	            [47, -3],
	            [-2, -14],
	            [43, -10],
	            [28, 6],
	            [59, -18],
	            [53, -6],
	            [21, -8],
	            [37, 10],
	            [42, -18],
	            [31, -8]
	        ],
	        [
	            [3018, 5753],
	            [-1, -14],
	            [-16, -7],
	            [9, -26],
	            [0, -31],
	            [-12, -35],
	            [10, -47],
	            [12, 4],
	            [6, 43],
	            [-8, 21],
	            [-2, 45],
	            [35, 24],
	            [-4, 27],
	            [10, 19],
	            [10, -41],
	            [19, -1],
	            [18, -33],
	            [1, -20],
	            [25, 0],
	            [30, 6],
	            [16, -27],
	            [21, -7],
	            [16, 18],
	            [0, 15],
	            [34, 4],
	            [34, 1],
	            [-24, -18],
	            [10, -28],
	            [22, -4],
	            [21, -29],
	            [4, -48],
	            [15, 2],
	            [11, -14]
	        ],
	        [
	            [8001, 6331],
	            [-37, -51],
	            [-24, -56],
	            [-6, -41],
	            [22, -62],
	            [25, -77],
	            [26, -37],
	            [17, -47],
	            [12, -109],
	            [-3, -104],
	            [-24, -39],
	            [-31, -38],
	            [-23, -49],
	            [-35, -55],
	            [-10, 37],
	            [8, 40],
	            [-21, 34]
	        ],
	        [
	            [9661, 4085],
	            [-9, -8],
	            [-9, 26],
	            [1, 16],
	            [17, -34]
	        ],
	        [
	            [9641, 4175],
	            [4, -47],
	            [-7, 7],
	            [-6, -3],
	            [-4, 16],
	            [0, 45],
	            [13, -18]
	        ],
	        [
	            [6475, 6041],
	            [-21, -16],
	            [-5, -26],
	            [-1, -20],
	            [-27, -25],
	            [-45, -28],
	            [-24, -41],
	            [-13, -3],
	            [-8, 3],
	            [-16, -25],
	            [-18, -11],
	            [-23, -3],
	            [-7, -3],
	            [-6, -16],
	            [-8, -4],
	            [-4, -15],
	            [-14, 1],
	            [-9, -8],
	            [-19, 3],
	            [-7, 35],
	            [1, 32],
	            [-5, 17],
	            [-5, 44],
	            [-8, 24],
	            [5, 3],
	            [-2, 27],
	            [3, 12],
	            [-1, 25]
	        ],
	        [
	            [5817, 3752],
	            [11, 0],
	            [14, -10],
	            [9, 7],
	            [15, -6]
	        ],
	        [
	            [5911, 3478],
	            [-7, -43],
	            [-3, -49],
	            [-7, -27],
	            [-19, -30],
	            [-5, -8],
	            [-12, -30],
	            [-8, -31],
	            [-16, -42],
	            [-31, -61],
	            [-20, -36],
	            [-21, -26],
	            [-29, -23],
	            [-14, -3],
	            [-3, -17],
	            [-17, 9],
	            [-14, -11],
	            [-30, 11],
	            [-17, -7],
	            [-12, 3],
	            [-28, -23],
	            [-24, -10],
	            [-17, -22],
	            [-13, -1],
	            [-11, 21],
	            [-10, 1],
	            [-12, 26],
	            [-1, -8],
	            [-4, 16],
	            [0, 34],
	            [-9, 40],
	            [9, 11],
	            [0, 45],
	            [-19, 55],
	            [-14, 50],
	            [0, 1],
	            [-20, 76]
	        ],
	        [
	            [5840, 4141],
	            [-21, -8],
	            [-15, -23],
	            [-4, -21],
	            [-10, -4],
	            [-24, -49],
	            [-15, -38],
	            [-10, -2],
	            [-9, 7],
	            [-31, 7]
	        ]
	    ],
	    "transform": {
	        "scale": [0.036003600360036005, 0.016927109510951093],
	        "translate": [-180, -85.609038]
	    }
	}
	;
	  Datamap.prototype.abwTopo = '__ABW__';
	  Datamap.prototype.afgTopo = '__AFG__';
	  Datamap.prototype.agoTopo = '__AGO__';
	  Datamap.prototype.aiaTopo = '__AIA__';
	  Datamap.prototype.albTopo = '__ALB__';
	  Datamap.prototype.aldTopo = '__ALD__';
	  Datamap.prototype.andTopo = '__AND__';
	  Datamap.prototype.areTopo = '__ARE__';
	  Datamap.prototype.argTopo = '__ARG__';
	  Datamap.prototype.armTopo = '__ARM__';
	  Datamap.prototype.asmTopo = '__ASM__';
	  Datamap.prototype.ataTopo = '__ATA__';
	  Datamap.prototype.atcTopo = '__ATC__';
	  Datamap.prototype.atfTopo = '__ATF__';
	  Datamap.prototype.atgTopo = '__ATG__';
	  Datamap.prototype.ausTopo = '__AUS__';
	  Datamap.prototype.autTopo = '__AUT__';
	  Datamap.prototype.azeTopo = '__AZE__';
	  Datamap.prototype.bdiTopo = '__BDI__';
	  Datamap.prototype.belTopo = '__BEL__';
	  Datamap.prototype.benTopo = '__BEN__';
	  Datamap.prototype.bfaTopo = '__BFA__';
	  Datamap.prototype.bgdTopo = '__BGD__';
	  Datamap.prototype.bgrTopo = '__BGR__';
	  Datamap.prototype.bhrTopo = '__BHR__';
	  Datamap.prototype.bhsTopo = '__BHS__';
	  Datamap.prototype.bihTopo = '__BIH__';
	  Datamap.prototype.bjnTopo = '__BJN__';
	  Datamap.prototype.blmTopo = '__BLM__';
	  Datamap.prototype.blrTopo = '__BLR__';
	  Datamap.prototype.blzTopo = '__BLZ__';
	  Datamap.prototype.bmuTopo = '__BMU__';
	  Datamap.prototype.bolTopo = '__BOL__';
	  Datamap.prototype.braTopo = '__BRA__';
	  Datamap.prototype.brbTopo = '__BRB__';
	  Datamap.prototype.brnTopo = '__BRN__';
	  Datamap.prototype.btnTopo = '__BTN__';
	  Datamap.prototype.norTopo = '__NOR__';
	  Datamap.prototype.bwaTopo = '__BWA__';
	  Datamap.prototype.cafTopo = '__CAF__';
	  Datamap.prototype.canTopo = '__CAN__';
	  Datamap.prototype.cheTopo = '__CHE__';
	  Datamap.prototype.chlTopo = '__CHL__';
	  Datamap.prototype.chnTopo = '__CHN__';
	  Datamap.prototype.civTopo = '__CIV__';
	  Datamap.prototype.clpTopo = '__CLP__';
	  Datamap.prototype.cmrTopo = '__CMR__';
	  Datamap.prototype.codTopo = '__COD__';
	  Datamap.prototype.cogTopo = '__COG__';
	  Datamap.prototype.cokTopo = '__COK__';
	  Datamap.prototype.colTopo = '__COL__';
	  Datamap.prototype.comTopo = '__COM__';
	  Datamap.prototype.cpvTopo = '__CPV__';
	  Datamap.prototype.criTopo = '__CRI__';
	  Datamap.prototype.csiTopo = '__CSI__';
	  Datamap.prototype.cubTopo = '__CUB__';
	  Datamap.prototype.cuwTopo = '__CUW__';
	  Datamap.prototype.cymTopo = '__CYM__';
	  Datamap.prototype.cynTopo = '__CYN__';
	  Datamap.prototype.cypTopo = '__CYP__';
	  Datamap.prototype.czeTopo = '__CZE__';
	  Datamap.prototype.deuTopo = '__DEU__';
	  Datamap.prototype.djiTopo = '__DJI__';
	  Datamap.prototype.dmaTopo = '__DMA__';
	  Datamap.prototype.dnkTopo = '__DNK__';
	  Datamap.prototype.domTopo = '__DOM__';
	  Datamap.prototype.dzaTopo = '__DZA__';
	  Datamap.prototype.ecuTopo = '__ECU__';
	  Datamap.prototype.egyTopo = '__EGY__';
	  Datamap.prototype.eriTopo = '__ERI__';
	  Datamap.prototype.esbTopo = '__ESB__';
	  Datamap.prototype.espTopo = '__ESP__';
	  Datamap.prototype.estTopo = '__EST__';
	  Datamap.prototype.ethTopo = '__ETH__';
	  Datamap.prototype.finTopo = '__FIN__';
	  Datamap.prototype.fjiTopo = '__FJI__';
	  Datamap.prototype.flkTopo = '__FLK__';
	  Datamap.prototype.fraTopo = '__FRA__';
	  Datamap.prototype.froTopo = '__FRO__';
	  Datamap.prototype.fsmTopo = '__FSM__';
	  Datamap.prototype.gabTopo = '__GAB__';
	  Datamap.prototype.psxTopo = '__PSX__';
	  Datamap.prototype.gbrTopo = '__GBR__';
	  Datamap.prototype.geoTopo = '__GEO__';
	  Datamap.prototype.ggyTopo = '__GGY__';
	  Datamap.prototype.ghaTopo = '__GHA__';
	  Datamap.prototype.gibTopo = '__GIB__';
	  Datamap.prototype.ginTopo = '__GIN__';
	  Datamap.prototype.gmbTopo = '__GMB__';
	  Datamap.prototype.gnbTopo = '__GNB__';
	  Datamap.prototype.gnqTopo = '__GNQ__';
	  Datamap.prototype.grcTopo = '__GRC__';
	  Datamap.prototype.grdTopo = '__GRD__';
	  Datamap.prototype.grlTopo = '__GRL__';
	  Datamap.prototype.gtmTopo = '__GTM__';
	  Datamap.prototype.gumTopo = '__GUM__';
	  Datamap.prototype.guyTopo = '__GUY__';
	  Datamap.prototype.hkgTopo = '__HKG__';
	  Datamap.prototype.hmdTopo = '__HMD__';
	  Datamap.prototype.hndTopo = '__HND__';
	  Datamap.prototype.hrvTopo = '__HRV__';
	  Datamap.prototype.htiTopo = '__HTI__';
	  Datamap.prototype.hunTopo = '__HUN__';
	  Datamap.prototype.idnTopo = '__IDN__';
	  Datamap.prototype.imnTopo = '__IMN__';
	  Datamap.prototype.indTopo = '__IND__';
	  Datamap.prototype.ioaTopo = '__IOA__';
	  Datamap.prototype.iotTopo = '__IOT__';
	  Datamap.prototype.irlTopo = '__IRL__';
	  Datamap.prototype.irnTopo = '__IRN__';
	  Datamap.prototype.irqTopo = '__IRQ__';
	  Datamap.prototype.islTopo = '__ISL__';
	  Datamap.prototype.isrTopo = '__ISR__';
	  Datamap.prototype.itaTopo = '__ITA__';
	  Datamap.prototype.jamTopo = '__JAM__';
	  Datamap.prototype.jeyTopo = '__JEY__';
	  Datamap.prototype.jorTopo = '__JOR__';
	  Datamap.prototype.jpnTopo = '__JPN__';
	  Datamap.prototype.kabTopo = '__KAB__';
	  Datamap.prototype.kasTopo = '__KAS__';
	  Datamap.prototype.kazTopo = '__KAZ__';
	  Datamap.prototype.kenTopo = '__KEN__';
	  Datamap.prototype.kgzTopo = '__KGZ__';
	  Datamap.prototype.khmTopo = '__KHM__';
	  Datamap.prototype.kirTopo = '__KIR__';
	  Datamap.prototype.knaTopo = '__KNA__';
	  Datamap.prototype.korTopo = '__KOR__';
	  Datamap.prototype.kosTopo = '__KOS__';
	  Datamap.prototype.kwtTopo = '__KWT__';
	  Datamap.prototype.laoTopo = '__LAO__';
	  Datamap.prototype.lbnTopo = '__LBN__';
	  Datamap.prototype.lbrTopo = '__LBR__';
	  Datamap.prototype.lbyTopo = '__LBY__';
	  Datamap.prototype.lcaTopo = '__LCA__';
	  Datamap.prototype.lieTopo = '__LIE__';
	  Datamap.prototype.lkaTopo = '__LKA__';
	  Datamap.prototype.lsoTopo = '__LSO__';
	  Datamap.prototype.ltuTopo = '__LTU__';
	  Datamap.prototype.luxTopo = '__LUX__';
	  Datamap.prototype.lvaTopo = '__LVA__';
	  Datamap.prototype.macTopo = '__MAC__';
	  Datamap.prototype.mafTopo = '__MAF__';
	  Datamap.prototype.marTopo = '__MAR__';
	  Datamap.prototype.mcoTopo = '__MCO__';
	  Datamap.prototype.mdaTopo = '__MDA__';
	  Datamap.prototype.mdgTopo = '__MDG__';
	  Datamap.prototype.mdvTopo = '__MDV__';
	  Datamap.prototype.mexTopo = '__MEX__';
	  Datamap.prototype.mhlTopo = '__MHL__';
	  Datamap.prototype.mkdTopo = '__MKD__';
	  Datamap.prototype.mliTopo = '__MLI__';
	  Datamap.prototype.mltTopo = '__MLT__';
	  Datamap.prototype.mmrTopo = '__MMR__';
	  Datamap.prototype.mneTopo = '__MNE__';
	  Datamap.prototype.mngTopo = '__MNG__';
	  Datamap.prototype.mnpTopo = '__MNP__';
	  Datamap.prototype.mozTopo = '__MOZ__';
	  Datamap.prototype.mrtTopo = '__MRT__';
	  Datamap.prototype.msrTopo = '__MSR__';
	  Datamap.prototype.musTopo = '__MUS__';
	  Datamap.prototype.mwiTopo = '__MWI__';
	  Datamap.prototype.mysTopo = '__MYS__';
	  Datamap.prototype.namTopo = '__NAM__';
	  Datamap.prototype.nclTopo = '__NCL__';
	  Datamap.prototype.nerTopo = '__NER__';
	  Datamap.prototype.nfkTopo = '__NFK__';
	  Datamap.prototype.ngaTopo = '__NGA__';
	  Datamap.prototype.nicTopo = '__NIC__';
	  Datamap.prototype.niuTopo = '__NIU__';
	  Datamap.prototype.nldTopo = '__NLD__';
	  Datamap.prototype.nplTopo = '__NPL__';
	  Datamap.prototype.nruTopo = '__NRU__';
	  Datamap.prototype.nulTopo = '__NUL__';
	  Datamap.prototype.nzlTopo = '__NZL__';
	  Datamap.prototype.omnTopo = '__OMN__';
	  Datamap.prototype.pakTopo = '__PAK__';
	  Datamap.prototype.panTopo = '__PAN__';
	  Datamap.prototype.pcnTopo = '__PCN__';
	  Datamap.prototype.perTopo = '__PER__';
	  Datamap.prototype.pgaTopo = '__PGA__';
	  Datamap.prototype.phlTopo = '__PHL__';
	  Datamap.prototype.plwTopo = '__PLW__';
	  Datamap.prototype.pngTopo = '__PNG__';
	  Datamap.prototype.polTopo = '__POL__';
	  Datamap.prototype.priTopo = '__PRI__';
	  Datamap.prototype.prkTopo = '__PRK__';
	  Datamap.prototype.prtTopo = '__PRT__';
	  Datamap.prototype.pryTopo = '__PRY__';
	  Datamap.prototype.pyfTopo = '__PYF__';
	  Datamap.prototype.qatTopo = '__QAT__';
	  Datamap.prototype.rouTopo = '__ROU__';
	  Datamap.prototype.rusTopo = '__RUS__';
	  Datamap.prototype.rwaTopo = '__RWA__';
	  Datamap.prototype.sahTopo = '__SAH__';
	  Datamap.prototype.sauTopo = '__SAU__';
	  Datamap.prototype.scrTopo = '__SCR__';
	  Datamap.prototype.sdnTopo = '__SDN__';
	  Datamap.prototype.sdsTopo = '__SDS__';
	  Datamap.prototype.senTopo = '__SEN__';
	  Datamap.prototype.serTopo = '__SER__';
	  Datamap.prototype.sgpTopo = '__SGP__';
	  Datamap.prototype.sgsTopo = '__SGS__';
	  Datamap.prototype.shnTopo = '__SHN__';
	  Datamap.prototype.slbTopo = '__SLB__';
	  Datamap.prototype.sleTopo = '__SLE__';
	  Datamap.prototype.slvTopo = '__SLV__';
	  Datamap.prototype.smrTopo = '__SMR__';
	  Datamap.prototype.solTopo = '__SOL__';
	  Datamap.prototype.somTopo = '__SOM__';
	  Datamap.prototype.spmTopo = '__SPM__';
	  Datamap.prototype.srbTopo = '__SRB__';
	  Datamap.prototype.stpTopo = '__STP__';
	  Datamap.prototype.surTopo = '__SUR__';
	  Datamap.prototype.svkTopo = '__SVK__';
	  Datamap.prototype.svnTopo = '__SVN__';
	  Datamap.prototype.sweTopo = '__SWE__';
	  Datamap.prototype.swzTopo = '__SWZ__';
	  Datamap.prototype.sxmTopo = '__SXM__';
	  Datamap.prototype.sycTopo = '__SYC__';
	  Datamap.prototype.syrTopo = '__SYR__';
	  Datamap.prototype.tcaTopo = '__TCA__';
	  Datamap.prototype.tcdTopo = '__TCD__';
	  Datamap.prototype.tgoTopo = '__TGO__';
	  Datamap.prototype.thaTopo = '__THA__';
	  Datamap.prototype.tjkTopo = '__TJK__';
	  Datamap.prototype.tkmTopo = '__TKM__';
	  Datamap.prototype.tlsTopo = '__TLS__';
	  Datamap.prototype.tonTopo = '__TON__';
	  Datamap.prototype.ttoTopo = '__TTO__';
	  Datamap.prototype.tunTopo = '__TUN__';
	  Datamap.prototype.turTopo = '__TUR__';
	  Datamap.prototype.tuvTopo = '__TUV__';
	  Datamap.prototype.twnTopo = '__TWN__';
	  Datamap.prototype.tzaTopo = '__TZA__';
	  Datamap.prototype.ugaTopo = '__UGA__';
	  Datamap.prototype.ukrTopo = '__UKR__';
	  Datamap.prototype.umiTopo = '__UMI__';
	  Datamap.prototype.uryTopo = '__URY__';
	  Datamap.prototype.usaTopo = {"type":"Topology","transform":{"scale":[0.03514630243024302,0.005240860686068607],"translate":[-178.123152,18.948267]},"objects":{"usa":{"type":"GeometryCollection","geometries":[{"type":"Polygon","id":"AL","arcs":[[0,1,2,3,4]],"properties":{"name":"Alabama"}},{"type":"MultiPolygon","id":"AK","arcs":[[[5]],[[6]],[[7]],[[8]],[[9]],[[10]],[[11]],[[12]],[[13]],[[14]],[[15]],[[16]],[[17]],[[18]],[[19]],[[20]],[[21]],[[22]],[[23]],[[24]],[[25]],[[26]],[[27]],[[28]],[[29]],[[30]],[[31]],[[32]],[[33]],[[34]],[[35]],[[36]],[[37]],[[38]],[[39]],[[40]],[[41]],[[42]],[[43]]],"properties":{"name":"Alaska"}},{"type":"Polygon","id":"AZ","arcs":[[44,45,46,47,48]],"properties":{"name":"Arizona"}},{"type":"Polygon","id":"AR","arcs":[[49,50,51,52,53,54]],"properties":{"name":"Arkansas"}},{"type":"Polygon","id":"CA","arcs":[[55,-47,56,57]],"properties":{"name":"California"}},{"type":"Polygon","id":"CO","arcs":[[58,59,60,61,62,63]],"properties":{"name":"Colorado"}},{"type":"Polygon","id":"CT","arcs":[[64,65,66,67]],"properties":{"name":"Connecticut"}},{"type":"Polygon","id":"DE","arcs":[[68,69,70,71]],"properties":{"name":"Delaware"}},{"type":"Polygon","id":"DC","arcs":[[72,73]],"properties":{"name":"District of Columbia"}},{"type":"Polygon","id":"FL","arcs":[[74,75,-2]],"properties":{"name":"Florida"}},{"type":"Polygon","id":"GA","arcs":[[76,77,-75,-1,78,79]],"properties":{"name":"Georgia"}},{"type":"MultiPolygon","id":"HI","arcs":[[[80]],[[81]],[[82]],[[83]],[[84]]],"properties":{"name":"Hawaii"}},{"type":"Polygon","id":"ID","arcs":[[85,86,87,88,89,90,91]],"properties":{"name":"Idaho"}},{"type":"Polygon","id":"IL","arcs":[[92,93,94,95,96,97]],"properties":{"name":"Illinois"}},{"type":"Polygon","id":"IN","arcs":[[98,99,-95,100,101]],"properties":{"name":"Indiana"}},{"type":"Polygon","id":"IA","arcs":[[102,-98,103,104,105,106]],"properties":{"name":"Iowa"}},{"type":"Polygon","id":"KS","arcs":[[107,108,-60,109]],"properties":{"name":"Kansas"}},{"type":"Polygon","id":"KY","arcs":[[110,111,112,113,-96,-100,114]],"properties":{"name":"Kentucky"}},{"type":"Polygon","id":"LA","arcs":[[115,116,117,-52]],"properties":{"name":"Louisiana"}},{"type":"Polygon","id":"ME","arcs":[[118,119]],"properties":{"name":"Maine"}},{"type":"MultiPolygon","id":"MD","arcs":[[[120]],[[-71,121,122,123,124,-74,125,126,127]]],"properties":{"name":"Maryland"}},{"type":"Polygon","id":"MA","arcs":[[128,129,130,131,-68,132,133,134]],"properties":{"name":"Massachusetts"}},{"type":"MultiPolygon","id":"MI","arcs":[[[-102,135,136]],[[137]],[[138,139]],[[140]]],"properties":{"name":"Michigan"}},{"type":"Polygon","id":"MN","arcs":[[-107,141,142,143,144]],"properties":{"name":"Minnesota"}},{"type":"Polygon","id":"MS","arcs":[[-4,145,-116,-51,146]],"properties":{"name":"Mississippi"}},{"type":"Polygon","id":"MO","arcs":[[-97,-114,147,-55,148,-108,149,-104]],"properties":{"name":"Missouri"}},{"type":"Polygon","id":"MT","arcs":[[150,151,-92,152,153]],"properties":{"name":"Montana"}},{"type":"Polygon","id":"NE","arcs":[[-105,-150,-110,-59,154,155]],"properties":{"name":"Nebraska"}},{"type":"Polygon","id":"NV","arcs":[[156,-48,-56,157,-88]],"properties":{"name":"Nevada"}},{"type":"Polygon","id":"NH","arcs":[[-135,158,159,-120,160]],"properties":{"name":"New Hampshire"}},{"type":"Polygon","id":"NJ","arcs":[[161,-69,162,163]],"properties":{"name":"New Jersey"}},{"type":"Polygon","id":"NM","arcs":[[164,165,166,-45,-62]],"properties":{"name":"New Mexico"}},{"type":"Polygon","id":"NY","arcs":[[-133,-67,167,-164,168,169,170]],"properties":{"name":"New York"}},{"type":"Polygon","id":"NC","arcs":[[171,172,-80,173,174]],"properties":{"name":"North Carolina"}},{"type":"Polygon","id":"ND","arcs":[[175,-154,176,-143]],"properties":{"name":"North Dakota"}},{"type":"Polygon","id":"OH","arcs":[[177,-115,-99,-137,178,179]],"properties":{"name":"Ohio"}},{"type":"Polygon","id":"OK","arcs":[[-149,-54,180,-165,-61,-109]],"properties":{"name":"Oklahoma"}},{"type":"Polygon","id":"OR","arcs":[[-89,-158,-58,181,182]],"properties":{"name":"Oregon"}},{"type":"Polygon","id":"PA","arcs":[[-163,-72,-128,183,-180,184,-169]],"properties":{"name":"Pennsylvania"}},{"type":"MultiPolygon","id":"RI","arcs":[[[185,-130]],[[186,-65,-132]]],"properties":{"name":"Rhode Island"}},{"type":"Polygon","id":"SC","arcs":[[187,-77,-173]],"properties":{"name":"South Carolina"}},{"type":"Polygon","id":"SD","arcs":[[-142,-106,-156,188,-151,-176]],"properties":{"name":"South Dakota"}},{"type":"Polygon","id":"TN","arcs":[[189,-174,-79,-5,-147,-50,-148,-113]],"properties":{"name":"Tennessee"}},{"type":"Polygon","id":"TX","arcs":[[-53,-118,190,-166,-181]],"properties":{"name":"Texas"}},{"type":"Polygon","id":"UT","arcs":[[191,-63,-49,-157,-87]],"properties":{"name":"Utah"}},{"type":"Polygon","id":"VT","arcs":[[-134,-171,192,-159]],"properties":{"name":"Vermont"}},{"type":"MultiPolygon","id":"VA","arcs":[[[193,-123]],[[120]],[[-126,-73,-125,194,-175,-190,-112,195]]],"properties":{"name":"Virginia"}},{"type":"MultiPolygon","id":"WA","arcs":[[[-183,196,-90]],[[197]],[[198]]],"properties":{"name":"Washington"}},{"type":"Polygon","id":"WV","arcs":[[-184,-127,-196,-111,-178]],"properties":{"name":"West Virginia"}},{"type":"Polygon","id":"WI","arcs":[[199,-93,-103,-145,200,-140]],"properties":{"name":"Wisconsin"}},{"type":"Polygon","id":"WY","arcs":[[-189,-155,-64,-192,-86,-152]],"properties":{"name":"Wyoming"}}]}},"arcs":[[[2632,3060],[5,-164],[7,-242],[4,-53],[3,-30],[-2,-19],[4,-11],[-5,-25],[0,-24],[-2,-32],[2,-57],[-2,-51],[3,-52]],[[2649,2300],[-14,-1],[-59,0],[-1,-25],[6,-37],[-1,-31],[2,-16],[-4,-28]],[[2578,2162],[-4,-6],[-7,31],[-1,47],[-2,6],[-3,-36],[-1,-34],[-7,9]],[[2553,2179],[-2,291],[6,363],[4,209],[-3,20]],[[2558,3062],[24,1],[50,-3]],[[1324,6901],[1,32],[6,-19],[-1,-32],[-8,4],[2,15]],[[1317,6960],[5,-23],[-3,-33],[-2,11],[0,45]],[[1285,7153],[6,5],[3,-8],[-1,-28],[-6,-6],[-5,17],[3,20]],[[1267,7137],[12,-7],[3,-36],[13,-41],[4,-25],[0,-21],[3,-4],[1,-27],[5,-27],[0,-25],[3,8],[2,-19],[1,-74],[-3,-17],[-7,3],[-3,38],[-2,-3],[-6,28],[-2,-10],[-5,10],[1,-28],[5,7],[3,-10],[-2,-39],[-5,4],[-9,49],[-2,25],[1,26],[-7,-2],[0,20],[5,2],[5,18],[-2,31],[-6,7],[-1,50],[-2,25],[-4,-18],[-2,28],[4,14],[-3,32],[2,8]],[[1263,6985],[5,-12],[4,15],[4,-7],[-4,-28],[-6,8],[-3,24]],[[1258,7247],[-4,19],[5,13],[15,-18],[7,1],[5,-36],[9,-29],[-1,-22],[-5,-11],[-6,5],[-5,-14],[-6,9],[-7,-9],[-1,45],[0,30],[-5,1],[-1,16]],[[1252,7162],[-4,14],[-4,32],[0,24],[3,11],[4,-11],[0,20],[12,-35],[1,-33],[-4,-5],[-3,-37],[3,-11],[-3,-43],[-5,9],[0,-27],[-3,13],[-2,54],[5,25]],[[1207,7331],[8,38],[3,-16],[7,-13],[6,-2],[0,-30],[6,-99],[0,-85],[-1,-22],[-4,13],[-10,84],[-7,25],[3,20],[-3,48],[-8,39]],[[1235,7494],[10,-15],[5,2],[0,-14],[8,-52],[-5,8],[-2,-18],[6,-27],[2,-48],[-6,-13],[-2,-16],[-10,-35],[-3,1],[-1,37],[2,22],[-1,32],[-3,40],[0,21],[-2,51],[-4,22],[-1,38],[7,-36]],[[1203,7324],[4,0],[4,-35],[-2,-24],[-6,-5],[0,38],[0,26]],[[1207,7331],[-5,7],[-3,26],[-6,18],[-5,37],[-6,17],[1,30],[4,10],[1,26],[3,-11],[8,-1],[6,17],[8,-23],[-5,-26],[2,-9],[4,28],[10,-9],[5,-21],[-3,-38],[3,-3],[3,-50],[-7,-7],[-14,41],[0,-42],[-4,-17]],[[883,7871],[-12,-48],[-1,-19],[-9,-12],[2,29],[10,30],[7,34],[3,-14]],[[870,7943],[-2,-39],[-4,-41],[-6,14],[5,47],[7,19]],[[863,9788],[3,-8],[15,-9],[8,5],[10,0],[12,-7],[7,4],[7,-15],[12,-18],[16,-4],[5,10],[11,6],[4,14],[12,2],[0,-9],[7,5],[15,-15],[9,-24],[10,-11],[2,-11],[8,-2],[8,-18],[1,-11],[5,9],[6,-7],[0,-1783],[13,-16],[2,17],[14,-24],[8,30],[18,4],[-3,-52],[4,-17],[10,-17],[2,-27],[29,-101],[4,-63],[6,17],[12,31],[7,1],[3,23],[0,34],[5,0],[1,31],[9,7],[13,26],[13,-45],[-1,-27],[3,-27],[7,-7],[10,-40],[-1,-12],[4,-22],[12,-25],[19,-110],[3,-29],[6,-29],[8,-65],[9,-55],[-3,-23],[9,-9],[-2,-33],[7,-14],[1,-38],[7,2],[14,-40],[9,-7],[5,-19],[4,-5],[1,-19],[9,-5],[3,-23],[-4,-43],[1,-36],[4,-58],[-4,-15],[-6,-53],[-10,-39],[-3,20],[-4,-6],[-3,39],[1,17],[-3,20],[7,21],[-2,7],[-7,-26],[-3,17],[-4,-10],[-12,42],[4,46],[-8,-15],[0,-23],[-6,17],[-1,22],[4,24],[-1,24],[-6,-19],[-6,42],[-3,-8],[-2,36],[5,23],[6,0],[-2,28],[3,36],[-5,-1],[-9,32],[-6,37],[-15,27],[0,77],[-4,9],[1,31],[-5,9],[-8,42],[-2,22],[-12,7],[-14,56],[-6,132],[-3,-30],[1,-27],[6,-53],[-1,-8],[3,-43],[0,-28],[-6,6],[-4,31],[-6,6],[-8,-9],[0,45],[-5,38],[-5,-12],[-17,40],[-2,-11],[10,-13],[7,-31],[3,-1],[1,-25],[4,-30],[-10,-16],[-5,10],[0,-26],[-8,20],[-2,14],[-5,0],[-13,38],[-10,33],[-1,20],[-5,30],[-14,21],[-9,21],[-14,26],[-9,24],[1,26],[2,-9],[3,17],[-3,38],[4,21],[-2,9],[-7,-40],[-14,-26],[-18,10],[-14,24],[-1,18],[-7,-4],[-7,14],[-17,12],[-9,1],[-21,-10],[-8,-7],[-10,27],[-12,12],[-3,17],[-2,28],[-8,-2],[-3,-25],[-15,34],[-2,14],[-15,-27],[-7,-32],[-3,30],[3,17],[4,-5],[14,22],[-2,17],[-6,-8],[-3,22],[-6,3],[-6,55],[-3,-13],[-8,-8],[-3,8],[-3,-18],[-11,6],[-1,-20],[-7,-5],[-3,7],[2,36],[-3,-1],[-5,-38],[7,-12],[1,-27],[4,-30],[-3,-31],[-5,10],[-2,-15],[6,-7],[3,-41],[-8,-9],[-4,9],[-7,-12],[-3,10],[-9,-2],[0,16],[-4,-10],[-3,-20],[-3,18],[-5,-25],[2,-12],[-6,-15],[-6,-2],[-3,-20],[-6,-17],[-4,6],[-5,-21],[-4,1],[-8,-43],[-9,-3],[-3,14],[-5,-23],[-11,17],[2,33],[8,11],[4,-2],[2,13],[8,25],[0,21],[-11,-28],[-9,16],[-1,12],[5,48],[8,34],[1,29],[2,5],[1,30],[-4,34],[10,12],[19,48],[4,-19],[6,-5],[9,20],[-10,26],[-4,20],[-7,-2],[-5,9],[-2,-8],[-9,-14],[-4,-26],[-9,-6],[-9,-30],[-1,-20],[-7,-11],[-2,-22],[-5,-13],[-2,-39],[-10,-25],[5,-20],[-4,-29],[-9,-5],[-1,-38],[-8,-13],[-3,15],[-4,-29],[-5,-1],[1,-21],[-11,-13],[-2,-57],[12,-3],[10,-16],[3,-19],[-4,-30],[-7,-19],[-6,-1],[0,-17],[-4,-6],[1,-21],[-4,-31],[-9,-29],[-5,0],[-5,-11],[-5,2],[-4,-11],[2,-16],[-7,-8],[-2,-23],[-5,14],[-5,-45],[-9,4],[1,-24],[-6,6],[-3,-11],[0,-32],[-6,-50],[-10,-6],[-7,-23],[-2,-13],[-5,18],[-8,-48],[-2,13],[-5,-4],[-1,-27],[-5,-10],[-6,4],[-4,-27],[8,-9],[-9,-60],[-25,-20],[-6,-54],[-2,12],[1,33],[-5,6],[-6,-13],[-1,-14],[-10,-22],[-4,-25],[-1,18],[-2,-21],[-6,14],[-10,-33],[-8,2],[1,25],[-4,24],[-3,-20],[1,-21],[-11,-64],[-3,16],[-1,-24],[-8,4],[-1,38],[-4,8],[-2,-14],[4,-16],[-2,-27],[-5,-13],[-5,29],[-5,2],[-1,-11],[5,-17],[-9,-27],[6,-7],[0,-13],[-5,9],[-7,-25],[-15,1],[-7,-16],[0,-13],[-8,-15],[-6,6],[-2,35],[6,12],[4,43],[6,1],[13,28],[10,1],[4,-27],[3,20],[-1,23],[6,10],[7,0],[8,50],[10,45],[12,40],[15,18],[6,-9],[6,12],[1,-17],[-3,-19],[4,-14],[1,23],[7,2],[2,-15],[5,-5],[0,18],[-8,15],[0,11],[5,49],[6,28],[9,27],[15,24],[10,35],[5,-13],[4,5],[-1,22],[1,21],[8,44],[11,28],[8,38],[0,21],[7,148],[11,40],[-1,31],[-27,-45],[-8,6],[-2,18],[-5,9],[-1,21],[-4,-10],[-3,-32],[5,-41],[-6,-18],[-5,7],[-9,64],[-6,33],[-4,0],[-2,-24],[-3,-4],[-4,19],[-5,4],[-2,32],[-16,-37],[-13,-26],[-1,-14],[-11,-22],[-6,20],[5,23],[-1,54],[-4,57],[7,24],[-6,49],[-5,27],[-4,39],[-6,17],[-2,-34],[-7,-8],[-12,-22],[-14,-9],[-7,2],[-7,12],[-1,30],[-5,9],[-9,42],[-8,8],[-8,46],[6,21],[1,39],[-5,-8],[0,24],[2,19],[-6,18],[0,-19],[-7,8],[-1,32],[-6,4],[-3,22],[0,27],[-5,-12],[-1,26],[7,6],[-6,30],[10,2],[0,35],[2,24],[18,77],[4,23],[3,-5],[-2,33],[7,55],[6,22],[11,9],[8,-9],[12,-33],[8,4],[11,32],[11,49],[6,6],[1,-13],[13,0],[12,10],[11,52],[0,12],[-5,48],[-1,28],[-8,31],[-3,26],[8,-7],[8,22],[0,20],[-10,39],[-8,-30],[-7,5],[-6,-17],[-8,-4],[-2,-11],[-9,-17],[-2,-28],[-5,-12],[-2,34],[-5,7],[-4,-26],[-2,12],[-10,19],[-20,-1],[-14,-21],[-6,-3],[-11,13],[-22,14],[-6,12],[-3,19],[2,26],[-8,22],[2,24],[5,12],[-2,31],[-8,0],[-6,8],[-13,6],[-7,16],[-10,16],[-1,19],[16,27],[20,43],[15,27],[8,-15],[8,-3],[2,21],[-5,3],[-1,18],[20,29],[22,22],[12,2],[7,-7],[-4,-32],[2,-22],[-3,-15],[4,-26],[8,5],[10,-5],[11,6],[4,-10],[7,-2],[7,10],[8,-11],[9,42],[5,2],[5,-8],[2,24],[-12,11],[-11,-9],[1,31],[-8,34],[-10,10],[-2,30],[7,8],[9,-31],[-1,-24],[4,-18],[10,-22],[2,23],[-11,30],[5,54],[-4,10],[-11,-12],[-11,3],[-2,10],[-6,-10],[-24,23],[0,24],[-7,54],[-6,19],[-9,17],[-19,46],[-9,18],[-8,4],[-13,31],[-12,18],[-1,6],[9,10],[4,29],[1,59],[25,-4],[31,13],[8,11],[12,29],[12,45],[3,45],[5,38],[10,33],[5,24],[13,38],[2,-10],[11,-3],[16,20],[10,21],[24,64],[9,4],[1,-10],[9,7],[9,-2],[18,9],[17,28],[17,58],[7,13],[2,-10],[26,-24],[2,-17],[-9,-22],[-4,-1],[0,-29],[14,9],[0,16],[6,14],[2,-8],[5,33],[13,-30],[-2,-23],[8,-6],[5,-14],[7,22],[13,1],[7,7],[18,-7],[10,-8],[-5,-45],[17,-12],[2,-11],[16,-20],[1,9],[12,13],[11,-1],[0,-11],[7,-1],[7,15],[11,2],[9,-6],[11,-16],[5,3],[7,-22],[4,9],[7,-7],[5,-13]],[[717,7456],[-1,-8],[-9,13],[7,49],[6,4],[4,45],[5,-40],[4,14],[8,-22],[0,-31],[-11,-4],[-5,-13],[-8,-7]],[[688,7363],[8,25],[-8,6],[0,22],[6,14],[5,-10],[0,-22],[3,15],[0,32],[5,-15],[1,21],[5,-12],[5,0],[5,11],[7,-20],[0,-55],[9,4],[-6,-37],[-11,15],[4,-24],[-3,-20],[-6,10],[0,-38],[-8,-10],[-3,-16],[-5,15],[-6,-40],[-4,-4],[-5,-18],[-2,43],[-6,-23],[-1,13],[-6,14],[0,39],[-6,15],[4,45],[11,28],[7,-2],[1,-21]],[[671,7185],[-6,-39],[-2,6],[8,33]],[[640,7055],[4,-2],[-1,-40],[-8,6],[-1,13],[6,23]],[[519,6933],[-2,-41],[-9,-33],[5,51],[2,-5],[4,28]],[[501,6947],[5,0],[0,-20],[-5,-23],[-5,15],[-3,-14],[-2,35],[2,12],[8,-5]],[[451,6875],[1,-16],[-3,-11],[-3,18],[5,9]],[[447,8527],[-4,-19],[-2,16],[6,3]],[[436,6781],[6,-7],[-1,-16],[-5,1],[0,22]],[[358,6745],[2,-22],[-5,-10],[-1,23],[4,9]],[[352,6718],[-8,-21],[-2,14],[3,19],[7,-12]],[[335,7902],[6,7],[2,-14],[5,3],[6,-12],[1,-54],[-3,-18],[-7,-11],[-2,-18],[-11,20],[-5,-1],[-10,28],[-4,0],[-6,15],[-3,25],[4,7],[10,-7],[5,20],[5,2],[3,14],[4,-6]],[[334,6690],[5,-14],[-10,-36],[1,-6],[12,26],[0,-15],[-5,-17],[-8,-12],[-1,-18],[-8,-18],[-7,-1],[-5,-18],[-9,-16],[-5,17],[9,20],[3,-3],[8,16],[-2,19],[4,20],[6,-9],[1,12],[-7,4],[-4,14],[4,23],[11,13],[2,-26],[5,25]],[[266,6527],[10,37],[1,16],[4,17],[7,9],[3,-10],[1,-25],[-12,-27],[-6,-40],[-6,-13],[-2,36]],[[238,6477],[2,-19],[-8,-1],[-1,13],[7,7]],[[227,7303],[-4,-18],[-1,18],[5,0]],[[212,6440],[2,-18],[-5,-13],[-1,19],[4,12]],[[182,8542],[22,-28],[13,24],[6,-2],[5,-14],[2,-23],[11,-12],[4,-12],[15,-5],[8,-8],[-4,-28],[-7,6],[-8,-5],[-4,-13],[-4,-28],[-5,26],[-6,18],[-6,2],[-3,20],[-15,25],[-6,1],[-11,-22],[-7,11],[-4,23],[4,44]],[[162,6381],[0,-22],[-5,-4],[1,19],[4,7]],[[128,6335],[4,-8],[10,1],[1,-7],[-13,-9],[-2,23]],[[108,6360],[0,19],[4,7],[6,-19],[-2,-17],[-4,1],[1,-20],[-5,-2],[-12,-21],[-6,6],[2,15],[7,-2],[9,33]],[[47,6279],[5,3],[0,-24],[-6,3],[-8,-28],[-4,37],[4,1],[0,29],[5,1],[0,-21],[4,-1]],[[28,6296],[3,-9],[-2,-32],[-5,-10],[0,20],[4,31]],[[0,6291],[5,-1],[4,-23],[-4,-27],[-5,51]],[[9993,6496],[6,-13],[0,-19],[-11,-12],[-8,31],[0,15],[13,-2]],[[1966,3444],[-1,-1081]],[[1965,2363],[-57,0],[-34,71],[-73,150],[3,43]],[[1804,2627],[6,8],[1,16],[-1,36],[-4,1],[-2,71],[6,27],[0,28],[-1,45],[4,34],[4,12],[4,25],[-6,27],[-4,51],[-5,31],[0,24]],[[1806,3063],[2,26],[0,36],[-3,36],[-2,112],[11,7],[3,-23],[3,1],[3,33],[0,153]],[[1823,3444],[101,2],[42,-2]],[[2515,3253],[-1,-35],[-4,-11],[-1,-29],[-5,-31],[0,-46],[-3,-34],[-3,-5]],[[2498,3062],[2,-17],[-4,-14],[-2,-33],[-3,-8],[0,-38],[-5,-10],[0,-13],[-6,-31],[2,-21],[-5,-30],[-5,-59],[5,-25],[-2,-16],[1,-39],[-2,-26]],[[2474,2682],[-69,3],[-13,0]],[[2392,2685],[0,101],[-4,8],[-5,-9],[-3,18]],[[2380,2803],[1,335],[-5,211]],[[2376,3349],[4,0],[123,-1],[2,-36],[-4,-23],[-4,-36],[18,0]],[[1654,4398],[0,-331],[0,-241],[36,-171],[35,-169],[27,-137],[20,-101],[34,-185]],[[1804,2627],[-38,-18],[-30,-16],[-4,25],[0,40],[-2,47],[-4,33],[-9,46],[-12,43],[-2,-12],[-4,8],[1,18],[-5,39],[-7,-8],[-12,28],[-2,23],[-8,28],[-9,-1],[-7,13],[-10,-6],[-5,26],[1,53],[-1,8],[1,38],[-8,28],[0,39],[-3,2],[-4,33],[-4,8],[-1,20],[-11,79],[-5,23],[-1,61],[2,-5],[2,37],[-4,33],[-5,-4],[-7,30],[-2,24],[0,23],[-3,31],[0,50],[5,0],[-2,70],[-2,-7],[-1,-35],[-5,-7],[-7,26],[-1,45],[-4,35],[-6,22],[-3,25],[-9,50],[2,14],[-4,64],[2,35],[-3,54],[-7,52],[-7,29],[-2,35],[7,83],[2,29],[-2,22],[3,57],[-2,52],[-3,13],[1,42]],[[1534,4399],[28,1],[24,1],[38,-3],[30,0]],[[2107,4208],[57,0],[0,-191]],[[2164,4017],[1,-574]],[[2165,3443],[-28,1]],[[2137,3444],[-38,-1],[-72,0],[-15,1],[-46,0]],[[1966,3444],[0,223],[-1,21],[0,162],[0,357]],[[1965,4207],[32,1],[63,-1],[47,1]],[[3025,4400],[0,-113],[-2,-18]],[[3023,4269],[-2,3],[-12,-14],[-15,4],[-7,-26],[-7,-9],[-8,-22]],[[2972,4205],[-2,22],[7,21],[-2,16],[2,144]],[[2977,4408],[12,-2],[36,-3],[0,-3]],[[2922,3980],[-2,-23]],[[2920,3957],[-3,-13],[0,-30],[5,-29],[1,-47],[6,-49],[3,-2],[1,-66]],[[2933,3721],[-19,2],[-2,241]],[[2912,3964],[5,21],[5,-5]],[[2876,3786],[-2,27]],[[2874,3813],[2,12],[4,-19],[-4,-20]],[[2649,2300],[4,-55],[39,-13],[37,-14],[1,-41],[4,1],[1,39],[-1,35],[2,15],[7,-16],[8,-7]],[[2751,2244],[1,-83],[4,-93],[8,-122],[13,-131],[-2,-9],[1,-61],[5,-68],[8,-137],[2,-42],[0,-44],[-3,-158],[-3,-3],[-3,-49],[1,-16],[-5,-36],[-2,9],[-6,-15],[-9,-8],[-2,20],[1,29],[-7,85],[-5,15],[-4,-11],[-3,47],[-1,38],[-6,43],[-2,28],[1,41],[-3,8],[1,-24],[-3,-7],[-9,104],[-4,26],[9,76],[-6,-4],[-4,-24],[-3,38],[5,104],[1,87],[-4,21],[-1,28],[-5,6],[-7,46],[-5,19],[0,28],[-4,11],[-3,31],[-11,42],[-9,-10],[0,-29],[-3,5],[-12,-35],[-12,-9],[0,21],[-3,25],[-15,57],[-10,24],[-10,6],[-8,-4],[-17,-18]],[[2703,3063],[-6,-41],[0,-20],[9,-40],[3,3],[5,-42],[1,-22],[4,-40],[7,-24],[3,-35],[8,-33],[0,-22],[5,-35],[7,-29],[2,-32],[1,-40],[3,-14],[5,-51],[0,-33],[7,-16]],[[2767,2497],[-7,-65],[-2,-34],[-3,-29],[0,-30],[-3,-14],[-1,-81]],[[2632,3060],[37,1]],[[2669,3061],[20,-1],[14,3]],[[640,0],[-7,17],[-1,16],[1,43],[-5,73],[4,24],[2,34],[-2,22],[1,23],[8,-27],[9,-20],[5,-29],[0,-26],[8,-40],[-5,-34],[-8,-15],[-7,-25],[-3,-36]],[[613,397],[3,-26],[4,11],[9,-30],[-1,-27],[-9,-14],[-2,6],[-1,33],[-5,7],[-1,19],[3,21]],[[602,432],[-3,-20],[-7,0],[2,22],[8,-2]],[[574,525],[3,-45],[-2,-26],[-6,-5],[-4,54],[4,1],[5,21]],[[531,626],[3,-2],[2,-20],[-1,-28],[-4,-18],[-9,22],[1,31],[8,15]],[[1908,4871],[0,-472]],[[1908,4399],[-31,-1],[-54,0]],[[1823,4398],[-85,1]],[[1738,4399],[0,349],[4,62],[-2,16],[-6,3],[-2,26],[6,68],[3,6],[3,29],[-1,17],[4,23],[1,34],[6,56],[-2,26],[-7,14],[-4,32]],[[1741,5160],[0,34],[-3,33],[0,16],[0,255],[0,236]],[[1738,5734],[28,0]],[[1766,5734],[0,-195],[9,-54],[1,-52],[5,-23],[6,-8],[0,-14],[11,-51],[1,-21],[8,-20],[0,-12],[8,1],[-4,-71],[-1,-45],[3,-29],[-5,-21],[2,-20],[-1,-21],[6,-20],[7,26],[3,21],[5,-19],[-1,-15],[3,-37],[5,-39],[3,-13],[0,-37],[3,-16],[6,-2],[4,-61],[3,-11],[3,18],[9,-1],[7,17],[3,-10],[7,9],[2,-11],[5,8],[7,39],[4,-33],[5,-20]],[[2489,4496],[53,-3],[28,0]],[[2570,4493],[-1,-37],[4,-43],[5,-70]],[[2578,4343],[0,-450],[-3,-35],[3,-40],[1,-34],[-4,-27],[-1,-25],[-5,-41],[-3,-3],[0,-24],[-2,-9],[-1,-45],[0,-13]],[[2563,3597],[-3,-27],[2,-34],[-11,-17],[-1,-20],[2,-25],[-3,-16],[-11,29],[-3,-2],[-4,-33],[1,-11]],[[2532,3441],[-5,2],[-6,55],[2,12],[-2,37],[0,29],[-9,41],[-3,-4],[-3,25],[-9,38],[0,31],[5,49],[-1,18],[3,23],[-4,13],[-6,9],[-3,-18],[-3,11],[-1,63],[-10,41],[-9,49],[-3,58],[-1,39],[3,27]],[[2467,4089],[0,35],[8,21],[1,29],[4,19],[0,33],[-4,27],[2,34],[11,9],[9,24],[0,29],[4,13],[1,37],[0,24],[-7,18],[-1,20],[-6,35]],[[2655,4340],[0,-228],[0,-266]],[[2655,3846],[-2,-9],[2,-52],[-5,-1],[-5,-18],[-8,9],[1,-38],[-5,-16],[-2,-24],[-5,-9],[-3,-48],[-3,-13],[-6,18],[-1,22],[-7,-24],[1,-21],[-7,-7],[-1,19],[-8,-19],[-2,-20],[-7,28],[-4,-6],[-2,13],[-3,-13],[-7,-2],[-3,-18]],[[2578,4343],[3,-12],[8,0],[9,22]],[[2598,4353],[23,0],[34,0],[0,-13]],[[2473,4685],[0,-28],[4,-19],[-3,-23],[1,-43],[2,-30],[10,-22],[2,-24]],[[2467,4089],[-3,7],[-6,38],[-3,-1],[-40,-5],[-39,-2],[-33,3]],[[2343,4129],[-3,25],[2,49],[-3,43],[0,48],[-5,17],[-1,26],[2,23],[-2,33],[-4,13],[-5,86]],[[2324,4492],[-5,41],[2,29],[1,37],[2,14],[-3,19],[1,33],[-2,16],[4,4]],[[2324,4685],[144,0],[5,0]],[[2356,4017],[3,-18],[9,-14],[-6,-56],[4,-18],[4,-45],[6,-10],[0,-412]],[[2376,3444],[-156,0],[-55,-1]],[[2164,4017],[5,0],[187,0]],[[2718,3716],[-1,-57],[4,-37],[4,-28],[2,-22],[5,-22],[4,-3]],[[2736,3547],[-11,-51],[-11,-29],[0,-14],[-4,-13],[0,-16],[-6,-8],[-1,-21],[-16,-27]],[[2687,3368],[0,-3],[-24,2],[-22,6],[-5,-2],[-32,8],[-36,-5],[-6,9],[1,-35],[-36,2],[-3,-2]],[[2524,3348],[1,24],[5,-8],[2,77]],[[2655,3846],[11,0],[5,-40],[1,-17],[9,-7],[6,-26],[5,13],[10,-14],[4,19],[4,6],[1,-32],[3,-6],[4,-26]],[[2474,2682],[3,-22],[-2,-9],[-1,-38],[5,-24],[0,-57],[-3,-44],[-7,-27],[-2,-43],[-2,4],[-1,-70],[-3,-2],[2,-37],[-2,-14],[54,0],[-3,-63],[4,-41],[1,-32],[4,-20]],[[2521,2143],[-9,-26],[0,-19],[7,-12],[3,30],[6,-30],[-1,-24],[-3,-11],[-7,10],[1,-18],[-2,-27],[5,-24],[9,-7],[3,-29],[3,-4],[-5,-32],[-5,6],[-4,33],[-10,18],[0,33],[-6,-11],[1,-27],[-3,-25],[-3,-4],[-3,28],[-7,1],[-2,-29],[-4,-9],[-5,18],[-4,2],[-3,47],[-7,21],[-2,-3],[-3,40],[-7,-5],[0,24],[-8,-23],[1,-18],[-5,-17],[-9,8],[-10,27],[-7,11],[-16,-9],[-2,-8]],[[2398,2049],[-2,19],[6,68],[-2,37],[2,20],[-1,26],[3,19],[3,50],[0,40],[-8,78],[0,41],[-7,42],[0,196]],[[3046,5029],[12,26],[-2,13],[5,30],[4,13],[-1,12],[5,18],[-1,33],[2,50],[5,17],[1,53],[22,147],[6,-7],[0,-35],[4,-13],[9,21],[6,0],[4,14],[8,-31],[4,-25],[1,-214],[-1,-51],[10,-14],[-2,-22],[3,-21],[-2,-18],[4,-30],[5,7],[5,-68],[-6,-31],[-3,12],[-3,-21],[-4,5],[0,-18],[-6,2],[-8,-40],[-2,28],[-3,2],[1,-30],[-6,-15],[-2,24],[-3,-12],[-7,0],[0,28],[-5,-6],[1,-20],[-4,-42],[1,-12],[-6,-23],[-5,9],[-3,-24],[-4,-3],[-4,-20],[-4,4],[-1,21],[-7,-34],[2,-21],[-5,-7],[0,-18],[-5,-22],[-5,-50]],[[3056,4600],[-3,14],[0,19],[-4,22],[-2,250],[-1,124]],[[2904,3626],[2,0],[-1,0],[-1,0]],[[2933,3721],[-6,-80]],[[2927,3641],[-4,-3],[-8,-12]],[[2915,3626],[-6,-8],[0,31],[-2,13],[3,13],[-4,32],[-2,-14],[-6,3],[-2,35],[2,0],[0,45],[2,18],[-2,60],[3,36],[5,6],[0,37],[-3,-5],[0,-18],[-8,-25],[-2,-21],[0,-56],[-3,-26],[1,-44],[4,-30],[-1,-23],[3,-23],[-2,-16],[-6,30],[-10,15],[-2,29],[-6,-16],[-2,23],[5,29]],[[2874,3756],[2,30]],[[2874,3813],[-4,18],[-6,10],[0,28],[-3,15],[-4,4]],[[2857,3888],[-4,53],[-4,0],[-5,18],[-3,-15],[-5,1],[-1,-21],[-8,14],[-6,-28],[-3,6],[-6,-33],[-6,-17],[1,98]],[[2807,3964],[105,0]],[[3053,4565],[1,-34],[-1,-27],[-5,-25],[0,-29],[6,-4],[4,-31],[0,-24],[3,-6],[0,-22],[8,-19],[9,18],[-2,-26],[-13,-23],[-5,-1],[-3,18],[-5,-6],[0,-13],[-5,-9]],[[3045,4302],[-3,35]],[[3042,4337],[0,6]],[[3042,4343],[-3,14],[-2,45],[-4,0],[-8,-2]],[[2977,4408],[0,7],[6,126]],[[2983,4541],[23,-3]],[[3006,4538],[34,-7],[3,18],[7,19],[3,-3]],[[2598,4353],[5,25],[4,43],[4,26],[3,36],[1,52],[0,57],[-9,111],[3,42],[-2,50],[6,51],[2,43],[-1,23],[5,9],[0,31],[8,9],[5,34],[0,-69],[3,-3],[3,35],[1,58],[2,15],[8,9],[-3,41],[5,35],[7,2],[7,-22],[7,-3],[3,-28],[6,-2],[9,-25],[3,1],[4,-41],[-3,-21],[3,-29],[2,-32],[-2,-71],[-6,-18],[-1,-37],[-7,-12],[-4,-44],[2,-17],[6,-15],[6,24],[6,49],[10,19],[5,-15],[3,-27],[3,-80],[0,-39],[3,-48],[-3,-69],[-4,-11],[-1,25],[-3,-7],[-3,-58],[-6,-21],[-2,-44],[-7,-37],[0,-16]],[[2694,4347],[-39,-7]],[[2635,5110],[1,-23],[-4,-4],[1,33],[2,-6]],[[2496,5270],[11,20],[5,23],[12,9],[8,29],[4,1],[3,20],[9,28],[4,24],[7,15],[6,-13],[-11,-59],[-2,-19],[0,-36],[5,27],[10,-4],[8,-19],[7,-52],[3,-10],[7,9],[2,-12],[7,-6],[16,44],[8,4],[10,-2],[7,15],[6,1],[1,-54],[5,-7],[6,8],[2,-12],[4,16],[8,5],[1,-67],[3,-28],[6,-8],[1,19],[5,0],[3,-20],[-3,-14],[-15,12],[-8,-8],[-8,23],[-2,-21],[1,-18],[-4,4],[-5,27],[-9,15],[-5,1],[-4,-25],[-8,-6],[-8,5],[-3,-10],[-1,-21],[-9,-18],[1,25],[-4,5],[-2,-26],[-6,-1],[-3,-11],[-5,-45],[-8,-58],[1,-5]],[[2576,4989],[-4,20],[2,27],[-7,4],[3,26],[0,34],[-5,23],[-4,24],[-12,19],[-4,-7],[-12,29],[-29,38],[-3,33],[-5,11]],[[2541,5539],[-7,-24],[-4,-3],[1,19],[18,45],[-4,-31],[-4,-6]],[[2324,4685],[0,343],[-7,22],[-5,36],[8,41],[1,22]],[[2321,5149],[-1,76],[-4,20],[-2,42],[0,51],[-1,8],[-1,123],[-5,65],[-3,36],[0,77],[1,27],[-3,60]],[[2302,5734],[59,0],[0,73],[5,-2],[4,-14],[4,-100],[3,-11],[9,-3],[1,-10],[11,-4],[1,-21],[10,5],[0,9],[7,10],[6,-4],[8,-16],[2,-19],[4,2],[4,-43],[2,18],[7,8],[1,-18],[9,-12],[0,-17],[4,-14],[8,8],[5,18],[8,12],[2,-28],[5,6],[6,-6],[6,4],[8,-24],[7,4],[0,-10],[-10,-24],[-13,-19],[-9,-20],[-12,-49],[-5,-31],[-8,-34],[-13,-46],[2,-16]],[[2450,5296],[-2,9],[-6,-16],[0,-113],[-2,-11],[-8,-16],[-6,-41],[-1,-27],[3,-2],[4,-24],[-3,-29],[0,-33],[-2,-70],[8,-34],[6,-3],[3,-21],[8,-21],[2,-25],[8,-33],[5,-7],[5,-42],[-1,-30],[2,-22]],[[2553,2179],[-3,-8],[-7,4],[-3,12],[-7,-8],[-9,-22],[-3,-14]],[[2498,3062],[53,0],[7,0]],[[2524,3348],[-2,0],[-2,0],[1,-47],[-6,-48]],[[2376,3349],[0,95]],[[2356,4017],[-7,50],[-6,62]],[[2108,5151],[0,-181],[-1,0]],[[2107,4970],[-53,1],[-90,0],[-56,0],[0,-100]],[[1766,5734],[130,-1],[58,1],[154,0]],[[2108,5734],[0,-217],[0,-366]],[[2107,4208],[0,382]],[[2107,4590],[21,0],[49,-1],[88,0],[1,-10],[15,-34],[4,19],[4,-4],[13,0],[15,-36],[2,-27],[5,-5]],[[1823,4398],[0,-954]],[[1654,4398],[37,-1],[47,2]],[[3006,4538],[-2,14],[0,28],[3,11],[-1,27],[3,81],[5,37],[2,43],[3,16],[-1,47],[10,17],[5,33],[-3,31],[4,32],[0,18]],[[3034,4973],[4,49],[6,-5],[2,12]],[[3056,4600],[-3,-35]],[[2962,4152],[-5,-13],[-2,-29],[8,-14],[0,-22],[-3,-103],[-9,-76],[-6,-22],[-5,-48],[-3,31],[-8,16],[-10,42],[-1,28],[0,4],[2,11]],[[2922,3980],[8,15],[0,15],[9,31],[2,17],[-9,39],[0,24],[-3,6],[-1,22],[5,33],[-3,20],[7,40],[2,21],[4,13]],[[2943,4276],[13,-41],[9,-28],[-3,-55]],[[2137,3444],[0,-95]],[[2137,3349],[-1,0],[0,-474],[0,-193],[0,-192],[-101,0],[-1,-18],[3,-22]],[[2037,2450],[-48,0],[0,-87],[-24,0]],[[2972,4205],[13,-15],[2,11],[10,0],[6,6],[8,31],[1,-22],[5,-10],[-11,-28],[-22,-42],[-9,-8],[-6,2],[-5,-9],[-2,31]],[[2943,4276],[-2,14],[-4,1],[-5,32],[1,29],[-4,22],[-2,-2],[-3,27],[-125,0],[0,48],[0,3]],[[2799,4450],[17,54],[3,26],[5,18],[-2,32],[-2,7],[-2,52],[17,22],[15,-1],[6,-5],[6,-21],[4,8],[12,-1],[8,14],[8,34],[5,1],[0,52],[3,31],[-7,21],[2,24],[11,32],[4,28],[14,64],[13,32],[19,-5],[23,4]],[[2981,4973],[1,-39],[-2,-36],[3,-34],[-1,-37],[-3,-39],[2,-52],[-1,-16],[4,-31],[-1,-132],[0,-16]],[[2909,3359],[4,-77],[-8,8],[-1,-10],[-10,-11],[-1,-11],[-7,-3],[0,-13],[8,9],[1,-8],[9,9],[3,-18],[5,8],[2,-46],[-2,-22],[-3,-2],[-8,-47],[-9,-2],[-2,-33],[4,-32],[4,-6],[-6,-54],[-6,7],[-9,-6],[-6,-11],[-10,-37],[-7,-48],[-4,-60],[-6,13],[-11,-12]],[[2833,2844],[-32,181],[-32,4],[1,21],[-5,33],[-3,-12],[0,20],[-35,10],[-8,-8],[-6,-17],[-10,-13]],[[2669,3061],[1,45],[5,4],[3,31],[7,29],[7,1],[7,29],[8,10],[6,43],[4,13],[1,-19],[11,37],[5,-8],[4,36],[5,9],[1,45]],[[2744,3366],[20,-5],[19,-3],[23,-1],[103,2]],[[2321,5149],[-213,2]],[[2108,5734],[194,0]],[[2777,4138],[-4,-10],[2,-21],[0,-29],[-4,-46],[-3,-70],[-11,-62],[-3,-8],[-4,12],[-3,-27],[-3,1],[-4,-36],[1,-22],[-3,-18],[-4,29],[-5,-46],[1,-29],[-3,-11],[-1,-25],[-8,-4]],[[2694,4347],[11,-26],[3,-15],[3,14],[6,-30],[4,-9],[14,25],[7,-6],[9,36],[12,34],[14,24]],[[2777,4394],[0,-256]],[[2380,2803],[-11,21],[-3,22],[-7,18],[-2,-16],[-8,1],[-1,10],[-7,-19],[-3,11],[-6,-10],[-5,-29],[-2,17],[-6,14],[-7,0],[-2,21],[-7,-42],[-2,24],[-3,-8],[-3,16],[-7,15],[-5,-25],[-2,26],[-4,3],[-2,21],[-6,8],[-3,-18],[-3,16],[-5,-2],[-6,17],[-6,-2],[-2,36],[-9,2],[-4,-6],[-6,37],[-2,-3],[0,370],[-52,0],[-34,0]],[[1534,4399],[-4,22],[-2,61],[0,43],[-4,33],[3,32],[2,51],[4,54],[2,48],[3,162],[0,22],[3,71],[1,99],[-2,54],[1,32],[12,29]],[[1553,5212],[5,-22],[4,5],[3,2],[6,-20],[3,-23],[1,-57],[15,-21],[12,30],[8,3],[9,-10],[1,-13],[16,27],[3,-9],[9,5],[7,19],[12,17],[12,4],[4,12],[58,-1]],[[2807,3964],[-30,0],[0,174]],[[2777,4394],[5,11],[17,45]],[[3045,4302],[-6,-4],[3,39]],[[3042,4343],[-4,3],[-3,-28],[-1,-40],[-11,-9]],[[2833,2844],[-5,-10],[-6,-31],[-6,-49],[-1,-40],[-5,-31],[-6,0],[-2,-23],[-6,-25],[-4,-28],[-6,-11],[-6,-29],[-1,-14],[-6,-16],[-6,-40]],[[2107,4590],[0,380]],[[2687,3368],[57,-2]],[[2398,2049],[-5,-1],[-14,-26],[-6,15],[-1,31],[-3,-22],[-3,5],[-1,-27],[3,-11],[0,-36],[-5,-37],[-9,-47],[-17,-51],[-2,9],[-5,-13],[0,12],[-7,-9],[-3,24],[-2,-5],[7,-49],[-5,-16],[-5,10],[-1,-35],[-7,-35],[-6,-66],[-4,-69],[-3,5],[-1,-25],[3,6],[-2,-50],[-2,-2],[0,-28],[3,-16],[1,-57],[3,-20],[0,-37],[3,-32],[-9,-20],[-3,25],[-7,10],[-9,-3],[-8,32],[-5,3],[-5,25],[-6,8],[-4,24],[-2,58],[-5,34],[0,30],[-2,31],[1,27],[-4,30],[-3,4],[-5,27],[-1,34],[-5,32],[-6,26],[-3,57],[-2,16],[-4,46],[-1,38],[-4,27],[-6,24],[-1,16],[-6,15],[-4,42],[-13,9],[-7,-2],[-7,15],[-1,-20],[-7,-6],[-5,-40],[-3,-64],[-2,-1],[-4,-37],[-5,-1],[-7,29],[-17,47],[-4,25],[-6,24],[-5,54],[-1,49],[-4,40],[-2,35],[-3,22],[-11,32],[-6,44],[-4,15],[-6,38],[-7,20],[-5,50],[-4,11]],[[1908,4399],[0,-192],[57,0]],[[2981,4973],[30,-2],[23,2]],[[2927,3641],[-4,-32],[-3,-12],[-3,-44],[-6,-71],[-5,-15],[-1,27],[2,58],[8,74]],[[2874,3756],[-4,-8],[-2,-28],[1,-19],[8,6],[1,-31],[10,-12],[3,-24],[8,-26],[-4,-54],[4,-41],[-4,-20],[-1,-24],[4,-15],[-4,-23],[-6,30],[-1,-10],[5,-22],[14,-5],[3,-71]],[[2736,3547],[-1,-16],[4,-32],[5,-16],[4,1],[5,25],[4,-20],[7,11],[13,36],[1,-11],[5,17],[0,34],[4,30],[5,29],[2,34],[6,36],[2,44],[5,-27],[4,-8],[3,16],[6,68],[4,-17],[13,77],[2,57],[15,-64],[3,37]],[[1553,5212],[-5,7],[-4,-12],[-6,17],[1,26],[4,14],[-6,40],[-4,103],[-2,14],[-3,73],[-6,28],[-2,56],[3,38],[6,-18],[11,-24],[8,1],[8,-9],[8,9],[3,-16],[7,1],[5,-42],[3,3],[1,-56],[2,-52],[3,6],[-3,43],[1,43],[4,44],[-3,18],[-1,31],[-3,35],[2,25],[-2,29],[-5,4],[-4,22],[1,21],[163,0]],[[1576,5602],[4,9],[0,-39],[-5,15],[1,15]],[[1568,5655],[3,25],[4,-30],[-1,-27],[-7,8],[1,24]],[[2576,4989],[-1,-23],[-6,-4],[-4,-44],[-2,-30],[3,-6],[5,20],[4,38],[6,15],[5,48],[6,10],[-1,-25],[-4,-23],[-8,-79],[-2,-44],[0,-32],[-3,-10],[-2,-43],[1,-37],[-3,-24],[-3,-59],[0,-47],[4,-42],[-1,-55]],[[2450,5296],[6,-2],[20,33],[8,17],[2,-13],[-4,-25],[9,-33],[5,-3]]]};
	  Datamap.prototype.usgTopo = '__USG__';
	  Datamap.prototype.uzbTopo = '__UZB__';
	  Datamap.prototype.vatTopo = '__VAT__';
	  Datamap.prototype.vctTopo = '__VCT__';
	  Datamap.prototype.venTopo = '__VEN__';
	  Datamap.prototype.vgbTopo = '__VGB__';
	  Datamap.prototype.virTopo = '__VIR__';
	  Datamap.prototype.vnmTopo = '__VNM__';
	  Datamap.prototype.vutTopo = '__VUT__';
	  Datamap.prototype.wlfTopo = '__WLF__';
	  Datamap.prototype.wsbTopo = '__WSB__';
	  Datamap.prototype.wsmTopo = '__WSM__';
	  Datamap.prototype.yemTopo = '__YEM__';
	  Datamap.prototype.zafTopo = '__ZAF__';
	  Datamap.prototype.zmbTopo = '__ZMB__';
	  Datamap.prototype.zweTopo = '__ZWE__';
	
	  /**************************************
	                Utilities
	  ***************************************/
	
	  //convert lat/lng coords to X / Y coords
	  Datamap.prototype.latLngToXY = function(lat, lng) {
	     return this.projection([lng, lat]);
	  };
	
	  //add <g> layer to root SVG
	  Datamap.prototype.addLayer = function( className, id, first ) {
	    var layer;
	    if ( first ) {
	      layer = this.svg.insert('g', ':first-child')
	    }
	    else {
	      layer = this.svg.append('g')
	    }
	    return layer.attr('id', id || '')
	      .attr('class', className || '');
	  };
	
	  Datamap.prototype.updateChoropleth = function(data, options) {
	    var svg = this.svg;
	    var that = this;
	
	    // when options.reset = true, reset all the fill colors to the defaultFill and kill all data-info
	    if ( options && options.reset === true ) {
	      svg.selectAll('.datamaps-subunit')
	        .attr('data-info', function() {
	           return "{}"
	        })
	        .transition().style('fill', this.options.fills.defaultFill)
	    }
	
	    for ( var subunit in data ) {
	      if ( data.hasOwnProperty(subunit) ) {
	        var color;
	        var subunitData = data[subunit]
	        if ( ! subunit ) {
	          continue;
	        }
	        else if ( typeof subunitData === "string" ) {
	          color = subunitData;
	        }
	        else if ( typeof subunitData.color === "string" ) {
	          color = subunitData.color;
	        }
	        else if ( typeof subunitData.fillColor === "string" ) {
	          color = subunitData.fillColor;
	        }
	        else {
	          color = this.options.fills[ subunitData.fillKey ];
	        }
	        //if it's an object, overriding the previous data
	        if ( subunitData === Object(subunitData) ) {
	          this.options.data[subunit] = defaults(subunitData, this.options.data[subunit] || {});
	          var geo = this.svg.select('.' + subunit).attr('data-info', JSON.stringify(this.options.data[subunit]));
	        }
	        svg
	          .selectAll('.' + subunit)
	          .transition()
	            .style('fill', color);
	      }
	    }
	  };
	
	  Datamap.prototype.updatePopup = function (element, d, options) {
	    var self = this;
	    element.on('mousemove', null);
	    element.on('mousemove', function() {
	      var position = d3.mouse(self.options.element);
	      d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover')
	        .style('top', ( (position[1] + 30)) + "px")
	        .html(function() {
	          var data = JSON.parse(element.attr('data-info'));
	          try {
	            return options.popupTemplate(d, data);
	          } catch (e) {
	            return "";
	          }
	        })
	        .style('left', ( position[0]) + "px");
	    });
	
	    d3.select(self.svg[0][0].parentNode).select('.datamaps-hoverover').style('display', 'block');
	  };
	
	  Datamap.prototype.addPlugin = function( name, pluginFn ) {
	    var self = this;
	    if ( typeof Datamap.prototype[name] === "undefined" ) {
	      Datamap.prototype[name] = function(data, options, callback, createNewLayer) {
	        var layer;
	        if ( typeof createNewLayer === "undefined" ) {
	          createNewLayer = false;
	        }
	
	        if ( typeof options === 'function' ) {
	          callback = options;
	          options = undefined;
	        }
	
	        options = defaults(options || {}, self.options[name + 'Config']);
	
	        //add a single layer, reuse the old layer
	        if ( !createNewLayer && this.options[name + 'Layer'] ) {
	          layer = this.options[name + 'Layer'];
	          options = options || this.options[name + 'Options'];
	        }
	        else {
	          layer = this.addLayer(name);
	          this.options[name + 'Layer'] = layer;
	          this.options[name + 'Options'] = options;
	        }
	        pluginFn.apply(this, [layer, data, options]);
	        if ( callback ) {
	          callback(layer);
	        }
	      };
	    }
	  };
	
	  // expose library
	  if (true) {
	    d3 = __webpack_require__(238);
	    topojson = __webpack_require__(257);
	    module.exports = Datamap;
	  }
	  else if ( typeof define === "function" && define.amd ) {
	    define( "datamaps", ["require", "d3", "topojson"], function(require) {
	      d3 = require('d3');
	      topojson = require('topojson');
	
	      return Datamap;
	    });
	  }
	  else {
	    window.Datamap = window.Datamaps = Datamap;
	  }
	
	  if ( __webpack_provided_window_dot_jQuery ) {
	    __webpack_provided_window_dot_jQuery.fn.datamaps = function(options, callback) {
	      options = options || {};
	      options.element = this[0];
	      var datamap = new Datamap(options);
	      if ( typeof callback === "function" ) {
	        callback(datamap, options);
	      }
	      return this;
	    };
	  }
	})();
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 259 */
/***/ function(module, exports) {

	module.exports = "\n<!--Modal-->\n<div id=\"demographic-info-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"demographic-info-modal-label\"\n    aria-hidden=\"true\">\n    <div class=\"modal-dialog modal-less-lg\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">&times;</button>\n                <h3 id=\"demographic-info-modal-label\" class=\"modal-title\">Demographic Distribution Information</h3>\n            </div>\n            <div class=\"modal-body\">\n                <div id=\"demographic-info-modal-body\" :style=\"{height:modalBodyHeight}\"></div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>\n<!--Button-->\n<div v-show=\"courseId!=-1\" class=\"statisitc-icon\" @click=\"createMap()\" data-toggle=\"modal\" data-target=\"#demographic-info-modal\">\n    <span class=\"fa fa-globe\"></span>\n    <br/>Demographic Info\n</div>\n";

/***/ },
/* 260 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__webpack_require__(261)
	__vue_script__ = __webpack_require__(263)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\ToolListVideopopInfo.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(265)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 261 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(262);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(148)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListVideopopInfo.vue", function() {
				var newContent = require("!!./../../node_modules/css-loader/index.js!./../../node_modules/vue-loader/lib/style-rewriter.js!./../../node_modules/vue-loader/lib/selector.js?type=style&index=0!./ToolListVideopopInfo.vue");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 262 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", ""]);
	
	// exports


/***/ },
/* 263 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _nvd3BarChart = __webpack_require__(264);
	
	var _nvd3BarChart2 = _interopRequireDefault(_nvd3BarChart);
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//service
	exports.default = {
	    directives: {
	        nvd3barchart: _nvd3BarChart2.default
	    },
	    ready: function ready() {
	        var _this = this;
	
	        //select the modal then append it to the last of <body>
	        $(this.$el.nextElementSibling).appendTo("body");
	
	        (0, _communicator2.default)(this).onChangeCourse(function (courseId) {
	            _this.courseId = courseId;
	
	            _datamanager2.default.getHotness(courseId, function (response) {
	                _this.courseId = courseId;
	                _this.chartData = [{
	                    key: "Hotness",
	                    values: response.data.map(function (d, i) {
	                        return {
	                            "label": d.videoId,
	                            "value": d.pop,
	                            "color": "#428bca"
	                        };
	                    })
	                }];
	            });
	        });
	    },
	    data: function data() {
	        return {
	            courseId: -1,
	            chartData: null,
	            hotnessData: [],
	            modalBodyWidth: 768,
	            modalBodyHeight: 330,
	            chartConfig: {
	                type: 'discreteBarChart',
	                width: 768,
	                height: 300,
	                margin: {
	                    top: 20,
	                    right: 20,
	                    bottom: 60,
	                    left: 65
	                },
	                x: function x(d) {
	                    return d.label;
	                },
	                y: function y(d) {
	                    return d.value;
	                },
	                // showValues: true,
	                valueFormat: function valueFormat(d) {
	                    return d3.format(',.1f')(d / 1000) + "k";
	                },
	                duration: 500,
	                xAxis: {
	                    axisLabel: 'Video ID'
	                    // axisLabelDistance: 1
	                },
	                yAxis: {
	                    axisLabel: 'Popularity (#user)',
	                    axisLabelDistance: 20
	                }
	            }
	        };
	    },
	
	    methods: {}
	
	};
	
	// </script>
	//
	//
	// <style>
	//
	//
	// </style>
	/* generated by vue-loader */
	// <template>
	//
	//     <div id="videopop-info-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="videopop-info-modal-label"
	//     aria-hidden="true">
	//         <div class="modal-dialog modal-less-lg" role="document">
	//             <div class="modal-content">
	//                 <div class="modal-header">
	//                     <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
	//                     <h3 id="videopop-info-modal-label" class="modal-title">Video Popularity Information</h3>
	//                 </div>
	//
	//                 <div class="modal-body" :style="{height:modalBodyHeight + 'px'}">
	//                     <svg v-nvd3barchart="chartData" :config="chartConfig"></svg>
	//                 </div>
	//
	//                 <div class="modal-footer">
	//                     <button type="button" class="btn btn-default" data-dismiss="modal" aria-label="Close">Close</button>
	//                 </div>
	//             </div>
	//         </div>
	//     </div>
	//
	//     <!--Button-->
	//     <div v-show="courseId!=-1" class="statisitc-icon" data-toggle="modal" data-target="#videopop-info-modal">
	//         <span class="fa fa-bar-chart"></span>
	//         <br/>Popularity Info
	//     </div>
	//
	// </template>
	//
	//
	// <script>
	//directive
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _d = __webpack_require__(238);
	
	var _d2 = _interopRequireDefault(_d);
	
	var _nvd = __webpack_require__(242);
	
	var _nvd2 = _interopRequireDefault(_nvd);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    params: ['config'],
	    update: function update(newVal, oldVal) {
	        if (!newVal) return;
	
	        var config = this.params.config;
	        if (!config) return;
	
	        var chart = _nvd2.default.models.discreteBarChart().width(config.width).height(config.height).margin(config.margin).x(config.x) //Specify the data accessors.
	        .y(config.y).valueFormat(config.valueFormat).duration(config.duration).showXAxis(newVal[0].values.length > 100 ? false : true);
	
	        chart.xAxis.axisLabel(config.xAxis.axisLabel);
	        chart.yAxis.axisLabel(config.yAxis.axisLabel).axisLabelDistance(config.yAxis.axisLabelDistance);
	
	        _d2.default.select(this.el).selectAll("*").remove();
	
	        _d2.default.select(this.el).datum(newVal).transition().duration(1000).call(chart);
	
	        _nvd2.default.utils.windowResize(chart.update);
	    }
	};

/***/ },
/* 265 */
/***/ function(module, exports) {

	module.exports = "\n\n<div id=\"videopop-info-modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"videopop-info-modal-label\"\naria-hidden=\"true\">\n    <div class=\"modal-dialog modal-less-lg\" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">&times;</button>\n                <h3 id=\"videopop-info-modal-label\" class=\"modal-title\">Video Popularity Information</h3>\n            </div>\n            \n            <div class=\"modal-body\" :style=\"{height:modalBodyHeight + 'px'}\">\n                <svg v-nvd3barchart=\"chartData\" :config=\"chartConfig\"></svg>\n            </div>\n            \n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" aria-label=\"Close\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!--Button-->\n<div v-show=\"courseId!=-1\" class=\"statisitc-icon\" data-toggle=\"modal\" data-target=\"#videopop-info-modal\">\n    <span class=\"fa fa-bar-chart\"></span>\n    <br/>Popularity Info\n</div>\n\n";

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	var __vue_script__, __vue_template__
	var __vue_styles__ = {}
	__vue_script__ = __webpack_require__(267)
	if (__vue_script__ &&
	    __vue_script__.__esModule &&
	    Object.keys(__vue_script__).length > 1) {
	  console.warn("[vue-loader] src\\components\\ToolListTemporalInfo.vue: named exports in *.vue files are ignored.")}
	__vue_template__ = __webpack_require__(272)
	module.exports = __vue_script__ || {}
	if (module.exports.__esModule) module.exports = module.exports.default
	var __vue_options__ = typeof module.exports === "function" ? (module.exports.options || (module.exports.options = {})) : module.exports
	if (__vue_template__) {
	__vue_options__.template = __vue_template__
	}
	if (!__vue_options__.computed) __vue_options__.computed = {}
	Object.keys(__vue_styles__).forEach(function (key) {
	var module = __vue_styles__[key]
	__vue_options__.computed[key] = function () { return module }
	})


/***/ },
/* 267 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function($) {'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	__webpack_require__(268);
	
	var _calHeatmap = __webpack_require__(270);
	
	var _calHeatmap2 = _interopRequireDefault(_calHeatmap);
	
	var _datamanager = __webpack_require__(152);
	
	var _datamanager2 = _interopRequireDefault(_datamanager);
	
	var _communicator = __webpack_require__(222);
	
	var _communicator2 = _interopRequireDefault(_communicator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	//service
	// <template>
	//
	//     <div id="temporal-info-modal" class="modal fade"  tabindex="-1" role="dialog" aria-labelledby="temporal-info-modal-label"
	//     aria-hidden="true">
	//         <div class="modal-dialog " role="document">
	//             <div class="modal-content">
	//                 <div class="modal-header">
	//                     <button type="button" class="close" data-dismiss="modal" aria-label="Close">&times;</button>
	//                     <h3 id="temporal-info-modal-label" class="modal-title">Video Temporal Hotness</h3>
	//                 </div>
	//
	//                 <div class="modal-body">
	//                     <div v-cal-heatmap="hotnessData.hotness" 
	//                     :start-date="hotnessData.startDate" 
	//                     :end-date="hotnessData.endDate"
	//                     style="width:100%; height: 250px; ">
	//                     </div>
	//                     <hr>
	//                     <!--TODO here, privide the filter of byWeek and byAny days-->
	//                     <div>
	//                         <div class="sliderExample">
	//                             <a name="ex1"></a>
	//                             <strong>week {{vals.week}}</strong>
	//                             <div ui-slider="slider.optionsWeek" min="1" max="{{weekRange}}" ng-model="vals.week" style="margin-top:15px"></div>
	//                         </div>
	//
	//                         <hr>
	//
	//                         <div class="sliderExample">
	//                             <a name="ex6"></a>
	//                             <strong style="margin-bottom: 15px">from day {{vals.range[0]}} to day {{vals.range[1]}}</strong>
	//                             <div ui-slider="slider.optionsRange" min="1" max="{{dayRange}}" ng-model="vals.range" style="margin-top:15px"></div>
	//                         </div>
	//                     </div>
	//                     <!--TODO above, privide the filter of byWeek and byAny days-->
	//                 </div>
	//
	//                 <div class="modal-footer">
	//                     <button type="button" class="btn btn-default" data-dismiss="modal" aria-label="Close">Close</button>
	//                 </div>
	//             </div>
	//         </div>
	//     </div>
	//
	//     <!--Button-->
	//     <div v-show="hotnessData.hotness" class="statisitc-icon" data-toggle="modal" data-target="#temporal-info-modal">
	//         <span class="fa fa-calendar"></span>
	//         <br/>Temporal Info
	//     </div>
	//
	// </template>
	//
	//
	// <script>
	exports.default = {
	    directives: {
	        calHeatmap: _calHeatmap2.default
	    },
	    ready: function ready() {
	        var _this = this;
	
	        //select the modal then append it to the last of <body>
	        $("#temporal-info-modal").appendTo("body");
	
	        (0, _communicator2.default)(this).onChangeCourse(function (courseId) {
	            _this.courseId = courseId;
	        });
	        (0, _communicator2.default)(this).onChangeVideo(function (videoInfo) {
	            _this.videoId = videoInfo.videoId;
	            _datamanager2.default.getDailyHotnessByVideo(_this.courseId, _this.videoId, function (response) {
	                _this.hotnessData = response.data;
	                _this.dayRange = Math.ceil((_this.hotnessData.endDate - _this.hotnessData.startDate) / 1000 / 3600 / 24 + 1);
	                _this.weekRange = Math.ceil((_this.hotnessData.endDate - _this.hotnessData.startDate) / 1000 / 3600 / 24 / 7 + 1);
	            });
	        });
	    },
	    data: function data() {
	        return {
	            videoId: -1,
	            courseId: -1,
	            hotnessData: { startDate: "", endDate: "", hotness: null },
	            sliderConfig: {
	                'optionsRange': {
	                    start: function start(event, ui) {},
	                    stop: function stop(event, ui) {
	                        (0, _communicator2.default)(this).emitFilterDate({
	                            startDate: this.hotnessData.startDate + 24 * 3600 * 1000 * this.vals.range[0],
	                            endDate: this.hotnessData.startDate + 24 * 3600 * 1000 * this.vals.range[1]
	                        });
	                    },
	                    range: 'max'
	                },
	                'optionsWeek': {
	                    start: function start(event, ui) {},
	                    stop: function stop(event, ui) {
	                        (0, _communicator2.default)(this).emitFilterDate({
	                            startDate: this.hotnessData.startDate + 7 * 24 * 3600 * 1000 * (this.vals.week - 1),
	                            endDate: this.hotnessData.startDate + 7 * 24 * 3600 * 1000 * this.vals.week
	                        });
	                    }
	                }
	            },
	            vals: {
	                range: [1, 1],
	                week: 1
	            }
	        };
	    },
	
	    methods: {
	        filterByDate: function filterByDate(date) {
	            (0, _communicator2.default)(this).emitFilterDate({
	                startDate: date.getTime(),
	                endDate: date.getTime() + 24 * 3600 * 1000
	            });
	        }
	    }
	};
	
	// </script>
	/* generated by vue-loader */


	//directive
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(86)))

/***/ },
/* 268 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(269);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(120)(content, {});
	if(content.locals) module.exports = content.locals;
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		if(!content.locals) {
			module.hot.accept("!!./../css-loader/index.js!./cal-heatmap.css", function() {
				var newContent = require("!!./../css-loader/index.js!./cal-heatmap.css");
				if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
				update(newContent);
			});
		}
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 269 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(114)();
	// imports
	
	
	// module
	exports.push([module.id, "/* Cal-HeatMap CSS */\n\n.cal-heatmap-container {\n\tdisplay: block;\n}\n\n.cal-heatmap-container .graph\n{\n\tfont-family: \"Lucida Grande\", Lucida, Verdana, sans-serif;\n}\n\n.cal-heatmap-container .graph-label\n{\n\tfill: #999;\n\tfont-size: 10px\n}\n\n.cal-heatmap-container .graph, .cal-heatmap-container .graph-legend rect {\n\tshape-rendering: crispedges\n}\n\n.cal-heatmap-container .graph-rect\n{\n\tfill: #ededed\n}\n\n.cal-heatmap-container .graph-subdomain-group rect:hover\n{\n\tstroke: #000;\n\tstroke-width: 1px\n}\n\n.cal-heatmap-container .subdomain-text {\n\tfont-size: 8px;\n\tfill: #999;\n\tpointer-events: none\n}\n\n.cal-heatmap-container .hover_cursor:hover {\n\tcursor: pointer\n}\n\n.cal-heatmap-container .qi {\n\tbackground-color: #999;\n\tfill: #999\n}\n\n/*\nRemove comment to apply this style to date with value equal to 0\n.q0\n{\n\tbackground-color: #fff;\n\tfill: #fff;\n\tstroke: #ededed\n}\n*/\n\n.cal-heatmap-container .q1\n{\n\tbackground-color: #dae289;\n\tfill: #dae289\n}\n\n.cal-heatmap-container .q2\n{\n\tbackground-color: #cedb9c;\n\tfill: #9cc069\n}\n\n.cal-heatmap-container .q3\n{\n\tbackground-color: #b5cf6b;\n\tfill: #669d45\n}\n\n.cal-heatmap-container .q4\n{\n\tbackground-color: #637939;\n\tfill: #637939\n}\n\n.cal-heatmap-container .q5\n{\n\tbackground-color: #3b6427;\n\tfill: #3b6427\n}\n\n.cal-heatmap-container rect.highlight\n{\n\tstroke:#444;\n\tstroke-width:1\n}\n\n.cal-heatmap-container text.highlight\n{\n\tfill: #444\n}\n\n.cal-heatmap-container rect.highlight-now\n{\n\tstroke: red\n}\n\n.cal-heatmap-container text.highlight-now\n{\n\tfill: red;\n\tfont-weight: 800\n}\n\n.cal-heatmap-container .domain-background {\n\tfill: none;\n\tshape-rendering: crispedges\n}\n\n.ch-tooltip {\n\tpadding: 10px;\n\tbackground: #222;\n\tcolor: #bbb;\n\tfont-size: 12px;\n\tline-height: 1.4;\n\twidth: 140px;\n\tposition: absolute;\n\tz-index: 99999;\n\ttext-align: center;\n\tborder-radius: 2px;\n\tbox-shadow: 2px 2px 2px rgba(0,0,0,0.2);\n\tdisplay: none;\n\tbox-sizing: border-box;\n}\n\n.ch-tooltip::after{\n\tposition: absolute;\n\twidth: 0;\n\theight: 0;\n\tborder-color: transparent;\n\tborder-style: solid;\n\tcontent: \"\";\n\tpadding: 0;\n\tdisplay: block;\n\tbottom: -6px;\n\tleft: 50%;\n\tmargin-left: -6px;\n    border-width: 6px 6px 0;\n    border-top-color: #222;\n}\n", ""]);
	
	// exports


/***/ },
/* 270 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _d = __webpack_require__(238);
	
	var _d2 = _interopRequireDefault(_d);
	
	var _calHeatmap = __webpack_require__(271);
	
	var _calHeatmap2 = _interopRequireDefault(_calHeatmap);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = {
	    params: ['config', 'start-date', 'end-date'],
	    bind: function bind() {
	
	        this.parser = function (data) {
	            var stats = {};
	            for (var i = 0, len = data.length; i < len; ++i) {
	                stats[data[i].date * 0.001] = data[i].value;
	            }
	            return stats;
	        };
	    },
	    update: function update(newVal, oldVal) {
	        if (!newVal) return;
	        var self = this;
	        var startDateD = new Date(+this.params.startDate);
	        var endDateD = new Date(+this.params.endDate);
	        var range = endDateD.getMonth() - startDateD.getMonth() + 1;
	        range = Math.max(range, 5);
	        var data = this.parser(newVal);
	
	        if (this.cal) this.cal.destroy();
	        this.cal = new _calHeatmap2.default();
	        this.cal.init({
	            data: data,
	            itemSelector: this.el,
	            start: startDateD,
	            range: range,
	            domain: "month",
	            subDomain: "day",
	            cellSize: 19.2,
	            onClick: function onClick(date, count) {
	                self.vm.filterByDate(date);
	            }
	        });
	    }
	};

/***/ },
/* 271 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*! cal-heatmap v3.6.2 (Mon Oct 10 2016 01:36:42)
	 *  ---------------------------------------------
	 *  Cal-Heatmap is a javascript module to create calendar heatmap to visualize time series data
	 *  https://github.com/wa0x6e/cal-heatmap
	 *  Licensed under the MIT license
	 *  Copyright 2014 Wan Qi Chen
	 */
	function mergeRecursive(a,b){"use strict";for(var c in b)try{b[c].constructor===Object?a[c]=mergeRecursive(a[c],b[c]):a[c]=b[c]}catch(d){a[c]=b[c]}return a}function arrayEquals(a,b){"use strict";if(!b||!a)return!1;if(a.length!==b.length)return!1;for(var c=0;c<a.length;c++)if(a[c]instanceof Array&&b[c]instanceof Array){if(!arrayEquals(a[c],b[c]))return!1}else if(a[c]!==b[c])return!1;return!0}var d3= true?__webpack_require__(238):window.d3,CalHeatMap=function(){"use strict";function a(){d.verticalDomainLabel="top"===d.options.label.position||"bottom"===d.options.label.position,d.domainVerticalLabelHeight=null===d.options.label.height?Math.max(25,2*d.options.cellSize):d.options.label.height,d.domainHorizontalLabelWidth=0,""===d.options.domainLabelFormat&&null===d.options.label.height&&(d.domainVerticalLabelHeight=0),d.verticalDomainLabel||(d.domainVerticalLabelHeight=0,d.domainHorizontalLabelWidth=d.options.label.width),d.paint(),d.options.nextSelector!==!1&&d3.select(d.options.nextSelector).on("click."+d.options.itemNamespace,function(){return d3.event.preventDefault(),d.loadNextDomain(1)}),d.options.previousSelector!==!1&&d3.select(d.options.previousSelector).on("click."+d.options.itemNamespace,function(){return d3.event.preventDefault(),d.loadPreviousDomain(1)}),d.Legend.redraw(d.graphDim.width-d.options.domainGutter-d.options.cellPadding),d.afterLoad();var a=d.getDomainKeys();d.options.loadOnInit?d.getDatas(d.options.data,new Date(a[0]),d.getSubDomain(a[a.length-1]).pop(),function(){d.fill(),d.onComplete()}):d.onComplete(),d.checkIfMinDomainIsReached(a[0]),d.checkIfMaxDomainIsReached(d.getNextDomain().getTime())}function b(a,b){var c=d.options.cellSize*d._domainType[d.options.subDomain].column(a)+d.options.cellPadding*d._domainType[d.options.subDomain].column(a);return 2===arguments.length&&b===!0?c+=d.domainHorizontalLabelWidth+d.options.domainGutter+d.options.domainMargin[1]+d.options.domainMargin[3]:c}function c(a,b){var c=d.options.cellSize*d._domainType[d.options.subDomain].row(a)+d.options.cellPadding*d._domainType[d.options.subDomain].row(a);return 2===arguments.length&&b===!0&&(c+=d.options.domainGutter+d.domainVerticalLabelHeight+d.options.domainMargin[0]+d.options.domainMargin[2]),c}var d=this;this.allowedDataType=["json","csv","tsv","txt"],this.options={itemSelector:"#cal-heatmap",paintOnLoad:!0,range:12,cellSize:10,cellPadding:2,cellRadius:0,domainGutter:2,domainMargin:[0,0,0,0],domain:"hour",subDomain:"min",colLimit:null,rowLimit:null,weekStartOnMonday:!0,start:new Date,minDate:null,maxDate:null,data:"",dataType:this.allowedDataType[0],dataPostPayload:null,considerMissingDataAsZero:!1,loadOnInit:!0,verticalOrientation:!1,domainDynamicDimension:!0,label:{position:"bottom",align:"center",offset:{x:0,y:0},rotate:null,width:100,height:null},legend:[10,20,30,40],displayLegend:!0,legendCellSize:10,legendCellPadding:2,legendMargin:[0,0,0,0],legendVerticalPosition:"bottom",legendHorizontalPosition:"left",legendOrientation:"horizontal",legendColors:null,highlight:[],itemName:["item","items"],domainLabelFormat:null,subDomainTitleFormat:{empty:"{date}",filled:"{count} {name} {connector} {date}"},subDomainDateFormat:null,subDomainTextFormat:null,legendTitleFormat:{lower:"less than {min} {name}",inner:"between {down} and {up} {name}",upper:"more than {max} {name}"},animationDuration:500,nextSelector:!1,previousSelector:!1,itemNamespace:"cal-heatmap",tooltip:!1,onClick:null,afterLoad:null,afterLoadNextDomain:null,afterLoadPreviousDomain:null,onComplete:null,afterLoadData:function(a){return a},onMaxDomainReached:null,onMinDomainReached:null},this._domainType={min:{name:"minute",level:10,maxItemNumber:60,defaultRowNumber:10,defaultColumnNumber:6,row:function(a){return d.getSubDomainRowNumber(a)},column:function(a){return d.getSubDomainColumnNumber(a)},position:{x:function(a){return Math.floor(a.getMinutes()/d._domainType.min.row(a))},y:function(a){return a.getMinutes()%d._domainType.min.row(a)}},format:{date:"%H:%M, %A %B %-e, %Y",legend:"",connector:"at"},extractUnit:function(a){return new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours(),a.getMinutes()).getTime()}},hour:{name:"hour",level:20,maxItemNumber:function(a){switch(d.options.domain){case"day":return 24;case"week":return 168;case"month":return 24*(d.options.domainDynamicDimension?d.getDayCountInMonth(a):31)}},defaultRowNumber:6,defaultColumnNumber:function(a){switch(d.options.domain){case"day":return 4;case"week":return 28;case"month":return d.options.domainDynamicDimension?d.getDayCountInMonth(a):31}},row:function(a){return d.getSubDomainRowNumber(a)},column:function(a){return d.getSubDomainColumnNumber(a)},position:{x:function(a){return"month"===d.options.domain?d.options.colLimit>0||d.options.rowLimit>0?Math.floor((a.getHours()+24*(a.getDate()-1))/d._domainType.hour.row(a)):Math.floor(a.getHours()/d._domainType.hour.row(a))+4*(a.getDate()-1):"week"===d.options.domain?d.options.colLimit>0||d.options.rowLimit>0?Math.floor((a.getHours()+24*d.getWeekDay(a))/d._domainType.hour.row(a)):Math.floor(a.getHours()/d._domainType.hour.row(a))+4*d.getWeekDay(a):Math.floor(a.getHours()/d._domainType.hour.row(a))},y:function(a){var b=a.getHours();if(d.options.colLimit>0||d.options.rowLimit>0)switch(d.options.domain){case"month":b+=24*(a.getDate()-1);break;case"week":b+=24*d.getWeekDay(a)}return Math.floor(b%d._domainType.hour.row(a))}},format:{date:"%Hh, %A %B %-e, %Y",legend:"%H:00",connector:"at"},extractUnit:function(a){return new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours()).getTime()}},day:{name:"day",level:30,maxItemNumber:function(a){switch(d.options.domain){case"week":return 7;case"month":return d.options.domainDynamicDimension?d.getDayCountInMonth(a):31;case"year":return d.options.domainDynamicDimension?d.getDayCountInYear(a):366}},defaultColumnNumber:function(a){switch(a=new Date(a),d.options.domain){case"week":return 1;case"month":return d.options.domainDynamicDimension&&!d.options.verticalOrientation?d.getWeekNumber(new Date(a.getFullYear(),a.getMonth()+1,0))-d.getWeekNumber(a)+1:6;case"year":return d.options.domainDynamicDimension?d.getWeekNumber(new Date(a.getFullYear(),11,31))-d.getWeekNumber(new Date(a.getFullYear(),0))+1:54}},defaultRowNumber:7,row:function(a){return d.getSubDomainRowNumber(a)},column:function(a){return d.getSubDomainColumnNumber(a)},position:{x:function(a){switch(d.options.domain){case"week":return Math.floor(d.getWeekDay(a)/d._domainType.day.row(a));case"month":return d.options.colLimit>0||d.options.rowLimit>0?Math.floor((a.getDate()-1)/d._domainType.day.row(a)):d.getWeekNumber(a)-d.getWeekNumber(new Date(a.getFullYear(),a.getMonth()));case"year":return d.options.colLimit>0||d.options.rowLimit>0?Math.floor((d.getDayOfYear(a)-1)/d._domainType.day.row(a)):d.getWeekNumber(a)}},y:function(a){var b=d.getWeekDay(a);if(d.options.colLimit>0||d.options.rowLimit>0)switch(d.options.domain){case"year":b=d.getDayOfYear(a)-1;break;case"week":b=d.getWeekDay(a);break;case"month":b=a.getDate()-1}return Math.floor(b%d._domainType.day.row(a))}},format:{date:"%A %B %-e, %Y",legend:"%e %b",connector:"on"},extractUnit:function(a){return new Date(a.getFullYear(),a.getMonth(),a.getDate()).getTime()}},week:{name:"week",level:40,maxItemNumber:54,defaultColumnNumber:function(a){switch(a=new Date(a),d.options.domain){case"year":return d._domainType.week.maxItemNumber;case"month":return d.options.domainDynamicDimension?d.getWeekNumber(new Date(a.getFullYear(),a.getMonth()+1,0))-d.getWeekNumber(a):5}},defaultRowNumber:1,row:function(a){return d.getSubDomainRowNumber(a)},column:function(a){return d.getSubDomainColumnNumber(a)},position:{x:function(a){switch(d.options.domain){case"year":return Math.floor(d.getWeekNumber(a)/d._domainType.week.row(a));case"month":return Math.floor(d.getMonthWeekNumber(a)/d._domainType.week.row(a))}},y:function(a){return d.getWeekNumber(a)%d._domainType.week.row(a)}},format:{date:"%B Week #%W",legend:"%B Week #%W",connector:"in"},extractUnit:function(a){var b=new Date(a.getFullYear(),a.getMonth(),a.getDate()),c=b.getDay()-(d.options.weekStartOnMonday?1:0);return c<0&&(c=6),b.setDate(b.getDate()-c),b.getTime()}},month:{name:"month",level:50,maxItemNumber:12,defaultColumnNumber:12,defaultRowNumber:1,row:function(){return d.getSubDomainRowNumber()},column:function(){return d.getSubDomainColumnNumber()},position:{x:function(a){return Math.floor(a.getMonth()/d._domainType.month.row(a))},y:function(a){return a.getMonth()%d._domainType.month.row(a)}},format:{date:"%B %Y",legend:"%B",connector:"in"},extractUnit:function(a){return new Date(a.getFullYear(),a.getMonth()).getTime()}},year:{name:"year",level:60,row:function(){return d.options.rowLimit||1},column:function(){return d.options.colLimit||1},position:{x:function(){return 1},y:function(){return 1}},format:{date:"%Y",legend:"%Y",connector:"in"},extractUnit:function(a){return new Date(a.getFullYear()).getTime()}}};for(var e in this._domainType)if(this._domainType.hasOwnProperty(e)){var f=this._domainType[e];this._domainType["x_"+e]={name:"x_"+e,level:f.type,maxItemNumber:f.maxItemNumber,defaultRowNumber:f.defaultRowNumber,defaultColumnNumber:f.defaultColumnNumber,row:f.column,column:f.row,position:{x:f.position.y,y:f.position.x},format:f.format,extractUnit:f.extractUnit}}this.lastInsertedSvg=null,this._completed=!1,this._domains=d3.map(),this.graphDim={width:0,height:0},this.legendDim={width:0,height:0},this.NAVIGATE_LEFT=1,this.NAVIGATE_RIGHT=2,this.RESET_ALL_ON_UPDATE=0,this.RESET_SINGLE_ON_UPDATE=1,this.APPEND_ON_UPDATE=2,this.DEFAULT_LEGEND_MARGIN=10,this.root=null,this.tooltip=null,this._maxDomainReached=!1,this._minDomainReached=!1,this.domainPosition=new DomainPosition,this.Legend=null,this.legendScale=null,this.DSTDomain=[],this._init=function(){return d.getDomain(d.options.start).map(function(a){return a.getTime()}).map(function(a){d._domains.set(a,d.getSubDomain(a).map(function(a){return{t:d._domainType[d.options.subDomain].extractUnit(a),v:null}}))}),d.root=d3.select(d.options.itemSelector).append("svg").attr("class","cal-heatmap-container"),d.tooltip=d3.select(d.options.itemSelector).attr("style",function(){var a=d3.select(d.options.itemSelector).attr("style");return(null!==a?a:"")+"position:relative;"}).append("div").attr("class","ch-tooltip"),d.root.attr("x",0).attr("y",0).append("svg").attr("class","graph"),d.Legend=new Legend(d),d.options.paintOnLoad&&a(),!0},this.paint=function(a){function e(b,c,e,f){var g=0;switch(a){case!1:return g=c[e],c[e]+=f,d.domainPosition.setPosition(b,g),g;case d.NAVIGATE_RIGHT:return d.domainPosition.setPosition(b,c[e]),i=f,j=d.domainPosition.getPositionFromIndex(1),d.domainPosition.shiftRightBy(j),c[e];case d.NAVIGATE_LEFT:return g=-f,i=-g,j=c[e]-d.domainPosition.getLast(),d.domainPosition.setPosition(b,g),d.domainPosition.shiftLeftBy(i),g}}function f(a){switch(g.label.rotate){case"right":a.attr("transform",function(a){var c="rotate(90), ";switch(g.label.position){case"right":c+="translate(-"+b(a)+" , -"+b(a)+")";break;case"left":c+="translate(0, -"+d.domainHorizontalLabelWidth+")"}return c});break;case"left":a.attr("transform",function(a){var c="rotate(270), ";switch(g.label.position){case"right":c+="translate(-"+(b(a)+d.domainHorizontalLabelWidth)+" , "+b(a)+")";break;case"left":c+="translate(-"+d.domainHorizontalLabelWidth+" , "+d.domainHorizontalLabelWidth+")"}return c})}}var g=d.options;0===arguments.length&&(a=!1);var h=d.root.select(".graph").selectAll(".graph-domain").data(function(){var b=d.getDomainKeys();return a===d.NAVIGATE_LEFT?b.reverse():b},function(a){return a}),i=0,j=0,k=h.enter().append("svg").attr("width",function(a){return b(a,!0)}).attr("height",function(a){return c(a,!0)}).attr("x",function(a){return g.verticalOrientation?(d.graphDim.width=Math.max(d.graphDim.width,b(a,!0)),0):e(a,d.graphDim,"width",b(a,!0))}).attr("y",function(a){return g.verticalOrientation?e(a,d.graphDim,"height",c(a,!0)):(d.graphDim.height=Math.max(d.graphDim.height,c(a,!0)),0)}).attr("class",function(a){var b="graph-domain",c=new Date(a);switch(g.domain){case"hour":b+=" h_"+c.getHours();case"day":b+=" d_"+c.getDate()+" dy_"+c.getDay();case"week":b+=" w_"+d.getWeekNumber(c);case"month":b+=" m_"+(c.getMonth()+1);case"year":b+=" y_"+c.getFullYear()}return b});d.lastInsertedSvg=k,k.append("rect").attr("width",function(a){return b(a,!0)-g.domainGutter-g.cellPadding}).attr("height",function(a){return c(a,!0)-g.domainGutter-g.cellPadding}).attr("class","domain-background");var l=k.append("svg").attr("x",function(){return"left"===g.label.position?d.domainHorizontalLabelWidth+g.domainMargin[3]:g.domainMargin[3]}).attr("y",function(){return"top"===g.label.position?d.domainVerticalLabelHeight+g.domainMargin[0]:g.domainMargin[0]}).attr("class","graph-subdomain-group"),m=l.selectAll("g").data(function(a){return d._domains.get(a)}).enter().append("g");m.append("rect").attr("class",function(a){return"graph-rect"+d.getHighlightClassName(a.t)+(null!==g.onClick?" hover_cursor":"")}).attr("width",g.cellSize).attr("height",g.cellSize).attr("x",function(a){return d.positionSubDomainX(a.t)}).attr("y",function(a){return d.positionSubDomainY(a.t)}).on("click",function(a){if(null!==g.onClick)return d.onClick(new Date(a.t),a.v)}).call(function(a){g.cellRadius>0&&a.attr("rx",g.cellRadius).attr("ry",g.cellRadius),null!==d.legendScale&&null!==g.legendColors&&g.legendColors.hasOwnProperty("base")&&a.attr("fill",g.legendColors.base),g.tooltip&&(a.on("mouseover",function(a){var b=this.parentNode.parentNode;d.tooltip.html(d.getSubDomainTitle(a)).attr("style","display: block;");var c=d.positionSubDomainX(a.t)-d.tooltip[0][0].offsetWidth/2+g.cellSize/2,e=d.positionSubDomainY(a.t)-d.tooltip[0][0].offsetHeight-g.cellSize/2;c+=parseInt(b.getAttribute("x"),10),e+=parseInt(b.getAttribute("y"),10),c+=parseInt(d.root.select(".graph").attr("x"),10),e+=parseInt(d.root.select(".graph").attr("y"),10),c+=parseInt(b.parentNode.getAttribute("x"),10),e+=parseInt(b.parentNode.getAttribute("y"),10),d.tooltip.attr("style","display: block; left: "+c+"px; top: "+e+"px;")}),a.on("mouseout",function(){d.tooltip.attr("style","display:none").html("")}))}),g.tooltip||m.append("title").text(function(a){return d.formatDate(new Date(a.t),g.subDomainDateFormat)}),""!==g.domainLabelFormat&&k.append("text").attr("class","graph-label").attr("y",function(a){var b=g.domainMargin[0];switch(g.label.position){case"top":b+=d.domainVerticalLabelHeight/2;break;case"bottom":b+=c(a)+d.domainVerticalLabelHeight/2}return b+g.label.offset.y*("right"===g.label.rotate&&"right"===g.label.position||"left"===g.label.rotate&&"left"===g.label.position?-1:1)}).attr("x",function(a){var c=g.domainMargin[3];switch(g.label.position){case"right":c+=b(a);break;case"bottom":case"top":c+=b(a)/2}return"right"===g.label.align?c+d.domainHorizontalLabelWidth-g.label.offset.x*("right"===g.label.rotate?-1:1):c+g.label.offset.x}).attr("text-anchor",function(){switch(g.label.align){case"start":case"left":return"start";case"end":case"right":return"end";default:return"middle"}}).attr("dominant-baseline",function(){return d.verticalDomainLabel?"middle":"top"}).text(function(a){return d.formatDate(new Date(a),g.domainLabelFormat)}).call(f),null!==g.subDomainTextFormat&&m.append("text").attr("class",function(a){return"subdomain-text"+d.getHighlightClassName(a.t)}).attr("x",function(a){return d.positionSubDomainX(a.t)+g.cellSize/2}).attr("y",function(a){return d.positionSubDomainY(a.t)+g.cellSize/2}).attr("text-anchor","middle").attr("dominant-baseline","central").text(function(a){return d.formatDate(new Date(a.t),g.subDomainTextFormat)}),a!==!1&&h.transition().duration(g.animationDuration).attr("x",function(a){return g.verticalOrientation?0:d.domainPosition.getPosition(a)}).attr("y",function(a){return g.verticalOrientation?d.domainPosition.getPosition(a):0});var n=d.graphDim.width,o=d.graphDim.height;g.verticalOrientation?d.graphDim.height+=i-j:d.graphDim.width+=i-j,h.exit().transition().duration(g.animationDuration).attr("x",function(c){if(g.verticalOrientation)return 0;switch(a){case d.NAVIGATE_LEFT:return Math.min(d.graphDim.width,n);case d.NAVIGATE_RIGHT:return-b(c,!0)}}).attr("y",function(b){if(!g.verticalOrientation)return 0;switch(a){case d.NAVIGATE_LEFT:return Math.min(d.graphDim.height,o);case d.NAVIGATE_RIGHT:return-c(b,!0)}}).remove(),d.resize()}};CalHeatMap.prototype={init:function(a){"use strict";function b(a,b,c){if((b&&a===!1||a instanceof Element||"string"==typeof a)&&""!==a)return!0;throw new Error("The "+c+" is not valid")}function c(a){switch(a){case"year":return"month";case"month":return"day";case"week":return"day";case"day":return"hour";default:return"min"}}function d(){if(!k._domainType.hasOwnProperty(l.domain)||"min"===l.domain||"x_"===l.domain.substring(0,2))throw new Error("The domain '"+l.domain+"' is not valid");if(!k._domainType.hasOwnProperty(l.subDomain)||"year"===l.subDomain)throw new Error("The subDomain '"+l.subDomain+"' is not valid");if(k._domainType[l.domain].level<=k._domainType[l.subDomain].level)throw new Error("'"+l.subDomain+"' is not a valid subDomain to '"+l.domain+"'");return!0}function e(){if(!a.hasOwnProperty("label")||a.hasOwnProperty("label")&&!a.label.hasOwnProperty("align")){switch(l.label.position){case"left":l.label.align="right";break;case"right":l.label.align="left";break;default:l.label.align="center"}"left"===l.label.rotate?l.label.align="right":"right"===l.label.rotate&&(l.label.align="left")}(!a.hasOwnProperty("label")||a.hasOwnProperty("label")&&!a.label.hasOwnProperty("offset"))&&("left"!==l.label.position&&"right"!==l.label.position||(l.label.offset={x:10,y:15}))}function f(){switch(l.legendVerticalPosition){case"top":l.legendMargin[2]=k.DEFAULT_LEGEND_MARGIN;break;case"bottom":l.legendMargin[0]=k.DEFAULT_LEGEND_MARGIN;break;case"middle":case"center":l.legendMargin["right"===l.legendHorizontalPosition?3:1]=k.DEFAULT_LEGEND_MARGIN}}function g(a){switch("number"==typeof a&&(a=[a]),Array.isArray(a)||(console.log("Margin only takes an integer or an array of integers"),a=[0]),a.length){case 1:return[a[0],a[0],a[0],a[0]];case 2:return[a[0],a[1],a[0],a[1]];case 3:return[a[0],a[1],a[2],a[1]];case 4:return a;default:return a.slice(0,4)}}function h(a){return"string"==typeof a?[a,a+(""!==a?"s":"")]:Array.isArray(a)?1===a.length?[a[0],a[0]+"s"]:a.length>2?a.slice(0,2):a:["item","items"]}function i(a){return a>0?a:null}function j(a){return a>0&&l.colLimit>0?(console.log("colLimit and rowLimit are mutually exclusive, rowLimit will be ignored"),null):a>0?a:null}var k=this,l=k.options=mergeRecursive(k.options,a);if(d(),b(l.itemSelector,!1,"itemSelector"),k.allowedDataType.indexOf(l.dataType)===-1)throw new Error("The data type '"+l.dataType+"' is not valid data type");if(null===d3.select(l.itemSelector)[0][0])throw new Error("The node '"+l.itemSelector+"' specified in itemSelector does not exists");try{b(l.nextSelector,!0,"nextSelector"),b(l.previousSelector,!0,"previousSelector")}catch(a){return console.log(a.message),!1}a.hasOwnProperty("subDomain")||(this.options.subDomain=c(a.domain)),"string"==typeof l.itemNamespace&&""!==l.itemNamespace||(console.log("itemNamespace can not be empty, falling back to cal-heatmap"),l.itemNamespace="cal-heatmap");var m=["data","onComplete","onClick","afterLoad","afterLoadData","afterLoadPreviousDomain","afterLoadNextDomain"];for(var n in m)a.hasOwnProperty(m[n])&&(l[m[n]]=a[m[n]]);return l.subDomainDateFormat="string"==typeof l.subDomainDateFormat||"function"==typeof l.subDomainDateFormat?l.subDomainDateFormat:this._domainType[l.subDomain].format.date,l.domainLabelFormat="string"==typeof l.domainLabelFormat||"function"==typeof l.domainLabelFormat?l.domainLabelFormat:this._domainType[l.domain].format.legend,l.subDomainTextFormat="string"==typeof l.subDomainTextFormat&&""!==l.subDomainTextFormat||"function"==typeof l.subDomainTextFormat?l.subDomainTextFormat:null,l.domainMargin=g(l.domainMargin),l.legendMargin=g(l.legendMargin),l.highlight=k.expandDateSetting(l.highlight),l.itemName=h(l.itemName),l.colLimit=i(l.colLimit),l.rowLimit=j(l.rowLimit),a.hasOwnProperty("legendMargin")||f(),e(),this._init()},expandDateSetting:function(a){"use strict";return Array.isArray(a)||(a=[a]),a.map(function(a){return"now"===a?new Date:a instanceof Date&&a}).filter(function(a){return a!==!1})},fill:function(a){"use strict";function b(a){return null!==d.legendScale&&void a.attr("fill",function(a){return null===a.v&&e.hasOwnProperty("considerMissingDataAsZero")&&!e.considerMissingDataAsZero&&e.legendColors.hasOwnProperty("base")?e.legendColors.base:null!==e.legendColors&&e.legendColors.hasOwnProperty("empty")&&(0===a.v||null===a.v&&e.hasOwnProperty("considerMissingDataAsZero")&&e.considerMissingDataAsZero)?e.legendColors.empty:a.v<0&&e.legend[0]>0&&null!==e.legendColors&&e.legendColors.hasOwnProperty("overflow")?e.legendColors.overflow:d.legendScale(Math.min(a.v,e.legend[e.legend.length-1]))})}function c(a){"function"==typeof e.subDomainTextFormat&&a.text(function(a){return e.subDomainTextFormat(a.t,a.v)})}var d=this,e=d.options;0===arguments.length&&(a=d.root.selectAll(".graph-domain"));var f=a.selectAll("svg").selectAll("g").data(function(a){return d._domains.get(a)});f.transition().duration(e.animationDuration).select("rect").attr("class",function(a){var b=d.getHighlightClassName(a.t).trim().split(" "),c=d.dateIsLessThan(a.t,new Date),f=d.dateIsEqual(a.t,new Date);return(null===d.legendScale||null===a.v&&e.hasOwnProperty("considerMissingDataAsZero")&&!e.considerMissingDataAsZero&&!e.legendColors.hasOwnProperty("base"))&&b.push("graph-rect"),f?b.push("now"):c||b.push("future"),null!==a.v?b.push(d.Legend.getClass(a.v,null===d.legendScale)):e.considerMissingDataAsZero&&c&&b.push(d.Legend.getClass(0,null===d.legendScale)),null!==e.onClick&&b.push("hover_cursor"),b.join(" ")}).call(b),f.transition().duration(e.animationDuration).select("title").text(function(a){return d.getSubDomainTitle(a)}),f.transition().duration(e.animationDuration).select("text").attr("class",function(a){return"subdomain-text"+d.getHighlightClassName(a.t)}).call(c)},triggerEvent:function(a,b,c){"use strict";return!!(3===arguments.length&&c||null===this.options[a])||("function"==typeof this.options[a]?("function"==typeof b&&(b=b()),this.options[a].apply(this,b)):(console.log("Provided callback for "+a+" is not a function."),!1))},onClick:function(a,b){"use strict";return this.triggerEvent("onClick",[a,b])},afterLoad:function(){"use strict";return this.triggerEvent("afterLoad")},onComplete:function(){"use strict";var a=this.triggerEvent("onComplete",[],this._completed);return this._completed=!0,a},afterLoadPreviousDomain:function(a){"use strict";var b=this;return this.triggerEvent("afterLoadPreviousDomain",function(){var c=b.getSubDomain(a);return[c.shift(),c.pop()]})},afterLoadNextDomain:function(a){"use strict";var b=this;return this.triggerEvent("afterLoadNextDomain",function(){var c=b.getSubDomain(a);return[c.shift(),c.pop()]})},onMinDomainReached:function(a){"use strict";return this._minDomainReached=a,this.triggerEvent("onMinDomainReached",[a])},onMaxDomainReached:function(a){"use strict";return this._maxDomainReached=a,this.triggerEvent("onMaxDomainReached",[a])},checkIfMinDomainIsReached:function(a,b){"use strict";this.minDomainIsReached(a)&&this.onMinDomainReached(!0),2===arguments.length&&this._maxDomainReached&&!this.maxDomainIsReached(b)&&this.onMaxDomainReached(!1)},checkIfMaxDomainIsReached:function(a,b){"use strict";this.maxDomainIsReached(a)&&this.onMaxDomainReached(!0),2===arguments.length&&this._minDomainReached&&!this.minDomainIsReached(b)&&this.onMinDomainReached(!1)},formatNumber:d3.format(",g"),formatDate:function(a,b){"use strict";if(arguments.length<2&&(b="title"),"function"==typeof b)return b(a);var c=d3.time.format(b);return c(a)},getSubDomainTitle:function(a){"use strict";if(null!==a.v||this.options.considerMissingDataAsZero){var b=a.v;return null===b&&this.options.considerMissingDataAsZero&&(b=0),this.options.subDomainTitleFormat.filled.format({count:this.formatNumber(b),name:this.options.itemName[1!==b?1:0],connector:this._domainType[this.options.subDomain].format.connector,date:this.formatDate(new Date(a.t),this.options.subDomainDateFormat)})}return this.options.subDomainTitleFormat.empty.format({date:this.formatDate(new Date(a.t),this.options.subDomainDateFormat)})},loadNextDomain:function(a){"use strict";if(this._maxDomainReached||0===a)return!1;var b=this.loadNewDomains(this.NAVIGATE_RIGHT,this.getDomain(this.getNextDomain(),a));return this.afterLoadNextDomain(b.end),this.checkIfMaxDomainIsReached(this.getNextDomain().getTime(),b.start),!0},loadPreviousDomain:function(a){"use strict";if(this._minDomainReached||0===a)return!1;var b=this.loadNewDomains(this.NAVIGATE_LEFT,this.getDomain(this.getDomainKeys()[0],-a).reverse());return this.afterLoadPreviousDomain(b.start),this.checkIfMinDomainIsReached(b.start,b.end),!0},loadNewDomains:function(a,b){"use strict";function c(a){return{t:d._domainType[d.options.subDomain].extractUnit(a),v:null}}for(var d=this,e=a===this.NAVIGATE_LEFT,f=-1,g=b.length,h=this.getDomainKeys();++f<g;){if(e&&this.minDomainIsReached(b[f])){b=b.slice(0,f+1);break}if(!e&&this.maxDomainIsReached(b[f])){b=b.slice(0,f);break}}for(b=b.slice(-this.options.range),f=0,g=b.length;f<g;f++)this._domains.set(b[f].getTime(),this.getSubDomain(b[f]).map(c)),this._domains.remove(e?h.pop():h.shift());return h=this.getDomainKeys(),e&&(b=b.reverse()),this.paint(a),this.getDatas(this.options.data,b[0],this.getSubDomain(b[b.length-1]).pop(),function(){d.fill(d.lastInsertedSvg)}),{start:b[e?0:1],end:h[h.length-1]}},maxDomainIsReached:function(a){"use strict";return null!==this.options.maxDate&&this.options.maxDate.getTime()<a},minDomainIsReached:function(a){"use strict";return null!==this.options.minDate&&this.options.minDate.getTime()>=a},getDomainKeys:function(){"use strict";return this._domains.keys().map(function(a){return parseInt(a,10)}).sort(function(a,b){return a-b})},positionSubDomainX:function(a){"use strict";var b=this._domainType[this.options.subDomain].position.x(new Date(a));return b*this.options.cellSize+b*this.options.cellPadding},positionSubDomainY:function(a){"use strict";var b=this._domainType[this.options.subDomain].position.y(new Date(a));return b*this.options.cellSize+b*this.options.cellPadding},getSubDomainColumnNumber:function(a){"use strict";if(this.options.rowLimit>0){var b=this._domainType[this.options.subDomain].maxItemNumber;return"function"==typeof b&&(b=b(a)),Math.ceil(b/this.options.rowLimit)}var c=this._domainType[this.options.subDomain].defaultColumnNumber;return"function"==typeof c&&(c=c(a)),this.options.colLimit||c},getSubDomainRowNumber:function(a){"use strict";if(this.options.colLimit>0){var b=this._domainType[this.options.subDomain].maxItemNumber;return"function"==typeof b&&(b=b(a)),Math.ceil(b/this.options.colLimit)}var c=this._domainType[this.options.subDomain].defaultRowNumber;return"function"==typeof c&&(c=c(a)),this.options.rowLimit||c},getHighlightClassName:function(a){"use strict";if(a=new Date(a),this.options.highlight.length>0)for(var b in this.options.highlight)if(this.dateIsEqual(this.options.highlight[b],a))return this.isNow(this.options.highlight[b])?" highlight-now":" highlight";return""},isNow:function(a){"use strict";return this.dateIsEqual(a,new Date)},dateIsEqual:function(a,b){"use strict";switch(a instanceof Date||(a=new Date(a)),b instanceof Date||(b=new Date(b)),this.options.subDomain){case"x_min":case"min":return a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()===b.getDate()&&a.getHours()===b.getHours()&&a.getMinutes()===b.getMinutes();case"x_hour":case"hour":return a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()===b.getDate()&&a.getHours()===b.getHours();case"x_day":case"day":return a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth()&&a.getDate()===b.getDate();case"x_week":case"week":return a.getFullYear()===b.getFullYear()&&this.getWeekNumber(a)===this.getWeekNumber(b);case"x_month":case"month":return a.getFullYear()===b.getFullYear()&&a.getMonth()===b.getMonth();default:return!1}},dateIsLessThan:function(a,b){"use strict";function c(a,b){switch(b){case"x_min":case"min":return new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours(),a.getMinutes()).getTime();case"x_hour":case"hour":return new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours()).getTime();case"x_day":case"day":return new Date(a.getFullYear(),a.getMonth(),a.getDate()).getTime();case"x_week":case"week":case"x_month":case"month":return new Date(a.getFullYear(),a.getMonth()).getTime();default:return a.getTime()}}return a instanceof Date||(a=new Date(a)),b instanceof Date||(b=new Date(b)),c(a,this.options.subDomain)<c(b,this.options.subDomain)},getDayOfYear:d3.time.format("%j"),getWeekNumber:function(a){"use strict";var b=this.options.weekStartOnMonday===!0?d3.time.format("%W"):d3.time.format("%U");return b(a)},getMonthWeekNumber:function(a){"use strict";"number"==typeof a&&(a=new Date(a));var b=this.getWeekNumber(new Date(a.getFullYear(),a.getMonth()));return this.getWeekNumber(a)-b-1},getWeekNumberInYear:function(a){"use strict";"number"==typeof a&&(a=new Date(a))},getDayCountInMonth:function(a){"use strict";return this.getEndOfMonth(a).getDate()},getDayCountInYear:function(a){"use strict";return"number"==typeof a&&(a=new Date(a)),1===new Date(a.getFullYear(),1,29).getMonth()?366:365},getWeekDay:function(a){"use strict";return this.options.weekStartOnMonday===!1?a.getDay():0===a.getDay()?6:a.getDay()-1},getEndOfMonth:function(a){"use strict";return"number"==typeof a&&(a=new Date(a)),new Date(a.getFullYear(),a.getMonth()+1,0)},jumpDate:function(a,b,c){"use strict";var d=new Date(a);switch(c){case"hour":d.setHours(d.getHours()+b);break;case"day":d.setHours(d.getHours()+24*b);break;case"week":d.setHours(d.getHours()+24*b*7);break;case"month":d.setMonth(d.getMonth()+b);break;case"year":d.setFullYear(d.getFullYear()+b)}return new Date(d)},getMinuteDomain:function(a,b){"use strict";var c=new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours()),d=null;return d=b instanceof Date?new Date(b.getFullYear(),b.getMonth(),b.getDate(),b.getHours()):new Date(+c+1e3*b*60),d3.time.minutes(Math.min(c,d),Math.max(c,d))},getHourDomain:function(a,b){"use strict";var c=new Date(a.getFullYear(),a.getMonth(),a.getDate(),a.getHours()),d=null;b instanceof Date?d=new Date(b.getFullYear(),b.getMonth(),b.getDate(),b.getHours()):(d=new Date(c),d.setHours(d.getHours()+b));var e=d3.time.hours(Math.min(c,d),Math.max(c,d)),f=0,g=e.length;for(f=0;f<g;f++)if(f>0&&e[f].getHours()===e[f-1].getHours()){this.DSTDomain.push(e[f].getTime()),e.splice(f,1);break}return"number"==typeof b&&e.length>Math.abs(b)&&e.splice(e.length-1,1),e},getDayDomain:function(a,b){"use strict";var c=new Date(a.getFullYear(),a.getMonth(),a.getDate()),d=null;return b instanceof Date?d=new Date(b.getFullYear(),b.getMonth(),b.getDate()):(d=new Date(c),d=new Date(d.setDate(d.getDate()+parseInt(b,10)))),d3.time.days(Math.min(c,d),Math.max(c,d))},getWeekDomain:function(a,b){"use strict";var c;this.options.weekStartOnMonday===!1?c=new Date(a.getFullYear(),a.getMonth(),a.getDate()-a.getDay()):1===a.getDay()?c=new Date(a.getFullYear(),a.getMonth(),a.getDate()):0===a.getDay()?(c=new Date(a.getFullYear(),a.getMonth(),a.getDate()),c.setDate(c.getDate()-6)):c=new Date(a.getFullYear(),a.getMonth(),a.getDate()-a.getDay()+1);var d=new Date(c),e=b;return"object"!=typeof b&&(e=new Date(d.setDate(d.getDate()+7*b))),this.options.weekStartOnMonday===!0?d3.time.mondays(Math.min(c,e),Math.max(c,e)):d3.time.sundays(Math.min(c,e),Math.max(c,e))},getMonthDomain:function(a,b){"use strict";var c=new Date(a.getFullYear(),a.getMonth()),d=null;return b instanceof Date?d=new Date(b.getFullYear(),b.getMonth()):(d=new Date(c),d=d.setMonth(d.getMonth()+b)),d3.time.months(Math.min(c,d),Math.max(c,d))},getYearDomain:function(a,b){
	"use strict";var c=new Date(a.getFullYear(),0),d=null;return d=b instanceof Date?new Date(b.getFullYear(),0):new Date(a.getFullYear()+b,0),d3.time.years(Math.min(c,d),Math.max(c,d))},getDomain:function(a,b){"use strict";switch("number"==typeof a&&(a=new Date(a)),arguments.length<2&&(b=this.options.range),this.options.domain){case"hour":var c=this.getHourDomain(a,b);return"number"==typeof b&&c.length<b&&(b>0?c.push(this.getHourDomain(c[c.length-1],2)[1]):c.shift(this.getHourDomain(c[0],-2)[0])),c;case"day":return this.getDayDomain(a,b);case"week":return this.getWeekDomain(a,b);case"month":return this.getMonthDomain(a,b);case"year":return this.getYearDomain(a,b)}},getSubDomain:function(a){"use strict";"number"==typeof a&&(a=new Date(a));var b=this,c=function(a,c){switch(c){case"year":return b.getDayCountInYear(a);case"month":return b.getDayCountInMonth(a);case"week":return 7}},d=function(a,b){switch(b){case"hour":return 60;case"day":return 1440;case"week":return 10080}},e=function(a,c){switch(c){case"day":return 24;case"week":return 168;case"month":return 24*b.getDayCountInMonth(a)}},f=function(a,c){if("month"===c){var d=new Date(a.getFullYear(),a.getMonth()+1,0),e=b.getWeekNumber(d),f=b.getWeekNumber(new Date(a.getFullYear(),a.getMonth()));return f>e&&(f=0,e++),e-f+1}if("year"===c)return b.getWeekNumber(new Date(a.getFullYear(),11,31))};switch(this.options.subDomain){case"x_min":case"min":return this.getMinuteDomain(a,d(a,this.options.domain));case"x_hour":case"hour":return this.getHourDomain(a,e(a,this.options.domain));case"x_day":case"day":return this.getDayDomain(a,c(a,this.options.domain));case"x_week":case"week":return this.getWeekDomain(a,f(a,this.options.domain));case"x_month":case"month":return this.getMonthDomain(a,12)}},getNextDomain:function(a){"use strict";return 0===arguments.length&&(a=1),this.getDomain(this.jumpDate(this.getDomainKeys().pop(),a,this.options.domain),1)[0]},getPreviousDomain:function(a){"use strict";return 0===arguments.length&&(a=1),this.getDomain(this.jumpDate(this.getDomainKeys().shift(),-a,this.options.domain),1)[0]},getDatas:function(a,b,c,d,e,f){"use strict";var g=this;arguments.length<5&&(e=!0),arguments.length<6&&(f=this.APPEND_ON_UPDATE);var h=function(a){e!==!1?"function"==typeof e?a=e(a):"function"==typeof g.options.afterLoadData?a=g.options.afterLoadData(a):console.log("Provided callback for afterLoadData is not a function."):"csv"!==g.options.dataType&&"tsv"!==g.options.dataType||(a=this.interpretCSV(a)),g.parseDatas(a,f,b,c),"function"==typeof d&&d()};switch(typeof a){case"string":if(""===a)return h({}),!0;var i=this.parseURI(a,b,c),j="GET";null!==g.options.dataPostPayload&&(j="POST");var k=null;switch(null!==g.options.dataPostPayload&&(k=this.parseURI(g.options.dataPostPayload,b,c)),this.options.dataType){case"json":d3.json(i,h).send(j,k);break;case"csv":d3.csv(i,h).send(j,k);break;case"tsv":d3.tsv(i,h).send(j,k);break;case"txt":d3.text(i,"text/plain",h).send(j,k)}return!1;case"object":if(a===Object(a))return h(a),!1;default:return h({}),!0}},parseDatas:function(a,b,c,d){"use strict";b===this.RESET_ALL_ON_UPDATE&&this._domains.forEach(function(a,b){b.forEach(function(a,b,c){c[b].v=null})});var e={},f=function(a){return a.t};for(var g in a){var h=new Date(1e3*g),i=this.getDomain(h)[0].getTime();if(this.DSTDomain.indexOf(i)>=0&&this._domains.has(i-36e5)&&(i-=36e5),!isNaN(g)&&a.hasOwnProperty(g)&&this._domains.has(i)&&i>=+c&&i<+d){var j=this._domains.get(i);e.hasOwnProperty(i)||(e[i]=j.map(f));var k=e[i].indexOf(this._domainType[this.options.subDomain].extractUnit(h));b===this.RESET_SINGLE_ON_UPDATE?j[k].v=a[g]:isNaN(j[k].v)?j[k].v=a[g]:j[k].v+=a[g]}}},parseURI:function(a,b,c){"use strict";return a=a.replace(/\{\{t:start\}\}/g,b.getTime()/1e3),a=a.replace(/\{\{t:end\}\}/g,c.getTime()/1e3),a=a.replace(/\{\{d:start\}\}/g,b.toISOString()),a=a.replace(/\{\{d:end\}\}/g,c.toISOString())},interpretCSV:function(a){"use strict";var b,c,d={},e=Object.keys(a[0]);for(b=0,c=a.length;b<c;b++)d[a[b][e[0]]]=+a[b][e[1]];return d},resize:function(){"use strict";var a=this,b=a.options,c=b.displayLegend?a.Legend.getDim("width")+b.legendMargin[1]+b.legendMargin[3]:0,d=b.displayLegend?a.Legend.getDim("height")+b.legendMargin[0]+b.legendMargin[2]:0,e=a.graphDim.width-b.domainGutter-b.cellPadding,f=a.graphDim.height-b.domainGutter-b.cellPadding;this.root.transition().duration(b.animationDuration).attr("width",function(){return"middle"===b.legendVerticalPosition||"center"===b.legendVerticalPosition?e+c:Math.max(e,c)}).attr("height",function(){return"middle"===b.legendVerticalPosition||"center"===b.legendVerticalPosition?Math.max(f,d):f+d}),this.root.select(".graph").transition().duration(b.animationDuration).attr("y",function(){return"top"===b.legendVerticalPosition?d:0}).attr("x",function(){return"middle"!==b.legendVerticalPosition&&"center"!==b.legendVerticalPosition||"left"!==b.legendHorizontalPosition?0:c})},next:function(a){"use strict";return 0===arguments.length&&(a=1),this.loadNextDomain(a)},previous:function(a){"use strict";return 0===arguments.length&&(a=1),this.loadPreviousDomain(a)},jumpTo:function(a,b){"use strict";arguments.length<2&&(b=!1);var c=this.getDomainKeys(),d=c[0],e=c[c.length-1];return a<d?this.loadPreviousDomain(this.getDomain(d,a).length):b?this.loadNextDomain(this.getDomain(d,a).length):a>e&&this.loadNextDomain(this.getDomain(e,a).length)},rewind:function(){"use strict";this.jumpTo(this.options.start,!0)},update:function(a,b,c){"use strict";arguments.length<2&&(b=!0),arguments.length<3&&(c=this.RESET_ALL_ON_UPDATE);var d=this.getDomainKeys(),e=this;this.getDatas(a,new Date(d[0]),this.getSubDomain(d[d.length-1]).pop(),function(){e.fill()},b,c)},setLegend:function(){"use strict";var a=this.options.legend.slice(0);arguments.length>=1&&Array.isArray(arguments[0])&&(this.options.legend=arguments[0]),arguments.length>=2&&(Array.isArray(arguments[1])&&arguments[1].length>=2?this.options.legendColors=[arguments[1][0],arguments[1][1]]:this.options.legendColors=arguments[1]),(arguments.length>0&&!arrayEquals(a,this.options.legend)||arguments.length>=2)&&(this.Legend.buildColors(),this.fill()),this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding)},removeLegend:function(){"use strict";return!!this.options.displayLegend&&(this.options.displayLegend=!1,this.Legend.remove(),!0)},showLegend:function(){"use strict";return!this.options.displayLegend&&(this.options.displayLegend=!0,this.Legend.redraw(this.graphDim.width-this.options.domainGutter-this.options.cellPadding),!0)},highlight:function(a){"use strict";return(this.options.highlight=this.expandDateSetting(a)).length>0&&(this.fill(),!0)},destroy:function(a){"use strict";return this.root.transition().duration(this.options.animationDuration).attr("width",0).attr("height",0).remove().each("end",function(){"function"==typeof a?a():"undefined"!=typeof a&&console.log("Provided callback for destroy() is not a function.")}),null},getSVG:function(){"use strict";for(var a={".cal-heatmap-container":{},".graph":{},".graph-rect":{},"rect.highlight":{},"rect.now":{},"rect.highlight-now":{},"text.highlight":{},"text.now":{},"text.highlight-now":{},".domain-background":{},".graph-label":{},".subdomain-text":{},".q0":{},".qi":{}},b=1,c=this.options.legend.length+1;b<=c;b++)a[".q"+b]={};var d=this.root,e=["stroke","stroke-width","stroke-opacity","stroke-dasharray","stroke-dashoffset","stroke-linecap","stroke-miterlimit","fill","fill-opacity","fill-rule","marker","marker-start","marker-mid","marker-end","alignement-baseline","baseline-shift","dominant-baseline","glyph-orientation-horizontal","glyph-orientation-vertical","kerning","text-anchor","shape-rendering","text-transform","font-family","font","font-size","font-weight"],f=function(b,c,d){e.indexOf(c)!==-1&&(a[b][c]=d)},g=function(a){return d.select(a)[0][0]};for(var h in a)if(a.hasOwnProperty(h)){var i=g(h);if(null!==i)if("getComputedStyle"in window){var j=getComputedStyle(i,null);if(0!==j.length)for(var k=0;k<j.length;k++)f(h,j.item(k),j.getPropertyValue(j.item(k)));else for(var l in j)j.hasOwnProperty(l)&&f(h,l,j[l])}else if("currentStyle"in i){var m=i.currentStyle;for(var n in m)f(h,n,m[n])}}var o='<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><style type="text/css"><![CDATA[ ';for(var p in a){o+=p+" {\n";for(var q in a[p])o+="\t"+q+":"+a[p][q]+";\n";o+="}\n"}return o+="]]></style>",o+=(new XMLSerializer).serializeToString(this.root[0][0]),o+="</svg>"}};var DomainPosition=function(){"use strict";this.positions=d3.map()};DomainPosition.prototype.getPosition=function(a){"use strict";return this.positions.get(a)},DomainPosition.prototype.getPositionFromIndex=function(a){"use strict";var b=this.getKeys();return this.positions.get(b[a])},DomainPosition.prototype.getLast=function(){"use strict";var a=this.getKeys();return this.positions.get(a[a.length-1])},DomainPosition.prototype.setPosition=function(a,b){"use strict";this.positions.set(a,b)},DomainPosition.prototype.shiftRightBy=function(a){"use strict";this.positions.forEach(function(b,c){this.set(b,c-a)});var b=this.getKeys();this.positions.remove(b[0])},DomainPosition.prototype.shiftLeftBy=function(a){"use strict";this.positions.forEach(function(b,c){this.set(b,c+a)});var b=this.getKeys();this.positions.remove(b[b.length-1])},DomainPosition.prototype.getKeys=function(){"use strict";return this.positions.keys().sort(function(a,b){return parseInt(a,10)-parseInt(b,10)})};var Legend=function(a){"use strict";this.calendar=a,this.computeDim(),null!==a.options.legendColors&&this.buildColors()};Legend.prototype.computeDim=function(){"use strict";var a=this.calendar.options;this.dim={width:a.legendCellSize*(a.legend.length+1)+a.legendCellPadding*a.legend.length,height:a.legendCellSize}},Legend.prototype.remove=function(){"use strict";this.calendar.root.select(".graph-legend").remove(),this.calendar.resize()},Legend.prototype.redraw=function(a){"use strict";function b(a){a.attr("width",i.legendCellSize).attr("height",i.legendCellSize).attr("x",function(a,b){return b*(i.legendCellSize+i.legendCellPadding)})}function c(){switch(i.legendHorizontalPosition){case"right":return"center"===i.legendVerticalPosition||"middle"===i.legendVerticalPosition?a+i.legendMargin[3]:a-f.getDim("width")-i.legendMargin[1];case"middle":case"center":return Math.round(a/2-f.getDim("width")/2);default:return i.legendMargin[3]}}function d(){return"bottom"===i.legendVerticalPosition?g.graphDim.height+i.legendMargin[0]-i.domainGutter-i.cellPadding:i.legendMargin[0]}if(!this.calendar.options.displayLegend)return!1;var e,f=this,g=this.calendar,h=g.root,i=g.options;this.computeDim();var j=i.legend.slice(0);j.push(j[j.length-1]+1);var k=g.root.select(".graph-legend");null!==k[0][0]?(h=k,e=h.select("g").selectAll("rect").data(j)):(h="top"===i.legendVerticalPosition?h.insert("svg",".graph"):h.append("svg"),h.attr("x",c()).attr("y",d()),e=h.attr("class","graph-legend").attr("height",f.getDim("height")).attr("width",f.getDim("width")).append("g").selectAll().data(j)),e.enter().append("rect").call(b).attr("class",function(a){return g.Legend.getClass(a,null===g.legendScale)}).attr("fill-opacity",0).call(function(a){null!==g.legendScale&&null!==i.legendColors&&i.legendColors.hasOwnProperty("base")&&a.attr("fill",i.legendColors.base)}).append("title"),e.exit().transition().duration(i.animationDuration).attr("fill-opacity",0).remove(),e.transition().delay(function(a,b){return i.animationDuration*b/10}).call(b).attr("fill-opacity",1).call(function(a){a.attr("fill",function(a,b){return null===g.legendScale?"":0===b?g.legendScale(a-1):g.legendScale(i.legend[b-1])}),a.attr("class",function(a){return g.Legend.getClass(a,null===g.legendScale)})}),e.select("title").text(function(a,b){return 0===b?i.legendTitleFormat.lower.format({min:i.legend[b],name:i.itemName[1]}):b===j.length-1?i.legendTitleFormat.upper.format({max:i.legend[b-1],name:i.itemName[1]}):i.legendTitleFormat.inner.format({down:i.legend[b-1],up:i.legend[b],name:i.itemName[1]})}),h.transition().duration(i.animationDuration).attr("x",c()).attr("y",d()).attr("width",f.getDim("width")).attr("height",f.getDim("height")),h.select("g").transition().duration(i.animationDuration).attr("transform",function(){return"vertical"===i.legendOrientation?"rotate(90 "+i.legendCellSize/2+" "+i.legendCellSize/2+")":""}),g.resize()},Legend.prototype.getDim=function(a){"use strict";var b="horizontal"===this.calendar.options.legendOrientation;switch(a){case"width":return this.dim[b?"width":"height"];case"height":return this.dim[b?"height":"width"]}},Legend.prototype.buildColors=function(){"use strict";var a=this.calendar.options;if(null===a.legendColors)return this.calendar.legendScale=null,!1;var b=[];if(Array.isArray(a.legendColors))b=a.legendColors;else{if(!a.legendColors.hasOwnProperty("min")||!a.legendColors.hasOwnProperty("max"))return a.legendColors=null,!1;b=[a.legendColors.min,a.legendColors.max]}var c=a.legend.slice(0);c[0]>0?c.unshift(0):c[0]<0&&c.unshift(c[0]-(c[c.length-1]-c[0])/c.length);var d=d3.scale.linear().range(b).interpolate(d3.interpolateHcl).domain([d3.min(c),d3.max(c)]),e=c.map(function(a){return d(a)});return this.calendar.legendScale=d3.scale.threshold().domain(a.legend).range(e),!0},Legend.prototype.getClass=function(a,b){"use strict";if(null===a||isNaN(a))return"";for(var c=[this.calendar.options.legend.length+1],d=0,e=this.calendar.options.legend.length-1;d<=e;d++){if(this.calendar.options.legend[0]>0&&a<0){c=["1","i"];break}if(a<=this.calendar.options.legend[d]){c=[d+1];break}}return 0===a&&c.push(0),c.unshift(""),(c.join(" r")+(b?c.join(" q"):"")).trim()},String.prototype.format=function(){"use strict";var a=this;for(var b in arguments[0])if(arguments[0].hasOwnProperty(b)){var c=new RegExp("\\{"+b+"\\}","gi");a=a.replace(c,arguments[0][b])}return a}, true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(238)], __WEBPACK_AMD_DEFINE_RESULT__ = function(){"use strict";return CalHeatMap}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"object"==typeof module&&module.exports?module.exports=CalHeatMap:window.CalHeatMap=CalHeatMap;

/***/ },
/* 272 */
/***/ function(module, exports) {

	module.exports = "\n\n<div id=\"temporal-info-modal\" class=\"modal fade\"  tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"temporal-info-modal-label\"\naria-hidden=\"true\">\n    <div class=\"modal-dialog \" role=\"document\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">&times;</button>\n                <h3 id=\"temporal-info-modal-label\" class=\"modal-title\">Video Temporal Hotness</h3>\n            </div>\n\n            <div class=\"modal-body\">\n                <div v-cal-heatmap=\"hotnessData.hotness\" \n                :start-date=\"hotnessData.startDate\" \n                :end-date=\"hotnessData.endDate\"\n                style=\"width:100%; height: 250px; \">\n                </div>\n                <hr>\n                <!--TODO here, privide the filter of byWeek and byAny days-->\n                <div>\n                    <div class=\"sliderExample\">\n                        <a name=\"ex1\"></a>\n                        <strong>week {{vals.week}}</strong>\n                        <div ui-slider=\"slider.optionsWeek\" min=\"1\" max=\"{{weekRange}}\" ng-model=\"vals.week\" style=\"margin-top:15px\"></div>\n                    </div>\n\n                    <hr>\n\n                    <div class=\"sliderExample\">\n                        <a name=\"ex6\"></a>\n                        <strong style=\"margin-bottom: 15px\">from day {{vals.range[0]}} to day {{vals.range[1]}}</strong>\n                        <div ui-slider=\"slider.optionsRange\" min=\"1\" max=\"{{dayRange}}\" ng-model=\"vals.range\" style=\"margin-top:15px\"></div>\n                    </div>\n                </div>\n                <!--TODO above, privide the filter of byWeek and byAny days-->\n            </div>\n\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\" aria-label=\"Close\">Close</button>\n            </div>\n        </div>\n    </div>\n</div>\n\n<!--Button-->\n<div v-show=\"hotnessData.hotness\" class=\"statisitc-icon\" data-toggle=\"modal\" data-target=\"#temporal-info-modal\">\n    <span class=\"fa fa-calendar\"></span>\n    <br/>Temporal Info\n</div>\n\n";

/***/ },
/* 273 */
/***/ function(module, exports) {

	module.exports = "\n\n<div class=\"dash-category-label\">\n    <hr>Course\n    <hr>\n</div>\n    \n<tl-course-info></tl-course-info>\n<tl-videopop-info></tl-videopop-info>\n<tl-demographic-info></tl-demographic-info>\n\n<!-- video -->\n<div class=\"dash-category-label\">\n    <hr> Video\n    <hr>\n</div>\n\n<tl-temporal-info></tl-temporal-info>\n\n<!-- forum -->\n<!--<div class=\"dash-category-label\">\n    <hr> Forum\n    <hr>\n</div>\n\n<tl-sentiment></tl-sentiment>\n<tl-social-network></tl-social-network>-->\n\n<!-- peak analysis -->\n<!--<div class=\"dash-category-label\">\n    <hr> Peak\n    <hr>\n</div>\n\n<tl-flowmap></tl-flowmap>\n<tl-mds-glyph></tl-mds-glyph>\n<tl-coorelation></tl-coorelation>\n-->\n";

/***/ },
/* 274 */
/***/ function(module, exports) {

	module.exports = "\r\n\r\n<header  class=\"navbar navbar-fixed-top navbar-inverse\">\r\n    <div class=\"headContainer\">\r\n\t<div class=\"navbar-header\">\r\n\t\t<a class=\"navbar-brand\" style=\"font-size: 24px; color: white; cursor: pointer;\">VisMooc</a>\r\n\t</div>\r\n\r\n\t<div class=\"navbar-header\" style=\"float: right\">\r\n\t\t<a class=\"navbar-brand\" style=\"font-size: 22px; color: #DEDEDE; cursor: pointer;\" href=\"/login\">Login</a>\r\n\t\t<a class=\"navbar-brand\" style=\"font-size: 22px; color: #DEDEDE; cursor: pointer;\">Help</a>\r\n\t</div>\r\n</div>\r\n</header>\r\n\r\n    <div class=\"container-fluid\">\r\n    \r\n    <div class=\"row\">\r\n        <div class=\"col-xs-3 col-sm-3 col-md-3 col-lg-3 sidebar\">\r\n\r\n            <side-bar></side-bar>\r\n        </div>\r\n\r\n        <div class=\"col-sm-8 col-sm-offset-3 col-md-8 col-md-offset-3 col-lg-8 col-lg-offset-3 content\">\r\n            <content></content>\r\n        </div>\r\n\r\n        <div class=\"col-sm-1 col-sm-offset-11 col-md-1 col-md-offset-11 sidebar vistoolkit\">\r\n\r\n            <tool-list></tool-list>\r\n        </div>\r\n    </div>\r\n    </div>\r\n    \r\n";

/***/ }
/******/ ]);
//# sourceMappingURL=dist.js.map